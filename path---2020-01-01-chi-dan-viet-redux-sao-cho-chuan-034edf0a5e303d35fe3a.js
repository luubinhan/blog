webpackJsonp([0xe448eb2058a6],{1613:function(n,t){n.exports={data:{markdownRemark:{html:'<!-- TOC -->\n<ul>\n<li>\n<p><a href="#a-b%E1%BA%AFt-bu%E1%BB%99c">A. Bắt buộc</a></p>\n<ul>\n<li><a href="#ko-mutate-state">Ko mutate state</a></li>\n<li><a href="#reducer-ko-%C4%91%C6%B0%E1%BB%A3c-c%C3%B3-side-effect">Reducer ko được có side effect</a></li>\n<li><a href="#kh%C3%B4ng-%C4%91%C6%B0a-c%C3%A1c-gi%C3%A1-tr%E1%BB%8B-non-serialize-v%C3%A0o-trong-action-v%C3%A0-state">Không đưa các giá trị Non-Serialize vào trong action và state</a></li>\n<li><a href="#ch%E1%BB%89-m%E1%BB%99t-redux-store-cho-app">Chỉ một Redux store cho app</a></li>\n</ul>\n</li>\n<li>\n<p><a href="#b-c%E1%BB%B1c-k%E1%BB%B3-khuy%E1%BA%BFn-kh%C3%ADch">B. Cực kỳ khuyến khích</a></p>\n<ul>\n<li><a href="#s%E1%BB%AD-d%E1%BB%A5ng-redux-toolkit-%C4%91%E1%BB%83-vi%E1%BA%BFt-redux-logic">Sử dụng Redux Toolkit để viết Redux logic</a></li>\n<li><a href="#s%E1%BB%AD-d%E1%BB%A5ng-immer-%C4%91%E1%BB%83-c%E1%BA%ADp-nh%E1%BA%ADp-gi%C3%A1-tr%E1%BB%8B-store">Sử dụng Immer để cập nhập giá trị store</a></li>\n<li><a href="#c%E1%BA%A5u-tr%C3%BAc-file-v%C3%A0-th%C6%B0-m%E1%BB%A5c">Cấu trúc file và thư mục</a></li>\n<li><a href="#%C4%91%C6%B0a-c%C3%A0ng-nhi%E1%BB%81u-logic-v%C3%A0-trong-reducer-c%C3%A0ng-t%E1%BB%91t">Đưa càng nhiều logic và trong reducer càng tốt</a></li>\n<li><a href="#reducer-c%E1%BA%A7n-n%E1%BA%AFm-r%C3%B5-c%E1%BA%A5u-tr%C3%BAc-c%E1%BB%A7a-state">Reducer cần nắm rõ cấu trúc của state</a></li>\n<li><a href="#%C4%91%E1%BA%B7t-t%C3%AAn-state-d%E1%BB%B1a-tr%C3%AAn-d%E1%BB%AF-li%E1%BB%87u-s%E1%BA%BD-l%C6%B0u">Đặt tên state dựa trên dữ liệu sẽ lưu</a></li>\n<li><a href="#xem-reducer-nh%C6%B0-m%E1%BB%99t-c%E1%BB%97-m%C3%A1y-ch%E1%BB%A9a-v%C3%A0-v%E1%BA%ADn-h%C3%A0nh-state">Xem reducer như một cỗ máy chứa và vận hành state</a></li>\n<li><a href="#%C4%91%C6%A1n-gi%E1%BA%A3n-h%C3%B3a-c%C3%A1c-state-ch%E1%BB%93ng-ch%C3%A9oc%C3%B3-quan-h%E1%BB%87-v%E1%BB%9Bi-nhau">Đơn giản hóa các state chồng chéo/có quan hệ với nhau</a></li>\n<li><a href="#c%C3%A1c-action-n%C3%AAn-t%E1%BB%95-ch%E1%BB%A9c-nh%C6%B0-event-kh%C3%B4ng-ph%E1%BA%A3i-setter">Các action nên tổ chức như event, không phải setter</a></li>\n<li><a href="#vi%E1%BA%BFt-t%C3%AAn-action-c%C3%B3-ngh%C4%A9a">Viết tên action có nghĩa</a></li>\n<li><a href="#tr%C3%A1nh-dispatch-c%C3%A1c-action-m%E1%BB%99t-c%C3%A1ch-tu%E1%BA%A7n-t%E1%BB%B1">Tránh dispatch các action một cách tuần tự</a></li>\n<li><a href="#k%E1%BA%BFt-n%E1%BB%91i-c%C3%A0ng-nhi%E1%BB%81u-component-%C4%91%E1%BB%83-%C4%91%E1%BB%8Dc-d%E1%BB%AF-li%E1%BB%87u-trong-store">Kết nối càng nhiều component để đọc dữ liệu trong store</a></li>\n<li><a href="#s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1ch-vi%E1%BA%BFt-t%E1%BA%AFt-cho-mapdispatch-khi-d%C3%B9ng-connect">Sử dụng cách viết tắt cho <code class="language-text">mapDispatch</code> khi dùng <code class="language-text">connect</code></a></li>\n<li><a href="#g%E1%BB%8Di-useselector-nhi%E1%BB%81u-l%E1%BA%A7n-trong-function-component">Gọi <code class="language-text">useSelector</code> nhiều lần trong function component</a></li>\n<li><a href="#s%E1%BB%AD-d%E1%BB%A5ng-redux-devtools">Sử dụng Redux DevTools</a></li>\n</ul>\n</li>\n<li>\n<p><a href="#khuy%E1%BA%BFn-kh%C3%ADch">Khuyến khích</a></p>\n<ul>\n<li><a href="#gi%C3%A1-tr%E1%BB%8B-type-c%E1%BB%A7a-action-n%C3%AAn-l%C3%A0-domaineventname">Giá trị type của action nên là <code class="language-text">domain/eventName</code></a></li>\n<li><a href="#vi%E1%BA%BFt-action-s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1ch-%C4%91%E1%BA%B7t-t%C3%AAn-chu%E1%BA%A9n-c%E1%BB%A7a-flux">Viết action sử dụng cách đặt tên chuẩn của Flux</a></li>\n<li><a href="#s%E1%BB%AD-d%E1%BB%A5ng-action-creator">Sử dụng action creator</a></li>\n<li><a href="#s%E1%BB%AD-d%E1%BB%A5ng-thunk-cho-c%C3%A1c-logic-async">Sử dụng Thunk cho các logic async</a></li>\n<li><a href="#t%C3%A1ch-c%C3%A1c-logic-ph%E1%BB%A9c-t%E1%BA%A1p-ra-kh%E1%BB%8Fi-component">Tách các logic phức tạp ra khỏi component</a></li>\n<li><a href="#s%E1%BB%AD-d%E1%BB%A5ng-selector-function-%C4%91%E1%BB%83-%C4%91%E1%BB%8Dc-d%E1%BB%AF-li%E1%BB%87u-trong-store">Sử dụng selector function để đọc dữ liệu trong store</a></li>\n<li><a href="#tr%C3%A1nh-%C4%91%C6%B0a-state-c%E1%BB%A7a-form-v%C3%A0o-trong-redux">Tránh đưa state của form vào trong redux</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<p>Tài liệu chính thức hướng dẫn viết redux sao cho ngon-sạch, bao gồm những cách làm được đề nghị, kinh nghiệm thực tế và những cách tiếp cận được khuyến khích.</p>\n<p>Cả phần core của Redux và các tài liệu của Redux không hề là chuẩn mực bắt buộc mọi người tuân thủ, có rất nhiều cách để sử dụng Redux, cũng như có rất nhiều cách làm <em>đúng</em> để giải quyết một vấn đề.</p>\n<h2 id="a-bắt-buộc"><a href="#a-b%E1%BA%AFt-bu%E1%BB%99c" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>A. Bắt buộc</h2>\n<h3 id="ko-mutate-state"><a href="#ko-mutate-state" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Ko mutate state</h3>\n<p>Chỉnh sửa state là nguyên nhân gây bug thường thấy trong Redux, như không re-render, time-travel trong Redux DevTools ko hoạt động. Tuyệt đối <strong>KO tự chỉnh sửa giá trị của state</strong>, bao gồm cả trong reducer và bất kỳ chỗ nào trong source code, chỉ được phép <strong>thay thế giá trị của state</strong></p>\n<p>Có thể sử dụng những công cụ như <a href="https://github.com/leoasis/redux-immutable-state-invariant">redux-immutable-state-invariant</a>, <a href="https://immerjs.github.io/immer/docs/introduction">immer</a> để tránh việc vô tình chỉnh sửa state ngoài ý muốn.</p>\n<h3 id="reducer-ko-được-có-side-effect"><a href="#reducer-ko-%C4%91%C6%B0%E1%BB%A3c-c%C3%B3-side-effect" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reducer ko được có side effect</h3>\n<p>Các hàm Reducer chỉ phụ thuộc vào <code class="language-text">state</code> và <code class="language-text">action</code>, chỉ tính toán và trả về giá trị mới dựa vào những tham số này. <strong>Không chạy bất kỳ logic bất đồng bộ nào (AJAX, timeout, promise), các giá trị khởi tạo một cách ngẫu nhiên Date.now, Math.random, thay đổi những giá trị bên ngoài reducer</strong></p>\n<h3 id="không-đưa-các-giá-trị-non-serialize-vào-trong-action-và-state"><a href="#kh%C3%B4ng-%C4%91%C6%B0a-c%C3%A1c-gi%C3%A1-tr%E1%BB%8B-non-serialize-v%C3%A0o-trong-action-v%C3%A0-state" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Không đưa các giá trị Non-Serialize vào trong action và state</h3>\n<p><strong>Tránh dùng các giá trị non-serialize như Promise, Symbol, function, class instance vào trong state hoặc dispatch action.</strong> Điều này còn nhằm đảm bảo các công như Redux DevTool chạy đúng</p>\n<h3 id="chỉ-một-redux-store-cho-app"><a href="#ch%E1%BB%89-m%E1%BB%99t-redux-store-cho-app" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Chỉ một Redux store cho app</h3>\n<p>Với một ứng dụng, <strong>chỉ được sử dụng một Redux store, sử dụng bởi toàn bộ ứng dụng</strong>, khai báo trong file <code class="language-text">store.js</code></p>\n<p>Cũng không có một chỗ nào trong source được import store trực tiếp. Nó phải được truyền vào <code class="language-text">&lt;Provider/&gt;</code>, hoặc tham chiếu thông qua middleware như Thunk.</p>\n<h2 id="b-cực-kỳ-khuyến-khích"><a href="#b-c%E1%BB%B1c-k%E1%BB%B3-khuy%E1%BA%BFn-kh%C3%ADch" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>B. Cực kỳ khuyến khích</h2>\n<h3 id="sử-dụng-redux-toolkit-để-viết-redux-logic"><a href="#s%E1%BB%AD-d%E1%BB%A5ng-redux-toolkit-%C4%91%E1%BB%83-vi%E1%BA%BFt-redux-logic" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sử dụng Redux Toolkit để viết Redux logic</h3>\n<p><a href="https://redux.js.org/redux-toolkit/overview/">Redux Toolkit</a> là bộ công cụ chính thức của chúng tôi (Redux team) để phát triển redux một cách hiệu quả, chuẩn để viết logic redux của chúng tôi.</p>\n<p>Nó bao gồm các hàm để làm việc với các trường hợp phổ biến nhất của Redux, bao gồm cài đặt store, khai báo reducer, các thư viện được sử dụng rộng rãi trong Redux như Redux Thunk, Reselect để viết các selector function.</p>\n<h3 id="sử-dụng-immer-để-cập-nhập-giá-trị-store"><a href="#s%E1%BB%AD-d%E1%BB%A5ng-immer-%C4%91%E1%BB%83-c%E1%BA%ADp-nh%E1%BA%ADp-gi%C3%A1-tr%E1%BB%8B-store" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sử dụng Immer để cập nhập giá trị store</h3>\n<p>Viết update cho store đôi khi rất mệt mỏi, có thể sử dụng thêm công cụ hỗ trợ <a href="https://immerjs.github.io/immer/docs/introduction">immerjs</a>.</p>\n<h3 id="cấu-trúc-file-và-thư-mục"><a href="#c%E1%BA%A5u-tr%C3%BAc-file-v%C3%A0-th%C6%B0-m%E1%BB%A5c" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Cấu trúc file và thư mục</h3>\n<p>Về cơ bản Redux <em>không quan tâm cách bạn tổ chức file và thư mục</em>. Tuy nhiên, trong thực tế việc đặt các logic gần nhau giúp việc cập nhập code nhanh hơn.</p>\n<p>Khuyến khích sử dụng cách tiếp cận "feature folder" hoặc <a href="https://github.com/erikras/ducks-modular-redux">cách làm ducks</a> (tất cả những logic cho feature nằm trong một file duy nhất)</p>\n<p>Một cấu trúc thư mục cơ bản sẽ gồm</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">-/src\n--/index.tsx\n--/app\n---/store.ts\n---/rootReducer.ts\n---/App.tsx\n--/common\n--/features\n---/todos\n----/todosSlice.ts\n----/Todos.tsx</code></pre>\n      </div>\n<h3 id="đưa-càng-nhiều-logic-và-trong-reducer-càng-tốt"><a href="#%C4%91%C6%B0a-c%C3%A0ng-nhi%E1%BB%81u-logic-v%C3%A0-trong-reducer-c%C3%A0ng-t%E1%BB%91t" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Đưa càng nhiều logic và trong reducer càng tốt</h3>\n<p>Nếu có thể, cố gắng đưa càng nhiều logic hoặc tính toán để có một state mới vào trong reducer càng tốt, không nên đưa vào chỗ xử lý tiền dữ liệu như các function handler click. Việc này giúp logic dễ test hơn, tránh lỗi.</p>\n<p>Redux không thực sự quan tâm giá trị mới của state được tính toán bên trong reducer hay trong action creation. Ví dụ như Todo App, việc <em>toggle todo</em> sẽ cập nhập lại mảng <code class="language-text">todos</code> trong store. Có thể tính toán mảng <code class="language-text">todos</code> mới ở cả action và reducer</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// Click handler:</span>\n<span class="token keyword">const</span> <span class="token function-variable function">onTodoClicked</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span> <span class="token string">"todos/toggleTodo"</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// tính toán ở Reducer:</span>\n<span class="token keyword">case</span> <span class="token string">"todos/toggleTodo"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id <span class="token operator">!==</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span> todo<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token operator">...</span>todo<span class="token punctuation">,</span> id<span class="token punctuation">:</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// Tính toán ở action creation:</span>\n<span class="token keyword">const</span> <span class="token function-variable function">onTodoClicked</span> <span class="token operator">=</span> <span class="token parameter">id</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> newTodos <span class="token operator">=</span> todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id <span class="token operator">!==</span> id<span class="token punctuation">)</span> <span class="token keyword">return</span> todo\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>todo<span class="token punctuation">,</span> id <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'todos/toggleTodo\'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token punctuation">{</span> todos<span class="token punctuation">:</span> newTodos <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// Reducer:</span>\n<span class="token keyword">case</span> <span class="token string">"todos/toggleTodo"</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>todos<span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Khuyến khích làm việc này ở reducer vì những nguyên nhân sau</p>\n<ul>\n<li>Test ở Reducer sẽ dễ hơn vì nó là pure function, chỉ cần gọi <code class="language-text">const result = reducer(testState, action)</code> và đưa vào kết quả bạn expect.</li>\n<li>Thay đổi giá trị state luôn tuân theo quy định, không chỉnh sửa-chỉ thay thế. Rõ ràng là việc này sẽ trực quan hơn trong reducer, những nếu ngoài reducer, chúng ta dễ vô tình chỉnh sửa ngoài ý muốn</li>\n<li>Time-travel debug cho phép chúng ta <strong>undo</strong> một dispatch action, rồi <strong>redo</strong> thậm chí thay thế bằng một action khác. Debug sẽ dễ hơn nếu chúng ta đưa logic đó vào reducer</li>\n<li>Khi áp dụng nguyên tắc này, chúng biết được khi cần thay đổi, và nơi state bị thay đổi chắc chắn là trong reducer chứ không đâu khác.</li>\n</ul>\n<p>Có những ngoại lệ có thể tính toán trước, như khởi tạo một ID, nhưng nên tránh là tốt nhất.</p>\n<h3 id="reducer-cần-nắm-rõ-cấu-trúc-của-state"><a href="#reducer-c%E1%BA%A7n-n%E1%BA%AFm-r%C3%B5-c%E1%BA%A5u-tr%C3%BAc-c%E1%BB%A7a-state" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reducer cần nắm rõ cấu trúc của state</h3>\n<p>Các reducer do bạn viết, khi trả về một giá trị đã tính toán của state, phải viết cụ thể là trả về giá trị gì, tránh sử dụng <em>spread/blind return</em> như sau <code class="language-text">return action.payload</code> (blind return), <code class="language-text">return {...state, ...action.payload}</code> (spread return). Vì như vậy, nó sẽ phụ thuộc giá trị truyền vào lúc dispatch action phải đúng với cấu trúc ban đầu. Nếu vô tình dữ liệu này không đúng cấu trúc sẽ có bug.</p>\n<h3 id="đặt-tên-state-dựa-trên-dữ-liệu-sẽ-lưu"><a href="#%C4%91%E1%BA%B7t-t%C3%AAn-state-d%E1%BB%B1a-tr%C3%AAn-d%E1%BB%AF-li%E1%BB%87u-s%E1%BA%BD-l%C6%B0u" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Đặt tên state dựa trên dữ liệu sẽ lưu</h3>\n<p>Object truyền vào cho <code class="language-text">combineReducers</code> sẽ là tên key trả về trong state. Tránh sử dụng từ <code class="language-text">reducer</code> ,</p>\n<p>Ko nên có một object state như thế này</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>usersReducer<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> postsReducer<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Nên</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>users<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> posts<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="xem-reducer-như-một-cỗ-máy-chứa-và-vận-hành-state"><a href="#xem-reducer-nh%C6%B0-m%E1%BB%99t-c%E1%BB%97-m%C3%A1y-ch%E1%BB%A9a-v%C3%A0-v%E1%BA%ADn-h%C3%A0nh-state" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Xem reducer như một cỗ máy chứa và vận hành state</h3>\n<p>Rất nhiều reducer của redux được viết một cách không ràng buộc như thế này, kiểm tra action, tính toán giá trị state mới mà không hề phụ thuộc tới state hiện tại. Có những trường hợp giá trị của một state phụ thuộc vào giá trị state khác, nếu không kiểm tra trước khi cập nhập, có thể dẫn đến bug</p>\n<h3 id="đơn-giản-hóa-các-state-chồng-chéocó-quan-hệ-với-nhau"><a href="#%C4%91%C6%A1n-gi%E1%BA%A3n-h%C3%B3a-c%C3%A1c-state-ch%E1%BB%93ng-ch%C3%A9oc%C3%B3-quan-h%E1%BB%87-v%E1%BB%9Bi-nhau" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Đơn giản hóa các state chồng chéo/có quan hệ với nhau</h3>\n<p>Rất nhiều ứng dụng cần cache các dữ liệu phức tạp trong store, dữ liệu thường có quan hệ chồng chéo trong API và phụ thuộc vào nhiều entities khác nhau (như quan hệ giữa dữ liệu Users, Posts, Comments)</p>\n<p>Khuyến khích nên lưu dữ liệu trong store ở dạng <a href="https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape/">căn bản nhất</a>. Như vậy khi nhìn vào có thể dễ dàng biết được dựa vào ID của chúng</p>\n<h3 id="các-action-nên-tổ-chức-như-event-không-phải-setter"><a href="#c%C3%A1c-action-n%C3%AAn-t%E1%BB%95-ch%E1%BB%A9c-nh%C6%B0-event-kh%C3%B4ng-ph%E1%BA%A3i-setter" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Các action nên tổ chức như event, không phải setter</h3>\n<p>Chúng ta có thể truyền bất cứ giá trị gì cho <code class="language-text">action.type</code>, thí dụ như <code class="language-text">&quot;users/update&quot;</code>, <code class="language-text">&quot;users/updated&quot;</code>, <code class="language-text">&quot;upload/progress&quot;</code>, <code class="language-text">&quot;users/setUserName&quot;</code>. Không sai nhưng khuyến khích nên diễn tả các <code class="language-text">action.type</code> này như một event, hơn là các <code class="language-text">setter</code> như vậy. Nếu diễn đạt theo kiểu setter như vậy thường dẫn tới quá nhiều action type, quá nhiều dispatcher</p>\n<h3 id="viết-tên-action-có-nghĩa"><a href="#vi%E1%BA%BFt-t%C3%AAn-action-c%C3%B3-ngh%C4%A9a" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Viết tên action có nghĩa</h3>\n<p><code class="language-text">action.type</code> phục vụ 2 mục đích</p>\n<ul>\n<li>reducer sẽ kiểm tra giá trị type để tính toán</li>\n<li>hiển thị trên công cụ redux devtool để chúng ta theo dõi</li>\n</ul>\n<p>Tiếp cận action như cơ chế <strong>event</strong>, tên này này không cần ràng buộc với một trường cụ thể nào trong store, đặt tên sao để khi đọc vào chúng ta có thể hiểu được chuyện gì đang diễn ra trên ứng dụng (thông qua công cụ redux devtool). Tránh những cái tên quá chung chung như <code class="language-text">SET_DATA</code> hay <code class="language-text">UPDATE_STORE</code>.</p>\n<h3 id="tránh-dispatch-các-action-một-cách-tuần-tự"><a href="#tr%C3%A1nh-dispatch-c%C3%A1c-action-m%E1%BB%99t-c%C3%A1ch-tu%E1%BA%A7n-t%E1%BB%B1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tránh dispatch các action một cách tuần tự</h3>\n<p>Tránh <code class="language-text">dispatch</code> nhiều action cùng lúc để thực hiện một tác vụ nào đó. Không sai, nhưng kết quả là việc update UI rất tiêu tốn công sức của trình duyệt, đôi khi có những state không truy xuất được ở một vài logic.</p>\n<h3 id="kết-nối-càng-nhiều-component-để-đọc-dữ-liệu-trong-store"><a href="#k%E1%BA%BFt-n%E1%BB%91i-c%C3%A0ng-nhi%E1%BB%81u-component-%C4%91%E1%BB%83-%C4%91%E1%BB%8Dc-d%E1%BB%AF-li%E1%BB%87u-trong-store" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Kết nối càng nhiều component để đọc dữ liệu trong store</h3>\n<p>Càng nhiều component kết nối vào store sẽ giúp hiệu năng update UI cải thiện, do biết được component nào cần và không cần update.</p>\n<p>Có thể kết nối bằng <code class="language-text">connect</code> hoặc <code class="language-text">useSelector</code></p>\n<h3 id="sử-dụng-cách-viết-tắt-cho-code-classlanguage-textmapdispatchcode-khi-dùng-code-classlanguage-textconnectcode"><a href="#s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1ch-vi%E1%BA%BFt-t%E1%BA%AFt-cho-code-classlanguage-textmapdispatchcode-khi-d%C3%B9ng-code-classlanguage-textconnectcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sử dụng cách viết tắt cho <code class="language-text">mapDispatch</code> khi dùng <code class="language-text">connect</code></h3>\n<p><a href="https://react-redux.js.org/using-react-redux/connect-mapdispatch#defining-mapdispatchtoprops-as-an-object">Sử dụng cách viết tắt cho <code class="language-text">mapDispatch</code> khi dùng <code class="language-text">connect</code></a> nhằm đơn giản hóa code. Gần như chưa bao giờ cần phải viết <code class="language-text">mapDispatch</code> như một function.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>increment<span class="token punctuation">,</span> decrement<span class="token punctuation">,</span> reset<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./counterActions"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Redux tự động dùng dispatch</span>\n<span class="token comment">// khi bạn truyền vào là một object</span>\n<span class="token keyword">const</span> actionCreators <span class="token operator">=</span> <span class="token punctuation">{</span>\n  increment<span class="token punctuation">,</span>\n  decrement<span class="token punctuation">,</span>\n  reset\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapState<span class="token punctuation">,</span> actionCreators<span class="token punctuation">)</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// or</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>\n  mapState<span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> increment<span class="token punctuation">,</span> decrement<span class="token punctuation">,</span> reset <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3 id="gọi-code-classlanguage-textuseselectorcode-nhiều-lần-trong-function-component"><a href="#g%E1%BB%8Di-code-classlanguage-textuseselectorcode-nhi%E1%BB%81u-l%E1%BA%A7n-trong-function-component" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Gọi <code class="language-text">useSelector</code> nhiều lần trong function component</h3>\n<p>Khi sử dụng hook <code class="language-text">useSelector</code>, khuyến khích dùng nhiều lần để lấy nhiều phần dữ liệu khác nhau, thay vì lấy một cục dữ liệu lớn đã bao gồm các dữ liệu nhỏ hơn bên trong. Không giống với <code class="language-text">mapState</code>, <code class="language-text">useSelector</code> không yêu cầu trả về object, sử dụng selector để lấy những đơn vị dữ liệu nhỏ hơn bên trong store sẽ giúp ít cho việc render nhiều lần.</p>\n<h3 id="sử-dụng-redux-devtools"><a href="#s%E1%BB%AD-d%E1%BB%A5ng-redux-devtools" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sử dụng Redux DevTools</h3>\n<p>Học cách cài đặt và sử dụng thuần thục <a href="https://github.com/zalmoxisus/redux-devtools-extension">Redux DevTool</a>, nó sẽ cho phép chúng ta</p>\n<ul>\n<li>Xem lịch sử dispatch action</li>\n<li>Nội dung của từng action</li>\n<li>State cuối cùng sau khi action được dispatch</li>\n<li>Sự khác nhau của state trước và sau một action</li>\n<li>Action đã được dispatch từ đâu</li>\n</ul>\n<h2 id="khuyến-khích"><a href="#khuy%E1%BA%BFn-kh%C3%ADch" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Khuyến khích</h2>\n<h3 id="giá-trị-type-của-action-nên-là-code-classlanguage-textdomaineventnamecode"><a href="#gi%C3%A1-tr%E1%BB%8B-type-c%E1%BB%A7a-action-n%C3%AAn-l%C3%A0-code-classlanguage-textdomaineventnamecode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Giá trị type của action nên là <code class="language-text">domain/eventName</code></h3>\n<p>Trước đây tài liệu Redux có đề cập và sử dụng tên như thế này <code class="language-text">SCREAMING_SNAKE_CASE</code> để khai báo action type, ví dụ như <code class="language-text">ADD_TODO</code> và <code class="language-text">INCREMENT</code>, cách này sẽ khớp với cách đặt biến hằng số trong đa số các ngôn ngữ lập trình. Tuy nhiên viết hoa hết như vậy hơi khó đọc.</p>\n<p>Cộng đồng lập trình viên áp dụng một cách đặt tên khác, bắt đầu là <code class="language-text">feature</code> hoặc <code class="language-text">domain</code> nơi action này thuộc về và theo sau là tên của kiểu action. Ngoài ra còn có nhiều cách khác như <code class="language-text">&quot;[Domain] Action Type&quot;</code> hay <code class="language-text">&quot;[Login Page] Login&quot;</code>, <code class="language-text">&quot;domain:action&quot;</code></p>\n<p>Hàm <code class="language-text">createSlice</code> trong Redux Toolkit tạo ra một action type như sau <code class="language-text">&quot;domain/action&quot;</code>, ví dụ <code class="language-text">todos/addTodo</code>. Chúng tôi khuyến khích sử dụng <code class="language-text">domain/action</code> cho dễ đọc.</p>\n<h3 id="viết-action-sử-dụng-cách-đặt-tên-chuẩn-của-flux"><a href="#vi%E1%BA%BFt-action-s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1ch-%C4%91%E1%BA%B7t-t%C3%AAn-chu%E1%BA%A9n-c%E1%BB%A7a-flux" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Viết action sử dụng cách đặt tên chuẩn của Flux</h3>\n<p><em>Flux Architechure</em> chỉ yêu cầu mỗi action object phải có trường <code class="language-text">type</code> và không có bất cứ ràng buộc nào khác, từ cách đặt tên cũng như trường nào nên đưa vào. Để đảm bảo nhất quán, Andrew Clark viết ra một bộ <a href="https://github.com/redux-utilities/flux-standard-action">Flux Standard Actions</a> để chuẩn hóa. Tóm tắt lại bộ nội dung này, action nên là</p>\n<ul>\n<li>Luôn đặt dữ liệu trong trường <code class="language-text">payload</code></li>\n<li>Thêm trường <code class="language-text">meta</code> cho các thông tin khác</li>\n<li>Thêm trường <code class="language-text">error</code> cho các action báo lỗi</li>\n</ul>\n<h3 id="sử-dụng-action-creator"><a href="#s%E1%BB%AD-d%E1%BB%A5ng-action-creator" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sử dụng action creator</h3>\n<p>Thuật ngữ <strong>Action creator</strong> có nguồn gốc từ cách tiếp cận của <em>Flux Architechure</em>, action creator <strong>không bắt buộc</strong>, các component và logic có thể gọi trực tiếp <code class="language-text">dispatch({ type: &quot;some/action&quot;})</code> (action object được truyền dạng inline).</p>\n<p>Tuy nhiên, sử dụng action creator đảm bảo tính nhất quán, đặc biệt phù hợp khi cần chuẩn bị một dữ liệu hoặc logic cho action (thí dụ như khởi tạo một giá trị ID không trùng lặp).</p>\n<p><strong>Khuyến khích sử dụng action creator</strong>. Tuy nhiên, thay vì viết tay, bạn nên sử dụng hàm <code class="language-text">createSlice</code> trong bộ Redux Toolkit, nó sẽ giúp tạo một action creator và action type tự động</p>\n<h3 id="sử-dụng-thunk-cho-các-logic-async"><a href="#s%E1%BB%AD-d%E1%BB%A5ng-thunk-cho-c%C3%A1c-logic-async" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sử dụng Thunk cho các logic async</h3>\n<p>Redux được thiết kế để có thể mở rộng và middleware API được tạo ra cho phép các dạng async logic khác khau có thể cài cắm vào trong Redux store. Bằng cách đó, bạn không cần bắt buộc phải học các thư viện cụ thể nào đó như RxJS nếu không phù hợp với nhu cầu thực tế.</p>\n<p>Kết quả cả khá nhiều middleware addon được tạo ra cho Redux và tạo ra không ít bối rối cũng như câu hỏi về nên sử dụng middleware nào.</p>\n<p>Chúng tôi thực sự khuyến khích sử dụng <a href="https://github.com/reduxjs/redux-thunk">Redux Thunk</a> như mặc định, nó có thể giải quyết hầu hết các trường hợp. Đồng thời sử dụng cú pháp <code class="language-text">async/await</code> trong thunk rất dễ đọc.</p>\n<p>Nếu bạn có như cầu sử dụng một workflow async thực sự phức tạp như cancel, debouncing, chạy logic khau khi action được dispatch, <strong>thread chạy ngầm</strong> có thể cân nhắc sử dụng các middleware như Redux-Saga và Redux-Observable</p>\n<h3 id="tách-các-logic-phức-tạp-ra-khỏi-component"><a href="#t%C3%A1ch-c%C3%A1c-logic-ph%E1%BB%A9c-t%E1%BA%A1p-ra-kh%E1%BB%8Fi-component" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tách các logic phức tạp ra khỏi component</h3>\n<p>Chúng tôi khuyến nghị nên đưa các logic phức tạp ra khỏi component, theo tư tưởng của cách làm <em>container/presentational</em>, càng nhiều component chỉ nhận prop và hiển thị UI càng tốt, đồng thời khi phải làm việc với các logic bất tuần tự (async) bên trong component rất khó để bảo trì sau này.</p>\n<p>Tuy nhiên, sử dụng React hook có vẻ như dễ dàng hơn trong việc quản lý các logic kiểu như fetch dữ liệu trực tiếp trong component và có thể thay thế bằng thunk trong vài trường hợp</p>\n<h3 id="sử-dụng-selector-function-để-đọc-dữ-liệu-trong-store"><a href="#s%E1%BB%AD-d%E1%BB%A5ng-selector-function-%C4%91%E1%BB%83-%C4%91%E1%BB%8Dc-d%E1%BB%AF-li%E1%BB%87u-trong-store" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sử dụng selector function để đọc dữ liệu trong store</h3>\n<p>Selector function là công cụ mạnh mẽ đề đọc các giá trị trong store. Những thư viện như Reselect cho tạo và lưu trữ các selector function, chỉ tính toán lại kết quả nếu cần thiết, là một đặc tính quan trọng để cải thiện hiệu năng.</p>\n<p>Khuyến khích sử dụng các selector function và lưu lại kết quả đọc được từ store bất cứ khi nào có thể, tạo các selector function này bằng Reselect</p>\n<p>Tuy nhiên, cũng không nhất thiết <strong>bắt buộc phải</strong> viết selector function cho tất cả các giá trị trong state. Cân nhắc các trường hay cần truy xuất và cập nhập cũng như lợi ích mang lại khi sử dụng các selector function</p>\n<h3 id="tránh-đưa-state-của-form-vào-trong-redux"><a href="#tr%C3%A1nh-%C4%91%C6%B0a-state-c%E1%BB%A7a-form-v%C3%A0o-trong-redux" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tránh đưa state của form vào trong redux</h3>\n<p>Hầu như như state của form ko nên nằm trong Redux. Dữ liệu này không thực sự phải <em>global</em>, ko cần được cache, không được sử dụng bởi nhiều component cùng lúc. Connect form vào redux cũng dẫn đến chuyện dispatch action trên tất cả các sự kiện thay đổi trong form, nó sẽ làm hiệu năng giảm trầm trọng và không mang lại nhiều hiệu quả.</p>\n<p>Chỉ nên dữ state của form trong component và đưa toàn bộ giá trị lên store sau khi user submit form.</p>\n<p>Chỉ duy nhất trường hợp đưa form state vào redux là hợp lý khi viết component như WYSIWYG với tính năng live preview trên các thuộc tính. Còn lại đa phần không cần thiết.</p>\n<p><a href="https://redux.js.org/style-guide/style-guide/">https://redux.js.org/style-guide/style-guide/</a></p>',
timeToRead:21,excerpt:"A. Bắt buộc Ko mutate state Reducer ko được có side effect Không đưa các giá trị Non-Serialize vào trong action và state Chỉ một Redux store…",frontmatter:{title:"Chỉ dẫn viết Redux sao cho chuẩn",cover:"",date:"2020-01-01",category:null,tags:["hoc-thuat","react","redux"],desc:"Đây không phải là quan điểm cá nhân, bài viết được dịch thuật từ tài liệu chính thức của Redux"},fields:{slug:"/2020-01-01-chi-dan-viet-redux-sao-cho-chuan"}}},pathContext:{slug:"/2020-01-01-chi-dan-viet-redux-sao-cho-chuan",prev:{frontmatter:{title:"Khi nào nên sử dụng useLayoutEffect thay vì useEffect",desc:"2 React Hook làm nhiệm vụ khá giống nhau là useEffect và useLayoutEffect bạn đã biết cách sử dụng thế nào cho đúng",type:"post",category:null,tags:["thu-thuat","react"],date:"2020-01-02",cover:""},fields:{slug:"/2020-01-02-khi-nao-nen-su-dung-uselayouteffect-trong-react"}},next:{frontmatter:{title:"4 ứng dụng của Array.from",desc:"Vài ứng dụng nhỏ của hàm Array.from",type:"post",category:null,tags:["javascript"],date:"2019-12-24",cover:""},fields:{slug:"/2019-12-24-4-ung-dung-cua-array-from"}}}}}});
//# sourceMappingURL=path---2020-01-01-chi-dan-viet-redux-sao-cho-chuan-034edf0a5e303d35fe3a.js.map