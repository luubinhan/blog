{"hash":"abad1accdeff08a5b295c1ca2179f7b6ebc52b82","data":{"post":{"title":"Giới thiệu Temporal Dead Zone trong javascript","path":"/gioi-thieu-temporal-dead-zone-trong-javascript/","slug":"/2019-10-21-gioi-thieu-temporary-dead-zone-cua-javascript","date":"2019-10-21","timeToRead":2,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"}],"desc":"Bạn đã biết hoisted? bạn cần biết thêm khái niệm Temporal Dead Zone là đủ một cặp","content":"<p>Temporal Dead Zone - <em>Khu vực tự trị, ngoài vòng pháp luật</em></p>\n<p>Đoạn code bên dưới sẽ cho kết quả thế nào, đố bạn</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// có chạy được ko, chưa khai báo `Car`</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">color</span> <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>hoặc gọi một hàm trước khi nó được khai báo</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// có chạy được ko, chưa khai báo greet</span>\n<span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'VuiLapTrinh'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">who</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword control-flow\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>who<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đáp án là, với trường hợp sử dụng một <code class=\"language-text\">class</code> chưa được khai báo, kết quả là <code class=\"language-text\">ReferenceError</code>, còn sử dụng hàm chưa khai báo, chạy bình thường 😂😓🤔</p>\n<p>Temporal Dead Zone (TDZ - <em>khu vực tự trị</em>) là nơi quản lý tính khả thi của <code class=\"language-text\">let</code>, <code class=\"language-text\">const</code>, <code class=\"language-text\">class</code></p>\n<p>Bắt đầu với khai báo <code class=\"language-text\">const</code></p>\n<pre class=\"language-js{1}\"><code class=\"language-js{1}\">white; // throws `ReferenceError`\nconst white = '#FFFFFF';\nwhite;</code></pre>\n<p>Trước khi có sự xuất hiện của <code class=\"language-text\">const white = &#39;#FFFFFF&#39;</code>, biến <code class=\"language-text\">white</code> sẽ nằm trong <em>khu vực tự trị</em> (TDZ)</p>\n<p>Chúng ta không thể truy cập vào khu vực tự trị này, nên nó sẽ trả về lỗi <code class=\"language-text\">ReferenceError: Cannot access &#39;white&#39; before initialization</code></p>\n<p><img src=\"https://dmitripavlutin.com/static/7973b25e51eb97f6d330c941600f7ad8/5722e/temporal-dead-zone-in-javascript.webp\" alt=\"Giới thiệu Temporal Dead Zone trong javascript\"></p>\n<p>Khái niệm này giúp tránh sự <em>lằng nhằng</em> trong javascript <strong>trước đây</strong>, được phép sử dụng trước khi khai báo. Vì nó chỉ được thêm vào <em>sau này</em>, nên chỉ có hiệu lực trên các từ khóa <em>sau này</em> mới có là <code class=\"language-text\">let</code>, <code class=\"language-text\">const</code>, <code class=\"language-text\">class</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// throws `ReferenceError`</span>\ncount<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> count<span class=\"token punctuation\">;</span>\ncount <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// throws `ReferenceError`</span>\n<span class=\"token keyword\">const</span> myNissan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">color</span> <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nó cũng giải thích luôn tại sao chúng ta phải gọi <code class=\"language-text\">super</code> trong <code class=\"language-text\">class</code> trước khi gọi <code class=\"language-text\">this</code>, vì <code class=\"language-text\">this</code> tạm thời nằm trong khu TDZ khi chưa gọi <code class=\"language-text\">super</code></p>\n<pre class=\"language-js{3,4,8}\"><code class=\"language-js{3,4,8}\">class MuscleCar extends Car {\n  constructor(color, power) {\n    this.power = power;\n    super(color);\n  }\n}\n\nconst myCar = new MuscleCar('blue', '300HP'); // `ReferenceError`</code></pre>\n<p>Chúng ta phải dùng <code class=\"language-text\">this.</code> sau khi gọi <code class=\"language-text\">super</code></p>\n<p>Với những cách khai báo cũ là <code class=\"language-text\">var</code>, <code class=\"language-text\">function</code> nó không chịu chung số phận phải sống trong khu tự trị, nó sẽ chịu khái niệm <strong>Hoisting</strong>.</p>\n<p>Hoisting là một cơ chế hoạt động gây khó dễ anh em chúng ta đã bao nhiêu thập kỷ nay.</p>\n<p>Anh em ra đường gặp một em chưa hề quen biết, chúng ta nhẹ nhàng tới hỏi \"Em nhà ở đâu thế?\", nhận được câu trả lời anh lên phường tra cứu, lên đến phường, \"chẳng ai biết ẻm là ai\", phường chỉ lên quận tra cứu, <em>quận</em> lại bảo \"có mà lên ủy ban thành phố chú ạ\", lỡ mà xui xui chúng ta phải lên đến trung ương để biết rằng em đã đăng ký hộ khẩu ở đâu.</p>\n<pre class=\"language-js{2,5,9}\"><code class=\"language-js{2,5,9}\">// chạy như thường, nhưng đừng viết gì nhá\nvalue; // => undefined\nvar value;\n\ngreet('VuiLapTrinh'); // => 'Hello, VuiLapTrinh!'\nfunction greet(who) {\n  return `Hello, ${who}!`;\n}\ngreet('Andy'); // => 'Hello, Andy!'</code></pre>\n<p>Cho nên bạn có thể làm được việc này, xài trước, <code class=\"language-text\">import</code> sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> myFunction <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./myModule'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>TDZ còn phụ thuộc vào từng <em>thành phố</em>, mỗi thành phố sẽ có khu vực tự trị khác nhau</p>\n<p><img src=\"https://dmitripavlutin.com/static/bba73f7c82f4385bbd81ad4c3531217c/5722e/limits-of-temporal-dead-zone-javascript.webp\" alt=\"Giới thiệu Temporal Dead Zone trong javascript\"></p>\n<p>Lấy ví dụ</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">someVal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Function scope</span>\n  <span class=\"token keyword\">typeof</span> variable<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => undefined</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>someVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Inner block scope</span>\n    <span class=\"token keyword\">typeof</span> variable<span class=\"token punctuation\">;</span> <span class=\"token comment\">// throws `ReferenceError`</span>\n    <span class=\"token keyword\">let</span> variable<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><a href=\"https://dmitripavlutin.com/javascript-variables-and-temporal-dead-zone/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Don't Use JavaScript Variables Without Knowing Temporal Dead Zone</a></p>\n","cover_image":"","related":[{"id":"f2e054fcf720c1bbfd96b1f9aaeb9983","path":"/gioi-thieu-functional-programming-trong-java-script/","title":"Giới thiệu functional programming trong JavaScript","desc":"Functional programming là một topic rất chi quen thuộc trong cộng đồng JS, các bạn có biết tại sao mọi người lại hype với nó? Tại sao mọi người lại quay lưng với Object oriented"},{"id":"e9d2a9d4a3ed5b8ecc39c580a3f2ffb8","path":"/gioi-thieu-markdown/","title":"Giới thiệu Markdown","desc":"Markdown vở lòng cho bạn nào chưa biết"},{"id":"f9b9d628fc5725a639e6c8edff449057","path":"/gioi-thieu-fetch-cua-javascript/","title":"Giới thiệu fetch() của javascript","desc":"Tạm biệt XMLHttpRequest và cách viết dài dòng, giờ đây ta đã có fetch API"},{"id":"6d5aa5f38fabe4c7ea0a45fedf201568","path":"/gioi-thieu-ve-reactive-programing-trong-javascript/","title":"Giới thiệu về Reactive Programing trong javascript","desc":"Reactive programing là khái niệm khá trừu tượng và khó tiếp cận với người mới bắt đầu, chuẩn bị tinh thần đọc bài này vài lần trong vài ngày thì mới mong thẩm thấu hết"}]}},"context":{}}