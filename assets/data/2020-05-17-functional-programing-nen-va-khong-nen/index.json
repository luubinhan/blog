{"hash":"e1532d0aebaf3bcf47bbf8a08cbde03cecbbc9cf","data":{"post":{"title":"Functional programing nên và không nên","path":"/2020-05-17-functional-programing-nen-va-khong-nen/","slug":"/2020-05-17-functional-programing-nen-va-khong-nen","date":"2020-05-17","timeToRead":4,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"}],"desc":"","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#lu%C3%B4n-tr%E1%BA%A3-v%E1%BB%81-gi%C3%A1-tr%E1%BB%8B\">Luôn trả về giá trị</a></li>\n<li><a href=\"#module-h%C3%B3a\">Module hóa</a></li>\n<li><a href=\"#h%E1%BB%A3p-th%E1%BB%83-ko-k%E1%BA%BF-th%E1%BB%ABa-composition-vs-inheritance\">Hợp thể ko kế thừa (composition vs. inheritance)</a></li>\n<li><a href=\"#ghi-nh%E1%BB%9B-khi-c%E1%BA%A7n-thi%E1%BA%BFt\">Ghi nhớ khi cần thiết</a></li>\n<li><a href=\"#kh%C3%B4ng-thay-%C4%91%E1%BB%95i-gi%C3%A1-tr%E1%BB%8B-g%E1%BB%91c\">Không thay đổi giá trị gốc</a></li>\n<li><a href=\"#kh%C3%B4ng-d%C3%B9ng-v%C3%B2ng-l%E1%BA%B7p-for\">Không dùng vòng lặp <code class=\"language-inline-text\">for</code></a></li>\n<li><a href=\"#kh%C3%B4ng-d%C3%B9ng-switchcase\">Không dùng <code class=\"language-inline-text\">switch...case</code></a></li>\n<li><a href=\"#trycatch\">Try...catch</a></li>\n<li><a href=\"#undefined-v%C3%A0-null\">Undefined và null</a></li>\n<li><a href=\"#class\">Class</a></li>\n<li><a href=\"#%C4%91%E1%BA%B7t-t%C3%AAn-function\">Đặt tên function</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"luôn-trả-về-giá-trị\"><a href=\"#lu%C3%B4n-tr%E1%BA%A3-v%E1%BB%81-gi%C3%A1-tr%E1%BB%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Luôn trả về giá trị</h2>\n<p><strong>Luôn trả về giá trị</strong>, kể cả nhưng hàm chỉ tạo side-effect, ngoài ra giá trị trả về còn nên cố định luôn một kiểu, không nên lúc kiểu này lúc kiểu khác, giữ giá trị thô, đừng lưu giá trị đã định dạng (như format tiền tệ, ngày tháng), dùng tham số, đừng hard-code</p>\n<p>❌ Không ngon</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  result <span class=\"token operator\">*=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fact of 5: \"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>✅ Chuẩn cơm mẹ nấu</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fact</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> n <span class=\"token operator\">*</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fact of 5: \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"module-hóa\"><a href=\"#module-h%C3%B3a\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Module hóa</h2>\n<p>Tách bạch một module chỉ làm một việc, và làm thật tốt việc đó</p>\n<h2 id=\"hợp-thể-ko-kế-thừa-composition-vs-inheritance\"><a href=\"#h%E1%BB%A3p-th%E1%BB%83-ko-k%E1%BA%BF-th%E1%BB%ABa-composition-vs-inheritance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hợp thể ko kế thừa (composition vs. inheritance)</h2>\n<p>Kế thừa <strong>KHÔNG</strong> phải là cách chúng ta xử lý dữ liệu, behavior trong functional programing</p>\n<h2 id=\"ghi-nhớ-khi-cần-thiết\"><a href=\"#ghi-nh%E1%BB%9B-khi-c%E1%BA%A7n-thi%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ghi nhớ khi cần thiết</h2>\n<p>Với pure function, việc ghi nhớ (memoize) kết quả được xem là an toàn vì cùng input-cùng output.</p>\n<p>Ví dụ dùng hàm <code class=\"language-inline-text\">memize</code> của thư viện Ramda</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fact <span class=\"token operator\">=</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">===</span> n <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> n <span class=\"token operator\">*</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fact</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Calculates fact for 5, 4, 3 ...</span>\n<span class=\"token function\">fact</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Instantaneous</span>\n<span class=\"token function\">fact</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Instantaneous</span></code></pre></div>\n<h2 id=\"không-thay-đổi-giá-trị-gốc\"><a href=\"#kh%C3%B4ng-thay-%C4%91%E1%BB%95i-gi%C3%A1-tr%E1%BB%8B-g%E1%BB%91c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Không thay đổi giá trị gốc</h2>\n<p>❌ Không ngon</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> approved <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> approved<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    approved<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>approved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>✅ Chuẩn cơm mẹ nấu</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> approved <span class=\"token operator\">=</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"không-dùng-vòng-lặp-for\"><a href=\"#kh%C3%B4ng-d%C3%B9ng-v%C3%B2ng-l%E1%BA%B7p-for\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Không dùng vòng lặp <code class=\"language-inline-text\">for</code></h2>\n<p>Mặc dù vòng lặp <code class=\"language-inline-text\">for</code> nhanh nhất trong các vòng lặp, tuy nhiên nghiêm cấm sử dụng để tránh gây ra một side-effect không cố ý.</p>\n<p>❌ Không ngon</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> even <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    even<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>even<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0, 2, 4, 6, 8 ...]</span></code></pre></div>\n<p>✅ Chuẩn cơm mẹ nấu</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> filter<span class=\"token punctuation\">,</span> range <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"ramda\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> even <span class=\"token operator\">=</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">even</span><span class=\"token punctuation\">(</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0, 2, 4, 6, 8 ...]</span></code></pre></div>\n<h2 id=\"không-dùng-switchcase\"><a href=\"#kh%C3%B4ng-d%C3%B9ng-switchcase\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Không dùng <code class=\"language-inline-text\">switch...case</code></h2>\n<p>❌ Không ngon</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Wesley\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"Dayana\"</span><span class=\"token operator\">:</span>\n    result <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" is cool!\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"Wesley\"</span><span class=\"token operator\">:</span>\n    result <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" likes farting\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token string\">\"Who is \"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"?\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wesley likes farting</span></code></pre></div>\n<p>✅ Chuẩn cơm mẹ nấu</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> cond<span class=\"token punctuation\">,</span> propEq <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"ramda\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> getDescription <span class=\"token operator\">=</span> <span class=\"token function\">cond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token function\">propEq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Dayana\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is cool!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token function\">propEq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Wesley\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> likes farting</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Who is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">?</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Wesley\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wesley likes farting</span></code></pre></div>\n<h2 id=\"trycatch\"><a href=\"#trycatch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Try...catch</h2>\n<p>❌ Không ngon</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>✅ Chuẩn cơm mẹ nấu</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> tryCatch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"ramda\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Either <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"ramda-fantasy\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> computation <span class=\"token operator\">=</span> <span class=\"token function\">tryCatch</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">,</span>\n  Either<span class=\"token punctuation\">.</span>Right<span class=\"token punctuation\">,</span>\n  Either<span class=\"token punctuation\">.</span>Left\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">computation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Left&lt;TypeError></span></code></pre></div>\n<h2 id=\"undefined-và-null\"><a href=\"#undefined-v%C3%A0-null\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Undefined và null</h2>\n<p>Không có giá trị (undefined, null) dẫn đến chuyện phải verify khá nhiều thứ và điều kiện nối điều kiện. Sử dụng <code class=\"language-inline-text\">Maybe</code></p>\n<p>❌ Không ngon</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">safeDiv</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">safeDiv</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ops</span></code></pre></div>\n<p>✅ Chuẩn cơm mẹ nấu</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Maybe <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"ramda-fantasy\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">safeDiv</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">===</span> b <span class=\"token operator\">?</span> Maybe<span class=\"token punctuation\">.</span>Nothing <span class=\"token operator\">:</span> Maybe<span class=\"token punctuation\">.</span><span class=\"token function\">Just</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">safeDiv</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Never falls here</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"class\"><a href=\"#class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Class</h2>\n<p>Nói chung, sử dụng <code class=\"language-inline-text\">class</code> chúng ép buộc phải tạo ra effect và thao tác trực tiếp đến đối tượng gốc.</p>\n<p>❌ Không ngon</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cassandra\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>✅ Chuẩn cơm mẹ nấu</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> lensProp<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> set <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"ramda\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> setName <span class=\"token operator\">=</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token function\">lensProp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> getName <span class=\"token operator\">=</span> <span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cassandra\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"đặt-tên-function\"><a href=\"#%C4%91%E1%BA%B7t-t%C3%AAn-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đặt tên function</h2>\n<ul>\n<li>Có một <strong>động từ</strong> mô tả cái nó sẽ làm</li>\n<li>Mô tả được bên trong nó làm cái gì (tất nhiên là ngắn gọn nhất có thể)</li>\n<li>Nếu có cùng concept, sử dụng một từ chung</li>\n<li>Chỉ làm một việc duy nhất</li>\n<li>Không mô tả nó làm như thế nào</li>\n<li>Nếu gặp khó khăn trong việc đặt tên function, có thể bạn đã không đúng khi gom quá nhiều xử lý vào nó (ôm đồm xử lý)</li>\n</ul>\n","cover_image":"","related":[{"id":"b237c1fdef004102f9ac1f5532bf1ec0","path":"/2020-02-15-7-ly-do-chinh-dang-khuyen-ban-khong-nen-dung-typescript/","title":"7 lý do bạn không nên sử dụng TypeScript","desc":"TypeScript có phải là con ác chủ bài, ngôn ngữ của tương lai, viết TypeScript thì mọi thứ sẽ không thể nào còn lỗi, những lý do khiến bạn phải suy nghĩ lại những nhận định trên"},{"id":"5b2c5bdac92e830659d5bc0e69bede49","path":"/2019-08-16-tai-sao-cac-ban-nen-hoc-vue/","title":"Tại sao các bạn nên học Vue","desc":"Một vài suy nghĩ cá nhân của mình về mấy cái hay ho của Vue"},{"id":"639425de1b7947874ed74f9c9776b61d","path":"/2020-08-16-tim-hieu-functional-programming/","title":"Giới thiệu functional programming trong JavaScript","desc":"Functional programming là một topic rất chi quen thuộc trong cộng đồng JS, các bạn có biết tại sao mọi người lại hype với nó? Tại sao mọi người lại quay lưng với Object oriented"},{"id":"8a1551a47737f4d1cf9dc50fa514c3e5","path":"/2021-05-31-huong-dan-viet-boolean/","title":"Quản lý state: nhận định boolean tốt và không tốt","desc":""}]}},"context":{}}