{"hash":"2a4106ecca1a0d3da8cd127d6742ebf19d0f0109","data":{"post":{"title":"Yaml cho web developer","path":"/2020-08-05-gioi-thieu-yaml-cho-nguoi-moi-bat-dau/","date":"2020-08-05","timeToRead":4,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"},{"id":"hoc-thuat","title":"hoc-thuat","path":"/tag/hoc-thuat/"}],"desc":"Dạo gần đây, nếu bạn là Front End developer chắc sẽ gặp nhiều đến file có đuôi .yml ( ví dụ như .gitlab-ci.yml). Nếu bạn chưa biết kiểu file này, thì bài này mình sẽ giới thiệu túm lược để bạn làm quen.","content":"<p>File này được dùng khá nhiều cho việc thiết đặt và cấu hình. Mà nhiều nhất là dùng cho các thiết đặt CI/CD. Ngày xưa, khi chưa có Yaml, sau khi quá mệt mỏi với việc mỗi người mỗi ý trong việc viết file cấu hình, nổ ra cái ý tưởng hồi năm 2001</p>\n<blockquote>\n<p>Giờ sao chúng ta không tạo ra một file cấu hình giống như chỉ dẫn nấu ăn, chữ thôi, cực kỳ dễ hiểu</p>\n</blockquote>\n<p>Yaml cũng là một dạng superset của người anh em JSON.</p>\n<blockquote>\n<p>Superset là một ngôn ngữ chứa tất cả feature của một ngôn ngữ, rồi mở rộng thêm một số thứ nữa</p>\n</blockquote>\n<p>Ví dụ như TypeScript là superset của Javascript</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"system\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"removeComments\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"preserveConstEnums\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outFile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"../../built/local/tsc.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/**/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.spec.ts\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>File JSON không quá khó đọc, tuy nhiên lại vướng một vài hạn chế:</p>\n<ol>\n<li>Không dùng biến được</li>\n<li>Không dùng biến môi trường được</li>\n<li>Không thể override value</li>\n</ol>\n<p>YAML sẽ giúp ta làm được những điều chưa làm được ở json</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">compilerOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">module</span><span class=\"token punctuation\">:</span> system\n  <span class=\"token key atrule\">noImplicitAny</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">removeComments</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">preserveConstEnums</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">outFile</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"../../built/local/tsc.js\"</span>\n  <span class=\"token key atrule\">sourceMap</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">types</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> node\n    <span class=\"token punctuation\">-</span> lodash\n    <span class=\"token punctuation\">-</span> express\n<span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> src/<span class=\"token important\">**/*</span>\n<span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> node_modules\n  <span class=\"token punctuation\">-</span> <span class=\"token string\">\"**/*.spec.ts\"</span></code></pre>\n<p><em>lưu ý đây chỉ là ví dụ, bạn không thể viết <code class=\"language-text\">tsconfig</code> bằng YAML, buồn thay</em></p>\n<p>Một số nguyên tắc-cú pháp cần nắm</p>\n<p><strong>Thục đầu dòng</strong></p>\n<p>Thục đầu dòng rất quan trọng, bạn chỉ được dùng dấu <strong>khoảng trắng</strong>, không cho phép dùng <strong>tab</strong></p>\n<p><strong>Viết comment</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># I'm a comment</span>\n<span class=\"token key atrule\">person</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># I'm also a comment</span>\n  <span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span></code></pre>\n<p><strong>Dạng danh sách</strong></p>\n<p>Có 2 cách biết, như đã nói là superset của json, nên chúng ta có cách thứ nhất i như json</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">people</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Anne\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Max\"</span><span class=\"token punctuation\">]</span></code></pre>\n<p>Khuyến khích cách này hơn</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">people</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> Anne\n  <span class=\"token punctuation\">-</span> John\n  <span class=\"token punctuation\">-</span> Max</code></pre>\n<p><strong>Khai báo giá trị string</strong></p>\n<p>Trong JSON bạn chỉ một cách viết giá trị dạng <code class=\"language-text\">String</code> là đưa nó vào dấu ngoặc kép <code class=\"language-text\">&quot;&quot;</code>, Yaml thì linh động hơn</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">company</span><span class=\"token punctuation\">:</span> Google <span class=\"token comment\"># Single words, no quotes</span>\n<span class=\"token key atrule\">full_name</span><span class=\"token punctuation\">:</span> John Foo Bar Doe <span class=\"token comment\"># Full sentence, no quotes</span>\n<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"John\"</span> <span class=\"token comment\"># Using single quotes</span>\n<span class=\"token key atrule\">surname</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Christian Meyer\"</span> <span class=\"token comment\"># Using double quotes</span></code></pre>\n<blockquote>\n<p>Trong trường hợp bạn có chưa các ký tự đặc biệt, thì nên đưa vào dấu nháy kép.</p>\n</blockquote>\n<p><strong>Số</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">year</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2019</span> <span class=\"token comment\"># Integer</span>\n<span class=\"token key atrule\">nodeVersion</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10.8</span> <span class=\"token comment\"># Float</span></code></pre>\n<p><strong>Con trỏ</strong></p>\n<p>Khái niệm <em>con trỏ</em> xem như bạn đã biết nhé, mình không giải thích, cái này các bạn đi học chắc các thầy dạy kỹ lắm rồi.</p>\n<p>Ví dụ như bạn đang viết một số config cho môi trường <code class=\"language-text\">production</code> và <code class=\"language-text\">staging</code>, tức nhiên là một config là giống nhau thôi, nên chúng ta chỉ cần <em>trỏ</em> nó qua một chỗ</p>\n<p>Đây là không <em>trỏ</em> qua mà <em>copy/paste</em> huyền thoại</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"production\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"node_version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"13.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"os\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ubuntu\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"package_manager\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"run\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"yarn install\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NODE_ENV=${ENVIRONMENT} yarn build\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"ENVIRONMENT\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"production\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"staging\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"node_version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"13.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"os\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ubuntu\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"package_manager\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"run\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"yarn install\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NODE_ENV=${ENVIRONMENT} yarn build\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"ENVIRONMENT\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"staging\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Để dùng con trỏ, chúng ta tạo trước một cái <em>neo</em> để sau này trỏ vào cái <em>neo</em> này</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">base-config</span><span class=\"token punctuation\">:</span> <span class=\"token important\">&amp;base</span> <span class=\"token comment\"># tên cái neo</span>\n  <span class=\"token key atrule\">node_version</span><span class=\"token punctuation\">:</span> 13.0.0\n  <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> ubuntu\n  <span class=\"token key atrule\">package_manager</span><span class=\"token punctuation\">:</span> yarn\n  <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> yarn install\n    <span class=\"token punctuation\">-</span> NODE_ENV=$<span class=\"token punctuation\">{</span>ENVIRONMENT<span class=\"token punctuation\">}</span> yarn build</code></pre>\n<p>Sau đó thực hiện việc trỏ</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">base-config</span><span class=\"token punctuation\">:</span> <span class=\"token important\">&amp;base</span>\n  <span class=\"token key atrule\">node_version</span><span class=\"token punctuation\">:</span> 13.0.0\n  <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> ubuntu\n  <span class=\"token key atrule\">package_manager</span><span class=\"token punctuation\">:</span> yarn\n  <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> yarn install\n    <span class=\"token punctuation\">-</span> NODE_ENV=$<span class=\"token punctuation\">{</span>ENVIRONMENT<span class=\"token punctuation\">}</span> yarn build\n\n<span class=\"token key atrule\">production</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># dùng các thiết đặt ở neo tên là base</span>\n  <span class=\"token key atrule\">&lt;&lt;</span><span class=\"token punctuation\">:</span> <span class=\"token important\">*base</span>\n  <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">ENVIRONMENT</span><span class=\"token punctuation\">:</span> production\n\n<span class=\"token key atrule\">staging</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># dùng các thiết đặt ở neo tên là base</span>\n  <span class=\"token key atrule\">&lt;&lt;</span><span class=\"token punctuation\">:</span> <span class=\"token important\">*base</span>\n  <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">ENVIRONMENT</span><span class=\"token punctuation\">:</span> staging</code></pre>\n<p><strong>Môi trường Shell/Bash</strong></p>\n<p>Như đã nói lúc đầu, file <code class=\"language-text\">.yml</code> rất được ưu dùng đề làm config, đặc biệt là config môi trường CI/CD.</p>\n<p>Môi trường CI/CD thường là Linux, và chúng ta cũng có thể truy cập đến các biến môi trường của Linux.</p>\n<p>Ví dụ như Github CI, chúng ta có thể chỉ định biến môi trường global nào chúng ta muốn truy cập</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">variables</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">NODE_IMAGE</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">:</span><span class=\"token number\">10</span>\n\n<span class=\"token key atrule\">stages</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> build\n\n<span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> $NODE_IMAGE\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> build</code></pre>\n<p>Cú pháp <code class=\"language-text\">$</code> không phải của <code class=\"language-text\">yaml</code> mà là của <code class=\"language-text\">shell/bash</code>. Những gì Github CI sẽ làm là đưa toàn bộ những biến bạn đặt trong <code class=\"language-text\">variables</code> và tạo ra biến trong <code class=\"language-text\">shell</code></p>\n<p>Một vài hệ thống khác cũng <strong>inject</strong> các giá trị khác như commit ref, branch name, build time, secret key được đặt bên ngoài file config</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">variables</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">NODE_IMAGE</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">:</span><span class=\"token number\">10</span>\n\n<span class=\"token key atrule\">stages</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> build\n\n<span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> $NODE_IMAGE\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> build\n  <span class=\"token key atrule\">artifacts</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> $CI_COMMIT_REF_NAME</code></pre>\n<p>Ví dụ ở trên, chúng ta sử dụng biến môi trường <code class=\"language-text\">$CI_COMMIT_REF_NAME</code> của GitLab CI.</p>\n<p>Hy vọng các bạn đã hiểu chút đỉnh về YAML và cảm thấy đọc file yaml không quá khó chịu nữa.</p>\n<h3 id=\"tài-liệu-tham-khảo\"><a href=\"#t%C3%A0i-li%E1%BB%87u-tham-kh%E1%BA%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tài liệu tham khảo</h3>\n<p><a href=\"https://yaml.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://yaml.org/</a>\n<a href=\"https://www.json2yaml.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.json2yaml.com/</a>\n<a href=\"https://learnxinyminutes.com/docs/yaml/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://learnxinyminutes.com/docs/yaml/</a></p>\n<p><a href=\"https://dev.to/raulfdm/yaml-for-web-developers-559n\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Yaml for Web Developers</a></p>\n","cover_image":"","related":[{"id":"1919bceb9000f1bff00371b6a3dfd527","path":"/2019-10-28-gioi-thieu-ve-do-phuc-tap-cua-thuat-toan/","title":"Độ phức tạp của thuật toán","desc":"Một cách chuẩn hóa trong ngành lập trình để đánh giá độ phức tạp của giải thuật"},{"id":"67122717b0acf53933fa6e376df98e0c","path":"/2018-06-15-huong-dan-lam-viec-voi-css-module/","title":"Làm việc với CSS Modules trong React","desc":"Sau rất nhiều năm kiếm cơm với CSS, và hiện tại vẫn thế, CSS vẫn luôn là niềm hứng thú của cá nhân mình. Ngày nảy ngày nay để làm việc với Component của React, chúng ta sẽ có nhiều lựa chọn hơn khi 'CSS trong JS' đang là lựa chọn hàng đầu. Trong thời đại của component phủ sóng khắp các mặt trận, CSS Modules hứa hiện là món ngon"},{"id":"100640c49411b1ebfd3f20a0be2cdb53","path":"/2019-10-18-7-cau-hoi-phong-van-lac-leo-voi-js/","title":"7 Câu hỏi phỏng vấn lắc léo với Javascript","desc":"Thử kiến thức javascript của bạn đã đủ cho cuộc phỏng vấn cam go sắp tới chưa"}]}},"context":{}}