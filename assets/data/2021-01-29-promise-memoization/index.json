{"hash":"6000b69201124b9452c41d38889aba5b11cf5e89","data":{"post":{"title":"Promise Memoization","path":"/2021-01-29-promise-memoization/","date":"2021-01-29","timeToRead":2,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"},{"id":"hard","title":"hard","path":"/tag/hard/"}],"desc":"Nếu bạn muốn tìm hiểu về caching một Promise","content":"<p>Chúng ta sẽ hiện thực caching với promise bằng cách dùng Promise Memoization</p>\n<p>Ví dụ gọi một API để lấy thông tin của một <code class=\"language-text\">userId</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getUserById <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">User</span><span class=\"token operator\">></span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> request<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://users-service/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu <code class=\"language-text\">users-service</code> hơi chậm, việc lưu lại giá trị trước đó đã get được là một ý tưởng thường thấy</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> usersCache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">User</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> getUserById <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">User</span><span class=\"token operator\">></span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>usersCache<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">has</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> request<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://users-service/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    usersCache<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> usersCache<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chúng ta lưu giá trị đó xuống <strong>in-memory</strong> (bộ nhớ RAM ấy), cách này cũng ok nhưng khá amater.</p>\n<p>Nếu chúng ta không cache result trả về từ <code class=\"language-text\">await</code> mà cache luôn cái <code class=\"language-text\">Promise</code>?</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> userPromisesCache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">User</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> getUserById <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">User</span><span class=\"token operator\">></span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>userPromisesCache<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">has</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> userPromise <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://users-service/v1/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    userPromisesCache<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span> userPromise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> userPromisesCache<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nó cũng na ná như ở trên nhưng chúng ta không còn <code class=\"language-text\">await</code> vào câu request, chúng ta cũng không cần dùng async function. Nếu bạn cảm thấy hơi hại não chổ này, thì nên làm thử cái <a href=\"https://www.jonmellman.com/posts/singleton-promises#followup-experiment\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo nhỏ nhỏ này</a></p>\n<p>Cách làm này có một cái tên khá ghê là <strong>Singleton Promise</strong> - chỉ dùng một promise duy nhất. Bởi vì chúng ta sẽ dùng cùng một Promise với cùng một <code class=\"language-text\">userId</code> nên khi có một race condition như cách viết bên dưới</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">await</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token function\">getUserById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  \t<span class=\"token function\">getUserById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>chúng ta không gặp bất cứ vấn đề gì.</p>\n<p>Đó là khi bạn có tinh thần <strong>em yêu khoa học</strong>, còn đơn giản nhất, đỡ tốn công nhất, bạn có thể dùng những <code class=\"language-text\">lodash.memoize</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> _ <span class=\"token keyword module\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> getUserById <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memoize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">User</span><span class=\"token operator\">></span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> request<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://users-service/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><a href=\"https://www.jonmellman.com/posts/promise-memoization\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced Promise Patterns: Promise Memoization</a></p>\n","cover_image":"","related":[{"id":"602ee60e13b24674edaaff08323382ff","path":"/2017-10-12-javascript-promise/","title":"Nắm vững Promise trong javascript","desc":"Cùng tìm hiểu Promise của javascript, tự tạo một Promise"},{"id":"cc966bcacf4a3f8f4a9f2abf03463e59","path":"/2019-12-23-9-cau-hoi-ve-promise/","title":"9 câu hỏi lắc léo về Promise","desc":"Vài câu hỏi Promise, ôn tập kiến thức cho bạn cần đi phỏng vấn"},{"id":"e0a65fb71b048a3e4e4569e089a64b09","path":"/2018-03-05-8-huong-dan-cach-render-component-trong-react/","title":"8 câu điều kiện khi render trong React","desc":"Tutorial này sẽ cover những câu điều kiện dùng để render component phổ biến nhất"}]}},"context":{}}