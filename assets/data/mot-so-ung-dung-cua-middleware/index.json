{"hash":"6f8620c4b9320834772a34e00598bbfeaacfb63b","data":{"post":{"title":"Một số ứng dụng của middleware","path":"/mot-so-ung-dung-cua-middleware/","slug":"/2018-06-21-huong-dan-mot-so-ung-dung-cua-middleware","date":"2018-06-21","timeToRead":5,"tags":[{"id":"react","title":"react","path":"/tag/react/"},{"id":"redux","title":"redux","path":"/tag/redux/"},{"id":"javascript","title":"javascript","path":"/tag/javascript/"},{"id":"middleware","title":"middleware","path":"/tag/middleware/"}],"desc":"Tiếp theo bài trước về middleware, ứng dụng với các trường hợp thực tế","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#%C4%91%C3%B3ng-g%C3%B3i-c%C3%A1c-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-g%E1%BB%8Di-api\">Đóng gói các phương thức gọi API</a></li>\n<li><a href=\"#localstorage-v%C3%A0-cookies\">localStorage và Cookies</a></li>\n<li><a href=\"#theo-d%C3%B5i-file\">Theo dõi file</a></li>\n<li><a href=\"#tr%C3%ACnh-nghe-nh%E1%BA%A1c\">Trình nghe nhạc</a></li>\n</ul>\n<!-- /TOC -->\n<p>Tổng hợp lại để nhớ về middleware, nó là 1 function nhận vào</p>\n<p>storeInstance\n=> functionToCallWithAnActionThatWillSendItToTheNextMiddleware\n=> actionThatDispatchWasCalledWith\n=> valueToUseAsTheReturnValueOfTheDispatchCall</p>\n<p>Được viết với dạng syntax</p>\n<pre class=\"language-text\"><code class=\"language-text\">store =&gt; next =&gt; action =&gt; result</code></pre>\n<p>Sau đấy được sử dụng bằng cách truyền vào như một tham số cho hàm <code>applyMiddleware</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> middlewares <span class=\"token operator\">=</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>middleware1<span class=\"token punctuation\">,</span> middleware2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">,</span> initState<span class=\"token punctuation\">,</span> middlewares<span class=\"token punctuation\">)</span></code></pre>\n<p>Middleware đơn giản nhất là một function éo làm gì cả, nó chỉ forward cái action đến middleware kế tiếp</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"đóng-gói-các-phương-thức-gọi-api\"><a href=\"#%C4%91%C3%B3ng-g%C3%B3i-c%C3%A1c-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-g%E1%BB%8Di-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đóng gói các phương thức gọi API</h2>\n<p>Nếu API của chúng ta cần authentication token, thay vì trên mỗi action creatỏ chúng ta lấy token (có thể từ <code>store.getState</code> hoặc <code>sessionStorage</code>), rồi truyền tham số này vào trước khi gọi api, chúng ta dùng middleware để làm chuyện đó sẽ tốt hơn</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'FETCH'</span><span class=\"token punctuation\">,</span>\n    url<span class=\"token punctuation\">,</span>\n    params<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">fetchImplementation</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'FETCH'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">token</span><span class=\"token punctuation\">;</span>\n        _<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> <span class=\"token string\">'headers.token'</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">fetchImplementation</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetchMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">fetch</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// vi du goi action</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUser</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">id</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>dispatch<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://api.website.com/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Thằng middleware <code>fetchMiddleware</code> khi túm được <code>action.type</code> tên là <strong>FETCH</strong> nó sẽ thực hiện việc gởi một HTTP request và trả về 1 <code>promise</code></p>\n<p>Ở đây để làm cho ví dụ đơn giản chúng ta không implement cái <code>fetchImplementation</code> mà đang hard code thằng này sử dụng <code>window.fetch</code></p>\n<h2 id=\"localstorage-và-cookies\"><a href=\"#localstorage-v%C3%A0-cookies\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>localStorage và Cookies</h2>\n<p>Ứng dụng nào cũng sẽ cần lưu thông tin user, có thể là <em>authentication token</em> hoặc đường dẫn lần trước user truy cập. Chúng ta sẽ sử dụng middleware để lưu trạng thái này xuống <code>localStorage</code> hoặc <em>cookies</em>.</p>\n<p>Nếu chúng ta gọi <code>getState</code> trước khi gọi <code>next(action)</code>, chúng ta sẽ có <strong>before state</strong> trước khi action đến tay <code>reducer</code>, nếu chúng ta gọi nó sau <code>next(action)</code>, chúng ta có <strong>after state</strong> sau khi reducer xử lý. Dựa vào <strong>before state</strong> và <strong>after state</strong> này chúng ta có thể thay đổi đúng cái đã bị thay đổi</p>\n<p>Ví dụ lưu authentication token xuống <code>localStorage</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// lấy before state và after state</span>\n    <span class=\"token keyword\">const</span> previousToken <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">token</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> nextToken <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">token</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// thay đổi</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>nextToken <span class=\"token operator\">!==</span> previousToken<span class=\"token punctuation\">)</span> <span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">,</span> nextToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// lấy init state từ localStorage</span>\n<span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> <span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> initState <span class=\"token operator\">=</span> token\n    <span class=\"token operator\">?</span> _<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>defaultState<span class=\"token punctuation\">,</span> <span class=\"token string\">'token'</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> defaultState<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">,</span> middlewares<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"theo-dõi-file\"><a href=\"#theo-d%C3%B5i-file\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Theo dõi file</h2>\n<p>Ví dụ trong ứng dụng ta có state là <code>activeFiles</code>, là một mảng file bạn muốn theo dõi thay đổi. Khi file thay đổi, chúng ta muốn <code>dispatch</code> 1 action</p>\n<p>Sử dụng tương tự như trên</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fileWatcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fileWatcher<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file-changed'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">filename</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'FILE_CHANGED'</span><span class=\"token punctuation\">,</span> filename <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Make sure we're watching files that may be included in the store's initial state</span>\n    <span class=\"token keyword\">const</span> initialFiles <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">activeFiles</span><span class=\"token punctuation\">;</span>\n    fileWatcher<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">watchFiles</span><span class=\"token punctuation\">(</span>initialFiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Get the state before and after the action was performed</span>\n        <span class=\"token keyword\">const</span> previousFiles <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">activeFiles</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> nextFiles <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">activeFiles</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// See what changed before and after</span>\n        <span class=\"token keyword\">const</span> filesToUnwatch <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">difference</span><span class=\"token punctuation\">(</span>previousFiles<span class=\"token punctuation\">,</span> nextFiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> filesToWatch <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">difference</span><span class=\"token punctuation\">(</span>nextFiles<span class=\"token punctuation\">,</span> previousFiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Respond to changes</span>\n        fileWatcher<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unwatchFiles</span><span class=\"token punctuation\">(</span>filesToUnwatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        fileWatcher<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">watchFiles</span><span class=\"token punctuation\">(</span>filesToWatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Ở đây thì nó không phụ thuộc action: vô tư tạo vô số action nếu muốn thay đổi giá trị active files, chúng ta không cần thay đổi logic trong middleware.</p>\n<p>Về mặt kỹ thuật, ví vụ trên có thể viết lại bằng cách sử dụng <code>store.subscribe</code>. Tuy nhiên tiếp cận vấn đề liên quan tới side-effect của middleware phụ thuộc vào action bằng middleware là tốt nhất</p>\n<h2 id=\"trình-nghe-nhạc\"><a href=\"#tr%C3%ACnh-nghe-nh%E1%BA%A1c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Trình nghe nhạc</h2>\n<p>Rất giống như ví vụ trên. Khác biệt quan trọng là: sự thay đổi của <code>state</code> có thể xảy ra từ middleware hoặc từ những nguồn khác.</p>\n<p>Giờ chúng ta có <code>state</code> là <code>isPlaying</code> và <code>currentTime</code>. Chúng ta sẽ giữ đúng khái niệm \"single source of truth\" của redux, middleware sẽ đảm nhiệm việc giữ giá rị state này. Nếu action thay đổi <code>isPlaying</code> từ <code>false</code> sang <code>true</code>, thì ta play nhạc, nếu action thay đổi <code>currentTime</code> chúng ta sẽ phát đến đúng thời gian đó.</p>\n<p>Để cho chính xác, trong middleware chúng ta adjust một chút để khi <code>isPlaying</code> chuyển sang <code>false</code>, chúng ta thay đổi luôn <code>currentTime</code>. Cái ngày cực kỳ quan trọng vì chúng ta không muốn cứ mỗi khi <code>currentTime</code> mà thay đổi thì chúng ta lại phát đúng đến thời điểm đó. Thêm parameter <code>origin</code> trong action để làm đối số kiểm tra</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">musicPlayer</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> playbackOrigin <span class=\"token operator\">=</span> <span class=\"token string\">'playbackOrigin'</span><span class=\"token punctuation\">;</span>\n\n    musicPlayer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'current-time-changed'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">currentTime</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'SET_CURRENT_TIME'</span><span class=\"token punctuation\">,</span> origin<span class=\"token operator\">:</span> playbackOrigin<span class=\"token punctuation\">,</span> currentTime <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    musicPlayer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'playback-finished'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'STOP_PLAYING'</span><span class=\"token punctuation\">,</span> origin<span class=\"token operator\">:</span> playbackOrigin <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> initState <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>initState<span class=\"token punctuation\">.</span><span class=\"token property-access\">isPlaying</span><span class=\"token punctuation\">)</span> musicPlayer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    musicPlayer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">seek</span><span class=\"token punctuation\">(</span>initState<span class=\"token punctuation\">.</span><span class=\"token property-access\">currentTime</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isPlaying<span class=\"token operator\">:</span> wasPlaying<span class=\"token punctuation\">,</span> currentTime<span class=\"token operator\">:</span> previousTime <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isPlaying<span class=\"token operator\">:</span> isPlaying<span class=\"token punctuation\">,</span> currentTime<span class=\"token operator\">:</span> nextTime <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// không dispatch action với các action từ player</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">origin</span> <span class=\"token operator\">===</span> playbackOrigin<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>wasPlaying <span class=\"token operator\">&amp;&amp;</span> isPlaying<span class=\"token punctuation\">)</span> musicPlayer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>wasPlaying <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>isPlaying<span class=\"token punctuation\">)</span> musicPlayer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>previousTime <span class=\"token operator\">!==</span> nextTime<span class=\"token punctuation\">)</span> musicPlayer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">seek</span><span class=\"token punctuation\">(</span>nextTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Miễn là làm đúng cái middleware này, chúng ta sẽ không bao giờ dính mấy con bug kiểu như nút Play thì đang cho thấy ở trạng thái Pause trong khi đang phát rầm rầm.</p>\n<p><a href=\"https://medium.com/@jacobp100/you-arent-using-redux-middleware-enough-94ffe991e6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài gốc của tác giả Jacob Parker</a></p>\n","cover_image":"","related":[{"id":"1b2de7c708c340c3c39f2150b714a897","path":"/4-ung-dung-cua-array-from/","title":"4 ứng dụng của Array.from","desc":"Vài ứng dụng nhỏ của hàm Array.from"},{"id":"02a02d68e2737698423d912c23786ac2","path":"/mot-so-cach-viet-su-dung-trong-react/","title":"Một số cách viết sử dụng trong React","desc":"Tổng hợp các cách làm phổ biến trong React"},{"id":"0f44ee174018384de200da37b4aac6d7","path":"/huong-dan-su-dung-cong-cu-de-check-contrast-trong-chrome/","title":"Hướng dẫn sử dụng công cụ để check contrast trong Chrome","desc":"Tip siêu ngắn để kiểm tra contrast có hợp nhãn với Chrome không"},{"id":"d9b7334775e4e76d0ff03ef628719c56","path":"/mot-vai-ung-dung-hay-ho-cua-reduce/","title":"Một vài ứng dụng hay ho của reduce","desc":"Hãy học sử dụng reduce, vượt qua những ví vụ căn bản bằng cộng, trừ, nhân, chia"}]}},"context":{}}