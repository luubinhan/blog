{"hash":"2614a9f464f28805085bbbd764f6609c0dea9377","data":{"post":{"title":"Merge vs Rebase trong Git","path":"/2018-09-18-merging-va-rebase-trong-git/","slug":"/2018-09-18-merging-va-rebase-trong-git","date":"2018-09-18","timeToRead":3,"tags":[{"id":"git","title":"git","path":"/tag/git/"}],"desc":"Trong bài viết này, chúng ta sẽ so sánh giữa lệnh git rebase với git merge, những trường hợp ta có thể áp dụng rebase trong quá trình làm việc với git","content":"<p><strong>Merge</strong> và <strong>Rebase</strong> là 2 công cụ để <em>trộn</em> 2 <em>branch</em> trong Git, mục đích sử dụng cho những tính huống khác nhau.</p>\n<p>Một tình huống phổ biến khi sử dụng <em>merge</em></p>\n<ul>\n<li>Tạo nhánh <code class=\"language-inline-text\">my-new-feature</code> từ nhánh <code class=\"language-inline-text\">master</code></li>\n<li>Commit nhánh <code class=\"language-inline-text\">my-new-feature</code> với một số thay đổi</li>\n<li>Tạo Pull Request: <code class=\"language-inline-text\">my-new-feature</code> vào <code class=\"language-inline-text\">master</code></li>\n</ul>\n<p>Sau khi <code class=\"language-inline-text\">my-new-feature</code> được <code class=\"language-inline-text\">merge</code> vào <code class=\"language-inline-text\">master</code>, chúng ta sẽ có</p>\n<p><img src=\"https://blog-api.algolia.com/wp-content/uploads/2017/12/image5.png\"></p>\n<p>Đó là trường hợp lý tưởng rất ít khi xảy ra, 99.999999% là <code class=\"language-inline-text\">my-new-feature</code> có vài điểm cần bổ sung sau khi review code, bug chẳng hạn, sai chính tả chẳng hạn.</p>\n<ul>\n<li>Chúng ta bổ sung 2 commit <strong>C6</strong> và <strong>C7</strong> vào nhánh <code class=\"language-inline-text\">my-new-feature</code></li>\n<li>Trong lúc đó, <code class=\"language-inline-text\">master</code> cũng có thêm 2 commit <strong>C8</strong>, <strong>C9</strong> được <code class=\"language-inline-text\">merge</code> vào bởi 2 bạn đồng nghiệp</li>\n<li>Cuối cùng PR của chúng ta cũng được <code class=\"language-inline-text\">merge</code></li>\n</ul>\n<p>Cái history lúc này (vẫn ok chứ không vấn đề gì)</p>\n<p><img src=\"https://blog-api.algolia.com/wp-content/uploads/2017/12/image3-720x158.png\"></p>\n<p>Tuy nhiên, cũng là một tính huống rất hay gặp luôn, chúng ta <em>ôm</em> nhánh <code class=\"language-inline-text\">my-new-feature</code> gần một tuần mà chưa xong, và chúng ta muốn có <strong>C8</strong>, <strong>C9</strong> đã được merge, và một cách chủ quan duy ý chí, dân dev chúng ta muốn có một cái history thật sạch đẹp, theo kiểu từng commit C4, C5, C6, C7,... là từng công việc rất cụ thể và độc lập, chúng ta không muốn gom hết một lượt đến cuối sprint rồi commit toàn bộ file là điều khiến người review code vô cùng mệt não.</p>\n<p><img src=\"https://blog-api.algolia.com/wp-content/uploads/2017/12/image2-720x239.png\"></p>\n<p><em>Rebase giúp được gì ở tình huống này?</em></p>\n<p>Năm 2016 Github giới thiệu một cách merge PR mới: <strong>Rebase and merge</strong> (Gitlab sẽ là <strong>Rebase front door</strong>). Nó cho phép chúng ta thực hiện một thao tác <strong>rebase</strong> trên commit PR rồi mới thực hiện việc merge. 2 thao tác này hoàn toàn độc lập và luôn đúng theo thứ tự rebase trước, merge sau, chứ ko có ngược lại.</p>\n<p>Tương tự như nút <code class=\"language-inline-text\">Rebase and merge</code>, nếu dùng command</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout my-new-feature\n<span class=\"token function\">git</span> rebase master\n<span class=\"token function\">git</span> checkout master\n<span class=\"token function\">git</span> merge my-new-feature --ff</code></pre></div>\n<p>Bằng cách đó, history lúc này là một đường thẳng tắp</p>\n<p><img src=\"https://blog-api.algolia.com/wp-content/uploads/2017/12/image4-720x136.png\"></p>\n<blockquote>\n<p>Rebase không phải để thay thế merge, <code class=\"language-inline-text\">rebase</code> dùng để thực hiện trên nhánh feature - private branch của chúng ta, merge thực hiện trên master - share branch với đồng nghiệp</p>\n</blockquote>\n<p>Việc <code class=\"language-inline-text\">rebase</code> -> <code class=\"language-inline-text\">merge</code> như thế sẽ tránh mất đi những commit C4, C5, C6, C7 trên history của nhánh <code class=\"language-inline-text\">master</code>, như khi chỉ dùng một lệnh <code class=\"language-inline-text\">merge</code>. Chúng ta bê nguyên cái history của nhánh <code class=\"language-inline-text\">my-new-feature</code> lên luôn.</p>\n<p>Vấn đề thứ 2, làm sao để <strong>sync</strong> nhánh <code class=\"language-inline-text\">my-new-feature</code> với <code class=\"language-inline-text\">master</code> (có C8, C9)?</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/* lấy những thay đổi mới */\n<span class=\"token function\">git</span> fetch\n/* checkout nhánh chúng ta muốn <span class=\"token function\">sync</span> với master */\n<span class=\"token function\">git</span> checkout my-new-feature\n/* thực hiện <span class=\"token function\">sync</span> với master */\n<span class=\"token function\">git</span> rebase origin/master</code></pre></div>\n<p><img src=\"https://blog-api.algolia.com/wp-content/uploads/2017/12/image1.png\"></p>\n<blockquote>\n<p>Giữ nhánh <code class=\"language-inline-text\">my-new-feature</code> cập nhập với những thay đổi mới nhất ở nhánh <code class=\"language-inline-text\">master</code> để tránh quá nhiều conflict xảy ra khi tạo PR</p>\n</blockquote>\n<p>Nút <strong>Rebase and merge</strong> không được yêu thích lắm, vì nó tạo quá nhiều conflict, nên chúng ta vẫn thường ưu ái merge hơn.</p>\n<p>Để có một history thẳng hàng, đầy đủ tốn khá nhiều mồ hôi chứ không dễ như ăn bánh.</p>\n<p><em>Bài viết được bổ sung chỉnh sửa theo góp ý của bạn Nguyễn Thanh Nhân</em></p>\n<p><a href=\"https://www.algolia.com/blog/engineering/master-git-rebase/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.algolia.com/blog/engineering/master-git-rebase/</a></p>\n","cover_image":"","related":[{"id":"8afa5feb4373f89126d4f75ca9dba253","path":"/2019-03-07-huong-dan-lua-chon-phuong-thuc-lap-trong-array/","title":"for vs forEach vs for/in vs for/of trong javascript","desc":"Trong javascript có rất nhiều cách để loop qua một array, chúng ta cùng bàn qua 4 cách chính hay sử dụng nhất"},{"id":"4be93db6e537bdcb646a0586abd148e5","path":"/2018-06-08-huong-dan-kinh-nghiem-lam-viec-voi-du-an-lon/","title":"Kinh nghiệm tổ chức file và thư mục React project","desc":"Có bao giờ cảm thấy lạc lối trong đóng code ngày càng lúc bự ra, một vài tip từ người có kinh nghiệm"},{"id":"1e87499ea6ebb8b16acfd36afb69a738","path":"/2018-11-16-cau-dieu-kien-trong-javascript-phan-nang-cao/","title":"Câu điều kiện trong javascript","desc":"Nắm vững conditional expression trong javascript để viết code sạch sẽ hơn"}]}},"context":{}}