{"hash":"9aeee0a3b55006b00a80cc09aa73da4e17f71410","data":{"post":{"title":"Giới thiệu fetch() của javascript","path":"/2018-10-01-huong-dan-gioi-thieu-fetch-javascript/","slug":"/2018-10-01-huong-dan-gioi-thieu-fetch-javascript","date":"2018-10-01","timeToRead":5,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"},{"id":"mobile-web-specialist","title":"mobile-web-specialist","path":"/tag/mobile-web-specialist/"}],"desc":"Tạm biệt XMLHttpRequest và cách viết dài dòng, giờ đây ta đã có fetch API","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#vi%E1%BA%BFt-m%E1%BB%99t-c%C3%A2u-request-network-%C4%91%C6%A1n-gi%E1%BA%A3n-v%E1%BB%9Bi-fetch\">Viết một câu request network đơn giản với fetch</a></li>\n<li><a href=\"#response-metadata\">Response Metadata</a></li>\n<li><a href=\"#response-types\">Response Types</a></li>\n<li><a href=\"#chu%E1%BB%97i-promise\">Chuỗi Promise</a></li>\n<li><a href=\"#post-request\">POST Request</a></li>\n<li><a href=\"#g%E1%BB%ADi-th%C3%B4ng-tin-x%C3%A1c-th%E1%BB%B1c-v%E1%BB%9Bi-fetch\">Gửi thông tin xác thực với Fetch</a></li>\n<li><a href=\"#upload-file\">Upload file</a></li>\n<li><a href=\"#upload-nhi%E1%BB%81u-file\">Upload nhiều file</a></li>\n</ul>\n<!-- /TOC -->\n<p><code class=\"language-inline-text\">fetch()</code> cho phép tạo một network request tương tự như XMLHttpRequest(XHR). Sự khác nhau chủ yếu là Fetch hoạt động theo <strong>Promises</strong>, cho phép viết gọn ràng, dễ nhớ hơn là XHR. API Fetch có trong <code class=\"language-inline-text\">window.fetch()</code> giờ đã được hổ trợ phổ biến, bạn không cần polyfill gì đâu, vĩnh biệt IE.</p>\n<h1 id=\"một-câu-request-network-bằng-fetch\"><a href=\"#m%E1%BB%99t-c%C3%A2u-request-network-b%E1%BA%B1ng-fetch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một câu request network bằng <code class=\"language-inline-text\">fetch</code></h1>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/some-url'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Lỗi, mã lỗi '</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// parse response data</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error :-S'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Response của câu <code class=\"language-inline-text\">fetch()</code> là một đối tượng <strong>Stream</strong>, nghĩa là khi chúng ta gọi phương thức <code class=\"language-inline-text\">json()</code>, một <code class=\"language-inline-text\">Promise</code> được trả về, vì quá trình đọc stream sẽ diễn ra bất đồng bộ.</p>\n<h1 id=\"response-metadata\"><a href=\"#response-metadata\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Response MetaData</h1>\n<p>Bên cạnh các dữ liệu chúng ta có thể truy cập như trong ví dụ trên, chúng ta có thể truy cập đến các meta data khác</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/some-url'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Date'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"responsetype\"><a href=\"#responsetype\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-inline-text\">response.type</code></h1>\n<p>Khi chúng ta tạo một fetch request, response trả về sẽ chứa <strong>response.type</strong>, với một trong 3 giá trị: <strong>basic</strong>, <strong>cors</strong>, <strong>opaque</strong>. </p>\n<p>Nó cho biết resource này đến từ đâu, cho chúng ta biết cách chúng ta nên <em>đối xử</em> với object trả về</p>\n<p><img src=\"https://rootsec.info/wp-content/uploads/2017/07/same-origin-policy.jpg\" alt=\"same origin\"></p>\n<ul>\n<li>Nếu request lên cùng một <strong>nhà</strong> (ứng dụng host trên server A gửi request lên API trên server A), <code class=\"language-inline-text\">response.type</code> sẽ là <code class=\"language-inline-text\">basic</code>, không có bất kỳ giới hạn việc xem các thông tin trên response.</li>\n<li>Nếu request dạng <strong>CORS</strong>, nhà em ở Hồ Chí Mình, em quen bạn gái Hà Nội,  <code class=\"language-inline-text\">type</code> trả về sẽ là <code class=\"language-inline-text\">cors.cors</code>, lúc đó bên trong <code class=\"language-inline-text\">header</code> chúng ta chỉ được phép truy cập đến <code class=\"language-inline-text\">Cache-Control</code>, <code class=\"language-inline-text\">Content-Language</code>, <code class=\"language-inline-text\">Content-Type</code>, <code class=\"language-inline-text\">Expires</code>, <code class=\"language-inline-text\">Last-Modified</code> và <code class=\"language-inline-text\">Pragma</code></li>\n<li>Type <code class=\"language-inline-text\">opaque</code> cho các request tạo ra khác <strong>nhà</strong>, và thằng server nó không chấp nhận dạng request <strong>CORS</strong>, ba má cấm chú quen gái Hà Nội, nghĩa là không trả về dữ liệu, không xem được status của request, chia tay tình yêu.</li>\n</ul>\n<p>Để khai báo 1 fetch request chỉ <code class=\"language-inline-text\">resolve</code> khi thõa điều kiện <strong>mode</strong></p>\n<ul>\n<li><code class=\"language-inline-text\">same-origin</code>: các request nhà kế bên sẽ trả về <code class=\"language-inline-text\">reject</code></li>\n<li><code class=\"language-inline-text\">cors</code>: cho phép nhà khác nếu header trả về cũng là cors</li>\n<li><code class=\"language-inline-text\">cors-with-forced-preflight</code> luôn thực hiện kiểm tra <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Preflighted_requests\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">preflight</a>. Là trước khi gửi đi, để đảm bảo an toàn, tạo một request dùng phương thức OPTIONS để kiểm tra độ an toàn, (nhà anh có điều kiện ko mà đòi quen bạn gái tận Hà Nội xa xôi)</li>\n<li><code class=\"language-inline-text\">no-cors</code> tạo một request không <em>cùng nhà</em>, không trả về <code class=\"language-inline-text\">CORS</code></li>\n</ul>\n<p>Để khai báo mode</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://some-site.com/cors-enabled/some.json'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>mode<span class=\"token punctuation\">,</span> <span class=\"token string\">'cors'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request successful'</span><span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request failed'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1 id=\"liên-kết-promise\"><a href=\"#li%C3%AAn-k%E1%BA%BFt-promise\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Liên kết Promise</h1>\n<p>Một trong những tính năng hay (<strong>và sinh ra rắc rối</strong>) của Promise là cho phép mắc-xích-các-Promise lại với nhau.</p>\n<p>Khi làm việc với JSON API, chúng ta quan tâm đến <code class=\"language-inline-text\">status</code> và <code class=\"language-inline-text\">parse</code> JSON trả về, để đơn giản hóa, đưa phần xử lý kiểm tra <code class=\"language-inline-text\">status</code> và <code class=\"language-inline-text\">parse</code> này ra hàm riêng. Chúng ta chỉ lo xử lý kết quả cuối cùng và trường hợp có lỗi</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request succeeded with JSON response'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request failed'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1 id=\"post-request\"><a href=\"#post-request\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POST Request</h1>\n<p>Set giá trị <code class=\"language-inline-text\">method</code> và <code class=\"language-inline-text\">body</code> để tạo một POST request</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/x-www-form-urlencoded; charset=UTF-8\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token operator\">:</span> <span class=\"token string\">'foo=bar&amp;lorem=ipsum'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request succeeded with JSON response'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request failed'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Gửi lên dữ liệu dạng JSON</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>username<span class=\"token operator\">:</span> <span class=\"token string\">'example'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> \n  body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n  headers<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success:'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"gửi-thông-tin-xác-thực-với-fetch\"><a href=\"#g%E1%BB%ADi-th%C3%B4ng-tin-x%C3%A1c-th%E1%BB%B1c-v%E1%BB%9Bi-fetch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gửi thông tin xác thực với Fetch</h1>\n<p>Để gửi kèm thông tin xác thực cookie (user là ai), chúng ta truyền tham số <code class=\"language-inline-text\">credentials: include</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  credentials<span class=\"token operator\">:</span> <span class=\"token string\">'include'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Nếu muốn gửi credentials khi request URL là <strong>cùng nhà*</strong>, truyền giá trị <code class=\"language-inline-text\">same-origin</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  crendentials<span class=\"token operator\">:</span> <span class=\"token string\">'same-origin'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Không cho trình duyệt gửi thông tin xác thực, dùng <code class=\"language-inline-text\">omit</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  crendentials<span class=\"token operator\">:</span> <span class=\"token string\">'omit'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"upload-file\"><a href=\"#upload-file\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Upload file</h1>\n<p>Sử dụng cùng <code class=\"language-inline-text\">&lt;input type='file' /></code>, <code class=\"language-inline-text\">FormData()</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> formData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> fileField <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input[type='file']\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nformData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc123'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nformData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'avatar'</span><span class=\"token punctuation\">,</span> fileField<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com/profile/avatar'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  method<span class=\"token operator\">:</span> <span class=\"token string\">'PUT'</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token operator\">:</span> formData\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success:'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"upload-nhiều-file\"><a href=\"#upload-nhi%E1%BB%81u-file\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Upload nhiều file</h1>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> formData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> photos <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input[type='file'][multiple]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nformData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'My Vegas Vacation'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nformData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'photos'</span><span class=\"token punctuation\">,</span> photos<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com/posts'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token operator\">:</span> formData\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success:'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://developers.google.com/web/updates/2015/03/introduction-to-fetch\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài viết gốc</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ví dụ tham khảo, chi tiết hơn về header, body, response object</a></p>\n","cover_image":"","related":[{"id":"e9d2a9d4a3ed5b8ecc39c580a3f2ffb8","path":"/2018-11-03-gioi-thieu-markdown/","title":"Giới thiệu Markdown","desc":"Markdown vở lòng cho bạn nào chưa biết"},{"id":"0be257d7b6339261c05ba76120350279","path":"/2017-07-31-react-router/","title":"Giới thiệu React Router","desc":"React không phải một framework, nó chỉ là một thư viện javascript, bởi vì vậy nó không thể giải quyết tất cả các yêu cầu một ứng dụng. Việc mà React làm rất tốt là tạo component và cách thức quản lý state của component, nhưng để tạo một Single Page App (sẽ viết tắt là SPA) phức tạp, nó cần những thư viện khác nữa, đầu tiên cần nhắc đến là React Router"},{"id":"5d93819d1a5c10be427112a7e0bf625b","path":"/2018-11-04-gioi-thieu-react-memo-moi-trong-react16/","title":"Giới thiệu React.memo","desc":"Api mới của React 16.6"},{"id":"fa886c080ce0cc5ae7c411b14a1be10f","path":"/2018-05-31-huong-dan-gioi-thieu-react-portal/","title":"Giới thiệu React Portal","desc":"Tìm hiểu về Portals, bản hỗ trợ chính thức của react-dom"}]}},"context":{}}