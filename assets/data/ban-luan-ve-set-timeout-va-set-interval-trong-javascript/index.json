{"hash":"abad1accdeff08a5b295c1ca2179f7b6ebc52b82","data":{"post":{"title":"Bàn luận về setTimeout và setInterval trong javascript","path":"/ban-luan-ve-set-timeout-va-set-interval-trong-javascript/","slug":"/2019-11-16-ban-luan-settimout-va-setinterval-trong-javascript","date":"2019-11-16","timeToRead":3,"tags":[{"id":"hoc-thuat","title":"hoc-thuat","path":"/tag/hoc-thuat/"},{"id":"javascript","title":"javascript","path":"/tag/javascript/"}],"desc":"Một số vấn đề về setTimeout đáng để bạn cân nhắc trước khi sử dụng","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#setinterval\">setInterval</a></li>\n<li><a href=\"#settimeout\">setTimeout</a></li>\n</ul>\n<!-- /TOC -->\n<p>Nếu bạn cần gọi một hàm <strong>lặp lại</strong> theo một khoản thời gian nhất định trong javascript bạn sẽ dùng gì? Một là dùng <code class=\"language-text\">setInterval</code>  hay là đệ quy <code class=\"language-text\">setTimeout</code></p>\n<p>Vì sao bạn nên cân nhắc trước khi sử dụng <code class=\"language-text\">setInterval</code>, nó đã gây ra tội tình gì? Vì sao sẽ tốt hơn nếu chúng ta lắng nghe và đợi một <em>tín hiệu</em> nào đó rồi chạy</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// đợi tính hiệu nào đó rồi thực thi một số việc</span>\n  <span class=\"token comment\">// sẽ luôn là lựa chọn tốt nhất</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu ông bà có dạy <em>đợi mua bò mới đi làm chuồng thì đã muộn</em> không đúng trong trường hợp này. <strong>CÓ</strong> trước hẳn làm gì thì làm.</p>\n<h3 id=\"setinterval\"><a href=\"#setinterval\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>setInterval</h3>\n<p>Với <code class=\"language-text\">setInterval</code> nó sẽ tiếp tục chạy cho tới khi chúng ta ra lệnh xóa nó hoặc đóng luôn trình duyệt.</p>\n<p><code class=\"language-text\">setInterval</code> cam kết đoạn code của chúng ta nó sẽ được đưa vào <strong>STACK</strong> theo đúng một chu kỳ thời gian. <em>Tuy nhiên</em>, đoạn code này của bạn <strong>không được cam kết</strong> sẽ chạy theo đúng chu kỳ thời gian, phụ thuộc vào các yếu tố khác nữa, và đã phần là có độ trễ, theo một cách dân gian ta gọi nó là <strong>HÊN XUI</strong></p>\n<p><img src=\"https://miro.medium.com/max/1837/1*A138JkWveIfKajztvhu60g.png\" alt=\"Bàn luận về setTimeout và setInterval trong javascript\"></p>\n<p>Thời gian chạy của hàm <code class=\"language-text\">dummyMethod1</code> tốn nhiều thời gian hơn dự tính, <em>lý do thì không rõ</em>.</p>\n<blockquote>\n<p>Javascript được thiết kế để chạy single thread, nó <strong>không</strong> thực hiện hai công việc cùng một lúc.</p>\n</blockquote>\n<p>Điều đó có nghĩa, các phương thức khác phía trên stack phải <strong>đợi</strong> cho đến khi <code class=\"language-text\">dummyMethod1</code> làm xong công chuyện của nó.</p>\n<p>Thêm một ví dụ khác, nếu hàm khai báo bên trong <code class=\"language-text\">setInterval</code> có thời gian chạy lớn hơn giá trị delay của <code class=\"language-text\">setInterval</code> (ví dụ như hàm gọi ajax), chúng ta sẽ có vấn đề như thế này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fakeCallToServer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returning from server'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">let</span> insideSetInterval <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'insideSetInterval'</span><span class=\"token punctuation\">,</span> insideSetInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">fakeCallToServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//insideSetInterval 14:13:47</span>\n<span class=\"token comment\">//insideSetInterval 14:13:49</span>\n<span class=\"token comment\">//insideSetInterval 14:13:51</span>\n<span class=\"token comment\">//returning from server 14:13:51</span>\n<span class=\"token comment\">//insideSetInterval 14:13:53</span>\n<span class=\"token comment\">//returning from server 14:13:53</span>\n<span class=\"token comment\">//insideSetInterval 14:13:55</span>\n<span class=\"token comment\">//returning from server 14:13:55</span></code></pre>\n<p>Như kết quả ở trên cho thấy, câu <code class=\"language-text\">console.log(&quot;insideSetInterval&quot;)</code> sẽ liên tục gọi ajax bất kể trước đó đã gọi thành công chưa. Đáng lẽ chúng ta phải kết thúc việc gọi liên tục này, đa phần chúng ta quên <code class=\"language-text\">clearInterval</code>. Nó sẽ tạo ra một hàng đợi <em>dài ngoằn</em> trong stack.</p>\n<p>Giờ thử một xử lý tuần tự trong <code class=\"language-text\">setInterval</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fakeTimeIntensiveOperation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> <span class=\"token number\">50000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'random'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> insideTimeTakingFunction  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'insideTimeTakingFunction'</span><span class=\"token punctuation\">,</span> insideTimeTakingFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> insideSetInterval <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'insideSetInterval'</span><span class=\"token punctuation\">,</span> insideSetInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>counter <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fakeTimeIntensiveOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>counter <span class=\"token operator\">>=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//insideSetInterval 13:50:53</span>\n<span class=\"token comment\">//insideTimeTakingFunction 13:50:55</span>\n<span class=\"token comment\">//insideSetInterval 13:50:55 &lt;---- mất tiêu câu gọi lúc 54 giây</span>\n<span class=\"token comment\">//insideSetInterval 13:50:56</span>\n<span class=\"token comment\">//insideSetInterval 13:50:57</span>\n<span class=\"token comment\">//insideSetInterval 13:50:58</span></code></pre>\n<p>Những gì đang diễn ra ở trên, với một thao tác tốn <em>kha khá</em> thời gian xử lý, nó mất hẳn đoạn code <code class=\"language-text\">console.log(&quot;insideSetInterval&quot;)</code>, nôm na là nó bị <em>đứt một nhịp</em>, tình huống này xảy ra với Chrome, nó tạo ra một <em>nhịp</em> mới.</p>\n<p>Thay vì dùng <code class=\"language-text\">setInterval</code>, chúng ta có thể dùng đệ quy <code class=\"language-text\">setTimeout</code></p>\n<h3 id=\"settimeout\"><a href=\"#settimeout\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>setTimeout</h3>\n<p>Mặc dù cũng chưa hẳn cam kết 100% đoạn code của chúng chạy đúng theo một chu kỳ đã định với đệ quy <code class=\"language-text\">setTimeout</code>. Chí ít nó cũng không gây ra chuyện đưa hàng đống lệnh chờ chạy vào trong stack</p>\n<p><img src=\"https://miro.medium.com/max/1920/1*A9gNYo3pOtnzuXi30NHjfA.png\" alt=\"Bàn luận về setTimeout và setInterval trong javascript\"></p>\n<p>Khi thực hiện bằng <code class=\"language-text\">setTimeout</code>, bên trong vòng đệ quy chúng ta đã có bước kiểm tra <strong>có nên</strong> gọi thêm lần nữa không.</p>\n<p>Lưu ý khi bạn dùng setTimeout, chớ có <strong>thực thi</strong> hàm đó luôn (kèm dấu <code class=\"language-text\">()</code>), chúng ta chỉ truyền hàm đó thôi</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ☠ Lỗi</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 👍 OK</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>sayHi<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre>\n<p><strong>Nguồn tham khảo</strong></p>\n<p><a href=\"https://dev.to/akanksha_9560/why-not-to-use-setinterval--2na9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Why not to use setInterval</a></p>\n<p><a href=\"https://develoger.com/settimeout-vs-setinterval-cff85142555b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">setTimeout VS setInterval</a></p>\n<p><a href=\"https://javascript.info/settimeout-setinterval\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Scheduling: setTimeout and setInterval</a></p>\n","cover_image":"","related":[{"id":"5e248b4a520eaec55f161a88ec17d512","path":"/6-vi-du-de-ban-yeu-luon-observable/","title":"6 ví dụ để bạn yêu luôn observable","desc":"Thêm những lý do để dụ dỗ bạn xài Observable"},{"id":"0a408624be828657679088cbca8986c7","path":"/tiep-tuc-luan-ban-ve-cach-to-chuc-thu-muc-dat-ten-component-trong-react/","title":"Tiếp tục luận bàn về cách tổ chức thư mục, đặt tên component trong React","desc":"Hổm đã viết về vấn đề này rồi, giờ lại viết tiếp, vì bản thân React cũng không ra bất cứ rule nào về việc này, bạn tự do tổ chức sao mà mình thấy hợp lý, bài trước là của tác giả đó thấy vậy là hay, bài này thì tác giả thích tổ chức thế này"},{"id":"a511f45934f382e37f45b49f489d08df","path":"/sort-trong-javascript/","title":"Sort trong javascript","desc":"Nếu nghĩ đã hiểu rõ hàm Array.sort() trong javascript, hãy nghĩ lại!"}]}},"context":{}}