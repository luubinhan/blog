{"hash":"33153471da56228ddf4e2462835c7a1a5271f1bd","data":{"post":{"title":"Hồi 7: ES6 căn bản - Classes","path":"/hoi-7-e-s6-can-ban-classes/","date":"2016-11-21","timeToRead":2,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"}],"desc":"Hồi 7 trong series ES6 căn bản, Javascript vốn là ngôn ngữ prototype, class không phải là cái gì đó mới mẻ trong javascript","content":"<p>Trong Series này</p>\n<ol>\n<li><a href=\"/2016-11-15-chuong-1-es6-can-ban\">Nâng cấp cho Object</a></li>\n<li><a href=\"/2016-11-16-chuong-2-es6-can-ban-arrow-function/\">Arrow function</a></li>\n<li><a href=\"/2016-11-17-phan-3-es6-can-ban-assignment-destructuring\">Assignment Destruction</a></li>\n<li><a href=\"/2016-11-18-phan-4-es6-can-ban-rest-parameters-va-spread-operator\">Rest parameters và spread operator</a></li>\n<li><a href=\"/2016-11-19-phan-5-es6-can-ban-template-literals\">Template literals</a></li>\n<li><a href=\"/2016-11-20-phan-6-es6-can-ban-khai-bao-let-const\">Khai báo biến với let và const</a></li>\n<li><a href=\"/2016-11-21-phan-7-es6-can-ban-classes\">Căn bản class</a></li>\n</ol>\n<p>Javascript vốn là ngôn ngữ <code class=\"language-text\">prototype</code>, <code class=\"language-text\">class</code> không phải là cái gì đó mới mẻ trong javascript, chỉ là trước đây có cách khai báo và tên gọi khác prototype thì giờ có cách khai báo mới cho những ai đã quen với những ngôn ngữ khác có thể tiếp cận dễ dàng.</p>\n<h2 id=\"khai-báo\"><a href=\"#khai-b%C3%A1o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khai báo</h2>\n<p>Đây là cách khai báo trước đây, khai báo <code class=\"language-text\">fruit</code> sử dụng <code class=\"language-text\">function contstructor</code>, thêm một số phương thức cho nó bằng khai báo thêm <code class=\"language-text\">prototype</code>.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Fruit</span></span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">name<span class=\"token punctuation\">,</span> calories</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> name\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">calories</span> <span class=\"token operator\">=</span> calories\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pieces</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">chop</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pieces</span><span class=\"token operator\">++</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">bite</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pieces</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>amp<span class=\"token punctuation\">;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">const</span> calories <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span> <span class=\"token property-access\">calories</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pieces</span>\n person<span class=\"token punctuation\">.</span><span class=\"token property-access\">satiety</span> <span class=\"token operator\">+=</span> calories\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">calories</span> <span class=\"token operator\">-=</span> calories\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pieces</span><span class=\"token operator\">--</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Với ES6 viết theo khai báo <code class=\"language-text\">class</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fruit</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span> <span class=\"token parameter\">name<span class=\"token punctuation\">,</span> calories</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> name\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">calories</span> <span class=\"token operator\">=</span> calories\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pieces</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token function\">chop</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pieces</span><span class=\"token operator\">++</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token function\">bite</span> <span class=\"token punctuation\">(</span> <span class=\"token parameter\">person</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pieces</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>amp<span class=\"token punctuation\">;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> calories <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">calories</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pieces</span>\n  person<span class=\"token punctuation\">.</span><span class=\"token property-access\">satiety</span> <span class=\"token operator\">+=</span> calories\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">calories</span> <span class=\"token operator\">-=</span> calories\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pieces</span><span class=\"token operator\">--</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Lưu ý là với khai báo <code class=\"language-text\">class</code>, mình không cần thêm dấu <code class=\"language-text\">,</code> giữa các hàm, phân biệt với <code class=\"language-text\">object literal</code>, giữa mỗi <code class=\"language-text\">function</code> phải được phân cách bằng <code class=\"language-text\">,</code></p>\n<p>Không giống như khi khai báo function, nếu khái báo <code class=\"language-text\">class</code> bên dưới câu gọi nó, nó sẽ không hiểu, <code class=\"language-text\">function</code> thì viết ở đâu gọi cũng hiểu</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Result: referenceError: Person is not defined</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"phương-thức-và-properties-trong-classes\"><a href=\"#ph%C6%B0%C6%A1ng-th%E1%BB%A9c-v%C3%A0-properties-trong-classes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phương thức và Properties trong Classes</h2>\n<p><code class=\"language-text\">constructor</code> không bắt buộc khai báo</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fruit</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đoạn code ví dụ bên dưới, tạo một <code class=\"language-text\">class</code> với <code class=\"language-text\">property</code> là <code class=\"language-text\">count</code> hàm phương thức get next sẽ trả về giá trị <code class=\"language-text\">count</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">start</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">=</span> start\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">next</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Vận dụng, viết một class để lưu dữ liệu nhận về từ JSON, đọc thêm về <code class=\"language-text\">Window.localStorage</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LocalStorage</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">key</span> <span class=\"token operator\">=</span> key\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">set</span> <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">key</span><span class=\"token punctuation\">,</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> ls <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LocalStorage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'groceries'</span><span class=\"token punctuation\">)</span>\nls<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bananas'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'grapes'</span><span class=\"token punctuation\">]</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Result: ['apple', 'bananas','grapes']</span></code></pre>\n<p>tạo một phương thức <code class=\"language-text\">static</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MathHelper</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>numbers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> numbers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> a <span class=\"token operator\">+</span> b <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">MathHelper</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Result: 15</span></code></pre>\n<h2 id=\"class-extends\"><a href=\"#class-extends\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Class Extends</h2>\n<p>Trước đây gặp trường hợp này phải xài tới \"thuốc\" thì mới tạo được <code class=\"language-text\">sub-class</code>, mà cũng khá lằn ngoằn, giờ có cách chính quy. lưu ý là khi muốn viết lại hàm constructor bên trong sub-class thì phải gọi từ khóa super để gọi làm phương thức constructor từ class extend</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Banana</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fruit</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span><span class=\"token number\">105</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token function\">slice</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pieces</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","cover_image":"","related":[{"id":"6b73c7a8d9c5332b2e0a6315fcbcb943","path":"/hoi-2-e-s6-can-ban-arrow-function/","title":"Hồi 2: ES6 căn bản - Arrow Function","desc":"Hồi 2 trong series ES6 căn bản, nói về Arrow Function"},{"id":"cad93a1c7d14fac9d3f26a77aff31d1d","path":"/hoi-5-e-s6-can-ban-template-literals/","title":"Hồi 5: ES6 căn bản - Template literals","desc":"Hồi 5 trong series ES6 căn bản, nói về Template literals, một nâng cấp lớn cho string"},{"id":"1033f1efca1a045faea137fd0c0a873d","path":"/hoi-3-e-s6-can-ban-truy-cap-phan-tu/","title":"Hồi 3: ES6 căn bản - Truy cập phần tử","desc":"Hồi 3 trong series ES6 căn bản, nói về Assignment Destructuring"},{"id":"640a57b49950fe739bdc6e77b9cc51f4","path":"/hoi-4-e-s6-can-ban-rest-parameters-va-spread-operator/","title":"Hồi 4: ES6 căn bản - Rest Parameters và Spread Operator","desc":"Hồi 4 trong series ES6 căn bản, nói về Rest Parameters và Spread Operator"}]}},"context":{}}