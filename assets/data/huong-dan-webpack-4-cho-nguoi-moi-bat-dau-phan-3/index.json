{"hash":"e579e30389c3a92ccdc1669d7f43640a00bbbfb5","data":{"post":{"title":"Hướng dẫn webpack 4 cho người mới bắt đầu - Phần 3","path":"/huong-dan-webpack-4-cho-nguoi-moi-bat-dau-phan-3/","slug":"/2018-05-28-huong-dan-webpack-4-cho-nguoi-moi-bat-dau-phan-3","date":"2018-05-28","timeToRead":4,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"},{"id":"webpack","title":"webpack","path":"/tag/webpack/"}],"desc":"Bài này sẽ nói Plugins, Development, HotModuleReplacement trong Webpack","content":"<p>Trong Series này\n1. <a href=\"2018-05-25-viet-code-javascript-tot-hon-voi-webpack\">Webpack là gì và tại sao ta phải xài nó</a>\n2. <a href=\"2018-05-27-huong-dan-webpack-4-cho-nguoi-moi-bat-dau\">Dùng Loaders, code slitting trong webpack</a>\n3. <a href=\"2018-05-28-huong-dan-webpack-4-cho-nguoi-moi-bat-dau-phan-3\">Plugins, Development Server</a></p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#t%C3%A1ch-css\">Tách CSS</a></li>\n<li><a href=\"#c%E1%BA%ADp-nh%E1%BA%ADp-html-t%E1%BB%B1-%C4%91%E1%BB%99ng\">Cập nhập HTML tự động</a></li>\n<li><a href=\"#development-server\">Development Server</a></li>\n<li><a href=\"#hotmodulereplacement\">HotModuleReplacement</a></li>\n</ul>\n<!-- /TOC -->\n<p>Trong khi loader sẽ tiến hành transform từng file một, <strong>plugins</strong> sẽ tiến hành xử lý trong từng đoạn code</p>\n<p>Giờ chúng ta đã biết cách  bundle code, cài thêm các module bổ sung cho webpack, cách thêm các static asset, file bundle chúng ta sẽ bự dần bự dần - không sớm thì muộn thôi. Plugins sẽ giúp chúng ta tách phần code một cách thông mình hơn, optimize hơn cho production</p>\n<p>Thật ra ma nói, khi sử dụng <code class=\"language-text\">mode</code> development/production trong webpack chúng ta đã sử dụng rất nhiều plugin mặc định trong webpack</p>\n<p><em>develoment</em></p>\n<ul>\n<li>lúc này giá trị biến <code class=\"language-text\">process.env.NODE_ENV</code> sẽ bằng 'development'</li>\n<li>dùng NamedModulesPlugin</li>\n</ul>\n<p><em>production</em></p>\n<ul>\n<li><code class=\"language-text\">process.env.NODE_ENV</code> sẽ bằng 'production'</li>\n<li>UglifyJsPlugin</li>\n<li>ModuleConcatenationPlugin</li>\n<li>NoEmitOnErrorsPlugin</li>\n</ul>\n<p>Trước khi thêm một số plugin khác, chúng ta sẽ tách file config ra thành 2, để sau này chúng ta apply các plugin khác nhau cho các mode chạy khác nhau</p>\n<pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> webpack.config.js\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> webpack.common.js\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> webpack.dev.js\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> webpack.prod.js</span></span></code></pre>\n<p>Cài thêm plugin là <code class=\"language-text\">webpack-merge</code> để trộn file <em>webpack.common.js</em> với một trong 2 file webpack.dev.js hoặc webpack.prod.js</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev webpack-merge</code></pre>\n<p><strong>webpack.dev.js</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> merge <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-merge'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> common <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./webpack.common.js'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>common<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  mode<span class=\"token operator\">:</span> <span class=\"token string\">'development'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p><strong>webpack.prod.js</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> merge <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-merge'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> common <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./webpack.common.js'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>common<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  mode<span class=\"token operator\">:</span> <span class=\"token string\">'production'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p><strong>package.json</strong></p>\n<pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \"scripts\": {\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">    \"develop\": \"webpack --watch --mode development\",\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">    \"build\": \"webpack --mode production\"\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">    \"develop\": \"webpack --watch --config webpack.dev.js\",\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">    \"build\": \"webpack --config webpack.prod.js\"\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  },</span></span></code></pre>\n<h2 id=\"tách-css\"><a href=\"#t%C3%A1ch-css\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tách CSS</h2>\n<p>Chúng ta sẽ tách ra CSS khi chạy production bằng plugin là <code class=\"language-text\">ExtractTextWebpackPlugin</code></p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev extract-text-webpack-plugin</code></pre>\n<p>Setup loader cho file .scss giữ nguyên cho development mode, chỉ thêm ExtractTextWebpackPlugin cho production</p>\n<p><strong>webpack.common.js</strong></p>\n<pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">...\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> module.exports = {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   ...\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   module: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     rules: [\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       ...\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">       {\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">         test: /\\.scss$/,\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">         use: [\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">           {\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">             loader: 'style-loader'\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">           }, {\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">             loader: 'css-loader'\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">           }, {\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">             loader: 'sass-loader'\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">           }\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">         ]\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">       },\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       ...\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     ]\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   }\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> }</span></span></code></pre>\n<p><strong>webpack.dev.js</strong></p>\n<pre class=\"language-diff\"><code class=\"language-diff\">const merge = require('webpack-merge')\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const common = require('./webpack.common.js')\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> module.exports = merge(common, {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   mode: 'development',\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   module: {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     rules: [\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">       {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">         test: /\\.scss$/,\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">         use: [\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">           {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">             loader: 'style-loader'\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">           }, {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">             loader: 'css-loader'\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">           }, {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">             loader: 'sass-loader'\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">           }\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">         ]\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">       }\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     ]\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   }\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> })</span></span></code></pre>\n<p><strong>webpack.prod.js</strong></p>\n<pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const merge = require('webpack-merge')\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> const ExtractTextPlugin = require('extract-text-webpack-plugin')\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const common = require('./webpack.common.js')\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> module.exports = merge(common, {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   mode: 'production',\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   module: {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     rules: [\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">       {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">         test: /\\.scss$/,\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">         use: ExtractTextPlugin.extract({\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">           fallback: 'style-loader',\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">           use: ['css-loader', 'sass-loader']\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">         })\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">       }\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     ]\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   },\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   plugins: [\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     new ExtractTextPlugin('style.css')\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   ]\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> })</span></span></code></pre>\n<p>Nếu chạy <code class=\"language-text\">npm run build</code>, chúng ta có 3 file</p>\n<ul>\n<li>chat.bundle.js</li>\n<li>app.bundle.js</li>\n<li>style.css</li>\n</ul>\n<h2 id=\"cập-nhập-html-tự-động\"><a href=\"#c%E1%BA%ADp-nh%E1%BA%ADp-html-t%E1%BB%B1-%C4%91%E1%BB%99ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cập nhập HTML tự động</h2>\n<p>Mỗi lần thay đổi chúng ta cứ phải tự tay chỉnh sửa file <code class=\"language-text\">index.html</code> thì hơi lười. Dùng <code class=\"language-text\">html-webpack-plugin</code> để tự động hóa quá trình này, đồng thời cần thêm <code class=\"language-text\">clean-webpack-plugin</code> để clear hết thư mục <code class=\"language-text\">dist</code></p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> instal --save-dev html-webpack-plugin clean-webpack-plugin</code></pre>\n<p><strong>webpack.common.js</strong></p>\n<pre class=\"language-diff\"><code class=\"language-diff\">const path = require('path')\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> const CleanWebpackPlugin = require('clean-webpack-plugin');\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> const HtmlWebpackPlugin = require('html-webpack-plugin');\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> module.exports = {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   ...\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   plugins: [\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     new CleanWebpackPlugin(['dist']),\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     new HtmlWebpackPlugin({\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">       title: 'My killer app'\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     })\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   ]\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> }</span></span></code></pre>\n<p>Giờ mỗi lần build, chúng ta xóa hết thư mục dist luôn</p>\n<h2 id=\"development-server\"><a href=\"#development-server\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Development Server</h2>\n<p>Với <code class=\"language-text\">webpack-dev-server</code> cung cấp cho chúng ta một web server đơn giản với tính năng live reload rất rất là hữu ích luôn mấy man</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev webpack-dev-server</code></pre>\n<p><strong>package.json</strong></p>\n<pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   ...\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"scripts\": {\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">     \"develop\": \"webpack --watch --config webpack.dev.js\",\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">     \"develop\": \"webpack-dev-server --config webpack.dev.js\",\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   }\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   ...\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> }</span></span></code></pre>\n<p>Giờ mà chạy <code class=\"language-text\">npm run develop</code> chúng ta sẽ có ngay server <a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:8080/</a></p>\n<h2 id=\"hotmodulereplacement\"><a href=\"#hotmodulereplacement\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HotModuleReplacement</h2>\n<p>Plugin <code class=\"language-text\">HotModuleReplacement</code> sẽ nhỉnh hơn Live Reload một chút, thay vì live reload trình duyệt sẽ tự động refresh, chúng ta sẽ thấy nó load lại toàn bộ trang khi có thay đổi, còn HotModuleReplacement là nó swap nguyên cái module trong lúc đang chạy mà không cần refresh luôn. Nhanh như cái chớp mắt vậy. Nếu mà cấu hình đúng, chúng ta tiết kiệm được khối thời gian ngồi đợi load lại trang.</p>\n<p><strong>webpack.dev.js</strong></p>\n<pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> const webpack = require('webpack')\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const merge = require('webpack-merge')\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const common = require('./webpack.common.js')\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> module.exports = merge(common, {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   mode: 'development',\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   devServer: {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     hot: true\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   },\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   plugins: [\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     new webpack.HotModuleReplacementPlugin()\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   ],\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   ...\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> }</span></span></code></pre>\n<p>Cho phép swap module trong app</p>\n<p><strong>src/app.js</strong></p>\n<pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> if (module.hot) {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   module.hot.accept()\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> }\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> ...</span></span></code></pre>\n<p><code class=\"language-text\">module.hot</code> sẽ có giá trị là <code class=\"language-text\">true</code> trong mode development và <code class=\"language-text\">false</code> trong production.</p>\n<p><a href=\"https://www.sitepoint.com/beginners-guide-webpack-module-bundling/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài gốc</a>\nTác giả: Mark Brown</p>\n<p>Chỉnh sửa theo sự hiểu của mình một tí</p>\n","cover_image":"","related":[{"id":"d27c82957cc1511533f17ea33a445b6a","path":"/huong-dan-webpack-4-cho-nguoi-moi-bat-dau-phan-2/","title":"Hướng dẫn webpack 4 cho người mới bắt đầu - Phần 2","desc":"Phần 2 trong series về webpack, mình sẽ nói về code slitting, loaders"},{"id":"6db5dc35c8e54bd9c4774e5abaf6543b","path":"/huong-dan-viet-query-data-cho-cloud-firestore-phan-3/","title":"Hướng dẫn viết query data cho Cloud Firestore - Phần 3","desc":"Series hướng dẫn sử dụng các service Firebase"},{"id":"0b0388dbdd5fb8e368d89c778ff54334","path":"/gioi-thieu-vuex-cho-nguoi-moi-bat-dau/","title":"Giới thiệu Vuex cho người mới bắt đầu","desc":"Mình không giới thiệu cụ thể từng phần trong Vuex, các bạn cần nắm redux store của React để hiểu được bài này, các khái niệm và nguyên tắc gần như là giống nhau, khác cách đặt tên thôi."},{"id":"9dff911f3d4c998b2e2d39eff8025ade","path":"/huong-dan-handle-event-listener-can-ban-cho-cac-ban-moi-bat-dau-voi-javascript/","title":"Hướng dẫn handle event listener căn bản cho các bạn mới bắt đầu với javascript","desc":"Căn bản nhưng cần thiết"}]}},"context":{}}