{"hash":"2a4106ecca1a0d3da8cd127d6742ebf19d0f0109","data":{"post":{"title":"ES6 Căn bản (phần 1) - Những nâng cấp cho Object","path":"/2016-11-15-chuong-1-es6-can-ban/","date":"2016-11-15","timeToRead":3,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"}],"desc":"Nếu bạn đã đọc bài FrontEnd Developer 2016 nên học gì? Chắc bạn đã rối không biết bắt đầu từ đâu nếu muốn dấn thân vào cuộc chơi nhiều cám dỗ này. Mình nghĩ cái đầu tiên cần học là ES6.","content":"<p>Trong Series này</p>\n<ol>\n<li><a href=\"2016-11-15-chuong-1-es6-can-ban\">Nâng cấp cho Object</a></li>\n<li><a href=\"2016-11-16-chuong-2-es6-can-ban-arrow-function/\">Arrow function</a></li>\n<li><a href=\"2016-11-17-phan-3-es6-can-ban-assignment-destructuring\">Assignment Destruction</a></li>\n<li><a href=\"2016-11-18-phan-4-es6-can-ban-rest-parameters-va-spread-operator\">Rest parameters và spread operator</a></li>\n<li><a href=\"2016-11-19-phan-5-es6-can-ban-template-literals\">Template literals</a></li>\n<li><a href=\"2016-11-20-phan-6-es6-can-ban-khai-bao-let-const\">Khai báo biến với let và const</a></li>\n<li><a href=\"2016-11-21-phan-7-es6-can-ban-classes\">Căn bản class</a></li>\n</ol>\n<p>Một object trong javascript được khai như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> book <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n title<span class=\"token operator\">:</span> <span class=\"token string\">'ES6'</span><span class=\"token punctuation\">,</span>\n author<span class=\"token operator\">:</span> <span class=\"token string\">'anluu'</span><span class=\"token punctuation\">,</span>\n publisher<span class=\"token operator\">:</span> <span class=\"token string\">'luckyluu'</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Những nâng cấp cho Object trong ES6</p>\n<h1 id=\"cách-viết-tắt-thay-vì-key-value\"><a href=\"#c%C3%A1ch-vi%E1%BA%BFt-t%E1%BA%AFt-thay-v%C3%AC-key-value\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cách viết tắt thay vì Key: Value</h1>\n<p>Bình thường thì khai báo dạng giá trị của một object bằng <code class=\"language-text\">key: value</code>, bây giờ không cần <code class=\"language-text\">value</code> nữa, nếu <code class=\"language-text\">key</code> tham chiếu tới một biến hoặc hàm, nói cách khác là nếu nó cùng tên với hàm hoặc biến được định nghĩa trước đó</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> listeners <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> api <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>listeners<span class=\"token punctuation\">,</span> listen<span class=\"token punctuation\">}</span></code></pre>\n<p>object nhìn \"sạch sẽ\" hơn</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> store <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> api <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> getItem<span class=\"token punctuation\">,</span> setItem<span class=\"token punctuation\">,</span> clear <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> key <span class=\"token keyword\">in</span> store <span class=\"token operator\">?</span> store<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span>value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n store<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n store <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"khi-key-là-1-biến-hoặc-hàm\"><a href=\"#khi-key-l%C3%A0-1-bi%E1%BA%BFn-ho%E1%BA%B7c-h%C3%A0m\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khi key là 1 biến hoặc hàm</h1>\n<p>Nếu cần khai báo <code class=\"language-text\">key</code> là một biến, nó không phải là một giá trị định sẵn, với ES5 thì sẽ viết như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> expertise <span class=\"token operator\">=</span> <span class=\"token string\">'journalism'</span>\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n name<span class=\"token operator\">:</span> <span class=\"token string\">'Sharon'</span><span class=\"token punctuation\">,</span>\n age<span class=\"token operator\">:</span> <span class=\"token string\">'28'</span>\n<span class=\"token punctuation\">}</span>\nperson<span class=\"token punctuation\">[</span>expertise<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n years<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n interests<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'international'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'politics'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'internet'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Với ES6 object key không nhất thiết phải là tên cố định, nó có thể là biến, đặt trong dấu <code class=\"language-text\">[]</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> expertise <span class=\"token operator\">=</span> <span class=\"token string\">'journalism'</span>\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n name<span class=\"token operator\">:</span> <span class=\"token string\">'Sharon'</span><span class=\"token punctuation\">,</span>\n age<span class=\"token operator\">:</span> <span class=\"token string\">'28'</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">[</span>expertise<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  years<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  interests<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'international'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'politics'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'internet'</span><span class=\"token punctuation\">]</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>Lưu ý</strong> không nên kết hợp sử dụng giữa cả 2 cách viết trên cùng lúc, vì sẽ sinh ra lỗi và đọc rất khó hiểu</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> expertise <span class=\"token operator\">=</span> <span class=\"token string\">'journalism'</span>\n<span class=\"token keyword\">var</span> journalism <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n years<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n interest<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'international'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'politics'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'internet'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n name<span class=\"token operator\">:</span> <span class=\"token string\">'Sharon'</span><span class=\"token punctuation\">,</span>\n age<span class=\"token operator\">:</span> <span class=\"token string\">'28'</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">[</span>expertise<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Tình huống thường sử dụng đến computed property name khi muốn thêm một entity vào một object map sử dụng entity.id như là key. Thay vì có câu khai báo thứ 3 để thêm grocery vào groceries map, chúng ta có thể viết khai báo inline nó trong groceries luôn</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> grocery <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n id<span class=\"token operator\">:</span> <span class=\"token string\">'bananas'</span><span class=\"token punctuation\">,</span>\n name<span class=\"token operator\">:</span> <span class=\"token string\">'Bananas'</span><span class=\"token punctuation\">,</span>\n units<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n price<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n currency<span class=\"token operator\">:</span> <span class=\"token string\">'USD'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> groceries <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token punctuation\">[</span>grocery<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> grocery\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Tình huống khác, khi có một hàm nhận một tham số truyền vào để tạo ra một đối tượng mới, đây là cách làm của ES5, tạo một object mới, khai báo các property động dựa vào tham số truyền vào, sau đó trả về object. Ví dụ hàm getEnvelope sẽ trả về type=\"error\" với description khi có lỗi, type=\"success\" + description khi mọi thứ ok</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getEnvelope</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> description</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">var</span> envelope <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n envelope<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> description\n <span class=\"token keyword\">return</span> envelope\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Có thể viết bằng một dòng khai báo với computed property names</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getEnvelope</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> description</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> description\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2>Định nghĩa một phương thức</h2>\nBình thường để định nghĩa một phương thức trong object\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> reserver <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n<span class=\"token keyword\">var</span> emitter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function-variable function\">emit</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evenName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token keyword\">get</span> <span class=\"token function\">fuel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> reserver\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token keyword\">set</span> <span class=\"token function\">fuel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  reserver <span class=\"token operator\">=</span> value\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Hàm <code class=\"language-text\">set</code> và <code class=\"language-text\">get</code> thì vẫn giữ như cũ, phương thức có thể khai bảo mà không cần từ khóa <code class=\"language-text\">function</code></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> reserver <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n<span class=\"token keyword\">var</span> emitter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   reserver <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token keyword\">get</span> <span class=\"token function\">fuel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> reserver\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token keyword\">set</span> <span class=\"token function\">fuel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  reserver <span class=\"token operator\">=</span> value\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nemitter<span class=\"token punctuation\">.</span><span class=\"token property-access\">fuel</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nemitter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Tức nhiên vẫn khai báo phương thức như bình thường được, cách khai báo mới này có vẻ hơi dễ lẫn lộn giữa phương thức và object, tất nhiên đây chỉ là thêm lựa chọn để viết chứ không khuyến khích viết theo kiểu này vì nhìn code không được tường minh.</p>\n","cover_image":"","related":[{"id":"1033f1efca1a045faea137fd0c0a873d","path":"/2016-11-17-phan-3-es6-can-ban-assignment-destructuring/","title":"Hồi 3: ES6 căn bản - Truy cập phần tử","desc":"Hồi 3 trong series ES6 căn bản, nói về Assignment Destructuring"},{"id":"1340104aa5d848ae6e871dca2ffcd1b5","path":"/2016-11-21-phan-7-es6-can-ban-classes/","title":"Hồi 7: ES6 căn bản - Classes","desc":"Hồi 7 trong series ES6 căn bản, Javascript vốn là ngôn ngữ prototype, class không phải là cái gì đó mới mẻ trong javascript"},{"id":"6b73c7a8d9c5332b2e0a6315fcbcb943","path":"/2016-11-16-chuong-2-es6-can-ban-arrow-function/","title":"Hồi 2: ES6 căn bản - Arrow Function","desc":"Hồi 2 trong series ES6 căn bản, nói về Arrow Function"},{"id":"cad93a1c7d14fac9d3f26a77aff31d1d","path":"/2016-11-19-phan-5-es6-can-ban-template-literals/","title":"Hồi 5: ES6 căn bản - Template literals","desc":"Hồi 5 trong series ES6 căn bản, nói về Template literals, một nâng cấp lớn cho string"}]}},"context":{}}