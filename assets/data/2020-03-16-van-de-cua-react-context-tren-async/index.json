{"hash":"5d40f4d8ed43f512e4021e3d8491c32126632fe7","data":{"post":{"title":"Vấn đề của React Context trên các xử lý async","path":"/2020-03-16-van-de-cua-react-context-tren-async/","slug":"/2020-03-16-van-de-cua-react-context-tren-async","date":"2020-03-16","timeToRead":7,"tags":[{"id":"react","title":"react","path":"/tag/react/"},{"id":"thu-thuat","title":"thu-thuat","path":"/tag/thu-thuat/"}],"desc":"React Context có phải là viên đạn bạc sẽ giải quyết mọi vấn đề thay cho Redux hay không?","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#ch%C3%BAng-ta-b%E1%BA%AFt-%C4%91%E1%BA%A7u-v%E1%BB%9Bi-m%E1%BB%99t-component-duy-nh%E1%BA%A5t\">Chúng ta bắt đầu với một component duy nhất</a></li>\n<li><a href=\"#l%E1%BA%A5y-d%E1%BB%AF-li%E1%BB%87u-sau-khi-c%C3%B3-t%C6%B0%C6%A1ng-t%C3%A1c\">Lấy dữ liệu sau khi có tương tác</a></li>\n<li><a href=\"#%C4%91%C3%A2u-l%C3%A0-gi%E1%BA%A3i-ph%C3%A1p\">Đâu là giải pháp</a></li>\n</ul>\n<!-- /TOC -->\n<p>Để chia sẻ <code class=\"language-inline-text\">state</code> giữa các component, React cung cấp API Context, <em>với lời hứa ngon ngọt</em> mà bạn có thể dễ dàng đọc được trên mạng \"có thể thay thế redux\". Từ kinh nghiệm thực tế của team Atlassian cũng như của bản thân mình (là tui luckyluu), sử dụng nó trên các module lớn, hoặc trên toàn bộ App (gốc trên cùng của cây React) là một cơn <strong>ác mộng</strong> trường kỳ.</p>\n<h2 id=\"chúng-ta-bắt-đầu-với-một-component-duy-nhất\"><a href=\"#ch%C3%BAng-ta-b%E1%BA%AFt-%C4%91%E1%BA%A7u-v%E1%BB%9Bi-m%E1%BB%99t-component-duy-nh%E1%BA%A5t\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chúng ta bắt đầu với một component duy nhất</h2>\n<p>Lấy ví dụ, chúng tạo ra một component Dropdown hiển thị danh sách categories</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CategoriesQuery</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/categories'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// sử dụng</span>\n<span class=\"token keyword\">const</span> CategoriesDropdown <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoriesQuery</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    ({ data, loading, error }) => </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CategoriesQuery</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Khá sạch đẹp, đúng không? Lúc component được <em>mount</em> vào DOM chúng ta <em>fetch</em> dữ liệu, đặt giá trị cho state loading.</p>\n<p>Tình huống hay gặp là chúng ta có nhu cầu sử dụng danh sách categories này trên một component nào đó khác. Việc cứ phải <em>wrap</em> component lại dạng cha con, rồi truyền danh sách categories thông qua <code class=\"language-inline-text\">props</code> không phải là <em>lựa chọn khôn ngoan</em>, chúng ta cần lưu nó ở một nơi tập trung (store) và truy xuất ở bất kỳ đâu, chúng ta có thể sử dụng <code class=\"language-inline-text\">createContext</code>. Việc chuyển qua dùng <code class=\"language-inline-text\">createContext</code> dễ như ăn bún</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Provider<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">Consumer</span><span class=\"token operator\">:</span> CategoriesConsumer <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CategoriesProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/categories'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// sử dụng</span>\n<span class=\"token keyword\">const</span> CategoriesDropdown <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoriesConsumer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    ({ data, loading, error }) => </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CategoriesConsumer</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Chúng ta <strong>\"chỉ\"</strong> còn lại 2 vấn đề: đặt <code class=\"language-inline-text\">&lt;CategoriesProvider/></code> ở đâu và chuyện gì sẽ xảy ra nếu Provider vì lý do nào đó không thể là <em>cha chú</em> của một component consumer?</p>\n<p>Xử lý các vấn đề phức tạp xung quanh việc viết context thế nào cho hợp lý, fallback ra làm sao sẽ cần đến một bài viết dài dòng khắc, giờ cứ tưởng tượng bạn luôn cần Provider render \"ở đâu đó\" (nhiều khi là cùng với cả tá provider khác nữa khi bạn cứ wrap thằng này trong thằng kia liên tục).</p>\n<h2 id=\"lấy-dữ-liệu-sau-khi-có-tương-tác\"><a href=\"#l%E1%BA%A5y-d%E1%BB%AF-li%E1%BB%87u-sau-khi-c%C3%B3-t%C6%B0%C6%A1ng-t%C3%A1c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lấy dữ liệu sau khi có tương tác</h2>\n<p>Đoạn code fetch dữ liệu lúc mount component ở trên trông rất hợp lý, nhưng sẽ có tình huống bạn cần trigger <code class=\"language-inline-text\">fetch</code> không phải lúc mount.</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Node A\n    - Node B\n        - Node C</code></pre></div>\n<p>Nếu đặt tình huống bạn fetch dữ liệu categories ở <code class=\"language-inline-text\">&lt;Node A /></code>, được <code class=\"language-inline-text\">&lt;Node C/></code> hiển thị, nhưng user lúc sử dụng đôi khi chả bao giờ thấy đến <code class=\"language-inline-text\">&lt;Node C/></code>, họ có thể dừng lại ở màn hình <code class=\"language-inline-text\">&lt;Node A /></code>, việc bắt trình duyệt đi lấy dữ liệu quá sớm <em>không phải là một chuyện nên làm</em>. Do đó chúng ta sẽ có nhu cầu trả về hàm lấy dữ liệu trực tiếp xuống <code class=\"language-inline-text\">context</code>:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">fetch</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fetch <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>ĐỪNG BAO GIỜ LÀM NHƯ VẬY</strong>. Bạn có thấy được con bug <strong>\"ngầm\"</strong> trong cách viết trên không? Mỗi lần <code class=\"language-inline-text\">CategoriesProvider</code> re-render, chúng ta truyền xuống một giá trị hoàn toàn mới cho <code class=\"language-inline-text\">value</code> - <em>một object được khởi tạo mới tinh</em>. Tạo ra một object rồi truyền xuống thành <code class=\"language-inline-text\">props</code> là <strong>lỗi căn bản</strong> cần tránh, tuy nhiên khi dùng cho Context Provider nó đặc biệt trầm trọng. Khi để ý thấy lỗi này, chúng tôi đã theo sự chỉ dẫn từ tài liệu của <a href=\"https://reactjs.org/docs/context.html#caveats\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Context guidelines</a>, lưu phương thức đó vào state</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CategoriesProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">fetch</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fetch\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sau đó trong component consumer, chúng ta sẽ fetch dữ liệu categories khi thằng component consumer thực sự render</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">CategoriesQuery</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>CategoriesContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>context<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>context<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">children</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Xong! <strong>Chưa thật sự xong đâu</strong>, khi thêm <code class=\"language-inline-text\">&lt;CategoriesQuery/></code> ở 2 nơi khác nhau trên cây, nếu 2 component được mount cùng một lúc, <code class=\"language-inline-text\">fetch</code> sẽ chạy <strong>2 lần</strong>.</p>\n<p><em>Bug nhỏ thôi mà đúng không?</em> Chúng ta không kiểm tra state <code class=\"language-inline-text\">loading</code> trước khi gọi <code class=\"language-inline-text\">fetch</code>. Sửa nhanh trong Provider:</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// class CategoriesProvider...</span>\n<span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Thử refresh lại trang, với 2 <code class=\"language-inline-text\">CategoriesQuery</code> mount và... <strong>BÙM</strong> Vẫn là 2 request network. Kiểm tra lại lần nữa nào, có gì đó lỗi rồi, không lỗi nữa, lại lỗi nữa, ....</p>\n<p>....</p>\n<p>lại lỗi\n....</p>\n<p>còn lỗi\n....</p>\n<p>chưa hết lỗi\n....</p>\n<p>Rồi bỗng dưng chúng ta nhận ra React <code class=\"language-inline-text\">setState</code> là một <code class=\"language-inline-text\">async</code>. Có nghĩa là việc giá trị <code class=\"language-inline-text\">loading</code> vẫn là <code class=\"language-inline-text\">false</code> trong cả 2 lần gọi thậm chí <code class=\"language-inline-text\">setState</code> đã được gọi một lần. \"Shitty React\" (React như c*t)</p>\n<p>Bắt đầu tìm kiếm một cách làm \"less shitty\" (bớt nhảm shit) với chuyện <code class=\"language-inline-text\">setState</code> async trong Context Provider (có 4 năm cách làm tùy theo độ <em>sáng tạo</em>), nhưng có thể đảm bảo rằng không có cách nào <em>thập toàn thập mỹ</em>. Luôn cảm thấy chúng ta đang <strong>chống lại cách làm chính quy từ React</strong>.</p>\n<h2 id=\"đâu-là-giải-pháp\"><a href=\"#%C4%91%C3%A2u-l%C3%A0-gi%E1%BA%A3i-ph%C3%A1p\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đâu là giải pháp</h2>\n<p>Context API có rất nhiều điểm cộng ngay cả khi so sánh với Redux, cái chúng ta cần là một cách vẹn toàn cả cho cả 2.</p>\n<p>Mình cũng gặp vấn đề y chang như vậy với ứng dụng đang làm. Tìm kiếm và cuối cùng chốt hạ dùng <a href=\"https://atlassian.github.io/react-sweet-state/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-sweet-state</a> cho cả team</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore<span class=\"token punctuation\">,</span> createHook <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-sweet-state\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// giá trị khởi tạo</span>\n<span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// define the actions that mutate the state</span>\n<span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">fetch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> getState<span class=\"token punctuation\">,</span> setState <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/categories\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// tạo store</span>\n<span class=\"token keyword\">const</span> CategoriesStore <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> initialState<span class=\"token punctuation\">,</span> actions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// tạo components để truy cập dữ liệu từ store</span>\n<span class=\"token keyword\">const</span> useCategories <span class=\"token operator\">=</span> <span class=\"token function\">createHook</span><span class=\"token punctuation\">(</span>CategoriesStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// sử dụng</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">CategoriesQuery</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> actions<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useCategories</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> actions<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> actions<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">children</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Có nhiều điểm cộng cho <a href=\"https://atlassian.github.io/react-sweet-state/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-sweet-state</a> như nó vẫn dùng Context API, nhưng an toàn hơn, các action sẽ dễ test hơn, làm việc được với Redux DevTools, đã xử lý những lỗi vẫn hay gặp với React Context. Và nhiều điều hay ho khác nữa. Các bạn nhớ like cho repo này trên github.</p>\n<p>Một số dẫn chứng khác để bạn tham khảo</p>\n<ul>\n<li><a href=\"https://twitter.com/dan_abramov/status/1109595839347990528\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Context <strong>Không được thiết kế cho dữ liệu thường xuyên cập nhập</strong></a></li>\n<li><a href=\"https://github.com/facebook/react/issues/13739\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>Hạn chế hiệu năng</strong> của React Context</a></li>\n<li><a href=\"https://github.com/facebook/react/issues/14110\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Context <strong>Không hỗ trợ selector</strong></a></li>\n<li><a href=\"https://github.com/facebook/react/issues/15156\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Context <strong>Không thể ngăn chặn việc re-render</strong></a></li>\n</ul>\n<p><a href=\"https://medium.com/@albertogasparin/the-pitfalls-of-async-operations-via-react-context-api-ab987d4290e6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The pitfalls of async operations via React Context API</a></p>\n","cover_image":"","related":[{"id":"00a83799c3294abab087f85c1f4fc095","path":"/2018-11-19-xu-ly-loi-neu-co-xay-ra-trong-javascript/","title":"Xử lý lỗi nếu có xảy ra trong javascript","desc":"Lỗi nếu có xảy ra, phải được xử lý hết tránh để chết nguyên ứng dụng. Điểm lại một vài cách xử lý lỗi trong javascript"},{"id":"634deea5dc91ddc391f4887cca60e23f","path":"/2017-11-02-mot-vai-cai-tien-google-calendar/","title":"Một vài cải tiến của Google Calendar","desc":"Cách đây hơn một tuần Google Calendar vừa có nâng cấp lên bản mới, cùng nhìn thử giao diện có gì thay đổi"},{"id":"fee67ede73b0132dbcd184c54995d50e","path":"/2019-04-08-cac-phuong-thuc-tren-array-can-nho/","title":"Các phương thức trên array cần nhớ","desc":"Khi cần loop qua một array, tìm phần tử, sắp xếp, hoặc làm gì đó trên array, khả năng rất cao là trong array đã có một phương thức sẵn để bạn xài, không cần dùng tới vòng lặp for. Chúng ta sẽ cùng điểm qua những phương thức như vậy trong bài viết này."},{"id":"708598252908e5c36103d5ed79cb70de","path":"/2020-11-23-10-kinh-nghiem-trong-react-voi-van-de-bao-mat/","title":"Vài lưu ý trong React để tránh các vấn đề với bảo mật","desc":"Một vài điểm nhắc nhẹ các bạn khi đang viết React, để tránh bị dính injection"}]}},"context":{}}