{"hash":"6a6d98253a952d0053c5fdbea2fd0cf7bb24ef26","data":{"post":{"title":"Nếu vỗ ngực xưng tên là một javascript developer sành sỏi, mà không giải thích được prototype inheritance thì thật là kỳ","path":"/neu-vo-nguc-xung-ten-la-mot-javascript-developer-sanh-soi-ma-khong-giai-thich-duoc-prototype-inheritance-thi-that-la-ky/","slug":"2020-11-16-gioi-thieu-javascript-prototype","date":"2020-11-09","timeToRead":2,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"},{"id":"hoc-thuat","title":"hoc-thuat","path":"/tag/hoc-thuat/"}],"desc":"","content":"<p>Khởi tạo một object trong JS bằng <em>object literal</em></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> cat <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> sound<span class=\"token operator\">:</span> <span class=\"token string\">'Meow!'</span><span class=\"token punctuation\">,</span> legs<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu muốn sử dụng lại thuộc tính <code class=\"language-text\">legs</code> trên các object khác, chúng ta đưa <code class=\"language-text\">legs</code> vào một object <em>đặc biệt</em> <code class=\"language-text\">pet</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pet <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> legs<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> cat <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> sound<span class=\"token operator\">:</span> <span class=\"token string\">'Meow!'</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>Làm sao <em>inherit</em> từ một object khác? Câu trả lời là dùng <strong>Prototype</strong></p>\n<p>Nếu <code class=\"language-text\">pet</code> là một <strong>prototype</strong> của <code class=\"language-text\">cat</code>, khi đó <code class=\"language-text\">cat</code> sẽ có luôn property <code class=\"language-text\">legs</code></p>\n<blockquote>\n<p>Khi khởi tạo object bằng cách viết <em>object literal</em>, chúng ta có thêm một property đặc biệt <strong><code class=\"language-text\">__proto__</code></strong> để set prototype cho object đó.</p>\n</blockquote>\n<p>Với ví dụ trên, chúng ta sẽ làm như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pet <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> legs<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> cat <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> sound<span class=\"token operator\">:</span> <span class=\"token string\">'Meow!'</span><span class=\"token punctuation\">,</span> __proto__<span class=\"token operator\">:</span> pet <span class=\"token punctuation\">}</span>\ncat<span class=\"token punctuation\">.</span><span class=\"token property-access\">legs</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 4</span></code></pre>\n<p>Property <code class=\"language-text\">sound</code>, chỉ tồn tại trong <code class=\"language-text\">cat</code>, người ta gọi tên nó là <strong>Own Property</strong> (property này là của anh, do anh tạo ra, anh không thừa hưởng từ bất kỳ ai).</p>\n<pre class=\"language-js\"><code class=\"language-js\">cat<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sound'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true;</span>\ncat<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'legs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre>\n<p><img src=\"https://dmitripavlutin.com/static/9d6c9ba5235b280e315068f7c98bc16a/360ab/Selection_013.png\" alt=\"Inherited property from the prototype in JavaScript\"></p>\n<blockquote>\n<p>Bạn có thể sẽ thắc mắc, tại sao lại sinh ra <code class=\"language-text\">inheritance</code> trong JS lằng nhằng thế ?</p>\n</blockquote>\n<p>Vì bản chất JS ngày xưa không hỗ trợ <code class=\"language-text\">class</code>.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pet <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> legs<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> cat <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> sound<span class=\"token operator\">:</span> <span class=\"token string\">'Meow!'</span><span class=\"token punctuation\">,</span> __proto__<span class=\"token operator\">:</span> pet <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dog <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> sound<span class=\"token operator\">:</span> <span class=\"token string\">'Bark!'</span><span class=\"token punctuation\">,</span> __proto__<span class=\"token operator\">:</span> pet <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> pig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> sound<span class=\"token operator\">:</span> <span class=\"token string\">'Grunt!'</span><span class=\"token punctuation\">,</span> __proto__<span class=\"token operator\">:</span> pet <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<blockquote>\n<p>Sử dụng <code class=\"language-text\">__proto__</code> không còn được chấp nhận, thay vào đó hay dùng <code class=\"language-text\">Object.create()</code></p>\n</blockquote>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pet <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> legs<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cat <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span>pet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncat<span class=\"token punctuation\">.</span><span class=\"token property-access\">sound</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Meow!'</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>Nhưng giờ JS đã có class đúng không?</strong></p>\n<p>Đúng, giờ có class bạn có thể viết</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pet</span> <span class=\"token punctuation\">{</span>\n  legs <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sound</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">sound</span> <span class=\"token operator\">=</span> sound<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Moew!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncat<span class=\"token punctuation\">.</span><span class=\"token property-access\">legs</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// => 4</span>\ncat <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => true</span></code></pre>\n<p>Bên dưới, code trên sẽ được viết lại (bằng babel) gần giống thế này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pet <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  legs<span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">CreatePet</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sound</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> sound<span class=\"token punctuation\">,</span> __proto__<span class=\"token operator\">:</span> pet <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">CreatePet</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span> <span class=\"token operator\">=</span> pet<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> cat <span class=\"token operator\">=</span> <span class=\"token function\"><span class=\"token maybe-class-name\">CreatePet</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'Moew!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncat<span class=\"token punctuation\">.</span><span class=\"token property-access\">legs</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// => 4</span>\ncat <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">CreatePet</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => true</span></code></pre>\n<p>Bạn có thể sẽ thấy hơi bối rối, nếu bạn có nền tảng từ những ngôn ngữ có hỗ trợ class <em>ngay trong trứng</em> như Java hay PHP, không sao cả, ai cũng cần thời gian để tiếp thu những kiến thức mới.</p>\n<p><a href=\"https://dmitripavlutin.com/javascript-prototypal-inheritance/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">What Makes JavaScript JavaScript? Prototypal Inheritance</a></p>\n","cover_image":"","related":[{"id":"85b3a0eb256fe8201e3801c756cc5217","path":"/mot-vai-dieu-can-luu-y-khi-ban-lam-viec-voi-js/","title":"Một vài điều cần lưu ý khi bạn làm việc với JS","desc":"Khi bạn làm việc với JS đủ lâu và ăn hành đủ nhiều bạn sẽ cần biết đến những đặc điểm rất riêng của JS"},{"id":"ef457fe3b58c3a4f7dfb340ee90926dc","path":"/tong-ket-mot-nam-cua-the-gioi-front-end/","title":"Tổng kết một năm của thế giới FrontEnd","desc":"Thế giới lập trình Frontend nhiều biến chuyển, nhanh chóng mặt, chúng ta cùng điểm lại những tin tức, sự kiện, xu hướng nổi bật nhất trong năm 2018 vừa qua"},{"id":"e5eecb851393068228a0e59c9a8662b2","path":"/xu-ly-loi-neu-co-xay-ra-trong-javascript/","title":"Xử lý lỗi nếu có xảy ra trong javascript","desc":"Lỗi nếu có xảy ra, phải được xử lý hết tránh để chết nguyên ứng dụng. Điểm lại một vài cách xử lý lỗi trong javascript"},{"id":"25ad029965c91242899548b45f949af0","path":"/quan-ly-state-nhan-dinh-boolean-tot-va-khong-tot/","title":"Quản lý state: nhận định boolean tốt và không tốt","desc":""}]}},"context":{}}