{"hash":"2614a9f464f28805085bbbd764f6609c0dea9377","data":{"post":{"title":"Nắm vững Promise trong javascript","path":"/2017-10-12-javascript-promise/","slug":"/2017-10-12-javascript-promise","date":"2017-10-12","timeToRead":2,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"}],"desc":"Cùng tìm hiểu Promise của javascript, tự tạo một Promise","content":"<p>Thử xét một đoạn code <code class=\"language-inline-text\">fetch</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/1'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* run after API return */</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Đoạn code nằm bên trong <code class=\"language-inline-text\">.then</code> sẽ chạy <strong>sau khi</strong> nhận dữ liệu trả về từ server trước khi chạy tiếp. <code class=\"language-inline-text\">Promise</code> là một dạng cho phép các đoạn code chạy <strong>bất tuần tự</strong> như vậy. Không hề nhầm lẫn chữ bất tuần tự đâu nhé bạn, bạn hãy hình dung code của chúng ta có rất nhiều thứ khác nữa cần chạy, đoạn code bên trong <code class=\"language-inline-text\">then</code> chỉ chạy <strong>sau khi</strong>, tức là không theo thứ tự lúc được viết ra.</p>\n<p>Nếu check <code class=\"language-inline-text\">typeof</code> của Promise chúng ta sẽ nhận được một <code class=\"language-inline-text\">object</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>Để mình nhắc lại lần nữa để bạn không bị cái tên hoa mĩ <em>Promise</em> lừa tình, <strong>Promise chỉ đơn thuần là một object</strong>. Để có thể đợi trả về từ server (như trong ví dụ), trước khi thực hiện chạy đoạn code trong <code class=\"language-inline-text\">.then()</code>, function của bạn <strong>BUỘC PHẢI</strong> trả về một <em>Promise</em>. Function <code class=\"language-inline-text\">fetch</code> được viết như sau</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cost <span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> apiResponse</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// lỗi rồi</span>\n                <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// success</span>\n            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>apiResponse<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Giờ tới phần quan trọng, viết lại khai báo Promise (gọi là <code class=\"language-inline-text\">SimplePromise</code> để tránh trùng tên) để xem cách làm của Promise</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SimplePromise</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">executionFunction</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>promiseChain <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handleError</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onResolve <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onResolve</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onReject <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onReject</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token function\">executionFunction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onResolve<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onReject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onResolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>promiseChain<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>onResolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>handleError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleError <span class=\"token operator\">=</span> handleError<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">onResolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> storedValue <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>promiseChain<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">nextFunction</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                storedValue <span class=\"token operator\">=</span> <span class=\"token function\">nextFunction</span><span class=\"token punctuation\">(</span>storedValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>promiseChain <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onReject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">onReject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Khi khởi tạo một Promise <code class=\"language-inline-text\">new Promise((resolve, reject) =>{...} )</code> chúng ta truyền vào một <code class=\"language-inline-text\">callback function</code>, function này sẽ nhận 2 tham số truyền vào là 2 function internal của Promise <code class=\"language-inline-text\">onResolve</code> và <code class=\"language-inline-text\">onReject</code></p>\n<p>Bên trong constructor đồng thời khởi tạo mảng <code class=\"language-inline-text\">promiseChain</code> và hàm <code class=\"language-inline-text\">handleError</code>, khi thêm một hoặc một mớ <code class=\"language-inline-text\">.then()</code>, các hàm này sẽ được tuần tự đưa vào mảng <code class=\"language-inline-text\">promiseChain</code>, hàm <code class=\"language-inline-text\">.catch()</code> thì được map với hàm <code class=\"language-inline-text\">handleError</code> trong Promise.</p>\n<p>Lưu ý, cái này là ví dụ, Promise thực tế thì 2 hàm <code class=\"language-inline-text\">then</code> và <code class=\"language-inline-text\">catch</code> sẽ trả về <code class=\"language-inline-text\">new Promise</code>, cái này làm cho đơn giản trả về <code class=\"language-inline-text\">this</code> thôi.</p>\n<p>Khi một hàm bất tuần tự (async) được gọi <code class=\"language-inline-text\">resolve(apiResponse)</code>, object promise bắt đầu chạy <code class=\"language-inline-text\">onResolve(apiResponse)</code> nó sẽ loop qua <em>tuần tự</em> mảng <em>promiseChain</em>, thực thi các xử lý trong hàm từ đầu tiên trong mảng, đến hàm thứ 2, 3, 4..., mỗi lần như vậy nó sẽ nhận giá trị <code class=\"language-inline-text\">storedValue</code> đồng thời cập nhập lại <code class=\"language-inline-text\">storedValue</code> này.</p>\n<p>Bạn nên đọc thêm <a href=\"2018-05-07-huong-dan-async-await-giai-thich-vi-du\">bài viết Async/Await</a></p>\n","cover_image":"","related":[{"id":"4ec3d6b800b60890a6bb7edc81dda541","path":"/2017-01-10-nam-vung-5-khai-niem-sau-xem-nhu-master-react/","title":"Nắm vững 5 khái niệm sau, xem như master React","desc":"Sạo vậy thôi chứ làm gì mà trở thành master ngay lập tức được, lý lẽ bình thường muốn master bất cứ thứ gì cũng cần mồ hôi và nước mắt. Hiểu được 5 khái niệm được cho là căn cơ nhất này sẽ giúp bạn dễ xa lầy hơn."},{"id":"a511f45934f382e37f45b49f489d08df","path":"/2017-10-19-sort-trong-javascript/","title":"Sort trong javascript","desc":"Nếu nghĩ đã hiểu rõ hàm Array.sort() trong javascript, hãy nghĩ lại!"},{"id":"e5eecb851393068228a0e59c9a8662b2","path":"/2018-11-19-xu-ly-loi-neu-co-xay-ra-trong-javascript/","title":"Xử lý lỗi nếu có xảy ra trong javascript","desc":"Lỗi nếu có xảy ra, phải được xử lý hết tránh để chết nguyên ứng dụng. Điểm lại một vài cách xử lý lỗi trong javascript"}]}},"context":{}}