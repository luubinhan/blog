{"hash":"e150ec07f11d4d640e5ab6b3dfc7216b64634be9","data":{"post":{"title":"Xuất bản npm module bằng Lerna với Gitlab CI/CD","path":"/2023-03-30-huong-dan-xuat-ban-module-len-gitlab-registry/","slug":"2023-03-30-huong-dan-xuat-ban-module-len-gitlab-registry","date":"2023-03-30","timeToRead":5,"tags":[{"id":"gitlab","title":"gitlab","path":"/tag/gitlab/"},{"id":"beginner","title":"beginner","path":"/tag/beginner/"},{"id":"dev-ops","title":"dev-ops","path":"/tag/dev-ops/"}],"desc":"","content":"<p>Trong bài viết này chúng ta sẽ thực hiện tự động hóa quá trình xuất bản npm module lên <a href=\"https://docs.gitlab.com/ee/user/packages/npm_registry/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gitlab registry</a> bằng lerna sử dụng Gitlab CI/CD, lưu ý chúng ta không dùng <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">npmjs registry</a>, nó cũng ko có quá nhiều khác biệt, chỉ cần một vài thay đổi nhỏ để xuất bản lên <em>npmjs registry</em>. Các công cụ chúng ta cần đến</p>\n<ul>\n<li><strong>lerna</strong> để quản lý và xuất bản version cho nhiều module cùng lúc</li>\n<li><strong>Gitlab CI/CD</strong>: source code sẽ lưu trên gitlab, dùng Gitlab CI/CD runner để đẩy module lên Gitlab NPM Registry (nơi chứa module npm của gitlab)</li>\n</ul>\n<p>Các bạn cần có căn bản về 2 công cụ này để có tể hiểu hết được bài viết</p>\n<p>Phương pháp đặt tên đánh version của chúng ta sẽ như sau</p>\n<ul>\n<li><strong>main</strong> là nhánh chính, chứa version chính thức chúng ta sẽ xuất bản</li>\n<li><strong>feature branch</strong> sẽ cho ra các version <em>alpha</em> (hay còn gọi với tên khác là <strong>canary</strong>) cho phép chúng ta test nhanh phiên bản mới trước khi xuất bản chính thức</li>\n</ul>\n<p>Dùng lerna, chúng ta xuất bản version canary bằng</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">lerna publish <span class=\"token parameter variable\">--canary</span>\n<span class=\"token comment\"># => 1.0.1-alpha.0+${SHA}</span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token property\">\"publish:canary\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lerna publish --canary --no-git-tag-version --no-push --yes\"</span></code></pre></div>\n<p>Khi đã merge vào nhánh <code class=\"language-inline-text\">main</code>, chúng ta sẽ chạy <code class=\"language-inline-text\">lerna version</code> với những tham số cần thiết để <code class=\"language-inline-text\">push</code> thêm <strong>tag</strong> vào package cũng như cập nhập, <em>commit</em>, <em>push</em> version mới vào trong <strong>package.json</strong>. Để pipeline có quyền push những thay đổi vào trong repository, chúng ta có những thiết đặt rất quan trọng sẽ được đề cập trong phần Gitlab CI/CD bên dưới.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// package.json</span>\n<span class=\"token string-property property\">\"version:stable\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lerna version --yes\"</span></code></pre></div>\n<h2 id=\"gitlab-cicd\"><a href=\"#gitlab-cicd\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gitlab CI/CD</h2>\n<p>Trọng tâm của bài nay này chúng ta sẽ tập trung vào việc xuất bản một module tự động bằng CI/CD của Gitlab. Chúng ta sẽ đụng đến token, file pipeline <code class=\"language-inline-text\">.gitlab-ci.yml</code>, cần quyền <strong>Maintainer</strong> trên repo để có thể vào menu <strong>Settings</strong></p>\n<h3 id=\"token\"><a href=\"#token\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Token</h3>\n<p>Chúng ta sẽ cần 2 loại TOKEN</p>\n<ul>\n<li><strong>CI_JOB_TOKEN</strong> đây là token predefined của CI/CD, nó sẽ có quyền để xuất bản lên gitlab registry, nếu như cần xuất bản lên npm registry chúng ta sẽ cần <em>npm token</em> và lưu nó bào trong biến môi trường để sử dụng trong CI.</li>\n<li>Token cho việc push và thêm tag trên repo, chúng ta sẽ đặt tên nó là <code class=\"language-inline-text\">GL_TOKEN</code>, tạo một project token và cấp quyền <code class=\"language-inline-text\">api</code>, <code class=\"language-inline-text\">read_repository</code>, <code class=\"language-inline-text\">write_repository</code> trên nhánh main</li>\n</ul>\n<h3 id=\"gitlab-ciyml\"><a href=\"#gitlab-ciyml\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-inline-text\">.gitlab-ci.yml</code></h3>\n<p>Đây là một file pipeline dùng để tham khảo, các bạn có thể tùy biến thêm tùy theo nhu cầu,.</p>\n<p>Khai báo một step <code class=\"language-inline-text\">.prepare</code> sẽ dùng làm extend cho các <em>job</em>, trong trường hợp cần phải sử dụng lại các bước này nhiều lần, đây là cách hiệu quả để re-use logic</p>\n<div class=\"gridsome-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">.prepare\n\t<span class=\"token key atrule\">before_script</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token punctuation\">-</span> git config user.email $GITLAB_USER_EMAIL\n\t\t<span class=\"token punctuation\">-</span> git config user.name $GITLAB_USER_NAME\n\t\t<span class=\"token punctuation\">-</span> git remote set<span class=\"token punctuation\">-</span>url origin \"https<span class=\"token punctuation\">:</span>//gitlab<span class=\"token punctuation\">-</span>ci<span class=\"token punctuation\">-</span>token<span class=\"token punctuation\">:</span>$GL_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git\"\n\t\t<span class=\"token punctuation\">-</span> echo \"//$<span class=\"token punctuation\">{</span>CI_SERVER_HOST<span class=\"token punctuation\">}</span>/api/v4/projects/$<span class=\"token punctuation\">{</span>CI_PROJECT_ID<span class=\"token punctuation\">}</span>/packages/npm/<span class=\"token punctuation\">:</span>_authToken=$CI_JOB_TOKEN\" <span class=\"token punctuation\">></span> .npmrc\n\t\t<span class=\"token punctuation\">-</span> git checkout $CI_COMMIT_BRANCH</code></pre></div>\n<p>Chúng ta cần phải đảm bảo các bước này được chạy trước <em>script</em> chính, nên nó được đặt ở <code class=\"language-inline-text\">before_script</code>. Vì Lerna có đụng chạm đến Git repository trong quá trình nó đổi version và xuất bản lên registry, chúng ta phải thêm các bước thiệt đặt email, name khi chạy git</p>\n<p><strong>Đây là đoạn cực kỳ quan trọng</strong>, mình muốn tách riêng và nhắc lại lần nữa, vì nếu không có $GL_TOKEN đã tạo ở trước, chúng ta sẽ fail và bị lỗi 403, chúng ta cũng không thể dùng CI_JOB_TOKEN ở đây vì nó chỉ có quyền xuất bản mà không có quyền can thiệp vào git repository</p>\n<div class=\"gridsome-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">git remote set<span class=\"token punctuation\">-</span>url origin \"https<span class=\"token punctuation\">:</span>//gitlab<span class=\"token punctuation\">-</span>ci<span class=\"token punctuation\">-</span>token<span class=\"token punctuation\">:</span>$GL_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git\"</code></pre></div>\n<p>Sao đó chúng ta sẽ tạo ra phải <code class=\"language-inline-text\">.npmrc</code> để khai báo registry chúng ta muốn xuất bản, ở đây  vì chúng ta chỉ muốn xuất bản nó lên gitlab NPM registry. Trong trường hợp cần xuất bản lên npmjs registry, chúng ta thay đổi nó thành</p>\n<div class=\"gridsome-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">// Nhớ tạo NPM_TOKEN và lưu thành biến môi trường\necho \"//registry.npmjs.org/<span class=\"token punctuation\">:</span>_authToken=$NPM_TOKEN\" <span class=\"token punctuation\">></span> .npmrc</code></pre></div>\n<p>Mặt định Gitlab CI/CD sẽ checkout nhánh đang chạy job theo state <code class=\"language-inline-text\">DETACHED HEAD</code>, chúng ta phải chỉ định cụ thể <code class=\"language-inline-text\">git checkout $CI_COMMIT_BRANCH</code> để Lerna không <em>chửi</em> chúng ta</p>\n<p>Để build một bản <em>canary</em> (phiên bản thử nghiệm chưa hoàn thiện) dành cho nhánh feature, chúng ta sẽ khai báo</p>\n<div class=\"gridsome-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># .gitlab-ci.yml</span>\n<span class=\"token key atrule\">build-publish-canary</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> .prepare\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> yarn install <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>frozen<span class=\"token punctuation\">-</span>lockfile\n    <span class=\"token punctuation\">-</span> yarn build\n    <span class=\"token punctuation\">-</span> yarn test\n    <span class=\"token punctuation\">-</span> yarn publish<span class=\"token punctuation\">:</span>canary\n  <span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span>\n        $CI_COMMIT_BRANCH <span class=\"token tag\">!=</span> \"main\" <span class=\"token important\">&amp;&amp;</span> $CI_PIPELINE_SOURCE <span class=\"token tag\">!=</span>\n        'merge_request_event' <span class=\"token important\">&amp;&amp;</span> $CI_COMMIT_TITLE <span class=\"token tag\">!=</span> \"Publish\"</code></pre></div>\n<p>Sau khi chạy các lệnh bên trong <code class=\"language-inline-text\">.prepare</code>, chúng ta cho chạy <code class=\"language-inline-text\">yarn install --frozone-lockfile</code> để cài đặt dependencies sử dụng chính xác như những gì đã liệt kê trong file <code class=\"language-inline-text\">yarn.lock</code>, đây là một kinh nghiệm để tránh CI làm thay đổi file lock.</p>\n<p>Có những <code class=\"language-inline-text\">rules</code> rất quan trọng mà chúng ta đã thiết đặt</p>\n<ul>\n<li><code class=\"language-inline-text\">$CI_COMMIT_BRANCH != main</code> đảm bảo job này chỉ chạy trên các nhánh không phải là <code class=\"language-inline-text\">main</code></li>\n<li><code class=\"language-inline-text\">$CI_PIPELINE_SOURCE != 'merge_request_event</code> đảm báo job không chạy trên merge request</li>\n<li><code class=\"language-inline-text\">$CI_COMMIT_TITLE != Publish</code> đảm bảo job không chạy sau khi Lerna tạo ra một commit với title là <strong>Publish</strong>, commit này sẽ xuất hiện khi chạy <code class=\"language-inline-text\">lerna version</code></li>\n</ul>\n<p>Đối với nhánh <code class=\"language-inline-text\">main</code> chúng ta sẽ có một job khác</p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># .gitlab-ci.yml</span>\n<span class=\"token key atrule\">build-version-stable</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> .prepare\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> yarn install <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>frozen<span class=\"token punctuation\">-</span>lockfile\n    <span class=\"token punctuation\">-</span> yarn build\n    <span class=\"token punctuation\">-</span> yarn test\n    <span class=\"token punctuation\">-</span> yarn version<span class=\"token punctuation\">:</span>stable\n  <span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> $CI_COMMIT_BRANCH == \"main\" <span class=\"token important\">&amp;&amp;</span> $CI_COMMIT_TITLE <span class=\"token tag\">!=</span> \"Publish\"</code></pre></div>\n<p>Chúc các bạn thành công !</p>\n<p>Bài viết của luckyluu</p>\n","cover_image":"","related":[{"id":"9aafa421dad4e53de4b2273720758cca","path":"/2023-04-09-su-dung-nhieu-account-aws-de-deploy-gitlab/","title":"Sử dụng nhiều AWS account trong Gitlab CI","desc":"Một bài toán cũng quá ư phổ biến khi deploy là có nhiều môi trường khác nhau dev, qa, staging và production, và chúng ta sẽ có các tài khoản tương ứng để có đủ quyền trên môi trường đó."},{"id":"de7a80d030d0dd5e6afe3cc68b691b81","path":"/2020-05-22-cam-giac-viet-css-nam-2020/","title":"Cảm giác khi bạn viết CSS như thế nào trong năm 2020","desc":"Nếu đã có bài làm một website trong năm 2016 nó như thế nào, thì giờ ta sẽ nói xem viết css trong năm 2020 sẽ ra mần sao"},{"id":"650e26f410f5b7cb1079ac9b87e259bd","path":"/2020-05-17-functional-programing-nen-va-khong-nen/","title":"Functional programing nên và không nên","desc":""}]}},"context":{}}