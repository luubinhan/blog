{"hash":"e7cd9c5d01ce1d92a79e9b2d1377b8916f87e6c3","data":{"post":{"title":"Factory Function vs. Class","path":"/2020-11-02-function-factory-trong-js/","date":"2020-11-02","timeToRead":4,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"},{"id":"hoc-thuat","title":"hoc-thuat","path":"/tag/hoc-thuat/"}],"desc":"Khi ES6 giới thiệu class chúng ta nghĩ nó đã giải quyết tất cả những vấn đề của hàm constructor trong JS, thật sự nó đã thay thế được factory function hay chưa, cùng tìm hiểu.","content":"<p>Để tạo một <code class=\"language-text\">object</code> với các <em>method</em> và <em>data</em> dựng sẵn, chúng ta có các phương pháp để làm trong JS:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// class</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassCar</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">drive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GOOO'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> car1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>car1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">drive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// constructor function</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ConstructorCar</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">ConstructorCar</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">drive</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GOOO'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> car2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstructorCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>car2<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">drive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// factory</span>\n<span class=\"token keyword\">const</span> proto <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">drive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GOOO'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">factoryCar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> car3 <span class=\"token operator\">=</span> <span class=\"token function\">factoryCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>car3<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">drive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Về tính năng, thì cả 3 là như nhau, và có thể dùng thay thế cho nhau được.</p>\n<blockquote>\n<p>Có thể bạn chưa biết: Trong JS, bất cứ function nào trả về một object, mà không phải là <code class=\"language-text\">constructor function</code> hay <code class=\"language-text\">class</code>, thì được gọi là <strong>factory function</strong></p>\n</blockquote>\n<h2 id=\"vài-so-sánh-giữa-factory-và-constructor\"><a href=\"#v%C3%A0i-so-s%C3%A1nh-gi%E1%BB%AFa-factory-v%C3%A0-constructor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vài so sánh giữa Factory và Constructor</h2>\n<blockquote>\n<p> Constructor bắt buộc phải khởi tạo bằng keyword <code class=\"language-text\">new</code>. Factory thì không.</p>\n</blockquote>\n<p>Vậy thì keyword <code class=\"language-text\">new</code> của Constructor và Class nó làm gì?</p>\n<ol>\n<li>Khởi tạo một object mới và <code class=\"language-text\">bind</code> giá trị cho từ khóa <code class=\"language-text\">this</code></li>\n<li>Bind <code class=\"language-text\">instance.__proto__</code> vào <code class=\"language-text\">Constructor.prototype</code></li>\n<li>Bind <code class=\"language-text\">instance.__proto__.constructor</code> vào <code class=\"language-text\">Constructor</code></li>\n<li>Ngầm trả về <code class=\"language-text\">this</code> (refer vào giá trị <code class=\"language-text\">instance</code>)</li>\n</ol>\n<p><strong>Về mặt lợi ích khi sử dụng Constructor và Class</strong></p>\n<ul>\n<li>Dễ tiếp cận với những người có xuất phát điểm từ những ngôn ngữ lập trình có hỗ trợ <code class=\"language-text\">class</code></li>\n<li><code class=\"language-text\">this</code> luôn prefer đến một object mới</li>\n<li>Nhiều người thích cách viết <code class=\"language-text\">myFoo = new Foo()</code></li>\n</ul>\n<p><strong>Nhược điểm của Constructor và Class</strong></p>\n<ul>\n<li>Bắt buộc phải dùng từ khóa <code class=\"language-text\">new</code> để khởi tạo</li>\n<li>Tất cả những thằng sử dụng đều dùng chung một constructor, rất khó nếu muốn thay đổi hiện thực bên trong constructor từ bên ngoài.</li>\n<li>Không đáp ứng dụng nguyên tắc <code class=\"language-text\">open/closed</code>: API chỉ cho phép <em>extend</em>, nhưng không cho phép <em>modify</em></li>\n<li>Kết thừa <code class=\"language-text\">class</code> và các vấn đề mà nó sinh ra là câu chuyện không mới khi các bạn viết object oriented (có thể tra cứu google bằng các từ khóa sau: <strong>the fragile base class problem, the gorilla banana problem, the duplication by necessity problem</strong>)</li>\n</ul>\n<p><strong>Lợi ích việc sử dụng Factory</strong></p>\n<ul>\n<li><strong>Linh động</strong> hơn <code class=\"language-text\">class</code> và <code class=\"language-text\">constructor function</code></li>\n<li>Bạn sẽ không bao giờ đụng vô từ khóa <code class=\"language-text\">extend</code> vốn là một con đường đã gây ra đau khổ bấy năm nay.</li>\n<li>Không còn cần dùng từ khóa <code class=\"language-text\">new</code>, không còn loằn ngoằn rối rắm với từ khóa <code class=\"language-text\">this</code></li>\n<li>Nhiều người thích đọc code dạng này <code class=\"language-text\">myFoo = createFoo()</code></li>\n</ul>\n<p><strong>Nhược điểm của Factory</strong></p>\n<ul>\n<li>Không thể check <code class=\"language-text\">instanceof</code>, do không có liên kết giữa instance và <code class=\"language-text\">Factory.prototype</code></li>\n<li><code class=\"language-text\">this</code> không còn refer vào object mới tạo (<code class=\"language-text\">this</code> cũng có ưu nhược điểm của nó chứ không phải toàn nhược điểm)</li>\n<li><strong>Có thể</strong> chậm hơn một chút. Thật ra cũng không cần quá bận tâm việc này, vì chưa ai chứng minh được nó ảnh hưởng đến tốc độ, hiệu năng của ứng dụng, lý thuyết là chậm hơn <em>xíu xiu</em> nhưng máy tính giờ nhanh lắm rồi.</li>\n</ul>\n<h2 id=\"nên-dùng-factory-function\"><a href=\"#n%C3%AAn-d%C3%B9ng-factory-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nên dùng factory function</h2>\n<p>Có rất nhiều quan điểm đưa ra để khuyên bạn đừng dùng contructor trong JS, bài viết <a href=\"https://tsherif.wordpress.com/2013/08/04/constructors-are-bad-for-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Constructors Are Bad For JavaScript</a> có liệt kê khá khá lý do bạn có thể tham khảo.</p>\n<p>Một ví dụ tương đối đầy đủ về factory function</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Player</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> level</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> health <span class=\"token operator\">=</span> level <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLevel</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> level<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">die</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// uh oh</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">damage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\thealth <span class=\"token operator\">-=</span> x<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>health <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">die</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">attack</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">enemy</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>level <span class=\"token operator\">&lt;</span> enemy<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">damage</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>enemy<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> has damaged </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>level <span class=\"token operator\">>=</span> enemy<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tenemy<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">damage</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> has damaged </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>enemy<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> attack<span class=\"token punctuation\">,</span> damage<span class=\"token punctuation\">,</span> getLevel<span class=\"token punctuation\">,</span> getName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> jimmie <span class=\"token operator\">=</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Player</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'jim'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> badGuy <span class=\"token operator\">=</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Player</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'jeff'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\njimmie<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">attack</span><span class=\"token punctuation\">(</span>badGuy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Để kế thừa trong factory function, các bạn có thể làm như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Person</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Tôi là </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> sayName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Nerd</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// tạo Person, sau đó trả về hàm sayName</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> sayName <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Person</span></span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doSomethingNerdy</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tôi tài giỏi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> sayName<span class=\"token punctuation\">,</span> doSomethingNerdy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> jeff <span class=\"token operator\">=</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Nerd</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'luckyluu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\njeff<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Tôi là luckyluu</span>\njeff<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">doSomethingNerdy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// tôi tài giỏi</span></code></pre>\n<p>Với cách trên, chỉ định rất cụ thể hàm nào sẽ được trả về, còn nếu muốn trả tất cả những gì của Person, đơn giản là merge object</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Nerd</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> prototype <span class=\"token operator\">=</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Person</span></span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doSomethingNerdy</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tôi tài giỏi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> prototype<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> doSomethingNerdy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nghe có vẻ hơi trái tai, mặc dù JS đã có hỗ trợ class, nhưng các bạn đừng nên dùng nó.</p>\n<p><a href=\"https://medium.com/javascript-scene/javascript-factory-functions-vs-constructor-functions-vs-classes-2f22ceddf33e\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Factory Functions vs Constructor Functions vs Classes</a></p>\n<p><a href=\"https://www.theodinproject.com/courses/javascript/lessons/factory-functions-and-the-module-pattern\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FACTORY FUNCTIONS AND THE MODULE PATTERN</a></p>\n","cover_image":"","related":[{"id":"8afa5feb4373f89126d4f75ca9dba253","path":"/2019-03-07-huong-dan-lua-chon-phuong-thuc-lap-trong-array/","title":"for vs forEach vs for/in vs for/of trong javascript","desc":"Trong javascript có rất nhiều cách để loop qua một array, chúng ta cùng bàn qua 4 cách chính hay sử dụng nhất"},{"id":"2b2f850f08162102f65ce976ebbf045b","path":"/2018-11-05-moi-so-loi-javascript-lam-anh-huong-perfomance/","title":"3 lỗi javascript thường mắc phải làm ảnh hưởng perfomance","desc":"Bài viết dành cho những người nghiện tốc độ, nghiện cách viết ES6"},{"id":"9e12fec8adcd2cd25617bb60a650fc1f","path":"/2019-03-19-huong-dan-setup-react-app-tu-a-toi-z/","title":"Tạo React Boilerplate - Từ a tới z","desc":"Một ngày nào đó bạn ko muốn dùng create-react-app để khởi tạo project nữa, thì đây chính là bài hướng dẫn bạn cần đọc: setup một project từ a tới z mà không dùng create-react-app"}]}},"context":{}}