{"hash":"084851c55e1477b257044c7ff732964430b45419","data":{"post":{"title":"Hồi 6: ES6 căn bản - Khai báo biến với let và const","path":"/hoi-6-e-s6-can-ban-khai-bao-bien-voi-let-va-const/","slug":"/2016-11-20-phan-6-es6-can-ban-khai-bao-let-const","date":"2016-11-20","timeToRead":1,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"}],"desc":"Hồi 6 trong series ES6 căn bản, nói về khai báo biến với let và const","content":"<p>Trong Series này</p>\n<ol>\n<li><a href=\"/2016-11-15-chuong-1-es6-can-ban\">Nâng cấp cho Object</a></li>\n<li><a href=\"/2016-11-16-chuong-2-es6-can-ban-arrow-function/\">Arrow function</a></li>\n<li><a href=\"/2016-11-17-phan-3-es6-can-ban-assignment-destructuring\">Assignment Destruction</a></li>\n<li><a href=\"/2016-11-18-phan-4-es6-can-ban-rest-parameters-va-spread-operator\">Rest parameters và spread operator</a></li>\n<li><a href=\"/2016-11-19-phan-5-es6-can-ban-template-literals\">Template literals</a></li>\n<li><a href=\"/2016-11-20-phan-6-es6-can-ban-khai-bao-let-const\">Khai báo biến với let và const</a></li>\n<li><a href=\"/2016-11-21-phan-7-es6-can-ban-classes\">Căn bản class</a></li>\n</ol>\n<p><code class=\"language-text\">let</code> dùng để khai báo một biến như <code class=\"language-text\">var</code>, khác nhau ở phạm vi hoạt động (scoping), ví dụ với khai báo <code class=\"language-text\">var</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isItTwo</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">value</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> two <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword control-flow\">return</span> two\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">isItTwo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// result: true</span>\n<span class=\"token function\">isItTwo</span><span class=\"token punctuation\">(</span><span class=\"token string\">'two'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// result: undefined</span></code></pre>\n<p>Đoạn khai báo <code class=\"language-text\">var two = true</code> nằm trong điều kiện <code class=\"language-text\">if</code> nhưng vẫn hoạt động, vì khai báo biến bằng từ khóa <code class=\"language-text\">var</code> phạm vi ngầm hiểu là trong cả một <code class=\"language-text\">function</code>, nó giống như viết như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isItTwo</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">value</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">var</span> two\n <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  two <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword control-flow\">return</span> two\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Khai báo biến bằng từ khóa <code class=\"language-text\">var</code> dễ rối so với các ngôn ngữ khác như <code class=\"language-text\">php</code>, khi biến được khai báo thì nó có phạm vi hoạt động <em>\"block-scoped\"</em></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n <span class=\"token comment\">// 0,1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// result: i is not defined</span></code></pre>\n<p>Khai báo biến bằng từ khóa <code class=\"language-text\">let</code> hay <code class=\"language-text\">const</code> có phạm vi <em>block-scoped</em></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pi <span class=\"token operator\">=</span> <span class=\"token number\">3.1415</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> pi <span class=\"token operator\">=</span> <span class=\"token number\">16</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 16</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 3.1415</span></code></pre>\n<p>Khi khai báo bằng từ khóa <code class=\"language-text\">const</code> phải có giá trị khởi tạo, không được phép để rỗng như <code class=\"language-text\">let</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pi <span class=\"token operator\">=</span> <span class=\"token number\">3.1415</span>\n<span class=\"token keyword\">const</span> e<span class=\"token punctuation\">;</span> <span class=\"token comment\">// SyntaxError</span></code></pre>\n<p>Nếu dùng <code class=\"language-text\">const</code> để khai báo biến thì giá trị nó sẽ không được gán mới hoặc khởi tạo lại, nhưng có thể push thêm giá trị vào</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'An'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Luu'</span><span class=\"token punctuation\">]</span>\npeople <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Result: ['An','Luu']</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Binh'</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Result['An','Luu','Binh']</span></code></pre>\n","cover_image":"","related":[{"id":"1340104aa5d848ae6e871dca2ffcd1b5","path":"/hoi-7-e-s6-can-ban-classes/","title":"Hồi 7: ES6 căn bản - Classes","desc":"Hồi 7 trong series ES6 căn bản, Javascript vốn là ngôn ngữ prototype, class không phải là cái gì đó mới mẻ trong javascript"},{"id":"6b73c7a8d9c5332b2e0a6315fcbcb943","path":"/hoi-2-e-s6-can-ban-arrow-function/","title":"Hồi 2: ES6 căn bản - Arrow Function","desc":"Hồi 2 trong series ES6 căn bản, nói về Arrow Function"},{"id":"cad93a1c7d14fac9d3f26a77aff31d1d","path":"/hoi-5-e-s6-can-ban-template-literals/","title":"Hồi 5: ES6 căn bản - Template literals","desc":"Hồi 5 trong series ES6 căn bản, nói về Template literals, một nâng cấp lớn cho string"},{"id":"1033f1efca1a045faea137fd0c0a873d","path":"/hoi-3-e-s6-can-ban-truy-cap-phan-tu/","title":"Hồi 3: ES6 căn bản - Truy cập phần tử","desc":"Hồi 3 trong series ES6 căn bản, nói về Assignment Destructuring"}]}},"context":{}}