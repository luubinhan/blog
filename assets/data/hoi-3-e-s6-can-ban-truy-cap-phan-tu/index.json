{"hash":"185c8bc97550c8db053262169b1d747bb2a28014","data":{"post":{"title":"Hồi 3: ES6 căn bản - Truy cập phần tử","path":"/hoi-3-e-s6-can-ban-truy-cap-phan-tu/","date":"2016-11-17","timeToRead":3,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"}],"desc":"Hồi 3 trong series ES6 căn bản, nói về Assignment Destructuring","content":"<p>Trong Series này</p>\n<ol>\n<li><a href=\"/2016-11-15-chuong-1-es6-can-ban\">Nâng cấp cho Object</a></li>\n<li><a href=\"/2016-11-16-chuong-2-es6-can-ban-arrow-function/\">Arrow function</a></li>\n<li><a href=\"/2016-11-17-phan-3-es6-can-ban-assignment-destructuring\">Assignment Destruction</a></li>\n<li><a href=\"/2016-11-18-phan-4-es6-can-ban-rest-parameters-va-spread-operator\">Rest parameters và spread operator</a></li>\n<li><a href=\"/2016-11-19-phan-5-es6-can-ban-template-literals\">Template literals</a></li>\n<li><a href=\"/2016-11-20-phan-6-es6-can-ban-khai-bao-let-const\">Khai báo biến với let và const</a></li>\n<li><a href=\"/2016-11-21-phan-7-es6-can-ban-classes\">Căn bản class</a></li>\n</ol>\n<!-- MarkdownTOC -->\n<ul>\n<li>Truy cập các phần tử của <code class=\"language-text\">Objects</code></li>\n<li>Truy cập các phần tử của <code class=\"language-text\">Arrays</code></li>\n<li>Truy cập các phần tử <code class=\"language-text\">Parameters</code> của <code class=\"language-text\">Function</code></li>\n<li>Ứng dụng</li>\n</ul>\n<!-- /MarkdownTOC -->\n<h2 id=\"truy-cập-các-phần-tử-của-objects\"><a href=\"#truy-c%E1%BA%ADp-c%C3%A1c-ph%E1%BA%A7n-t%E1%BB%AD-c%E1%BB%A7a-objects\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Truy cập các phần tử của <code class=\"language-text\">Objects</code></h2>\n<p>Tưởng tượng ta có nhân vật Bruce với mật danh Batman được định nghĩa như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> character <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n name<span class=\"token operator\">:</span> <span class=\"token string\">'Bruce'</span><span class=\"token punctuation\">,</span>\n pseudonym<span class=\"token operator\">:</span> <span class=\"token string\">'Batman'</span><span class=\"token punctuation\">,</span>\n metadata<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span>\n  gender<span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n batarang<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'gas pellet'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bat-mobile control'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bat-cuffs'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu bạn muốn biến <code class=\"language-text\">pseudonym</code> tham chiếu đến <code class=\"language-text\">character.pseudonym</code>, với ES5</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> pseudonym <span class=\"token operator\">=</span> character<span class=\"token punctuation\">.</span><span class=\"token property-access\">pseudonym</span></code></pre>\n<p>Với ES6 ta có thể viết đoạn trên thành</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span>pseudonym<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> character</code></pre>\n<p>Cái này được gọi là <code class=\"language-text\">Destructuring object</code>, nếu muốn khai báo nhiều biến như thế này tham chiếu tới key của object <em>character</em>, thêm dấu <code class=\"language-text\">,</code> giữa mỗi biến</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span>pseudonym<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> character</code></pre>\n<p>Nếu muốn tham chiếu đến key là <code class=\"language-text\">pseudonym</code> nhưng lại muốn đặt tên biến là <code class=\"language-text\">alias</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> pseudonym<span class=\"token operator\">:</span> alias <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> character\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> alias <span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// The same with: alias = character.pseudonym</span></code></pre>\n<p>Nếu đặt giữa dấu <code class=\"language-text\">{}</code> là đang truy xuất tới key bên dưới <code class=\"language-text\">pseudonym</code> chứ ko phải đặt alias. Khi <code class=\"language-text\">gender</code> chưa được định nghĩa, mặc định sẽ trả về <code class=\"language-text\">undefined</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> pseudonym<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>gender<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> character</code></pre>\n<p>Nếu kết hợp sử dụng alias và giá trị mặc định, viết tên alias trước rồi tới giá trị mặc định</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> boots<span class=\"token operator\">:</span> footwear <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> character</code></pre>\n<p>Sử dụng kết hợp với <code class=\"language-text\">Computed Property</code>, trong trường hợp này bắt buộc đặt alias</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span>  <span class=\"token punctuation\">{</span> scientist<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> <span class=\"token string\">'scientist'</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> person\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></code></pre>\n<p>Câu này thì biết vậy thôi chứ ko cần dùng vì nó khó đọc hơn cách viết cũ <code class=\"language-text\">value = person[type]</code></p>\n<h1 id=\"truy-cập-các-phần-tử-của-arrays\"><a href=\"#truy-c%E1%BA%ADp-c%C3%A1c-ph%E1%BA%A7n-t%E1%BB%AD-c%E1%BB%A7a-arrays\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Truy cập các phần tử của <code class=\"language-text\">Arrays</code></h1>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> coordinates <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> coordinates</code></pre>\n<p>Tương tự như object, khác ở chổ thay vì rào hay tham biến bằng <code class=\"language-text\">{}</code>  thì rào nó vào <code class=\"language-text\">[]</code>, câu trên tương tự với <code class=\"language-text\">x = coordinates[0], y = coordinates[1]</code></p>\n<p>Để bỏ qua một giá trị trong mảng không muốn tham biến tới, bỏ trống</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> coordinates <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> coordinates</code></pre>\n<p>Tham biến giá trị mặc định lúc khởi tạo</p>\n<pre class=\"language-text\"><code class=\"language-text\">var coordinates = [12,-7,20]\nvar [x,,z = 30] = coordinates\nconsole.log(z)\n// z=30</code></pre>\n<p>Trong ES5 để hoán đổi giá trị của 2 biến nào đó mình sẽ thêm một biến nữa để lưu tạm giá trị</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> left <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">var</span> right <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n<span class=\"token keyword\">var</span> tempt <span class=\"token operator\">=</span> left\nleft <span class=\"token operator\">=</span> right\nright <span class=\"token operator\">=</span> tempt</code></pre>\n<p>Viết lại thế này với ES6</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> left <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">var</span> right <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">]</span></code></pre>\n<h2 id=\"truy-cập-các-phần-tử-parameters-của-function\"><a href=\"#truy-c%E1%BA%ADp-c%C3%A1c-ph%E1%BA%A7n-t%E1%BB%AD-parameters-c%E1%BB%A7a-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Truy cập các phần tử <code class=\"language-text\">Parameters</code> của <code class=\"language-text\">Function</code></h2>\n<p>Cái này thì cũ rồi mà giờ mới có nè, giá trị mặc định cho <code class=\"language-text\">parameter</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">powerOf</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">base<span class=\"token punctuation\">,</span> exponent <span class=\"token operator\">=</span> <span class=\"token number\">2</span></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pow</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">,</span> exponent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Sử dụng với <code class=\"language-text\">Arrow function</code>, trường hợp này luôn luôn kẹp vào <code class=\"language-text\">()</code> dù chỉ có một tham số</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">double</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">input <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> input <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sumOf</span> <span class=\"token punctuation\">(</span> <span class=\"token parameter\">a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Truyền vào tham số là một <code class=\"language-text\">object</code> chứa nhiều <code class=\"language-text\">key</code>, định giá trị mặc định cho <code class=\"language-text\">key</code> của <code class=\"language-text\">object</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">carFactory</span><span class=\"token punctuation\">(</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> brand<span class=\"token operator\">:</span> <span class=\"token string\">\"Suzuki\"</span><span class=\"token punctuation\">,</span> year<span class=\"token operator\">:</span> <span class=\"token number\">1989</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span><span class=\"token property-access\">brand</span><span class=\"token punctuation\">)</span>\n <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span><span class=\"token property-access\">year</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Để ý là nếu truyền vào <code class=\"language-text\">object</code> chỉ một <code class=\"language-text\">key</code>, thì toàn bộ <code class=\"language-text\">key</code> mặc định cũng mất, ví dụ như <strong>options</strong> ở trên chỉ truyền vào <strong>year</strong> thì cái *<em>brand</em> mất</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">carFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>year<span class=\"token operator\">:</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Cách tốt nhất là nên truyền vào theo kiểu từng phần tử, không dùng <code class=\"language-text\">object</code> <strong>options</strong>, sửa lại hàm ở trên thành</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">carFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>brand <span class=\"token operator\">=</span> <span class=\"token string\">\"Suzuki\"</span><span class=\"token punctuation\">,</span> year <span class=\"token operator\">=</span> <span class=\"token number\">1999</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">carFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>year<span class=\"token operator\">:</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"ứng-dụng\"><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ứng dụng</h2>\n<p>Khi một hàm cần trả về <code class=\"language-text\">object</code> hoặc <code class=\"language-text\">array</code>. Ví dụ hàm bên dưới trả về tọa độ và <code class=\"language-text\">type</code>, nhưng chúng ta có thể lấy đúng giá trị của tọa độ x, y, không quan tâm z, type</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getCoordinates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'3d'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">getCoordinates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Ví dụ ta có hàm <code class=\"language-text\">random</code> để tạo một con số ngẫu nhiên nào đó trong phạm vi min và max được chỉ định, khi gọi hàm này cũng có thể thay đổi giá trị min, max tùy ý</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>min <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> max <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">floor</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">-</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> min\n<span class=\"token punctuation\">}</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>max<span class=\"token operator\">:</span> <span class=\"token number\">24</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></code></pre>\n<p>Khi sử dụng cùng với <code class=\"language-text\">Regular expression</code>, ta có thể bỏ qua giá trí đầu tiên trả về vốn là giá trị truyền vào, ta chỉ cần lấy lấy kết quả year, month, day</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">splitDate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">date</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">var</span> rdate <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\"><span class=\"token group punctuation\">(</span><span class=\"token charclass class-name\">\\d</span><span class=\"token quantifier number\">+</span><span class=\"token group punctuation\">)</span><span class=\"token charclass class-name\">.</span><span class=\"token group punctuation\">(</span><span class=\"token charclass class-name\">\\d</span><span class=\"token quantifier number\">+</span><span class=\"token group punctuation\">)</span><span class=\"token charclass class-name\">.</span><span class=\"token group punctuation\">(</span><span class=\"token charclass class-name\">\\d</span><span class=\"token quantifier number\">+</span><span class=\"token group punctuation\">)</span></span><span class=\"token regex-delimiter\">/</span></span>\n <span class=\"token keyword\">return</span> rdate<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>year<span class=\"token punctuation\">,</span> month<span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">slitDate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2016-11-16'</span><span class=\"token punctuation\">)</span></code></pre>\n","cover_image":"","related":[{"id":"1340104aa5d848ae6e871dca2ffcd1b5","path":"/hoi-7-e-s6-can-ban-classes/","title":"Hồi 7: ES6 căn bản - Classes","desc":"Hồi 7 trong series ES6 căn bản, Javascript vốn là ngôn ngữ prototype, class không phải là cái gì đó mới mẻ trong javascript"},{"id":"b429569d7c312ed594d95662ba44a118","path":"/e-s6-can-ban-phan-1-nhung-nang-cap-cho-object/","title":"ES6 Căn bản (phần 1) - Những nâng cấp cho Object","desc":"Nếu bạn đã đọc bài FrontEnd Developer 2016 nên học gì? Chắc bạn đã rối không biết bắt đầu từ đâu nếu muốn dấn thân vào cuộc chơi nhiều cám dỗ này. Mình nghĩ cái đầu tiên cần học là ES6."},{"id":"6b73c7a8d9c5332b2e0a6315fcbcb943","path":"/hoi-2-e-s6-can-ban-arrow-function/","title":"Hồi 2: ES6 căn bản - Arrow Function","desc":"Hồi 2 trong series ES6 căn bản, nói về Arrow Function"},{"id":"cad93a1c7d14fac9d3f26a77aff31d1d","path":"/hoi-5-e-s6-can-ban-template-literals/","title":"Hồi 5: ES6 căn bản - Template literals","desc":"Hồi 5 trong series ES6 căn bản, nói về Template literals, một nâng cấp lớn cho string"}]}},"context":{}}