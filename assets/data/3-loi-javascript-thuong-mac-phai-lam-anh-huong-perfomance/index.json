{"hash":"be9cd8cba7af086bce31a0a023c14cacaa870421","data":{"post":{"title":"3 lỗi javascript thường mắc phải làm ảnh hưởng perfomance","path":"/3-loi-javascript-thuong-mac-phai-lam-anh-huong-perfomance/","date":"2018-11-05","timeToRead":1,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"}],"desc":"Bài viết dành cho những người nghiện tốc độ, nghiện cách viết ES6","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#1-loop-qua-m%E1%BB%99t-array\">1. loop qua một array</a></li>\n<li><a href=\"#2-duplicate-m%E1%BB%99t-array\">2. Duplicate một array</a></li>\n<li><a href=\"#3-loop-qua-m%E1%BB%99t-object\">3. Loop qua một object</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"1-loop-qua-một-array\"><a href=\"#1-loop-qua-m%E1%BB%99t-array\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. loop qua một array</h2>\n<p>Chúng ta thử xem thời gian tiêu tốn cho việc loop qua 10k item trong array</p>\n<ul>\n<li><code class=\"language-text\">for</code>: ~10 microseconds</li>\n<li><code class=\"language-text\">while</code>: ~11 microseconds</li>\n<li><code class=\"language-text\">forEach</code>: ~77 microseconds</li>\n<li><code class=\"language-text\">for-of</code>: ~110 microseconds</li>\n<li><code class=\"language-text\">reduce</code>: ~113 microseconds</li>\n</ul>\n<p>Nếu muốn tính tổng của một array thì sử dụng <code class=\"language-text\">reduce</code> là rõ ràng, tuy nhiên cái giá phải trả quá lớn. Vòng lặp mới nhất từ ES6 <code class=\"language-text\">for-of</code> cũng về áp chót. Như vậy cứ xài vòng <code class=\"language-text\">for</code> kinh điển, tuy cũ mà nhanh gấp 10 lần cái <code class=\"language-text\">for-of</code></p>\n<h2 id=\"2-duplicate-một-array\"><a href=\"#2-duplicate-m%E1%BB%99t-array\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Duplicate một array</h2>\n<p>Khi thế giới đang tồn thờ tư tưởng <strong>immutable function</strong> ( không sửa cái input khi cho ra output ), việc duplicate một input array là chuyện thường ngày ở huyện.</p>\n<p>Chúng ta hãy xem kết quả tất cả các cách chúng ta có thể dùng để duplicate một array</p>\n<ul>\n<li><code class=\"language-text\">[].concat(arr)</code>: ~366 microseconds</li>\n<li><code class=\"language-text\">arr.slice()</code>: ~367 microseconds</li>\n<li><code class=\"language-text\">arr.map(x =&gt; x)</code>: ~469 microseconds</li>\n<li><code class=\"language-text\">[...arr]</code>: ~512 microseconds</li>\n<li><code class=\"language-text\">Array.from(arr)</code>: ~1,436 microseconds</li>\n</ul>\n<p>Như vậy 2 phương thức cũ như dưa mắm <code class=\"language-text\">concat</code> và <code class=\"language-text\">slice</code> vẫn dành chiến thắng, kiểu spread operation mới ES6 vẫn top cuối.</p>\n<h2 id=\"3-loop-qua-một-object\"><a href=\"#3-loop-qua-m%E1%BB%99t-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Loop qua một object</h2>\n<ul>\n<li><code class=\"language-text\">for(let key in obj)</code>: ~240 microseconds</li>\n<li><code class=\"language-text\">Object.keys(obj)</code> sau đó for each: ~294 microseconds</li>\n<li><code class=\"language-text\">Object.entries(obj)</code> sau đó for of: ~535 microseconds</li>\n</ul>\n<p>Ở hai cách làm bên dưới, do phải tạo thêm một mảng chứa key, rồi mới loop qua mảng này object nên nó chậm.</p>\n<div class=\"note\">Đừng mù quáng xài cách viết mới nếu không phù hợp với ứng dụng đang viết</div>\n<p><a href=\"https://hackernoon.com/3-javascript-performance-mistakes-you-should-stop-doing-ebf84b9de951\" target=\"_blank\" rel=\"noopener noreferrer\">3 JavaScript Performance Mistakes You Should Stop Doing &#x3C;/a</p>\n","cover_image":""}},"context":{}}