{"hash":"96c8dea8aa6d6e6f9c0c563edfb92dcd7958f442","data":{"post":{"title":"Re-render trong React","path":"/2022-08-10-re-render-trong-react/","slug":"2022-08-10-re-render-trong-react","date":"2022-08-10","timeToRead":4,"tags":[{"id":"react","title":"react","path":"/tag/react/"},{"id":"javascript","title":"javascript","path":"/tag/javascript/"}],"desc":"Những pattern quan trọng giúp tránh re-render và những anti-pattern dẫn đến re-render không cần thiết","content":"<h2 id=\"re-render-là-gì-trong-react\"><a href=\"#re-render-l%C3%A0-g%C3%AC-trong-react\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Re-render là gì trong React</h2>\n<p>Khi nói đến performance của React, chúng ta có 2 trạng thái cần quan tâm:</p>\n<ul>\n<li><strong>render lần đầu</strong> - khi component xuất hiện lần đầu trên màn hình</li>\n<li><strong>re-render</strong> - render lại một component đã xuất hiện trên màn hình\nThường thì re-render xảy ra khi user tương tác với ứng dụng gây ra sự thay đổi dữ liệu, state của ứng dụng và component cần được render lại để hiển thị tương ứng với dữ liệu mới. Tuy nhiên không phải re-render nào cũng cần thiết, có thể chia ra làm 2 loại re-render</li>\n<li><strong>Loại cần thiết</strong> - component có sử dụng dữ liệu đã thay đổi. Ví dụ như input cần re-render khi user nhập dữ liệu</li>\n<li><strong>Loại không cần thiết</strong> - bị re-render do ảnh hưởng từ những component khác, không thay đổi gì sau khi re-render.\nRe-render không phải lúc nào cũng gây ra vấn đề gì to tác, cơ bản React rất nhanh, việc re-render xảy ra gần như người dùng không thể để ý được, chỉ với những component thật sự phức tạp, mỗi lần render tiêu tốn nhiều thời gian, lúc này chúng ta dễ thấy hiện tượng <em>lag</em>, giao diện delay trên mỗi lần render.</li>\n</ul>\n<h2 id=\"tại-sao-lại-re-render\"><a href=\"#t%E1%BA%A1i-sao-l%E1%BA%A1i-re-render\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao lại re-render</h2>\n<p>Có thể gom lại 4 nguyên nhân tại sao component re-render: state thay đổi, component cha/con re-render, context thay đổi, hook thay đổi. </p>\n<h3 id=\"do-state-thay-đổi\"><a href=\"#do-state-thay-%C4%91%E1%BB%95i\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Do state thay đổi</h3>\n<p><a href=\"https://codesandbox.io/s/part2-1-re-renders-because-of-state-ngh8uc?file=/src/App.tsx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem ví dụ trên codesandbox</a>\n<img src=\"https://www.developerway.com/assets/react-re-renders-guide/part2-state-changes-example.png\"></p>\n<h3 id=\"do-parent-re-render\"><a href=\"#do-parent-re-render\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Do parent re-render</h3>\n<p>Component sẽ bị render nếu component parent re-render, hay nói đúng hơn, một component mà re-render, đám child của nó cũng re-render, mặc dù cũng có một vài trường hợp cá biệt, component child có thể trigger render component parent</p>\n<p><a href=\"https://codesandbox.io/s/part-2-2-re-renders-because-of-parent-b0xvxt?file=/src/App.tsx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem ví dụ trên codesandbox</a>\n<img src=\"https://www.developerway.com/assets/react-re-renders-guide/part2-parent-example.png\"></p>\n<h3 id=\"do-context-thay-đổi\"><a href=\"#do-context-thay-%C4%91%E1%BB%95i\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Do context thay đổi</h3>\n<p>Một giá trị bên trong context thay đổi, <strong>toàn bộ</strong> component nằm trong context đó sẽ re-render, dù là nó không sử dụng giá trị bị thay đổi. Có thể chặn re-render này bằng cách memoization, sẽ được đề cập bên dưới.</p>\n<p><a href=\"https://codesandbox.io/s/part-2-3-re-render-because-of-context-i75lwh?file=/src/App.tsx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem ví dụ trên codesandbox</a>\n<img src=\"https://www.developerway.com/assets/react-re-renders-guide/part2-context-example.png\"></p>\n<h3 id=\"do-hook\"><a href=\"#do-hook\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Do hook</h3>\n<p>Nếu bên trong hook có thay đổi, component sẽ re-render, và re-render này là không thể chặn được.</p>\n<p><a href=\"https://codesandbox.io/s/part-2-4-re-render-because-of-hooks-5kpdrp?file=/src/App.tsx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem ví dụ trên codesandbox</a>\n<img src=\"https://www.developerway.com/assets/react-re-renders-guide/part2-hooks-example.png\"></p>\n<h2 id=\"phương-pháp-hạn-chế-re-render\"><a href=\"#ph%C6%B0%C6%A1ng-ph%C3%A1p-h%E1%BA%A1n-ch%E1%BA%BF-re-render\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phương pháp hạn chế re-render</h2>\n<p>Một anti pattern (khuyến cáo không nên dùng) là tạo component bên trong hàm render của component\n<img src=\"https://www.developerway.com/assets/react-re-renders-guide/part3-creating-components.png\"></p>\n<p>Cách viết bên trái trên mỗi lần re-render, nó sẽ <strong>re-mount</strong> lại <code class=\"language-inline-text\">&lt;SlowComponent /></code>, nó sẽ xóa component, khởi tạo một component hoàn toàn mới mỗi lần re-render <code class=\"language-inline-text\">&lt;Component /></code></p>\n<p><a href=\"https://codesandbox.io/s/part-3-1-creating-components-inline-t2vmkj?file=/src/App.tsx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem ví dụ trên codesandbox</a></p>\n<h3 id=\"đóng-gói\"><a href=\"#%C4%91%C3%B3ng-g%C3%B3i\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đóng gói</h3>\n<p><img src=\"https://www.developerway.com/assets/react-re-renders-guide/part3-moving-state-down.png\"></p>\n<p>Hãy phân tích lợi ích của cách viết bên phải, chúng ta gom state và các component liên quan đến state này vào một component, khi giá trị state <code class=\"language-inline-text\">open</code> thay đổi, so với cách viết bên trái, component <code class=\"language-inline-text\">&lt;VereSlowComponent /></code> sẽ không bị ảnh hưởng</p>\n<p><a href=\"https://codesandbox.io/s/part-3-2-moving-state-down-vlh4gf?file=/src/App.tsx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem ví dụ trên codesandbox</a></p>\n<h3 id=\"sử-dụng-prop-children\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-prop-children\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng prop children</h3>\n<p><img src=\"https://www.developerway.com/assets/react-re-renders-guide/part3-passing-as-children.png\"></p>\n<p>Hơi giống như cách ở trên, chúng ta <em>tách</em> state vào một component độc lập, nhưng vì ở đây <code class=\"language-inline-text\">&lt;VereSlowComponent /></code> phải nằm bên trong, chúng ta dùng prop <code class=\"language-inline-text\">children</code>, như thế dù <code class=\"language-inline-text\">&lt;ComponentWithScroll /></code> có re-render, vẫn không ảnh hưởng đến <code class=\"language-inline-text\">&lt;VerySlowComponent /></code></p>\n<p>Đây cũng là một trường hợp cá biệt cho thấy không phải parent render thì child component sẽ render</p>\n<p><a href=\"https://codesandbox.io/s/part-3-2-moving-state-down-vlh4gf?file=/src/App.tsx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem ví dụ trên codesandbox</a></p>\n<h3 id=\"truyền-prop-là-component\"><a href=\"#truy%E1%BB%81n-prop-l%C3%A0-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Truyền prop là component</h3>\n<p><img src=\"https://www.developerway.com/assets/react-re-renders-guide/part3-passing-as-props.png\"></p>\n<p>Cũng tương tự như <code class=\"language-inline-text\">children</code> nếu chúng ta truyền component như một prop, nó sẽ không bị re-render dù cho component chính render</p>\n<p><a href=\"https://codesandbox.io/s/part-3-4-passing-components-as-props-9h3o5u?file=/src/App.tsx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem ví dụ trên codesandbox</a></p>\n<h3 id=\"dùng-api-của-react\"><a href=\"#d%C3%B9ng-api-c%E1%BB%A7a-react\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dùng API của React</h3>\n<p><img src=\"https://www.developerway.com/assets/react-re-renders-guide/part4-memo-normal-example.png\"></p>\n<p><a href=\"https://codesandbox.io/s/part-4-simple-memo-fz4xhw?file=/src/App.tsx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem ví dụ trên codesandbox</a></p>\n<p>Nếu không đủ tinh tế và muốn xài đồ có sẵn cho an toàn thì chúng ta đã có sẵn API của react <code class=\"language-inline-text\">React.memo</code>, <code class=\"language-inline-text\">useMemo</code></p>\n<p><img src=\"https://www.developerway.com/assets/react-re-renders-guide/part4-memo-with-props.png\"></p>\n<p><a href=\"https://codesandbox.io/s/part-4-1-memo-on-component-with-props-fq55hm?file=/src/App.tsx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem ví dụ trên codesandbox</a></p>\n<p>Sử dụng <code class=\"language-inline-text\">useMemo</code>, <code class=\"language-inline-text\">useCallback</code> cũng cần nhắc không hẳn dùng mọi lúc, mọi nơi sẽ tối ưu, đôi khi nó lại ngốn ram của user, và trong một số trường hợp nó không có tác dụng, như trường hợp sau</p>\n<p><img src=\"https://www.developerway.com/assets/react-re-renders-guide/part5-unnecessary-usememo-on-props.png\"></p>\n<p><a href=\"https://codesandbox.io/s/part-5-1-unnecessary-usememo-lmk8fq?file=/src/App.tsx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem ví dụ trên codesandbox</a></p>\n<p>Một gợi ý là nếu thấy các prop không phải kiểu <strong>primitive value</strong> thì có thể cân nhắc memorize</p>\n<p><a href=\"https://www.developerway.com/posts/react-re-renders-guide\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React re-renders guide: everything, all at once</a></p>\n","cover_image":"","related":[{"id":"fadf97c19ebea16bc5fd2a29dbb10ed6","path":"/2022-08-15-re-render-va-nhung-dieu-bi-an/","title":"Những bí ẩn trong việc re-render trong React","desc":"Bạn có bao giờ bị bối rối như mình trong khi phát hiện component bị re-render, dù đã useMemo, useCallback, memo đủ kiểu. Hãy cùng tìm lời giải cho những ẩn số này."},{"id":"ef07fe54df031b8956b57411b846eb64","path":"/2023-01-15-giai-thich-react-concurrent-rendering-la-gi/","title":"Concurrent rendering trong React là gì?","desc":"Bài viết này chúng ta sẽ cũng tìm hiểu React Concurrent, vấn đề nó giải quyết là gì và nó chạy như thế nào, ứng dụng thực tế"},{"id":"701db4ec762997c89b986f7a69550b3d","path":"/2018-03-05-8-huong-dan-cach-render-component-trong-react/","title":"8 câu điều kiện khi render trong React","desc":"Tutorial này sẽ cover những câu điều kiện dùng để render component phổ biến nhất"},{"id":"d063bd85884bf12eab535e03c93b53de","path":"/2018-05-02-huong-dan-transition-voi-react-navigation/","title":"Transition trong React Native với React Navigation","desc":"Hướng dẫn làm transition trong React Native với react navigation"}]}},"context":{}}