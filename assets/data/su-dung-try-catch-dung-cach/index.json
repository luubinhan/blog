{"hash":"5ee00dc0b71878963f9b5fb39ff7b4fecc0fc2a1","data":{"post":{"title":"Sử dụng try...catch đúng cách","path":"/su-dung-try-catch-dung-cach/","date":"2019-05-01","timeToRead":3,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"}],"desc":"Nhìn lại một cách cặn kẽ hơn cách chúng ta xử lý trường hợp lỗi trong javascript","content":"<p>Tình huống khi bạn biết chắc nó sẽ có lỗi, nhưng là một lỗi có thể chấp nhận và bỏ qua, bạn sẽ viết nó thế này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> defaultConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> customConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  customConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'custom.config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// không có custom config thì cũng ok mà.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>defaultConfig<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>customConfig <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu có <code class=\"language-text\">custom.config</code> file, chúng ta load nó, nếu ko thì cũng chẳng sao, chúng ta dùng giá trị mặc định.</p>\n<p>Vậy đâu là vấn đề khi chúng ta sử dụng <code class=\"language-text\">catch</code> mà ko làm gì cả. Vấn đề là chúng ta catch <strong>toàn bộ</strong> error mặc dù chúng ta không hề biết là có một error nào khác có thể xuất hiện trong <code class=\"language-text\">try</code> hay ko</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// custom.config.js</span>\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: Assignment to constant variable.</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu file <code class=\"language-text\">custom.config</code> của chúng ta mắc lỗi <code class=\"language-text\">TypeError: Assignment to constant variable</code> như trên, đoạn code load config sẽ vẫn chạy với default config như đã biết, vì nó bỏ qua luôn khi có lỗi trong file <code class=\"language-text\">custom.config.js</code>. </p>\n<pre class=\"language-diff\"><code class=\"language-diff\">const defaultConfig = { foo: 'bar' };\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">let customConfig = {};\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">try {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  customConfig = require(path.resolve(process.cwd(), 'custom.config'));\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">} catch (error) {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> // không có custom config thì cũng ok mà.\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">  if (error.code !== 'MODULE_NOT_FOUND') throw error;\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">}\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">const config = { ...defaultConfig, ...customConfig };</span></span></code></pre>\n<p>Kiểm tra <code class=\"language-text\">error.code</code> để đảm bảo chỉ bỏ qua các lỗi mà chúng ta thật sự không quan tâm, tình huống này là <code class=\"language-text\">MODULE_NOT_FOUND</code>, và <code class=\"language-text\">throw</code> một error cho các trường hợp khác.</p>\n<p>Có thể phân error ra làm 2 loại: <strong>operational error</strong> và <strong>programmer error</strong>. Operational error là các lỗi từ bên ngoài chương trình chúng ta viết, code chúng ta vẫn chạy, nhưng lỗi chúng ta ko kiểm soát được như gọi API bị fail. Programmer error là kiểu lỗi do chúng ta gây ra bên trong source, đọc <a href=\"https://www.joyent.com/node-js/production/design/errors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bài này để hiểu chi tiết hơn</a></p>\n<p>Với kiểu operational error, chúng ta có những cách tiếp cận sau</p>\n<ul>\n<li>catch lại error và thực hiện lại thao tác đó lần nữa</li>\n<li>catch error mà ko làm gì cả, hoặc hiển thị một thông báo đến user</li>\n<li>Ko catch luôn, hoặc throw một custom error</li>\n</ul>\n<p>Với lỗi với network request, chúng ta có thể dựa vào <code class=\"language-text\">error.code</code> trả về để lựa chọn thao tác tiếp theo muốn thực hiện.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// notifications.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> fetchNew <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./notification-service'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notifications <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\">Network Error</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token maybe-class-name\">Sentry</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">withScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">scope</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      scope<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setLevel</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Sentry</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Severity</span></span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Info</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token maybe-class-name\">Sentry</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">captureException</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Ở ví dụ trên, chúng ta ko thông báo gì cả cho user mà log lại lỗi đó trong <a href=\"https://sentry.io/welcome/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sentry</a> (Sẵn tiện giới thiệu luôn, Sentry là một tool để lưu lại các lỗi nếu có xảy ra trên app, khá hữu ích nhé)</p>\n<p>Nếu chúng ta có file <code class=\"language-text\">article-service.js</code> chứa function thực hiện request API, rải rác ở nhiều nơi khác trong source, sử dụng function này của <code class=\"language-text\">article-service.js</code>, chúng ta sẽ ko đặt catch error ở trong <code class=\"language-text\">article-service.js</code> mà đặt ở nơi đang sử dụng</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// article-service.js</span>\n<span class=\"token keyword module\">import</span> api <span class=\"token keyword module\">from</span> <span class=\"token string\">'./api'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> api<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> filter<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'article'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// article-listing.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> list <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./article-service'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> articles <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">renderArticles</span><span class=\"token punctuation\">(</span>articles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token maybe-class-name\">Sentry</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">withScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">scope</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    scope<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setLevel</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Sentry</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Severity</span></span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Warning</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token maybe-class-name\">Sentry</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">captureException</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// hiển thị thông báo</span>\n  <span class=\"token comment\">// để user biết có lỗi chứ</span>\n  <span class=\"token function\">renderError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Tóm lại, một điều quan trọng nhất cần nhớ sau bài này là <strong>đừng bao giờ dùng try...catch mà bỏ trống phần catch</strong></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://markus.oberlehner.net/blog/try-catch-the-right-way/\">try...catch: The Right Way</a></p>\n","cover_image":"","related":[{"id":"431b04c69be9d0d7ae9bcf9c672a6d4f","path":"/cach-su-dung-ref-trong-react/","title":"Cách sử dụng ref trong React","desc":"Công dụng của ref là để truy cập đến DOM thật trong React, một vài tính huống sử dụng và dùng ref"},{"id":"0f44ee174018384de200da37b4aac6d7","path":"/huong-dan-su-dung-cong-cu-de-check-contrast-trong-chrome/","title":"Hướng dẫn sử dụng công cụ để check contrast trong Chrome","desc":"Tip siêu ngắn để kiểm tra contrast có hợp nhãn với Chrome không"},{"id":"34e1a6e4e7dac657edca4c9832d737dc","path":"/su-dung-tabindex/","title":"Sử dụng tabindex","desc":"Mặc định thứ tự tab theo vị trí của DOM rất hữu dụng, tuy nhiên có trường hợp chúng ta sẽ muốn thay đổi thứ tự tab này. Cùng nghiên cứu tabindex để set thứ tự tab"},{"id":"d9e884765bb027ba864e4261490d0bd0","path":"/nhung-cach-thay-doi-gia-tri-fill-cua-svg-khi-hover/","title":"Những cách thay đổi giá trị fill của SVG khi hover","desc":"Chúng ta có thể định dạng file SVG một cách dễ dàng bằng CSS, chúng ta sẽ tận dụng CSS để thay đổi định dạng khi hover chuột lên. Tất cả những cách có thể làm sẽ được liệt kê trong bài viết này."},{"id":"279a88e44a33e49f28daacde42d9d2c6","path":"/can-ban-cach-su-dung-media-query/","title":"Căn bản cách sử dụng media query","desc":"Những kiến thức căn bản bắt buộc nhất để bạn làm responsive"},{"id":"02a02d68e2737698423d912c23786ac2","path":"/mot-so-cach-viet-su-dung-trong-react/","title":"Một số cách viết sử dụng trong React","desc":"Tổng hợp các cách làm phổ biến trong React"},{"id":"83955bb941ea7b4b3979e074ed210fcf","path":"/5-cach-viet-hay-su-dung-trong-react/","title":"5 cách viết hay sử dụng trong React","desc":"Điểm qua 6 React Pattern hay gặp trong React"},{"id":"1b2de7c708c340c3c39f2150b714a897","path":"/4-ung-dung-cua-array-from/","title":"4 ứng dụng của Array.from","desc":"Vài ứng dụng nhỏ của hàm Array.from"},{"id":"3cbd2588e65e7ca4b1ebac17d5d87485","path":"/mot-so-ung-dung-cua-middleware/","title":"Một số ứng dụng của middleware","desc":"Tiếp theo bài trước về middleware, ứng dụng với các trường hợp thực tế"},{"id":"b1851cc1980bb093ae4f97c8d1a1d08d","path":"/su-dung-react-hook-effect/","title":"Sử dụng React Hook Effect","desc":"Bài này mình contribute cho http://vi.reactjs.org về cách sử dụng React Hook Effect"}]}},"context":{}}