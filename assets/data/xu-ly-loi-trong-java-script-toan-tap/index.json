{"hash":"039ed75c2c8087ca7192f8a19b292859b6e783d9","data":{"post":{"title":"Xử lý lỗi trong JavaScript toàn tập","path":"/xu-ly-loi-trong-java-script-toan-tap/","date":null,"timeToRead":2,"tags":[],"desc":"","content":"<h1 id=\"xử-lý-lỗi-trong-javascript-toàn-tập\"><a href=\"#x%E1%BB%AD-l%C3%BD-l%E1%BB%97i-trong-javascript-to%C3%A0n-t%E1%BA%ADp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xử lý lỗi trong JavaScript toàn tập</h1>\n<h3 id=\"một-vài-lý-thuyết-căn-bản\"><a href=\"#m%E1%BB%99t-v%C3%A0i-l%C3%BD-thuy%E1%BA%BFt-c%C4%83n-b%E1%BA%A3n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một vài lý thuyết căn bản</h3>\n<p>Tuy theo tình huống, khi gặp lỗi có thể chúng ta sẽ <strong>stop luôn ứng dụng</strong>, hoặc <strong>thông báo đến user về lỗi đó</strong>, ví dụ như lỗi về</p>\n<ul>\n<li>Mở một file không tồn tại</li>\n<li>Lỗi mạng</li>\n<li>Người dùng nhập giá trị không hợp lệ</li>\n</ul>\n<p>Trong Javascript cái gì cũng có thể quy về <code class=\"language-text\">object</code>, lỗi cũng vậy, chúng ta có thể khởi tạo một object error với các thông tin cần thiết, rồi <code class=\"language-text\">throw</code> nó trong code</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> err <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Có lỗi rồi ba má ơi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// hoặc không cần new luôn</span>\n<span class=\"token keyword\">const</span> err <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Có lỗi nữa nè\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Object được khởi tạo này sẽ có 3 thuộc tính </p>\n<ul>\n<li><code class=\"language-text\">message</code>: string mang nội dung lỗi</li>\n<li><code class=\"language-text\">name</code>: kiểu lỗi</li>\n<li><code class=\"language-text\">stack</code>: một <em>stack</em> để trace các hàm đã thực thi trước đó</li>\n</ul>\n<p>Tạo mỗi lỗi với <code class=\"language-text\">name</code> là <code class=\"language-text\">TypeError</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> wrongType <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong Type rồi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nwrongType<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Wrong Type rồi\"</span>\nwrongType<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"TypeError\"</span></code></pre>\n<p>Nói về error <strong>type</strong> chúng ta có các kiểu sau</p>\n<ul>\n<li>Error</li>\n<li>EvalError</li>\n<li>InternalError</li>\n<li>RangeError</li>\n<li>ReferenceError</li>\n<li>SyntaxError</li>\n<li>TypeError</li>\n<li>URIError</li>\n</ul>\n<p>Phần lớn khi chúng ta code chỉ hay sử dụng 2 loại phổ biến nhất là <code class=\"language-text\">Error</code> và <code class=\"language-text\">TypeError</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Jules\"</span><span class=\"token punctuation\">;</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">\"Caty\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// TypeError: Assignment to constant variable.</span></code></pre>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">wrong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">wrong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// SyntaxError: await is only valid in async function</span></code></pre>\n<h3 id=\"exception\"><a href=\"#exception\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Exception</h3>\n<p>Phần lớn chúng ta vẫn nghĩ error và exception là một. Nhưng thực tế nó là 2, <strong>một object error chỉ trở thành một exception khi chúng ta <code class=\"language-text\">throw</code> nó</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> wrongType <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong type given, expected number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">throw</span> wrongType<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Viết tắt</span>\n<span class=\"token keyword\">throw</span> <span class=\"token known-class-name class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong type given, expected number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// hoặc</span>\n<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong type given, expected number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Trong JS chúng ta có thể throw gần như mọi thứ chứ không riêng gì object error</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">throw</span> <span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">throw</span> <span class=\"token number\">33</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">throw</span> <span class=\"token string\">\"Error!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">throw</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>Tuy nhiên không khuyến khích làm vậy</strong>, chỉ nên throw object Error cho đúng bài</p>\n<p> Khi một exception được <code class=\"language-text\">throw</code> nó sẽ đi theo cơ chế <em>bong bóng bay</em>  (bubble up hay propagate, elevator, tùy cách gọi từng người), chỉ khi nào ở tầng trên có ai đó catch lại thì nó sẽ dừng không thì cứ bây lên tiếp</p>\n","cover_image":"","related":[{"id":"e5eecb851393068228a0e59c9a8662b2","path":"/xu-ly-loi-neu-co-xay-ra-trong-javascript/","title":"Xử lý lỗi nếu có xảy ra trong javascript","desc":"Lỗi nếu có xảy ra, phải được xử lý hết tránh để chết nguyên ứng dụng. Điểm lại một vài cách xử lý lỗi trong javascript"},{"id":"c96e777ca9db4c279c1d03ebd80ea3f8","path":"/xu-ly-tap-du-lieu-lon-trong-react/","title":"Xử lý tập dữ liệu lớn trong React","desc":"Tình huống: bạn có một table với rất nhiều dữ liệu đổ vào, nếu bạn thấy component đó render chậm trên màn hình, đó là lúc cần tái cấu trúc"},{"id":"a3122abaeff5dd1ef038b80398ff52d3","path":"/10-nguyen-ly-lap-trinh-nen-tang-ma-lap-trinh-vien-nao-cung-can-biet/","title":"10 nguyên lý lập trình nền tảng mà lập trình viên nào cũng cần biết","desc":"Nhớ thời đại học quá nên ôn lại kiến thức vở lòng mấy bạn ơi"},{"id":"1919bceb9000f1bff00371b6a3dfd527","path":"/do-phuc-tap-cua-thuat-toan/","title":"Độ phức tạp của thuật toán","desc":"Một cách chuẩn hóa trong ngành lập trình để đánh giá độ phức tạp của giải thuật"}]}},"context":{}}