{"hash":"99e40fc31a30de3332c68fee139e44329976dab8","data":{"post":{"title":"Hồi 2: ES6 căn bản - Arrow Function","path":"/2016-11-16-chuong-2-es6-can-ban-arrow-function/","date":"2016-11-16","timeToRead":2,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"}],"desc":"Hồi 2 trong series ES6 căn bản, nói về Arrow Function","content":"<p>Trong Series này</p>\n<ol>\n<li><a href=\"/2016-11-15-chuong-1-es6-can-ban\">Nâng cấp cho Object</a></li>\n<li><a href=\"/2016-11-16-chuong-2-es6-can-ban-arrow-function/\">Arrow function</a></li>\n<li><a href=\"/2016-11-17-phan-3-es6-can-ban-assignment-destructuring\">Assignment Destruction</a></li>\n<li><a href=\"/2016-11-18-phan-4-es6-can-ban-rest-parameters-va-spread-operator\">Rest parameters và spread operator</a></li>\n<li><a href=\"/2016-11-19-phan-5-es6-can-ban-template-literals\">Template literals</a></li>\n<li><a href=\"/2016-11-20-phan-6-es6-can-ban-khai-bao-let-const\">Khai báo biến với let và const</a></li>\n<li><a href=\"/2016-11-21-phan-7-es6-can-ban-classes\">Căn bản class</a></li>\n</ol>\n<!-- MarkdownTOC -->\n<ul>\n<li>Khai báo</li>\n<li>Lexical scoping là gì</li>\n<li>Một số dạng khai báo</li>\n<li>Nên và không nên</li>\n</ul>\n<!-- /MarkdownTOC -->\n<h1 id=\"khai-báo\"><a href=\"#khai-b%C3%A1o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khai báo</h1>\n<p>Trước đây để khai báo hàm trong javascript</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">paramters</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n <span class=\"token comment\">//body</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Hoặc, tạo một hàm ẩn (anonymous function), sau đó gán hàm này cho biến, key của object</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">mystyle</span> <span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">paramters</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n <span class=\"token comment\">//body</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Bắt đầu từ ES6 ta có thêm một cách để viết một hàm không có tên (hàm ẩn), có thể viết hàm trên bằng cách mới</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">mystyle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">paramters</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">//body</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Bỏ từ khóa <code class=\"language-text\">function</code>, thêm vào <code class=\"language-text\">=&gt;</code>  sau <code class=\"language-text\">paramater</code>. Sự khác biệt của <em>arrow function</em> là nó <strong>không được phép đặt tên</strong> và là dạng <code class=\"language-text\">lexical scoping</code></p>\n<h1 id=\"lexical-scoping-là-gì\"><a href=\"#lexical-scoping-l%C3%A0-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lexical scoping là gì</h1>\n<p>Từ khóa <code class=\"language-text\">this</code> và <code class=\"language-text\">argument</code> điều trỏ về đối tượng cha bự nhất. Ví dụ cho dễ hiểu cái nha. Chúng ta có đối tượng <code class=\"language-text\">timer</code> với biến đếm <code class=\"language-text\">second</code> và phương thức <code class=\"language-text\">start</code>. Khi chạy <code class=\"language-text\">timer</code> một vài giây, log giá trị <code class=\"language-text\">seconds</code> hiện tại</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> timer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n seconds<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">seconds</span><span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\ntimer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setTimer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">.</span><span class=\"token property-access\">seconds</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">3500</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// result -3</span></code></pre>\n<p>Nếu hàm truyền vào cho <code class=\"language-text\">setInterval</code> là một hàm bình thường nó sẽ không hiểu <code class=\"language-text\">this.second</code> là thằng nào, ta phải khai báo thêm <code class=\"language-text\">self = this</code> ở trên <em>timer</em>, từ khóa this không còn đi theo ngữ cảnh hiện tại mà nó sẽ tham chiếu lên trên.</p>\n<h1 id=\"một-số-dạng-khai-báo\"><a href=\"#m%E1%BB%99t-s%E1%BB%91-d%E1%BA%A1ng-khai-b%C3%A1o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một số dạng khai báo</h1>\n<p>Nếu <em>arrow function</em> chỉ chứa một <em>parameter</em> duy nhất, bỏ luôn dấu `()<code class=\"language-text\"></code> viết gì cho dễ đọc</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">double</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword control-flow\">return</span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Với hàm mà return 1 dòng như vậy có thể rút ngắn lại</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">double</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span> <span class=\"token arrow operator\">=></span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span></code></pre>\n<h1 id=\"nên-và-không-nên\"><a href=\"#n%C3%AAn-v%C3%A0-kh%C3%B4ng-n%C3%AAn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nên và không nên</h1>\n<p>ES6 không có nghĩa là cái nào cũng tốt hơn ES5, <em>arrow function</em> có trường hợp không nên sử dụng. Ví dụ nếu hàm lớn với vài chục dòng code, thay thế bằng <em>arrow function</em> là điều không nên làm, nên nhớ <em>arrow function</em> không được phép có tên, trong mọi trường hợp hàm có tên đi kèm luôn dễ maintain hơn.</p>\n<p>Arrow function tuyệt vời khi cần một hàm không tên thực hiện một vài thao tác đơn giản. Thí dụ kết hợp với những hàm như .map, .filter, .reduce</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token arrow operator\">=></span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">value</span> <span class=\"token arrow operator\">=></span> value <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">value</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> value <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></code></pre>\n","cover_image":"","related":[{"id":"1340104aa5d848ae6e871dca2ffcd1b5","path":"/2016-11-21-phan-7-es6-can-ban-classes/","title":"Hồi 7: ES6 căn bản - Classes","desc":"Hồi 7 trong series ES6 căn bản, Javascript vốn là ngôn ngữ prototype, class không phải là cái gì đó mới mẻ trong javascript"},{"id":"cad93a1c7d14fac9d3f26a77aff31d1d","path":"/2016-11-19-phan-5-es6-can-ban-template-literals/","title":"Hồi 5: ES6 căn bản - Template literals","desc":"Hồi 5 trong series ES6 căn bản, nói về Template literals, một nâng cấp lớn cho string"},{"id":"1033f1efca1a045faea137fd0c0a873d","path":"/2016-11-17-phan-3-es6-can-ban-assignment-destructuring/","title":"Hồi 3: ES6 căn bản - Truy cập phần tử","desc":"Hồi 3 trong series ES6 căn bản, nói về Assignment Destructuring"},{"id":"640a57b49950fe739bdc6e77b9cc51f4","path":"/2016-11-18-phan-4-es6-can-ban-rest-parameters-va-spread-operator/","title":"Hồi 4: ES6 căn bản - Rest Parameters và Spread Operator","desc":"Hồi 4 trong series ES6 căn bản, nói về Rest Parameters và Spread Operator"}]}},"context":{}}