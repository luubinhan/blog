{"hash":"96c8dea8aa6d6e6f9c0c563edfb92dcd7958f442","data":{"post":{"title":"Giải thích peerDependencies","path":"/2024-12-27-giai-thich-peer-dependencies/","slug":"2024-12-27-giai-thich-peer-dependencies","date":"2024-12-27","timeToRead":2,"tags":[{"id":"hoc-thuat","title":"hoc-thuat","path":"/tag/hoc-thuat/"},{"id":"medium","title":"medium","path":"/tag/medium/"},{"id":"javascript","title":"javascript","path":"/tag/javascript/"}],"desc":"Cùng tìm hiểu công dụng của peerDependencies","content":"<p>Trước tiên chúng ta cần hiểu vì sao peerDependencies lại tồn tại. Ví dụ chúng ta có thư viện <code class=\"language-inline-text\">react-datapicker</code> để sử dụng thư viện này, chúng ta sẽ cần có react và react-dom, vì nó build bằng React! Tác giả của thư viện <code class=\"language-inline-text\">react-datepicker</code> làm thế nào để báo với chúng ta là thư viện của họ cần dùng react nếu họ ko thích đặt tên có prefix là react? Họ khai báo nó bên trong <code class=\"language-inline-text\">peerDependencies</code></p>\n<p>Câu hỏi là vì sao ko khai báo luôn trong <code class=\"language-inline-text\">dependencies</code> mà là <code class=\"language-inline-text\">peerDependencies</code>?</p>\n<p>Khi khai báo trong <code class=\"language-inline-text\">dependencies</code> thì version react sẽ phải chính xác là version đã khai báo. Và tác giả không <code class=\"language-inline-text\">react-datepicker</code> không thể nào ép tất cả những người đang dùng thư viện phải dùng đúng version với <code class=\"language-inline-text\">react-datepicker</code> được, không những gì người ta sẽ còn cài rất nhiều thư viện khác, không thể nào ép buộc chuyện thống nhất một version như vậy được.</p>\n<p>Và nếu <code class=\"language-inline-text\">react-datepicker</code> khai báo <code class=\"language-inline-text\">dependencies</code> là version 16.9.0 và chúng ta thì đang dùng react 16.20.1 thì npm sẽ cài cả 2 version react luôn</p>\n<p>Đây là một vấn đề rất phổ biến trong việc quản lý version một npm package, trong ví dụ trên chúng ta có 3 vấn đề sau</p>\n<ul>\n<li>React dependencies bị double size</li>\n<li>Hooks rule sẽ ‘chửi’ vào mặt chúng ta khi chúng sử dụng 2 version react</li>\n<li>react-datepicker có thể chỉ chạy được với một version nhất định nào đó, sử dụng một API nào đó chỉ có trong 16.9.0</li>\n</ul>\n<p>Có một vấn đề quan trọng chúng ta cần đề cập trước khi đi đến hướng giải quyết là <code class=\"language-inline-text\">react-datepicker</code> hoàn toàn chạy tốt với các version > 16.9.0, thậm chí là 17, 19</p>\n<p>Giờ thì chúng ta nói đến <code class=\"language-inline-text\">peerDependencies</code>. Khi chạy <code class=\"language-inline-text\">npm install</code> nó ko cài đặt package khai báo bên trong <code class=\"language-inline-text\">peerDependencies</code> , trong ví dụ là react, thư viện <code class=\"language-inline-text\">react-datepicker</code> nó sẽ dùng đồ có sẵn trong <code class=\"language-inline-text\">&lt;project>/node_modules</code> , tức là package react với version mà chúng ta đã tự khai báo, chứ ko sử dụng trong <code class=\"language-inline-text\">&lt;project >/node_modules/react-datepicker/node_modules</code></p>\n<p>Và để an toàn nhất, người viết thư viện <code class=\"language-inline-text\">date-picker</code> cũng thường sẽ khai báo dạng version như sau</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token string\">\"peerDependencies\"</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token string-property property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\">=16.8.0 || &lt; 18\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string-property property\">\"react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\">=16.8.0 || &lt; 18\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Bằng cách trên, khi chung ta chạy <code class=\"language-inline-text\">npm i</code> nó sẽ quăng ngay cảnh báo về việc không tương thích nếu có</p>\n<p>Đứng về phía người viết library <code class=\"language-inline-text\">react-datepicker</code> họ vẫn phải khai báo <code class=\"language-inline-text\">react</code> và <code class=\"language-inline-text\">react-dom</code> trong <code class=\"language-inline-text\">devDependencies</code></p>\n<p>Nói một cách ngắn gọn nhất, <code class=\"language-inline-text\">peerDependencies</code> chúng ta phải tự cài trong app, library nó ko tự cài</p>\n","cover_image":"","related":[{"id":"953461ac7b5f103c39aa23017e3fee49","path":"/2018-07-17-huong-dan-giai-thich-javascript-reactivity/","title":"Giải thích Javascript Reactivity","desc":"Rất nhiều thư viện Javascript như Angular, React, Vue sử dụng Reactivity, hiểu được reactivity là gì và cách nó chạy sẽ giúp nâng cao kỹ năng lập trình"},{"id":"d7d04c8ef3b2aac0d4a10de4fabfad03","path":"/2017-10-20-react-lifecycle-la-gi/","title":"Giải thích React Component Lifecycle","desc":"Tìm hiểu vòng đời của một Component React, khi nào và sử dụng ra sao"},{"id":"e5dea58f99d146591e0f256289e6099c","path":"/2018-05-07-huong-dan-async-await-giai-thich-vi-du/","title":"Giải thích async/await của javascript","desc":"Hướng dẫn các bạn nắm vững async/await trong javascript, kèm ví dụ cụ thể"},{"id":"5e9473636b101715b732622726dcb4d4","path":"/2018-04-17-huong-dan-giai-thich-observer-pattern-trong-javascript/","title":"Giải thích Observer Pattern trong javascript","desc":"Observer là một pattern khá phổ biến trong javascript, bài giải thích ngắn gọn về pattern này"}]}},"context":{}}