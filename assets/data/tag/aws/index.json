{"hash":"e1532d0aebaf3bcf47bbf8a08cbde03cecbbc9cf","data":{"tag":{"title":"aws","belongsTo":{"edges":[{"node":{"id":"28b28757469522f8f7ff7248ce3b6343","title":"Hướng dẫn delegate domain với AWS","path":"/2024-04-05-huong-dan-delegate-domain-trong-aws/","date":"2024-04-05","timeToRead":1,"desc":"Trong bài hôm nay chúng ta cùng tìm hiểu cách delegate một domain trong AWS","content":"<p>Trước tiên chúng ta cần biết delegate domain sẽ giải quyết bài toán gì</p>\n<p>Mình lấy ví dụ, Công ty Furfel đang sở hữu tên miền <code class=\"language-inline-text\">furfel.net</code>, là trang web chính của công ty\nCông ty thuê công ty Dev phát triển thêm một số dịch vụ trên tên miền con <code class=\"language-inline-text\">dev.furfel.net</code>\nCông ty Furfel sẽ trao toàn bộ quyền quyết định trên tên miền <code class=\"language-inline-text\">dev.furfel.net</code> cho công ty Dev, và chỉ nắm quyền trên tên miền cha là <code class=\"language-inline-text\">furfel.net</code></p>\n<p>Đây là bài toán mà <strong>delegate domain</strong> sẽ giải quyết</p>\n<p>Để delegate domain trong AWS thì kiến trúc tổng quát sẽ như hình bên dưới</p>\n<p><img src=\"https://i.imgur.com/w5fQhyQl.png\"></p>\n<p>Bên trong Route 53, chúng ta sẽ tạo một <strong>Public Hosted Zone</strong>, lưu ý là <strong>public</strong> với tên <strong>giống hoàn toàn với domain chính</strong>, theo ví dụ sẽ là <code class=\"language-inline-text\">furfel.net</code></p>\n<p><img src=\"https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fael6xqiv8gyd9rnk83g1.jpg\" alt=\"Public Hosted Zone furfel.net\"></p>\n<p>Sau khi tạo xong hosted zone <code class=\"language-inline-text\">furfel.net</code>, chúng ta mang giá trị NS (name server) của hosted zone vừa tạo đưa cho công ty đang nắm quyền trên tên miền <code class=\"language-inline-text\">furfel.net</code></p>\n<p><img src=\"https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fael6xqiv8gyd9rnk83g1.jpg\" alt=\"Copy giá trị Nameserver của publich hosted zone vừa tạo\"></p>\n<p>Công ty Furfel sẽ vào phần quản lý tên miền và đưa toàn bộ giá trị nameserver vào như một <em>external name server</em> là xem như đã delegate xong sub domain cho công ty Dev</p>\n<p><img src=\"https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ffuq5hfcya9thvarrizn9.jpg\" alt=\"Đưa giá trị NS vào trong tên miền chính\"></p>\n<p>Công ty Dev để thêm tên miền <code class=\"language-inline-text\">dev.furfel.net</code>, việc cần làm là tạo thêm một public hosted zone mới, với tên <code class=\"language-inline-text\">dev.furfel.net</code></p>\n<p><img src=\"https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ftwj6kpdp0vym6edjmmw9.jpg\" alt=\"Public Hosted Zone dev.furfel.net\"></p>\n<p>Copy toàn bộ giá trị NS của hosted zone <code class=\"language-inline-text\">dev.furfel.net</code>, rồi quay lại hosted zone <code class=\"language-inline-text\">furfel.net</code></p>\n<p><img src=\"https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdfjgs3ryjwnvszvwghzb.jpg\" alt=\"NS của dev.furfel.net\"></p>\n<p>Thêm một record mới tên dev, type là NS và paste giá trị Nameserver vừa copy</p>\n<p><img src=\"https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F9qg56ridyrk3192mk9sn.jpg\" alt=\"Thêm record mới tên dev bên trong hosted zone dev.furfel.net\"></p>\n","cover_image":""}},{"node":{"id":"9f8cb439930920e69ea8b3a3edab670c","title":"Lưu ý khi sử dụng AWS Lambda để tránh mất tiền","path":"/2023-08-04-tranh-mat-tien-voi-lambda/","date":"2023-08-04","timeToRead":5,"desc":"Khi chúng ta sử dụng đúng lúc đúng nơi, những dịch vụ serverless như Lambda sẽ rẻ hơn so với hệ thống bình thường, chúng ta vẫn nghe quảng cáo nhan nhản serverless thì xài nhiêu trả nhiêu, an toàn hơn, khả năng mở rộng và phục hồi tốt hơn cách truyền thống, có thật sự đúng như quảng cáo không?","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#kh%C3%B4ng-%C4%91%E1%BB%83-%C3%BD-chi-ph%C3%AD-logging-v%C3%A0-monitor\">Không để ý chi phí logging và monitor</a></li>\n<li><a href=\"#%C4%91%E1%BB%8Dc-k%E1%BB%B9-h%C6%B0%E1%BB%9Bng-d%E1%BA%ABn-s%E1%BB%AD-d%E1%BB%A5ng-tr%C6%B0%E1%BB%9Bc-khi-d%C3%B9ng\">Đọc kỹ hướng dẫn sử dụng trước khi dùng</a></li>\n<li><a href=\"#kh%C3%B4ng-ch%E1%BB%8Bu-b%E1%BA%ADt-th%C3%B4ng-b%C3%A1o\">Không chịu bật thông báo</a></li>\n<li><a href=\"#lambda-g%E1%BB%8Di-lambda-theo-c%C6%A1-ch%E1%BA%BF-synchronous\">Lambda gọi Lambda theo cơ chế Synchronous</a></li>\n<li><a href=\"#kh%C3%B4ng-cache\">Không cache</a></li>\n<li><a href=\"#c%E1%BA%A5p-qu%C3%A1-nhi%E1%BB%81u-t%C3%A0i-nguy%C3%AAn\">Cấp quá nhiều tài nguyên</a></li>\n<li><a href=\"#ki%E1%BA%BFn-tr%C3%BAc-c%E1%BB%A7-chu%E1%BB%91i\">Kiến trúc củ chuối</a></li>\n</ul>\n<!-- /TOC -->\n<p>Vâng đúng nhưng không phải trong mọi hoàn cảnh, chiếc chìa khóa vạn năngcó thể giải quyết mọi yêu cầu hệ thống. Khi thiết kế một hệ thống chúng ta phải cân nhắc đến việc cho nó tiến hóa theo nhu cầu, cũng giống như những phần mềm chúng ta viết ra điều phải thay đổi để thích nghi và đáp ứng nhu cầu mới của khách hàng</p>\n<p>Chúng ta cùng đi qua một vài lỗi hay gặp và cách khắc phục để tiết kiệm chi phí tối đa</p>\n<h2 id=\"không-để-ý-chi-phí-logging-và-monitor\"><a href=\"#kh%C3%B4ng-%C4%91%E1%BB%83-%C3%BD-chi-ph%C3%AD-logging-v%C3%A0-monitor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Không để ý chi phí logging và monitor</h2>\n<p>Ghi log và monitor ứng dụng để có thể tìm lỗi và phát hiện nguyên nhân gây lỗi là bắt buộc, nhưng nó đi đôi với chi phí. AWS CloudWatch tính phí cả 2 phần ghi log và lưu trữ log</p>\n<p>Bạn sẽ ngạc nhiên khi phát hiện ra rằng chi phí cho CloudWatch đôi khi còn cao hơn cả cho Lambda và API Gateway</p>\n<p>Để giải quyết:</p>\n<ol>\n<li>Log <code class=\"language-inline-text\">INFO</code> hay <code class=\"language-inline-text\">ERROR</code> chỉ trên môi trường production</li>\n<li>Chỉ giữ log thật sự hữu ích nhất để debug trên production</li>\n<li>Lưu log trong 30 ngày là vừa đủ để debug mà không làm đội chi phí lưu trữ</li>\n</ol>\n<p>Nếu đã có log được lưu ở một bên thứ 3 khác có thể bỏ qua log CloudWatch</p>\n<h2 id=\"đọc-kỹ-hướng-dẫn-sử-dụng-trước-khi-dùng\"><a href=\"#%C4%91%E1%BB%8Dc-k%E1%BB%B9-h%C6%B0%E1%BB%9Bng-d%E1%BA%ABn-s%E1%BB%AD-d%E1%BB%A5ng-tr%C6%B0%E1%BB%9Bc-khi-d%C3%B9ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đọc kỹ hướng dẫn sử dụng trước khi dùng</h2>\n<p>Để khỏi “hết hồn” lúc nhận bill cuối tháng, chúng ta cần biết khi bật một tính năng lên sẽ phát sinh thêm những phụ phí, rất nhiều phí chỉ được áp dụng trong những điều kiện cụ thể. Ví dụ như chọn <em>provisioned concurrency</em> cho Lambda sẽ thêm một số phụ phí</p>\n<p><img src=\"https://lumigo.io/wp-content/uploads/2023/07/1_ER0It8JsAuL3D1ECFlUBog-768x349.jpg\"></p>\n<p>Đừng nóng vội hãy luôn nhớ chậm lại một nhịp rồi tìm hiểu cho đầy đủ trước khi muốn sử dụng một dịch vụ nào khác.</p>\n<h2 id=\"không-chịu-bật-thông-báo\"><a href=\"#kh%C3%B4ng-ch%E1%BB%8Bu-b%E1%BA%ADt-th%C3%B4ng-b%C3%A1o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Không chịu bật thông báo</h2>\n<p>Mọi người cũng hay quên dùng tính năng <em>billing alarm</em> của AWS. Một công cụ tuyệt vời để báo liền cho chúng ta để biết được những khoản chi chúng ta đã bỏ ra có vượt ngoài tầm kiểm soát không</p>\n<p>Cài đặt Billing Alarm nên là điều đầu tiên chúng ta cần làm khi sử dụng AWS trước khi mọi thứ ra vượt ra ngoài tầm kiểm soát.</p>\n<h2 id=\"lambda-gọi-lambda-theo-cơ-chế-synchronous\"><a href=\"#lambda-g%E1%BB%8Di-lambda-theo-c%C6%A1-ch%E1%BA%BF-synchronous\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lambda gọi Lambda theo cơ chế Synchronous</h2>\n<p>Một Lambda gọi một Lambda khác synchronous nghĩa là Lambda đầu nguồn sẽ <em>ngồi đợi</em> Lambda thứ 2 chạy xong trước khi nó tiếp tục chạy. Nó làm đội lên chi phí khá nhiều vì thời gian ngồi đợi vẫn bị tính phí, giống như lên xe taxi bạn ngồi đợi nhưng đồng hồ đếm tiền vẫn nhảy dù xe không chạy.</p>\n<p>Hãy luôn nhớ gọi Lambda asynchronous bất cứ ở đâu cho phép</p>\n<p><img src=\"https://lumigo.io/wp-content/uploads/2023/07/1__Z1-AG9GVnzRSQW_a77yYQ-768x334.png\"></p>\n<h2 id=\"không-cache\"><a href=\"#kh%C3%B4ng-cache\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Không cache</h2>\n<p>Caching là người bạn thân thiết, hay khắc cốt ghi tâm điều này, caching nghĩa là Lambda sẽ không cần gọi và làm gì cả, kết quả được trả thằng ngay từ API Gateway hay CloudFront. Bên cạnh đó ở ứng dụng có thể cân nhắc sử dụng thêm dịch vụ chuyên cache như ElastiCache hay Memento, hay DynamoDB Accelerator</p>\n<p><img src=\"https://lumigo.io/wp-content/uploads/2023/07/0_9V50W4A0o6-r7bce-768x329.png\"></p>\n<h2 id=\"cấp-quá-nhiều-tài-nguyên\"><a href=\"#c%E1%BA%A5p-qu%C3%A1-nhi%E1%BB%81u-t%C3%A0i-nguy%C3%AAn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cấp quá nhiều tài nguyên</h2>\n<p>Cấp quá nhiều memory cho Lambda cũng là một lỗi hay mắc. Lambda được tính phí theo 2 tiêu chi: lượng memory đã sử dụng và thời gian chạy của hàm.</p>\n<p>Câu hỏi là cấp bao nhiêu cho đủ? Công cụ <a href=\"https://github.com/alexcasalboni/aws-lambda-power-tuning\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lambda Power Tuning</a> sẽ giúp chúng ta xác định lượng memory cần thiết để cân bằng giữa chi phí và hiệu năng</p>\n<p><img src=\"https://lumigo.io/wp-content/uploads/2023/07/0_V70C8Qw83OYgW5FW.png\"></p>\n<h2 id=\"kiến-trúc-củ-chuối\"><a href=\"#ki%E1%BA%BFn-tr%C3%BAc-c%E1%BB%A7-chu%E1%BB%91i\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kiến trúc củ chuối</h2>\n<p>Kiến trúc mà củ chuối quá thì hậu quả là nhản tiền, vừa tốn chi phí, hiệu năng không tối ưu và lại còn khó vận hành bảo trì</p>\n<p>AWS có rất nhiều service để thực hiện gửi nhận message, như SNS, SQS, EventBridge, Kinesis, ưu nhược điểm là khác nhau và phải hiểu để sử dụng cho đúng mục đích, không khéo chúng ta là đi lấy giao chặt thịt heo đi giết kiến</p>\n<p><img src=\"https://lumigo.io/wp-content/uploads/2023/07/1_WQOGHnPyWMfVIR3yO3D0zA-768x485.jpg\"></p>\n<p>Tương tự, API Gateway cũng tốn khá khá tiền so với ALB nhưng nó có nhiều đồ chơi vượt trội hơn, tiền nào của đó thôi, liệu cơm gấp mắm</p>\n<p><img src=\"https://lumigo.io/wp-content/uploads/2023/07/1_gpJi-nd7tx8etGi0nvKR2A-768x383.png\"></p>\n<p>Mọi sai làm điều là một cơ hội để học hỏi, nên không sợ sai chỉ sợ không học được gì từ những gì mình đã làm sai. Chúc các bạn có một cuộc chơi đỡ tốn tiền hơn trên AWS</p>\n<p><a href=\"https://lumigo.io/blog/save-money-on-serverless-common-costly-mistakes-and-how-to-avoid-them/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Save money on Serverless: common costly mistakes and how to avoid them</a></p>\n","cover_image":""}},{"node":{"id":"bfa175b4ea3e9a150e447b42a8510c43","title":"Giới thiệu maximum concurrency của Lambda khi sử dụng với SQS","path":"/2023-01-21-gioi-thieu-max-concurrency-lambda-sqs/","date":"2023-01-21","timeToRead":1,"desc":"Khi một SQS gọi lambda function chúng ta có thể quyết định số lượng tối đa concurrency của Lambda","content":"<h2 id=\"giới-thiệu\"><a href=\"#gi%E1%BB%9Bi-thi%E1%BB%87u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giới thiệu</h2>\n<p>Với SQS standard, Lambda sẽ <em>poll</em> message trên queue, lúc đầu khởi tạo 5 concurrency, khi message trên SQS tăng lên, Lambda tiếp tục tăng số lượng concurrency lên để đủ đáp ứng, tối đa <em>1000</em></p>\n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2023/01/11/Lambda-processing-standard-SQS-queues.png\"></p>\n<p>Chi phí sẽ đội lên khi số lượng concurrency tăng lên quá nhiều, để ngăn chặn, chúng ta có thể <em>đăng ký</em> số lượng <strong>reserved concurrency</strong> cho từng Lambda function.</p>\n<p>Khi nó chạm đến ngưỡng <strong>reserved concurrency</strong>, message sẽ được đẩy trả về queue, sau đó sẽ tiếp tục retry hoặc gửi vào DLQ (SQS Dead letter queue) nếu đã quá số lần retry cho phép</p>\n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2023/01/11/Lambda-reaching-reserved-concurrency-of-10.-1024x736.png\"></p>\n<p><strong>maximum concurrency</strong> cũng khá giống với reserved concurrency, chỉ khác là nó chỉ hoạt động khi <strong>nơi gọi Lambda là SQS</strong>, khi đạt tới ngưỡng <strong>maximum concurrency</strong> Lambda sẽ ngừng lấy message từ queue, nó sẽ linh động hơn nếu chúng ta cần điều chỉnh giới hạn concurrency theo nơi gọi</p>\n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2023/01/11/Maximum-concurrency-is-set-to-10-for-the-SQS-queue.-1024x604.png\"></p>\n<p>Ngoài việc hạn chế Lambda dùng hết <em>nguồn lực</em> để xử lý message trên queue, chừa <em>sức</em> để xử lý những công việc đến từ các nguồn khác, nó còn tránh được việc message bị đưa về queue và đưa vào DLQ không cần thiết</p>\n<h2 id=\"thiết-đặt\"><a href=\"#thi%E1%BA%BFt-%C4%91%E1%BA%B7t\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thiết đặt</h2>\n<p>Bên trong màn hình cấu hình <strong>Trigger</strong> của Lambda</p>\n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2023/01/11/Configuring-the-maximum-concurrency-for-an-SQS-trigger-in-the-console.-879x1024.png\"></p>\n<p>Nếu sử dụng CLI</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">aws lambda create-event-source-mapping --function-name my-function <span class=\"token function-name function\">--ScalingConfig</span> <span class=\"token punctuation\">{</span>MaxConcurrency<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span> --event-source-arn arn:aws:sqs:us-east-2:123456789012:my-queue</code></pre></div>\n<p>Nếu sử dụng Cloudformation</p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">Resources</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">MaxConcurrencyFunction</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> AWS<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Serverless<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Function\n    <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Handler</span><span class=\"token punctuation\">:</span> MyLambdaFunction\n      <span class=\"token key atrule\">Events</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">SQSEventFromMax</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> SQS\n          <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">Queue</span><span class=\"token punctuation\">:</span> MySQSQueueArn\n            <span class=\"token key atrule\">BatchSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n            <span class=\"token key atrule\">Enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n            <span class=\"token key atrule\">ScalingConfig</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">MaximumConcurrency</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span></code></pre></div>\n","cover_image":""}},{"node":{"id":"933ee8a3a9e6b3f4f384e1dc4805c7d1","title":"Phân biệt sự khác nhau giữa Identity và Resource Base Policy trong AWS IAM","path":"/2022-09-25-phan-biet-identity-va-resource-base-policy/","date":"2022-09-25","timeToRead":2,"desc":"Series một số kiến thức cần có để lấy chứng chỉ AWS","content":"<p><strong>IDENTITY</strong>-based policy gán cho <code class=\"language-inline-text\">user</code>, <code class=\"language-inline-text\">group</code>, hoặc <code class=\"language-inline-text\">role</code> (gọi chung là <code class=\"language-inline-text\">identity</code>). Chỉ định những quyền gì mà <em>identity</em> có thể làm\n<strong>RESOURCE</strong>-based policy gán cho <em>resource</em>, ví dụ như S3 bucket, SQS queue, VPC endpooint</p>\n<p>Trong tình huống <code class=\"language-inline-text\">user</code> <em>không được cấp quyền</em> trên S3 bucket A (không được cấp không đồng nghĩa với việc bị cấm), nhưng resource policy đang gán cho bucket A cho phép mọi user upload vào bucket này, thì <code class=\"language-inline-text\">user</code> vẫn có thể upload</p>\n<p>Ví dụ, có <em>identity policy</em></p>\n<ul>\n<li>User A: List, Read trên resource A</li>\n<li>User B: List, Read trên resource B, C</li>\n<li>User C: List, Read, Write trên Resource A,B,C</li>\n<li>User D: Không có policy nào cả</li>\n</ul>\n<p>Tiếp đó chúng ta có <em>resource policy</em></p>\n<ul>\n<li>Resource A: User A = (List, Read), User C = (List, Read)</li>\n<li>Resource B: User B = (List, Write), User D = (List, Read)</li>\n<li>Resouce C: User B = Denied Access, User D: Full Access</li>\n</ul>\n<p>Thì kết quả từ 2 policy khi áp dụng sẽ là</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>LIST</th>\n<th>READ</th>\n<th>WRITE</th>\n<th>DENIED</th>\n<th>FULL ACCCESS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>User A</td>\n<td>RES A</td>\n<td>RES A</td>\n<td>🚫</td>\n<td>🚫</td>\n<td>🚫</td>\n</tr>\n<tr>\n<td>User B</td>\n<td>RES B</td>\n<td>RES B</td>\n<td>RES B</td>\n<td>RES C</td>\n<td>🚫</td>\n</tr>\n<tr>\n<td>User C</td>\n<td>RES A,B,C</td>\n<td>RES A,B,C</td>\n<td>RES A,B,C</td>\n<td>🚫</td>\n<td>🚫</td>\n</tr>\n<tr>\n<td>User D</td>\n<td>RES B</td>\n<td>RES B</td>\n<td>🚫</td>\n<td>🚫</td>\n<td>RES C</td>\n</tr>\n</tbody>\n</table>\n<p>Khi <strong>identity</strong>-based policy kết hợp với <strong>Permission Boundary</strong>, lấy phần chung giữa hai tập</p>\n<p><img src=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/images/permissions_boundary.png\"></p>\n<p>Khi <strong>Resource</strong>-based policy kết hợp với <em>identity</em>-based policy và permission boundary, nó hơi ngoài lề một chút, lấy tất cả những phần chung giữa ba tập hợp cộng với tất cả những gì có trong resource-base policy</p>\n<p><img src=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/images/EffectivePermissions-rbp-boundary-id.png\"></p>\n<p>Khi kết hợp giữa tập <em>Service Control Policy</em>, <em>Permission boundary</em> và <em>identity-base policy</em>, chúng ta chỉ lấy phần tử chung của cả 3</p>\n<p><img src=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/images/EffectivePermissions-scp-boundary-id.png\"></p>\n<p>Tham khảo thêm <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"># Permissions boundaries for IAM entities</a></p>\n","cover_image":""}},{"node":{"id":"7ac3739a0f8e1c0f98a919794db694ac","title":"Lựa chọn giữa Redis và Memcached","path":"/2022-09-10-redis-vs-memcached/","date":"2022-09-10","timeToRead":1,"desc":"Series một số kiến thức cần có để lấy chứng chỉ AWS","content":"<p>Cả 2 điều rất dễ sử dụng và có chung công dụng tăng cường tốc độ, tuy nhiên có những khác biệt rất quan trọng chúng ta cần biết.</p>\n<p><strong>Redis</strong> và <strong>Memcached</strong> là 2 thư viện nguồn mở phổ biến khi cần kho dữ liệu <em>in-memory</em>. Memcached được thiết kế với định hướng đơn giản hóa nhất, trong khi Redis sẽ hỗ trợ nhiều tính năng và phù hợp với nhiều tình huống.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Memcached</th>\n<th>Redis</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Cấu trúc dữ liệu phức tạp</td>\n<td></td>\n<td>✅</td>\n</tr>\n<tr>\n<td>Multithreaded</td>\n<td>✅</td>\n<td></td>\n</tr>\n<tr>\n<td>Snapshots</td>\n<td></td>\n<td>✅</td>\n</tr>\n<tr>\n<td>Replication</td>\n<td></td>\n<td>✅</td>\n</tr>\n<tr>\n<td>Transaction</td>\n<td></td>\n<td>✅</td>\n</tr>\n<tr>\n<td>Pub/Sub</td>\n<td></td>\n<td>✅</td>\n</tr>\n<tr>\n<td>Geospatial</td>\n<td></td>\n<td>✅</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"chọn-memcached-nếu-chúng-ta-gặp-yêu-cầu\"><a href=\"#ch%E1%BB%8Dn-memcached-n%E1%BA%BFu-ch%C3%BAng-ta-g%E1%BA%B7p-y%C3%AAu-c%E1%BA%A7u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chọn Memcached nếu chúng ta gặp yêu cầu</h3>\n<ul>\n<li>Đơn giản hóa</li>\n<li>Chạy trên những <em>node</em> lớn với nhiều core, nhiều thread</li>\n<li>Khả năng scale out/in</li>\n<li>Thêm/xóa node theo yêu cầu</li>\n<li>Phân biệt dữ liệu giữa các <em>shard</em></li>\n</ul>\n<h3 id=\"chọn-redis-nếu-chúng-ta-gặp-yêu-cầu\"><a href=\"#ch%E1%BB%8Dn-redis-n%E1%BA%BFu-ch%C3%BAng-ta-g%E1%BA%B7p-y%C3%AAu-c%E1%BA%A7u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chọn Redis nếu chúng ta gặp yêu cầu</h3>\n<ul>\n<li>Nhiều kiểu dữ liệu phức tạp như <code class=\"language-inline-text\">string</code>, <code class=\"language-inline-text\">hash</code>, <code class=\"language-inline-text\">list</code>, <code class=\"language-inline-text\">set</code></li>\n<li>Cần phải <strong>sắp xếp</strong> dữ liệu</li>\n<li>Cố định <em>key</em> của store</li>\n<li>Cần tạo <strong>replicate</strong> để tối ưu việc đọc dữ liệu</li>\n<li>Tự động <strong>failover</strong> nếu node chính chết</li>\n<li>Cần <strong>pub/sub</strong></li>\n<li>Khả năng <strong>backup/restore</strong></li>\n</ul>\n","cover_image":""}},{"node":{"id":"9cbb507063e9cbfe980133e85fe58558","title":"AWS SCP là gì","path":"/2022-09-06-aws-scp-permission-boundary-iam/","date":"2022-09-06","timeToRead":2,"desc":"Series một số kiến thức cần có để lấy chứng chỉ AWS","content":"<h2 id=\"aws-scp-là-gì\"><a href=\"#aws-scp-l%C3%A0-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AWS SCP là gì</h2>\n<p>SCP là một tập hợp các rule <strong>cấp quyền</strong> sử dụng resource AWS trên tất cả account trong một AWS Organization</p>\n<h2 id=\"tại-sao-sử-dụng-scp\"><a href=\"#t%E1%BA%A1i-sao-s%E1%BB%AD-d%E1%BB%A5ng-scp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao sử dụng SCP</h2>\n<p>Khi một tổ chức có nhiều account cần quản lý, việc quản lý sẽ khó khăn nếu chỉ sử dụng IAM</p>\n<p>IAM cho phép chúng ta kiểm soát quyền hạn trên từng user và role của một account, nhưng nếu chúng ta cần quản lý quyền hạn trên nhiều role/nhiều account cùng lúc sẽ cần đến một công cụ bao quát hơn</p>\n<blockquote>\n<blockquote>\n<p>OU (Organizational Unit) = tổ hợp các account được quản lý, SCP sẽ áp các rule trên từng OU</p>\n</blockquote>\n</blockquote>\n<p><img src=\"https://towardsthecloud.com/wp-content/uploads/aws-org-scp-diagram-1024x928.webp\"></p>\n<p>Như hình trên OU sẽ thường được định danh như các đơn vị <em>ban ngành</em> trong một tổ chức, chúng ta có <em>đội</em> nằm trong <code class=\"language-inline-text\">Core</code>, đội làm <code class=\"language-inline-text\">Application</code>, đội <code class=\"language-inline-text\">Development</code></p>\n<blockquote>\n<p>Lưu ý chỉ có thể áp tối đa <strong>5</strong> SCP trên một root/OU/account</p>\n</blockquote>\n<p>Ví dụ khai báo một policy <em>deny</em> việc sử dụng AWS Shield service</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">\"Version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2012-10-17\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"Statement\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token property\">\"Sid\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Statement1\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token property\">\"Effect\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Deny\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token property\">\"Action\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"shield:*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token property\">\"Resource\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">]</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Vì SCP cũng có thể áp dụng trên root account, nên hãy rất cẩn thận và test kỹ trước khi áp dụng policy nào đó trên root account, tránh trường hợp mất các quyền quan trọng</p>\n<h2 id=\"scp-vs-permission-boundary-vs-iam-userrole-permission\"><a href=\"#scp-vs-permission-boundary-vs-iam-userrole-permission\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SCP vs Permission Boundary vs IAM User/Role Permission</h2>\n<p>SCP không phải chỉ để cấp quyền, nó còn có thể <em>deny</em>, có thể hình dung nó như một danh sách có thể làm gì và không được làm gì (<strong>Deny/Allow action</strong>) trên một nhóm đối tượng trong <strong>Organization</strong></p>\n<p><img src=\"https://cloudacademy.com/wp-content/uploads/2021/03/Screenshot-2021-03-05-at-16.55.23.png\"></p>\n<table>\n<thead>\n<tr>\n<th>SCP</th>\n<th>IAM Policies</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Dùng với OU</td>\n<td>Dùng với Principal (Ai)</td>\n</tr>\n<tr>\n<td>Không thay thế IAM Policy</td>\n<td>identity-base -> dùng với user, group, role. resource-base -> dùng với AWS resource như S3</td>\n</tr>\n<tr>\n<td>Dùng được với Root account</td>\n<td>Không dùng được với Root account</td>\n</tr>\n<tr>\n<td>Một account con chỉ có số quyền như account cha hoặc ít hơn</td>\n<td>Chỉ 1 trong 2: allow hoặc deny, nếu allow thì ngầm hiểu phần còn lại deny, nếu deny ngầm hiều phần còn lại allow</td>\n</tr>\n</tbody>\n</table>\n<p>Còn về Permission Boundaries nó được sử dụng cho user/role (một IAM entity), nó cấp <strong>maximum permission mà identity-base có thể cấp cho một IAM entity</strong>, nó không dùng được với <strong>resource-base</strong>, trong khi đó SCP có thể áp dụng trên cả identity-base và resource-base</p>\n<h2 id=\"tóm-tắt-thuật-ngữ\"><a href=\"#t%C3%B3m-t%E1%BA%AFt-thu%E1%BA%ADt-ng%E1%BB%AF\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tóm tắt thuật ngữ</h2>\n<table>\n<thead>\n<tr>\n<th>Thuật ngữ</th>\n<th>Giải thích</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>resource-base policy</td>\n<td>policy dùng với user, group, role</td>\n</tr>\n<tr>\n<td>identity-base policy</td>\n<td>policy dùng với các service của AWS</td>\n</tr>\n<tr>\n<td>Organization</td>\n<td>Đơn vị chúng ta khai bảo để tiện quản lý</td>\n</tr>\n</tbody>\n</table>\n","cover_image":""}},{"node":{"id":"539b556649530f0970013d8a6d4121dc","title":"Setup CloudFront cho ứng dụng","path":"/2022-04-30-setup-cloudfront-cho-und-dung/","date":"2022-04-30","timeToRead":3,"desc":"","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#c%E1%BA%A5u-h%C3%ACnh-dns\">Cấu hình DNS</a></li>\n<li><a href=\"#c%E1%BA%A5u-h%C3%ACnh-cloudfront-distribution\">Cấu hình CloudFront distribution</a></li>\n</ul>\n<!-- /TOC -->\n<p>Chúng ta sẽ cùng cấu hình để đưa toàn bộ ứng dụng lên CloudFront, với những dữ liệu không nên cache như <em>data</em>, <em>auth</em>,... sẽ được <em>proxy</em> (chuyển tiếp) đến server.</p>\n<h2 id=\"cấu-hình-dns\"><a href=\"#c%E1%BA%A5u-h%C3%ACnh-dns\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cấu hình DNS</h2>\n<p>Mục tiêu cuối cùng của chúng ta là đưa toàn bộ ứng dụng lên CloudFront. Tức là khi user truy cập vào domain, họ sẽ load ứng dụng từ CloudFront chứ không phải từ server. Trước tiên chúng ta phải vào <em>Route 53</em> để thay đổi lại DNS</p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645834717715_image.png?resize=1024%2C280&#x26;ssl=1\"></p>\n<p>Chọn <strong>Hosted Zone</strong></p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645994751238_image.png?w=821&#x26;ssl=1\"></p>\n<p>Click vào <strong>Create Hosted zone</strong> và nhập vào domain</p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645908142161_image.png?resize=1024%2C237&#x26;ssl=1\"></p>\n<p>Chúng ta đang nói với AWS hãy quản lý domain này cho tôi, AWS đưa cho chúng ta giá trị NS (name server) mà nó sẽ <em>route traffic</em> đến. Chúng ta sẽ cần đến chỗ quản lý domain, tùy thuộc vào nơi chúng ta đăng ký domain, giao diện quản lý có thể khác nhau, chúng ta cập nhập lại giá trị <em>NS</em> này cho domain</p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645835018979_image.png?w=762&#x26;ssl=1\"></p>\n<p>Trước khi thay đổi, nhớ lưu lại backup giá trị NS gốc</p>\n<h2 id=\"cấu-hình-cloudfront-distribution\"><a href=\"#c%E1%BA%A5u-h%C3%ACnh-cloudfront-distribution\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cấu hình CloudFront distribution</h2>\n<p>Chúng ta sẽ điền vào phần <em>origin domain</em>, đừng nhập giá trị <strong>top-level domain</strong> như <code class=\"language-inline-text\">your-app.com</code>, nó sẽ là giá trị sub domain, như <code class=\"language-inline-text\">your-app.herokuapp.com</code> (nếu được host trên herokuapp.com)</p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645841894888_image.png?resize=1024%2C292&#x26;ssl=1\"></p>\n<p>Nếu có ý định dùng <code class=\"language-inline-text\">HTTPs</code> thì nhớ thay đổi phân <strong>Protocol</strong></p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645934723593_image.png?resize=1024%2C817&#x26;ssl=1\"></p>\n<p>Phần dưới đây cực kỳ quan trọng, nếu ứng dụng của chúng ta có authen, ghi dữ liệu, nói chung những phương thức khác ngoài <code class=\"language-inline-text\">GET</code>, thì nhớ chọn lại <strong>Allowed HTTP methods</strong></p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645841986703_image.png?w=730&#x26;ssl=1\"></p>\n<p>Chúng ta cũng cần thực hiện một vài thay đổi trên <strong>Cache key and origin requests</strong></p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645842121040_image.png?resize=1024%2C763&#x26;ssl=1\"></p>\n<p><strong>Cache policy</strong> chúng ta cho phép giá trị TTL minimum là 0, như vậy với giá trị non-caching header được gửi lên sẽ có hiệu lực</p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645842200731_image.png?resize=1024%2C857&#x26;ssl=1\"></p>\n<p><strong>Origin request policy</strong>, để đảm bảo cookie và query string khi đến CloudFront sẽ được gửi xuống server (không serve từ CDN)</p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645842297987_image.png?resize=1024%2C686&#x26;ssl=1\">\n<strong>Response headers policy</strong>, chúng ta chọn <strong>CORS With Preflight</strong></p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645842362649_image.png?resize=1024%2C684&#x26;ssl=1\"></p>\n<p>Chúng ta vẫn phải chứng minh với AWS là chúng ta là chủ sở hữu của domain, trước hết chúng ta yêu cầu một SSL certificate</p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645932319102_image.png?resize=1024%2C862&#x26;ssl=1\"></p>\n<p>Chọn <strong>Request certificate</strong></p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645845081306_image.png?resize=1024%2C360&#x26;ssl=1\">\n<img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645845178014_image.png?resize=1024%2C553&#x26;ssl=1\"></p>\n<p>Cung cấp tên miền, chọn kiểu validate bằng <em>DNS</em></p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645932453934_image.png?resize=882%2C1024&#x26;ssl=1\"></p>\n<p>Chọn <strong>Request</strong>, chọn vào Certificate ID vừa được tạo ra</p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645932554825_image.png?resize=1024%2C211&#x26;ssl=1\">\n<img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645932616235_image.png?resize=1024%2C227&#x26;ssl=1\"></p>\n<p>Để xác minh domain chính chủ, chúng ta cần đưa giá trị CNAME này vào trong Route 53</p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645932927217_image.png?resize=1024%2C462&#x26;ssl=1\"></p>\n<p>Chúng ta tạo một dòng CNAME với giá trị trong certificate ở trên</p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645932742028_image.png?resize=1024%2C637&#x26;ssl=1\"></p>\n<p>Sau khi xác minh xong AWS sẽ cập nhập status trên domain</p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645933155607_image.png?resize=1024%2C202&#x26;ssl=1\">\n<img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645933066086_image.png?resize=1024%2C156&#x26;ssl=1\"></p>\n<p>Xong, giờ quay lại màn hình CloudFront distribution, trong mục <strong>SSL certificate</strong> chọn vào certificate chúng ta đã tạo</p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645933691496_image.png?resize=1024%2C727&#x26;ssl=1\">\n<img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645933782796_image.png?resize=1024%2C440&#x26;ssl=1\"></p>\n<p>Việc còn lại là báo với Route 53 để nó route domain vào CloudFront, vào Route 53 tạo thêm một dòng DNS\nChọn <strong>A record type</strong>, đánh dấu dòng này là một <strong>alias</strong> và map alias này đến CloudFront. Bên trong mục <strong>Route traffic to</strong> chúng ta sẽ có tùy chọn <strong>Alias to CloudFront distribution</strong></p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/04/s_9EC4D5B81B6CD9C28657A6DEAF8D3C9C2A6DFB1D0DE42C8A4034DB1807C8212F_1645933944994_image.png?resize=1024%2C538&#x26;ssl=1\"></p>\n<p>OK, xong rồi đó.</p>\n<p>Để báo với CloudFront đừng cache những request cụ thể nào, chúng ta gửi trong header <code class=\"language-inline-text\">Cache-Control: no-cache</code>. Ví dụ sử dụng Express middleware</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/graphql\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cache-Control\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"no-cache\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"/graphql\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">expressGraphql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">schema</span><span class=\"token operator\">:</span> executableSchema<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">graphiql</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">rootValue</span><span class=\"token operator\">:</span> root\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<ul>\n<li><a href=\"https://css-tricks.com/setting-up-cloudfront-to-host-your-web-app/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Setting Up CloudFront to Host Your Web App</a></li>\n</ul>\n","cover_image":""}}]}}},"context":{}}