{"hash":"be9cd8cba7af086bce31a0a023c14cacaa870421","data":{"tag":{"title":"javascript","belongsTo":{"edges":[{"node":{"title":"Định dạng số trong JavaScript","path":"/dinh-dang-so-trong-java-script/","date":"14. September 2020","timeToRead":1,"desc":"Cùng nghiên cứu xem Javascript hổ trợ sẵn những hàm nào để định dạng kiểu số trước khi nghĩ đến một thư viện thứ 3","content":"<h2 id=\"numberprototypetolocalestring\"><a href=\"#numberprototypetolocalestring\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Number.prototype.toLocaleString()</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> number <span class=\"token operator\">=</span> <span class=\"token number\">12345.6789</span>\n\n<span class=\"token comment\">// sẽ lấy local mặc định của trình duyệt</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 12,345.679 (en-US)</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vi-VN'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 123.456,789</span></code></pre>\n<h2 id=\"định-dạng-tiền-tệ\"><a href=\"#%C4%91%E1%BB%8Bnh-d%E1%BA%A1ng-ti%E1%BB%81n-t%E1%BB%87\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Định dạng tiền tệ</h2>\n<p>Nếu muốn định dạng tiền tệ, bạn cần sử dụng thêm tham số thứ 2 của hàm <code class=\"language-text\">toLocaleString</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    style<span class=\"token operator\">:</span> <span class=\"token string\">'currency'</span><span class=\"token punctuation\">,</span>\n    currency<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>giá trị <span class=\"token constant\">ISO</span> <span class=\"token number\">4217</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// tham số bắt buộc, ko truyền lỗi</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Tham khảo giá trị <a href=\"http://www.currency-iso.org/en/home/tables/table-a1.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ISO 3217</a></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> number <span class=\"token operator\">=</span> <span class=\"token number\">12345.6789</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>\n    number<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vi-VN'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        style<span class=\"token operator\">:</span> <span class=\"token string\">'currency'</span><span class=\"token punctuation\">,</span>\n        currency<span class=\"token operator\">:</span> <span class=\"token string\">'VND'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 12.346 ₫</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>\n  number<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ja-JP'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    style<span class=\"token operator\">:</span> <span class=\"token string\">'currency'</span><span class=\"token punctuation\">,</span>\n    currency<span class=\"token operator\">:</span> <span class=\"token string\">'JPY'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ￥12,346</span></code></pre>\n<h2 id=\"phần-trăm\"><a href=\"#ph%E1%BA%A7n-tr%C4%83m\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phần trăm</h2>\n<p>Chuyển đồi thành đơn vị phần % ngoài việc nhân với 100, ns còn thêm 2 tùy chỉnh cũng vui là <code class=\"language-text\">minimumFractionDigits</code> và <code class=\"language-text\">maximumFractionDigits</code> (mặc định là 0 và 2 cho kiểu tiền tệ) để lấy số lượng ký tự muốn lấy</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0.1234</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>\n  number<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'en-US'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    style<span class=\"token operator\">:</span> <span class=\"token string\">'percent'</span><span class=\"token punctuation\">,</span>\n    minimumFractionDigits<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 12.34%</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>\n  number<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'en-US'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    style<span class=\"token operator\">:</span> <span class=\"token string\">'percent'</span><span class=\"token punctuation\">,</span>\n    minimumFractionDigits<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 12.3%</span></code></pre>\n<h2 id=\"intlnumberformat\"><a href=\"#intlnumberformat\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Intl.NumberFormat</h2>\n<p>Nếu hông ưu <code class=\"language-text\">Number.prototype.toLocaleString()</code> có thể dùng constructor <code class=\"language-text\">Intl.NumberFormat</code>. Nếu như thấy sao phải lăng tăng giữa 2 thằng này? Trong trường hợp bạn cần làm việc định dạng này tới lui nhiều lần cho cùng một locale, cùng một tùy chọn cố định, thì bạn nên dùng <code class=\"language-text\">Intl.NumberFormat</code> cho chuẩn tốc độ.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> numberFormat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>NumberFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vi-VN'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  style<span class=\"token operator\">:</span> <span class=\"token string\">'currency'</span><span class=\"token punctuation\">,</span>\n  currency<span class=\"token operator\">:</span> <span class=\"token string\">'VND'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>numberFormat<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">12345.6789</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 12.346 ₫</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>numberFormat<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">2345.67891</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2.346 ₫</span></code></pre>\n<p><a href=\"https://elijahmanor.com/blog/format-js-numbers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Natively Format JavaScript Numbers</a></p>\n"}},{"node":{"title":"DRY không hiệu quả, hãy dùng WET","path":"/dry-khong-hieu-qua-hay-dung-wet/","date":"24. August 2020","timeToRead":2,"desc":"Khi bạn học lập trình bạn sẽ được nghe tới khái niệm DRY (Don't Repeat Yourself), bạn rất có thể đã vận dụng sai ý nghĩa của nó.","content":"<p>Trên wiki: DRY là nguyên tắc bạn đừng viết lặp lại một đoạn code</p>\n<p>Bạn: Ok, những phần code bị trùng mình sẽ chuyển thành abstraction</p>\n<p>Giải pháp trông có vẻ hiển nhiên đúng, nhưng không, abstraction của bạn thường là sai.</p>\n<p>Đây là lý do tại sao:</p>\n<ol>\n<li>Bạn thấy code bị duplicate</li>\n<li>Bạn đưa đoạn duplicate ra thành một abstract (method, class)</li>\n<li>Bạn thay thể toàn bộ phần duplicate bằng abstraction mới</li>\n<li>Bạn nghĩ code đã hoàn hảo</li>\n<li>Thời gian trôi đi</li>\n<li>PM đưa thêm các yêu cầu mới.</li>\n<li>Bạn bắt đầu hiện thực các yêu cầu mới</li>\n<li>Với yêu cầu mới này, bạn phải chỉnh sửa vài đoạn trong abstraction, <code class=\"language-text\">if...else</code> các kiểu, đổi parameter, abstraction của chúng ta có thể đưa ra những action khác nhau theo những điều kiện khác nhau</li>\n<li>Giờ abstraction của trọng sẽ cho ra những kết quả khác nhau trên những case khác nhau</li>\n<li>Yêu cầu mới lại đến, thêm parameter tiếp, thêm câu điều kiện tiếp</li>\n<li>Và giờ đây đoạn code của bạn không còn dễ maintain, nói thẳng ra là một đống hầm bà lằng khó nuốt</li>\n<li>Chúc mừng, bạn đã bị over engineer và gây ra một abstract quá đỗi phức tạp</li>\n</ol>\n<p>Vậy thì sao? Hãy thử WET (Write everything twice)</p>\n<h2 id=\"wet\"><a href=\"#wet\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>WET</h2>\n<p>Như cách chơi chữ đã thể hiện, nó là trường phái đối nghịch hoàn toàn với DRY, khi bắt đầu viết code, bạn sẽ không thể nào lường trước được mọi yêu cầu, mọi tính năng. Vì thế đừng vội vàng áp dụng abstraction</p>\n<p>Bạn hãy nhớ</p>\n<blockquote>\n<p>Cái giá phải trả cho duplicate vẫn rẻ hơn nhiều cho một abstract viết sai</p>\n</blockquote>\n<p>Ví dụ bạn viết một ứng dụng, bạn dựng ra một component tên <code class=\"language-text\">Button</code> để sử dụng nhiều nơi, nghe rất hợp lý. Một yêu cầu mới xuất hiện, ở trang landing page họ muốn có một nút bấm rất <em>fancy</em> và không giống với tất cả những nút bấm trước đây.</p>\n<p>Ok, thay đổi cũng nhỏ thôi, chỉ cần thêm tí điều kiện <code class=\"language-text\">if...else</code>, 90% phần code là của <code class=\"language-text\">Button</code> và 10% code là của <code class=\"language-text\">FancyButton</code></p>\n<p>Sự thật đáng buồn là sẽ có rất nhiều những thay đổi như thế xuất hiện và khả năng rất cao là bạn không đủ kinh nghiệm để có hiện thực những abstraction đủ dễ hiểu, dễ maintain.</p>\n<p>Lời khuyên? <strong>Copy copy code đó ra, đừng ngần ngại</strong></p>\n<p>Bạn thấy quan điểm của mình <em>bậy quá bậy!</em>, bạn có thể tham khảo thêm quan điểm của Dan Abramov</p>\n<p><a href=\"https://overreacted.io/the-wet-codebase/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The WET Codebase</a></p>\n<blockquote>\n<p>In this talk, my aim was to show why strict adherence to writing code that is free of duplication inevitably leads to software we can’t understand</p>\n</blockquote>\n<p>Tạm dịch, tuân thủ nghiêm ngặc quy tắc DRY sẽ dẫn đến một phần mềm mà chúng ta không hiểu nổi nó.</p>\n<p><a href=\"https://www.deconstructconf.com/2019/dan-abramov-the-wet-codebase\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Watch: The Wet Codebase</a></p>\n<p><a href=\"https://dev.to/bulljsdev/when-dry-doesn-t-work-go-wet-4536\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">When DRY Doesn't Work, Go WET - Tác giả Nick Bull JS</a></p>\n"}},{"node":{"title":"Các thuật toán sắp xếp phổ biến và JavaScript","path":"/cac-thuat-toan-sap-xep-pho-bien-va-java-script/","date":"19. August 2020","timeToRead":5,"desc":"Chúng ta sẽ điểm qua các thuật toán sắp xếp phổ biến được học trong trường và hiện thực nó bằng JavaScript","content":"<p>Chúng ta sẽ hiện thực các thuật toán này bằng JavaScript.</p>\n<p>Hàm helper để swap giá trị</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Hàm để so sánh giá trị</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Compare</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">LESS_THAN</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">BIGGER_THAN</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">defaultCompare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">===</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">&lt;</span> b <span class=\"token operator\">?</span> <span class=\"token maybe-class-name\">Compare</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LESS_THAN</span> <span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Compare</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BIGGER_THAN</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"bubble-sort\"><a href=\"#bubble-sort\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bubble Sort</h2>\n<ul>\n<li>Tình huống tốt nhất: độ phức tạp = <code class=\"language-text\">O(N)</code> (đi qua đúng n phần tử)</li>\n<li>Tình huống xấu nhất: độ phức tạp = <code class=\"language-text\">O(N^2)</code> (đi qua n mũ 2 phần tử)</li>\n</ul>\n<p>Cái này rất ít xài trong thực tế, chỉ để dạy và học, vì nó chậm nhất so với các thuật toán khác.</p>\n<p>Ý tưởng là sẽ so sánh 2 phần tử liền kề, hoán đổi vị trí cho phù hợp</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--C0CI1OCj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ubhywp9xh8zk6on4caql.gif\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> compare <span class=\"token operator\">=</span> defaultCompare</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> length <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// refer to note below</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token maybe-class-name\">Compare</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BIGGER_THAN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Để hình dung thuật toán này, bạn có thể nghiên cứu cái hình mô tả bên dưới</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--AIAlZIhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/euz62qdpc74m9w4gcg09.png\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<h2 id=\"selection-sort\"><a href=\"#selection-sort\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Selection Sort</h2>\n<p>Không phân biệt tính huống tốt hay xấu gì cả, nó luôn có độ phức tạp = <code class=\"language-text\">O(N^2)</code></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--musoV4Rk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vweh1mcmiap8q3onqxz8.gif\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<p>Ý tưởng của thuật toán là tìm ra giá trị nhỏ nhất trong đám, rồi đưa nó về vị trí đầu tiên, lặp lại cho các phần tử kế tiếp.</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--wJDCsONw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mbzjewb2l897eiidkr14.gif\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">selectionSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> compare <span class=\"token operator\">=</span> defaultCompare</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> length <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> minIndex<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    minIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token maybe-class-name\">Compare</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BIGGER_THAN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        minIndex <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!==</span> minIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> minIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--992IFucj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/43gibzc1hne0ie73cmp1.png\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<h2 id=\"insertion-sort\"><a href=\"#insertion-sort\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Insertion Sort</h2>\n<ul>\n<li>Tình huống tốt nhất: độ phức tạp = <code class=\"language-text\">O(N)</code></li>\n<li>Tình huống xấu nhất: độ phức tạp = <code class=\"language-text\">O(N^2)</code></li>\n</ul>\n<p>Thuật toán này nó sẽ tạo ra mảng mới, tìm và chèn từng phần tử một vào đúng thứ tự. Sẽ như sau</p>\n<ol>\n<li>Cứ coi như phần tử đầu tiên là đúng vị trí</li>\n<li>Lấy phần tử đầu tiên này so sánh với phần tử tiếp theo, nó có 2 tình huống một là ở yên vị trí đang ở, hay là chúng ta chèn phần tử thứ 2 vào trước phần tử đầu.</li>\n<li>Lặp lại tương tự</li>\n</ol>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s---bIcRugF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/osft7ojymgp8jroekxxu.gif\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">insertionSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> compare <span class=\"token operator\">=</span> defaultCompare</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> length <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> temp<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token maybe-class-name\">Compare</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BIGGER_THAN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--98gGOQtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kdcqz1o3weeqjxwcdfpq.png\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<h2 id=\"merge-sort\"><a href=\"#merge-sort\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Merge Sort</h2>\n<p>Độ phức tạp cố định: <code class=\"language-text\">O(N Log N)</code></p>\n<p>Là thuật toán chia để trị, chi nhỏ các phần tử ban đầu ra thành các nhóm nhỏ hơn để dể xử lý từng cụm</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--A-kq2byS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xokw1fxci67ttscu23vy.gif\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> compare <span class=\"token operator\">=</span> defaultCompare</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> length <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> middle <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">floor</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> middle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span>middle<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    arr <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> compare</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> left<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token maybe-class-name\">Compare</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LESS_THAN</span> <span class=\"token operator\">?</span> left<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> right<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> left<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">?</span> left<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> right<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iTGTEOAp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bowug91fuof69su39fwd.png\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<h2 id=\"quick-sort\"><a href=\"#quick-sort\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Quick sort</h2>\n<ul>\n<li>Tình huống tốt nhất: độ phức tạp = <code class=\"language-text\">O(N Log N)</code></li>\n<li>Tình huống xấu nhất: độ phức tạp = <code class=\"language-text\">O(N^2)</code></li>\n</ul>\n<p>Đây là thuật toán được sử dụng nhiều nhất, vẫn là phương pháp chia để trị</p>\n<p>Có thể xem lại bài <a href=\"http://vuilaptrinh.com/2019-11-02-gioi-thieu-thuat-toan-quicksort\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">giới thiệu về Quick Sort của mình</a></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--5nmg3LKx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vo2ltivrpucxtoamvdeb.gif\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> compare <span class=\"token operator\">=</span> defaultCompare</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">quick</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">quick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> compare</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    i <span class=\"token operator\">=</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">quick</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">quick</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> compare</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> pivot <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pivot<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token maybe-class-name\">Compare</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LESS_THAN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pivot<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token maybe-class-name\">Compare</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BIGGER_THAN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"bucket-sort\"><a href=\"#bucket-sort\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bucket Sort</h2>\n<ul>\n<li>Tình huống tốt nhất: độ phức tạp = <code class=\"language-text\">O(N + k)</code></li>\n<li>Tình huống xấu nhất: độ phức tạp = <code class=\"language-text\">O(N^2)</code></li>\n</ul>\n<p>Ý tưởng là sẽ chia đôi thành 2 mảng, rồi trên từng mảng đó, áp dụng một thuật toán sắp xếp trên đó, như insertion sort</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--c3E8lx6w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vdv48hfw2oomr5r3myc0.gif\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">bucketSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> bucketSize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// create buckets and distribute the elements</span>\n  <span class=\"token keyword\">const</span> buckets <span class=\"token operator\">=</span> <span class=\"token function\">createBuckets</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> bucketSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// sort the buckets using insertion sort and add all bucket elements to sorted result</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">sortBuckets</span><span class=\"token punctuation\">(</span>buckets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createBuckets</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> bucketSize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// determine the bucket count</span>\n  <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      min <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> bucketCount <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>max <span class=\"token operator\">-</span> min<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> bucketSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// initialize each bucket (a multidimensional array)</span>\n  <span class=\"token keyword\">const</span> buckets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bucketCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// distribute elements into buckets</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> bucketIndex <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> min<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> bucketSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    buckets<span class=\"token punctuation\">[</span>bucketIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> buckets<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sortBuckets</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">buckets</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> sortedArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> buckets<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">insertionSort</span><span class=\"token punctuation\">(</span>buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// quick sort is another good option</span>\n      sortedArr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span>buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> sortedArr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Lưu ý bucket sort chạy tốt nhất khi có thể chia đều các phần tử cho các bucket, việc chia thành 2 bucket cũng không bắt buộc, có thể chia nhiều hơn nếu số lượng phần tử nhiều</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--OCRlBcCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m10o9xkwmpyllvarra5g.png\"></p>\n<p><a href=\"https://dev.to/christinamcmahon/common-sorting-algorithms-in-javascript-58a7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Common Sorting Algorithms in JavaScript</a></p>\n<p><a href=\"https://www.bigocheatsheet.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Know Thy Complexities!</a></p>\n"}},{"node":{"title":"Giới thiệu functional programming trong JavaScript","path":"/gioi-thieu-functional-programming-trong-java-script/","date":"16. August 2020","timeToRead":4,"desc":"Functional programming là một topic rất chi quen thuộc trong cộng đồng JS, các bạn có biết tại sao mọi người lại hype với nó? Tại sao mọi người lại quay lưng với Object oriented","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#functional-programming-l%C3%A0-g%C3%AC--d%C3%A2n-t%C3%ACnh-hay-vi%E1%BA%BFt-t%E1%BA%AFt-l%C3%A0-fp\">Functional Programming là gì ? (dân tình hay viết tắt là FP)</a></li>\n<li><a href=\"#t%E1%BA%A1i-sao-l%E1%BA%A1i-s%E1%BB%AD-d%E1%BB%A5ng-fp\">Tại sao lại sử dụng FP?</a></li>\n<li><a href=\"#t%E1%BA%A1i-sao-l%E1%BA%A1i-s%E1%BB%AD-d%E1%BB%A5ng-fp-v%E1%BB%9Bi-javascript\">Tại sao lại sử dụng FP với JavaScript?</a></li>\n<li><a href=\"#vi%E1%BA%BFt-fp-nh%C6%B0-th%E1%BA%BF-n%C3%A0o\">Viết FP như thế nào?</a></li>\n<li><a href=\"#t%C3%A0i-li%E1%BB%87u-tham-kh%E1%BA%A3o\">Tài liệu tham khảo</a></li>\n</ul>\n<!-- /TOC -->\n<p>Functional Programming ? Là cái gì? Tại sao dùng? Dùng như thế nào?</p>\n<p>Các bạn có từng <em>hoảng loạn</em> như mình khi phải nghe hàng loạt thuật ngữ sau không</p>\n<blockquote>\n<p>stateless, compose, pure, side effect, ramda, lazy, immuable, curry, functor, monad, monoid, higher-order, referential transparency</p>\n</blockquote>\n<h2 id=\"functional-programming-là-gì--dân-tình-hay-viết-tắt-là-fp\"><a href=\"#functional-programming-l%C3%A0-g%C3%AC--d%C3%A2n-t%C3%ACnh-hay-vi%E1%BA%BFt-t%E1%BA%AFt-l%C3%A0-fp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Functional Programming là gì ? (dân tình hay viết tắt là FP)</h2>\n<p>Functional Programming nó là một thuật ngữ mà hiểu theo kiểu bình dân là một <strong>style</strong>-phong cách-kiểu viết code.</p>\n<p>Khi nói đến <strong>style</strong> thì bắt buộc phải có một số đặc thù nhất định để phân biệt với các <strong>style</strong> khác. Chút nữa sẽ nói cụ thể.</p>\n<p>Không chỉ có JS mà một số ngôn ngữ lập trình khác cũng hỗ trợ <em>style</em> này</p>\n<ul>\n<li>F#</li>\n<li>Haskell</li>\n<li>Erlang</li>\n<li>JS ( tất nhiên )</li>\n<li>Elm</li>\n<li>Scala</li>\n<li>Ocaml</li>\n<li>Clojure</li>\n</ul>\n<p>Ngoài trước FP, nếu các bạn học cùng thời với mình thì sẽ được dạy Object Oriented <em>Programming</em></p>\n<p>Một thuật ngữ các bạn cũng sẽ hay gặp là <strong>programming paradigm</strong>, có thể hiểu <em>bình dân</em> là <strong>cách chúng ta nhìn nhận mọi thứ vận hành</strong>, cách mà chương trình sẽ kết nối và hoạt động với nhau (<strong>mindset</strong> nếu muốn dùng thuật ngữ hoa mỹ)</p>\n<p>Một số <em>programming paradigm</em>  liên quan</p>\n<table>\n<thead>\n<tr>\n<th>Nhóm 1</th>\n<th>Nhóm 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Imperative</strong>: tập các lệnh được đưa ra theo thứ tự cố định</td>\n<td><strong>Declarative</strong>: tui muốn cái này, bạn làm sao đưa ra kết quả như mong muốn</td>\n</tr>\n<tr>\n<td><strong>Object-Oriented</strong>: imperative cool, nhưng nếu có nhiều state và phải quản lý toàn bộ nó, hãy chia nó ra thành từng <strong>object</strong> làm nhiệm vụ quản lý <code class=\"language-text\">state</code> này và chương trình là sự kết hợp các object <strong>truyền/nhận</strong> thông tin</td>\n<td><strong>Functional</strong>: một dạng sub-paradigm (con cùng cha chú) với declarative</td>\n</tr>\n</tbody>\n</table>\n<p>Ý tưởng FP không qua cao siêu, chỉ gói gọn trong một câu</p>\n<blockquote>\n<p>Pure Function: chỉ phụ thuộc vào input truyền vào, chỉ trả về output không làm gì khác cả</p>\n</blockquote>\n<p>Ví dụ, một function như thế này không được xem là Pure Function</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Andy\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello, Andy!</span>\n\nname <span class=\"token operator\">=</span> <span class=\"token string\">\"luckyluu\"</span>\n<span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello, luckyluu!</span></code></pre>\n<p>Nó vi phạm 2 nguyên tắc, một là phụ thuộc vào một biến bên ngoài, 2 là nó không trả về mà làm thay đổi một <strong>thứ</strong> bên ngoài (ở đây là log ra một giá trị).</p>\n<h2 id=\"tại-sao-lại-sử-dụng-fp\"><a href=\"#t%E1%BA%A1i-sao-l%E1%BA%A1i-s%E1%BB%AD-d%E1%BB%A5ng-fp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao lại sử dụng FP?</h2>\n<p><strong>Predictable/Safer</strong></p>\n<p>Chúng ta có thể hoàn toàn tin tưởng vào pure function, nó chỉ làm đúng việc cần làm và không ảnh hưởng đến hàng xóm. Chắc chắn là ít có những có bug mà ai cũng không ngờ tới</p>\n<p><strong>Dễ test/debug</strong></p>\n<p>Những gì bạn cần test trên một Pure Function là đưa vào input và kiểm tra output. Ví dụ mà bạn nhận được một output sai, kiểm tra input đã đúng hết thì bạn sẽ biết ngay vấn đề nằm ở trong function đó, hãy nhớ Pure Function chỉ phụ thuộc vào input, không có side effect thì làm gì đổ lỗi được.</p>\n<blockquote>\n<p>Ngoài ra theo quan điểm cá nhân thì việc sử dụng FP cũng giúp chúng ta copy-paste code giữa nhiều dự án dễ dàng hơn</p>\n</blockquote>\n<p>Còn nếu bạn đang sử dụng FP vì những lý do sau, thì mình khuyên bạn không nên tin vào điều này</p>\n<ul>\n<li>Những người sử dụng FP trông cool/ngầu hơn những người tiền bối sử dụng Object Oriented</li>\n<li>Đây là paradigm xịn sò nhất ở thì hiện tại</li>\n</ul>\n<p><strong>Nói chung FP cũng chỉ là một trong những paradigm trong lập trình, sẽ có điểm mạnh và điểm yếu riêng.</strong></p>\n<h2 id=\"tại-sao-lại-sử-dụng-fp-với-javascript\"><a href=\"#t%E1%BA%A1i-sao-l%E1%BA%A1i-s%E1%BB%AD-d%E1%BB%A5ng-fp-v%E1%BB%9Bi-javascript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao lại sử dụng FP với JavaScript?</h2>\n<p>Khi bắt đầu học và sử dụng JS để viết object-oriented chúng ta đều nhận ra một điều rằng: JS không phải sinh ra để viết object-oriented.</p>\n<p>Bạn sẽ thấy nhan nhản các câu hỏi tricky trong JavaScript về <code class=\"language-text\">prototype</code> , <code class=\"language-text\">this</code> trong các buổi phỏng vấn, qua chi là khó để làm việc và hiểu được thực những thứ như vậy trong javascript, chúng ta sẽ kỳ vọng nó làm việc như thế này, nhưng JS lại không làm như chúng nghĩ.</p>\n<blockquote>\n<p> Đã bao nhiêu lần bạn bị dính bug liên quan tới <code class=\"language-text\">this</code></p>\n</blockquote>\n<p>Dù cho bạn là chuyên gia lập trình cấp cao, chắc cũng bao lần mệt mỏi với <code class=\"language-text\">this</code></p>\n<p>Và nếu bạn sử dụng FP mọi thứ nhức đầu đó sẽ không còn là vấn đề quan tâm.</p>\n<p>Ngoài ra có khá nhiều thư viện/công cụ trong cộng đồng javascript xây <em>sẵn</em> để chúng ta xào món FP này nhanh nhất có thể</p>\n<h2 id=\"viết-fp-như-thế-nào\"><a href=\"#vi%E1%BA%BFt-fp-nh%C6%B0-th%E1%BA%BF-n%C3%A0o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Viết FP như thế nào?</h2>\n<p>Mình đã có 2 bài viết cho chủ đề này, các bạn có thể đọc lại</p>\n<p><a href=\"http://vuilaptrinh.com/2019-07-26-nguyen-ly-chung-cua-lap-trinh-huong-function\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nguyên lý nền tảng của lập trình function</a></p>\n<p><a href=\"http://vuilaptrinh.com/2020-05-17-functional-programing-nen-va-khong-nen/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Functional programing nên và không nên</a></p>\n<p>Một số thư viện để bạn viết FP một cách gọn gàn, sạch sẽ, thơm tho</p>\n<ul>\n<li>Mori: <a href=\"https://github.com/swannodette/mori\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/swannodette/mori</a></li>\n<li>Immutable.js: <a href=\"https://github.com/immutable-js/immutable-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/immutable-js/immutable-js</a></li>\n<li>Ramda: <a href=\"https://github.com/ramda/ramda\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/ramda/ramda</a></li>\n<li>Underscore: <a href=\"https://github.com/jashkenas/underscore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/jashkenas/underscore</a></li>\n<li>Lodash: <a href=\"https://github.com/lodash/lodash\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/lodash/lodash</a></li>\n<li>Nhiều lắm</li>\n</ul>\n<h2 id=\"tài-liệu-tham-khảo\"><a href=\"#t%C3%A0i-li%E1%BB%87u-tham-kh%E1%BA%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tài liệu tham khảo</h2>\n<p><a href=\"https://codewords.recurse.com/issues/one/an-introduction-to-functional-programming\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codewords.recurse.com/issues/one/an-introduction-to-functional-programming</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=qtsbZarFzm8&#x26;list=WL&#x26;index=7&#x26;t=0s\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.youtube.com/watch?v=qtsbZarFzm8&#x26;list=WL&#x26;index=7&#x26;t=0s</a></p>\n"}},{"node":{"title":"Tìm hiểu phương thức slice của mảng trong javascript","path":"/tim-hieu-phuong-thuc-slice-cua-mang-trong-javascript/","date":"14. August 2020","timeToRead":1,"desc":"Bài viết phù họp cho các bạn mới biết javascript, không phù hợp cho bạn nào đã quá rành","content":"<p>Phương thức <code class=\"language-text\">**slice**</code> (copy cho em một miếng) có thể sử dụng trên 2 kiểu <code class=\"language-text\">String</code> và <code class=\"language-text\">Array</code></p>\n<p>Cách sử dụng cơ bản thì ta có thể truyền vào index bắt đầu, và index kết thúc (<em>kết quả tả về không bao gồm index kết thúc</em>)</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--OINYunXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foxbits.dev/sites/default/files/inline-images/array-slice-example-fruits-for-fact-0.jpg\" alt=\"Tìm hiểu phương thức slice của mảng trong javascript\"></p>\n<p>Index kết thúc cũng có thể <em>bỏ qua</em>, lúc này nó sẽ hiểu là lấy hết luôn các phần tử còn lại.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--z2KQG8vX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foxbits.dev/sites/default/files/inline-images/xxjavascript-array-slice-method-foxbits-fact-2.jpg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--z2KQG8vX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foxbits.dev/sites/default/files/inline-images/xxjavascript-array-slice-method-foxbits-fact-2.jpg\" alt=\"Javascript Array Slice Method: The default end parameter is length of the array\"></a></p>\n<p>Và nếu mà chúng ta truyền giá trị index kết thúc nó lớn hơn chiều dài của mảng, thì nó cũng không lỗi, mà trả về toàn bộ như không truyền vào</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--eWuiw3eO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foxbits.dev/sites/default/files/inline-images/array-slice-example-fruits-for-fact-3_0.jpg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--eWuiw3eO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foxbits.dev/sites/default/files/inline-images/array-slice-example-fruits-for-fact-3_0.jpg\" alt=\"Javascript Array Slice Method: When the end value is higher than actual length of array.\"></a></p>\n<p>Còn vui vui, bạn không truyền vào index bắt đầu luôn, thì nó cũng không lỗi nốt, mà sẽ sao y toàn bộ các phần tử vào mảng mới</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--0VNTZhPe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foxbits.dev/sites/default/files/inline-images/array-slice-example-fruits-for-fact-4_0.jpg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--0VNTZhPe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foxbits.dev/sites/default/files/inline-images/array-slice-example-fruits-for-fact-4_0.jpg\" alt=\" Edit media Image  When both parameters are missing, it creates copy of the original array\"></a></p>\n<p>Với index bắt đầu nhận vào là <code class=\"language-text\">undefined</code> nó sẽ hiểu là <code class=\"language-text\">0</code> (em cũng lại javascript)</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ZziXO8ik--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foxbits.dev/sites/default/files/inline-images/array-slice-example-fruits-for-fact-5.jpg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ZziXO8ik--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foxbits.dev/sites/default/files/inline-images/array-slice-example-fruits-for-fact-5.jpg\" alt=\"Javascript Array Slice Method: If first parameter is undefined, then the result contains elements from the starting point of the array.\"></a></p>\n<p>Index bắt đầu lớn hơn độ dài của array? Nó sẽ cho ta kết qua là một mảng rỗng</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WQBi7Kp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foxbits.dev/sites/default/files/inline-images/array-slice-example-fruits-for-fact-6_0.jpg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WQBi7Kp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foxbits.dev/sites/default/files/inline-images/array-slice-example-fruits-for-fact-6_0.jpg\" alt=\"Javascript Array Slice Method: When begin is greater than or equal to length of array.\"></a></p>\n<blockquote>\n<p>Chưa đủ thú vị? Vậy truyền vào số âm thì sao?</p>\n</blockquote>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Z0m01uqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foxbits.dev/sites/default/files/inline-images/array-slice-example-fruits-for-fact-negative-index.jpg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Z0m01uqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foxbits.dev/sites/default/files/inline-images/array-slice-example-fruits-for-fact-negative-index.jpg\" alt=\"Negative Indexing of array elements in Javascript\"></a></p>\n<p>Lúc này nó sẽ được tính theo cơ chế <em>index ngược</em>, các giá trị <em>âm</em> sẽ được tính theo index: thằng cuối cùng là -1, áp cuối là -2, và cứ tiếp tục đi ngược lên.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9QHx20P0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foxbits.dev/sites/default/files/inline-images/array-slice-example-fruits-for-fact-8.jpg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9QHx20P0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foxbits.dev/sites/default/files/inline-images/array-slice-example-fruits-for-fact-8.jpg\" alt=\"Slice method with negative index works fine\"></a></p>\n<p>Chúng ta có thể dùng nó để lấy các phần tử từ phải qua trái (2 phần tử cuối, 3 phần tử cuối, ví dụ vậy)</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--VkOdOPne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foxbits.dev/sites/default/files/inline-images/array-slice-example-fruits-for-fact-9.jpg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--VkOdOPne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foxbits.dev/sites/default/files/inline-images/array-slice-example-fruits-for-fact-9.jpg\" alt=\"Using Slice with negative index to fetch last 4 elements of an array\"></a></p>\n<p>Đối với String thì cũng cách dùng cũng tương tự như Array (mai quá!)</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--sfq02PID--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foxbits.dev/sites/default/files/inline-images/string-slice.jpg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--sfq02PID--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foxbits.dev/sites/default/files/inline-images/string-slice.jpg\" alt=\"Javascript String Slice Method\"></a></p>\n<p>Mình nghĩ <code class=\"language-text\">slice</code> cũng là một trong những phương thức chúng rất hay sử dụng, như trong reducer của redux, dùng nó để sao y một state nào đó. Nên việc nắm vững, thực hành với nó nhiều là điều rất chi cần thiết.</p>\n<p><a href=\"https://dev.to/sandeshgit/understanding-the-slice-method-in-javascript-the-basics-negative-indexing-and-the-concept-of-shallow-copy-3m3i\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dev.to/sandeshgit/understanding-the-slice-method-in-javascript-the-basics-negative-indexing-and-the-concept-of-shallow-copy-3m3i</a></p>\n"}},{"node":{"title":"Thêm kiểm tra type trong Javascript với VS Code","path":"/them-kiem-tra-type-trong-javascript-voi-vs-code/","date":"6. August 2020","timeToRead":2,"desc":"Bạn thấy rằng JavaScript đã đủ xài trong dự án, bạn không ưa thằng TypeScript và bạn đang sử dụng VS Code. Bài viết này là dành cho bạn rồi.","content":"<p>VS Code có một công cụ không thể tuyệt vời hơn cho các bạn viết JS một cách an toàn ko sợ sai type. Túm gọn chỉ bằng một comment thần thánh</p>\n<blockquote>\n<p>@ts-check</p>\n</blockquote>\n<p>Ví dụ, bạn muốn nghiêm cấm việc thay đổi type của một biến đã gán sẵn giá trị trước đó</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Tất cả những gì bạn cần làm</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// @ts-check</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// indicates error</span></code></pre>\n<p>VS Code sẽ thông báo cho bạn một lỗi rất <em>dễ thương</em> như thế này</p>\n<blockquote>\n<p>Type <code class=\"language-text\">false</code> is not assignable to type <code class=\"language-text\">Number</code></p>\n</blockquote>\n<p>Một vài ví dụ sử dụng để bạn tham khảo</p>\n<h2 id=\"kiểm-tra-params-của-hàm\"><a href=\"#ki%E1%BB%83m-tra-params-c%E1%BB%A7a-h%C3%A0m\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kiểm tra params của hàm</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Code trên vẫn ko sai nhé, mặc dù chúng ta không hề khai báo param thứ 3. Thêm // @ts-check để thông báo khi <em>vô tình</em> truyền nhiều hơn số param cần thiết</p>\n<blockquote>\n<p>Expected 0-2 arguments but got 3</p>\n</blockquote>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// @ts-check</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// complains about the `3`</span></code></pre>\n<h2 id=\"kiểm-tra-object\"><a href=\"#ki%E1%BB%83m-tra-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kiểm tra Object</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// @ts-check</span>\n<span class=\"token keyword\">let</span> gameObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  y<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  width<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  height<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">width</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">height</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ngameObject<span class=\"token punctuation\">.</span><span class=\"token property-access\">z</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Cái này nó sẽ không bắt lỗi, chúng ta vẫn được quyền thêm <code class=\"language-text\">z</code> sau khi đã khai báo</p>\n<p>Vậy sao? Dùng JsDoc</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// @ts-check</span>\n\n<span class=\"token doc-comment comment\">/** <span class=\"token keyword\">@type</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> getArea<span class=\"token operator\">:</span> Function <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> */</span>\n<span class=\"token keyword\">let</span> gameObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  y<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  width<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  height<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">width</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">height</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ngameObject<span class=\"token punctuation\">.</span><span class=\"token property-access\">z</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"biến-không-bắt-buộc\"><a href=\"#bi%E1%BA%BFn-kh%C3%B4ng-b%E1%BA%AFt-bu%E1%BB%99c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Biến không bắt buộc</h2>\n<p>Chúng ta có một hàm mà giá trị param truyền vào không bắt buộc lúc nào cùng có</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config <span class=\"token operator\">&amp;&amp;</span> config<span class=\"token punctuation\">.</span><span class=\"token property-access\">shouldRun</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// run</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> shouldRun<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chỗ này chúng ta cũng cần sự hỗ trợ của JsDoc như trường hợp trên</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// @ts-check</span>\n\n<span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> shouldRun<span class=\"token operator\">:</span> boolean <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token optional-parameter\"><span class=\"token punctuation\">[</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">]</span></span> - Somebody's name.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config <span class=\"token operator\">&amp;&amp;</span> config<span class=\"token punctuation\">.</span><span class=\"token property-access\">shouldRun</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// run</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> canRun<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this now indicates an error</span>\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> shouldRun<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Với cách thiết đặt như vậy, chúng ta sẽ nhận được cảnh báo khi truyền vào một <code class=\"language-text\">object</code> mà không có giá trị <code class=\"language-text\">shouldRun</code></p>\n<h2 id=\"ngoại-lệ\"><a href=\"#ngo%E1%BA%A1i-l%E1%BB%87\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ngoại lệ</h2>\n<p>Nếu có trường hợp ngoại lệ nào đó bạn muốn bỏ qua việc kiểm tra tính <em>chuẩn mực</em> của type, dùng thần chú <code class=\"language-text\">//@ts-ignore</code> hoặc <code class=\"language-text\">//@ts-nocheck</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//@ts-ignore</span>\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> canRun<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Sau nhiều năm chinh chiến, mình ngộ ra rằng TypeScript cũng tốt, nhưng nó không dành cho tất cả mọi người, tất cả dự án. Những cái kiểm tra nhỏ nhỏ như vậy đôi khi lại mang khác biệt đủ lớn khi bạn viết code.</p>\n<p><a href=\"https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem thêm kiểm tra type cho JS</a></p>\n<p><a href=\"https://dev.to/itnext/type-checking-your-javascript-with-vs-code-the-superpowers-you-didn-t-know-you-had-1jp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Type checking your JavaScript with VS Code - the superpowers you didn't know you had</a></p>\n"}},{"node":{"title":"Yaml cho web developer","path":"/yaml-cho-web-developer/","date":"5. August 2020","timeToRead":4,"desc":"Dạo gần đây, nếu bạn là Front End developer chắc sẽ gặp nhiều đến file có đuôi .yml ( ví dụ như .gitlab-ci.yml). Nếu bạn chưa biết kiểu file này, thì bài này mình sẽ giới thiệu túm lược để bạn làm quen.","content":"<p>File này được dùng khá nhiều cho việc thiết đặt và cấu hình. Mà nhiều nhất là dùng cho các thiết đặt CI/CD. Ngày xưa, khi chưa có Yaml, sau khi quá mệt mỏi với việc mỗi người mỗi ý trong việc viết file cấu hình, nổ ra cái ý tưởng hồi năm 2001</p>\n<blockquote>\n<p>Giờ sao chúng ta không tạo ra một file cấu hình giống như chỉ dẫn nấu ăn, chữ thôi, cực kỳ dễ hiểu</p>\n</blockquote>\n<p>Yaml cũng là một dạng superset của người anh em JSON.</p>\n<blockquote>\n<p>Superset là một ngôn ngữ chứa tất cả feature của một ngôn ngữ, rồi mở rộng thêm một số thứ nữa</p>\n</blockquote>\n<p>Ví dụ như TypeScript là superset của Javascript</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"system\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"removeComments\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"preserveConstEnums\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outFile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"../../built/local/tsc.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/**/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.spec.ts\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>File JSON không quá khó đọc, tuy nhiên lại vướng một vài hạn chế:</p>\n<ol>\n<li>Không dùng biến được</li>\n<li>Không dùng biến môi trường được</li>\n<li>Không thể override value</li>\n</ol>\n<p>YAML sẽ giúp ta làm được những điều chưa làm được ở json</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">compilerOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">module</span><span class=\"token punctuation\">:</span> system\n  <span class=\"token key atrule\">noImplicitAny</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">removeComments</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">preserveConstEnums</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">outFile</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"../../built/local/tsc.js\"</span>\n  <span class=\"token key atrule\">sourceMap</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">types</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> node\n    <span class=\"token punctuation\">-</span> lodash\n    <span class=\"token punctuation\">-</span> express\n<span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> src/<span class=\"token important\">**/*</span>\n<span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> node_modules\n  <span class=\"token punctuation\">-</span> <span class=\"token string\">\"**/*.spec.ts\"</span></code></pre>\n<p><em>lưu ý đây chỉ là ví dụ, bạn không thể viết <code class=\"language-text\">tsconfig</code> bằng YAML, buồn thay</em></p>\n<p>Một số nguyên tắc-cú pháp cần nắm</p>\n<p><strong>Thục đầu dòng</strong></p>\n<p>Thục đầu dòng rất quan trọng, bạn chỉ được dùng dấu <strong>khoảng trắng</strong>, không cho phép dùng <strong>tab</strong></p>\n<p><strong>Viết comment</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># I'm a comment</span>\n<span class=\"token key atrule\">person</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># I'm also a comment</span>\n  <span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span></code></pre>\n<p><strong>Dạng danh sách</strong></p>\n<p>Có 2 cách biết, như đã nói là superset của json, nên chúng ta có cách thứ nhất i như json</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">people</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Anne\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Max\"</span><span class=\"token punctuation\">]</span></code></pre>\n<p>Khuyến khích cách này hơn</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">people</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> Anne\n  <span class=\"token punctuation\">-</span> John\n  <span class=\"token punctuation\">-</span> Max</code></pre>\n<p><strong>Khai báo giá trị string</strong></p>\n<p>Trong JSON bạn chỉ một cách viết giá trị dạng <code class=\"language-text\">String</code> là đưa nó vào dấu ngoặc kép <code class=\"language-text\">&quot;&quot;</code>, Yaml thì linh động hơn</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">company</span><span class=\"token punctuation\">:</span> Google <span class=\"token comment\"># Single words, no quotes</span>\n<span class=\"token key atrule\">full_name</span><span class=\"token punctuation\">:</span> John Foo Bar Doe <span class=\"token comment\"># Full sentence, no quotes</span>\n<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"John\"</span> <span class=\"token comment\"># Using single quotes</span>\n<span class=\"token key atrule\">surname</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Christian Meyer\"</span> <span class=\"token comment\"># Using double quotes</span></code></pre>\n<blockquote>\n<p>Trong trường hợp bạn có chưa các ký tự đặc biệt, thì nên đưa vào dấu nháy kép.</p>\n</blockquote>\n<p><strong>Số</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">year</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2019</span> <span class=\"token comment\"># Integer</span>\n<span class=\"token key atrule\">nodeVersion</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10.8</span> <span class=\"token comment\"># Float</span></code></pre>\n<p><strong>Con trỏ</strong></p>\n<p>Khái niệm <em>con trỏ</em> xem như bạn đã biết nhé, mình không giải thích, cái này các bạn đi học chắc các thầy dạy kỹ lắm rồi.</p>\n<p>Ví dụ như bạn đang viết một số config cho môi trường <code class=\"language-text\">production</code> và <code class=\"language-text\">staging</code>, tức nhiên là một config là giống nhau thôi, nên chúng ta chỉ cần <em>trỏ</em> nó qua một chỗ</p>\n<p>Đây là không <em>trỏ</em> qua mà <em>copy/paste</em> huyền thoại</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"production\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"node_version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"13.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"os\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ubuntu\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"package_manager\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"run\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"yarn install\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NODE_ENV=${ENVIRONMENT} yarn build\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"ENVIRONMENT\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"production\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"staging\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"node_version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"13.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"os\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ubuntu\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"package_manager\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"run\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"yarn install\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NODE_ENV=${ENVIRONMENT} yarn build\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"ENVIRONMENT\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"staging\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Để dùng con trỏ, chúng ta tạo trước một cái <em>neo</em> để sau này trỏ vào cái <em>neo</em> này</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">base-config</span><span class=\"token punctuation\">:</span> <span class=\"token important\">&amp;base</span> <span class=\"token comment\"># tên cái neo</span>\n  <span class=\"token key atrule\">node_version</span><span class=\"token punctuation\">:</span> 13.0.0\n  <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> ubuntu\n  <span class=\"token key atrule\">package_manager</span><span class=\"token punctuation\">:</span> yarn\n  <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> yarn install\n    <span class=\"token punctuation\">-</span> NODE_ENV=$<span class=\"token punctuation\">{</span>ENVIRONMENT<span class=\"token punctuation\">}</span> yarn build</code></pre>\n<p>Sau đó thực hiện việc trỏ</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">base-config</span><span class=\"token punctuation\">:</span> <span class=\"token important\">&amp;base</span>\n  <span class=\"token key atrule\">node_version</span><span class=\"token punctuation\">:</span> 13.0.0\n  <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> ubuntu\n  <span class=\"token key atrule\">package_manager</span><span class=\"token punctuation\">:</span> yarn\n  <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> yarn install\n    <span class=\"token punctuation\">-</span> NODE_ENV=$<span class=\"token punctuation\">{</span>ENVIRONMENT<span class=\"token punctuation\">}</span> yarn build\n\n<span class=\"token key atrule\">production</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># dùng các thiết đặt ở neo tên là base</span>\n  <span class=\"token key atrule\">&lt;&lt;</span><span class=\"token punctuation\">:</span> <span class=\"token important\">*base</span>\n  <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">ENVIRONMENT</span><span class=\"token punctuation\">:</span> production\n\n<span class=\"token key atrule\">staging</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># dùng các thiết đặt ở neo tên là base</span>\n  <span class=\"token key atrule\">&lt;&lt;</span><span class=\"token punctuation\">:</span> <span class=\"token important\">*base</span>\n  <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">ENVIRONMENT</span><span class=\"token punctuation\">:</span> staging</code></pre>\n<p><strong>Môi trường Shell/Bash</strong></p>\n<p>Như đã nói lúc đầu, file <code class=\"language-text\">.yml</code> rất được ưu dùng đề làm config, đặc biệt là config môi trường CI/CD.</p>\n<p>Môi trường CI/CD thường là Linux, và chúng ta cũng có thể truy cập đến các biến môi trường của Linux.</p>\n<p>Ví dụ như Github CI, chúng ta có thể chỉ định biến môi trường global nào chúng ta muốn truy cập</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">variables</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">NODE_IMAGE</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">:</span><span class=\"token number\">10</span>\n\n<span class=\"token key atrule\">stages</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> build\n\n<span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> $NODE_IMAGE\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> build</code></pre>\n<p>Cú pháp <code class=\"language-text\">$</code> không phải của <code class=\"language-text\">yaml</code> mà là của <code class=\"language-text\">shell/bash</code>. Những gì Github CI sẽ làm là đưa toàn bộ những biến bạn đặt trong <code class=\"language-text\">variables</code> và tạo ra biến trong <code class=\"language-text\">shell</code></p>\n<p>Một vài hệ thống khác cũng <strong>inject</strong> các giá trị khác như commit ref, branch name, build time, secret key được đặt bên ngoài file config</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">variables</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">NODE_IMAGE</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">:</span><span class=\"token number\">10</span>\n\n<span class=\"token key atrule\">stages</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> build\n\n<span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> $NODE_IMAGE\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> build\n  <span class=\"token key atrule\">artifacts</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> $CI_COMMIT_REF_NAME</code></pre>\n<p>Ví dụ ở trên, chúng ta sử dụng biến môi trường <code class=\"language-text\">$CI_COMMIT_REF_NAME</code> của GitLab CI.</p>\n<p>Hy vọng các bạn đã hiểu chút đỉnh về YAML và cảm thấy đọc file yaml không quá khó chịu nữa.</p>\n<h3 id=\"tài-liệu-tham-khảo\"><a href=\"#t%C3%A0i-li%E1%BB%87u-tham-kh%E1%BA%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tài liệu tham khảo</h3>\n<p><a href=\"https://yaml.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://yaml.org/</a>\n<a href=\"https://www.json2yaml.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.json2yaml.com/</a>\n<a href=\"https://learnxinyminutes.com/docs/yaml/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://learnxinyminutes.com/docs/yaml/</a></p>\n<p><a href=\"https://dev.to/raulfdm/yaml-for-web-developers-559n\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Yaml for Web Developers</a></p>\n"}},{"node":{"title":"Phân biệt sự khác nhau giữa await-return-return await","path":"/phan-biet-su-khac-nhau-giua-await-return-return-await/","date":"30. July 2020","timeToRead":2,"desc":"Nắm rõ async không bao giờ là một kiến thức thừa.","content":"<p>Khi viết một async function, có sự khác nhau giữa <code class=\"language-text\">await</code> và <code class=\"language-text\">return</code> và <code class=\"language-text\">return await</code>, các bạn nên biết để sử dụng cho đúng</p>\n<p>Chúng ta có một async function <code class=\"language-text\">waitAndMaybeReject</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">waitAndMaybeReject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// wait 1 giây</span>\n  <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> isHeads <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">round</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isHeads<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Thành công zòi\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token known-class-name class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Xui thôi!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Sau 1 giây, nó sẽ trả về một <code class=\"language-text\">Promise</code>, <em>hên hên</em> thì resolve cho giá trị <em>Thành công zòi</em>, xui xui thì cho giá trị <em>Xui thôi!</em>.</p>\n<p>Giờ khi chúng ta gọi hàm <code class=\"language-text\">waitAndMaybeReject()</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">waitAndMaybeReject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Oh No!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Khi viết như vậy, chúng ta sẽ luôn nhận được kết quả <strong>fulfill với giá trị undefined, không có waiting</strong></p>\n<p>Bởi vì chúng ta không có <strong>await</strong> trên kết quả trả về của <code class=\"language-text\">waitAndMaybeReject()</code>, nói chúng là chúng ta ko có phục thuộc gì vào việc gọi hàm <code class=\"language-text\">waitAndMaybeReject()</code>. Code như vậy là sai nghe các bạn.</p>\n<p>Rồi giờ chúng ta sẽ <strong>await</strong> trên kết quả của hàm <code class=\"language-text\">waitAndMaybeReject()</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">waitAndMaybeReject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Oh No!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Hàm này khi thực thi nó sẽ chạy như sau, <strong>đợi 1 giây</strong>, sau đó hoặc là trả về <strong>fulfill với undefined</strong>, hoặc <strong>fulfill với 'Oh No!'</strong></p>\n<p>Bởi vì chúng ta <em>chỉ await trên <code class=\"language-text\">waitAndMaybeReject()</code></em>, việc <em>xui xui</em> bị reject trong <code class=\"language-text\">waitAndMaybeReject</code> sẽ throw ra lỗi và được túm lấy trong hàm <code class=\"language-text\">test</code>. Và vì không làm gì hết khi <code class=\"language-text\">waitAndMaybeReject()</code> khi được resolve, nên chúng ta nhận về <em>undefined</em></p>\n<p>Rồi, giờ tới trường hợp <code class=\"language-text\">return</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">waitAndMaybeReject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Oh No!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nó sẽ thực thi như sau, <strong>đợi một giây</strong>, sau đó hoặc là <strong>fulfill với giá trị Thành công zòi</strong> hoặc <strong>reject với giá trị Xui thôi!</strong></p>\n<p>Với việc <code class=\"language-text\">return waitAndMaybeReject</code>, chúng ta đã chuyển tiếp hết kết quả trả về của <code class=\"language-text\">waitAndMaybeReject</code>, đồng nghĩa với việc <code class=\"language-text\">catch</code> bên trong hàm <code class=\"language-text\">test</code> chả bao giờ chạy tới.</p>\n<p><code class=\"language-text\">return await</code> thì sao?</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token function\">waitAndMaybeReject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Oh No!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nó sẽ thực thi như sau, <strong>đợi sau một giây</strong> sau đó trả về <strong>fulfill với giá trị Thành công zòi</strong> hoặc <strong>fulfill với giá trị Oh No!</strong></p>\n<p>Vì chúng ta <code class=\"language-text\">await</code> trên kết quả cả <code class=\"language-text\">waitAndMaybeReject()</code>, reject của hàm <code class=\"language-text\">waitAndMaybeReject()</code> sẽ đẩy về throw của hàm <code class=\"language-text\">test</code>, kết quả là <strong>Oh No!</strong>. Nếu <code class=\"language-text\">waitAndMaybeReject</code> được resolve, chúng ta return kết quả này, chính là <strong>Thành công zòi</strong></p>\n<p>Có thể viết như thế này cho dễ hình dung hơn</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fulfilledValue <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">waitAndMaybeReject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> fulfilledValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Oh No!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<blockquote>\n<p>Lưu ý cuối cùng: Nếu không dùng try/catch mà return await sẽ rất dư thừa</p>\n</blockquote>\n<p><a href=\"https://jakearchibald.com/2017/await-vs-return-vs-return-await/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">await vs return vs return await</a></p>\n"}},{"node":{"title":"5 câu hỏi javascript và cách đánh bại chúng","path":"/5-cau-hoi-javascript-va-cach-danh-bai-chung/","date":"21. July 2020","timeToRead":4,"desc":"Mỗi công ty mỗi kiểu phỏng vấn, điều hay bị phàn nàn trong các buổi phỏng vấn là phần lớn nó không liên quan tới những công việc hằng ngày mà vị trí đó đòi hỏi.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#x%C3%A1c-%C4%91%E1%BB%8Bnh-chu%E1%BB%97i-%C4%91%E1%BB%91i-x%E1%BB%A9ng-palindrome\">Xác định chuỗi đối xứng (palindrome)</a></li>\n<li><a href=\"#fizzbuzz\">FizzBuzz</a></li>\n<li><a href=\"#%C4%91%E1%BA%A3o-ch%E1%BB%AF\">Đảo chữ</a></li>\n<li><a href=\"#%C4%91%E1%BA%BFm-s%E1%BB%91-nguy%C3%AAn-%C3%A2m\">Đếm số nguyên âm</a></li>\n<li><a href=\"#fibonacci\">Fibonacci</a></li>\n</ul>\n<!-- /TOC -->\n<p>Có những lúc thấy các vấn đề liên quan trực tiếp tới frontend như các sự kiện của DOM, tương thích trên các trình duyệt khác nhau, phương pháp làm layout lại không được hỏi. Những người đứng vị trí tuyển dụng sẽ nhìn nhận như thế này</p>\n<blockquote>\n<p>Chúng tôi thích thuê những người thông minh, chứ không thích người biết rõ về một kỹ thuật nào đó, nhưng lại thiếu sáng tạo, thiếu logic và thiếu biện chứng.</p>\n</blockquote>\n<p>Dù là quan điểm nào đi nữa, nhưng phỏng vấn thì coding challenge vẫn là một phần quan trọng trong phỏng vấn.</p>\n<h2 id=\"xác-định-chuỗi-đối-xứng-palindrome\"><a href=\"#x%C3%A1c-%C4%91%E1%BB%8Bnh-chu%E1%BB%97i-%C4%91%E1%BB%91i-x%E1%BB%A9ng-palindrome\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xác định chuỗi đối xứng (palindrome)</h2>\n<p>Chuỗi đối xứng là chuỗi khi đảo ký tự từ trái qua phải và từ phải qua trái không thay đổi, như chữ \"racecar\", \"anna\", \"tenet\". (Film tenet không biết khi nào mới chiếu, nghe đâu hoãn dài hơi vì covid)</p>\n<p>Yêu cầu, cho bạn một chuỗi, xác định nó phải là đối xứng không</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"racecar\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"table\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Đáp án</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">palindrome</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// chuyển qua lowercase trước</span>\n  str <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// chuyển thành array, reverse rồi so sánh</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    str <span class=\"token operator\">===</span>\n    str\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"fizzbuzz\"><a href=\"#fizzbuzz\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>FizzBuzz</h2>\n<p>Yêu cầu: viết một function đáp ứng những chuyện sau</p>\n<ul>\n<li>log ra các số từ 1 đến n, n là một parameter truyền vào</li>\n<li>log ra chữ <code class=\"language-text\">fizz</code> nếu là bội số của 3</li>\n<li>log ra buzz nếu là bội số của 5</li>\n<li>log ra fizzbuzz nếu là bội số của cả 3 và 5</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">fizzBuzz</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// fizz</span>\n<span class=\"token comment\">// 4</span>\n<span class=\"token comment\">// buzz</span></code></pre>\n<p>Để giải quyết bài toán này, chúng ta cần nhớ đến cách dùng <code class=\"language-text\">%</code> để biết được số dư của phép chia, trả về 0 là chia hết, ngược lại thì không chia hết</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">12</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 -> 12 không phải bội số của 5</span>\n<span class=\"token number\">12</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 -> 12 là bộ số của 3</span></code></pre>\n<p>Đáp án</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fizzBuzz</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// kiểm tra xem có là bội số của cả 3 và 5</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fizzbuzz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token comment\">// có phải là bội số của 3</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fizz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token comment\">// có phải là bội số của 5</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"buzz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"đảo-chữ\"><a href=\"#%C4%91%E1%BA%A3o-ch%E1%BB%AF\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đảo chữ</h2>\n<p>Yêu cầu: viết một function, params truyền vào 2 chuỗi, trả về <code class=\"language-text\">true</code> nếu 2 chuỗi này là dạng đảo của nhau và <code class=\"language-text\">false</code> cho trường hợp ngược lại.</p>\n<p>2 chuỗi gọi là đảo nhau nếu số ký tự hoàn toàn giống nhau (không kể hoa thường), chỉ khác thứ tự.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">anagram</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finder'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Friend'</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">--</span><span class=\"token operator\">></span> <span class=\"token boolean\">true</span>\n<span class=\"token function\">anagram</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bye'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> <span class=\"token boolean\">false</span></code></pre>\n<p>Đây là một cách làm</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// hàm helper để build một object làm nơi lưu trữ</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">buildCharObject</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> charObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> char <span class=\"token keyword\">of</span> str<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\"><span class=\"token charset\"><span class=\"token charset-punctuation punctuation\">[</span><span class=\"token charset-negation operator\">^</span><span class=\"token charclass class-name\">\\w</span><span class=\"token charset-punctuation punctuation\">]</span></span></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// nếu object đã chứa giá trị đang loop qua</span>\n    <span class=\"token comment\">// tăng giá trị nó lên 1,</span>\n    <span class=\"token comment\">// ngược lại, thêm mới ký tự này vào object với giá trị = 1</span>\n    charObj<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> charObj<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> charObj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// hàm chính</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">anagram</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">strA<span class=\"token punctuation\">,</span> strB</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// lưu giá trị của strA vào object</span>\n  <span class=\"token keyword\">const</span> aCharObject <span class=\"token operator\">=</span> <span class=\"token function\">buildCharObject</span><span class=\"token punctuation\">(</span>strA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// lưu giá trị strB vào object</span>\n  <span class=\"token keyword\">const</span> bCharObject <span class=\"token operator\">=</span> <span class=\"token function\">buildCharObject</span><span class=\"token punctuation\">(</span>strB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// so sánh độ dài giữa 2 object</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>aCharObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">!==</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>bCharObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// đã chắc chắn về length giống nhau</span>\n  <span class=\"token comment\">// kiểm tra tiếp số lượng các ký tự có giống nhau</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> char <span class=\"token keyword\">in</span> aCharObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aCharObject<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> bCharObject<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"đếm-số-nguyên-âm\"><a href=\"#%C4%91%E1%BA%BFm-s%E1%BB%91-nguy%C3%AAn-%C3%A2m\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đếm số nguyên âm</h2>\n<p>Nguyên âm: anh-ôm-em-ú-ì, <code class=\"language-text\">a</code>, <code class=\"language-text\">o</code>, <code class=\"language-text\">e</code>, <code class=\"language-text\">u</code>, <code class=\"language-text\">i</code>.</p>\n<p>Viết một function nhận vào string, trả về số lượng nguyên âm có trong string</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">findVowels</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// --> 2</span>\n<span class=\"token function\">findVowels</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"why\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// --> 0</span></code></pre>\n<p>Đáp án</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">findVowels</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> vowels <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"u\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> char <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vowels<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Có thể dùng regular expression</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">findVowels</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> matched <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\"><span class=\"token charset\"><span class=\"token charset-punctuation punctuation\">[</span>aeiou<span class=\"token charset-punctuation punctuation\">]</span></span></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gi</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> matched <span class=\"token operator\">?</span> matches<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"fibonacci\"><a href=\"#fibonacci\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Fibonacci</h2>\n<p>Cái này kinh điển. Mọi dân lập trình đều đụng tới dãy số fibonacci, thật thiếu sót nếu không đề cập ở đây.</p>\n<p>Fibonacci là dãy số, mà số bên phải = tổng 2 số đứng bên trái. Như thế này: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34</p>\n<p>Yêu cầu: một function nhận params là n, trả về giá trị <code class=\"language-text\">n</code> trong dãy fibonacci</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// --> 2</span></code></pre>\n<p>Đáp án</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fibonacci</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> prevNum1 <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> prevNum2 <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>prevNum1 <span class=\"token operator\">+</span> prevNum2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>hoặc dùng đệ quy</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fibonacci</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// nếu là 1 hoặc 0</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// từ 2 trở lên</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chúc các bạn phỏng vấn vui vẻ!</p>\n<p><a href=\"https://www.sitepoint.com/5-common-coding-interview-challenges/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to Beat 5 Common JavaScript Interview Challenges</a></p>\n"}},{"node":{"title":"10 câu hỏi javascript để nâng cao trình độ","path":"/10-cau-hoi-javascript-de-nang-cao-trinh-do/","date":"18. June 2020","timeToRead":4,"desc":"Cùng ôn luyện kiến thức javascript bằng 10 câu hỏi lắc léo","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#1-so-s%C3%A1nh-sort-c%E1%BB%A7a-array\">1. So sánh sort của Array</a></li>\n<li><a href=\"#2-set-c%E1%BB%A7a-c%C3%A1c-object\">2. Set của các Object</a></li>\n<li><a href=\"#3-mutate-m%E1%BB%99t-object\">3. Mutate một object</a></li>\n<li><a href=\"#4-prototype-inheritance\">4. prototype inheritance</a></li>\n<li><a href=\"#5-th%E1%BB%A9-t%E1%BB%B1-resolve-promiseall\">5. Thứ tự resolve Promise.all</a></li>\n<li><a href=\"#6-t%C3%ADnh-to%C3%A1n-v%E1%BB%9Bi-reduce\">6. Tính toán với reduce</a></li>\n<li><a href=\"#7-%C4%91i%E1%BB%81u-ki%E1%BB%87n-r%C3%BAt-r%E1%BB%8Dn-short-circuit\">7. Điều kiện rút rọn (short-circuit)</a></li>\n<li><a href=\"#8-spread-v%C3%A0-rename\">8. Spread và Rename</a></li>\n<li><a href=\"#9-binding-cho-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-array\">9. Binding cho phương thức array</a></li>\n<li><a href=\"#10-%C4%91%E1%BA%B7t-unique-v%C3%A0-s%E1%BA%AFp-x%E1%BA%BFp\">10. Đặt unique và sắp xếp</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"1-so-sánh-sort-của-array\"><a href=\"#1-so-s%C3%A1nh-sort-c%E1%BB%A7a-array\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. So sánh sort của Array</h2>\n<p>Giá trị log ra là gì</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>\n    arr1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> arr1\n    arr2<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> arr2\n    arr1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> arr2<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Trước tiên chúng ta cần biết hàm sort nó làm cái gì, nó sắp xếp lại các phần tử, <em>hiển nhiên</em>, sau đó trả về cho tham chiếu ban đầu, không thay đổi tham chiếu gốc.</p>\n<p>Đáp án: <strong>true, true, false</strong></p>\n<h2 id=\"2-set-của-các-object\"><a href=\"#2-set-c%E1%BB%A7a-c%C3%A1c-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Set của các Object</h2>\n<p>Nếu có một <code class=\"language-text\">Set</code> bao gồm các object sau, giá trị log ra là gì</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mySet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>mySet<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Khi tạo một object <code class=\"language-text\">Set</code> nó sẽ xóa các giá trị trùng nhau, tuy nhiên <code class=\"language-text\">{ a: 1} # { a: 1}</code>, dù là giá trị trùng nhau, nhưng nó vẫn tham chiếu khác nhau. Chỉ khi chúng ta viết như bên dưới nó mới tự xóa giá trị trùng</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>obj<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Đáp án <strong><code class=\"language-text\">[{a: 1}, {a: 1}]</code></strong></p>\n<h2 id=\"3-mutate-một-object\"><a href=\"#3-mutate-m%E1%BB%99t-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Mutate một object</h2>\n<p>Với đoạn code sau, kết quả log ra sẽ được gì</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Joe\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n  pet<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"kitty kitty\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">freeze</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuser<span class=\"token punctuation\">.</span><span class=\"token property-access\">pet</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"meo meo\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">pet</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code class=\"language-text\">Object.freeze</code> chỉ thực hiện freeze level 1 của object, nếu có mutate những level thấp hơn, vẫn được như thường.</p>\n<p>Đáp án: <strong>meo meo</strong></p>\n<h2 id=\"4-prototype-inheritance\"><a href=\"#4-prototype-inheritance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. prototype inheritance</h2>\n<p>Chúng ta có một constructor function <code class=\"language-text\">Dog</code>. Giá trị log sẽ là gì</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Dog</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">speak</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"woof\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pogo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Dog</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">speak</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"chihuahua\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Khi chúng ta <code class=\"language-text\">new Dog</code>, chúng ta đã gán giá trị cho <code class=\"language-text\">speak</code> là một function trả về <code class=\"language-text\">woof</code>. Phương thức <code class=\"language-text\">speak</code> bên dưới sẽ không bao giờ được gọi.</p>\n<p>Đáp án: <strong>woof</strong></p>\n<h2 id=\"5-thứ-tự-resolve-promiseall\"><a href=\"#5-th%E1%BB%A9-t%E1%BB%B1-resolve-promiseall\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. Thứ tự resolve Promise.all</h2>\n<p>Chúng ta có một hàm <code class=\"language-text\">timer</code> trả về một <code class=\"language-text\">Promise</code> sẽ được resolve sau một khoảng thời gian ngẫu nhiên. Chúng ta dùng <code class=\"language-text\">Promise.all</code> để resolve toàn bộ array <code class=\"language-text\">timer</code>. Giá trị log ra là gì, hay là giá trị ngẫu nhiên?</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">timer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> all <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Thứ tự resolve không quan trọng với <code class=\"language-text\">Promise.all</code>, chúng ta có thể hoàn toàn tin tưởng thứ tự trả về sẽ đúng với thứ tự chúng ta khai báo.</p>\n<p>Đáp án: <strong>first, second</strong></p>\n<h2 id=\"6-tính-toán-với-reduce\"><a href=\"#6-t%C3%ADnh-to%C3%A1n-v%E1%BB%9Bi-reduce\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6. Tính toán với reduce</h2>\n<p>Giá trị log ra sẽ là?</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> x <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> x <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> x <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">agg<span class=\"token punctuation\">,</span> el</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> agg <span class=\"token operator\">+</span> <span class=\"token function\">el</span><span class=\"token punctuation\">(</span>agg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Với <code class=\"language-text\">Array.reduce</code> được truyền vào giá trị khởi tạo là 1 (cho biến <code class=\"language-text\">agg</code>), chúng ta loop qua các hàm trong mảng theo thứ tự</p>\n<pre class=\"language-text\"><code class=\"language-text\">1 + 1 * 1 = 2\n2 + 2 * 2 = 6\n6 + 6 * 3 = 24\n24 + 24 * 4 = 120</code></pre>\n<p>Đáp án: <strong>120</strong></p>\n<h2 id=\"7-điều-kiện-rút-rọn-short-circuit\"><a href=\"#7-%C4%91i%E1%BB%81u-ki%E1%BB%87n-r%C3%BAt-r%E1%BB%8Dn-short-circuit\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>7. Điều kiện rút rọn (short-circuit)</h2>\n<p>Kết quả log ra là...</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> notifications <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You have </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>notifications<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> notifications</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>notifications <span class=\"token operator\">!==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"s\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Cầu điều kiện rút gọn <code class=\"language-text\">notifications !== 1 &amp;&amp; &#39;s&#39;</code> sẽ return <code class=\"language-text\">false</code> (dạng chuỗi). Chúng ta phải viết là <code class=\"language-text\">notifications !== 1 ? &#39;&#39; : &#39;s&#39;</code></p>\n<p>Đáp án: <strong>You have 1 notificationfalse</strong></p>\n<h2 id=\"8-spread-và-rename\"><a href=\"#8-spread-v%C3%A0-rename\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>8. Spread và Rename</h2>\n<p>Chuyện gì xảy ra khi chúng ta spread mảng ra và thay đổi giá trị của object đầu tiên</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> firstName<span class=\"token operator\">:</span> <span class=\"token string\">\"luckyluu\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>arr1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">firstName</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"vuilaptrinh\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Spread chỉ tạo một shallow copy, nghĩa là object bên trong mảng ban đầu cũng chỉ tham chiếu đến <code class=\"language-text\">arr1</code>, nên thay đổi giá trị này từ <code class=\"language-text\">arr2</code> sẽ ảnh hưởng đến <code class=\"language-text\">arr1</code></p>\n<p>Đáp án: <strong>vuilaptrinh</strong></p>\n<h2 id=\"9-binding-cho-phương-thức-array\"><a href=\"#9-binding-cho-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-array\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>9. Binding cho phương thức array</h2>\n<p>Kết quả log ra là gì</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Khi gọi <code class=\"language-text\">[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;].map</code> nó sẽ gọi <code class=\"language-text\">Array.prototype.map</code> với giá trị <code class=\"language-text\">this</code> là <code class=\"language-text\">[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</code>. Tuy nhiên khi sử dụng như một <strong>tham chiếu</strong>, thay vì gọi, nó trỏ đến <code class=\"language-text\">Array.prototype.map</code>, <code class=\"language-text\">bind</code> sẽ đặt giá trị <code class=\"language-text\">this</code> này thành <code class=\"language-text\">[1,2,3]</code></p>\n<p>Đáp án: <strong>1 2 3</strong></p>\n<h2 id=\"10-đặt-unique-và-sắp-xếp\"><a href=\"#10-%C4%91%E1%BA%B7t-unique-v%C3%A0-s%E1%BA%AFp-x%E1%BA%BFp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>10. Đặt unique và sắp xếp</h2>\n<p>Trong code ở dưới chúng ta dùng object <code class=\"language-text\">Set</code> và spread để tạo một mảng mới. Giá trị log ra là gì ( những phần tử có bị force thành unique? chúng có được sắp xếp không?)</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code class=\"language-text\">Set</code> sẽ force các phần tử thành unique, trung nhau sẽ bị bỏ qua, nhưng không thay đổi thứ tự. <code class=\"language-text\">arr</code> sẽ có giá trị <code class=\"language-text\">[3, 1, 2, 4]</code></p>\n<p>Đáp án: <strong>4 2</strong></p>\n<p><a href=\"https://dev.to/nas5w/10-javascript-quiz-questions-and-answers-to-sharpen-your-skills-255m\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">10 JavaScript Quiz Questions and Answers to Sharpen Your Skills</a></p>\n"}},{"node":{"title":"5 điểm khác nhau giữa function thường và arrow function","path":"/5-diem-khac-nhau-giua-function-thuong-va-arrow-function/","date":"30. May 2020","timeToRead":3,"desc":"Lựa chọn cách viết nào cho phù hợp theo tính huống đang cần là cái chúng ta sẽ có được câu trả lời khi đi qua 5 điểm khác biệt này","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#1-gi%C3%A1-tr%E1%BB%8B-c%E1%BB%A7a-this\">1. giá trị của <code class=\"language-text\">this</code></a></li>\n<li><a href=\"#2-constructor\">2. Constructor</a></li>\n<li><a href=\"#3-object-arguments\">3. Object <code class=\"language-text\">arguments</code></a></li>\n<li><a href=\"#4-ng%E1%BA%A7m-%C4%91%E1%BB%8Bnh-c%C3%B3-return\">4. Ngầm định có <code class=\"language-text\">return</code></a></li>\n<li><a href=\"#5-ph%C6%B0%C6%A1ng-th%E1%BB%A9c\">5. Phương thức</a></li>\n</ul>\n<!-- /TOC -->\n<p>Function <em>thường</em> là những function được khai báo ở 2 dạng sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Còn arrow function là dạng chắc ai cũng biết</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"1-giá-trị-của-this\"><a href=\"#1-gi%C3%A1-tr%E1%BB%8B-c%E1%BB%A7a-this\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. giá trị của <code class=\"language-text\">this</code></h2>\n<p>Với function thường giá trị của <code class=\"language-text\">this</code> khá <em>khó lường</em>, tùy thuộc thời điểm chúng ta gọi nó. Như tình huống sau, nếu không có strict mode, thì giá trị nó là global object (window), còn có strict mode nó sẽ là <code class=\"language-text\">undefined</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => global object (window)</span></code></pre>\n<p>Giá trị nó sẽ tùy thuộc vào <strong>ngữ cảnh</strong>, như trong trường hợp này, nó chính là object <em>chính chủ</em> của phương thức</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmyObject<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => \"myObject\"</span></code></pre>\n<p>Với arrow function, <code class=\"language-text\">this</code> sẽ luôn bằng với giá trị của function ở ngoài, arrow function không khai báo thêm vùng <em>tự trị</em> riêng (execution context), mà dùng chung với thằng cha</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">myMethod</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"myObject\"</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"myObject\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    items<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmyObject<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">myMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Đây là một đặc tính giúp chúng ta không còn dùng đến <code class=\"language-text\">self = this</code> hay <code class=\"language-text\">callback.bind(this)</code></p>\n<h2 id=\"2-constructor\"><a href=\"#2-constructor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Constructor</h2>\n<p>Để khởi tạo một object với function bình thường</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Car</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">color</span> <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> redCar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nredCar <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => true</span></code></pre>\n<p>Cũng không có <em>vùng tự trị</em> riêng, nên arrow function không thể dùng như một constructor</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Car</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">color</span> <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> redCar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => TypeError: Car is not a constructor</span></code></pre>\n<h2 id=\"3-object-arguments\"><a href=\"#3-object-arguments\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Object <code class=\"language-text\">arguments</code></h2>\n<p>Bên trong một function thông thường sẽ được <em>nhét</em> thêm một object <em>đặc biệt</em> <code class=\"language-text\">arguments</code>, chứa toàn bộ tham số truyền vào cho function đó</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => { 0: 'a', 1: 'b'}</span></code></pre>\n<p>Arrow function sẽ không có object này, và nếu bạn đặt nó vào trong một function bình thường, thì lúc đó giá trị <code class=\"language-text\">arguments</code> này sẽ của thằng bọc ngoài</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myRegularFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myArrowFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">myArrowFunction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">myRegularFunction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => { 0: 'a', 1: 'b' }</span></code></pre>\n<h2 id=\"4-ngầm-định-có-return\"><a href=\"#4-ng%E1%BA%A7m-%C4%91%E1%BB%8Bnh-c%C3%B3-return\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Ngầm định có <code class=\"language-text\">return</code></h2>\n<p>Với function thông thường, chúng ta phải rất <em>rõ ràng</em> là <code class=\"language-text\">return</code> về cái gì</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 42</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">myEmptyFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">myEmptyFunction2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">myEmptyFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => undefined</span>\n<span class=\"token function\">myEmptyFunction2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => undefined</span></code></pre>\n<p>Với arrow function nó có hơi đặc biệt, nếu chỉ có một <em>expression</em>, bỏ qua dấu ngoặc đơn luôn, thì giá trị của <em>expression</em> sẽ được return</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token number\">41</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 42</span></code></pre>\n<h2 id=\"5-phương-thức\"><a href=\"#5-ph%C6%B0%C6%A1ng-th%E1%BB%A9c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. Phương thức</h2>\n<p>Các function thông thường sẽ là lựa chọn hàng đầu khi viết phương thức cho <code class=\"language-text\">class</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">heroName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">heroName</span> <span class=\"token operator\">=</span> heroName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">logName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">heroName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> batman <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Batman\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nhưng khi bạn không muốn thay đổi giá trị của <code class=\"language-text\">this</code>, arrow function sẽ là lựa chọn hợp lý hơn</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">heroName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">heroName</span> <span class=\"token operator\">=</span> heroName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">logName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">heroName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> batman <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Batman\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><a href=\"https://dmitripavlutin.com/differences-between-arrow-and-regular-functions/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dmitripavlutin.com/differences-between-arrow-and-regular-functions/</a></p>\n"}},{"node":{"title":"Functional programing nên và không nên","path":"/functional-programing-nen-va-khong-nen/","date":"17. May 2020","timeToRead":3,"desc":"","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#lu%C3%B4n-tr%E1%BA%A3-v%E1%BB%81-gi%C3%A1-tr%E1%BB%8B\">Luôn trả về giá trị</a></li>\n<li><a href=\"#module-h%C3%B3a\">Module hóa</a></li>\n<li><a href=\"#h%E1%BB%A3p-th%E1%BB%83-ko-k%E1%BA%BF-th%E1%BB%ABa-composition-vs-inheritance\">Hợp thể ko kế thừa (composition vs. inheritance)</a></li>\n<li><a href=\"#ghi-nh%E1%BB%9B-khi-c%E1%BA%A7n-thi%E1%BA%BFt\">Ghi nhớ khi cần thiết</a></li>\n<li><a href=\"#kh%C3%B4ng-thay-%C4%91%E1%BB%95i-gi%C3%A1-tr%E1%BB%8B-g%E1%BB%91c\">Không thay đổi giá trị gốc</a></li>\n<li><a href=\"#kh%C3%B4ng-d%C3%B9ng-v%C3%B2ng-l%E1%BA%B7p-for\">Không dùng vòng lặp <code class=\"language-text\">for</code></a></li>\n<li><a href=\"#kh%C3%B4ng-d%C3%B9ng-switchcase\">Không dùng <code class=\"language-text\">switch...case</code></a></li>\n<li><a href=\"#trycatch\">Try...catch</a></li>\n<li><a href=\"#undefined-v%C3%A0-null\">Undefined và null</a></li>\n<li><a href=\"#class\">Class</a></li>\n<li><a href=\"#%C4%91%E1%BA%B7t-t%C3%AAn-function\">Đặt tên function</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"luôn-trả-về-giá-trị\"><a href=\"#lu%C3%B4n-tr%E1%BA%A3-v%E1%BB%81-gi%C3%A1-tr%E1%BB%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Luôn trả về giá trị</h2>\n<p><strong>Luôn trả về giá trị</strong>, kể cả nhưng hàm chỉ tạo side-effect, ngoài ra giá trị trả về còn nên cố định luôn một kiểu, không nên lúc kiểu này lúc kiểu khác, giữ giá trị thô, đừng lưu giá trị đã định dạng (như format tiền tệ, ngày tháng), dùng tham số, đừng hard-code</p>\n<p>❌ Không ngon</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  result <span class=\"token operator\">*=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fact of 5: \"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>✅ Chuẩn cơm mẹ nấu</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fact</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> n <span class=\"token operator\">*</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fact of 5: \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"module-hóa\"><a href=\"#module-h%C3%B3a\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Module hóa</h2>\n<p>Tách bạch một module chỉ làm một việc, và làm thật tốt việc đó</p>\n<h2 id=\"hợp-thể-ko-kế-thừa-composition-vs-inheritance\"><a href=\"#h%E1%BB%A3p-th%E1%BB%83-ko-k%E1%BA%BF-th%E1%BB%ABa-composition-vs-inheritance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hợp thể ko kế thừa (composition vs. inheritance)</h2>\n<p>Kế thừa <strong>KHÔNG</strong> phải là cách chúng ta xử lý dữ liệu, behavior trong functional programing</p>\n<h2 id=\"ghi-nhớ-khi-cần-thiết\"><a href=\"#ghi-nh%E1%BB%9B-khi-c%E1%BA%A7n-thi%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ghi nhớ khi cần thiết</h2>\n<p>Với pure function, việc ghi nhớ (memoize) kết quả được xem là an toàn vì cùng input-cùng output.</p>\n<p>Ví dụ dùng hàm <code class=\"language-text\">memize</code> của thư viện Ramda</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fact <span class=\"token operator\">=</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">===</span> n <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> n <span class=\"token operator\">*</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fact</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Calculates fact for 5, 4, 3 ...</span>\n<span class=\"token function\">fact</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Instantaneous</span>\n<span class=\"token function\">fact</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Instantaneous</span></code></pre>\n<h2 id=\"không-thay-đổi-giá-trị-gốc\"><a href=\"#kh%C3%B4ng-thay-%C4%91%E1%BB%95i-gi%C3%A1-tr%E1%BB%8B-g%E1%BB%91c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Không thay đổi giá trị gốc</h2>\n<p>❌ Không ngon</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> approved <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> approved<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">score</span> <span class=\"token operator\">>=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    approved<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>approved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>✅ Chuẩn cơm mẹ nấu</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> approved <span class=\"token operator\">=</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">score</span> <span class=\"token operator\">>=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"không-dùng-vòng-lặp-for\"><a href=\"#kh%C3%B4ng-d%C3%B9ng-v%C3%B2ng-l%E1%BA%B7p-for\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Không dùng vòng lặp <code class=\"language-text\">for</code></h2>\n<p>Mặc dù vòng lặp <code class=\"language-text\">for</code> nhanh nhất trong các vòng lặp, tuy nhiên nghiêm cấm sử dụng để tránh gây ra một side-effect không cố ý.</p>\n<p>❌ Không ngon</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> even <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    even<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>even<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0, 2, 4, 6, 8 ...]</span></code></pre>\n<p>✅ Chuẩn cơm mẹ nấu</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> filter<span class=\"token punctuation\">,</span> range <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"ramda\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> even <span class=\"token operator\">=</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">even</span><span class=\"token punctuation\">(</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0, 2, 4, 6, 8 ...]</span></code></pre>\n<h2 id=\"không-dùng-switchcase\"><a href=\"#kh%C3%B4ng-d%C3%B9ng-switchcase\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Không dùng <code class=\"language-text\">switch...case</code></h2>\n<p>❌ Không ngon</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Wesley\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"Dayana\"</span><span class=\"token operator\">:</span>\n    result <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" is cool!\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"Wesley\"</span><span class=\"token operator\">:</span>\n    result <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" likes farting\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token string\">\"Who is \"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"?\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wesley likes farting</span></code></pre>\n<p>✅ Chuẩn cơm mẹ nấu</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> cond<span class=\"token punctuation\">,</span> propEq <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"ramda\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> getDescription <span class=\"token operator\">=</span> <span class=\"token function\">cond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token function\">propEq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Dayana\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is cool!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token function\">propEq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Wesley\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> likes farting</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Who is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">?</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Wesley\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wesley likes farting</span></code></pre>\n<h2 id=\"trycatch\"><a href=\"#trycatch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Try...catch</h2>\n<p>❌ Không ngon</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">property</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>✅ Chuẩn cơm mẹ nấu</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> tryCatch <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"ramda\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Either</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"ramda-fantasy\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> computation <span class=\"token operator\">=</span> <span class=\"token function\">tryCatch</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">property</span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">Either</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Right</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">Either</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Left</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">computation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Left&lt;TypeError></span></code></pre>\n<h2 id=\"undefined-và-null\"><a href=\"#undefined-v%C3%A0-null\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Undefined và null</h2>\n<p>Không có giá trị (undefined, null) dẫn đến chuyện phải verify khá nhiều thứ và điều kiện nối điều kiện. Sử dụng <code class=\"language-text\">Maybe</code></p>\n<p>❌ Không ngon</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">safeDiv</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">safeDiv</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ops</span></code></pre>\n<p>✅ Chuẩn cơm mẹ nấu</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Maybe</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"ramda-fantasy\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">safeDiv</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">===</span> b <span class=\"token operator\">?</span> <span class=\"token maybe-class-name\">Maybe</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Nothing</span></span> <span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Maybe</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\"><span class=\"token maybe-class-name\">Just</span></span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">safeDiv</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">chain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Never falls here</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"class\"><a href=\"#class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Class</h2>\n<p>Nói chung, sử dụng <code class=\"language-text\">class</code> chúng ép buộc phải tạo ra effect và thao tác trực tiếp đến đối tượng gốc.</p>\n<p>❌ Không ngon</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cassandra\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>✅ Chuẩn cơm mẹ nấu</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> lensProp<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> set <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"ramda\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> setName <span class=\"token operator\">=</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token function\">lensProp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> getName <span class=\"token operator\">=</span> <span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cassandra\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"đặt-tên-function\"><a href=\"#%C4%91%E1%BA%B7t-t%C3%AAn-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đặt tên function</h2>\n<ul>\n<li>Có một <strong>động từ</strong> mô tả cái nó sẽ làm</li>\n<li>Mô tả được bên trong nó làm cái gì (tất nhiên là ngắn gọn nhất có thể)</li>\n<li>Nếu có cùng concept, sử dụng một từ chung</li>\n<li>Chỉ làm một việc duy nhất</li>\n<li>Không mô tả nó làm như thế nào</li>\n<li>Nếu gặp khó khăn trong việc đặt tên function, có thể bạn đã không đúng khi gom quá nhiều xử lý vào nó (ôm đồm xử lý)</li>\n</ul>\n"}},{"node":{"title":"Hiểm nguy rình rập khi dùng toán tử + trong javascript","path":"/hiem-nguy-rinh-rap-khi-dung-toan-tu-trong-javascript/","date":"5. April 2020","timeToRead":1,"desc":"Một toán tử phình phường có thể làm chúng ta điêu đứng","content":"<p>Như mọi thứ ngôn ngữ lập trình, ngôn ngữ toán học, Javascript dùng dấu <code class=\"language-text\">+</code> để thực hiện cộng giá trị. Tuy nhiên, vì là Javascript, anh <em>có quyền</em> không đi theo quy chuẩn chung, anh còn được dùng cho việc <strong>nối chuỗi</strong></p>\n<p>Nếu chúng ta dùng nó cho việc cộng số</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> giaKhauTrangBinhThuong <span class=\"token operator\">=</span> <span class=\"token number\">35000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> doiGiaDichCovy <span class=\"token operator\">=</span> <span class=\"token number\">300000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> tienShip <span class=\"token operator\">=</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> chiPhiMuaHopKhauTrang <span class=\"token operator\">=</span> giaKhauTrangBinhThuong <span class=\"token operator\">*</span> doiGiaDichCovy <span class=\"token operator\">+</span> tienShip<span class=\"token punctuation\">;</span></code></pre>\n<p>Chúng ta dùng nó cho việc <strong>nối chuỗi</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ten <span class=\"token operator\">=</span> <span class=\"token string\">\"Tui là An\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> nenLamGi <span class=\"token operator\">=</span> <span class=\"token string\">\"Tui ở nhà cho Bình An\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> tuiLaAi <span class=\"token operator\">=</span> ten <span class=\"token operator\">+</span> <span class=\"token string\">' &amp; '</span> <span class=\"token operator\">+</span> nenLamGi<span class=\"token punctuation\">;</span></code></pre>\n<p>Chúng ta sẽ có câu \"Tui là An &#x26; Tui ở nhà cho Bình An\", mọi thứ hoạt động bình thường.</p>\n<p>Thí dụ bạn <strong>lỡ</strong> viết thế này thì sao</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> seRaSao <span class=\"token operator\">=</span> <span class=\"token number\">9</span> <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Khi có 2 giá trị khác kiểu, nó sẽ ưu tiên kiểu giá trị mạnh hơn, là kiếu <code class=\"language-text\">string</code> nên kết quả chúng ta nhận là \"91\" chữ không phải <code class=\"language-text\">10</code></p>\n<p>Điều đúc kết ở đây là gì, hễ chúng ta muốn cộng 2 con số lại, chuyển nó về giá trị số <code class=\"language-text\">Number(ten_bien)</code> trước cho chắc.</p>\n"}},{"node":{"title":"Định dạng ngày tháng bằng Intl.DateTimeFormat","path":"/dinh-dang-ngay-thang-bang-intl-date-time-format/","date":"26. February 2020","timeToRead":2,"desc":"","content":"<p>Trong javascript, hiệp hội quốc tế <strong>ECMAScript</strong> công bố một object tên là <strong>Intl</strong>, trong đó có chứa tất cả các phương thức liên quan tới bản địa hóa (ngôn ngữ, ngày tháng, định dạng tiền tệ, vâng vâng). Cùng lướt qua API <code class=\"language-text\">Intl.DateTimeFormat</code> được cung cấp</p>\n<p>Một chuỗi chuẩn ISO cho ngày tháng</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// \"2020-02-05T16:30:41.392Z\"</span></code></pre>\n<p>Được sử dụng trong thẻ HTML</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>time</span> <span class=\"token attr-name\">datetime</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2020-02-05T16:30:41.392Z<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Published on ...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>time</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>article:published_time<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2020-02-05T16:30:41.392Z<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p>Các công cụ tìm kiếm sẽ đọc các giá trị này một cách rất dễ dàng. Nhưng nếu là người bình thường chúng ta không <em>thích</em> như vậy, chuyển đổi qua lại giữa các định dạng theo từng khu vực là điều bắt buộc.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>time</span> <span class=\"token attr-name\">datetime</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2020-02-05T16:30:41.392Z<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Pubblicato il 05 Febbraio 2020<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>time</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>time</span> <span class=\"token attr-name\">datetime</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2020-02-05T16:30:41.392Z<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Published on February 05, 2020<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>time</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Sử dụng API để hiển thị cho dân US-UK</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> month<span class=\"token operator\">:</span> <span class=\"token string\">\"long\"</span><span class=\"token punctuation\">,</span> day<span class=\"token operator\">:</span> <span class=\"token string\">\"numeric\"</span><span class=\"token punctuation\">,</span> year<span class=\"token operator\">:</span> <span class=\"token string\">\"numeric\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>isoString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> americanDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>DateTimeFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"en-US\"</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><img src=\"https://www.valentinog.com/blog/static/74b4c25784e69862e30d7bb492baa1a6/a6d36/intl-datetimeformat.png\" alt=\"Định dạng ngày tháng bằng Intl.DateTimeFormat\"></p>\n<p>Để xem tài liệu đầy đủ, xem trên <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a></p>\n<p>Bạn sẽ thấy thằng <code class=\"language-text\">Intl.DateTimeFormat</code> sẽ cho kết quả tương tự như <code class=\"language-text\">toLocaleDateString</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> month<span class=\"token operator\">:</span> <span class=\"token string\">\"long\"</span><span class=\"token punctuation\">,</span> day<span class=\"token operator\">:</span> <span class=\"token string\">\"numeric\"</span><span class=\"token punctuation\">,</span> year<span class=\"token operator\">:</span> <span class=\"token string\">\"numeric\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> longDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleDateString</span><span class=\"token punctuation\">(</span>locale<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>Vậy xài cái nào?</strong>, ngắn gọn, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString#Performance\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Intl.DateTimeFormat</code> là lựa chọn sáng suốt xét trên phương diện tốc độ</a></p>\n<p>Cũng đáng nhắc đến, <code class=\"language-text\">format()</code> sẽ trả về ngày hiện tại nếu không truyền tham số cho nó.</p>\n<p><code class=\"language-text\">new Date()</code> hiển thị kết quả (<strong>không phải trả về</strong>) như thế này \"Wed Feb 05 2020 18:46:03 GMT+0100 (Central European Standard Time)\" khi gọi trong trình duyệt, cùng constructor đó gọi trong Node.js sẽ hiển thị (<strong>không phải trả về</strong>) chuỗi ISO \"2020-02-05T17:47:03.065Z\"</p>\n<p><a href=\"http://pop.frontendweekly.co/PnJd79\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Formatting dates in JavaScript with Intl.DateTimeFormat</a></p>\n"}},{"node":{"title":"7 lý do bạn không nên sử dụng TypeScript","path":"/7-ly-do-ban-khong-nen-su-dung-type-script/","date":"15. February 2020","timeToRead":4,"desc":"TypeScript có phải là con ác chủ bài, ngôn ngữ của tương lai, viết TypeScript thì mọi thứ sẽ không thể nào còn lỗi, những lý do khiến bạn phải suy nghĩ lại những nhận định trên","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#qu%C3%A1-m%E1%BA%A1o-hi%E1%BB%83m\">Quá mạo hiểm</a></li>\n<li><a href=\"#qu%C3%A1-r%E1%BB%91i-r%E1%BA%AFm\">Quá rối rắm</a></li>\n<li><a href=\"#kh%C3%B4ng-gi%E1%BA%A3i-quy%E1%BA%BFt-v%E1%BA%A5n-%C4%91%E1%BB%81\">Không giải quyết vấn đề</a></li>\n<li><a href=\"#ch%E1%BA%B3ng-thay-th%E1%BA%BF-ch%E1%BB%89-l%C3%A0-ph%E1%BA%A7n-m%E1%BB%9F-r%E1%BB%99ng\">Chẳng thay thế, chỉ là phần mở rộng</a></li>\n<li><a href=\"#m%C3%A3-ngu%E1%BB%93n-m%E1%BB%9F-c%C3%B3-th%E1%BA%ADt-v%E1%BA%ADy-kh%C3%B4ng\">Mã nguồn mở, có thật vậy không?</a></li>\n<li><a href=\"#c%C3%A1c-c%C3%B4ng-ty-l%E1%BB%9Bn-s%E1%BB%AD-d%E1%BB%A5ng\">Các công ty lớn sử dụng...</a></li>\n<li><a href=\"#nhi%E1%BB%81u-t%C3%ADnh-n%C4%83ng-h%C6%A1n\">Nhiều tính năng hơn</a></li>\n</ul>\n<!-- /TOC -->\n<p>Rất nhiều người yêu TypeScript, nó <em>\"giải quyết\"</em> rất nhiều vấn đề mà JS gặp phải, một ngôn ngữ <em>\"thay thế\"</em> cho JS, nó sẽ báo bạn ngay nếu code bạn có <em>vấn đề</em> và <em>dễ đọc</em> hơn. Có nhiều nhiều lý do được đưa ra để bạn nên dùng TypeScript, bài này ngược lại đưa cho bạn 7 lý do không nên dùng TypeScript</p>\n<h2 id=\"quá-mạo-hiểm\"><a href=\"#qu%C3%A1-m%E1%BA%A1o-hi%E1%BB%83m\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Quá mạo hiểm</h2>\n<p>Tại sao lại mạo hiểm? Nếu TypeScript thêm định nghĩa type và kiểm tra lúc compile, IDE còn thông báo ngay lúc nếu kiểu dữ liệu không khớp. Chính xác đó là lý do. TypeScript chỉ kiểm tra kiểu dữ liệu lúc compile và <em>chỉ</em> sử dụng kiểu có định nghĩa. Tất cả các network call, API và thư viện bổ sung chưa có type sẽ không có cách nào tương tác với TypeScript.</p>\n<p>Nếu trong JS, chúng ta không đặt giả định về kiểu sẽ nhận được, không tự nhủ \"cái này chắc chắn\" sẽ trả về kiểu <code class=\"language-text\">string</code>, chúng ta luôn biết phải kiểm tra giá trị thật sự của biến nhận được trước khi sử dụng. Với TS, bạn phụ thuộc compiler làm việc này, nhưng sẽ có rất nhiều thứ phải làm. Bạn vừa phải bỏ thời gian viết định nghĩa cho từng tỉ tỉ thứ, rồi bỏ thêm mớ thời gian để đảm bảo các định nghĩa bạn viết ra phải đúng lúc chạy, vậy mục tiêu cuối cùng của tất cả những thứ đó là gì?</p>\n<h2 id=\"quá-rối-rắm\"><a href=\"#qu%C3%A1-r%E1%BB%91i-r%E1%BA%AFm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Quá rối rắm</h2>\n<p>Mặt trái của sự thật: một ngôn ngữ được kỳ vọng sẽ đem đến sự minh bạch, sạch sẽ, dễ đọc hơn lại đem đến điều người lại. Để minh họa, hãy nhìn thử một đoạn TS sau</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// TODO: do this more elegantly</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>currentReducer <span class=\"token keyword\">as</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Reducer<span class=\"token operator\">&lt;</span>NewState<span class=\"token punctuation\">,</span>NewActions<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> nextReducer\n\n<span class=\"token keyword\">static</span> create<span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>subscribe<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>subscriber<span class=\"token operator\">:</span> Subscriber<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> TeardownLogic<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span>subscribe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đóng code trên lấy từ thư viện Redux và RxJS. Nếu bạn đang viết React và thích HOC, thì bạn sẽ hiểu viết bổ sung TypeScript sẽ đem đến mồ hôi và nước mắt cho các đồng nghiệp khác như thế nào.</p>\n<h2 id=\"không-giải-quyết-vấn-đề\"><a href=\"#kh%C3%B4ng-gi%E1%BA%A3i-quy%E1%BA%BFt-v%E1%BA%A5n-%C4%91%E1%BB%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Không giải quyết vấn đề</h2>\n<p>TS bảo là giải quyết các vấn đề mà JS đang gặp. Nhưng sự thật là KHÔNG. Dynamic typing chưa bao giờ là vấn đề với những lập trình viên JS (có mình luôn), bạn sẽ phàn nàn vậy \"NaN === NaN\" không phải là vấn đề sau, việc có cũng được không có cũng được dấu chấm phẩy <code class=\"language-text\">;</code> không phải là vấn đề à,... một vài lý do khác nữa. TypeScript cũng chẳng giải quyết như bạn tưởng tượng đâu, nó chỉ giới thiệu một chuẩn mới, làm phân cực công đồng JS thêm thôi.</p>\n<p>Thậm chí, nếu việc thiếu type trong JS là một vấn đề, TS không giải quyết luôn. Những ngôn ngữ thật sự giải quyết nó là Java, C, C# và các ngôn ngữ <code class=\"language-text\">compiled</code>.</p>\n<h2 id=\"chẳng-thay-thế-chỉ-là-phần-mở-rộng\"><a href=\"#ch%E1%BA%B3ng-thay-th%E1%BA%BF-ch%E1%BB%89-l%C3%A0-ph%E1%BA%A7n-m%E1%BB%9F-r%E1%BB%99ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chẳng thay thế, chỉ là phần mở rộng</h2>\n<p>TS sau cùng cũng complie về JS, nó không hề là <strong>một ngôn ngữ có thể thay thế</strong> JS như tự sướng. Những gì TypeScript có thể làm, sẽ bị giới hạn trong những gì JS làm được. Đừng ảo tưởng với TS là bạn đã đủ chinh chiến trên mọi chiến trường, đừng tin vào lời dối trá đó, hãy tìm hiểu nhiều hơn sức mạnh thực sự của JS và linh động kiểu dữ liệu mang lại gì cho bạn, lúc đó bạn sẽ thấy mình đã tiến xa hơn những gì cái khung TS đã đóng bạn lại.</p>\n<h2 id=\"mã-nguồn-mở-có-thật-vậy-không\"><a href=\"#m%C3%A3-ngu%E1%BB%93n-m%E1%BB%9F-c%C3%B3-th%E1%BA%ADt-v%E1%BA%ADy-kh%C3%B4ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mã nguồn mở, có thật vậy không?</h2>\n<p>Nhiều lý do đưa ra khi sử dụng TS là vì nó mã nguồn mở. Đúng, nhưng chưa đủ. Nó vẫn chịu sự chi phối từ Microsoft, một tập đoàn độc quyền khổng lồ nổi tiếng nhất thế giới, Microsoft chia sẻ mã nguồn nó như một động thái tiếp thị và lôi kéo thêm lập trình viên. Đừng lẫn lộn giữa mã nguồn mở với sự dân chủ: Microsoft vẫn ở đây và có quyền làm mọi thứ với TS, bạn chẳng làm gì được ngoài việc đứng nhìn. JS, lại khác, được cộng đồng đảm trách, sẽ không thay đổi bất cứ thứ gì nếu không được sự đồng ý từ số đông cộng đồng.</p>\n<h2 id=\"các-công-ty-lớn-sử-dụng\"><a href=\"#c%C3%A1c-c%C3%B4ng-ty-l%E1%BB%9Bn-s%E1%BB%AD-d%E1%BB%A5ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các công ty lớn sử dụng...</h2>\n<p>Không ít các cá nhân có trách nhiệm lựa chọn ngôn ngữ cho dự án lại đưa đây làm một lý do để sử dụng TS. Vậy có tính đến chuyện các công ty lớn cũng có những bộ codebase cũ mèm, lỗi thời. Việc người khác chọn một thứ gì đó, chắc gì thứ đó cũng hợp với mình.</p>\n<h2 id=\"nhiều-tính-năng-hơn\"><a href=\"#nhi%E1%BB%81u-t%C3%ADnh-n%C4%83ng-h%C6%A1n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nhiều tính năng hơn</h2>\n<p>Xưa rồi, khi TS được giới thiệu năm 2012, các tính năng như <code class=\"language-text\">class</code> chưa có trên JS. Nhưng nay đã là 2020, hơn 8 năm nay, JS đã tiến một bước rất xa, phải nói đúng hơn là giờ TS còn phải chạy theo JS</p>\n<p>Từ quan điểm của một cá nhân không thấy nhiều lợi ích mà TypeScript mang lại.</p>\n<p><a href=\"https://everyday.codes/javascript/7-really-good-reasons-not-to-use-typescript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">7 really good reasons not to use TypeScript</a></p>\n"}},{"node":{"title":"5 kinh nghiệm khi viết arrow function","path":"/5-kinh-nghiem-khi-viet-arrow-function/","date":"9. February 2020","timeToRead":2,"desc":"Sử dụng arrow function đã quá phổ biến, ai cũng biết nó là gì, không cần một bài giới thiệu vài dòng nữa, bài viết này chia sẻ 5 kinh nghiệm để bạn làm việc với arrow function thêm mượt mà","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#g%C3%A1n-t%C3%AAn-cho-arrow-function\">Gán tên cho arrow function</a></li>\n<li><a href=\"#inline-khi-n%C3%A0o-c%C3%B3-th%E1%BB%83\">Inline khi nào có thể</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-v%E1%BB%9Bi-ph%C3%A9p-so-s%C3%A1nh\">Sử dụng với phép so sánh</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-v%E1%BB%9Bi-object-literal\">Sử dụng với object literal</a></li>\n<li><a href=\"#h%E1%BA%A1n-ch%E1%BA%BF-l%E1%BB%93ng-nhi%E1%BB%81u-arrow-function\">Hạn chế lồng nhiều arrow function</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"gán-tên-cho-arrow-function\"><a href=\"#g%C3%A1n-t%C3%AAn-cho-arrow-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gán tên cho arrow function</h2>\n<p>arrow function trong javascript là một <code class=\"language-text\">anonymous</code> (hàm không có tên), nếu gọi vào <code class=\"language-text\">name</code> của nó chúng ta sẽ nhận được một chuỗi rỗng</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token arrow operator\">=></span> number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => ''</span></code></pre>\n<p>Trong lúc debug hoặc phân tích call stack, hàm dạng <code class=\"language-text\">anonymous</code> rất khó chịu vì không biết đang chạy <em>cái gì</em></p>\n<p><img src=\"https://dmitripavlutin.com/static/da011c996cd4544e2e5131e5862c85b6/f8b1b/anonymous-arrow-functions-3.webp\" alt=\"Đó mà biết được đang chạy cái gì nếu chỉ hiện thị anonymous\"></p>\n<p>Bên cột call stack có 2 function <code class=\"language-text\">anonymous</code>, không có bất kỳ thông tin nào được trích xuất ra cho chúng ta ở đây.</p>\n<p>Nhưng nếu chúng ta khai báo một biến nắm giữ arrow function, Javascript lúc này lại <em>ngầm</em> hiểu nó là tên cho function đó (các đặc tính khác của arrow function không đổi)</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increaseNumber</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">number</span> <span class=\"token arrow operator\">=></span> number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\nincreaseNumber<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 'increaseNumber'</span></code></pre>\n<p>Lúc debug, nó đã hiện nguyên hình</p>\n<p><img src=\"https://dmitripavlutin.com/static/7cf0de61d6b0cd2fb01e9cfb145e8708/c04be/named-arrow-functions-2.png\" alt=\"Anonymous arrow functions call stack\" title=\"Anonymous arrow functions call stack\"></p>\n<h2 id=\"inline-khi-nào-có-thể\"><a href=\"#inline-khi-n%C3%A0o-c%C3%B3-th%E1%BB%83\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Inline khi nào có thể</h2>\n<p>Thay vì phải viết một cách dài dòng</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\narray<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> number <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chúng ta có thể bỏ hẳn <code class=\"language-text\">{}</code> và <code class=\"language-text\">return</code>, ở dạng một expression</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\narray<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token arrow operator\">=></span> number <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"sử-dụng-với-phép-so-sánh\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-v%E1%BB%9Bi-ph%C3%A9p-so-s%C3%A1nh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng với phép so sánh</h2>\n<p>Các phép so sánh <code class=\"language-text\">&lt;=</code>, <code class=\"language-text\">&gt;=</code> nhiều khi dễ gây nhầm lẫn khi đứng chung với <code class=\"language-text\">=&gt;</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">negativeToZero</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">number</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Để không <em>đánh đố</em> người đọc, bọc nó lại trong dấu ngoặc đơn <code class=\"language-text\">()</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">negativeToZero</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">number</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//hoặc một cách tường minh</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">negativeToZero</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">number</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> number <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"sử-dụng-với-object-literal\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-v%E1%BB%9Bi-object-literal\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng với object literal</h2>\n<p>Nếu viết object literal như bên dưới chắc chắn bạn bị báo lỗi</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// throws SyntaxError!</span>\narray<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'number'</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Đừng quên thêm ngoặc đơn cho nó</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Works!</span>\narray<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'number'</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// có nhiều property</span>\narray<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'number'</span><span class=\"token operator\">:</span> number\n  <span class=\"token string\">'propA'</span><span class=\"token operator\">:</span> <span class=\"token string\">'value A'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'propB'</span><span class=\"token operator\">:</span> <span class=\"token string\">'value B'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"hạn-chế-lồng-nhiều-arrow-function\"><a href=\"#h%E1%BA%A1n-ch%E1%BA%BF-l%E1%BB%93ng-nhi%E1%BB%81u-arrow-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hạn chế lồng nhiều arrow function</h2>\n<p>Thí dụ có một button, sau khi click chúng ta request lên server, sau khi nhận được giá trị, log xuống trình duyệt</p>\n<pre class=\"language-js\"><code class=\"language-js\">myButton<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items.json'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token arrow operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">json</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      json<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Viết vậy, <em>thiên hạ</em> chê khó đọc. Cân nhắc cách viết sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">readItemsJson</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">json</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  json<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleButtonClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items.json'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token arrow operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>readItemsJson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmyButton<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> handleButtonClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Muốn <em>ngon</em> hơn là dùng <code class=\"language-text\">async/await</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleButtonClick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/items.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  json<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmyButton<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> handleButtonClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><a href=\"https://dmitripavlutin.com/javascript-arrow-functions-best-practices/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">5 Best Practices to Write Quality Arrow Functions</a></p>\n"}},{"node":{"title":"Chỉ dẫn thiết đặt ESLint trong nhiều tình huống sử dụng Javascript, Typescript, React","path":"/chi-dan-thiet-dat-es-lint-trong-nhieu-tinh-huong-su-dung-javascript-typescript-react/","date":"3. February 2020","timeToRead":7,"desc":"Chúng ta bắt đầu với Javascript trước, sau đó sẽ là TypeScript, và React. Mục tiêu là làm đúng, tránh trường hợp cài package không cần thiết hoặc copy/paste các config tới khi nó chạy được thì thôi.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#t%E1%BA%A1i-sao-d%C3%B9ng-eslint\">Tại sao dùng ESLint</a></li>\n<li><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-eslint\">Cài đặt ESLint</a></li>\n<li><a href=\"#file-c%C3%A0i-%C4%91%E1%BA%B7t-c%E1%BB%A7a-eslint\">File cài đặt của ESLint</a></li>\n<li><a href=\"#javascript-thu%E1%BA%A7n\">Javascript thuần</a></li>\n<li><a href=\"#thi%E1%BA%BFt-%C4%91%E1%BA%B7t-typescript\">Thiết đặt TypeScript</a></li>\n<li>\n<p><a href=\"#thi%E1%BA%BFt-%C4%91%E1%BA%B7t-cho-react\">Thiết đặt cho React</a></p>\n<ul>\n<li><a href=\"#react-javascript\">React Javascript</a></li>\n<li><a href=\"#react-typescript\">React TypeScript</a></li>\n</ul>\n</li>\n<li><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-cho-vscode\">Cài đặt cho VSCode</a></li>\n</ul>\n<!-- /TOC -->\n<p>Nếu chưa rành, bạn cần đọc từ đầu tới cuối, nếu đã thành thạo, chỉ việc nhảy tới phần cuối rồi copy config về xài.</p>\n<p>Hướng dẫn này sử dụng bộ config của Airbnb, vì nó quá nổi tiếng và được sử dụng gần như là chuẩn. Tất nhiên, bạn có quyền thay đổi sao cho hợp <em>gu</em></p>\n<p>Nếu chưa bao giờ <em>nghe</em> đến hướng dẫn viết <em>code sao cho chuẩn</em> của Airbnb, tham khảo các bài viết sau</p>\n<ul>\n<li><a href=\"https://github.com/airbnb/javascript/blob/master/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb JavaScript style guide</a></li>\n<li><a href=\"https://github.com/airbnb/javascript/tree/master/react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb React style guide</a></li>\n<li><a href=\"https://github.com/airbnb/javascript/tree/master/css-in-javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb CSS in JavaScript style guide</a></li>\n<li><a href=\"https://github.com/airbnb/css\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb Sass style guide</a></li>\n</ul>\n<h2 id=\"tại-sao-dùng-eslint\"><a href=\"#t%E1%BA%A1i-sao-d%C3%B9ng-eslint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao dùng ESLint</h2>\n<p>Hiện tại không có bất cứ một đối thủ nào <em>xứng tầm</em> với ESLint, nó là dự án đã và đang được bảo trì bởi cộng đồng rất rộng lớn. Hầu hết các chương trình viết code đều hỗ trợ, chúng ta sẽ không gặp khó khăn trong việc sử dụng nó với VSCode, Vim, Emac, WebStorm, Sublime, Atom,...</p>\n<p>Túm lại, ESLint là <strong>nền tảng</strong> xịn sò nhất, bạn không cần lăng tăng tìm <em>người khác</em>.</p>\n<h2 id=\"cài-đặt-eslint\"><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-eslint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cài đặt ESLint</h2>\n<p>Giống như bất kỳ package nào khác, ESLint có thể được cài đặt ở 2 mức</p>\n<ul>\n<li><em>global</em>, cài luôn vào máy <code class=\"language-text\">npm -g</code></li>\n<li>đi theo từng project</li>\n</ul>\n<p>Việc cài đặt ESLint ở mức <em>global</em> khá là hợp lý vì chúng ta muốn dùng nó ở mọi project. Tuy nhiên cũng <em>hợp lý</em> nếu cài riêng trên từng project nếu bạn đang cần</p>\n<ul>\n<li>Các phiên bản ESLint khác nhau trên từng dự án</li>\n<li>Công khai bạn phụ thuộc vào ESLint cho project đó</li>\n<li>Đồng nghiệp và các công cụ tự động (như mấy thằng CI) có thể cài đặt ESlint như những package khác.</li>\n</ul>\n<p>Cài đặt ESLint trong thư mục project</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i eslint --save-dev</code></pre>\n<p>Chạy ESLint trong project</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npx eslint</code></pre>\n<p>Để tạo một <em>shortcut</em> cho câu lệnh chạy eslint. Bên trong file <code class=\"language-text\">package.json</code> thêm dòng sau</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint .\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Tham số <code class=\"language-text\">.</code> cho phép chạy ESLint bên trong thư mục hiện tại, chúng ta chạy lệnh thông qua shortcut</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run lint</code></pre>\n<h2 id=\"file-cài-đặt-của-eslint\"><a href=\"#file-c%C3%A0i-%C4%91%E1%BA%B7t-c%E1%BB%A7a-eslint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>File cài đặt của ESLint</h2>\n<p>Có thể đặt file cài đặt ESLint ở <a href=\"https://eslint.org/docs/user-guide/configuring#configuration-cascading-and-hierarchy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nhiều vị trí</a>. Nếu không có nhu cầu quá đặt biệt, 1 file duy nhất ở thư mục ngoài cùng ( <code class=\"language-text\">root</code> ) là đủ.</p>\n<p>ESLint cho phép sử dụng nhiều kiểu file</p>\n<ul>\n<li>Javascript</li>\n<li>JSON</li>\n<li>YAML</li>\n</ul>\n<p>Xài YAML trong ví dụ này. Tạo file tên <code class=\"language-text\">.eslintrc.yaml</code>, cái này nếu bạn chạy <code class=\"language-text\">eslint init</code> trong thư mục <code class=\"language-text\">src/</code> của dự án nó sẽ hỏi bạn có muốn tạo không, nó tạo dùm cho.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">eslint --init</code></pre>\n<blockquote>\n<p>Nếu muốn thêm <em>logic</em> bằng code, bạn cần dùng kiểu javascript</p>\n</blockquote>\n<p>Điều cần quan tâm trước hết là thông báo cho ESLint chúng ta đang viết ngôn ngữ gì, phiên bản nào, môi trường mà code sẽ chạy. Nếu không có các thông tin, ESLint sẽ không chạy được.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">parserOptions:\n  ecmaVersion: <span class=\"token number\">6</span>\nenv:\n  node: <span class=\"token boolean\">true</span></code></pre>\n<h2 id=\"javascript-thuần\"><a href=\"#javascript-thu%E1%BA%A7n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Javascript thuần</h2>\n<p>Với project là javascript thuần, toàn bộ file là <code class=\"language-text\">.js</code>, có thể tự định nghĩa từ đầu hết, nhưng như vậy khá mất thời gian, khó bảo trì, chưa chắc chuẩn vì nó phụ thuộc vào sự hiểu biết của bạn về javascript</p>\n<p>Rất nhiều các công ty lớn như <a href=\"https://github.com/google/eslint-config-google\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google</a>, <a href=\"https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb</a>, <a href=\"https://github.com/facebook/fbjs/tree/master/packages/eslint-config-fbjs-opensource\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Facebook</a> bỏ ra cả tỉ tỉ thời gian để bảo trì và cập nhập mấy cài đặt này</p>\n<p>Sử dụng cài đặt vạn người yêu thích, Airbnb</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npx install-peerdeps --dev eslint-config-airbnb-base</code></pre>\n<p>Các bài viết trên mạng sẽ kêu bạn cài <code class=\"language-text\">eslint-config-airbnb</code>, nó có bao gồm luôn phần cài đặt cho React, React Hooks, ... . Không cần thiết trong trường hợp project chỉ là javascript thông thường.</p>\n<p>Để ý chúng ta <strong>KHÔNG</strong> dùng <code class=\"language-text\">npm</code> để cài đặt, mà dùng <code class=\"language-text\">npx install-peerdeps</code>. Nó sẽ cài luôn mấy package nào mà <code class=\"language-text\">eslint-config-airbnb-base</code> phụ thuộc. Trường hợp sử dụng ESLint chúng ta sẽ gặp hoài, vì hầu như nó đều phụ thuộc một vài package khác.</p>\n<p>Cài xong, khai báo sẽ kế thừa bộ cài đặt của Airbnb</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>base</code></pre>\n<p>Những thiết đặt của airbnb có thể nói là rất phổ biến và được tin dùng bởi nhiều dự án lớn nhỏ khác nhau. Chúng ta có thể yên tâm sử dụng nó mà không cần thay đổi gì nhiều.</p>\n<p>Tổng kết</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-config-airbnb-base\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^14.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-import\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.20.0\"</span> (peer dependency)\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parserOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ecmaVersion</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">node</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> eslint<span class=\"token punctuation\">:</span>recommended\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>base</code></pre>\n<h2 id=\"thiết-đặt-typescript\"><a href=\"#thi%E1%BA%BFt-%C4%91%E1%BA%B7t-typescript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thiết đặt TypeScript</h2>\n<p>Vấn đề chính của TypeScript là ESLint không thể tự động mà <code class=\"language-text\">parse</code> được, chúng ta phải thêm một parser <a href=\"https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/parser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@typescript-eslint/parser</a>.</p>\n<p>Cài đặt</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @typescript-eslint/parser --save-dev</code></pre>\n<blockquote>\n<p>Parse làm nhiệm vụ đọc cài file input và tạo ra một <em>phiên bản</em> mà ESLint hiểu được.</p>\n</blockquote>\n<p>Khai báo dùng parser này</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parser</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span></code></pre>\n<p>Đồng thời cập nhập luôn <code class=\"language-text\">package.json</code> và báo với ESLint đừng kiểm tra file <code class=\"language-text\">.js</code> mà kiểm tra file <code class=\"language-text\">.ts</code></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint . --ext .ts\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Tương tự như javascript, chúng ta dùng bộ thiết đặt của Airbnb</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npx install-peerdeps --dev eslint-config-airbnb-typescript\n<span class=\"token function\">npm</span> i eslint-plugin-import --save-dev</code></pre>\n<p><code class=\"language-text\">eslint-plugin-import</code> phải được cài đặt riêng, thủ công, không rõ lý do tại sao luôn.</p>\n<p>Cập nhập lại file config ESLint</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>typescript/base\n  <span class=\"token punctuation\">-</span> plugin<span class=\"token punctuation\">:</span>@typescript<span class=\"token punctuation\">-</span>eslint/recommended</code></pre>\n<p>Bạn có thể thắc mắc, tại sao chưa cài <code class=\"language-text\">@typescript-eslint</code> mà có thể sử dụng, thật ra lúc cài <code class=\"language-text\">eslint-config-airbnb-typescript</code> chúng ta đã cài luôn nó bằng <code class=\"language-text\">npx install-peerdeps</code></p>\n<p>Có thể rule khác nữa có thể tham khảo <a href=\"https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">trực tiếp từ tài liệu trên github</a></p>\n<p>Cuối cùng, bạn sẽ thấy có rất nhiều bài viết trên mạng, chỉ bạn thiết đặt</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token string\">\"@typescript-eslint\"</span></code></pre>\n<p>Nếu không sử dụng các thiết ESLint được đề nghị, cái này không cần thiết. Lý do là Airbnb đã bật luôn các rule như vậy.</p>\n<p>Tổng kết</p>\n<p><strong>package.json</strong></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"@typescript-eslint/eslint-plugin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.17.0\"</span><span class=\"token punctuation\">,</span> (peer dependency)\n  <span class=\"token property\">\"@typescript-eslint/parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.17.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.8.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-config-airbnb-typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.3.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-import\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.20.0\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>.eslintrc.yaml</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parserOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ecmaVersion</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">node</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>typescript/base\n  <span class=\"token punctuation\">-</span> plugin<span class=\"token punctuation\">:</span>@typescript<span class=\"token punctuation\">-</span>eslint/recommended</code></pre>\n<h2 id=\"thiết-đặt-cho-react\"><a href=\"#thi%E1%BA%BFt-%C4%91%E1%BA%B7t-cho-react\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thiết đặt cho React</h2>\n<p>Thêm các thiết đặt ESLint cho React vô cùng đơn giản, mọi thứ đã có Airbnb lo.</p>\n<p>Một trong những sai lầm phổ biến là cho rằng viết như bên dưới sẽ bật hỗ trợ React</p>\n<p><strong>.eslintrc.yaml</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parserOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ecmaFeatures</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">jsx</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre>\n<p>React sử dụng JSX, nhưng theo cách mà ESLint không thể <strong>hiểu nổi</strong>. Để React và ESLint <em>nói chuyện</em> được với nhau, chúng ta phải sử dụng <code class=\"language-text\">eslint-plugin-react</code></p>\n<h3 id=\"react-javascript\"><a href=\"#react-javascript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>React Javascript</h3>\n<p>Cài đặt package</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npx install-peerdeps --dev eslint-config-airbnb</code></pre>\n<p><strong>.eslintrc.yaml</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">browser</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre>\n<p><strong>package.json</strong></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint . --ext .js,.jsx\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu có sử dụng React Hook, bạn nên thêm phần cài đặt sau (có bỏ qua việc kiểm tra accessibility)</p>\n<p><strong>.eslintrc.yaml</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>base\n  <span class=\"token punctuation\">-</span> airbnb/rules/react\n  <span class=\"token punctuation\">-</span> airbnb/hooks</code></pre>\n<p>Tổng kết</p>\n<p><strong>package.json</strong></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-config-airbnb\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^18.0.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-import\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.20.0\"</span><span class=\"token punctuation\">,</span> (peer dependency)\n  <span class=\"token property\">\"eslint-plugin-jsx-a11y\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.2.3\"</span><span class=\"token punctuation\">,</span> (peer dependency)\n  <span class=\"token property\">\"eslint-plugin-react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.18.0\"</span><span class=\"token punctuation\">,</span> (peer dependency)\n  <span class=\"token property\">\"eslint-plugin-react-hooks\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.7.0\"</span> (peer dependency)\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>.eslintrc.yaml</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parserOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ecmaVersion</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">browser</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb\n  <span class=\"token punctuation\">-</span> airbnb/hooks\n\n<span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">react/react-in-jsx-scope</span><span class=\"token punctuation\">:</span> off</code></pre>\n<p><a href=\"https://github.com/yannickcr/eslint-plugin-react#list-of-supported-rules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rảnh ngồi xem toàn bộ thiết đặt</a></p>\n<h3 id=\"react-typescript\"><a href=\"#react-typescript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>React TypeScript</h3>\n<p>Nếu dùng TypeScript, chúng ta không thể cài theo kiểu <code class=\"language-text\">npx install-peerdeps</code>, mà phải cài độc lập</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint-config-airbnb-typescript <span class=\"token punctuation\">\\</span>\n            eslint-plugin-import <span class=\"token punctuation\">\\</span>\n            eslint-plugin-jsx-a11y <span class=\"token punctuation\">\\</span>\n            eslint-plugin-react <span class=\"token punctuation\">\\</span>\n            eslint-plugin-react-hooks <span class=\"token punctuation\">\\</span>\n            @typescript-eslint/eslint-plugin <span class=\"token punctuation\">\\</span>\n            --save-dev</code></pre>\n<p><strong>.eslintrc.yaml</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parserOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ecmaVersion</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">browser</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>typescript\n  <span class=\"token punctuation\">-</span> airbnb/hooks\n  <span class=\"token punctuation\">-</span> plugin<span class=\"token punctuation\">:</span>@typescript<span class=\"token punctuation\">-</span>eslint/recommended\n\n<span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">react/react-in-jsx-scope</span><span class=\"token punctuation\">:</span> off</code></pre>\n<p><strong>package.json</strong></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.8.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"@typescript-eslint/eslint-plugin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.17.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-config-airbnb-typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.3.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-import\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.20.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-jsx-a11y\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.2.3\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.18.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-react-hooks\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.3.0\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint . --ext .ts,.tsx\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"cài-đặt-cho-vscode\"><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-cho-vscode\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cài đặt cho VSCode</h2>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VSCode đã có plugin</a> khá thần thánh để hỗ trợ ESLint. Các thiết đặt yêu thích của mình</p>\n<p>Tự động chạy lint khi save</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"eslint.run\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"onSave\"</span></code></pre>\n<p>VSCode sẽ kiểm tra trên JS, JSX, TS, TSX</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"eslint.validate\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"javascript\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"javascriptreact\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"typescript\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"typescriptreact\"</span>\n<span class=\"token punctuation\">]</span></code></pre>\n<p>Chọn kiểu nháy đơn</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"javascript.preferences.quoteStyle\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"single\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"typescript.preferences.quoteStyle\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"single\"</span><span class=\"token punctuation\">,</span></code></pre>\n<p>Tự động cập nhập vị trí file</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"javascript.updateImportsOnFileMove.enabled\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"typescript.updateImportsOnFileMove.enabled\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span></code></pre>\n<p><a href=\"https://blog.geographer.fr/eslint-guide\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ESLint configuration and best practices</a></p>\n"}},{"node":{"title":"4 ứng dụng của Array.from","path":"/4-ung-dung-cua-array-from/","date":"24. December 2019","timeToRead":2,"desc":"Vài ứng dụng nhỏ của hàm Array.from","content":"<p><code class=\"language-text\">Array.from</code> được dùng để convert giá trị về kiểu <code class=\"language-text\">Array</code>, cú pháp như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span>arrayLikeOrIterable <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> mapFunction <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Có 3 tham số có thể truyền vào, 2 thằng sau không bắt buộc</p>\n<ul>\n<li><code class=\"language-text\">arrayLikeOrIterable</code> giá trị muốn chuyển</li>\n<li><code class=\"language-text\">mapFunction(item, index)</code> function sẽ chạy qua toàn bộ các phần tử</li>\n<li><code class=\"language-text\">thisArg</code> được sử dụng như giá trị <code class=\"language-text\">this</code> bên trong <code class=\"language-text\">mapFunction</code></li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> someNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"0\"</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> length<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n<span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span>someNumbers<span class=\"token punctuation\">,</span> <span class=\"token parameter\">value</span> <span class=\"token arrow operator\">=></span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => [20, 30]</span></code></pre>\n<h2 id=\"ứng-dụng-1-khởi-tạo-một-dãy-số\"><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng-1-kh%E1%BB%9Fi-t%E1%BA%A1o-m%E1%BB%99t-d%C3%A3y-s%E1%BB%91\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ứng dụng 1: khởi tạo một dãy số</h2>\n<p>Khởi tạo dãy số từ 0 đến giá trị truyền vào</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">end</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> length<span class=\"token operator\">:</span> end <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> index<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => [0,1,2,3]</span></code></pre>\n<h2 id=\"ứng-dụng-2-tạo-một-mảng-gồm-n-phần-tử-giống-nhau\"><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng-2-t%E1%BA%A1o-m%E1%BB%99t-m%E1%BA%A3ng-g%E1%BB%93m-n-ph%E1%BA%A7n-t%E1%BB%AD-gi%E1%BB%91ng-nhau\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ứng dụng 2: Tạo một mảng gồm n phần tử giống nhau</h2>\n<p>Input: số lượng phần tử, giá trị.\nOutput: toàn một mảng n phần tử giống với giá trị đã cho.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">const</span> init <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> length <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> init <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// => [0,0,0]</span></code></pre>\n<p>Thật ra chúng ta cũng có thể viết bằng <code class=\"language-text\">Array.fill()</code> dễ nhìn hơn</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> init   <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fill</span><span class=\"token punctuation\">(</span>init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"ứng-dụng-3-sao-chép-một-array\"><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng-3-sao-ch%C3%A9p-m%E1%BB%99t-array\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ứng dụng 3: sao chép một array</h2>\n<p>Nếu chỉ đơn giản là sao chép array thì ta có thể viết</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> cloneArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>array1<span class=\"token punctuation\">,</span> array2<span class=\"token punctuation\">]</span></code></pre>\n<p>Nhưng nếu <code class=\"language-text\">array1</code> lại chứa một array bên trong đó thì sao? Hàm đệ quy để chép <em>tuốt</em></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">recursiveClone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isArray</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> recursiveClone<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> numbersClone <span class=\"token operator\">=</span> <span class=\"token function\">recursiveClone</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nnumbersClone<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => [[0, 1, 2], ['one', 'two', 'three']]</span>\nnumbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> numbersClone<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// => false</span></code></pre>\n<h2 id=\"ứng-dụng-4-tạo-một-array-không-trùng-lặp\"><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng-4-t%E1%BA%A1o-m%E1%BB%99t-array-kh%C3%B4ng-tr%C3%B9ng-l%E1%BA%B7p\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ứng dụng 4: Tạo một array không trùng lặp</h2>\n<p>Thật ra thì bản thân <code class=\"language-text\">Array.from</code> không làm được, chúng ta dùng <code class=\"language-text\">new Set()</code> rồi mới sau đó chuyển ngược lại về array</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => [1, 2, 3]</span></code></pre>\n"}},{"node":{"title":"Ứng dụng JSON.parse để cải thiện tốc độ?","path":"/ung-dung-json-parse-de-cai-thien-toc-do/","date":"14. December 2019","timeToRead":3,"desc":"Thủ thuật để cải thiện tốc độ bằng JSON.parse","content":"<p>Với các ứng dụng web ngày nay, không khó bắt gặp việc sử dụng object như một nơi lưu trữ state và các dạng dữ liệu cần thiết khác cho ứng dụng. Cụ thể nhất chúng ta thường thấy trong store của Redux.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> bar<span class=\"token operator\">:</span> <span class=\"token number\">1337</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🐌</span></code></pre>\n<p>Trong thực tế nó sẽ không đơn giản như ví dụ ở trên, mà cấu trúc nếu không chồng chéo thì cũng rất lớn vì phải gánh vác toàn bộ <code class=\"language-text\">state</code> của ứng dụng. Nếu nó lại dữ liệu cần thiết trong lúc khởi tạo ứng dụng lần đầu tiên. Việc này sẽ nằm trong render critical path của trình duyệt, đồng nghĩa với việc user không thấy gì hết cho đến khi dữ liệu này được load, parse, compile, execute bởi Javascript engine bên dưới.</p>\n<p>Để khắc phục việc này một trong những cách làm là dùng server side rendering, chúng ta chỉ quăng cái HTML đã chứa toàn bộ kết quả của quá trình xuống user. Trình duyệt user không cần đảm đương công việc đó nữa.</p>\n<p>Nhưng nếu chúng ta không thể dùng server side rendering thì sao?</p>\n<p>Nếu object chúng ta cần không chứa những gì mà JSON không hỗ trợ, như BigInt, Maps, Sets,... Chúng ta có thể sử dụng <code class=\"language-text\">JSON.parse</code></p>\n<p>Vì cú pháp của JSON đơn giản hơn nhiều so với Javascript, nên quá trình parse sẽ ít tốn kém hơn so với Javascript rất nhiều.</p>\n<p>Nội dung bên trong JSON đối với các engine rất dễ đoán, và ngược lại với các object. Thí dụ nếu bạn là cái engine rồi nhìn vào đây</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span>'<span class=\"token punctuation\">{</span></code></pre>\n<p>Khi bạn thấy dấu <code class=\"language-text\">{</code>, bạn sẽ biết được chỉ có 2 khả năng có thể xảy ra: một là bắt đầu một object, hai là một JSON không hợp lệ.</p>\n<p>Trong khi đó sau dấu <code class=\"language-text\">{</code>  của object, có rất nhiều khả năng xảy ra</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span></code></pre>\n<p>Đây có phải là object không? Giá trị x đang trỏ tới đâu? Không thể nào có đáp án nếu không xem hết toàn bộ code</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// khởi tạo object, x trở tới thằng khai báo trước đó</span>\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// object destructuring, x không trỏ tới thằng đầu</span>\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// một arrow function</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">y</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> x<span class=\"token punctuation\">;</span></code></pre>\n<p>Như vậy, nếu gặp dấu <code class=\"language-text\">{</code>, các engine phải vô cùng thận trọng vì phải biết ngữ cảnh hiện tại mới biết nó là gì. </p>\n<p>Lợi dụng đặc tính này chúng ta có thể cải thiện tốc độ của các ứng dụng web có sử dụng một object có cấu trúc tương tự như JSON ( ví dụ như Redux Store). Thay vì sử dụng một khai báo object như thế này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> bar<span class=\"token operator\">:</span> <span class=\"token number\">1337</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🐌</span></code></pre>\n<p>Có thể tăng tốc bằng cách viết</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{\"foo\":42,\"bar\":1337}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚀</span></code></pre>\n<p>Miễn là việc tính toán này chỉ cần parse một lần bằng <code class=\"language-text\">JSON.parse</code>, nó sẽ nhanh hơn nhiều so với cách khai bao object bình thường, và chỉ nên suy nghĩ áp dụng khi object đã vượt quá kích thước 10kB. </p>\n<p>Thực hiện kiểm tra tốc độ của một object khoảng 8Mb dung lượng trên các engine khác nhau. Kết quả nhận được ít nhất cũng tăng tốc gấp 1.5 lần trên các phiên bản khác nhau của V8</p>\n<p><img src=\"https://v8.dev/_img/cost-of-javascript-2019/json.svg\"></p>\n<p><a href=\"https://v8.dev/blog/cost-of-javascript-2019#json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://v8.dev/blog/cost-of-javascript-2019#json</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=ff4fgQxPaO0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Faster apps with JSON.parse (Chrome Dev Summit 2019)</a></p>\n"}},{"node":{"title":"Giải bài toán cộng 2 số bằng javascript","path":"/giai-bai-toan-cong-2-so-bang-javascript/","date":"29. November 2019","timeToRead":4,"desc":"Một đề bài cũng không mới, thông qua đó chúng ta sẽ biết thêm tí về cách sử dụng object sao cho hiệu quả","content":"<p>Đề bài: viết một hàm, nhận 2 tham số đầu vào, tham số thứ nhất là một mảng số, tham số thứ 2 là một số bất kỳ. Yêu cầu trả về một mảng gồm 2 phần tử trong mảng ban đầu và 2 phần tử này cộng lại bằng tham số thứ 2.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">nums</span>\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">total</span>\n * <span class=\"token keyword\">@return</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span>\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> total</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Solution here</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Ví dụ sử dụng hàm này bằng các input như bên dưới</p>\n<pre class=\"language-text\"><code class=\"language-text\">input: nums = [1, 2, 3], total = 4\noutput: [1, 3]\n\ninput: nums = [3, 9, 12, 20], total = 21\noutput: [9, 12]</code></pre>\n<p>Chúng ta coi như mảng <code class=\"language-text\">nums</code> truyền vào luôn là mảng số, ko cần kiểm trả kiểu giá trị của phần tử trong mảng, <code class=\"language-text\">total</code> luôn là một con số mà 2 phần tử trong có thể cộng lại bằng. Tất là không có trường hợp ko tìm thấy cặp phần tử nào thỏa yêu cầu</p>\n<h2 id=\"phương-pháp-vét-cạn-không-bỏ-sót-em-nào\"><a href=\"#ph%C6%B0%C6%A1ng-ph%C3%A1p-v%C3%A9t-c%E1%BA%A1n-kh%C3%B4ng-b%E1%BB%8F-s%C3%B3t-em-n%C3%A0o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phương pháp: Vét cạn, không bỏ sót em nào</h2>\n<p>Lấy phần tử đầu tiên của <code class=\"language-text\">nums</code>, duyệt qua toàn bộ các phần tử còn lại, xem có thằng nào cộng lại bằng <code class=\"language-text\">total</code> không. Cứ làm điều tương tự với từng phần tử một trong mảng. </p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">nums</span>\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">total</span>\n * <span class=\"token keyword\">@return</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span>\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> total</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> total<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 3]</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [9, 12]</span></code></pre>\n<p>Có 2 chỗ đáng quan tâm nếu chọn cách này</p>\n<ol>\n<li>Tại sao vòng lặp <strong>phải</strong> kết thúc ở <code class=\"language-text\">i &lt; nums.length - 1</code> ?</li>\n<li>Tại sao vòng lặp bên trong nữa bắt đầu ở vị trí <code class=\"language-text\">j = i +1</code> ?</li>\n</ol>\n<p>Cũng như cái tên của nó <strong>Vét cạn</strong>, chúng ta không bỏ sót trường hợp nào cả, ngay cả những trường hợp <strong>có thể bỏ qua</strong>. Độ khó của 2 vòng lặp lồng nhau như vậy là n mũ n<sub>2</sub>, nói cách khác, thời gian chạy của vòng lặp này tỉ lệ với bình phương số lượng các phần tử</p>\n<p>Giả dụ bạn có 100000 phần tử, thì số lần chạy của vòng lặp là 4999950000</p>\n<p>Nếu thích thì mấy bạn copy đoạn code này chạy thử</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bigArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbigArr<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\nbigArr<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> total <span class=\"token operator\">=</span> <span class=\"token number\">19</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> total</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> iterations <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> startTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      iterations<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> total<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Iterations: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>iterations<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Time: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">ms</span><span class=\"token template-punctuation string\">`</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>bigArr<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>5 triệu lần chạy này sẽ tốn khoảng 20 giây trên máy mình</p>\n<h2 id=\"phương-pháp-bảng-băm-sử-dụng-object-của-javascript\"><a href=\"#ph%C6%B0%C6%A1ng-ph%C3%A1p-b%E1%BA%A3ng-b%C4%83m-s%E1%BB%AD-d%E1%BB%A5ng-object-c%E1%BB%A7a-javascript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phương pháp bảng băm: sử dụng Object của javascript</h2>\n<p>Chúng ta có thể làm tốt hơn cách trên. Thay vì đặt vòng lặp lồng nhau, chạy qua các phần tử của <code class=\"language-text\">nums</code> một lượt, đánh dấu các phần tử đã kiểm tra, bỏ vào làm key cho một object, kiểm tra phần tử trong <code class=\"language-text\">nums</code> có tồn tại trong object hay chưa</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> total</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// object chứa những giá trị đã duyệt qua</span>\n  <span class=\"token keyword\">const</span> previousValues <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// giá trị cần tìm</span>\n    <span class=\"token keyword\">const</span> complement <span class=\"token operator\">=</span> total <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// giá trị cần tìm có nằm ở lần duyệt trước đó</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>previousValues<span class=\"token punctuation\">[</span>complement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>complement<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// lưu lại giá trị này vào object đã duyệt</span>\n    previousValues<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 3]</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [9, 12]</span></code></pre>\n<p>Chúng ta chỉ còn một vòng lặp, vòng lặp thứ 2 bị thay thế bởi <code class=\"language-text\">previousValues[complement]</code></p>\n<p>Đo lại tốc độ với cách làm này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bigArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbigArr<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\nbigArr<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> total <span class=\"token operator\">=</span> <span class=\"token number\">19</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> total</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> iterations <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> startTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> previousValues <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    iterations<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> complement <span class=\"token operator\">=</span> total <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>previousValues<span class=\"token punctuation\">[</span>complement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Iterations: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>iterations<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Time: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">ms</span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>complement<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    previousValues<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>bigArr<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Iterations: 100000 Time: 4ms</span></code></pre>\n<p>Không có chi là miễn phí, chúng ta tiết kiệm được thời gian chạy, nhưng phải bỏ ra một vùng nhớ để lưu object <code class=\"language-text\">previousValues</code>, nếu lưu khoảng 1 triệu phần tử, dung lượng này cũng không nhỏ, khoản đâu đó 10MB RAM</p>\n<p><a href=\"https://nick.scialli.me/exploring-the-two-sum-interview-question-in-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nick.scialli.me/exploring-the-two-sum-interview-question-in-javascript/</a></p>\n"}},{"node":{"title":"Lựa chọn framework frontend nào trong thời điểm hiện tại","path":"/lua-chon-framework-frontend-nao-trong-thoi-diem-hien-tai/","date":"24. November 2019","timeToRead":9,"desc":"Đây không phải là một bài so sánh đâu mới là framework chạy nhanh nhất","content":"<p>Thời điểm hiện tại nếu bạn đang làm Frontend thì chắc hẳn đang sử dụng một framework nào đó trong 3 thằng này, Vue, React, và Angular. Nếu trước đây trên cả tá framework, và cả tá ví dụ về làm một ứng dụng web ToDoMVC trên github, thì cuộc chơi giờ đây đã đỡ hơn rất nhiều, khi chúng ta chỉ còn 3 lựa chọn sáng giá.</p>\n<p>Để viết một ứng dụng phức tạp, chúng ta bắt buộc phải sử dụng framework, vì nếu không có những framework như vậy, chúng ta sẽ tốn không biết bao nhiêu thời gian để đạt được kết quả cuối cùng.</p>\n<p>Chắc các bạn cũng như mình đã quá mệt mỏi với những bài viết so sánh 3 framework trên, ai ngon hơn ai, các bạn cũng nên dừng tìm kiếm câu trả lời cho câu hỏi \"Top 10 framework nên xài trong năm 2019\". Tại sao? Vì những bài viết này đa phần sẽ tập trung vào  đếm số lượng <em>sao</em> trên Github, số lượng tải về từ NPM, số câu hỏi liên quan trên Stack Overflow. Những con số thống kê vô hồn này chỉ có tác dụng trong những trường hợp cụ thể, như đi quảng bá về mức độ phủ rộng của những framework này. Nếu bạn là dân kỹ thuật và nhìn nhận ở góc độ kỹ thuật, phán xét những framework này ở góc độ kỹ thuật chứ không thể căn cứ trên số lượt <em>view</em> và <em>download</em></p>\n<blockquote>\n<p>Kỹ thuật quyết định bên trong của từng framework là gì, đâu là sự khác nhau thực sự của từng framework</p>\n</blockquote>\n<p>Mục tiêu cuối cùng của các framework đều là để giúp chúng ta viết ứng dụng web hiệu quả nhất có thể, việc cạnh tranh giữa các framework với nhau là ý tưởng tốt hay không? Mỗi framework sẽ có một số lượng người sử dụng nhất định, như React-Angular-Vue hiện tại có khoản hơn nửa triệu developer đang <em>ăn nằm</em> với nó hằng ngày.</p>\n<p>Không có khái niệm \"điểm tốt\" và \"điểm chưa tốt\" cho các framework. Người ta thường hay hỏi mấy câu, framework nào xài ngon nhất. Một dạng câu hỏi bạn nên ngừng làm khó nhau vì không thể nào so sánh như toán học 3 > 2 > 1</p>\n<p>Việc thiết kế phần mềm luôn đòi hỏi một sự đánh đổi, đặc biệt là với web, chắc có lẽ vì có quá nhiều thứ người ta muốn làm thông qua web, từ một trang web đơn giản chỉ là HTML tĩnh đến cả một hệ thống phức tạp nhất bạn có thể nghĩ ra, để đáp ứng toàn bộ những nhu cầu khác nhau đó, các framework phải chấp nhận đánh đổi một số thứ, chứ ko thể đáp ứng toàn bộ với một giải pháp toàn diện được</p>\n<h2 id=\"scope\"><a href=\"#scope\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Scope</h2>\n<blockquote>\n<p>Framework cung cấp bao nhiêu đồ chơi cho bạn</p>\n</blockquote>\n<p>Một trong những ví dụ kinh điển giữa <strong>thư viện</strong> và <strong>framework</strong> là React và Angular. React được xem là thư viện trong khi Angular sẽ là framework</p>\n<p>Là một thư viện, React chỉ muốn tập trung cung cấp mô hình để phát triển UI. Để hình dung dễ hơn, liên tưởng tới các nhà máy sản xuất bún, scope rất cụ thể, tôi sẽ tập trung vào việc sản xuất ra bún, việc các bạn đem bún này về nấu thành món gì là do bạn, lý do tại sao ecosystem của React luôn luôn sôi động, rất nhiều dev đã chế biến thành các món khác nhau, như với món bún chúng ta có bún riêu, canh bún, bún đậu mắm tôm, bún cá châu đốc, bún mắm, vâng vâng.</p>\n<p>Trong khi đó, Angular với tư cách là một framework thực thụ, nó sẽ tiếp cận vấn đề theo hướng từ trên xuống. Hình dung như mì gói nuôi nhân tài ở Việt Nam, với mọi thứ đóng gói đầy đủ để bạn có một món cứu đói tạm thời, bột nêm, dầu, hành. Angular cung cấp hệ thống form validation, animation,... rất nhiều tính năng khác mà chúng ta rất cần thiết để dựng nên một ứng dụng hoàn chỉnh. Với scope lớn như vậy, mọi tính năng khi thiết kế đã được nghĩ đến làm thế nào để chúng <em>sống chung</em> với nhau một cách mượt mà</p>\n<p><strong>Lợi ích khi có scope nhỏ và cụ thể</strong></p>\n<ul>\n<li>Ít khái niệm, dễ tiếp cận ngay từ đầu. Trong React bạn sẽ có mô hình làm component, prop, state, virtual DOM, hook, bao nhiêu kiến thức thôi là bạn đã có thể bắt đầu làm quen React.</li>\n<li>Linh động, món bún có thể kết hợp với rất nhiều thứ gia vị, cách nấu khác nhau để cho ra các món ăn khác nhau.</li>\n<li>Team duy trì React <em>rảnh</em> hơn, những chuyện khác đã có cộng đồng gánh vác, như đi làm React Router, React Redux, React Form, họ sẽ có thời gian nhiều hơn để tập trung vào các ý tưởng mới cho bản thân React</li>\n</ul>\n<p><strong>Hạn chế khi scope nhỏ và cụ thể</strong></p>\n<ul>\n<li>Khi bạn phải xây dựng một ứng dụng phức tạp, một vài concept cơ bản là không đủ xài, bạn phải tự viết khá nhiều. Giống như bắt bạn diễn tả tất cả những câu nói hằng ngày bằng cách chỉ sử dụng 10 từ, thì bạn diễn đạt ý như thế nào?</li>\n<li>Cách làm (<em>pattern</em>) mới ngày càng nhiều. Nói học React rất dễ là bạn thực sự chưa biết đến ngoài React ra, bạn có phải học vô số các cách làm (pattern) khác, như Redux, mặc dù không có trong tài liệu chính thức trên React, nhưng lại là thứ bạn không thể bỏ qua nếu muốn dùng React như một React Developer chân chính. Nào là Higher Other Component, Render Props, React hook, rồi quá trời cách để sử dụng CSS trong JS, tài liệu chính thức của React sẽ không nói bạn nên dùng gì, bạn phải tự tìm hiểu và chọn cái nào mình thích. Những kiến thức này bạn phải nạp từ từ như là một kiến thức chính quy để bạn có thể vỗ ngực xưng tên <em>tao là React Developer</em>.</li>\n<li>Ecosystem phát triển quá nhanh không đồng nghĩa với chất lượng các thư viện dành cho React cái nào cũng ngon, rất nhiều thư viện nổi lên một thời rồi ra đi mãi mãi, như Flux, rồi bao nhiêu là cách viết CSS trong JS. Trong ta luôn trong cảm giác lo sợ <strong>lỡ mất không xài thằng ngon nhất rồi</strong></li>\n</ul>\n<p><strong>Lợi ích khi có scope bao la bát ngát</strong></p>\n<ul>\n<li>Các vấn đề thường gặp đã được giải quyết hết, bạn có ngay tô mì để ăn trong 5 phút mà không cần suy nghĩ nhiều, cứ lên trang chủ, đọc tài liệu, học cái framework xong là xài, để nghiên cứu giây mơ rễ má có thể để sau. Đâu ai cấm bạn ăn mì gói bỏ thêm thịt bò, trứng hay tôm càng.</li>\n<li>Các tính năng bên trong được thiết kế để làm việc mượt mà đảm bảo tính thống nhất của toàn bộ hệ thống, không cần chạy đi đâu để kiếm giải pháp cho một vấn đề quá căn bản, bạn cứ lên trang chính thức của nó xem người ta giải quyết vấn đề đó như thế nào, không còn phải suy nghĩ lựa chọn đâu là cách tốt nhất trong hơn chục cái giải pháp được đưa ra.</li>\n</ul>\n<p><strong>Hạn chế của scope bao quát bát ngát hết vườn hoa</strong></p>\n<ul>\n<li>Học là một quá trình dài, nhiều khi để tới được bước có một cái gì đó hiển thị trên màn hình, bạn phải trải qua cả khóa học bài bảng. Những người không có kiến thức về một ngôn ngữ Backend nào cả, chỉ biết HTML, CSS, javascript mà đọc tài liệu của Angular thì phải nói là một trãi nghiệm vô cùng đau thương</li>\n<li>Đôi khi một giải pháp được cung cấp sẵn lại không phù hợp với tính huống gặp phải, chúng ta ước gì có thể làm cách khác, nhưng điều đó là không thể.</li>\n<li>Hệ thống lớn đòi hỏi chi phí rất lớn để duy trì cũng như đưa ra các ý tưởng mới, rất nhiều thành phần phải tích hợp để cả hệ thống có thể kết nối hoạt động trơn tru</li>\n</ul>\n<h2 id=\"cơ-chế-render\"><a href=\"#c%C6%A1-ch%E1%BA%BF-render\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cơ chế render</h2>\n<blockquote>\n<p>Cách structure, cách quản lý code của framework</p>\n</blockquote>\n<p>Để đơn giản chúng ta so sánh JSX và Templates</p>\n<p><strong>Điểm cộng của JSX/Virtual DOM</strong></p>\n<ul>\n<li>Tất cả điều là javascript, ai cũng thích, bạn không cần biết những syntax mới được định nghĩa bởi framework, những kiến thức bạn nạp vào là kiến thức nền tảng của javascript, một khi bạn đã cứng tay, bạn có thể thiên biến vạn hóa theo sở thích.</li>\n<li>Xem <em>view</em> như một dạng <em>data </em>, một component sẽ return một thứ gì đó dựa vào những giá trị input khác nhau, bạn có thể làm những thứ như chụp một cái snapshot dựa trên virtual DOM, render nó trên những target khác như terminal, PDF, Canvas, WebGL</li>\n</ul>\n<p><strong>Điểm trừ của JSX/Virtual DOM</strong></p>\n<ul>\n<li>Vốn dĩ sẽ tiêu tốn tài nguyên. Khi React mới ra đời, họ cũng đã trả lời cho câu hỏi <em>làm như vậy có chậm không?</em>, <em>vâng nó chậm nhưng vẫn nhanh đủ để dùng</em>. Nếu nhìn nhận về mặc kỹ thuật, phải làm rất nhiều thao tác xử lý trên virtual DOM. Kích thước của một VDom chuẩn sẽ liên quan tới kích thước của view chứ không phải số lượng node sẽ thay đổi.</li>\n<li>Hàm render cơ bản rất linh động, vì linh động nên nó cũng rất khó optimize, linh động ở đây muốn nói đến một hàm render như thế này</li>\n</ul>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        children<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'text'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">===</span> <span class=\"token number\">2</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuilaptrinh.com\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'content'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta có thể tạo parent node trước, rồi sau đó nhét thêm các node con, hoặc bất cứ thứ gì bạn có thể nghĩ ra được, javascript rất linh động, có nhiều tình huống đặc biệt chúng ta khó có thể đảm bảo optimize được cho tất cả.</p>\n<ul>\n<li>Giải pháp của React cho tình huống này không tập trung vào việc làm cho virtual DOM nhanh hơn, mà làm cho chúng ta <em>cảm giác</em> performance tốt hơn (giống như việc gửi tin nhắn trên facebook luôn cảm giác như gửi được liền chứ không cần đợi), việc đó được thực hiện bằng các kỹ thuật runtime scheduling, concurrent mode, time slicing. Những giải pháp này buộc họ phải tự tạo và quản lý một <em>stack</em> riêng, một công việc rất tốn kém</li>\n</ul>\n<p><strong>Điểm cộng của Template</strong></p>\n<ul>\n<li>Với cách tiếp cận trực tiếp hơn cho việc render, performance đương nhiên sẽ <em>gần</em> hơn render performance của trình duyệt, với cách viết template như thế này sẽ không thể nào thay đổi được thứ tứ của những element đã khai báo</li>\n</ul>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Lorem ipsum<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Lorem ipsum<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{ message }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Lorem ipsum<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Việc đoán trước được những gì có thể thay đổi, giúp việc cải thiện hiệu năng cũng sẽ dễ tiếp cận hơn </p>\n<ul>\n<li>Tùy vào tình huống, có thể giá trị baseline runtime sẽ thấp hơn</li>\n</ul>\n<p><strong>Điểm trừ của Template</strong></p>\n<ul>\n<li>Dính chặt vào cú pháp của Template, bạn sẽ mất đi một ít tự do bay nhảy bằng javascript thông thường. Sự sáng tạo của chúng ta bị giới hạn trong những thứ mà framework cung cấp. Lỡ đâu bạn đã là một master javascript và bạn thấy cách làm của framework này <em>chuối</em> cả nải và muốn làm khác hơn.</li>\n<li>Cái giá phải trả cho giá trị baseline runtime thấp sẽ là kết quả trả về của mỗi template sẽ dài dòng hơn. Đôi khi để code chạy nhanh nhất có thể, chúng ta phải nhét cứng một số thông tin bên trong output</li>\n</ul>\n<h2 id=\"cơ-chế-state\"><a href=\"#c%C6%A1-ch%E1%BA%BF-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cơ chế State</h2>\n<blockquote>\n<p>mutable vs immutable, dirty checking vs dependency tracking, reactivity vs simulated reactivity</p>\n</blockquote>\n<p>Rất tiếc, Evan You không có thời gian trình bài phần này trong bài thuyết trình của mình.</p>\n<h2 id=\"tổng-kết\"><a href=\"#t%E1%BB%95ng-k%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tổng kết</h2>\n<p>Nếu bạn đang muốn chọn một framework một cách hợp lý, bạn phải hiểu được những gì mà framework đó đang đánh đổi, biết hướng đi của framework đó có khớp với những gì bạn ưu tiên hàng đầu cho dự án mình làm.</p>\n<p>Các bạn có thể xem Video bài thuyết trình của Evan You <a href=\"https://www.youtube.com/watch?v=ANtSWq-zI0s\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ở đây</a></p>\n"}},{"node":{"title":"Bàn luận về setTimeout và setInterval trong javascript","path":"/ban-luan-ve-set-timeout-va-set-interval-trong-javascript/","date":"16. November 2019","timeToRead":3,"desc":"Một số vấn đề về setTimeout đáng để bạn cân nhắc trước khi sử dụng","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#setinterval\">setInterval</a></li>\n<li><a href=\"#settimeout\">setTimeout</a></li>\n</ul>\n<!-- /TOC -->\n<p>Nếu bạn cần gọi một hàm <strong>lặp lại</strong> theo một khoản thời gian nhất định trong javascript bạn sẽ dùng gì? Một là dùng <code class=\"language-text\">setInterval</code>  hay là đệ quy <code class=\"language-text\">setTimeout</code></p>\n<p>Vì sao bạn nên cân nhắc trước khi sử dụng <code class=\"language-text\">setInterval</code>, nó đã gây ra tội tình gì? Vì sao sẽ tốt hơn nếu chúng ta lắng nghe và đợi một <em>tín hiệu</em> nào đó rồi chạy</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// đợi tính hiệu nào đó rồi thực thi một số việc</span>\n  <span class=\"token comment\">// sẽ luôn là lựa chọn tốt nhất</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu ông bà có dạy <em>đợi mua bò mới đi làm chuồng thì đã muộn</em> không đúng trong trường hợp này. <strong>CÓ</strong> trước hẳn làm gì thì làm.</p>\n<h3 id=\"setinterval\"><a href=\"#setinterval\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>setInterval</h3>\n<p>Với <code class=\"language-text\">setInterval</code> nó sẽ tiếp tục chạy cho tới khi chúng ta ra lệnh xóa nó hoặc đóng luôn trình duyệt.</p>\n<p><code class=\"language-text\">setInterval</code> cam kết đoạn code của chúng ta nó sẽ được đưa vào <strong>STACK</strong> theo đúng một chu kỳ thời gian. <em>Tuy nhiên</em>, đoạn code này của bạn <strong>không được cam kết</strong> sẽ chạy theo đúng chu kỳ thời gian, phụ thuộc vào các yếu tố khác nữa, và đã phần là có độ trễ, theo một cách dân gian ta gọi nó là <strong>HÊN XUI</strong></p>\n<p><img src=\"https://miro.medium.com/max/1837/1*A138JkWveIfKajztvhu60g.png\" alt=\"Bàn luận về setTimeout và setInterval trong javascript\"></p>\n<p>Thời gian chạy của hàm <code class=\"language-text\">dummyMethod1</code> tốn nhiều thời gian hơn dự tính, <em>lý do thì không rõ</em>.</p>\n<blockquote>\n<p>Javascript được thiết kế để chạy single thread, nó <strong>không</strong> thực hiện hai công việc cùng một lúc.</p>\n</blockquote>\n<p>Điều đó có nghĩa, các phương thức khác phía trên stack phải <strong>đợi</strong> cho đến khi <code class=\"language-text\">dummyMethod1</code> làm xong công chuyện của nó.</p>\n<p>Thêm một ví dụ khác, nếu hàm khai báo bên trong <code class=\"language-text\">setInterval</code> có thời gian chạy lớn hơn giá trị delay của <code class=\"language-text\">setInterval</code> (ví dụ như hàm gọi ajax), chúng ta sẽ có vấn đề như thế này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fakeCallToServer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returning from server'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">let</span> insideSetInterval <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'insideSetInterval'</span><span class=\"token punctuation\">,</span> insideSetInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">fakeCallToServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//insideSetInterval 14:13:47</span>\n<span class=\"token comment\">//insideSetInterval 14:13:49</span>\n<span class=\"token comment\">//insideSetInterval 14:13:51</span>\n<span class=\"token comment\">//returning from server 14:13:51</span>\n<span class=\"token comment\">//insideSetInterval 14:13:53</span>\n<span class=\"token comment\">//returning from server 14:13:53</span>\n<span class=\"token comment\">//insideSetInterval 14:13:55</span>\n<span class=\"token comment\">//returning from server 14:13:55</span></code></pre>\n<p>Như kết quả ở trên cho thấy, câu <code class=\"language-text\">console.log(&quot;insideSetInterval&quot;)</code> sẽ liên tục gọi ajax bất kể trước đó đã gọi thành công chưa. Đáng lẽ chúng ta phải kết thúc việc gọi liên tục này, đa phần chúng ta quên <code class=\"language-text\">clearInterval</code>. Nó sẽ tạo ra một hàng đợi <em>dài ngoằn</em> trong stack.</p>\n<p>Giờ thử một xử lý tuần tự trong <code class=\"language-text\">setInterval</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fakeTimeIntensiveOperation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> <span class=\"token number\">50000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'random'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> insideTimeTakingFunction  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'insideTimeTakingFunction'</span><span class=\"token punctuation\">,</span> insideTimeTakingFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> insideSetInterval <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'insideSetInterval'</span><span class=\"token punctuation\">,</span> insideSetInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>counter <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fakeTimeIntensiveOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>counter <span class=\"token operator\">>=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//insideSetInterval 13:50:53</span>\n<span class=\"token comment\">//insideTimeTakingFunction 13:50:55</span>\n<span class=\"token comment\">//insideSetInterval 13:50:55 &lt;---- mất tiêu câu gọi lúc 54 giây</span>\n<span class=\"token comment\">//insideSetInterval 13:50:56</span>\n<span class=\"token comment\">//insideSetInterval 13:50:57</span>\n<span class=\"token comment\">//insideSetInterval 13:50:58</span></code></pre>\n<p>Những gì đang diễn ra ở trên, với một thao tác tốn <em>kha khá</em> thời gian xử lý, nó mất hẳn đoạn code <code class=\"language-text\">console.log(&quot;insideSetInterval&quot;)</code>, nôm na là nó bị <em>đứt một nhịp</em>, tình huống này xảy ra với Chrome, nó tạo ra một <em>nhịp</em> mới.</p>\n<p>Thay vì dùng <code class=\"language-text\">setInterval</code>, chúng ta có thể dùng đệ quy <code class=\"language-text\">setTimeout</code></p>\n<h3 id=\"settimeout\"><a href=\"#settimeout\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>setTimeout</h3>\n<p>Mặc dù cũng chưa hẳn cam kết 100% đoạn code của chúng chạy đúng theo một chu kỳ đã định với đệ quy <code class=\"language-text\">setTimeout</code>. Chí ít nó cũng không gây ra chuyện đưa hàng đống lệnh chờ chạy vào trong stack</p>\n<p><img src=\"https://miro.medium.com/max/1920/1*A9gNYo3pOtnzuXi30NHjfA.png\" alt=\"Bàn luận về setTimeout và setInterval trong javascript\"></p>\n<p>Khi thực hiện bằng <code class=\"language-text\">setTimeout</code>, bên trong vòng đệ quy chúng ta đã có bước kiểm tra <strong>có nên</strong> gọi thêm lần nữa không.</p>\n<p>Lưu ý khi bạn dùng setTimeout, chớ có <strong>thực thi</strong> hàm đó luôn (kèm dấu <code class=\"language-text\">()</code>), chúng ta chỉ truyền hàm đó thôi</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ☠ Lỗi</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 👍 OK</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>sayHi<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre>\n<p><strong>Nguồn tham khảo</strong></p>\n<p><a href=\"https://dev.to/akanksha_9560/why-not-to-use-setinterval--2na9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Why not to use setInterval</a></p>\n<p><a href=\"https://develoger.com/settimeout-vs-setinterval-cff85142555b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">setTimeout VS setInterval</a></p>\n<p><a href=\"https://javascript.info/settimeout-setinterval\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Scheduling: setTimeout and setInterval</a></p>\n"}},{"node":{"title":"Gắn video làm background toàn màn hình","path":"/gan-video-lam-background-toan-man-hinh/","date":"12. November 2019","timeToRead":3,"desc":"Chia sẽ kỹ thuật làm background video để chạy full màn hình","content":"<p>Kết quả các bạn có thể xem trên trang mình mới làm\n<a href=\"http://chat-production.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://chat-production.com/</a></p>\n<p>Để có một cái video chạy toàn màn hình, chúng ta sẽ nghĩ ngay đến việc dùng thẻ <code class=\"language-text\">&lt;video /&gt;</code> của HTML5, đặt nó trong một cái <code class=\"language-text\">&lt;div/&gt;</code> có kích thước <code class=\"language-text\">width: 100%</code>, buồn thay nó không đúng như chúng ta mong đợi.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- HTML --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>videoContainer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">loop</span> <span class=\"token attr-name\">autoplay</span> <span class=\"token attr-name\">muted</span> <span class=\"token attr-name\">playsinline</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/show-reel.mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<blockquote>\n<p>Thêm <code class=\"language-text\">playsinline</code> để có thể chạy trên IOS như iPhone</p>\n</blockquote>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token id\">#container</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span><span class=\"token unit\">vw</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token selector\">video</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token unit\">%</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token unit\">%</span><span class=\"token punctuation\">;</span>   \n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Thứ nhất là nó sẽ không tự scale ra 100% của màn hình, thứ 2 khi chúng ta kéo to thu nhỏ cửa sổ trình duyệt, tỷ lệ khung hình (ngang và đứng) cũng sẽ không đạt đúng tỉ lệ thật của video.</p>\n<p>Để video có thể thay đổi kích thước theo từng giá trị màn hình khác nhau, chúng ta phải dùng đến javascript và css</p>\n<pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">#videoContainer </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token unit\">vh</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">780</span><span class=\"token unit\">px</span><span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span><span class=\"token unit\">vw</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">video </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token unit\">vw</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* canh video ngay giữa */</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token unit\">%</span><span class=\"token punctuation\">;</span> <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token unit\">%</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span><span class=\"token number\">-50</span><span class=\"token unit\">%</span><span class=\"token punctuation\">,</span> <span class=\"token number\">-50</span><span class=\"token unit\">%</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Source này được lấy từ <a href=\"https://codetheory.in/html5-fullscreen-background-video/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codetheory.in/html5-fullscreen-background-video/</a>, mình sử dụng chung với React</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// JS</span>\n  <span class=\"token keyword\">var</span> video <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"video\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    container <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#videoContainer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">setVideoDimensions</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> w <span class=\"token operator\">=</span> video<span class=\"token punctuation\">.</span><span class=\"token property-access\">videoWidth</span><span class=\"token punctuation\">,</span>\n      h <span class=\"token operator\">=</span> video<span class=\"token punctuation\">.</span><span class=\"token property-access\">videoHeight</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Intrinsic Ratio</span>\n    <span class=\"token comment\">// Will be more than 1 if W > H and less if W &lt; H</span>\n    <span class=\"token keyword\">var</span> videoRatio <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">/</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Get the container's computed styles</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// Also calculate the min dimensions required (this will be</span>\n    <span class=\"token comment\">// the container dimensions)</span>\n    <span class=\"token keyword\">var</span> containerStyles <span class=\"token operator\">=</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getComputedStyle</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      minW <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>containerStyles<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getPropertyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      minH <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>containerStyles<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getPropertyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// What's the min:intrinsic dimensions</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// The idea is to get which of the container dimension</span>\n    <span class=\"token comment\">// has a higher value when compared with the equivalents</span>\n    <span class=\"token comment\">// of the video. Imagine a 1200x700 container and</span>\n    <span class=\"token comment\">// 1000x500 video. Then in order to find the right balance</span>\n    <span class=\"token comment\">// and do minimum scaling, we have to find the dimension</span>\n    <span class=\"token comment\">// with higher ratio.</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// Ex: 1200/1000 = 1.2 and 700/500 = 1.4 - So it is best to</span>\n    <span class=\"token comment\">// scale 500 to 700 and then calculate what should be the</span>\n    <span class=\"token comment\">// right width. If we scale 1000 to 1200 then the height</span>\n    <span class=\"token comment\">// will become 600 proportionately.</span>\n    <span class=\"token keyword\">var</span> widthRatio <span class=\"token operator\">=</span> minW <span class=\"token operator\">/</span> w<span class=\"token punctuation\">,</span>\n      heightRatio <span class=\"token operator\">=</span> minH <span class=\"token operator\">/</span> h<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Whichever ratio is more, the scaling</span>\n    <span class=\"token comment\">// has to be done over that dimension</span>\n    <span class=\"token keyword\">let</span> newWidth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> newHeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>widthRatio <span class=\"token operator\">></span> heightRatio<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      newWidth <span class=\"token operator\">=</span> minW<span class=\"token punctuation\">;</span>\n      newHeight <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">ceil</span><span class=\"token punctuation\">(</span>newWidth <span class=\"token operator\">/</span> videoRatio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      newHeight <span class=\"token operator\">=</span> minH<span class=\"token punctuation\">;</span>\n      newWidth <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">ceil</span><span class=\"token punctuation\">(</span>newHeight <span class=\"token operator\">*</span> videoRatio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    video<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">width</span> <span class=\"token operator\">=</span> newWidth <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span>\n    video<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">height</span> <span class=\"token operator\">=</span> newHeight <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  video<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loadedmetadata\"</span><span class=\"token punctuation\">,</span> setVideoDimensions<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resize\"</span><span class=\"token punctuation\">,</span> setVideoDimensions<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đoạn js trên để đảm bảo kích thước của video được scale ra hết khung hình và thay đổi cho phù hợp khi trình duyệt thay đổi kích thước</p>\n<blockquote>\n<p>Dùng 2 listener <code class=\"language-text\">loadedmetadata</code> trên video và <code class=\"language-text\">resize</code> trên window để chỉnh lại kích thước thẻ video</p>\n</blockquote>\n"}},{"node":{"title":"Tại sao lại viết Super(props)","path":"/tai-sao-lai-viet-super-props/","date":"10. November 2019","timeToRead":5,"desc":"Bài cũ, dịch cũng lâu rồi, giờ mới đăng lên trang cá nhân của mình","content":"<p>Nghe nói <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hook</a> đang là trend. Trớ trêu thay, tôi muốn viết bài đầu tiên cho blog này để nói về điều thú vị của <em>class</em> component.</p>\n<p><strong>Vấn đề này <em>không</em> liên quan tới việc sử dụng React một cách hiệu quả. Nhưng bạn sẽ cảm thấy chúng thú vị nếu như bạn muốn tìm hiểu sâu hơn về cách hoạt động.</strong></p>\n<p>Đây là bài đầu tiên.</p>\n<hr>\n<p>Chúng ta đã viết <code class=\"language-text\">super(props)</code> không biết bao nhiêu lần trong đời:</p>\n<pre class=\"language-jsx{3}\"><code class=\"language-jsx{3}\">class Checkbox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isOn: true };\n  }\n  // ...\n}</code></pre>\n<p>Dĩ nhiên, nếu áp dụng <a href=\"https://github.com/tc39/proposal-class-fields\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">class field proposal</a> thì có thể bỏ qua <em>nghi thức</em> này:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Cú pháp này <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#es7-property-initializers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">đã  được hoạch định</a> khi React 0.13 đã hỗ trợ cho plain class năm 2015. KHai báo <code class=\"language-text\">constructor</code> và gọi <code class=\"language-text\">super(props)</code> luôn là kế hoạch tạm thời cho đến khi có một cách khác tốt hơn.</p>\n<p>Quay về ví dụ,  chỉ sử dụng các tính năng của ES2015:</p>\n<pre class=\"language-jsx{3}\"><code class=\"language-jsx{3}\">class Checkbox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isOn: true };\n  }\n  // ...\n}</code></pre>\n<p><strong>Tại sao chúng ta lại gọi <code class=\"language-text\">super</code>? Chúng ta có thể <em>không</em> gọi chúng được không? Nếu chúng ta gọi chúng, thì chuyện gì sẽ xảy ra nếu chúng ta không truyền <code class=\"language-text\">props</code>? Truyền thêm các tham số khác được không?</strong> Cùng tìm hiểu nào.</p>\n<hr>\n<p>Trong JavaScript, <code class=\"language-text\">super</code> để gọi lại constructor của class cha. (Trong ví dụ của chúng ta, nó trỏ về <code class=\"language-text\">React.Component</code>.)</p>\n<p>Điều quan trọng, bạn <strong>không thể sử dụng <code class=\"language-text\">this</code></strong> trong constructor nếu chưa gọi đến constructor của class cha. JavaScript sẽ không để bạn làm việc này:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 🔴  Không thể dùng `this` được</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ✅  Giờ thì dùng được rồi</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Có một lý do chính đáng giải thích vì sao JavaScript phải thực hiện constructor của lớp cha trước khi đụng vào <code class=\"language-text\">this</code>. Hãy xem xét trường hợp sau:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PolitePerson</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🔴  Điều này không cho phép, đọc lý do ở bên dưới</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Chào buổi sáng!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Hãy tưởng tượng, khi bạn có thể dùng <code class=\"language-text\">this</code> trước <code class=\"language-text\">super</code>. Một tháng sau, chúng ta đổi <code class=\"language-text\">greetColleagues</code>, thêm <code class=\"language-text\">this.name</code> khi alert:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Chào buổi sáng!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tên tôi là '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">+</span> <span class=\"token string\">', rất vui được gặp bạn!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>Nhưng chúng ta quên rằng <code class=\"language-text\">this.greetColleagues()</code> được gọi trước <code class=\"language-text\">super()</code>, giá trị <code class=\"language-text\">this.name</code> <strong>chỉ có sau khi gọi <code class=\"language-text\">super()</code></strong>! Lúc này bạn có thể thấy, code như thế này khó để biết được lỗi ở đâu.</p>\n<p>Để tránh những điều như vậy, <strong>JavaScript chỉ định rằng nếu bạn muốn sử dụng <code class=\"language-text\">this</code> bên trong constructor, bạn <em>phải</em> gọi <code class=\"language-text\">super</code> trước.</strong> Để cho thằng cha làm việc của nó! Và điều này cũng áp dụng với các lớp React components:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ✅  Okay, dùng `this` được rồi</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta cùng đến với câu hỏi khác: phải sao phải truyền vào <code class=\"language-text\">props</code>?</p>\n<hr>\n<p>Bạn hãy nghĩ đơn giản rằng khi truyền <code class=\"language-text\">props</code> vào <code class=\"language-text\">super</code> là cần thiết để <code class=\"language-text\">React.Component</code> constructor có thể thiết lập <code class=\"language-text\">this.props</code>:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Bên trong React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nó thật sự là <a href=\"https://github.com/facebook/react/blob/1d25aa5787d4e19704c049c3cfa985d3b5190e0d/packages/react/src/ReactBaseClasses.js#L22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cách mà chúng tôi thực hiện bên trong React.Component</a>.</p>\n<p>Bằng cách nào đó, nếu bạn gọi <code class=\"language-text\">super()</code> mà không có tham số <code class=\"language-text\">props</code>, bạn vẫn có thể sử dụng <code class=\"language-text\">this.props</code> trong phương thức <code class=\"language-text\">render</code> và các phương thức khác. (Nếu không tin, hãy tự kiểm tra xem!)</p>\n<p>Vậy <em>nó</em> hoạt động như thế nào? Hóa ra <strong>React đã gán <code class=\"language-text\">props</code> cho một instance ngay sau constructor:</strong></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token comment\">// Bên trong React</span>\n  <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  instance<span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></code></pre>\n<p>Thế nên khi bạn quên bỏ thằng <code class=\"language-text\">props</code> vào <code class=\"language-text\">super()</code>, thì trong React bạn vẫn có thể gọi nó sau đó. Có một lý do cho việc này.</p>\n<p>Khi React hỗ trợ thêm class, nó không chỉ hỗ trợ class cho mỗi phiên bản ES6. Mà mục tiêu chính là hỗ trợ nhiều class abstract nhất có thể. <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#other-languages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Không rõ</a> làm thế nào ClojureScript, CoffeeScript, ES6, Fable, Scala.js, TypeScript, hoặc các giải pháp khác định nghĩa component. Vì vậy, React sử dụng <code class=\"language-text\">super()</code> không hề là quan điểm cá nhân.</p>\n<p>Vậy có nghĩa là bạn có thể gọi <code class=\"language-text\">super()</code> thay vì <code class=\"language-text\">super(props)</code>?</p>\n<p><strong>Không. Như vậy rất khó hiểu.</strong> Chắc chắn, React sẽ gán <code class=\"language-text\">this.props</code> <em>sau khi</em>  constructor chạy. Nhưng <code class=\"language-text\">this.props</code> vẫn  là <code class=\"language-text\">undefined</code> <em>giữa</em> lúc gọi <code class=\"language-text\">super</code> và kết thúc constructor:</p>\n<pre class=\"language-jsx{14}\"><code class=\"language-jsx{14}\">// Bên trong React\nclass Component {\n  constructor(props) {\n    this.props = props;\n    // ...\n  }\n}\n\n// Bên trong code của bạn\nclass Button extends React.Component {\n  constructor(props) {\n    super(); // 😬 Chúng ta không truyền vào props\n    console.log(props);      // ✅ {}\n    console.log(this.props); // 😬 undefined - chưa định nghĩa \n  }\n  // ...\n}</code></pre>\n<p>Việc debug sẽ trở nên khó khăn nếu như một vài phương thức được gọi <em>từ</em> constructor. <strong>Đó là lý do vì sao luôn khuyến khích bạn sử dụng <code class=\"language-text\">super(props)</code>, mặc dù nó không phải quy định bắt buộc:</strong></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Chúng ta truyền props vào </span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ✅ {}</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ {}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Điều này đảm bảo <code class=\"language-text\">this.props</code> sẽ được thiết lập trong constructor.</p>\n<hr>\n<p>Có một điều cuối mà khiến cho các fan lâu năm của React tò mò.</p>\n<p>Bạn có thể thấy rằng khi sử dụng Context API bên trong class (hoặc với <code class=\"language-text\">contextTypes</code> cũ hoặc với <code class=\"language-text\">contextType</code> API được thêm vào ở React 16.6), <code class=\"language-text\">context</code> được đẩy vào tham số thứ hai trong constructor.</p>\n<p>Vậy tại sao chúng ta không viết là <code class=\"language-text\">super(props, context)</code>? Có thể chứ, nhưng context ít khi sử dụng nên việc phát sinh lỗi cũng ít xuất hiện.</p>\n<p><strong>Với <a href=\"https://github.com/tc39/proposal-class-fields\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">class fields proposal</a> thì những vấn đề này hầu như biến mất.</strong> Không có constructor, tất cả các tham số đều được truyền vào một cách tự động. Đây là những lý do cho phép một biểu thức <code class=\"language-text\">state = {}</code> bao gồm cả các tham chiếu <code class=\"language-text\">this.props</code> hoặc <code class=\"language-text\">this.context</code> nếu cần thiết.</p>\n<p>Với Hooks, chúng ta thậm chí không có <code class=\"language-text\">super</code> hoặc <code class=\"language-text\">this</code>. Nhưng chủ đề đó sẽ giành cho một ngày khác.</p>\n<p><strong>Bài viết được dịch từ</strong> <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://overreacted.io/why-do-we-write-super-props/\">Why Do We Write super(props)?</a></p>\n"}},{"node":{"title":"Thuật toán QuickSort","path":"/thuat-toan-quick-sort/","date":"2. November 2019","timeToRead":2,"desc":"Một thuật toán rất phổ biến mà chúng ta phải nắm thật chắc và hình dung được cách hiện thực nó ngay khi được nhắc tới.","content":"<h2 id=\"một-chút-lịch-sử\"><a href=\"#m%E1%BB%99t-ch%C3%BAt-l%E1%BB%8Bch-s%E1%BB%AD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một chút lịch sử</h2>\n<p>Thuật toán <em>chia để trị</em> phổ biến nhất mà tất cả anh em lập trình đều được học qua thời mài đích trường đại học. Được tạo ra bởi Tony Hoare năm 1959</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--k1SblSX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.coderscat.com/wp-content/uploads/2019/10/2019_10_09_quick_sort.org_20191009_203646.png\" alt=\"Thuật toán Quicksort\"></p>\n<p>Trên là hình ông Tony Hoare trình làng thuật toán QuickSort năm 1960 tại Moscow.</p>\n<p>Để mô tả thuật toán này, nó bao gồm các bước chính như sau:</p>\n<ol>\n<li>Nếu chỉ còn một phần tử hoặc không còn phần tử nào để sort, nghĩa là <strong>KẾT THÚC</strong></li>\n<li>Mỗi lần gọi sort chúng ta chọn một phần tử làm <strong>CHỐT ĐỂ SO SÁNH</strong></li>\n<li>So sánh tất cả các phần tử còn lại với <strong>CHỐT ĐỂ SO SÁNH</strong>, nhỏ hơn đưa vào một <strong>nhóm nhỏ hơn</strong>, lớn hơn đưa qua <strong>nhóm lớn hơn</strong></li>\n<li>(Đệ quy) thực hiện đúng những bước đã làm với các phần tử thuộc 2 nhóm mới có</li>\n</ol>\n<p>Độ phức tạp của nó là O(NlogN), trường hợp xấu nhất là O(N2). Đại khái nó là một trong những phương pháp sort mảng hiệu quả nhất.</p>\n<p>Để hiểu độ phức tạp của thuật toán, các bạn <a href=\"http://vuilaptrinh.com/2019-10-28-gioi-thieu-ve-do-phuc-tap-cua-thuat-toan\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">đọc bài này</a></p>\n<h2 id=\"hiện-thực-bằng-javascript\"><a href=\"#hi%E1%BB%87n-th%E1%BB%B1c-b%E1%BA%B1ng-javascript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hiện thực bằng Javascript</h2>\n<p>Trong javascript đã có sẵn hàm <code class=\"language-text\">sort</code> vậy tại sao chúng ta lại quan tâm tới thuật toán QuickSort?</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [2, 3, 5, 6, 7, 9]</span></code></pre>\n<p>Hàm <code class=\"language-text\">sort()</code> của javascript sẽ tùy thuộc vào engine trình duyệt, <strong>insertion sort</strong> cho Chrome và <strong>merge sort</strong> cho Firefox và Safari</p>\n<p>Nó <strong>không phù hợp khi phải sort số lượng dữ liệu lớn</strong>, hay là một mảng object, dạng <code class=\"language-text\">[{order: 1}, {order: 4}, {order: 2}]</code></p>\n<p>Hiện thực cho mảng bình thường, phần mảng là object các bạn chỉ cần thay điều kiện so sánh</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">unsortedArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> smaller <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">let</span> larger <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>unsortedArray<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> unsortedArray<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> unsortedArray<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>unsortedArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> unsortedArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            smaller<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>unsortedArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>unsortedArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> unsortedArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n            larger<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>unsortedArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>smaller<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span>unsortedArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>larger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n"}},{"node":{"title":"Độ phức tạp của thuật toán","path":"/do-phuc-tap-cua-thuat-toan/","date":"28. October 2019","timeToRead":4,"desc":"Một cách chuẩn hóa trong ngành lập trình để đánh giá độ phức tạp của giải thuật","content":"<p>Một <strong>giải thuật</strong> sẽ bao gồm <strong>các bước tuần tự</strong> để giải quyết một vấn đề, để đi qua các bước tuần tự này, sẽ tốn một <strong>khoản thời gian</strong> nhất định để hoàn thành. Thời gian tiêu tốn của một giải thuật để giải quyết vấn đề được gọi là <strong>Độ phức tạp của thuật toán</strong></p>\n<p>Trong trường hợp xấu nhất, <strong>thời gian chạy của một giải thuật tỉ lệ thuận với số lượng tham số đầu vào</strong></p>\n<p>Giống như giải toán, chuyện có nhiều cách khác nhau để giải cùng một bài toán là bình thường. Ví dụ như nhân 2 con số, có rất nhiều cách để tính nhẩm được, chứ không phải chỉ có đúng một cách mà thầy cô bạn dạy hồi tiểu học, cách nào giúp ta nhẩm nhanh hơn thì được gọi là ít phức tạp hơn.</p>\n<p>Độ phức tạp của thuật toán được diễn đạt bằng ký hiệu <strong>chữ O viết hoa</strong>. O cho biết thời gian cần chạy của giải thuật <strong>tỉ lệ như thế nào</strong> với số lượng tham số đầu vào (như một dạng đơn vị hé)</p>\n<p><img src=\"https://i1.wp.com/www.jenniferbland.com/wp-content/uploads/big-o-complexity.png?w=783&#x26;ssl=1\"></p>\n<h2 id=\"o1---độ-phức-tạp-không-đổi\"><a href=\"#o1---%C4%91%E1%BB%99-ph%E1%BB%A9c-t%E1%BA%A1p-kh%C3%B4ng-%C4%91%E1%BB%95i\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>O(1) - Độ phức tạp không đổi</h2>\n<p>Giải thuật nào có độ phức tạp bằng <strong>O(1)</strong> nghĩa là giải thuật đó không phụ thuộc giá trị input có <em>bự</em> bao nhiêu đi nữa, nó luôn có độ phức tạp không đổi.</p>\n<p>Nếu một hàm có độ phức tạp bằng O(1) nghĩa là trường hợp đẹp nhất của hàm, tối ưu nhất.</p>\n<p><img src=\"https://i0.wp.com/www.jenniferbland.com/wp-content/uploads/O1-constant-time-complexity.jpg?w=416&#x26;ssl=1\"></p>\n<p>Ví dụ, hash table</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*1 triệu phần tử chẳng hạn*/</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Câu lệnh sau có O(1)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token string\">\"một key bất kỳ\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// hàm lấy giá trị cuối cùng của mảng</span>\n<span class=\"token comment\">// độ phức tạp là O(1), dù mảng có bao nhiêu phần tử </span>\n<span class=\"token comment\">// cũng ko ảnh hưởng thời gian chạy</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLast</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">items</span> <span class=\"token arrow operator\">=></span> items<span class=\"token punctuation\">[</span>items<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"olog-n\"><a href=\"#olog-n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>O(log n)</h2>\n<p>Thời gian chạy càng tăng, mức độ phức tạp càng giảm</p>\n<p>Ví dụ bạn muốn tìm số điện thoại của một người trong cuốn danh bạ khoản một triệu cái tên. Điều đầu tiên chúng làm là tìm mở đại khoản giữa cuốn danh bạ, so sanh cái tên hiện tại nằm trước hay nằm sau trang đó, lặp lại tương tự với nhóm mới tìm được.</p>\n<p>Rõ ràng khi càng tìm, số lượng tên phải kiểm tra càng giảm đáng kể (mỗi lần bỏ qua 1 nữa). Nếu có 3 tên, chúng ta chỉ tốn 2 bước là tìm ra. Có 15 tên, chúng ta chỉ cần tối đa 4 bước.</p>\n<p><img src=\"https://i1.wp.com/www.jenniferbland.com/wp-content/uploads/Olog-n-logarithmic-complexity.jpg?w=472&#x26;ssl=1\"></p>\n<p>Thời gian thực hiện thuật toán giảm đáng kể khi số lượng input giảm.</p>\n<p>Ví dụ như thuật toán tìm kiếm QuickSort</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">quickSort</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">list</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> pivot <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> left  <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> total <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> total<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> pivot<span class=\"token punctuation\">)</span>\n      left<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n      right<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token spread operator\">...</span><span class=\"token method function property-access\">quickSort</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    pivot<span class=\"token punctuation\">,</span> \n    <span class=\"token spread operator\">...</span><span class=\"token method function property-access\">quickSort</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"on---thời-gian-tịnh-tiến-theo-số-lượng-input\"><a href=\"#on---th%E1%BB%9Di-gian-t%E1%BB%8Bnh-ti%E1%BA%BFn-theo-s%E1%BB%91-l%C6%B0%E1%BB%A3ng-input\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>O(n) - Thời gian tịnh tiến theo số lượng input</h2>\n<p>Đây là những thuật toán có tốc độ tăng <strong>song hành</strong> với số lượng input tăng, trường hợp xấu nhất sẽ rơi vào khi số lượng input nhiều nhất</p>\n<p>Ví dụ, bạn in ra giá trị của một mảng 10 phần tử, loop qua toàn bộ các phần tử để làm việc in này. Khi số lượng phần tử tăng lên thành 1000 lần thì bạn cũng phải loop qua 1000 phần tử</p>\n<p><img src=\"https://i2.wp.com/www.jenniferbland.com/wp-content/uploads/On-Linear-Complexity.jpg?w=463&#x26;ssl=1\"></p>\n<p>Ví dụ các vòng lặp <code class=\"language-text\">for</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">findIndex</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">items<span class=\"token punctuation\">,</span> match</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> total <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> total<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> match<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> array<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// loop 1 lần, tốt nhất</span>\n<span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n<span class=\"token comment\">// loop 4 lần, xấu nhất</span>\n<span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// loop 4 lần, xấu nhất</span>\n<span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -1 </span></code></pre>\n<h2 id=\"on2----thời-gian-chạy-tăng-theo-n-mũ-2\"><a href=\"#on2----th%E1%BB%9Di-gian-ch%E1%BA%A1y-t%C4%83ng-theo-n-m%C5%A9-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>O(n^2)  - Thời gian chạy tăng theo n mũ 2</h2>\n<p>Ngược lại với <strong>O(log n)</strong>, thời gian chạy của thuật toán nào có giá trị này sẽ tăng theo **số lượng input mũ 2)</p>\n<p><img src=\"https://i1.wp.com/www.jenniferbland.com/wp-content/uploads/On2-quadratic-time-complexity.jpg?w=382&#x26;ssl=1\"></p>\n<p>Trong lập trình chúng ta sẽ tránh để các đoạn code nào bị rơi vào độ phức tạp O(n^2)</p>\n<p>Ví dụ, 2 vòng lặp for lồng nhau, bubble sort.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">findMatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> string<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> string<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> string<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://www.freecodecamp.org/news/time-is-complex-but-priceless-f0abd015063c/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.freecodecamp.org/news/time-is-complex-but-priceless-f0abd015063c/</a></p>\n<p><a href=\"http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html</a></p>\n<p><a href=\"https://medium.com/@gmedina229/big-o-in-javascript-36ff67766051\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@gmedina229/big-o-in-javascript-36ff67766051</a></p>\n<p><a href=\"https://medium.com/javascript-scene/time-complexity-big-o-notation-1a4310c3ee4b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/javascript-scene/time-complexity-big-o-notation-1a4310c3ee4b</a></p>\n<p><a href=\"https://medium.com/cesars-tech-insights/big-o-notation-javascript-25c79f50b19b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/cesars-tech-insights/big-o-notation-javascript-25c79f50b19b</a></p>\n<p><a href=\"https://www.jenniferbland.com/time-complexity-analysis-in-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.jenniferbland.com/time-complexity-analysis-in-javascript/</a></p>\n"}},{"node":{"title":"Bạn không cần jQuery","path":"/ban-khong-can-j-query/","date":"25. October 2019","timeToRead":3,"desc":"Không cần jQuery, bạn thể thể dùng javascript thuần để thực hiện những thao tác trước đây bạn nghĩ phải có jQuery cơ","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#ch%e1%bb%8dn-element\">Chọn element</a></li>\n<li><a href=\"#ch%e1%ba%a1y-function-tr%c3%aan-c%c3%a1c-element-%c4%91%c3%a3-ch%e1%bb%8dn\">Chạy function trên các element đã chọn</a></li>\n<li><a href=\"#t%c3%acm-element-con-b%c3%aan-trong-element-cha-%c4%91%c3%a3-ch%e1%bb%8dn\">Tìm element con bên trong element cha đã chọn</a></li>\n<li><a href=\"#di-chuy%e1%bb%83n-qua-c%c3%a1c-element-k%e1%bb%81-c%e1%ba%adn\">Di chuyển qua các element kề cận</a></li>\n<li><a href=\"#g%e1%ba%afn-s%e1%bb%b1-ki%e1%bb%87n\">Gắn sự kiện</a></li>\n<li><a href=\"#dispatch-event\">Dispatch event</a></li>\n<li><a href=\"#styling-cho-element\">Styling cho element</a></li>\n<li><a href=\"#%e1%ba%a8n-hi%e1%bb%87n-element\">Ẩn hiện element</a></li>\n<li><a href=\"#document-ready\">Document ready</a></li>\n<li><a href=\"#l%c3%a0m-vi%e1%bb%87c-v%e1%bb%9bi-class\">Làm việc với class</a></li>\n<li><a href=\"#network-request\">Network request</a></li>\n<li><a href=\"#t%e1%ba%a1o-element\">Tạo element</a></li>\n</ul>\n<!-- /TOC -->\n<p>Hiện giờ chúng ta đã làm việc nhiều với các framework <em>hại điện</em> hơn nhiều so với jQuery, nên rất ít chi đụng tới DOM thật, không còn ngày tháng <em>xào trộn</em> HTML bằng jQuery, chúng ta chỉ định nghĩa khi nào render, render cái gì. Tuy nhiên, kỹ năng <em>sờ mó</em> vào DOM là cần thiết cho mọi lập trình viên FE. Bây giờ muốn <em>sờ</em> vào DOM chúng ta cần nắm cách dùng javascript thuần.</p>\n<h2 id=\"chọn-element\"><a href=\"#ch%E1%BB%8Dn-element\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chọn element</h2>\n<blockquote>\n<p>document.querySelector('.vuilaptrinh')</p>\n</blockquote>\n<p>Nó trả về một HTMLElement object <strong>đầu tiên</strong> thỏa điều kiện CSS Selector, cái <code class=\"language-text\">.vuilaptrinh</code> này gọi là CSS Selector.</p>\n<p>Nói là đầu tiên vì nếu có <em>dăm ba cái</em> <code class=\"language-text\">.vuilaptrinh</code> nó cũng chỉ trả về thằng đầu tiên</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>vuilaptrinh<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>vuilaptrinh<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>vuilaptrinh<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<blockquote>\n<p>document.querySelectorAll('.vuilaptrinh')</p>\n</blockquote>\n<p>Nó sẽ trả về một danh sách các element thỏa điều kiện CSS selector, ví dụ 3 thằng <code class=\"language-text\">.vuilaptrinh</code> ở trên đều được chọn.</p>\n<h2 id=\"chạy-function-trên-các-element-đã-chọn\"><a href=\"#ch%E1%BA%A1y-function-tr%C3%AAn-c%C3%A1c-element-%C4%91%C3%A3-ch%E1%BB%8Dn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chạy function trên các element đã chọn</h2>\n<p>\"Sờ\" được các element này rồi, thì chúng ta sẽ muốn làm tiếp cái gì đó, chứ không chỉ <em>sờ cho vui</em>, chúng ta phải loop qua toàn bộ element đã <em>sờ</em> được bằng vòng lặp <code class=\"language-text\">.forEach</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.vuilaptrinh'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vui</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> vui<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">display</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"none\"</span> <span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"tìm-element-con-bên-trong-element-cha-đã-chọn\"><a href=\"#t%C3%ACm-element-con-b%C3%AAn-trong-element-cha-%C4%91%C3%A3-ch%E1%BB%8Dn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tìm element con bên trong element cha đã chọn</h2>\n<p>Chúng ta gọi lại <code class=\"language-text\">.querySelector</code> trên element cha thôi</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> cha <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.vuilaptrinh'</span><span class=\"token punctuation\">)</span>\ncha<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.luckyluu'</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"di-chuyển-qua-các-element-kề-cận\"><a href=\"#di-chuy%E1%BB%83n-qua-c%C3%A1c-element-k%E1%BB%81-c%E1%BA%ADn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Di chuyển qua các element kề cận</h2>\n<p>Hồi nhỏ học tiếng anh, cô dạy \"brother\", \"sister\" là anh chị em, lớn lên xem Youtube mới biết, tụi nước ngoài nó dùng từ <strong>sibling</strong> để nói anh chị em, chứ ít khi dùng brother, sister. Javascript bê luôn nguyên chữ này vào để xài</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bochungno<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>anhtrai<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>vuilaptrinh<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emgai<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> box <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.vuilaptrinh'</span><span class=\"token punctuation\">)</span>\nbox<span class=\"token punctuation\">.</span><span class=\"token property-access\">nextElementSibling</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// emgai</span>\nbox<span class=\"token punctuation\">.</span><span class=\"token property-access\">previousElementSibling</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// anhtrai</span>\nbox<span class=\"token punctuation\">.</span><span class=\"token property-access\">parentElement</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bochungno</span></code></pre>\n<h2 id=\"gắn-sự-kiện\"><a href=\"#g%E1%BA%AFn-s%E1%BB%B1-ki%E1%BB%87n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gắn sự kiện</h2>\n<blockquote>\n<p>addEventListener</p>\n</blockquote>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseenter\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keyup\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"dispatch-event\"><a href=\"#dispatch-event\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dispatch event</h2>\n<p>Nếu cần <em>bún</em> ra một sự kiện bằng javascript một cách chủ động, ko đợi sự kiện <em>tự</em> xảy ra</p>\n<blockquote>\n<p>dispatchEvent</p>\n</blockquote>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dispatchEvent</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myEvent'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n<span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myEvent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"styling-cho-element\"><a href=\"#styling-cho-element\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Styling cho element</h2>\n<p>Cái này cần tra cứu và học một số thuộc tính hay xài, nguyên tắc chung là viết thuộc tính css theo kiểu camelCase</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> box <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".box\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbox<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">color</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"#000\"</span><span class=\"token punctuation\">;</span>\nbox<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">backgroundColor</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span>\nbox<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">paddingLeft</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"10px\"</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"ẩn-hiện-element\"><a href=\"#%E1%BA%A9n-hi%E1%BB%87n-element\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ẩn hiện element</h2>\n<blockquote>\n<p>style.display</p>\n</blockquote>\n<p>Trỏ đến thuộc tính <code class=\"language-text\">style</code>, thay đổi giá trị display thành <code class=\"language-text\">none</code> hoặc <code class=\"language-text\">block</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".box\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">display</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".box\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">display</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"block\"</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"document-ready\"><a href=\"#document-ready\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Document ready</h2>\n<p>Một trong những tình huống hay gặp là chúng ta cần chạy một đoạn javascript sau khi HTML đã render xong</p>\n<blockquote>\n<p>DOMContentLoaded</p>\n</blockquote>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// khai báo hàm ready để xài cho tiện</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">ready</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">callback</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">readyState</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'loading'</span><span class=\"token punctuation\">)</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// thực hiện xử lý gì đó</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"làm-việc-với-class\"><a href=\"#l%C3%A0m-vi%E1%BB%87c-v%E1%BB%9Bi-class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Làm việc với class</h2>\n<blockquote>\n<p>classList</p>\n</blockquote>\n<p>Thông qua <code class=\"language-text\">classList</code> chúng ta có thể thêm-xóa-toggle một class</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> box <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.box'</span><span class=\"token punctuation\">)</span>\nbox<span class=\"token punctuation\">.</span><span class=\"token property-access\">classList</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focus'</span><span class=\"token punctuation\">)</span>\nbox<span class=\"token punctuation\">.</span><span class=\"token property-access\">classList</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focus'</span><span class=\"token punctuation\">)</span>\nbox<span class=\"token punctuation\">.</span><span class=\"token property-access\">classList</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focus'</span><span class=\"token punctuation\">)</span>\nbox<span class=\"token punctuation\">.</span><span class=\"token property-access\">classList</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focus'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blurred'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Để kiểm tra element có class nào đó không</p>\n<blockquote>\n<p>classList.contains</p>\n</blockquote>\n<p>Ví dụ, kiểm tra xem element là <code class=\"language-text\">.box</code> có chứa class là <code class=\"language-text\">active</code> không</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">classList</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focus'</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"network-request\"><a href=\"#network-request\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Network request</h2>\n<blockquote>\n<p>fetch</p>\n</blockquote>\n<p>Mình có bài chi tiết về API này rồi, các bạn đọc lại <a href=\"/2018-10-01-huong-dan-gioi-thieu-fetch-javascript\">Giới thiệu fetch() của javascript</a></p>\n<h2 id=\"tạo-element\"><a href=\"#t%E1%BA%A1o-element\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tạo element</h2>\n<p>Tạo thẻ <code class=\"language-text\">&lt;div /&gt;</code> với nội dung là <code class=\"language-text\">&lt;div&gt;text&lt;/div&gt;</code>, rồi chèn nó vào <code class=\"language-text\">&lt;div class=&#39;box&#39; /&gt;</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> el <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// thêm nội dung text</span>\nel<span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span> <span class=\"token operator\">=</span> <span class=\"token string\">'text'</span>\n<span class=\"token comment\">// chèn element nào vào đâu đó</span>\n<span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">appendChild</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span></code></pre>\n"}},{"node":{"title":"Giới thiệu Temporal Dead Zone trong javascript","path":"/gioi-thieu-temporal-dead-zone-trong-javascript/","date":"21. October 2019","timeToRead":2,"desc":"Bạn đã biết hoisted? bạn cần biết thêm khái niệm Temporal Dead Zone là đủ một cặp","content":"<p>Temporal Dead Zone - <em>Khu vực tự trị, ngoài vòng pháp luật</em></p>\n<p>Đoạn code bên dưới sẽ cho kết quả thế nào, đố bạn</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// có chạy được ko, chưa khai báo `Car`</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">color</span> <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>hoặc gọi một hàm trước khi nó được khai báo</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// có chạy được ko, chưa khai báo greet</span>\n<span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'VuiLapTrinh'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">who</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>who<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đáp án là, với trường hợp sử dụng một <code class=\"language-text\">class</code> chưa được khai báo, kết quả là <code class=\"language-text\">ReferenceError</code>, còn sử dụng hàm chưa khai báo, chạy bình thường 😂😓🤔</p>\n<p>Temporal Dead Zone (TDZ - <em>khu vực tự trị</em>) là nơi quản lý tính khả thi của <code class=\"language-text\">let</code>, <code class=\"language-text\">const</code>, <code class=\"language-text\">class</code></p>\n<p>Bắt đầu với khai báo <code class=\"language-text\">const</code></p>\n<pre class=\"language-js{1}\"><code class=\"language-js{1}\">white; // throws `ReferenceError`\nconst white = '#FFFFFF';\nwhite;</code></pre>\n<p>Trước khi có sự xuất hiện của <code class=\"language-text\">const white = &#39;#FFFFFF&#39;</code>, biến <code class=\"language-text\">white</code> sẽ nằm trong <em>khu vực tự trị</em> (TDZ)</p>\n<p>Chúng ta không thể truy cập vào khu vực tự trị này, nên nó sẽ trả về lỗi <code class=\"language-text\">ReferenceError: Cannot access &#39;white&#39; before initialization</code></p>\n<p><img src=\"https://dmitripavlutin.com/static/7973b25e51eb97f6d330c941600f7ad8/5722e/temporal-dead-zone-in-javascript.webp\" alt=\"Giới thiệu Temporal Dead Zone trong javascript\"></p>\n<p>Khái niệm này giúp tránh sự <em>lằng nhằng</em> trong javascript <strong>trước đây</strong>, được phép sử dụng trước khi khai báo. Vì nó chỉ được thêm vào <em>sau này</em>, nên chỉ có hiệu lực trên các từ khóa <em>sau này</em> mới có là <code class=\"language-text\">let</code>, <code class=\"language-text\">const</code>, <code class=\"language-text\">class</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// throws `ReferenceError`</span>\ncount<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> count<span class=\"token punctuation\">;</span>\ncount <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// throws `ReferenceError`</span>\n<span class=\"token keyword\">const</span> myNissan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">color</span> <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nó cũng giải thích luôn tại sao chúng ta phải gọi <code class=\"language-text\">super</code> trong <code class=\"language-text\">class</code> trước khi gọi <code class=\"language-text\">this</code>, vì <code class=\"language-text\">this</code> tạm thời nằm trong khu TDZ khi chưa gọi <code class=\"language-text\">super</code></p>\n<pre class=\"language-js{3,4,8}\"><code class=\"language-js{3,4,8}\">class MuscleCar extends Car {\n  constructor(color, power) {\n    this.power = power;\n    super(color);\n  }\n}\n\nconst myCar = new MuscleCar('blue', '300HP'); // `ReferenceError`</code></pre>\n<p>Chúng ta phải dùng <code class=\"language-text\">this.</code> sau khi gọi <code class=\"language-text\">super</code></p>\n<p>Với những cách khai báo cũ là <code class=\"language-text\">var</code>, <code class=\"language-text\">function</code> nó không chịu chung số phận phải sống trong khu tự trị, nó sẽ chịu khái niệm <strong>Hoisting</strong>.</p>\n<p>Hoisting là một cơ chế hoạt động gây khó dễ anh em chúng ta đã bao nhiêu thập kỷ nay.</p>\n<p>Anh em ra đường gặp một em chưa hề quen biết, chúng ta nhẹ nhàng tới hỏi \"Em nhà ở đâu thế?\", nhận được câu trả lời anh lên phường tra cứu, lên đến phường, \"chẳng ai biết ẻm là ai\", phường chỉ lên quận tra cứu, <em>quận</em> lại bảo \"có mà lên ủy ban thành phố chú ạ\", lỡ mà xui xui chúng ta phải lên đến trung ương để biết rằng em đã đăng ký hộ khẩu ở đâu.</p>\n<pre class=\"language-js{2,5,9}\"><code class=\"language-js{2,5,9}\">// chạy như thường, nhưng đừng viết gì nhá\nvalue; // => undefined\nvar value;\n\ngreet('VuiLapTrinh'); // => 'Hello, VuiLapTrinh!'\nfunction greet(who) {\n  return `Hello, ${who}!`;\n}\ngreet('Andy'); // => 'Hello, Andy!'</code></pre>\n<p>Cho nên bạn có thể làm được việc này, xài trước, <code class=\"language-text\">import</code> sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> myFunction <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./myModule'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>TDZ còn phụ thuộc vào từng <em>thành phố</em>, mỗi thành phố sẽ có khu vực tự trị khác nhau</p>\n<p><img src=\"https://dmitripavlutin.com/static/bba73f7c82f4385bbd81ad4c3531217c/5722e/limits-of-temporal-dead-zone-javascript.webp\" alt=\"Giới thiệu Temporal Dead Zone trong javascript\"></p>\n<p>Lấy ví dụ</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">someVal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Function scope</span>\n  <span class=\"token keyword\">typeof</span> variable<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => undefined</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>someVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Inner block scope</span>\n    <span class=\"token keyword\">typeof</span> variable<span class=\"token punctuation\">;</span> <span class=\"token comment\">// throws `ReferenceError`</span>\n    <span class=\"token keyword\">let</span> variable<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><a href=\"https://dmitripavlutin.com/javascript-variables-and-temporal-dead-zone/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Don't Use JavaScript Variables Without Knowing Temporal Dead Zone</a></p>\n"}},{"node":{"title":"7 Câu hỏi phỏng vấn lắc léo với Javascript","path":"/7-cau-hoi-phong-van-lac-leo-voi-javascript/","date":"18. October 2019","timeToRead":4,"desc":"Thử kiến thức javascript của bạn đã đủ cho cuộc phỏng vấn cam go sắp tới chưa","content":"<h2 id=\"1\"><a href=\"#1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1</h2>\n<p>Kết quả của <code class=\"language-text\">typeof a</code> và <code class=\"language-text\">typeof b</code> trong đoạn code sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => ???</span>\n<span class=\"token keyword\">typeof</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => ???</span></code></pre>\n<p><em>Đáp án</em></p>\n<p>Lắc léo là ở chổ <code class=\"language-text\">let a = b = 0</code>. Câu này khai báo một biến cục bộ <code class=\"language-text\">a</code>, <strong>đồng thời khai báo một biến toàn cục <code class=\"language-text\">b</code></strong></p>\n<p>Vì không có một khai báo nào của <code class=\"language-text\">b</code>, javascript tự hiểu b chính là <code class=\"language-text\">window.b = 0</code> 😂😂</p>\n<p>Trường hợp này gọi là <em>vô tình</em> tạo ra một biến toàn cục, sự <em>vô tình</em> này còn có thể thấy ở</p>\n<p><img src=\"https://dmitripavlutin.com/static/41b7ea0d888dd9b298e41b9ff9bf4590/f8b1b/accitental-global-variables.webp\"></p>\n<p>Trình duyệt sẽ  chạy đoạn code trên như thế này</p>\n<pre class=\"language-js{2-4}\"><code class=\"language-js{2-4}\">function foo() {\n  let a;\n  window.b = 0;\n  a = window.b;\n  a++;\n  return a;\n}</code></pre>\n<p>✅ Kết quả</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// => 'undefined'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">b</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 'number'</span></code></pre>\n<h2 id=\"2\"><a href=\"#2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2</h2>\n<p>Giá trị của <code class=\"language-text\">clothes[0]</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> clothes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'jacket'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'t-shirt'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nclothes<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\nclothes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => ???</span></code></pre>\n<p>Lắc léo ở giá trị <code class=\"language-text\">length</code> của một array là một giá trị đặc biệt, đặc biệt ở chổ <em>nó tạo ra side-effect</em>, nếu thay đổi giá trị này sẽ ảnh hưởng trực tiếp đến array đó. 😂😂</p>\n<p>Trong trường hợp trên, với việc <code class=\"language-text\">clothes.length = 0</code> chúng ta đã xóa toàn bộ item trong array clothes</p>\n<p>✅ Kết quả <code class=\"language-text\">clothes[0]</code> là <code class=\"language-text\">undefined</code></p>\n<h2 id=\"3\"><a href=\"#3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3</h2>\n<p>Nội dung của array <code class=\"language-text\">numbers</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">{</span>\n  numbers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nnumbers<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => ???</span></code></pre>\n<p>Lắc léo là ở chổ <code class=\"language-text\">;</code>, nếu bạn ko để ý kỹ.</p>\n<p><img src=\"https://dmitripavlutin.com/static/edd9c7bd7fa83cc909f5b7694686bdfd/f8b1b/for-and-null-statement-pitfall-4.webp\" alt=\"The null statement effect\"></p>\n<p>Đoạn <code class=\"language-text\">for</code> chạy 4 lần mà không làm gì cả vì <code class=\"language-text\">;</code> 😂😂</p>\n<p>Trình duyệt sẽ chạy theo kiểu</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// does nothing</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// a simple block</span>\n  numbers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nnumbers<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => [5]</span></code></pre>\n<p>✅ Kết quả <code class=\"language-text\">numbers</code> chỉ gồm 1 phần tử với giá trị bằng 5</p>\n<p><em>Câu chuyện có thật, tác giả bài viết này bị chấm rớt bởi câu phỏng vấn này, lý do được đưa ra rất hợp lý: Chúng tôi cần những người cẩn thận và chi tiết</em></p>\n<h2 id=\"4\"><a href=\"#4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4</h2>\n<p>Giá trị trả về của <code class=\"language-text\">arrayFromValue()</code></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">arrayFromValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">[</span>items<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">arrayFromValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => ???</span></code></pre>\n<p>Rất nhiều người sẽ không nghĩ rằng việc xuống dòng giữa <code class=\"language-text\">return</code> và <code class=\"language-text\">[items]</code> ảnh hưởng gì tới kết quả cuối cùng.</p>\n<p>Javascript tự động thêm dấu <code class=\"language-text\">;</code> vào sau câu <code class=\"language-text\">return</code> 😂😂</p>\n<pre class=\"language-javascript{2}\"><code class=\"language-javascript{2}\">function arrayFromValue(item) {\n  return;\n  [items];\n}\n\narrayFromValue(10); // => undefined</code></pre>\n<p>✅ Kết quả của <code class=\"language-text\">arrayFromValue(10)</code> là <code class=\"language-text\">undefined</code></p>\n<h2 id=\"5\"><a href=\"#5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5</h2>\n<p>Kết quả của <code class=\"language-text\">console.log</code></p>\n<pre class=\"language-javascript{4}\"><code class=\"language-javascript{4}\">let i;\nfor (i = 0; i < 3; i++) {\n  const log = () => {\n    console.log(i);\n  }\n  setTimeout(log, 100);\n}</code></pre>\n<p>Nếu câu trả lời của bạn là 0, 1, 2 thì xin chúc mừng, <em>bạn đã sai</em>. 😂😂</p>\n<p>Có 2 quá trình xảy ra với đoạn code trên, lắc léo là ở chổ <code class=\"language-text\">setTimeout</code></p>\n<p><strong>Quá trình 1</strong></p>\n<ol>\n<li><code class=\"language-text\">for()</code> chạy 3 lần. Mỗi lần chạy nó tạo ra một hàm <code class=\"language-text\">log()</code>, nhận giá trị <code class=\"language-text\">i</code>, sau đó <code class=\"language-text\">setTimeout()</code> đưa hàm nào vào queue để chạy sau (xem thêm về event loop để hiểu cái queue này)</li>\n<li>Khi vòng lặp <code class=\"language-text\">for()</code> kết thúc, giá trị <code class=\"language-text\">i</code> đang là 3</li>\n</ol>\n<p><strong>Quá trình 2</strong></p>\n<p>Sau 100ms, nó thực hiện bước 2, ba hàm <code class=\"language-text\">log()</code> đã đưa vào queue sẽ lần lượt được gọi, lúc này này <code class=\"language-text\">i</code> đang là 3</p>\n<p>✅ Kết quả log ra là 3, 3, 3</p>\n<h2 id=\"6\"><a href=\"#6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6</h2>\n<p>Kết quả của so sánh</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0.3</span> <span class=\"token comment\">// => ???</span></code></pre>\n<p>Trước tiên, xem giá trị của phép cộng <code class=\"language-text\">0.1 + 0.2</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 0.30000000000000004</span></code></pre>\n<p>😂😂Javascript không cho kết quả <code class=\"language-text\">0.3</code> ! 😂😂</p>\n<p>Cái sự tình này xảy ra là giá trị <strong>thập phân</strong> khi chuyển về nhị phân không thực sự chính xác</p>\n<p>✅ Nên <code class=\"language-text\">0.1 + 0.2 === 0.3</code> sẽ là <code class=\"language-text\">false</code></p>\n<h2 id=\"7\"><a href=\"#7\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>7</h2>\n<p>Chuyện gì xảy ra khi truy cập <code class=\"language-text\">myVar</code> và <code class=\"language-text\">myConst</code> trước khi khai báo</p>\n<pre class=\"language-js{1,2}\"><code class=\"language-js{1,2}\">myVar;   // => ???\nmyConst; // => ???\n\nvar myVar = 'value';\nconst myConst = 3.14;</code></pre>\n<p><img src=\"https://dmitripavlutin.com/static/670c31f21f45e9b8a453e726293f4de0/f8b1b/temporal-dead-zone-and-hoisting-javascript.webp\"></p>\n<p>✅ Hoisting và temporal dead zone là 2 khái niệm quan trọng ảnh hưởng tới vòng đời của một biến trong javascript</p>\n<p>Truy cập vào <code class=\"language-text\">myVar</code> trước khi khai báo sẽ trả về <code class=\"language-text\">undefined</code>, nếu khai báo bằng <code class=\"language-text\">var</code></p>\n<p>Tuy nhiên, nếu truy cập <code class=\"language-text\">myConst</code> trước khi khai báo sẽ trả về <code class=\"language-text\">ReferenceError</code>, nếu khai báo bằng <code class=\"language-text\">const</code>, nó sẽ nằm trong khu vực <strong>temporal dead zone</strong>, không ai giải quyết cho đến khi có người nhận trách nhiệm.</p>\n<h2 id=\"kết-luận\"><a href=\"#k%E1%BA%BFt-lu%E1%BA%ADn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết luận</h2>\n<p>Bạn sẽ thắc mắc, có những câu hỏi chả bao giờ sử dụng trong quá trình làm việc, mình cũng có cảm giác tương tự như vậy khi được hỏi những câu lắc léo thế này. <em>Nhưng thực tế vẫn bị hỏi khi phỏng vấn</em>.</p>\n<p>Các bạn có nghĩ những câu hỏi <em>lắc léo</em> như vậy có cần thiết trong lúc phỏng vấn không? Viết bình luận ở dưới nhé.</p>\n<p><a href=\"https://dmitripavlutin.com/simple-but-tricky-javascript-interview-questions/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">7 Simple but Tricky JavaScript Interview Questions</a></p>\n"}},{"node":{"title":"Tổng quát về viết unit test cho FE","path":"/tong-quat-ve-viet-unit-test-cho-fe/","date":"17. October 2019","timeToRead":4,"desc":"Cái nhìn tổng quát để bạn có thể bắt đầu làm quen với test, những khái niệm, vấn đề gặp thường xuyên khi viết test","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#spy-m%E1%BB%99t-function\">Spy một function</a></li>\n<li><a href=\"#test-c%C3%A1c-%C4%91o%E1%BA%A1n-code-b%E1%BA%A5t-%C4%91%E1%BB%93ng-b%E1%BB%99\">Test các đoạn code bất đồng bộ</a></li>\n</ul>\n<!-- /TOC -->\n<p>Tại sao chúng ta phải viết test, trong khi code của chúng chạy đang ngon? Câu trả lời rất đơn giản, nó khiến chúng ta suy nghĩ cách chúng ta đang code, code như theo kiểu này hay kiểu kia thì hợp lý hơn, code sẽ <em>sạch</em> hơn, dễ bảo trì hơn</p>\n<p>Với một pure function siêu đơn giản</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><em>Lỡ đâu</em>, giá trị truyền vào của x và y là <code class=\"language-text\">string</code>, chứ không phải <code class=\"language-text\">number</code>, <em>lỡ đâu</em> chỉ có 1 tham số được truyền vào, <em>lỡ đâu</em> có 1 function khác phụ thuộc vào kết quả trả về của hàm này.</p>\n<p>Nếu bạn đặt được những câu hỏi <em>lỡ đâu</em> như thế thì code của bạn đã trở nên tốt hơn. Và để đặt được các câu hỏi <em>lỡ đâu</em> như thế, chỉ khi bạn bắt đầu nghĩ đến chuyện test function của mình.</p>\n<p>Một số kiểu test, bạn tưởng tượng vào thanh tra một nhà máy</p>\n<ul>\n<li><strong>Unit test</strong>: kiểm tra từng nhân viên có làm đúng nhiệm vụ, trách nhiệm được giao trong giờ làm việc không, có giao nhầm hợp đồng tình ái cho khách hàng đang cần hợp đồng dự án?</li>\n<li><strong>Integration test</strong>: kiểm tra một tổ sản xuất làm việc với nhau có hợp ru hợp rạ không, ông này có đi nói xấu ông kia, làm ảnh hưởng chất lượng của cả team</li>\n<li><strong>Acceptance test</strong>: các tổ sản xuất khi phối hợp vận hành có vấn đề gì không, trong môi trường thực tế, team marketing có đàn áp bóc lột đội sản xuất làm việc OT sấp mặt lờ, khiến team sản xuất chơi lại team marketing bằng cách làm việc đối phó không.</li>\n</ul>\n<p>Ở mức dev chúng ta chỉ cần quan tâm đến unit test là được, để chúng ta đảm bảo được rằng, một function (một nhân viên) thực hiện đúng nhiệm vụ chúng ta giao cho nó.</p>\n<p>Có nhiều thư viện để test, điểm chung các thư viện điều cho chúng ta những function, truyền vào <em>cái gì cũng được</em>, nó sẽ <strong>so sánh</strong> với một đối tượng khác</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should...\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"something truthy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toExist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should...\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>a<span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should...\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Những cái chúng ta <strong>expect</strong> từ output của một hàm, một object, một giá trị như vậy gọi là <strong>test case</strong></p>\n<p>Một khái niệm khác nữa trong test là <strong>test suite</strong>, giới phần mềm khoái đặt thêm lắm ngôn ngữ thật, có thể hiểu nó là một thư mục để gom các <strong>test case</strong> mà chúng ta thấy nó nếu không họ hàng gần thì cũng bà con xa.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// đây là một test suite</span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wallet\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> wallet<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">var</span> five<span class=\"token punctuation\">,</span> ten<span class=\"token punctuation\">,</span> twenty<span class=\"token punctuation\">,</span> hundred<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// trước khi chạy 1 test case, nó gọi hàm này trước</span>\n\t<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t   wallet <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t   five <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> ten <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> twenty <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> hundred <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// test case 1</span>\n\t<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should be able to add bills\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\twallet<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>five<span class=\"token punctuation\">,</span> ten<span class=\"token punctuation\">,</span> twenty<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wallet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// test case 2</span>\n\t<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should be able to remove one bill\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t    wallet<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>five<span class=\"token punctuation\">,</span> ten<span class=\"token punctuation\">,</span> twenty<span class=\"token punctuation\">)</span>\n\t    wallet<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">splice</span><span class=\"token punctuation\">(</span>wallet<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wallet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// test case 3</span>\n\t<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should be able to calculate total\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t    wallet<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>five<span class=\"token punctuation\">,</span> ten<span class=\"token punctuation\">,</span> twenty<span class=\"token punctuation\">,</span> hundred<span class=\"token punctuation\">,</span> twenty<span class=\"token punctuation\">,</span> five<span class=\"token punctuation\">)</span>\n\t    total <span class=\"token operator\">=</span> wallet<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span>\n\t    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">160</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"spy-một-function\"><a href=\"#spy-m%E1%BB%99t-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spy một function</h2>\n<p>Chúng ta có thể đặt chế độ theo dõi một anh nhân viên nào đó, để xem một ngày anh đi toilet bao nhiêu lần, đi xung quanh tán gái công ty bao nhiêu đứa</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// function để test</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// test suite</span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Add\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> addSpy<span class=\"token punctuation\">,</span> result\n    <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token comment\">// cử gián điệp theo dõi nhất cử lưỡng động của nhân viên tên **add**</span>\n\t    addSpy <span class=\"token operator\">=</span> <span class=\"token function\">spyOn</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"add\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">and</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">callThrough</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t    result <span class=\"token operator\">=</span> <span class=\"token function\">addSpy</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// tình hình nhân viên \"add\" đã có manh động</span>\n\t<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the function has been called\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t   <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>addSpy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// kiểm tra kết quả</span>\n\t<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"can evaluate function execution\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// anh này có đi qua giới hạn không, hành động 2 lần là túm lại</span>\n\t<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"will only be executed once\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>addSpy<span class=\"token punctuation\">.</span><span class=\"token property-access\">calls</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"test-các-đoạn-code-bất-đồng-bộ\"><a href=\"#test-c%C3%A1c-%C4%91o%E1%BA%A1n-code-b%E1%BA%A5t-%C4%91%E1%BB%93ng-b%E1%BB%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Test các đoạn code bất đồng bộ</h2>\n<p>Muốn test các đoạn code chạy bất đồng bộ, những nhân viên thường xuyên phải làm việc ngoài đường như đội sale, kế toán, đôi khi họ ra ngoài một thời gian không xác định, khi nào họ mới về lại công ty? Các thư viện test sẽ dùng đến một thiết bị <em>chip</em> định vị <code class=\"language-text\">done()</code>, nó sẽ báo cho chúng ta anh ấy đã về tới công ty sao khoản thời gian cafe ngoài đường.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Nhân viên này có việc cần đường đi khách</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">username</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.github.com/users/\"</span> <span class=\"token operator\">+</span> username<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getUserInfo\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"return the correct name\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">getUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"luckyluu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\t      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"anluu\"</span><span class=\"token punctuation\">)</span>\n\t      <span class=\"token comment\">// đặt chip ở đây</span>\n\t      <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Hy vọng các bạn học được nhiều điều hay ho từ bài viết này.</p>\n<p>Happy testing!</p>\n"}},{"node":{"title":"Đặt tên sao cho đẹp trong javascript","path":"/dat-ten-sao-cho-dep-trong-javascript/","date":"14. October 2019","timeToRead":3,"desc":"Kim chỉ nam khi đặt tên trong javascript, nếu thật sự ban quan tâm những gì mình đang viết","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#t%C3%AAn-bi%E1%BA%BFn\">Tên biến</a></li>\n<li><a href=\"#bi%E1%BA%BFn-boolean\">Biến Boolean</a></li>\n<li><a href=\"#%C4%91%E1%BA%B7t-t%C3%AAn-class\">Đặt tên class</a></li>\n<li><a href=\"#%C4%91%E1%BA%B7t-t%C3%AAn-h%C3%A0m-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-c%E1%BB%A7a-m%E1%BB%99t-class\">Đặt tên hàm, phương thức của một class</a></li>\n<li><a href=\"#ph%C6%B0%C6%A1ng-th%E1%BB%A9c-bi%E1%BA%BFn-c%E1%BB%A5c-b%E1%BB%99\">Phương thức, biến cục bộ</a></li>\n<li><a href=\"#h%E1%BA%B1ng-s%E1%BB%91\">Hằng số</a></li>\n<li><a href=\"#dash\">Dash</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"tên-biến\"><a href=\"#t%C3%AAn-bi%E1%BA%BFn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tên biến</h2>\n<p>Trong Javascript, tên biến <strong>phân biệt hoa thường</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Vui Lap Trinh'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token maybe-class-name\">Name</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Lap Trinh Vui'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token constant\">NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Trinh Lap Vui'</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"Vui Lap Trinh\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"Lap Trinh Vui\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NAME</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"Trinh Lap Vui\"</span></code></pre>\n<p>Tên biến cần phải rõ nghĩa, không cần phải ghi chú gì thêm, nhìn vào tên biến là có thể biết được nó chứa thông tin gì</p>\n<pre class=\"language-js\"><code class=\"language-js\">❌ <span class=\"token maybe-class-name\">Không</span> ngon\n<span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token string\">'Vui'</span><span class=\"token punctuation\">;</span>\n❌ <span class=\"token maybe-class-name\">Không</span> ngon\n<span class=\"token keyword\">var</span> val <span class=\"token operator\">=</span> <span class=\"token string\">'Vui'</span><span class=\"token punctuation\">;</span>\n\n✅ <span class=\"token maybe-class-name\">Chuẩn</span> cơm mẹ nấu\n<span class=\"token keyword\">var</span> firstName <span class=\"token operator\">=</span> <span class=\"token string\">'Vui'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Viết Javascript được khuyến khích sử dụng tên biến theo kiểu con lạc đà</p>\n<pre class=\"language-js\"><code class=\"language-js\">❌ <span class=\"token maybe-class-name\">Không</span> ngon\n<span class=\"token keyword\">var</span> firstname <span class=\"token operator\">=</span> <span class=\"token string\">'Vui'</span><span class=\"token punctuation\">;</span>\n❌ <span class=\"token maybe-class-name\">Không</span> ngon\n<span class=\"token keyword\">var</span> first_name <span class=\"token operator\">=</span> <span class=\"token string\">'Vui'</span><span class=\"token punctuation\">;</span>\n❌ <span class=\"token maybe-class-name\">Không</span> ngon\n<span class=\"token keyword\">var</span> <span class=\"token constant\">FIRSTNAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Vui'</span><span class=\"token punctuation\">;</span>\n❌ <span class=\"token maybe-class-name\">Không</span> ngon\n<span class=\"token keyword\">var</span> <span class=\"token constant\">FIRST_NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Vui'</span><span class=\"token punctuation\">;</span>\n\n✅ <span class=\"token maybe-class-name\">Chuẩn</span> cơm mẹ nấu\n<span class=\"token keyword\">var</span> firstName <span class=\"token operator\">=</span> <span class=\"token string\">'Vui'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Các trường hợp ngoài lệ, có luật riêng là hằng số, biến cục bộ, class, component</p>\n<h2 id=\"biến-boolean\"><a href=\"#bi%E1%BA%BFn-boolean\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Biến Boolean</h2>\n<p>Với biến mang giá trị là Boolean (true/false, 0/1), thêm tiền tố <strong>is</strong>, <strong>has</strong>, <strong>are</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\">❌ <span class=\"token maybe-class-name\">Không</span> ngon\n<span class=\"token keyword\">var</span> visible <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n✅ <span class=\"token maybe-class-name\">Chuẩn</span> cơm mẹ nấu\n<span class=\"token keyword\">var</span> isVisible <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n❌ <span class=\"token maybe-class-name\">Không</span> ngon\n<span class=\"token keyword\">var</span> equal <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n✅ <span class=\"token maybe-class-name\">Chuẩn</span> cơm mẹ nấu\n<span class=\"token keyword\">var</span> areEqual <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n❌ <span class=\"token maybe-class-name\">Không</span> ngon\n<span class=\"token keyword\">var</span> encryption <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n✅ <span class=\"token maybe-class-name\">Chuẩn</span> cơm mẹ nấu\n<span class=\"token keyword\">var</span> hasEncryption <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"đặt-tên-class\"><a href=\"#%C4%91%E1%BA%B7t-t%C3%AAn-class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đặt tên class</h2>\n<p>Tên class được đặt theo kiểu PascalCase</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FrontendDeveloper</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span> lastName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">firstName</span> <span class=\"token operator\">=</span> firstName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">lastName</span> <span class=\"token operator\">=</span> lastName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> me <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FrontendDeveloper</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Vui'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Lap Trinh'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"đặt-tên-hàm-phương-thức-của-một-class\"><a href=\"#%C4%91%E1%BA%B7t-t%C3%AAn-h%C3%A0m-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-c%E1%BB%A7a-m%E1%BB%99t-class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đặt tên hàm, phương thức của một class</h2>\n<p>Hàm cũng đặt tên theo con lạc đà, tốt nhất nên diễn đạt hàm đó <strong>làm</strong> gì bằng cách thêm một tiền tố là một <strong>động từ</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\">❌ <span class=\"token maybe-class-name\">Không</span> ngon\n<span class=\"token keyword\">function</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span> lastName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>lastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n✅ <span class=\"token maybe-class-name\">Chuẩn</span> cơm mẹ nấu\n<span class=\"token keyword\">function</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span> lastName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>lastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Một số tiền tố hay được sử dụng là: <code class=\"language-text\">get</code>, <code class=\"language-text\">fetch</code>, <code class=\"language-text\">push</code>, <code class=\"language-text\">apply</code>, <code class=\"language-text\">calculate</code>, <code class=\"language-text\">compute</code>, <code class=\"language-text\">post</code></p>\n<pre class=\"language-js{7-9}\"><code class=\"language-js{7-9}\">class FrontendDeveloper {\n  constructor(firstName, lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n  // ✅ Chuẩn cơm mẹ nấu\n  getName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\nvar me = new FrontendDeveloper('Vui', 'Lap Trinh');\nconsole.log(me.getName());\n// \"Vui Lap Trinh\"</code></pre>\n<h2 id=\"phương-thức-biến-cục-bộ\"><a href=\"#ph%C6%B0%C6%A1ng-th%E1%BB%A9c-bi%E1%BA%BFn-c%E1%BB%A5c-b%E1%BB%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phương thức, biến cục bộ</h2>\n<p>Thêm tiền tố <code class=\"language-text\">_</code> vào trước biến, phương thức cục bộ của một class</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FrontendDeveloper</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span> lastName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">firstName</span> <span class=\"token operator\">=</span> firstName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">lastName</span> <span class=\"token operator\">=</span> lastName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> <span class=\"token function\">_getName</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">_getName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span> lastName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>lastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> me <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FrontendDeveloper</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Vui'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Lap Trinh'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n✅ <span class=\"token maybe-class-name\">Chuẩn</span> cơm mẹ nấu\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> me<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"Vui Lap Trinh\"</span>\n\n❌ <span class=\"token maybe-class-name\">Không</span> ngon\nname <span class=\"token operator\">=</span> me<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">_getName</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">.</span><span class=\"token property-access\">firstName</span><span class=\"token punctuation\">,</span> me<span class=\"token punctuation\">.</span><span class=\"token property-access\">lastName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"Vui Lap Trinh\"</span></code></pre>\n<h2 id=\"hằng-số\"><a href=\"#h%E1%BA%B1ng-s%E1%BB%91\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hằng số</h2>\n<p>Viết hoa tất cả nếu nó là hằng số</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">SECONDS</span> <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">MINUTES</span> <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">HOURS</span> <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">DAY</span> <span class=\"token operator\">=</span> <span class=\"token constant\">SECONDS</span> <span class=\"token operator\">*</span> <span class=\"token constant\">MINUTES</span> <span class=\"token operator\">*</span> <span class=\"token constant\">HOURS</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"dash\"><a href=\"#dash\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dash</h2>\n<p>Javascript không ưa gì ký tự <code class=\"language-text\">-</code>, tránh sử dụng <code class=\"language-text\">-</code> khi khai báo</p>\n<pre class=\"language-js\"><code class=\"language-js\">❌ <span class=\"token maybe-class-name\">Không</span> ngon\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'first-name'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Vui'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'last-name'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Lap Trinh'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> firstName <span class=\"token operator\">=</span> person<span class=\"token punctuation\">[</span><span class=\"token string\">'first-name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n✅ <span class=\"token maybe-class-name\">Chuẩn</span> cơm mẹ nấu\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token string\">'Vui'</span><span class=\"token punctuation\">,</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token string\">'Lap Trinh'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> firstName <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token property-access\">firstName</span><span class=\"token punctuation\">;</span></code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.robinwieruch.de/javascript-naming-conventions\">📜 JavaScript Naming Conventions</a></p>\n"}},{"node":{"title":"Viết câu điều kiện tốt hơn trong javascript","path":"/viet-cau-dieu-kien-tot-hon-trong-javascript/","date":"13. October 2019","timeToRead":2,"desc":"Xem xét một trong những câu lệnh được sử dụng nhiều nhất trong lập trình: câu điều kiện","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#%C4%91i%E1%BB%81u-ki%E1%BB%87n-l%E1%BB%93ng-v%C3%A0o-nhau\">Điều kiện lồng vào nhau</a></li>\n<li><a href=\"#arrayincludes\">Array.includes</a></li>\n<li><a href=\"#return\">return</a></li>\n<li><a href=\"#d%C3%B9ng-object-thay-cho-switchcase\">Dùng Object thay cho switch...case</a></li>\n<li><a href=\"#params-m%E1%BA%B7c-%C4%91%E1%BB%8Bnh-v%C3%A0-destructuring\">params mặc định và destructuring</a></li>\n<li><a href=\"#arrayevery-arraysome\">Array.every, Array.some</a></li>\n</ul>\n<!-- /TOC -->\n<p>Một trong những <strong>món ăn</strong> mà anh em lập trình chúng ta phải nhai đi nhai lại trong suốt cuộc đời, dù là bạn đang viết ngôn ngữ gì là <strong>C U ĐIỀU KIỆN</strong>. Nếu không khéo trong lúc <strong>nấu code</strong>, thì món ngon đó đôi khi trở thành món dỡ ẹt, người sau vào ăn không thấy ngon, chúng ta tự ăn cũng không thấy ngon.</p>\n<p><em>Bài này được viết trong một chiều chủ nhật đang đói bụng</em></p>\n<h2 id=\"điều-kiện-lồng-vào-nhau\"><a href=\"#%C4%91i%E1%BB%81u-ki%E1%BB%87n-l%E1%BB%93ng-v%C3%A0o-nhau\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Điều kiện lồng vào nhau</h2>\n<pre class=\"language-js\"><code class=\"language-js\">❌ <span class=\"token constant\">T</span>ạm<span class=\"token punctuation\">,</span> chưa ngon\n<span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>condition2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></code></pre>\n<p>Có vẻ không vấn đề nhỉ? Nhưng thật ra nó sẽ chạy y chang khi chúng ta viết thế này</p>\n<pre class=\"language-js\"><code class=\"language-js\">❌ <span class=\"token maybe-class-name\">Không</span> ngon\n<span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>condition2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></code></pre>\n<p>Du là thế nào đi nữa, gặp lồng câu điều kiện <code class=\"language-text\">else...if...</code>  là phải tìm cách khử liền</p>\n<pre class=\"language-js\"><code class=\"language-js\">✅ <span class=\"token maybe-class-name\">Chuẩn</span> cơm mẹ nấu\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>condition2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"arrayincludes\"><a href=\"#arrayincludes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Array.includes</h2>\n<pre class=\"language-js\"><code class=\"language-js\">❌ <span class=\"token maybe-class-name\">Không</span> ngon\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> animal <span class=\"token operator\">==</span> <span class=\"token string\">'dog'</span> <span class=\"token operator\">||</span> animal <span class=\"token operator\">==</span> <span class=\"token string\">'cat'</span> <span class=\"token operator\">||</span> animal <span class=\"token operator\">==</span> <span class=\"token string\">'turtle'</span><span class=\"token punctuation\">)</span>\n\n✅ <span class=\"token maybe-class-name\">Chuẩn</span> cơm mẹ nấu\n<span class=\"token punctuation\">[</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dog'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'turtle'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">)</span>\nhoặc\n<span class=\"token punctuation\">[</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dog'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'turtle'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></code></pre>\n<h2 id=\"return\"><a href=\"#return\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>return</h2>\n<pre class=\"language-js\"><code class=\"language-js\">❌ <span class=\"token maybe-class-name\">Không</span> ngon\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">printAnimalDetails</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">animal</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">.</span><span class=\"token property-access\">gender</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          result <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>animal<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is a </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>animal<span class=\"token punctuation\">.</span><span class=\"token property-access\">gender</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>animal<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          result <span class=\"token operator\">=</span> <span class=\"token string\">\"No animal gender\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        result <span class=\"token operator\">=</span> <span class=\"token string\">\"No animal name\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">=</span> <span class=\"token string\">\"No animal type\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">=</span> <span class=\"token string\">\"No animal\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu bạn vẫn viết code thế này thì mình cũng lại!</p>\n<pre class=\"language-js\"><code class=\"language-js\">✅ <span class=\"token maybe-class-name\">Chuẩn</span> cơm mẹ nấu\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">printAnimalDetails</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> gender <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>type<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'No animal type'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'No animal name'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gender<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'No animal gender'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>animal<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is a </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>animal<span class=\"token punctuation\">.</span><span class=\"token property-access\">gender</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>animal<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"dùng-object-thay-cho-switchcase\"><a href=\"#d%C3%B9ng-object-thay-cho-switchcase\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dùng Object thay cho switch...case</h2>\n<p>Đoạn code return loại trái cây có màu sắc như điều kiện truyền vào</p>\n<pre class=\"language-js\"><code class=\"language-js\">❌ <span class=\"token maybe-class-name\">Không</span> ngon\n<span class=\"token keyword\">function</span> <span class=\"token function\">printFruits</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'red'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'strawberry'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'yellow'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pineapple'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'purple'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'grape'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'plum'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Code như trên không sai, mà nếu dùng object làm thì sẽ ngon hơn nhiều</p>\n<pre class=\"language-js\"><code class=\"language-js\">✅ <span class=\"token maybe-class-name\">Chuẩn</span> cơm mẹ nấu\n<span class=\"token keyword\">function</span> <span class=\"token function\">printFruits</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fruitColor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      red<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'strawberry'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      yellow<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pineapple'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      purple<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'grape'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'plum'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> fruitColor<span class=\"token punctuation\">[</span>color<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"params-mặc-định-và-destructuring\"><a href=\"#params-m%E1%BA%B7c-%C4%91%E1%BB%8Bnh-v%C3%A0-destructuring\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>params mặc định và destructuring</h2>\n<pre class=\"language-js\"><code class=\"language-js\">❌ <span class=\"token maybe-class-name\">Không</span> ngon\n<span class=\"token keyword\">function</span> <span class=\"token function\">printVegetableName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vegetable</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vegetable <span class=\"token operator\">&amp;&amp;</span> vegetable<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span> <span class=\"token punctuation\">(</span>vegetable<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unknown'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-js\"><code class=\"language-js\">✅ <span class=\"token maybe-class-name\">Chuẩn</span> cơm mẹ nấu\n<span class=\"token keyword\">function</span> <span class=\"token function\">printVegetableName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">||</span> <span class=\"token string\">'unknown'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"arrayevery-arraysome\"><a href=\"#arrayevery-arraysome\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Array.every, Array.some</h2>\n<p>Đoạn code kiểm tra tất cả trái cây có màu đó</p>\n<pre class=\"language-js\"><code class=\"language-js\">❌ <span class=\"token maybe-class-name\">Không</span> ngon\n<span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">'yellow'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'grape'</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">'purple'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> isAllRed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> f <span class=\"token keyword\">of</span> fruits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isAllRed<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    isAllRed <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token property-access\">color</span> <span class=\"token operator\">==</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>isAllRed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Thay vì dùng vòng lặp for, có thể dùng <code class=\"language-text\">Array.every</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> isAllRed <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">every</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span> <span class=\"token arrow operator\">=></span> f<span class=\"token punctuation\">.</span><span class=\"token property-access\">color</span> <span class=\"token operator\">==</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>isAllRed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chỉ cần vài item trong đó thỏa điều kiện là được, ta dùng <code class=\"language-text\">Array.some</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isAllRed <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span> <span class=\"token arrow operator\">=></span> f<span class=\"token punctuation\">.</span><span class=\"token property-access\">color</span> <span class=\"token operator\">==</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://dev.to/hellomeghna/tips-to-write-better-conditionals-in-javascript-2189\">📜 Tips to write better Conditionals in JavaScript</a></p>\n"}},{"node":{"title":"9 VSCode extension hay ho","path":"/9-vs-code-extension-hay-ho/","date":"25. September 2019","timeToRead":2,"desc":"Tổng hợp những VScode sẽ giúp anh em lập trình chúng ta làm việc hiệu quả hơn","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#settings-sync\">Settings Sync</a></li>\n<li><a href=\"#live-server\">Live Server</a></li>\n<li><a href=\"#bracket-pair-colorizer\">Bracket Pair Colorizer</a></li>\n<li><a href=\"#auto-rename-tag\">Auto Rename Tag</a></li>\n<li><a href=\"#css-peek\">CSS Peek</a></li>\n<li><a href=\"#code-spell-checker\">Code Spell Checker</a></li>\n<li><a href=\"#debugger-for-chrome\">Debugger for Chrome</a></li>\n<li><a href=\"#vscode-icons\">vscode-icons</a></li>\n<li><a href=\"#git-history\">Git History</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"settings-sync\"><a href=\"#settings-sync\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Settings Sync</h2>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync</a></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9RuFyc2c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dukp6c7f7/image/upload/f_auto%2Cfl_lossy%2Cq_auto/s3-ghost/2019/02/Settings-Sync.gif\"></p>\n<p>Bạn quá mệt mỏi việc mỗi lần cài lại máy mới, hay cài lại toàn bộ extension trên công ty, máy ở nhà, cài ngay <a href=\"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Settings Sync</a>, nó sẽ sync toàn bộ những extension chúng ta hay xài lên Gist (phải cho nó access vào Github account)</p>\n<h2 id=\"live-server\"><a href=\"#live-server\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Live Server</h2>\n<p> <a href=\"https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer</a></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--bhb3nSVI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dukp6c7f7/image/upload/f_auto%2Cfl_lossy%2Cq_auto/s3-ghost/2019/02/Live-Server.gif\"></p>\n<p>Một trong những extension siêu ngon cho anh em frontend, tạo server local với live reload</p>\n<h2 id=\"bracket-pair-colorizer\"><a href=\"#bracket-pair-colorizer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bracket Pair Colorizer</h2>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer</a></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gLmyHCgW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dukp6c7f7/image/upload/f_auto%2Cfl_lossy%2Cq_auto/s3-ghost/2019/02/Bracket-Pair-Colorizer.png\"></p>\n<p>Mặc dù VSCode đã có tính năng collapse cho từng khối code, nhưng tô màu rõ ràng cho dễ nhìn cũng vui</p>\n<h2 id=\"auto-rename-tag\"><a href=\"#auto-rename-tag\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Auto Rename Tag</h2>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag</a></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--jn8PcGux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dukp6c7f7/image/upload/f_auto%2Cfl_lossy%2Cq_auto/s3-ghost/2019/02/Auto-Rename-Tag.gif\"></p>\n<p>Cái này sẽ tự động điền đổi tên tag cho khớp với tag đóng/mở</p>\n<p>Đôi khi viết React, Vue cũng hơi chút phiền phức, nhưng cũng đáng để thử</p>\n<h2 id=\"css-peek\"><a href=\"#css-peek\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CSS Peek</h2>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek</a></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cVqIno3Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dukp6c7f7/image/upload/f_auto%2Cfl_lossy%2Cq_auto/s3-ghost/2019/02/CSS-Peek.gif\"></p>\n<p>Xem ngay phần code css đã viết cho class/id. Ngoài ra cũng nhảy được ngay tới phần khai báo đó trong file css/scss/less</p>\n<h2 id=\"code-spell-checker\"><a href=\"#code-spell-checker\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Code Spell Checker</h2>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker</a></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Ij0NAjPP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dukp6c7f7/image/upload/f_auto%2Cfl_lossy%2Cq_auto/s3-ghost/2019/02/Code-Spell-Checker.gif\"></p>\n<p>Với anh em không dùng tiếng anh như tiếng mẹ đẻ chúng ta, một cái tool tự động báo khi có từ sai chính ta là vô cùng cần thiết.</p>\n<h2 id=\"debugger-for-chrome\"><a href=\"#debugger-for-chrome\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Debugger for Chrome</h2>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome</a></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XqJ04htP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/blogs/2016/02/23/chrome-debugger-demo.gif\"></p>\n<p>Được phát triển bởi Microsoft, cho phép chúng ta debug JS ngay trong VSCode, so với mấy IDE khác, thì thằng này chạy khá mượt mà</p>\n<h2 id=\"vscode-icons\"><a href=\"#vscode-icons\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>vscode-icons</h2>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons</a></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--nYvipWN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dukp6c7f7/image/upload/f_auto%2Cfl_lossy%2Cq_auto/s3-ghost/2019/02/vscode-icons.gif\"></p>\n<p>Dành cho mấy đứa thích màu mè như mình, đổi icon nhìn cho phấn chấn tinh thần dễ làm việc</p>\n<h2 id=\"git-history\"><a href=\"#git-history\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Git History</h2>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory</a></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--u27x1LAs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dukp6c7f7/image/upload/f_auto%2Cfl_lossy%2Cq_auto/s3-ghost/2019/02/Git-History.gif\"></p>\n<p>Nếu đang làm việc với Git (không biết còn dev nào thời này ko dùng Git không), xem history và kiểm tra những chỗ nào đã bị đổi trên VSCode luôn</p>\n"}},{"node":{"title":"IIFE trong javascript là cái gì vại","path":"/iife-trong-javascript-la-cai-gi-vai/","date":"20. September 2019","timeToRead":2,"desc":"Giới thiệu về Íp-Phi trong javascript, tuy không còn dùng nhiều nữa, nhưng vẫn là một kiến thức tốt cần biết","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#khai-b%c3%a1o-function\">Khai báo function</a></li>\n<li><a href=\"#iife\">IIFE</a></li>\n<li><a href=\"#es6-module\">ES6 Module</a></li>\n</ul>\n<!-- /TOC -->\n<p>Một trong những pattern có tên rất <em>kiêu</em> trong javascript \"íp-phi\" - <strong>IIFE</strong></p>\n<p>Trước khi tìm hiểu nó là gì, tại sao chúng ta cần nó, ôn lại khái niệm function căn bản trong javascript</p>\n<h2 id=\"khai-báo-function\"><a href=\"#khai-b%C3%A1o-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khai báo function</h2>\n<p>Một javascript developer đều biết cách khai báo chính quy này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>“Hello world”<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sayHelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>1 cách khác, gọi là <strong>function expression</strong>, đặt biến và gán nó vào function</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHelloWorld</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sayHelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Các callback chúng ta viết điều là function expression kiểu này</p>\n<blockquote>\n<p>Function trong javascript có thể xem như những giá trị khác, có thể truyền vào như tham số cho function khác</p>\n</blockquote>\n<h2 id=\"iife\"><a href=\"#iife\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>IIFE</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">!</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello IIFE\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Nếu copy đoạn này dán vào console của trình duyệt, câu <code class=\"language-text\">alert</code> sẽ xuất hiện, nhưng nó sẽ không bao giờ có thể hiện lại lần nữa</p>\n<blockquote>\n<p>function này sau khi hoàn thành nhiệm vụ, nó đi luôn không quay lại</p>\n</blockquote>\n<p>Nếu bạn tinh ý, bạn sẽ thắc mắc tại sao lại có <code class=\"language-text\">!</code> phía trước function vậy?</p>\n<p>Khi javascript thấy keyword <strong>function</strong> nó sẽ xem khúc sau là phần khai báo cho function. Nhưng khi chúng ta thêm <strong>!</strong> phía trước, chúng ta đang ép javascript xem nó là một <strong>expression</strong>, nghĩa là phải trả về một giá trị</p>\n<p>Điều thú vị là ở chổ <code class=\"language-text\">{}()</code>, <strong>nó chạy function này luôn</strong></p>\n<blockquote>\n<p>Một function gọi luôn sau khi tạo, gọi xong thì hết gọi lại được gọi là IIFE</p>\n</blockquote>\n<p>Không nhất thiết phải dùng <code class=\"language-text\">!</code>, bạn có thể dùng <code class=\"language-text\">+</code>, <code class=\"language-text\">-</code>, <code class=\"language-text\">~</code>, <code class=\"language-text\">void</code> để ép nó về <em>expression</em></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">void</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> … <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Một cách khác nữa, cách này vẫn hay dùng nhất</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// hoặc</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Chúng ta vẫn sử dụng IIFE như một module trong javascript (trước đây), vì nó cho chúng ta đưa biến vào một <em>đặc khu kinh tế</em>, những thằng khác sẽ không truy cập được biến khai báo bên trong IIFE</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">initGame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// biến private</span>\n\t<span class=\"token keyword\">var</span> live\n\t<span class=\"token keyword\">var</span> weapon\n\n\t<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// function private</span>\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tlive <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\t\tweapon <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Tất nhiên nếu là module, thì phải có những thứ public để thằng khác gọi tới, muốn thằng nào public chúng ta return là được</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">initGame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// biến private</span>\n\t<span class=\"token keyword\">var</span> live\n<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// function private</span>\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tlive <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\tinit<span class=\"token operator\">:</span> init\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Nếu muốn truyền vào tham số cho IIFE </p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">IIFE</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token punctuation\">,</span> times</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> times<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"es6-module\"><a href=\"#es6-module\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ES6 Module</h2>\n<p>Khi ES6 ra đời, cách viết IIFE không còn được “thịnh hành” như trước</p>\n<p>Thí dụ, trước đây để biến private</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> scoped <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>scoped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span></code></pre>\n<p>Giờ có <code class=\"language-text\">let</code> và <code class=\"language-text\">const</code> đặt nó vào block là xem như private</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> scoped <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>scoped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span></code></pre>\n<p>Cách viết này gọn gàng, nhìn vào ai cũng hiểu, ko cần giải thích nhiều như IIFE</p>\n<p>Module được hiểu là <strong>từng file</strong> javascript, những gì không <code class=\"language-text\">export</code> là private hết</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// myModule.js</span>\n<span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>    \n\n<span class=\"token comment\">// logic.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> increment <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'myModule.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Bài viết đã tham khảo</p>\n<ul>\n<li>📜 <a href=\"https://medium.com/@vvkchandra/essential-javascript-mastering-immediately-invoked-function-expressions-67791338ddc6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mastering Immediately-Invoked Function Expressions ― Chandra Gundamaraju</a></li>\n<li>📜 <a href=\"https://hashnode.com/post/do-es6-modules-make-the-case-of-iifes-obsolete-civ96wet80scqgc538un20es0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Do ES6 Modules make the case of IIFEs obsolete?</a></li>\n</ul>\n"}},{"node":{"title":"Bức ảnh chế thú vị về so sánh trong Javascript","path":"/buc-anh-che-thu-vi-ve-so-sanh-trong-javascript/","date":"15. September 2019","timeToRead":1,"desc":"Qua bức ảnh chế này, chúng ta biết được nhiều điều hay ho về so sánh trong javascript","content":"<p>Bộ ảnh thú vị mô tả kể chuyện so sánh trong Javascript, vô tình lụm xem được cái hình này trên Reddit</p>\n<p><img src=\"https://miro.medium.com/max/500/0*kjcbVX8Y9TFoHGDO.png\" alt=\"Nguyên tắc bắt cầu javascript\"></p>\n<p>Bạn có thể copy nguyên đoạn code này paste vào trình duyệt để xem kết quả</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span>\n<span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// Nguyên tắc bắt cầu có đúng?</span>\n\n<span class=\"token string\">'0'</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre>\n<p>Chuyện gì đã xảy ra vậy?</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span> <span class=\"token comment\">// => true</span></code></pre>\n<p>Với các ngôn ngữ lập trình khác thì chưa biết, nhưng với javascript <code class=\"language-text\">==</code> sẽ tự ý <strong>chuyển 2 giá trị muốn so sánh về cùng một kiểu</strong>, hay người ta vẫn gọi là ko quan tâm đến kiểu dữ liệu khi so sánh.</p>\n<p>Trong nhiều trường hợp chúng ta cũng có thể sử dụng cách so sánh <code class=\"language-text\">==</code> để tiện, javascript tự động chuyển về một kiểu, tuy nhiên sẽ ko khuyến khích cách này</p>\n<p>Theo như <a href=\"https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">specify</a></p>\n<blockquote>\n<p>Nếu x = Number, y = String, trả về x == ToNumber(y),</p>\n</blockquote>\n<p>Nó đưa giá trị bên phải về number mà không báo cho ai biết hết</p>\n<p><img src=\"https://miro.medium.com/max/581/0*njs7mQoUYjWG13Sm.jpeg\" alt=\"Tự động convert string sang number\"></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// => true</span></code></pre>\n<blockquote>\n<p>Nếu x là String hoặc Number, y là Object, trả về x == ToPrimitive(y)</p>\n</blockquote>\n<p><img src=\"https://miro.medium.com/max/618/0*qN97ouGakJx0Gthb.jpg\" alt=\"Array là object\"></p>\n<p>Đúng! Array trong javascript cũng là object</p>\n<p>ToPrimitive(y) ở đây, JS sẽ gọi vào hàm <code class=\"language-text\">.toString</code> để convert về kiểu primitive, trường hợp là array nó nối toàn bộ giá trị trong array thành chuỗi</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => \"1,2,3\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => \"hello,world\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => \"\"</span></code></pre>\n<p>Toàn bộ những điều vô lý này đã được đưa vào <a href=\"https://www.ecma-international.org/ecma-262/5.1/#sec-8.12.8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">văn bản chính quy!</a></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'0'</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre>\n<p><img src=\"https://miro.medium.com/max/500/0*69mYzhumogiPLSh6.png\" alt=\"So sánh string và array\"></p>\n<p>Cứ theo nguyên tắc đã quy định mà làm</p>\n<blockquote>\n<p>Nếu x là String hoặc Number, y là Object, trả về x == ToPrimitive(y)</p>\n</blockquote>\n<p>Bước một <code class=\"language-text\">ToPrimitive([])</code> => chúng ta sẽ trở thành so sánh <code class=\"language-text\">&#39;0&#39; == &quot;&quot;</code>, khác nhau rõ ràng hé.</p>\n"}},{"node":{"title":"Làm quen với phương pháp Atomic để structure source code, design","path":"/lam-quen-voi-phuong-phap-atomic-de-structure-source-code-design/","date":"13. September 2019","timeToRead":2,"desc":"Atom, molecule, organism, template, và page là những khái niệm chính của phương pháp này","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#atom\">Atom</a></li>\n<li><a href=\"#molecule\">Molecule</a></li>\n<li><a href=\"#organism\">Organism</a></li>\n<li><a href=\"#template\">Template</a></li>\n<li><a href=\"#page\">Page</a></li>\n</ul>\n<!-- /TOC -->\n<p>Đây là một trong những cách tiếp cận để thiết kế một system. Tác giả của structure này là Brad Frost, ám ảnh bởi một thạc sĩ hóa học người Việt Nam (chắc dạy ở Mỹ), dạy môn hóa học khi anh này đang học cấp II.</p>\n<p>Lấy ý tưởng <strong>nguyên tử</strong> hóa học, sự <strong>kết hợp</strong> giữa các <strong>nguyên tử</strong> tạo ra một <strong>phân tử</strong>, kết hợp các phân tử lại tạo thành 1 sinh vật</p>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/chemical-equation.png\" alt=\"Structure theo phương pháp Atomic\"></p>\n<p>Những khái niệm chính của Atomic</p>\n<ul>\n<li><strong>Atom</strong> nguyên tử (nguyên tố), đơn vị nhỏ nhất</li>\n<li><strong>Molecule</strong> do 2 nguyên tử trở lên hợp lại tạo thành, những phân tử hóa học như H2O được cấu thành từ nguyên tử Hidro và Oxy</li>\n<li><strong>Organism</strong> là sự kết hợp của nhiều phân tử tạo thành</li>\n</ul>\n<p>Chúng ta đã biết bảng tuần hoàn hóa học, thứ ám ảnh thời học sinh</p>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/periodic-table.png\" alt=\"Bảng tuần hoàn hóa học\"></p>\n<p>Thì lớn lên chúng ta có bảng tuần hoàn HTML, ám ảnh thời web developer</p>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/html-periodic-table.png\" alt=\"Bảng tuần hoàn HTML\"></p>\n<p>Sự kết hợp của các element chúng ta tạo ra những trang web khác nhau (Organism)</p>\n<p>Ngoài 3 khái niệm chính trên của hóa học, tác giả đưa thêm 2 khái niệm vào của dân web chúng ta</p>\n<ul>\n<li><strong>Template</strong></li>\n<li><strong>Page</strong></li>\n</ul>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/atomic-design-process.png\" alt=\"Structure theo phương pháp Atomic\"></p>\n<h3 id=\"atom\"><a href=\"#atom\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Atom</h3>\n<p>Những element nhỏ nhất trong giao diện, đó chính là các thẻ html</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token punctuation\">/></span></span></code></pre>\n<h3 id=\"molecule\"><a href=\"#molecule\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Molecule</h3>\n<p>Trong lập trình chúng ta thường gọi nó là component, thí dụ như search component sẽ bao gồm <code class=\"language-text\">label</code>, <code class=\"language-text\">input</code>, <code class=\"language-text\">button</code></p>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/molecule-search-form.png\" alt=\"Structure theo phương pháp Atomic\"></p>\n<h3 id=\"organism\"><a href=\"#organism\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Organism</h3>\n<p>Một component có ô search, có thanh navigation, logo, đố bạn đó là gì? Header</p>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/organism-header.png\" alt=\"Structure theo phương pháp Atomic\"></p>\n<p>Tất nhiên header cũng có thể  có nhiều component khác</p>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/organisms-headers.png\" alt=\"Structure theo phương pháp Atomic\"></p>\n<p>Một component có thể gọi là Organism có thể bao gồm nhiều component lặp lại như danh sách sản phẩm, bài viết</p>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/organisms-product-grid.png\" alt=\"Structure theo phương pháp Atomic\"></p>\n<h3 id=\"template\"><a href=\"#template\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Template</h3>\n<p>Giờ tới khái niệm mà tất cả anh em làm web chúng ta điều biết</p>\n<p>Template là page nhưng ở dạng skeleton, chúng ta chưa tô vẽ gì cụ thể, nó như một cái rập, chúng ta dùng để đập ra vài trăm bộ đồ.</p>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/template-timeinc-homepage.png\" alt=\"Structure theo phương pháp Atomic\"></p>\n<h3 id=\"page\"><a href=\"#page\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Page</h3>\n<p>Page là một một UI hoàn chỉnh với nội dung, hình ảnh, logic có đầy đủ hết rồi</p>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/page-timeinc-homepage.png\" alt=\"Structure theo phương pháp Atomic\"></p>\n<p>Một illustration tổng quát</p>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/atomic-design-abstract-concrete.png\"></p>\n"}},{"node":{"title":"Làm quen khái niệm CORS của Web","path":"/lam-quen-khai-niem-cors-cua-web/","date":"6. September 2019","timeToRead":3,"desc":"Bài này khá căn bản và cần thiết cho bạn nào chưa biết gì về CORS, nghe ai đó nói về từ khóa ghê gớm này mà ko biết nó là gì, không để cập đến vấn đề setup làm sao để chạy CORS trên server - vì mình ko biết code phía server đâu","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#access-control-allow-origin\">Access-Control-Allow-Origin</a></li>\n<li>\n<p><a href=\"#c%c3%a1c-ki%e1%bb%83u-request-cors\">Các kiểu request CORS</a></p>\n<ul>\n<li><a href=\"#request-%c4%91%c6%a1n-thu%e1%ba%a7n-nh%c6%b0-get-post-head\">Request đơn thuần như <code class=\"language-text\">GET</code>, <code class=\"language-text\">POST</code>, <code class=\"language-text\">HEAD</code></a></li>\n<li><a href=\"#preflight-request\">Preflight request</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<p>Cross-Origin Resource Sharing (CORS) là một cơ chế sử dụng thông tin trên HTTP header để báo với trình duyệt, cho phép ứng dụng web chạy từ <em>nhà</em> này, có quyền truy xuất resource từ 1 <strong>nhà</strong> khác (2 thằng gọi là khác nhà khi khác tên miền, khác port, khác giao thức http và https)</p>\n<p>Ví dụ một request cross-origin: nhà bạn ở <a href=\"http://domain-a.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://domain-a.com</a> dùng javascript gửi request bên nhà <a href=\"http://api.domain-b.com/data.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://api.domain-b.com/data.json</a></p>\n<p>Vì lý do bảo mật, trình duyệt sẽ không cho thực hiện các request cross-origin như vậy. Nghĩa là các ứng dụng web gọi API chỉ có thể sử dụng resource từ cùng <em>nhà</em> (same-origin policy là từ chuẩn, nếu bạn cần research thêm), trừ khi response từ <em>nhà</em> khác đó cho phép gọi CORS (bằng cách thêm một số thông tin trên header)</p>\n<p>Các request có thể dùng CORS</p>\n<ul>\n<li>Gửi một network request bằng <code class=\"language-text\">fetch</code></li>\n<li>Web font, hoặc load <code class=\"language-text\">@font-face</code> trong CSS</li>\n<li>WebGL texture</li>\n<li>Image, video</li>\n</ul>\n<p>Khi config thành công trên server, server sẽ trả thêm một số thông tin trên header để trình duyệt biết và cấp phép chạy</p>\n<h2 id=\"access-control-allow-origin\"><a href=\"#access-control-allow-origin\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Access-Control-Allow-Origin</h2>\n<p>Chỉ định các tên miền nào được phép truy cập,  ví dụ để cho phép tất cả tên miền có thể gọi tới</p>\n<pre class=\"language-json\"><code class=\"language-json\">Access-Control-Allow-Origin<span class=\"token operator\">:</span> *</code></pre>\n<p>Cho phép 1 tên miền cụ thể</p>\n<pre class=\"language-json\"><code class=\"language-json\">Access-Control-Allow-Origin<span class=\"token operator\">:</span> https<span class=\"token operator\">:</span><span class=\"token comment\">//example.com</span></code></pre>\n<h2 id=\"các-kiểu-request-cors\"><a href=\"#c%C3%A1c-ki%E1%BB%83u-request-cors\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các kiểu request CORS</h2>\n<p>Có 2 kiểu CORS request: các request <em>đơn thuần</em>, và các request <strong>preflight</strong>, 2 cái này sẽ do trình duyệt xác định sử dụng cái nào, là một developer chúng ta cũng thật sự không cần quan tâm.</p>\n<h3 id=\"request-đơn-thuần-như-get-post-head\"><a href=\"#request-%C4%91%C6%A1n-thu%E1%BA%A7n-nh%C6%B0-get-post-head\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Request đơn thuần như <code class=\"language-text\">GET</code>, <code class=\"language-text\">POST</code>, <code class=\"language-text\">HEAD</code></h3>\n<p>Các request được trình duyệt xếp loại <em>đơn thuần</em> là\nGET, POST, HEAD\nSử dụng <a href=\"https://fetch.spec.whatwg.org/#cors-safelisted-request-header\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CORS safe -listed header</a>\nKhi sử dụng <code class=\"language-text\">Content-Type</code>, chỉ các giá trị sau là được cho phép <code class=\"language-text\">application/x-www-form-urlencoded</code>, <code class=\"language-text\">multipart/form-data</code>,  <code class=\"language-text\">text/plain</code>\nKhông có các listener nào được đăng ký trên <code class=\"language-text\">XMLHttpRequestUpload</code>\nKhông sử dụng <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ReadableStream</a></p>\n<h3 id=\"preflight-request\"><a href=\"#preflight-request\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Preflight request</h3>\n<p>Đơn giản là ngược lại các trường hợp ở trên thì sẽ là dạng preflight, trình duyệt sẽ gửi đi một request ở phương thức <code class=\"language-text\">options</code> để xác định server có hỗ trợ ko trước khi thực sự gửi đi request chính.</p>\n<p>Đối với loại preflight request, ngoài việc chuyển phương thức sang <code class=\"language-text\">options</code>, nó sẽ set thêm một số thuộc tính trên header</p>\n<p><code class=\"language-text\">Access-Control-Request-Method</code>:  phương thức GET hay POST nên được sử dụng\n<code class=\"language-text\">Access-Control-Request-Headers</code>: kiểu header muốn sử dụng\n<code class=\"language-text\">Origin</code>: nơi gửi request</p>\n<p>Ví dụ</p>\n<pre class=\"language-json\"><code class=\"language-json\"># Request\ncurl -i -X OPTIONS localhost<span class=\"token operator\">:</span><span class=\"token number\">3001</span>/api/ping \\\n-H 'Access-Control-Request-Method<span class=\"token operator\">:</span> GET' \\\n-H 'Access-Control-Request-Headers<span class=\"token operator\">:</span> Content-Type<span class=\"token punctuation\">,</span> Accept' \\\n-H 'Origin<span class=\"token operator\">:</span> http<span class=\"token operator\">:</span><span class=\"token comment\">//localhost:3000'</span></code></pre>\n<p>Chúng ta có thể tạm dịch nó ra ngôn ngữ tự nhiên là “Tao muốn thực hiện một request dạng GET với <code class=\"language-text\">content-type</code> và <code class=\"language-text\">Accept</code> header từ địa chỉ localhost:3000 có được ko?”</p>\n<p>Kết quả trả về từ server sẽ cho phép trình duyệt tiến hành tiếp, hay dừng lại ở đó. Response từ server sẽ như thế này</p>\n<pre class=\"language-json\"><code class=\"language-json\">HTTP/<span class=\"token number\">1.1</span> <span class=\"token number\">204</span> No Content\nAccess-Control-Allow-Origin<span class=\"token operator\">:</span> *\nAccess-Control-Allow-Methods<span class=\"token operator\">:</span> GET<span class=\"token punctuation\">,</span>HEAD<span class=\"token punctuation\">,</span>PUT<span class=\"token punctuation\">,</span>PATCH<span class=\"token punctuation\">,</span>POST<span class=\"token punctuation\">,</span>DELETE\nVary<span class=\"token operator\">:</span> Access-Control-Request-Headers\nAccess-Control-Allow-Headers<span class=\"token operator\">:</span> Content-Type<span class=\"token punctuation\">,</span> Accept\nContent-Length<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\nDate<span class=\"token operator\">:</span> Fri<span class=\"token punctuation\">,</span> <span class=\"token number\">05</span> Apr <span class=\"token number\">2019</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">41</span><span class=\"token operator\">:</span><span class=\"token number\">08</span> GMT\nConnection<span class=\"token operator\">:</span> keep-alive</code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://auth0.com/blog/cors-tutorial-a-guide-to-cross-origin-resource-sharing/\n\">📜 CORS Tutorial: A Guide to Cross-Origin Resource Sharing</a></p>\n"}},{"node":{"title":"Làm quen với kiến trúc Serverless","path":"/lam-quen-voi-kien-truc-serverless/","date":"30. August 2019","timeToRead":7,"desc":"Mình không phải chuyên gia trong lĩnh vực này, nghiên cứu để biết thêm, thấy cũng hay, chia sẽ cho mọi người cùng đọc","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#serverless-l%c3%a0-g%c3%ac\">Serverless là gì</a></li>\n<li><a href=\"#function-as-a-service\">Function as a Service</a></li>\n<li><a href=\"#case-study\">Case Study</a></li>\n</ul>\n<!-- /TOC -->\n<p>Mười mấy năm về trước, ngày còn đang học đại học, mỗi lần đến ngày đăng ký môn học là mình được nghe điệp khúc hát mãi \"server quá tải, số lượng sinh viên tranh nhau vào các lớp có nhiều gái xinh quá đông, quá nguy hiểm, mấy em vui lòng canh 12 giờ đêm, khi ko còn ai lên đăng ký môn học, chúng tôi mới đáp ứng kịp\"</p>\n<p>Ngày đó Server của trường nằm ở Nguyễn Văn Tráng, phòng server nhỏ như hang thỏ, mà chỉ xài đúng mấy ngày đầu học kỳ, nên thầy trưởng khoa ko thể nào xin ngân sách được để mà nâng cấp 10 mấy con server cho các em sinh viên xài thỏa thích.</p>\n<p>Bài toán Server đó giờ được giải quyết ra sao? <strong>Serverless</strong></p>\n<p>Trước tiên cần khẳng định <strong>Serverless</strong> không phải là bạn không cần server. Một shop <em>thú nuôi</em> đơn giản, vài ngàn người mua hoa một tháng, làm bằng wordpress bạn sẽ không thấy được lợi ích từ việc sử dụng kiến trúc mới này, không những vậy còn là việc ném một cục tiền cho mấy thằng bán dịch vụ như Amazon</p>\n<p>Trang bán thú nuôi, kiến trúc cũ sẽ là thế này</p>\n<p><img src=\"https://martinfowler.com/articles/serverless/ps.svg\" alt=\"kiến trúc cũ sẽ là thế này\"></p>\n<p>Tất cả những logic sẽ nằm ở <strong>ứng dụng phía server</strong>: từ authentication, page navigation, searching, transaction (code backend đó)</p>\n<p>Yêu cầu cần có ngân sách, kế hoạch cụ thể, lắp đặt các hệ thống máy chủ, tìm một chỗ để máy, đảm bảo luôn có điện, luôn mát lạnh, đi dây, chọn nhà cung cấp mạng không bị cá mập cắn…</p>\n<p>Nói chung bạn tự làm mọi thứ, hoặc bỏ tiền ra thuê một thằng làm mọi thứ, mà nó còn hay đòi hỏi thêm thắt này kia nọ, vô cùng tốn thời gian, nhân lực, tiền bạc, cơ sở hạ tầng.</p>\n<p><em>Infrastructure as a service - IaaS</em>, các dịch vụ cho <em>thuê mặt bằng</em> ra đời. Đáp ứng nhu cầu tiết kiệm chi phí ở thời điểm đầu, nhưng vẫn có thể <em>bành trướng</em> khi cần.</p>\n<p>Bạn hình dung nó như việc mở một quán ăn, phải tìm mặt bằng, tìm người giữ xe, chỗ để xe cho khách, thu hút khách vào ăn, thanh toán, sửa chữa điện, nước… Những thằng <strong>IaaS</strong> là các trung tâm thương mại, nó lo hết mọi thứ khác, bạn chỉ việc bỏ tiền ra và thuê lại mặt bằng và kinh doanh.</p>\n<h2 id=\"serverless-là-gì\"><a href=\"#serverless-l%C3%A0-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Serverless là gì</h2>\n<p>Nó như một khái niệm kinh tế học, không có một cách định nghĩa chính xác Serverless là gì! Có thể hiểu theo 2 cách sau</p>\n<p>Serverless được dùng để ám chỉ những ứng dụng sử dụng phần lớn (hoặc toàn bộ) dịch vụ \"nhà hàng xóm\" (third-party), được host trên cloud, cho các vấn đề ở phía server là logic và state (ví dụ trạng thái đăng nhập, một dạng của dịch vụ chăm sóc khách hàng thân thiết). Những ứng dụng <strong>để sử dụng</strong> (không phải những trang profile công ty, show hiệu ứng bay lượn portfolio, ví dụ như Facebook, ứng dụng đăng ký môn học, hoặc ứng dụng điện thoại bị chửi bới quá trời FaceApp, tức là mô hình này không chỉ áp dụng riêng cho web). Những dịch vụ thường được outsource cho nhà hàng xóm là gì: database có <a href=\"https://parseplatform.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Parse</a>, <a href=\"https://firebase.google.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Firebase</a>, authentication có <a href=\"https://auth0.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Auth0</a>, AWS Cognito. Mấy nhà này nằm trong khu \"Backend as a Service\" - <strong>BaaS</strong>, khi gắn vào <em>hậu tố</em> as a Service bạn có thể biết là nó nằm ở nhà hàng xóm.</p>\n<p>Serverless cũng có nghĩa là ứng dụng đó logic server vẫn có, developer vẫn phải viết logic này, tuy nhiên, không giống kiến trúc truyền thống, nó chạy theo cơ chế \"tiền trao-cháo múc\" (event-trigger), không quan tâm anh bạn có ở chung nhà mình không (stateless compute container). Khái niệm này được <a href=\"https://twitter.com/marak\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@marak trên Twitter</a> gọi là <strong>Function as a Service</strong> - <strong>FaaS</strong>, bạn có nhu cầu cắt tóc, gội đầu, uống cafe, đánh giày thì bạn ra <em>tiệm</em> hết, không dùng đồ <em>nhà</em> có sẵn nữa. Hiện tại, <a href=\"https://aws.amazon.com/lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AWS Lambda</a> là một trong những platform nổi tiếng nhất khi nói đến FaaS</p>\n<p>Giờ nói tới FaaS, nó đang là trend, nó thay đổi cách chúng ta trước đây vẫn nghĩ về kiến trúc dưới server.</p>\n<p>Tất cả những ông lớn đều có các sản phẩm BaaS và FaaS, <a href=\"https://aws.amazon.com/serverless/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Amazon Serverless</a>, <a href=\"https://firebase.google.com/docs/functions/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Cloud Functions for Firebase.</a></p>\n<p><img src=\"https://hackernoon.com/hn-images/1*t4O4UXpdG68MQboNKC6bBw.jpeg\" alt=\"Tất cả những ông lớn đều có các sản phẩm BaaS và FaaS\"></p>\n<p>Một kiến trúc Serverless nó như thế này</p>\n<p><img src=\"https://martinfowler.com/articles/serverless/sps.svg\" alt=\"Một kiến trúc Serverless\"></p>\n<ol>\n<li>Phần authen trước đây được gửi <em>nhà hàng xóm</em> làm (cơ quan nhà nước chuyên cung cấp CMND)</li>\n<li>Dữ liệu được đưa một về nhà kho quản lý, kiểu như Tiki bây giờ quá mệt quản lý kho hàng, các cửa hàng nhỏ lẻ tự quản lý kho, Tiki bán được thì chạy tới kho của bên thứ 3 lấy.</li>\n<li>Với 2 thay đổi ở trên, điều này có nghĩa là một vài logic đã được nằm ở phía client, thí dụ, user session, bạn sẽ thấy rõ nhất ở các Single Page App chúng ta build, phần logic giao diện cho user đã và chưa đăng nhập nằm ở client - <em>nhà user</em>, những route nào user có thể vào nằm ở code client</li>\n<li>Một vài hiển thị, ràng buộc tất nhiên vẫn được server nắm. Thí dụ \"search\". Chúng ta có thêm một <em>nhà</em> gọi là \"API Gateway\", dịch vụ giao nhận, tất cả các yêu cầu từ client đưa về đây, các anh em HTTP sẽ đi lấy dữ liệu từ kho về cho chúng ta.</li>\n<li>Với tính năng đặt hàng, nó do một <em>nhà** khác cung cấp. Những logic khác nhau, được tách và deploy thành những </em>cục* khác nhau như vậy cách tiếp cận của FaaS cũng là cách tiếp cận rất phổ biến trong \"Microservices\"</li>\n</ol>\n<p>Nó sẽ có những lợi ích i chang như Microservices, tất nhiên là có trả giá, có nhiều thứ để kiểm soát và theo dõi hơn, vấn đề bảo mật cũng không phải đơn giản như xưa, nằm ở nhiều nơi quá mà, bài toán đi đi lại tránh kẹt xe giữa các hệ thống khác nhau, biết đâu đi lạc vào chổ nào đó mất CMND luôn !!</p>\n<h2 id=\"function-as-a-service\"><a href=\"#function-as-a-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Function as a Service</h2>\n<p>Nãy giờ nói FaaS nhiều quá rồi, giờ \"đào sâu\" nghiên cứu nó chút. Trích dẫn từ trang <a href=\"https://aws.amazon.com/lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Amazon Lambda</a></p>\n<blockquote>\n<p>AWS Lambda lets you run code without provisioning or managing servers. (1) ... With Lambda, you can run code for virtually any type of application or backend service (2) - all with zero administration. Just upload your code and Lambda takes care of everything required to run (3) and scale (4) your code with high availability. You can set up your code to automatically trigger from other AWS services (5) or call it directly from any web or mobile app (6).</p>\n</blockquote>\n<p>Diễn giải đoạn dài ngoằn kia</p>\n<p>(1) FaaS là chạy backend code mà không cần quan tâm việc quản lý và bảo trì hệ thống server.</p>\n<p>(2) FaaS không yêu cầu một framework hay thư viện cụ thể nào. Các <strong>function</strong> trên Lambda có thể được viết bằng Javascript, Python, Go, Java, Clojure, Scala, .NET.</p>\n<p>(3) Deploy sẽ rất khác với hệ thống truyền thống. Tới *nhà** của FaaS chúng ta đưa đoạn code cho chủ nhà, còn lại chủ nhà làm gì thì làm.</p>\n<p>(4) Scale sẽ tự động được chủ nhà làm. Nếu hệ thống cần đáp ứng 1000 request đồng thời, chủ nhà sẽ lo, bạn chỉ cần bơm tiền. Quan trọng nhất, bên cung cấp dịch vụ sẽ quản lý hết toàn bộ resource, xin giấy phép, nói chung là toàn bộ - bạn không cần làm gì với cluster, VM cả.</p>\n<p>(5) Cung cấp cơ chế trigger ứng với các event bạn muốn.</p>\n<p>(6) Mấy bên cung cấp dịch vụ, cho phép các function này trigger theo những sự kiện HTTP request, như ví dụ là search, và purchase, hoặc gọi trực tiếp lên các API được cung cấp bởi bên cung cấp</p>\n<h2 id=\"case-study\"><a href=\"#case-study\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Case Study</h2>\n<p><a href=\"http://www.vogue.it/en/photovogue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PhotoVogue</a> trang Vogue của Ý, chạy từ năm 2011, sau một năm chạy, photographer bu vô như kiến, server ở nhà riêng quá tải không chịu nổi.</p>\n<p>Giám đốc kỹ thuật quyết định chuyển đổi toàn bộ hệ thống server ở <em>nhà riêng</em> sang AWS trong 3 tháng.</p>\n<p>Chạy theo trend này, còn có những cái tên rất phổ biến là Uber, Pokemon Go, Airbnb, Clash of Clans và rất nhiều ứng dụng khác khi số lượng user và real-time data lớn</p>\n<p>Những vấn đề mà team PhotoVogue đã gặp</p>\n<ul>\n<li>Có hơn 130,000 photographer trên khắp thế giới sử dụng hệ thống để đưa ảnh lên, ước tính có khoảng 400,000 ảnh, với dung lượng tối đa mỗi hình là 50MB (bọn này chơi sang nhỉ)</li>\n<li>Số lượng truy cập ngày càng tăng</li>\n<li>Trải nghiệm sử dụng của user không tốt, thao tác xử lý quá chậm, up ảnh quá rùa</li>\n</ul>\n<p>Với AWS, nó đã giải quyết các vấn đề sau cho PhotoVogue</p>\n<ul>\n<li>Khả năng scale, dễ maintenance, quản lý chi phí rõ ràng</li>\n<li>Lưu trữ hình trên Amazon S3</li>\n<li>Khi up lên Amazon S3, bật trigger sử dụng AWS Lambda function, convert các file này qua gif, jpeg, png, tiff</li>\n<li>Amazon API Gateway được sử dụng để làm tầng caching của REST API, Amazon CloudFront cho CDN</li>\n</ul>\n<p><img src=\"https://www.simform.com/wp-content/uploads/2017/12/serverless-graph.png\" alt=\"Kiến trúc Serverless\"></p>\n<p>Còn vấn đề nào nữa không, mình hy vọng bạn nào chuyên gia vào chỉ giáo</p>\n<p>Tài liệu tham khảo</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://hackernoon.com/what-is-serverless-architecture-what-are-its-pros-and-cons-cc4b804022e9\">📜 What is Serverless Architecture? What are its Pros and Cons?</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://martinfowler.com/articles/serverless.html\">📜 Serverless Architectures</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.simform.com/serverless-architecture-guide/\">📜 Serverless Architecture: A Comprehensive Guide</a></p>\n"}},{"node":{"title":"Tùy biến code theo tốc độ mạng","path":"/tuy-bien-code-theo-toc-do-mang/","date":"23. August 2019","timeToRead":2,"desc":"Responsive với CSS chúng ta tùy biến code bằng @media, vậy với JS, ta thêm các điều kiện theo tốc độ mạng bằng cách nào?","content":"<p>Responsive với CSS chúng ta tùy biến code bằng @media, vậy với JS, ta thêm các điều kiện theo tốc độ mạng bằng cách nào?</p>\n<p>Chúng ta sẽ sử dụng API của trình duyệt <code class=\"language-text\">navigator.connection.effectiveType</code> để tối ưu theo tốc độ kết nối mạng của user</p>\n<p>Các thông tin về mạng của user có thể lấy qua <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Navigator/connection\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">navigator.connection</a>, trong đó có giá trị <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/effectiveType\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">effectiveType</a> là một trong các giá trị 'slow-2g', '2g', '3g', '4g'</p>\n<p>Chrome 62 trở về trước, chúng ta chỉ có giá trị <code class=\"language-text\">navigator.connection.type</code>, giá trị này không phải tốc độ mạng. Mặc dù <code class=\"language-text\">type</code> là wifi, nhưng lại là một wifi cùi mía, tốc độ ngang ngửa 2g, Chrome sau này có <em>phát minh</em> thêm giá trị <code class=\"language-text\">effectiveType</code>, tính theo tốc độ đi-về của cục dữ liệu cho chính xác.</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--T54UF-7H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/wqeuhx12frs3k126bmrv.png\" alt=\"Đáp ứng theo tốc độ mạng\"></p>\n<p>Còn trường hợp, trong nhà có thanh niên nào đó mở link down film Nhật, tốc độ mạng đang \"như tia chớp\", thì chuyển sang \"cùi mía\", biết được sự thay đổi này cần add thêm cái listener cho đối tượng <code class=\"language-text\">navigator.connection</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">onConnectionChange</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n        rtt<span class=\"token punctuation\">,</span>\n        downlink<span class=\"token punctuation\">,</span>\n        effectiveType<span class=\"token punctuation\">,</span>\n        saveData\n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token dom variable\">navigator</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">connection</span>\n\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Effective network connection type: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>effectiveType<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Downlink Speed/bandwidth estimate: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>downlink<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">Mb/s</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Round-trip time estimate: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>rtt<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">ms</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Data-saver mode on/requested: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>saveData<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token dom variable\">navigator</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">connection</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> onConnectionChange<span class=\"token punctuation\">)</span></code></pre>\n<p>Dùng Chrome DevTools để giả lập các tốc độ mạng khác nhau để test, chứ đừng down film để test tốc độ</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gdIz0VyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/t9zadl65erjhll14zbcp.png\" alt=\"Đáp ứng theo tốc độ mạng\"></p>\n<p>Mấy trình duyệt xịn xịn như Chrome, Opera, Firefox là dùng được <code class=\"language-text\">navigator.connection</code> chứ không riêng gì Chrome</p>\n<p>Dùng một regex để gom mấy kết quả <em>gờ gờ</em> là mạng chậm hết, 3g Việt Nam thì cũng như 2g thôi</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\"><span class=\"token charclass class-name\">\\s</span>low-2g<span class=\"token alternation keyword\">|</span>2g<span class=\"token alternation keyword\">|</span>3g</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">navigator</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">connection</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">effectiveType</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">connection</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"slow\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">connection</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"fast\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Mình sử dụng Vue.js, không phải HTML thuần nên đừng thắc mắc sao có cái <code class=\"language-text\">v-if</code> nhé</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>home<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>connection === <span class=\"token punctuation\">'</span>fast<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\">&lt;!-- 1.3MB video --></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>theatre<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autoplay</span> <span class=\"token attr-name\">muted</span> <span class=\"token attr-name\">playsinline</span> <span class=\"token attr-name\">control</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/static/img/doodle-theatre.webm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/webm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/static/img/doodle-theatre.mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/mp4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 28KB image --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>connection === <span class=\"token punctuation\">'</span>slow<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>theatre<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/static/img/doodle-theatre-poster.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_tvmKtK---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/8jukzhdu62nbghw0cfx3.png\" alt=\"Đáp ứng theo tốc độ mạng\"></p>\n<p>Nếu bạn viết React, có <a href=\"https://mxb.dev/blog/connection-aware-components/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bài này cũng hay</a>, nói về việc làm component đáp ứng theo tốc độ kết nối</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://dev.to/addyosmani/adaptive-serving-using-javascript-and-the-network-information-api-331p\">📜 Adaptive Serving using JavaScript and the Network Information API</a></p>\n"}},{"node":{"title":"Nguyên lý nền tảng của lập trình function","path":"/nguyen-ly-nen-tang-cua-lap-trinh-function/","date":"26. July 2019","timeToRead":5,"desc":"Khái niệm ngàn người biết, bạn cũng phải biết","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#n%c3%b3i-v%e1%bb%81-l%e1%bb%a3i-%c3%adch\">Nói về lợi ích</a></li>\n<li><a href=\"#immutable\">Immutable</a></li>\n<li><a href=\"#pure-function\">Pure Function</a></li>\n<li><a href=\"#%c4%90%e1%bb%87-quy\">Đệ quy</a></li>\n<li><a href=\"#t%e1%bb%95ng-k%e1%ba%bft\">Tổng kết</a></li>\n<li><a href=\"#t%c3%a0i-li%e1%bb%87u-tham-kh%e1%ba%a3o\">Tài liệu tham khảo</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"nói-về-lợi-ích\"><a href=\"#n%C3%B3i-v%E1%BB%81-l%E1%BB%A3i-%C3%ADch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nói về lợi ích</h2>\n<p>Trước tiên chúng ta phải nói về lợi ích của kiểu lập trình hướng function, để có thể có động lực <em>nghiên cứu đào sâu</em>, một vài điểm được nhiều người thống nhất</p>\n<p>Code của chúng ta trở nên \"module\" hơn, nhắc về module thì lấy ví dụ trò xếp hình là dễ hình dung nhất</p>\n<p><img src=\"https://cdn.redshift.autodesk.com/2014/10/benefits_of_modular_construction_lego.jpg\" alt=\"Minh họa Module\"></p>\n<ul>\n<li>Các function độc lập, khi kết nối với nhau tạo ra một chương trình\nModule cũng sẽ giúp code dễ hiểu hơn, 1 function = 1 công dụng, <em>không có gì dấu diếm</em></li>\n<li>Dễ copy/paste hơn</li>\n<li>Dễ test hơn</li>\n</ul>\n<p>Bên dưới chúng ta sẽ đề cập đến những nguyên lý nền tảng, mà kinh nghiệm thực tế đúc kết được, như sử dụng <strong>immutable</strong> thay vì <strong>mutable</strong>, viết <strong>pure function</strong>, chia nhỏ bằng đệ quy, là những <strong>nguyên lý</strong> nền tảng, không ám chỉ một ngôn ngữ cụ thể nào</p>\n<h2 id=\"immutable-sống-kiên-định-thủy-chung\"><a href=\"#immutable-s%E1%BB%91ng-ki%C3%AAn-%C4%91%E1%BB%8Bnh-th%E1%BB%A7y-chung\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Immutable, sống kiên định thủy chung</h2>\n<p>Nói đến lập trình function trước tiên phải nói về <strong>immutable</strong></p>\n<blockquote>\n<p>Immutable là dạng dữ liệu sau khi tạo ra thì không thay đổi nữa</p>\n</blockquote>\n<p>Mutate là gì? ví dụ, gán tham chiếu vào một biến đã có</p>\n<pre class=\"language-js{2}\"><code class=\"language-js{2}\">var x = { name: 'luckyluu' }\nvar y = x\n\nx = { name: 'vuilaptrinh' }\nconsole.log(x, y)\n// => {name: \"vuilaptrinh\"} { name: \"luckyluu\" }</code></pre>\n<p>Giá trị <code class=\"language-text\">x</code> tham chiếu đến một vùng nhớ khác khi viết <code class=\"language-text\">x = { name: &#39;vuilaptrinh&#39; }</code>, trong khi đó <code class=\"language-text\">y</code> vẫn tham chiếu đến vùng nhớ cũ là <code class=\"language-text\">{ name: &#39;luckyluu&#39; }</code></p>\n<p>Trường hợp 2 là chỉnh sửa giá một object có sẵn</p>\n<pre class=\"language-js{4}\"><code class=\"language-js{4}\">var x = { name: 'luckyluu' }\nvar y = x\n\nx.name = 'vuilaptrinh'\nconsole.log(x, y)\n// => {name: \"vuilaptrinh\"} { name: \"vuilaptrinh\" }</code></pre>\n<p>Không thay đổi <code class=\"language-text\">y</code>, nhưng cả 2 cùng tham chiếu tới cùng một <code class=\"language-text\">x</code>.</p>\n<p>Riêng javascript chúng ta phải dùng hẳn một thư viện <a href=\"https://immutable-js.github.io/immutable-js/docs/#/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">immutable-js</a> vì việc \"chặn\" không cho thay đổi dữ liệu trong javascript thì \"f..king complicated\", đừng nghĩ <code class=\"language-text\">const bienA</code> là đã mutable, nó chỉ thay đổi scope thôi bạn ơi</p>\n<p>Immutable là một cách làm không tốn nhiều chi phí để ngăn chặn các con bug chúng ta gặp trong các tình huống cá biệt, như 2 luồng xử lý cũng thực hiện ghi đè một giá trị-cùng lúc, hay trong một lần đọc dữ liệu nào đó mà bạn \"nhỡ tay\" đã thay đổi dữ liệu mà không hay biết.</p>\n<p>Cái gì cũng có giá của nó! Tùy vào ngôn ngữ và cục object bự cỡ nào, chi phí bỏ ra để <code class=\"language-text\">clone</code> object ban đầu để chỉnh sửa sẽ khác nhau. Phát sinh vấn đề \"xả rác\" lung tung qua việc khai báo các object mới liên tục khi cần chỉnh sửa, do đó các trường hợp phát triển GUI (viết một editor như VS Code gọi là phát triển GUI) hay game sẽ không phù hợp với immutable, tất nhiên luôn có một vài chỗ vẫn dùng được</p>\n<p>Khi bắt đầu dùng immutable, chúng ta phải tiếp cận khi viết code, phải suy nghĩ từng \"cục\" code nên làm thêm nào để <em>sạch</em> hơn, an toàn với sức khỏe bà mẹ và trẻ em hơn</p>\n<h2 id=\"pure-function-sống-nề-nếp-không-ảnh-hưởng-đến-nhà-hàng-xóm\"><a href=\"#pure-function-s%E1%BB%91ng-n%E1%BB%81-n%E1%BA%BFp-kh%C3%B4ng-%E1%BA%A3nh-h%C6%B0%E1%BB%9Fng-%C4%91%E1%BA%BFn-nh%C3%A0-h%C3%A0ng-x%C3%B3m\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pure Function, sống nề nếp không ảnh hưởng đến nhà hàng xóm</h2>\n<p>Thế nào là một <strong>Function Sạch</strong> ?</p>\n<p>Đó giờ chúng ta vẫn viết function, lập trình hướng function thì có gì khác? <strong>function</strong> ở đây ám chỉ các hàm hoạt động như hàm toán học như <code class=\"language-text\">f(x) = x + 1</code>, những hàm toán học này rất đơn giản, nhận một giá trị, và trả về một giá trị, không chỉnh sửa giá trị bên ngoài, dù nó được truyền vào như tham số của hàm, nếu cùng tham số truyền vào, <strong>luôn luôn</strong> nhận được cùng kết quả trả về. Truyền vào cho <code class=\"language-text\">f(x) = x + 1</code> là 2 thì bất cứ lần nào cũng nhận được kết quả là 3.</p>\n<p>Nhờ vậy chúng ta có thể <strong>cache</strong> kết quả này, sử dụng kết quả cache trong trường hợp có cùng input. Chúng ta cũng có thể gọi các function này trên nhiều luồng chạy song song mà không phải lo lắng gì. Nếu các function không phụ thuộc lẫn nhau, chúng ta cũng có thể gọi nó theo bất cứ thứ tự nào mà không quan tâm đến vấn đề <strong>race condition</strong></p>\n<blockquote>\n<p>Race condition, mình giải thích nôm na thế này, bạn là chàng trai lắm em theo đuổi, người đến trước, kẻ đến sau, mức độ quyết liệt của mỗi em lại khác nhau không phụ thuộc ai trước, ai sau, em xuất phát sau quá quyết liệt, nên ngỏ lời đòi cưới trước, bạn đồng ý, sau đó em xuất phát trước, cuối cùng cũng chạy tới được nhà bạn, bạn lại đồng ý tiếp. Thế là tiêu đời bạn rồi.</p>\n</blockquote>\n<h2 id=\"đệ-quy-sống-luôn-nhớ-về-ông-bà-tổ-tiên\"><a href=\"#%C4%91%E1%BB%87-quy-s%E1%BB%91ng-lu%C3%B4n-nh%E1%BB%9B-v%E1%BB%81-%C3%B4ng-b%C3%A0-t%E1%BB%95-ti%C3%AAn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đệ quy, sống luôn nhớ về ông bà tổ tiên</h2>\n<p>Function gọi lại chính nó, không phụ thuộc biến đếm liên quan gì tới lập trình function?</p>\n<p>Ý tưởng cốt lõi của đệ quy là chia bài toán lớn thành bài toán tương tự như vậy, nhưng quy mô nhỏ hơn. Vấn đề nhỏ hơn nghĩa là cũng dễ hiểu hơn, cách giải quyết cũng rõ rành rành hơn. Khi chúng ta đổi mặt với vòng lặp, nghĩ xem đệ quy có phải là lựa chọn đúng hơn không. Ví dụ lặp bình thường phù hợp khi cần đi qua tất cả phần tử trong mảng, đệ quy lại phù hợp áp dụng quicksort trong mảng (thứ 6 tuần sau mình viết bài này nha!)</p>\n<p>Khi làm việc với đệ quy, luôn nhớ sử dụng và nằm lòng câu hỏi <strong>điều gì sẽ thực thi khi nó ở vị trí cuối cùng</strong></p>\n<pre class=\"language-js{6}\"><code class=\"language-js{6}\">function factorial(x, acc) {\n\tacc = acc || 1\n\tif (x > 1) {\n\t\treturn factorial(x - 1, acc * x)\n\t} else {\n\t\treturn acc\n\t}\n}</code></pre>\n<p>Hạn chế được yếu điểm của đệ quy là <strong>tràn stack</strong> với câu hỏi trên.</p>\n<h2 id=\"tổng-kết\"><a href=\"#t%E1%BB%95ng-k%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tổng kết</h2>\n<p>Tóm lại tại sao thiên hạ <strong>rần rần</strong> với lập trình function hâm he triệt lập trình hướng đối tượng OOP</p>\n<ul>\n<li>Không tạo ra side effect</li>\n<li>Thứ tự chạy function không quan trọng</li>\n<li>Dễ đọc (ý là người khác dễ đọc lại và hiểu mình đang viết gì)</li>\n</ul>\n<p>Tất nhiên không phải lúc nào lập trình function cũng phù hợp với bất kỳ trường hợp nào, đôi khi side effect là cần thiết, bắt buộc, bạn không thể viết toàn bộ chương trình bằng pure function</p>\n<p>Theo quan điểm cá nhân: lập trình function trở nên phổ biến bởi 2 nguyên nhân: 1. Ngày càng nhiều vi xử lý có khả năng xử lý đồng thời trên đa luồng, 2. Đây là kiểu viết rất dễ tiếp cận với mọi người (như ai cũng xài windows vì bẻ khóa nó thì không có gì dễ đến thế)</p>\n<h2 id=\"tài-liệu-tham-khảo\"><a href=\"#t%C3%A0i-li%E1%BB%87u-tham-kh%E1%BA%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tài liệu tham khảo</h2>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.lucidchart.com/techblog/2017/11/29/functional-programming-principles-every-imperative-programmer-should-use/\">FUNCTIONAL PROGRAMMING PRINCIPLES EVERY IMPERATIVE PROGRAMMER SHOULD USE</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://stackoverflow.com/questions/36504/why-functional-languages\">Why functional languages? </a></p>\n"}},{"node":{"title":"10 nguyên lý lập trình nền tảng mà lập trình viên nào cũng cần biết","path":"/10-nguyen-ly-lap-trinh-nen-tang-ma-lap-trinh-vien-nao-cung-can-biet/","date":"13. July 2019","timeToRead":5,"desc":"Nhớ thời đại học quá nên ôn lại kiến thức vở lòng mấy bạn ơi","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#KISS\">KISS</a></li>\n<li><a href=\"#DRY\">DRY</a></li>\n<li><a href=\"#Up-up-m%E1%BB%9F-m%E1%BB%9F\">Up up mở mở</a></li>\n<li><a href=\"#H%E1%BB%A3p-th%E1%BB%83-s%E1%BA%BD-m%E1%BA%A1nh-h%C6%A1n-%C4%91%C6%B0%E1%BB%A3c-buff\">Hợp thể sẽ mạnh hơn được buff</a></li>\n<li><a href=\"#Ai-l%C3%A0m-vi%E1%BB%87c-n%E1%BA%A5y-Single-Responsibility\">Ai làm việc nấy (Single Responsibility)</a></li>\n<li><a href=\"#B%E1%BB%9Bt-quan-t%C3%A2m-con-g%C3%A1i-nh%C3%A0-h%C3%A0ng-x%C3%B3m-Separation-of-Concerns\">Bớt quan tâm con gái nhà hàng xóm (Separation of Concerns)</a></li>\n<li><a href=\"#B%E1%BA%A1n-l%C3%A0-l%E1%BA%ADp-tr%C3%ACnh-vi%C3%AAn-kh%C3%B4ng-ph%E1%BA%A3i-th%E1%BA%A7y-b%C3%B3i-YAGNI\">Bạn là lập trình viên không phải thầy bói YAGNI</a></li>\n<li><a href=\"#T%E1%BB%91i-%C6%B0u-h%C3%B3a-qu%C3%A1-s%E1%BB%9Bm\">Tối ưu hóa quá sớm</a></li>\n<li><a href=\"#Refactor\">Refactor</a></li>\n<li><a href=\"#Th%C3%A0-anh-code-s%E1%BA%A1ch-ch%E1%BB%A9-anh-kh%C3%B4ng-c%E1%BA%A7n-code-cho-cao-si%C3%AAu-Clean-Code--Clever-Code\">Thà anh code sạch, chứ anh không cần code cho cao siêu (Clean Code > Clever Code)</a></li>\n<li><a href=\"#T%E1%BB%95ng-k%E1%BA%BFt\">Tổng kết</a></li>\n</ul>\n<!-- /TOC -->\n<p>Nếu bạn là người theo chủ nghĩa viết code sao cho <em>chạy được là đủ</em>, bạn không nên đọc bài này. Còn mục tiêu là viết code và <strong>đặt cái tâm vào những gì mình viết ra</strong> thì bạn nên biết các nguyên lý nền tảng này.</p>\n<h2 id=\"kiss\"><a href=\"#kiss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>KISS</h2>\n<p>Nguyên tắc <strong>Keep it simple, stupid</strong> được áp dụng cho rất nhiều thứ trong cuộc sống, rất cần thiết cho các dự án từ vừa tới lớn.</p>\n<p>Từ lúc bắt đầu code những dòng đầu tiên, chúng ta phải khắc cốt ghi tâm câu <strong>đơn giản nhất có thể</strong>, code càng phức tạp càng khó viết và đọc lại, càng có khả năng phát sinh bug, càng khó chỉnh sửa sau này. Cụ Antoine de Saint-Exupery có phán câu này:</p>\n<blockquote>\n<p>Hoàn hảo không phải là khi không còn gì để thêm vào nữa, mà là không còn gì có thể bỏ bớt</p>\n</blockquote>\n<h2 id=\"dry\"><a href=\"#dry\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DRY</h2>\n<p>Nguyên tắc vàng mà chúng ta nghe mãi nghe mãi. <strong>Don’t repeat yourself</strong>, không bao giờ để chuyện code chổ này giống hệt chổ kia, copy-paste một đoạn code ở nhiều chổ trong source. Nếu thấy một đoạn code mà cứ viết đi viết lại ở nhiều nơi trong source, người ta sẽ đánh giá trình bạn còn non và xanh lắm</p>\n<h2 id=\"up-up-mở-mở-openclosed\"><a href=\"#up-up-m%E1%BB%9F-m%E1%BB%9F-openclosed\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Up up mở mở (Open/Closed)</h2>\n<p>Biết có thể viết thêm các tính năng bổ sung thoải mái, nhưng không được chỉnh sửa core chính. Cái này có thể lấy ví dụ bạn lấy những package trên <code class=\"language-text\">npm</code>, nó nằm trong <code class=\"language-text\">node_modules</code>, sẽ không được chỉnh sửa gì ở đó hết, nếu lỡ sau này người ta update lên, là bạn phải tự cập nhập thủ công nhé.</p>\n<h2 id=\"hợp-thể-sẽ-mạnh-hơn-được-buff-composition--inheritance\"><a href=\"#h%E1%BB%A3p-th%E1%BB%83-s%E1%BA%BD-m%E1%BA%A1nh-h%C6%A1n-%C4%91%C6%B0%E1%BB%A3c-buff-composition--inheritance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hợp thể sẽ mạnh hơn được buff (Composition > Inheritance)</h2>\n<p><img src=\"https://wegotthiscovered.com/wp-content/uploads/2018/08/Power-Rangers-Movie-Blu-ray-cover-art-1.jpg\" alt=\"10 nguyên tắc lập trình nền tảng mà lập trình viên nào cũng cần biết\"></p>\n<p>Nếu bạn có xem 5 anh em siêu nhân bạn sẽ hiểu, nếu 5 anh em siêu nhân mà hợp thể lại sẽ tạo ra một con robot với sức mạnh vượt bật, đánh bại mọi cả thể yêu quái, dù nó được buff rất nhiều đồ chơi để tăng dame.</p>\n<p>Cái này có ví dụ cho anh em nào viết OOP, mà mình thì không rành OOP lắm, nên anh em tự tìm ví dụ nhé.</p>\n<h2 id=\"ai-làm-việc-nấy-single-responsibility\"><a href=\"#ai-l%C3%A0m-vi%E1%BB%87c-n%E1%BA%A5y-single-responsibility\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ai làm việc nấy (Single Responsibility)</h2>\n<p>Mỗi function chỉ thực hiện một nhiệm vụ duy nhất, không ôm đồm nhiều thứ cùng lúc.</p>\n<p>Nếu xác định ra đường là đi ăn cơm, thì ăn cơm rồi về, không có sẵn tiền mua thêm bịch chè, ly trà sữa hay vài trứng vịt lộn.</p>\n<h2 id=\"bớt-quan-tâm-con-gái-nhà-hàng-xóm-separation-of-concerns\"><a href=\"#b%E1%BB%9Bt-quan-t%C3%A2m-con-g%C3%A1i-nh%C3%A0-h%C3%A0ng-x%C3%B3m-separation-of-concerns\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bớt quan tâm con gái nhà hàng xóm (Separation of Concerns)</h2>\n<p>Cũng tương tự với ai làm việc nấy, nguyên tắc này có phần trừu tượng, khái quát hơn một chút.</p>\n<p>Lấy ví dụ quan hệ trai-gái, để có thể quen một lúc 3 cô, bạn cần lập 3 tài khoản Zalo khác nhau, trên 3 cái điện thoại khác nhau, để khi đi chơi với cô nào thì không bị phát hiện mấy cô kia, đừng dùng 1 tài khoản trên 1 điện thoại mà chat với cả 3 cô cùng lúc.</p>\n<p>Lấy ví dụ trong <em>nghề</em> lập trình nó là mô hình thiết kế MVC, còn trong <em>nghề</em> React nó là khái niệm Container và Presentation component. Nhưng anh em cứ nhớ ví dụ 3 cô gái cho dễ.</p>\n<p><img src=\"https://static.makeuseof.com/wp-content/uploads/2017/10/programming-principle-mvc-pattern.png\" alt=\"10 nguyên tắc lập trình nền tảng mà lập trình viên nào cũng cần biết\"></p>\n<h2 id=\"bạn-là-lập-trình-viên-không-phải-thầy-bói-yagni---you-arent-gonna-need-it\"><a href=\"#b%E1%BA%A1n-l%C3%A0-l%E1%BA%ADp-tr%C3%ACnh-vi%C3%AAn-kh%C3%B4ng-ph%E1%BA%A3i-th%E1%BA%A7y-b%C3%B3i-yagni---you-arent-gonna-need-it\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bạn là lập trình viên không phải thầy bói (YAGNI - you aren’t gonna need it)</h2>\n<p>Nguyên tắc này nó nói là, bạn đừng viết ra những hàm mà bạn nghĩ, \"ờ, có lẽ trong tương lai chúng ta sớm muộn cũng xài tới nó\". Cái gì cần thì viết, có sao lại viết trước?</p>\n<p>Ví dụ, bạn viết sẵn một số lớp abstract và generic để tránh trùng lặp code, mà quá nhiều lớp abstract dẫn đến hậu quả không thể nào mà bảo trì nổi. Nói chung để đảm bảo nguyên tắc DRY, bạn cứ viết trước đi, nếu thấy bị trùng, thầy refactor lại, như ông bà có câu cứ có trâu rồi hả mua chuồng</p>\n<h2 id=\"tối-ưu-hóa-quá-sớm-avoid-premature-optimization\"><a href=\"#t%E1%BB%91i-%C6%B0u-h%C3%B3a-qu%C3%A1-s%E1%BB%9Bm-avoid-premature-optimization\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tối ưu hóa quá sớm (Avoid Premature Optimization)</h2>\n<p>Nếu bạn có xu hướng tối ưu các giải thuật được viết ra ngay từ đầu, vấn đề ở chỗ là bạn không thể biết được chương trình sẽ bị nghẽn cổ chai ở đâu cho đến khi có dữ liệu thực tế. Bạn có thể phỏng đoán, tất nhiên là được mà đôi khi hên hên lại đúng. Chỉ có một điều dễ thấy là bạn sẽ bỏ ra không ít thời gian để tăng tốc cho hàm đó, mà thiệt ra nó không chậm tới mức như bạn nghĩ, hoặc mức độ user sử dụng hàm đó sẽ không nhiều.</p>\n<p>Hoàn thành những vấn đề mấu chốt trước, sau đó dò lại để biết đang bị thắt cổ chai ở đâu</p>\n<h2 id=\"refactor-rồi-lại-refactor-rồi-lại-refactor\"><a href=\"#refactor-r%E1%BB%93i-l%E1%BA%A1i-refactor-r%E1%BB%93i-l%E1%BA%A1i-refactor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Refactor, rồi lại Refactor, rồi lại Refactor</h2>\n<p>Sự thật ai cũng biết là khi bạn mới bắt đầu viết, thời gian sau nhìn lại, khi đã có cái nhìn cụ thể và rõ ràng hơn những gì mình đang làm trong dự án, bạn sẽ code trước đây mình viết thật sự chưa \"ngon\". Công việc refactor là rất bình thường. Nếu bạn đang có việc cần thay đổi hoặc kiểm tra code cũ, nếu được thì cứ <em>dọn dẹp</em> một tí trước khi đi.</p>\n<h2 id=\"thà-anh-code-sạch-chứ-anh-không-cần-code-cho-cao-siêu-clean-code--clever-code\"><a href=\"#th%C3%A0-anh-code-s%E1%BA%A1ch-ch%E1%BB%A9-anh-kh%C3%B4ng-c%E1%BA%A7n-code-cho-cao-si%C3%AAu-clean-code--clever-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thà anh code sạch, chứ anh không cần code cho cao siêu (Clean Code > Clever Code)</h2>\n<p>Nói về clean code, là phải bỏ đi cái tôi to bự sang một bên, đừng bao giờ nghĩ code thế cho ngầu, code mà để bạn khoe với thiên hạ rằng cách code của tôi mới thông minh hơn.</p>\n<p>Ví dụ dễ thấy, một số thanh niên mình từng làm việc chung rất thích dùng câu điều kiện trên một dòng, anh ấy cứ <code class=\"language-text\">&amp;&amp;  || &amp;&amp; || &amp;&amp;</code> các kiểu trên một dòng, ai mà vô đọc thì chỉ có kiếm ảnh để nhờ giải thích là đang muốn làm cái gì.</p>\n<h2 id=\"tổng-kết\"><a href=\"#t%E1%BB%95ng-k%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tổng kết</h2>\n<p>9 người thì 10 ý, nếu đi hỏi 9 người với câu hỏi \"Thế nào được gọi là một lập trình viên tốt\", thì chắc nhận được không ít sự khác nhau về quan điểm, mà đôi khi còn trái chiều với nhau nữa.</p>\n<p>Bạn thấy ý kiến này thế nào, một lập trình viên giỏi là người biết mình đang phục vụ người dùng cuối, người có thể làm việc hiệu quả với đồng đội, người có thể hoàn thành công việc được giao đúng yêu cầu, đúng tiến độ.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.makeuseof.com/tag/basic-programming-principles/\">10 Basic Programming Principles Every Programmer Must Follow</a></p>\n"}},{"node":{"title":"6 ví dụ để bạn yêu luôn observable","path":"/6-vi-du-de-ban-yeu-luon-observable/","date":"9. July 2019","timeToRead":6,"desc":"Thêm những lý do để dụ dỗ bạn xài Observable","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#Handle-c%C3%A1c-event-b%E1%BA%B1ng-Observable\">Handle các event bằng Observable</a></li>\n<li><a href=\"#Operator-operator\">Operator, operator</a></li>\n<li><a href=\"#Ai-c%C3%B3-th%E1%BB%83-l%C3%A0-Observable\">Ai có thể là Observable</a></li>\n<li><a href=\"#Observable-cho-c%C3%A1c-HTTP-request\">Observable cho các HTTP request</a></li>\n<li><a href=\"#K%E1%BA%BFt-h%E1%BB%A3p-c%C3%A1c-Observable\">Kết hợp các Observable</a></li>\n<li><a href=\"#K%E1%BA%BFt\">Kết</a></li>\n</ul>\n<!-- /TOC -->\n<p><strong>Observable</strong> mình dịch ra tiếng việt thế này cho bạn dễ hình dung. Một khi bạn bật chế độ <code class=\"language-text\">observable</code> với một đứa con gái nào đó, là bạn đang trong giai đoạn bị nó ám ảnh, nhất cử nhất động của nó bạn điều để ý, nó hắc xì bạn cũng biết, một tuần nó mặc mấy bộ đồ bạn cũng biết. Chỉ cần nghe tiếng bước chân là bạn biết được hôm nay nó mang đôi dép gì (mức độ này hơi kinh khủng lắm rồi) là bạn có những phản xạ vô điều kiện bộc phát nơi cửa miệng \"Chiều nay trời mưa nhe em, mang dép lào đi cho chuẩn\". Phản xạ này là gọi là <strong>subscription</strong></p>\n<p>Rồi quay lại với vấn đề kỹ thuật, bài này không giải thích rõ Observable pattern, các khái niệm chính của nó, nếu muốn bạn đọc lại bài này trước đây <a href=\"https://luubinhan.github.io/blog/2018-10-30-gioi-thieu-reactive-programing-trong-javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">có viết rồi</a>, như cái tựa bài viết nó spoil hết cái nội dung rồi \"Ví dụ để thấy tại sao chúng ta nên <em>bật chế độ</em> Observable với một em gái nào đó\"</p>\n<p>Thần chú mình muốn bạn thuộc lầu</p>\n<blockquote>\n<p>Lập trình Reactive là làm việc với luồng dữ liệu bất đồng bộ</p>\n</blockquote>\n<p>Lại phải giải thích câu này chút, <strong>Nếu những gì diễn ra trên ứng dụng đang xảy ra một cách bất đồng bộ, khả năng rất cao là Observable sẽ giúp ích cho cuộc sống của anh em chúng ta bớt khổ hơn</strong>.</p>\n<p>Có nhiều cách làm và thư viện handle vụ luồng dữ liệu bất đồng bộ này, tuy nhiên, Observable có gì mà cool, sắp được chuẩn hóa và đưa vào ECMAScript. Thư viện RxJS đang được sử dụng rộng rãi và quá ngon rồi.</p>\n<p>Rồi vô luôn ví dụ nhe</p>\n<h2 id=\"handle-các-event-bằng-observable\"><a href=\"#handle-c%C3%A1c-event-b%E1%BA%B1ng-observable\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Handle các event bằng Observable</h2>\n<p>Chúng ta có 1 button, khi button này click tạo ra một chuỗi ngẫu nhiên. Viết bằng cả 2 cách javascript thuần, và sử dụng RxJS</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'output'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbutton<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    output<span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span> <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Bằng RxJS nè</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'output'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token maybe-class-name\">Rx</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Observable</span></span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEvent</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        output<span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span> <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Nó dài hơn khi viết javascript thuần mà man 😂. Chi mà phức tạp vậy? Đúng luôn, nhưng giờ thêm yêu cầu này vào thì sao: <em>Ở mỗi lần click đến bội số của 3 ( 3,6,9,12,...) thì mới random một string mới</em></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token maybe-class-name\">Rx</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Observable</span></span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEvent</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bufferCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// một dòng duy nhất</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        output<span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span> <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Vậy bạn viết JS thôi thì sao, khỏi nói cũng biết nó sẽ dài dòng hơn.</p>\n<h2 id=\"operator-operator\"><a href=\"#operator-operator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Operator, operator</h2>\n<p>Trong ví dụ trên, <code class=\"language-text\">.bufferCount</code> *đã cho thấy sức mạnh vượt trội<strong> so với cách thông thường. Có thể nói thế này, </strong>chúng ta xài Observable này là vì những gì chúng ta làm được bằng operator**. Trong thư viện RxJS nó cả tá Operator tha hồ mà chơi.</p>\n<p>Một ví dụ khác, cũng là vụ random string ở trên, mà giờ chỉ muốn random <strong>khi nó là một cú triple click</strong> (một phát 3 nháy, không phải double click nhoa)</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> click$ <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Rx</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Observable</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEvent</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nclick$<span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Observable</span></span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bufferWhen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        click$<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// kkhoảng thời gian của một cú 3 click</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">events</span> <span class=\"token arrow operator\">=></span> events<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        output<span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span> <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>DỊch ra ngôn ngữ con người nó sẽ như thế này, <strong>trong khoảng thời gian là 400ms, trong đám event được emit (tụi này được đưa vào mảng <code class=\"language-text\">events</code>), nếu mảng này lớn hơn hoặc bằng 3, thực hiện đống việc đã đăng ký bên dưới <code class=\"language-text\">subscribe</code></strong></p>\n<p>Bạn đã bắt đầu yêu Observable chưa? Mình đã khoái khoái rồi đó.</p>\n<h2 id=\"ai-có-thể-là--observable\"><a href=\"#ai-c%C3%B3-th%E1%BB%83-l%C3%A0--observable\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ai có thể là  Observable</h2>\n<p>Đơn giản, bất kể già trẻ lớn bé, trai gái, nếu RxJS có hàm ( khi nãy là <code class=\"language-text\">.fromEvent</code>) thì chúng ta có thể biến nó thành đối tượng bị theo dõi liên tục.</p>\n<h2 id=\"observable-cho-các-http-request\"><a href=\"#observable-cho-c%C3%A1c-http-request\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Observable cho các HTTP request</h2>\n<p>Một sức mạnh <em>siêu nhiên</em> khác của RxJS: xử lý mấy em HTTP request rất mượt mà</p>\n<p>Ví dụ, fetching một danh sách album và render.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> albumsApiUrl <span class=\"token operator\">=</span> <span class=\"token string\">'https://jsonplaceholder.typicode.com/albums'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token maybe-class-name\">Rx</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Observable</span></span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">ajax</span><span class=\"token punctuation\">(</span>albumsApiUrl<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribe</span><span class=\"token punctuation\">(</span>\n        <span class=\"token parameter\">res</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span></code></pre>\n<p>Trộn chung với ví dụ ở trên, chúng ta làm cái tính năng awsome sau, click  là có danh sách album ngẫu nhiên</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token maybe-class-name\">Rx</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Observable</span></span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEvent</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">flatMap</span><span class=\"token punctuation\">(</span>getAlbums<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribe</span><span class=\"token punctuation\">(</span>\n        render<span class=\"token punctuation\">,</span>\n        <span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getAlbums</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> userId <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">round</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token maybe-class-name\">Rx</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Observable</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">ajax</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://jsonplaceholder.typicode.com/albums?userId=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n        <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Observables 4\" src=\"//codepen.io/mmiszy/embed/WZOJjy/?height=265&theme-id=0&default-tab=js,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/mmiszy/pen/WZOJjy/'>Observables 4</a> by Michał Miszczyszyn\n  (<a href='https://codepen.io/mmiszy'>@mmiszy</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>Ví dụ trên có sử dụng operator <code class=\"language-text\">flatMap</code>, 1 trong những operator siêu kinh điển của RxJS, cho phép merge 2 mảng kiểu Observable thành 1</p>\n<p>Nếu chúng ta click liên tục trong thời gian ngắn, là có vấn đề, re-render nhiều lần, chúng ta cũng ko xác định được request nào được resolve cuối cùng. Cụ thể là thế này, có thể thằng xuất phát trước lại về đích sau cùng, chuyện của network ai mà biết được thời điểm đó nó download film gì làm chậm mạng, thằng request sau có khi lại về đích trước, như vậy thì dùng cục response lúc nào để render, mình muốn response của thằng request cuối cùng.</p>\n<p>Bạn muốn, trong công cuộc tán gái, đứa nào ở lại đến giây phút cuối cùng là đứa chiến thắng, bạn sẽ dẹp luôn những đứa nào thả thính trước đó? Ví von như vậy cũng chưa chuẩn, phải là đứa nào đến sau cùng thì dữ lại, dẹp mẹ tụi tới trước (thế này thì bất công vl mấy bạn)</p>\n<p>RxJS làm được chuyện đó không? Có chứ, <strong>mọi thứ đã có operator</strong>, chuyển qua dùng <code class=\"language-text\">switchMap</code>, sẽ chỉ có <strong>response cuối cùng được render</strong>, mấy request trước đó sẽ bị cancel hết</p>\n<p><img src=\"https://res.cloudinary.com/dukp6c7f7/image/upload/f_auto,fl_lossy,q_auto/s3-ghost/2017/09/Screen_Shot_2017_09_29_at_9_24_06_PM-1506713083152.png\"></p>\n<pre class=\"language-js{3}\"><code class=\"language-js{3}\">Rx.Observable\n    .fromEvent(button, 'click')\n    .switchMap(getAlbums)\n    .subscribe(\n        render,\n        err => console.error(err)\n    )</code></pre>\n<h2 id=\"kết-hợp-các-observable\"><a href=\"#k%E1%BA%BFt-h%E1%BB%A3p-c%C3%A1c-observable\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết hợp các Observable</h2>\n<p>Một use case khác mà chúng ta gặp hoài. Chức năng filter hoạt động như sau: cho tụi user nhập vào <code class=\"language-text\">user id</code> bằng <code class=\"language-text\">&lt;input /&gt;</code>, và chọn thể loại âm nhạc nó muốn bằng <code class=\"language-text\">&lt;select /&gt;</code>. Điều quan trọng là chỉ tạo request mới khi cả 2 giá trị trong đó điều có dữ liệu, và re-render khi một trong 2 giá trị này bị thay đổi.</p>\n<p>Tạo Observable trước nhé</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> id$ <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Rx</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Observable</span></span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEvent</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token arrow operator\">=></span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> resource$ <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Rx</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Observable</span></span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEvent</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">,</span> <span class=\"token string\">'change'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token arrow operator\">=></span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Chúng ta phải hợp thể 2 thằng trên vào một, để khi một trong 2 thằng có thay đổi chúng ta lấy được giá trị sau cùng của cả 2. <strong>mọi thứ đã có operator</strong>, nhiều lắm, ở đây dùng <code class=\"language-text\">combineLatest</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token maybe-class-name\">Rx</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Observable</span></span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">combineLatest</span><span class=\"token punctuation\">(</span>id$<span class=\"token punctuation\">,</span> resource$<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">switchMap</span><span class=\"token punctuation\">(</span>getResource<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribe</span><span class=\"token punctuation\">(</span>render<span class=\"token punctuation\">)</span></code></pre>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Observables 6\" src=\"//codepen.io/mmiszy/embed/mBwLoX/?height=265&theme-id=0&default-tab=js,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/mmiszy/pen/mBwLoX/'>Observables 6</a> by Michał Miszczyszyn\n  (<a href='https://codepen.io/mmiszy'>@mmiszy</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<h2 id=\"kết\"><a href=\"#k%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết</h2>\n<p>Bạn đã thấy sử dụng Observable thú vị dường nào chưa? Nếu câu trả lời là \"Có ❤️, trọn đời yêu em\", bạn hãy nhào vô document của nó để nghiên cứu chuyên sâu hơn. Hoặc <a href=\"https://luubinhan.github.io/blog/2018-10-30-gioi-thieu-reactive-programing-trong-javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">đọc lại bài trước đây của mình</a>.</p>\n<p>Nếu câu trả lời là \"No 💩, anh éo care mấy đứa ạ\". Thì bạn cũng nên bớt bớt đối xử tệ với nó đi, vì trong tương lai JS sẽ đưa nào vào như một object chính thức luôn, không chạy đằng trời được đâu các bạn ạ.</p>\n<p>Hy vọng anh em hôm nay đã học thêm được cái gì đó thú vị, hẹn gặp lại anh em vào một viết thú vị khác.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://x-team.com/blog/rxjs-observables/\">6 SIMPLE EXAMPLES WHICH WILL MAKE YOU LOVE OBSERVABLES (RXJS 5)</a></p>\n"}},{"node":{"title":"Không cho cuộn trang khi mở Modal","path":"/khong-cho-cuon-trang-khi-mo-modal/","date":"7. June 2019","timeToRead":1,"desc":"Xử lý cuộn trang khi mở modal","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#C%C3%A1ch-%C4%91%C6%A1n-gi%E1%BA%A3n-nh%E1%BA%A5t\">Cách đơn giản nhất</a></li>\n<li><a href=\"#Tr%C3%AAn-mobile\">Trên mobile</a></li>\n<li><a href=\"#Gi%E1%BA%A3i-ph%C3%A1p-cu%E1%BB%91i-c%C3%B9ng\">Giải pháp cuối cùng</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"cách-đơn-giản-nhất\"><a href=\"#c%C3%A1ch-%C4%91%C6%A1n-gi%E1%BA%A3n-nh%E1%BA%A5t\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cách đơn giản nhất</h2>\n<p>Đặt độ cao của body = 100% của viewport, sau đó cho overflow thành hidden, thêm mục padding right = 15 để fix trường hợp trang đã có thanh cuộn rồi</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body<span class=\"token class\">.model-open</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token unit\">vh</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">overflow-y</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding-right</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"trên-mobile\"><a href=\"#tr%C3%AAn-mobile\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Trên mobile</h2>\n<p>Cách trên chạy tốt trên desktop và android, buồn thay iOS vẫn cuộn được, thêm <code class=\"language-text\">position fixed</code> để sửa bug này</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Tuy nhiên, cách này vẫn bị vấn để bự khác, nếu cuộn xuống dưới, mở modal lên, đóng lại thì trang cuộn lên đầu</p>\n<h2 id=\"giải-pháp-cuối-cùng\"><a href=\"#gi%E1%BA%A3i-ph%C3%A1p-cu%E1%BB%91i-c%C3%B9ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giải pháp cuối cùng</h2>\n<p>Đi đâu rồi cũng về javascript thôi. Lưu lại vị trí scroll, set lại vị trí này khi đóng modal</p>\n<p>Khi bung modal</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showDialog</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dialog'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">classList</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'show'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> scrollY <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">documentElement</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getPropertyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--scroll-y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span><span class=\"token punctuation\">;</span>\n  body<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">position</span> <span class=\"token operator\">=</span> <span class=\"token string\">'fixed'</span><span class=\"token punctuation\">;</span>\n  body<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">top</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>scrollY<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Khi đóng modal</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">closeDialog</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> scrollY <span class=\"token operator\">=</span> body<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">top</span><span class=\"token punctuation\">;</span>\n  body<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">position</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  body<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">top</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">scrollTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>scrollY <span class=\"token operator\">||</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dialog'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">classList</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'show'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">documentElement</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--scroll-y'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">scrollY</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Avoid body scrollable in safari when modal dialog shown\" src=\"//codepen.io/geoffgraham/embed/LogERe/?height=265&theme-id=0&default-tab=html,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/geoffgraham/pen/LogERe/'>Avoid body scrollable in safari when modal dialog shown</a> by Geoff Graham\n  (<a href='https://codepen.io/geoffgraham'>@geoffgraham</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://css-tricks.com/prevent-page-scrolling-when-a-modal-is-open/\">Prevent Page Scrolling When a Modal is Open</a></p>\n"}},{"node":{"title":"Hướng dẫn tạo một package, publish nó lên npm","path":"/huong-dan-tao-mot-package-publish-no-len-npm/","date":"6. June 2019","timeToRead":2,"desc":"Nếu bạn có một package nào đó muốn chia sẽ cùng mọi người trên npm, thì đây là cách bạn publish package make-by-me như vậy lên npm","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#Package-l%C3%A0-g%C3%AC-v%C3%A0-module-l%C3%A0-g%C3%AC\">Package là gì, và module là gì</a></li>\n<li><a href=\"#C%C3%A0i-%C4%91%E1%BA%B7t\">Cài đặt</a></li>\n<li><a href=\"#Ki%E1%BB%83m-tra\">Kiểm tra</a></li>\n<li><a href=\"#Publish\">Publish</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"package-là-gì-và-module-là-gì\"><a href=\"#package-l%C3%A0-g%C3%AC-v%C3%A0-module-l%C3%A0-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Package là gì, và module là gì</h2>\n<p>Npm sẽ phân biệt 2 khái niệm <strong>package</strong> và <strong>module</strong> </p>\n<p><strong>Package</strong> là một thư mục chứa một gói phần mềm được mô tả bởi file package.json</p>\n<p><strong>Module</strong> là một thư mục chứa file package.json, chứa một <code class=\"language-text\">default export</code>, cho phép loading module này bằng <code class=\"language-text\">require()</code> trong Node</p>\n<p>Thư mục <strong>node_modules</strong> là nơi mà thằng Node.js sẽ tìm các module cần thiết</p>\n<p>Một cách tóm tắt, hầu hết các npm package chúng ta cài là module, tuy nhiên hông nhất thiết npm package là module</p>\n<p>Những package CLI chỉ chứa các đoạn command-line, chúng ta ko thể load được bằng require, kiểu package như vậy không thể xem là module</p>\n<p>Module là được load từ 1 file như thế này mới xem là module</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> acronym <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'acronym'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"cài-đặt\"><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cài đặt</h2>\n<p>Tạo một thư mục trống, init package npm mới bằng <code class=\"language-text\">npm init</code> hoặc <code class=\"language-text\">npm init --yes</code> nếu muốn trả lời yes cho tất cả các câu hỏi.</p>\n<pre class=\"language-js\"><code class=\"language-js\">mkdir acronym <span class=\"token operator\">&amp;&amp;</span> cd acronym\nnpm init <span class=\"token operator\">--</span>yes</code></pre>\n<p>Trỏ vào thư mục này, chúng ta sẽ có file <code class=\"language-text\">package.json</code> như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"acronym\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Theo mặc định, một sẽ có 1 file <code class=\"language-text\">index.js</code>, với <code class=\"language-text\">default export</code></p>\n<p>Sửa file <strong>package.json</strong>, để bổ sung thông tin tác giả, chúng ta đi theo nguyên tắc là <code class=\"language-text\">Your Name &lt;email@example.com&gt;</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"acronym\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Transform sentences to acronyms.\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"luubinhan &lt;luubinhan@gmail.me>\"</span> <span class=\"token comment\">// không bắt buộc</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>File <code class=\"language-text\">index.js</code> nội dung đại loại sẽ như thế này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">acronym</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sentence<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"kiểm-tra\"><a href=\"#ki%E1%BB%83m-tra\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kiểm tra</h2>\n<p>Trước khi publish nó lên npm, trong ta có thể dùng <code class=\"language-text\">npm link</code> để kiểm tra dưới local trước. Đại khái <code class=\"language-text\">npm link</code> sẽ cho phép chúng ta trỏ thư mục package vào thư mục <code class=\"language-text\">node_modules</code> global. Chúng ta cần thực hiện 2 bước</p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">cd ~<span class=\"token operator\">/</span>duong<span class=\"token operator\">-</span>dan<span class=\"token operator\">-</span>toi<span class=\"token operator\">-</span>thu<span class=\"token operator\">-</span>muc<span class=\"token operator\">/</span>acronym\nnpm link</code></pre>\n<p>Sau đó, trong thư mục sử dụng package</p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">cd ~<span class=\"token operator\">/</span>duong<span class=\"token operator\">-</span>dan<span class=\"token operator\">-</span>toi<span class=\"token operator\">-</span>thu<span class=\"token operator\">-</span>muc<span class=\"token operator\">/</span>project<span class=\"token operator\">-</span>nao<span class=\"token operator\">-</span><span class=\"token keyword\">do</span>\nnpm link acronym</code></pre>\n<p>Bên trong thư mục <strong>node_modules</strong> bây giờ sẽ như thế này</p>\n<p><img src=\"https://scotch-res.cloudinary.com/image/upload/dpr_1,w_900,q_auto:good,f_auto/media/16958/DAUsrFheT8GoWDgais3E_Screen%20Shot%202017-06-26%20at%205.59.29%20PM.png\"></p>\n<h2 id=\"publish\"><a href=\"#publish\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Publish</h2>\n<p>Nếu package chúng ta bị trùng tên trên npm, sẽ nhận thông báo khi publish</p>\n<p><img src=\"https://scotch-res.cloudinary.com/image/upload/dpr_1,w_900,q_auto:good,f_auto/media/16958/Ib1IU5lWQfSrmfi23EOU_Screen%20Shot%202017-06-09%20at%2012.35.50%20PM%20(2).png\"></p>\n<p>Tất nhiên trước khi có quyền publish lên npm chúng ta phải tạo một user trên npm, bằng lệnh <code class=\"language-text\">npm adduser</code> hoặc lên site nó đăng ký. Sau đó login bằng <code class=\"language-text\">npm login</code> để nó nhớ chúng ta.</p>\n<p>Có thể kiểm tra npm có nhớ chúng ta chưa bằng <code class=\"language-text\">npm whoami</code> (tui là ai)</p>\n<p>Mọi thứ đã hoàn tất, <code class=\"language-text\">npm publish</code> để trình làng một module cho thiên hạ</p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">npm publish</code></pre>\n<p>Package sau khi publish sẽ nằm ở đây <code class=\"language-text\">https://npmjs.com/package/&lt;package&gt;</code></p>\n<p>Ngày nó đó ko muốn cho thiên hạ xài nữa</p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">npm unpublish</code></pre>\n<p>Khi cần update lên version mới</p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">npm version &lt;update_type></code></pre>\n<p>Đọc thêm <a href=\"https://npmjs.com/package/%3Cpackage%3E\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cách đặt tên version ở đây</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://scotch.io/bar-talk/how-to-build-and-publish-a-npm-package\">How to Build and Publish an npm Package</a></p>\n"}},{"node":{"title":"JSON.stringify vở lòng cho người mới","path":"/json-stringify-vo-long-cho-nguoi-moi/","date":"1. June 2019","timeToRead":2,"desc":"Một trong hàm kinh điển bắt buộc phải biết của mội frontend developer","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#tr%C6%B0%E1%BB%9Dng-h%E1%BB%A3p-%C4%91%E1%BA%B7c-bi%E1%BB%87t-v%C3%A0-l%E1%BB%97i\">Trường hợp đặc biệt và lỗi</a></li>\n<li><a href=\"#c%C3%A1c-tham-s%E1%BB%91-c%C3%B2n-l%E1%BA%A1i-c%E1%BB%A7a-jsonstringify\">Các tham số còn lại của <code class=\"language-text\">JSON.stringify</code></a></li>\n<li><a href=\"#h%C3%A0m-tojson\">Hàm <code class=\"language-text\">toJSON()</code></a></li>\n</ul>\n<!-- /TOC -->\n<p><code class=\"language-text\">JSON.stringify</code> là hàm kinh điển để chuyển một object trong javascript sang JSON. Bài viết này sẽ nhìn lại những kiến thức vở lòng của <code class=\"language-text\">JSON.stringify</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> answer<span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// '{\"answer\":42}'</span>\n<span class=\"token comment\">// typeof str = string</span></code></pre>\n<p><code class=\"language-text\">JSON.stringify</code> hay sử dụng chung với <code class=\"language-text\">JSON.parse</code>. Đây là cách chúng ta có thể sao chép một object trong javascript (không bị dính trường hợp reference đến object cũ)</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> answer<span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> clone <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// clone.answer = 42</span>\n<span class=\"token comment\">// clone !== obj</span></code></pre>\n<h2 id=\"trường-hợp-đặc-biệt-và-lỗi\"><a href=\"#tr%C6%B0%E1%BB%9Dng-h%E1%BB%A3p-%C4%91%E1%BA%B7c-bi%E1%BB%87t-v%C3%A0-l%E1%BB%97i\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Trường hợp đặc biệt và lỗi</h2>\n<p>Khi object <code class=\"language-text\">obj</code> có 1 property mà giá trị là <code class=\"language-text\">obj</code> (trỏ về chính nó), <code class=\"language-text\">JSON.stringify</code> trả về một error</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token property-access\">answer</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// TypeError: TypeError: Converting circular structure to JSON</span></code></pre>\n<p>Các trường hợp đặc biệt như <code class=\"language-text\">NaN</code> và <code class=\"language-text\">Infinity</code>, <code class=\"language-text\">JSON.stringify</code> sẽ chuyển về <code class=\"language-text\">null</code>, chứ ko trả lỗi</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> nan<span class=\"token operator\">:</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'not a number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> inf<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POSITIVE_INFINITY</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// '{\"nan\": null, \"inf\": null}'</span></code></pre>\n<p>Nó cũng sẽ lọc bỏ hết các property giá trị là <code class=\"language-text\">undefined</code> hoặc function</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> undef<span class=\"token operator\">:</span> <span class=\"token keyword nil\">undefined</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// '{}'</span></code></pre>\n<h2 id=\"các-tham-số-còn-lại-của-jsonstringify\"><a href=\"#c%C3%A1c-tham-s%E1%BB%91-c%C3%B2n-l%E1%BA%A1i-c%E1%BB%A7a-jsonstringify\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các tham số còn lại của <code class=\"language-text\">JSON.stringify</code></h2>\n<p><code class=\"language-text\">JSON.stringify</code> nhận vào 3 tham số, đa phần chúng ta ít biết tới 2 tham số còn lại.</p>\n<p>Tham số thứ 2 là <code class=\"language-text\">replacer</code>, một hàm nhận vào cặp <code class=\"language-text\">key/value</code> có thể dụng để thay đổi giá trị output sau cùng.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> e<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// nếu giá trị là number, cộng thêm 1</span>\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">replacer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// '{\"a\":2,\"b\":3,\"c\":4,\"d\":{\"e\":5}}'</span></code></pre>\n<p>Tham số thứ 3 là <code class=\"language-text\">spaces</code>, cho phép format lại output theo dạng dễ đọc</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> e<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// '{\"a\":1,\"b\":2,\"c\":3,\"d\":{\"e\":4}}'</span>\n\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'  '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// kết quả tương tự</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   \"a\": 1,</span>\n<span class=\"token comment\">//   \"b\": 2,</span>\n<span class=\"token comment\">//   \"c\": 3,</span>\n<span class=\"token comment\">//   \"d\": {</span>\n<span class=\"token comment\">//     \"e\": 4</span>\n<span class=\"token comment\">//   }</span>\n<span class=\"token comment\">// }</span>\n\n<span class=\"token comment\">// Ko nhất thiết phải là dấu khoảng trắng</span>\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">// __\"a\": 1,</span>\n<span class=\"token comment\">// __\"b\": 2,</span>\n<span class=\"token comment\">// __\"c\": 3,</span>\n<span class=\"token comment\">// __\"d\": {</span>\n<span class=\"token comment\">// ____\"e\": 4</span>\n<span class=\"token comment\">// __}</span>\n<span class=\"token comment\">// }</span></code></pre>\n<p>Ví dụ như ta có thể để lọc bỏ các dữ liệu nhạy cảm như password</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Jean-Luc Picard'</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token operator\">:</span> <span class=\"token string\">'stargazer'</span><span class=\"token punctuation\">,</span>\n  nested<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    hashedPassword<span class=\"token operator\">:</span> <span class=\"token string\">'c3RhcmdhemVy'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">replacer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\">password</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// '{\"name\":\"Jean-Luc Picard\",\"nested\":{}}'</span></code></pre>\n<h2 id=\"hàm-tojson\"><a href=\"#h%C3%A0m-tojson\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hàm <code class=\"language-text\">toJSON()</code></h2>\n<p>Khi đi qua các property trong object, nếu bên trong object có hàm <code class=\"language-text\">toJSON()</code>, <code class=\"language-text\">JSON.stringify</code> dùng giá trị trả về của hàm này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Jean-Luc Picard'</span><span class=\"token punctuation\">,</span>\n  nested<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    test<span class=\"token operator\">:</span> <span class=\"token string\">'not in output'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">toJSON</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token string\">'test'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// '{\"name\":\"Jean-Luc Picard\",\"nested\":\"test\"}'</span></code></pre>\n<p>Rất nhiều thư viện sử dụng <code class=\"language-text\">JSON.stringify()</code> kết hợp với <code class=\"language-text\">toJSON()</code> để đảm bảo output lúc serialize ra đúng như mong muốn (như <a href=\"https://momentjs.com/docs/#/displaying/as-json/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Moment JS</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript.html\">The 80/20 Guide to JSON.stringify in JavaScript</a></p>\n"}},{"node":{"title":"Một vài ứng dụng hay ho của reduce","path":"/mot-vai-ung-dung-hay-ho-cua-reduce/","date":"26. May 2019","timeToRead":5,"desc":"Hãy học sử dụng reduce, vượt qua những ví vụ căn bản bằng cộng, trừ, nhân, chia","content":"<p>Khi đọc tài liệu trên <a href=\"https://developer.mozilla.org/vi/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN về Array.prototype.reduce()</a> chúng ta sẽ có cái nhìn khá tổng quát về <code class=\"language-text\">.reduce()</code>, những ví dụ cộng, nhân số cơ bản để chúng ta dễ nắm cách hàm <code class=\"language-text\">.reduce()</code> chạy. Tuy nhiên vì nó quá căn bản, nên bạn sẽ không thể thấy hết được sự <strong>lợi hại</strong> của <code class=\"language-text\">.reduce()</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> sampleArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> sampleArray<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tổng:'</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ⦘ Tổng: 10</span>\n\n<span class=\"token keyword\">const</span> product <span class=\"token operator\">=</span> sampleArray<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span>multiply<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nhân lại bằng:'</span><span class=\"token punctuation\">,</span> product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ⦘ Nhân lại bằng: 24</span></code></pre>\n<p>Có thể nhiều người không để ý, biến tích lũy (accumulator = tham số đầu tiên) và giá trị hiện tại (tham số thứ 2) không nhất thiết phải giống nhau.</p>\n<p>Chúng ta có thể khai báo một hàm reducer như sau là hoàn toàn hợp lệ</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fizzBuzzReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element <span class=\"token operator\">%</span> <span class=\"token number\">15</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>acc<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">Fizz Buzz\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>acc<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">Fizz\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>acc<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">Buzz\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>acc<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>element<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span>fizzBuzzReducer<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Với bài viết này chúng ta cũng xem xét những ứng dụng khác, <strong>cao cấp</strong> hơn của <code class=\"language-text\">.reduce()</code>, sử dụng việc thay đổi <em>kiểu</em> của biến tích lũy như ví dụ trên, mở ra nhiều ứng dụng bảo đảm là <strong>hay</strong></p>\n<h2 id=\"chuyển-một-array-sang-object\"><a href=\"#chuy%E1%BB%83n-m%E1%BB%99t-array-sang-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chuyển một array sang object</h2>\n<p>Chúng ta có một array thế này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> peopleArr  <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        username<span class=\"token operator\">:</span>    <span class=\"token string\">'glestrade'</span><span class=\"token punctuation\">,</span>\n        displayname<span class=\"token operator\">:</span> <span class=\"token string\">'Inspector Lestrade'</span><span class=\"token punctuation\">,</span>\n        email<span class=\"token operator\">:</span>       <span class=\"token string\">'glestrade@met.police.uk'</span><span class=\"token punctuation\">,</span>\n        authHash<span class=\"token operator\">:</span>    <span class=\"token string\">'bdbf9920f42242defd9a7f76451f4f1d'</span><span class=\"token punctuation\">,</span>\n        lastSeen<span class=\"token operator\">:</span>    <span class=\"token string\">'2019-05-13T11:07:22+00:00'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        username<span class=\"token operator\">:</span>    <span class=\"token string\">'mholmes'</span><span class=\"token punctuation\">,</span>\n        displayname<span class=\"token operator\">:</span> <span class=\"token string\">'Mycroft Holmes'</span><span class=\"token punctuation\">,</span>\n        email<span class=\"token operator\">:</span>       <span class=\"token string\">'mholmes@gov.uk'</span><span class=\"token punctuation\">,</span>\n        authHash<span class=\"token operator\">:</span>    <span class=\"token string\">'b4d04ad5c4c6483cfea030ff4e7c70bc'</span><span class=\"token punctuation\">,</span>\n        lastSeen<span class=\"token operator\">:</span>    <span class=\"token string\">'2019-05-10T11:21:36+00:00'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        username<span class=\"token operator\">:</span>    <span class=\"token string\">'iadler'</span><span class=\"token punctuation\">,</span>\n        displayname<span class=\"token operator\">:</span> <span class=\"token string\">'Irene Adler'</span><span class=\"token punctuation\">,</span>\n        email<span class=\"token operator\">:</span>       <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        authHash<span class=\"token operator\">:</span>    <span class=\"token string\">'319d55944f13760af0a07bf24bd1de28'</span><span class=\"token punctuation\">,</span>\n        lastSeen<span class=\"token operator\">:</span>    <span class=\"token string\">'2019-05-17T11:12:12+00:00'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu cần chuyển nó qua dạng object, lấy giá trị <code class=\"language-text\">username</code> làm key</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">keyByUsernameReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>acc<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>person<span class=\"token punctuation\">.</span><span class=\"token property-access\">username</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> person <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> peopleObj <span class=\"token operator\">=</span> peopleArr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span>keyByUsernameReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ⦘ {</span>\n<span class=\"token comment\">//     \"glestrade\": {</span>\n<span class=\"token comment\">//         \"username\":    \"glestrade\",</span>\n<span class=\"token comment\">//         \"displayname\": \"Inspector Lestrade\",</span>\n<span class=\"token comment\">//         \"email\":       \"glestrade@met.police.uk\",</span>\n<span class=\"token comment\">//         \"authHash\":    \"bdbf9920f42242defd9a7f76451f4f1d\",</span>\n<span class=\"token comment\">//          \"lastSeen\":    \"2019-05-13T11:07:22+00:00\"</span>\n<span class=\"token comment\">//     },</span>\n<span class=\"token comment\">//     \"mholmes\": {</span>\n<span class=\"token comment\">//         \"username\":    \"mholmes\",</span>\n<span class=\"token comment\">//         \"displayname\": \"Mycroft Holmes\",</span>\n<span class=\"token comment\">//         \"email\":       \"mholmes@gov.uk\",</span>\n<span class=\"token comment\">//         \"authHash\":    \"b4d04ad5c4c6483cfea030ff4e7c70bc\",</span>\n<span class=\"token comment\">//          \"lastSeen\":    \"2019-05-10T11:21:36+00:00\"</span>\n<span class=\"token comment\">//     },</span>\n<span class=\"token comment\">//     \"iadler\":{</span>\n<span class=\"token comment\">//         \"username\":    \"iadler\",</span>\n<span class=\"token comment\">//         \"displayname\": \"Irene Adler\",</span>\n<span class=\"token comment\">//         \"email\":       null,</span>\n<span class=\"token comment\">//         \"authHash\":    \"319d55944f13760af0a07bf24bd1de28\",</span>\n<span class=\"token comment\">//          \"lastSeen\":    \"2019-05-17T11:12:12+00:00\"</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">// }</span></code></pre>\n<h2 id=\"chuyển-một-array-thành-một-array-khác\"><a href=\"#chuy%E1%BB%83n-m%E1%BB%99t-array-th%C3%A0nh-m%E1%BB%99t-array-kh%C3%A1c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chuyển một array thành một array khác</h2>\n<p>Bình thường khi nghĩ tới <code class=\"language-text\">.reduce()</code> chúng ta nghĩ tới viết lấy một mảng sau đó đưa nó về 1 giá trị bằng biến tích lũy, giá trị này hoàn toàn có thể là một array khác.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fileLines <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'Inspector Algar,Inspector Bardle,Mr. Barker,Inspector Barton'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Inspector Baynes,Inspector Bradstreet,Inspector Sam Brown'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Monsieur Dubugue,Birdy Edwards,Inspector Forbes,Inspector Forrester'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Inspector Gregory,Inspector Tobias Gregson,Inspector Hill'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Inspector Stanley Hopkins,Inspector Athelney Jones'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">splitLineReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> line</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\">,</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> investigators <span class=\"token operator\">=</span> fileLines<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span>splitLineReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [</span>\n<span class=\"token comment\">//   \"Inspector Algar\",</span>\n<span class=\"token comment\">//   \"Inspector Bardle\",</span>\n<span class=\"token comment\">//   \"Mr. Barker\",</span>\n<span class=\"token comment\">//   \"Inspector Barton\",</span>\n<span class=\"token comment\">//   \"Inspector Baynes\",</span>\n<span class=\"token comment\">//   \"Inspector Bradstreet\",</span>\n<span class=\"token comment\">//   \"Inspector Sam Brown\",</span>\n<span class=\"token comment\">//   \"Monsieur Dubugue\",</span>\n<span class=\"token comment\">//   \"Birdy Edwards\",</span>\n<span class=\"token comment\">//   \"Inspector Forbes\",</span>\n<span class=\"token comment\">//   \"Inspector Forrester\",</span>\n<span class=\"token comment\">//   \"Inspector Gregory\",</span>\n<span class=\"token comment\">//   \"Inspector Tobias Gregson\",</span>\n<span class=\"token comment\">//   \"Inspector Hill\",</span>\n<span class=\"token comment\">//   \"Inspector Stanley Hopkins\",</span>\n<span class=\"token comment\">//   \"Inspector Athelney Jones\"</span>\n<span class=\"token comment\">// ]</span></code></pre>\n<p>Tất nhiên trong điều kiện có thể sử dụng <code class=\"language-text\">.flatMap()</code> (  không hỗ trợ trên edge và IE) thì nên dùng <code class=\"language-text\">.flatMap()</code> thay cho reduce</p>\n<h2 id=\"thực-hiện-2-tính-toán-cùng-lúc\"><a href=\"#th%E1%BB%B1c-hi%E1%BB%87n-2-t%C3%ADnh-to%C3%A1n-c%C3%B9ng-l%C3%BAc\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thực hiện 2 tính toán cùng lúc</h2>\n<p>Nếu cần thực hiện 2 tính toán dựa trên 1 array, ví dụ lấy giá trị nhỏ nhất và lớn nhất trong dãy số</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> readings <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> maxReading <span class=\"token operator\">=</span> readings<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">max</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> minReading <span class=\"token operator\">=</span> readings<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">min</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code class=\"language-text\">.reduce</code> không chỉ có thể trả về number, nó có thể trả về bất cứ kiểu gì, chúng ta có thể đưa 2 giá trị này vào một object</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">minMaxReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> reading</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        minReading<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Match</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">min</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">.</span><span class=\"token property-access\">minReading</span><span class=\"token punctuation\">,</span> reading<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        maxReading<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Match</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">max</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">.</span><span class=\"token property-access\">maxReading</span><span class=\"token punctuation\">,</span> reading<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> initMinMax <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    minReading<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">,</span>\n    maxReading<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_VALUE</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> minMax <span class=\"token operator\">=</span> readings<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span>minMaxReducer<span class=\"token punctuation\">,</span> initMinMax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Vấn đề duy nhất của cách thứ 2 này là performance không tốt.</p>\n<h2 id=\"kết-hợp-map-và-filter-cùng-lúc\"><a href=\"#k%E1%BA%BFt-h%E1%BB%A3p-map-v%C3%A0-filter-c%C3%B9ng-l%C3%BAc\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết hợp map và filter cùng lúc</h2>\n<p>Lấy lại ví dụ với mảng <code class=\"language-text\">peopleArr</code> ở trên, chúng ta lấy người vừa đăng nhập sau cùng, không tính các user không có email. Cách thứ nhất để làm là tách ra làm 3 bước</p>\n<ul>\n<li>Lọc hết các user không có email</li>\n<li>Lấy giá trị <code class=\"language-text\">lastSeen</code></li>\n<li>Tìm giá trị lớn nhất</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">notEmptyEmail</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token property-access\">email</span> <span class=\"token operator\">!==</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token property-access\">email</span> <span class=\"token operator\">!==</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getLastSeen</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span><span class=\"token property-access\">lastSeen</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greater</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> peopleWithEmail <span class=\"token operator\">=</span> peopleArr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span>notEmptyEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> lastSeenDates   <span class=\"token operator\">=</span> peopleWithEmail<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span>getLastSeen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mostRecent      <span class=\"token operator\">=</span> lastSeenDates<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span>greater<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Một cách khác để làm với <code class=\"language-text\">reduce</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">notEmptyEmail</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token property-access\">email</span> <span class=\"token operator\">!==</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token property-access\">email</span> <span class=\"token operator\">!==</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">greater</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">notEmptyMostRecent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentRecent<span class=\"token punctuation\">,</span> person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">notEmptyEmail</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">greater</span><span class=\"token punctuation\">(</span>currentRecent<span class=\"token punctuation\">,</span> person<span class=\"token punctuation\">.</span><span class=\"token property-access\">lastSeen</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> currentRecent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> mostRecent <span class=\"token operator\">=</span> peopleArr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span>notEmptyMostRecent<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"chạy-các-phương-thức-async-theo-hàng-đợi\"><a href=\"#ch%E1%BA%A1y-c%C3%A1c-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-async-theo-h%C3%A0ng-%C4%91%E1%BB%A3i\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chạy các phương thức async theo hàng đợi</h2>\n<p>Rất hữu ích khi cần giới hạn số lượng request API, hoặc lấy kết quả của một Promise truyền cho thằng kế tiếp. Ví dụ lấy message cho tất cả user trong mảng <code class=\"language-text\">peopleArr</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fetchMessages</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">username</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://example.com/api/messages/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>username<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token arrow operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span><span class=\"token property-access\">username</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">chainedFetchMessages</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> username</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// p là một promise</span>\n    <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchMessages</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>username<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> msgObj <span class=\"token operator\">=</span> peopleArr\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span>getUsername<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span>chainedFetchMessages<span class=\"token punctuation\">,</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">log</span><span class=\"token punctuation\">)</span></code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jrsinclair.com/articles/2019/functional-js-do-more-with-reduce/\">FUNCTIONAL JAVASCRIPT: HOW TO USE ARRAY REDUCE FOR MORE THAN JUST NUMBERS\n</a></p>\n"}},{"node":{"title":"Giới thiệu về window.requestAnimationFrame","path":"/gioi-thieu-ve-window-request-animation-frame/","date":"24. May 2019","timeToRead":1,"desc":"","content":"<p>Khi muốn thực hiện một vòng lặp thời gian trong javascript, chúng ta nghĩ ngay đến <code class=\"language-text\">setInterval()</code>. Tuy nhiên khi mục đích của chúng ta là làm animation, để thực hiện animation mượt mà, chúng ta cần vòng lặp 60 frame/1 giây, như thế này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// chay animation ở đây</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token operator\">/</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Tuy nhiên chúng ta có một cách tốt hơn cách trên, dùng <code class=\"language-text\">window.requestAnimationFrame()</code></p>\n<p>Tại sao nó tốt hơn</p>\n<ul>\n<li>Trình duyệt có thể optimize nó để animation thiệt mượt mà</li>\n<li>Những animation nào đang chạy sẽ dừng lại khi tab đó ko còn active\n<code class=\"language-text\">window.requestAnimationFrame()</code> sẽ yêu cầu trình duyệt thực hiện một animation và chạy một function trước khi <strong>repaint</strong></li>\n</ul>\n<p>Ví dụ đơn giản nhất</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">repeatOften</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// thực hiện animation nào đó</span>\n  <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>repeatOften<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>repeatOften<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Gọi phương thức này khi chúng ta đã sẵn sàng thực hiện animation. Hàm thực thi animation sẽ được gọi trước khi trình duyệt repaint. Khi đang nằm ở tab không active của trình duyệt, nó sẽ bị pause lại (hoặc trong thẻ <code class=\"language-text\">iframe</code>) để tiết kiệm pin</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> start <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> element <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span>‘SomeElementYouWantToAnimate’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">step</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">timestamp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>start<span class=\"token punctuation\">)</span> start <span class=\"token operator\">=</span> timestamp<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> progress <span class=\"token operator\">=</span> timestamp <span class=\"token operator\">-</span> start<span class=\"token punctuation\">;</span>\n  element<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">transform</span> <span class=\"token operator\">=</span> <span class=\"token string\">'translateX('</span> <span class=\"token operator\">+</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">min</span><span class=\"token punctuation\">(</span>progress <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'px)'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>progress <span class=\"token operator\">&lt;</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code class=\"language-text\">window.requestAnimationFrame()</code> trả về một <strong>ID</strong>, chúng ta có thể cancel nó như với <code class=\"language-text\">setTimeout</code> và <code class=\"language-text\">setInterval</code> bằng <code class=\"language-text\">window.cancelAnimationFrame(truyền vào id)</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> animateID <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>repeatOften<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">cancelAnimationFrame</span><span class=\"token punctuation\">(</span>animateID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Tài liệu và ví dụ tham khảo</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://css-tricks.com/using-requestanimationframe/\">Using requestAnimationFrame</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\">window​.request​Animation​Frame()\n</a></p>\n"}},{"node":{"title":"Hướng dẫn handle event listener căn bản cho các bạn mới bắt đầu với javascript","path":"/huong-dan-handle-event-listener-can-ban-cho-cac-ban-moi-bat-dau-voi-javascript/","date":"14. May 2019","timeToRead":4,"desc":"Căn bản nhưng cần thiết","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-event-object\">Sử dụng Event Object</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-bubbling\">Sử dụng bubbling</a></li>\n<li><a href=\"#s%E1%BB%B1-ki%E1%BB%87n-click\">Sự kiện Click</a></li>\n<li><a href=\"#m%E1%BB%99t-s%E1%BB%91-v%C3%AD-d%E1%BB%A5-kh%C3%A1c\">Một số ví dụ khác</a></li>\n</ul>\n<!-- /TOC -->\n<p>Bắt đầu với một ví dụ đơn giản: một <code class=\"language-text\">&lt;div/&gt;</code> để user có thể kéo thả vào, chúng ta hiển thị user đã kéo thả vào nào</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">draggable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>R<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>yellow<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">draggable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Y<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>green<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">draggable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>G<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dragged<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Drag a box<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Chúng ta sẽ gắn listener lên từng element</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#red'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dragstart'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#dragged'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Dragged red'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#yellow'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dragstart'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#dragged'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Dragged yellow'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#green'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dragstart'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#dragged'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Dragged green'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Tất cả các listener trên đều thực hiện một thao tác giống nhau: đổi text. Chúng ta có thể gộp nó lại vào 1 function</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">preview</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#dragged'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Dragged </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token dom variable\">document</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#red'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dragstart'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">preview</span><span class=\"token punctuation\">(</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token dom variable\">document</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#yellow'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dragstart'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">preview</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yellow'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token dom variable\">document</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#green'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dragstart'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">preview</span><span class=\"token punctuation\">(</span><span class=\"token string\">'green'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Gọn hơn, nhưng vẫn cần nhiều function khác nhau cho các element khác nhau</p>\n<h2 id=\"sử-dụng-event-object\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-event-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Event Object</h2>\n<p>Khi một listener được gọi, nó cũng sẽ nhận được một <code class=\"language-text\">Event</code> Object, object nếu chứa một số thông tin như thời gian xảy ra sự kiện, đối tượng gây ra sự kiện</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">preview</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">currentTarget</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">;</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#dragged'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Dragged </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#red'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dragstart'</span><span class=\"token punctuation\">,</span> preview<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#yellow'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dragstart'</span><span class=\"token punctuation\">,</span> preview<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#green'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dragstart'</span><span class=\"token punctuation\">,</span> preview<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"sử-dụng-bubbling\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-bubbling\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng bubbling</h2>\n<p>Để giảm số dòng code chúng ta viết ra, thay vì chúng ta gắn các event listener lên từng .box, chúng ta chỉ gắn 1 listener lên <code class=\"language-text\">section</code> chứa tất cả box</p>\n<p>Khi một sự kiện xảy ra trên element, nó ko dừng lại tại element đó, trình duyệt sẽ đi qua tất cả các element cha của nó, gọi tất cả các listener cho đến khi nó đi tới thẻ <code class=\"language-text\">body</code>. Quá trình này được gọi là <code class=\"language-text\">bubbling</code></p>\n<p>Bên trong <code class=\"language-text\">evt.target</code> sẽ chứa element bắn ra sự kiện, chứ không phải element được gắn listener là <code class=\"language-text\">section</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">preview</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">;</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#dragged'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Dragged </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'section'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dragstart'</span><span class=\"token punctuation\">,</span> preview<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"sự-kiện-click\"><a href=\"#s%E1%BB%B1-ki%E1%BB%87n-click\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sự kiện Click</h2>\n<p><code class=\"language-text\">evt.target</code> chạy tốt với các sự kiện <code class=\"language-text\">change</code> và <code class=\"language-text\">dragstart</code> vì chỉ có một số lượng rất ít các element có thể nhận focus và giá trị input bị thay đổi tại một thời điểm chỉ có một</p>\n<p>Với sự kiện <code class=\"language-text\">click</code> thì có khác một chút xíu</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">draggable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>R<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>yellow<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">draggable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Y<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>green<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">draggable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>G<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clicked<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Clicked a box<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">preview</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">;</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#clicked'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'section'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> preview<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu chúng ta click vào vùng của <code class=\"language-text\">span</code>, sự kiện vẫn được bắn ra, tuy nhiên nó không chứa <code class=\"language-text\">id</code> nên <code class=\"language-text\">evt.target.id</code> ngủm, đó là lý do tại sao có khi đoạn code trên có khi chạy đúng, có khi sai</p>\n<p>Để lấy được element cha gần nhất, chúng ta dùng <code class=\"language-text\">element.closest()</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">preview</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">closest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div[draggable]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element <span class=\"token operator\">!=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">;</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#clicked'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"một-số-ví-dụ-khác\"><a href=\"#m%E1%BB%99t-s%E1%BB%91-v%C3%AD-d%E1%BB%A5-kh%C3%A1c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một số ví dụ khác</h2>\n<p>Khi có một list các item, các item có thể thêm bớt số lượng tuỳ thích, chúng ta sẽ không gắn listener vào từng item một</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>buttons-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>add<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Add new button<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Tiếp tục sử dụng bubbling, chúng ta chỉ gắn một listener cho container</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> buttonCounter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#buttons-container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newButton <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  newButton<span class=\"token punctuation\">.</span><span class=\"token property-access\">dataset</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">number</span> <span class=\"token operator\">=</span> buttonCounter<span class=\"token punctuation\">;</span>\n  buttonCounter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n  container<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">appendChild</span><span class=\"token punctuation\">(</span>newButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// gắn listener cho container, thay vì trên từng button</span>\ncontainer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> clickedButton <span class=\"token operator\">=</span> evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">closest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clickedButton <span class=\"token operator\">!=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// log gía trị khi click</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#clicked'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Clicked button #</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>clickedButton<span class=\"token punctuation\">.</span><span class=\"token property-access\">dataset</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">number</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Form có rất nhiều input và chúng ta muốn lấy tất cả dữ liệu user nhập vào, nhét trong một object</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>Name: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>Email: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>Password: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preview<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> responses <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'form'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  responses<span class=\"token punctuation\">[</span>evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">;</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#preview'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span> <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>responses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://css-tricks.com/the-thinking-behind-simplifying-event-handlers/\">The Thinking Behind Simplifying Event Handlers</a></p>\n"}},{"node":{"title":"7 thủ thuật trong javascript","path":"/7-thu-thuat-trong-javascript/","date":"12. May 2019","timeToRead":2,"desc":"7 thủ thuật hữu ích trong javascript","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#l%E1%BA%A5y-t%E1%BA%A5t-c%E1%BA%A3-gi%C3%A1-tr%E1%BB%8B-kh%C3%B4ng-gi%E1%BB%91ng-nhau-trong-array\">Lấy tất cả giá trị không giống nhau trong array</a></li>\n<li><a href=\"#b%E1%BB%8F-qua-t%E1%BA%A5t-c%E1%BA%A3-gi%C3%A1-tr%E1%BB%8B-falsy\">Bỏ qua tất cả giá trị falsy</a></li>\n<li><a href=\"#t%E1%BA%A1o-m%E1%BB%99t-object-r%E1%BB%97ng\">Tạo một object rỗng</a></li>\n<li><a href=\"#merge-object\">Merge object</a></li>\n<li><a href=\"#y%C3%AAu-c%E1%BA%A7u-parameter-cho-function\">Yêu cầu parameter cho function</a></li>\n<li><a href=\"#destructuring-v%C3%A0-alias\">Destructuring và alias</a></li>\n<li><a href=\"#l%E1%BA%A5y-gi%C3%A1-tr%E1%BB%8B-query-string\">Lấy giá trị query string</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"lấy-tất-cả-giá-trị-không-giống-nhau-trong-array\"><a href=\"#l%E1%BA%A5y-t%E1%BA%A5t-c%E1%BA%A3-gi%C3%A1-tr%E1%BB%8B-kh%C3%B4ng-gi%E1%BB%91ng-nhau-trong-array\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lấy tất cả giá trị không giống nhau trong array</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// 1,2,3</span></code></pre>\n<h2 id=\"bỏ-qua-tất-cả-giá-trị-falsy\"><a href=\"#b%E1%BB%8F-qua-t%E1%BA%A5t-c%E1%BA%A3-gi%C3%A1-tr%E1%BB%8B-falsy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bỏ qua tất cả giá trị falsy</h2>\n<p>Khi cần bỏ quá các giá trị falsy (<code class=\"language-text\">0</code>, <code class=\"language-text\">undefined</code>, <code class=\"language-text\">null</code>, <code class=\"language-text\">false</code>, ... ) khỏi một array</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token maybe-class-name\">MyArray</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Đơn giản là đưa vào <code class=\"language-text\">Boolean</code> cho hàm filter</p>\n<h2 id=\"tạo-một-object-rỗng\"><a href=\"#t%E1%BA%A1o-m%E1%BB%99t-object-r%E1%BB%97ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tạo một object rỗng</h2>\n<p>Tất nhiên chúng ta tạo một object rỗng bằng <code class=\"language-text\">{}</code> là chuyện ai cũng biết. Chuyện ít ai biết là với cách đó object tạo ra vẫn chứa <code class=\"language-text\">__proto__</code> và phương thức <code class=\"language-text\">hasOwnProperty</code>. Để thực sự tạo một object rỗng đúng chất rỗng</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> dict <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// dict.__proto__ === \"undefined\"</span></code></pre>\n<h2 id=\"merge-object\"><a href=\"#merge-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Merge object</h2>\n<p>Một trong những công việc bạn sẽ làm hàng ngày như ăn cơm bửa, có nhiều bài viết mình đã nhắc đến, nhưng nhắc lại vẫn là ko thừa.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'David Walsh'</span><span class=\"token punctuation\">,</span> gender<span class=\"token operator\">:</span> <span class=\"token string\">'Male'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> tools <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> computer<span class=\"token operator\">:</span> <span class=\"token string\">'Mac'</span><span class=\"token punctuation\">,</span> editor<span class=\"token operator\">:</span> <span class=\"token string\">'Atom'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> attributes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> handsomeness<span class=\"token operator\">:</span> <span class=\"token string\">'Extreme'</span><span class=\"token punctuation\">,</span> hair<span class=\"token operator\">:</span> <span class=\"token string\">'Brown'</span><span class=\"token punctuation\">,</span> eyes<span class=\"token operator\">:</span> <span class=\"token string\">'Blue'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> summary <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span>person<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>tools<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>attributes<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\nObject {\n  \"computer\": \"Mac\",\n  \"editor\": \"Atom\",\n  \"eyes\": \"Blue\",\n  \"gender\": \"Male\",\n  \"hair\": \"Brown\",\n  \"handsomeness\": \"Extreme\",\n  \"name\": \"David Walsh\",\n}\n*/</span></code></pre>\n<h2 id=\"yêu-cầu-parameter-cho-function\"><a href=\"#y%C3%AAu-c%E1%BA%A7u-parameter-cho-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Yêu cầu parameter cho function</h2>\n<p>Bạn đã biết dùng parameter mặc định cho function nếu ko truyền vào, vậy ngược lại, bắt buộc cung cấp một parameter nào đó thì sao?</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isRequired</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'param is required'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name <span class=\"token operator\">=</span> <span class=\"token function\">isRequired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Lỗi ngay</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Lỗi luôn</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// OK</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'David'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"destructuring-và-alias\"><a href=\"#destructuring-v%C3%A0-alias\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Destructuring và alias</h2>\n<p>Đây cũng chẳng có gì lạ nếu bạn đã nắm destructuring, chúng ta có thể đặt một tên khác để sử dụng</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// cách bình thường</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> x <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// dùng tên khác obj.x thành otherName</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> otherName <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span></code></pre>\n<p>Hay sử dụng cách nào khi bị trùng tên biến</p>\n<h2 id=\"lấy-giá-trị-query-string\"><a href=\"#l%E1%BA%A5y-gi%C3%A1-tr%E1%BB%8B-query-string\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lấy giá trị query string</h2>\n<p>Trước đây chúng ta có thể sử dụng regular expression để lấy query string, giờ chúng ta có cách chính thức thông qua hàm <code class=\"language-text\">URLSearchParams</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// query string \"?post=1234&amp;action=edit\"</span>\n\n<span class=\"token keyword\">var</span> urlParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">location</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">search</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>urlParams<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>urlParams<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'action'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// edit</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>urlParams<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'action'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"edit\"]</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>urlParams<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"?post=1234&amp;action=edit\" </span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>urlParams<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"?post=1234&amp;action=edit&amp;active=1\"</span></code></pre>\n<p>Nếu bạn còn trick nào hay ho khác, có thể chia sẽ cùng mọi người?</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://davidwalsh.name/javascript-tricks\">7 Useful JavaScript Tricks</a></p>\n"}},{"node":{"title":"Kiểm tra element có nằm trong viewport không bằng javascript","path":"/kiem-tra-element-co-nam-trong-viewport-khong-bang-javascript/","date":"7. May 2019","timeToRead":2,"desc":"Học cách viết một helper function để kiểm tra element nằm trong viewport","content":"<p>\"Nằm trong viewport\" nghĩa là nó đang hiển thị bên trong phần <strong>nhìn thấy được</strong> của trình duyệt, function này cần thiết khi chúng ta cần tới lazy loading, hiệu ứng này kia.</p>\n<p>Phần quan trọng nhất của function này là dùng <code class=\"language-text\">Element.getBoundingClientRect()</code>, nó cho chúng ta giá trị position của element so với viewport. Nó trả về một object chứa <code class=\"language-text\">height</code>, <code class=\"language-text\">width</code>, khoảng cách đến <code class=\"language-text\">top</code>, <code class=\"language-text\">right</code>, <code class=\"language-text\">bottom</code>, <code class=\"language-text\">left</code> với viewport</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// chọn element</span>\n<span class=\"token keyword\">var</span> h1 <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// lấy position của element trên</span>\n<span class=\"token keyword\">var</span> bounding <span class=\"token operator\">=</span> h1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>bounding<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//  height: 118,</span>\n<span class=\"token comment\">//  width: 591.359375,</span>\n<span class=\"token comment\">//  top: 137,</span>\n<span class=\"token comment\">//  bottom: 255,</span>\n<span class=\"token comment\">//  left: 40.3125,</span>\n<span class=\"token comment\">//  right: 631.671875</span>\n<span class=\"token comment\">// }</span></code></pre>\n<p>Nếu một element nằm trong viewport được xác định như sau</p>\n<ul>\n<li><code class=\"language-text\">top</code>, <code class=\"language-text\">left</code> >= 0</li>\n<li><code class=\"language-text\">right</code> &#x3C;= độ rộng của viewport</li>\n<li><code class=\"language-text\">bottom</code> &#x3C;= độ cao của viewport</li>\n</ul>\n<p>Để check độ rộng của viewport, chúng ta có 2 cách, một số trình duyệt hỗ trợ <code class=\"language-text\">window.innerWidth</code>, một số khác hỗ trợ <code class=\"language-text\">document.documentElement.clientWidth</code>, số còn lại thì support cả 2. Rắc rối nhở!</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">innerWidth</span> <span class=\"token operator\">||</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">documentElement</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">clientWidth</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Cũng tương tự với giá trị viewport height</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHeight</span> <span class=\"token operator\">||</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">documentElement</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">clientHeight</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Chúng ta kiểm tra xem element có nằm trong viewport không</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    bounding<span class=\"token punctuation\">.</span><span class=\"token property-access\">top</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\n    bounding<span class=\"token punctuation\">.</span><span class=\"token property-access\">left</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\n    bounding<span class=\"token punctuation\">.</span><span class=\"token property-access\">right</span> <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">innerWidth</span> <span class=\"token operator\">||</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">documentElement</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">clientWidth</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n    bounding<span class=\"token punctuation\">.</span><span class=\"token property-access\">bottom</span> <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHeight</span> <span class=\"token operator\">||</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">documentElement</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">clientHeight</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Trong viewport!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Không nằm trong viewport... whoa la la'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta gom lại vào một function helper để dành xài</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">isInViewport</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> bounding <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        bounding<span class=\"token punctuation\">.</span><span class=\"token property-access\">top</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\n        bounding<span class=\"token punctuation\">.</span><span class=\"token property-access\">left</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\n        bounding<span class=\"token punctuation\">.</span><span class=\"token property-access\">bottom</span> <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHeight</span> <span class=\"token operator\">||</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">documentElement</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">clientHeight</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n        bounding<span class=\"token punctuation\">.</span><span class=\"token property-access\">right</span> <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">innerWidth</span> <span class=\"token operator\">||</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">documentElement</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">clientWidth</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Sử dụng function này, chúng ta có thể làm lazy load image</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>figure</span> <span class=\"token attr-name\">data-image</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url/to/my/image.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hình sẽ được load khi scroll tới đây..<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>figure</span><span class=\"token punctuation\">></span></span></code></pre>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> image <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-image]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isInViewport</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        image<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHTML</span> <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;img src=\"'</span> <span class=\"token operator\">+</span> image<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-image'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\">'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://gomakethings.com/how-to-test-if-an-element-is-in-the-viewport-with-vanilla-javascript/\">How to test if an element is in the viewport with vanilla JavaScript</a></p>\n"}},{"node":{"title":"Sử dụng try...catch đúng cách","path":"/su-dung-try-catch-dung-cach/","date":"1. May 2019","timeToRead":3,"desc":"Nhìn lại một cách cặn kẽ hơn cách chúng ta xử lý trường hợp lỗi trong javascript","content":"<p>Tình huống khi bạn biết chắc nó sẽ có lỗi, nhưng là một lỗi có thể chấp nhận và bỏ qua, bạn sẽ viết nó thế này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> defaultConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> customConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  customConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'custom.config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// không có custom config thì cũng ok mà.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>defaultConfig<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>customConfig <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu có <code class=\"language-text\">custom.config</code> file, chúng ta load nó, nếu ko thì cũng chẳng sao, chúng ta dùng giá trị mặc định.</p>\n<p>Vậy đâu là vấn đề khi chúng ta sử dụng <code class=\"language-text\">catch</code> mà ko làm gì cả. Vấn đề là chúng ta catch <strong>toàn bộ</strong> error mặc dù chúng ta không hề biết là có một error nào khác có thể xuất hiện trong <code class=\"language-text\">try</code> hay ko</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// custom.config.js</span>\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: Assignment to constant variable.</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu file <code class=\"language-text\">custom.config</code> của chúng ta mắc lỗi <code class=\"language-text\">TypeError: Assignment to constant variable</code> như trên, đoạn code load config sẽ vẫn chạy với default config như đã biết, vì nó bỏ qua luôn khi có lỗi trong file <code class=\"language-text\">custom.config.js</code>. </p>\n<pre class=\"language-diff\"><code class=\"language-diff\">const defaultConfig = { foo: 'bar' };\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">let customConfig = {};\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">try {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  customConfig = require(path.resolve(process.cwd(), 'custom.config'));\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">} catch (error) {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> // không có custom config thì cũng ok mà.\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">  if (error.code !== 'MODULE_NOT_FOUND') throw error;\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">}\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">const config = { ...defaultConfig, ...customConfig };</span></span></code></pre>\n<p>Kiểm tra <code class=\"language-text\">error.code</code> để đảm bảo chỉ bỏ qua các lỗi mà chúng ta thật sự không quan tâm, tình huống này là <code class=\"language-text\">MODULE_NOT_FOUND</code>, và <code class=\"language-text\">throw</code> một error cho các trường hợp khác.</p>\n<p>Có thể phân error ra làm 2 loại: <strong>operational error</strong> và <strong>programmer error</strong>. Operational error là các lỗi từ bên ngoài chương trình chúng ta viết, code chúng ta vẫn chạy, nhưng lỗi chúng ta ko kiểm soát được như gọi API bị fail. Programmer error là kiểu lỗi do chúng ta gây ra bên trong source, đọc <a href=\"https://www.joyent.com/node-js/production/design/errors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bài này để hiểu chi tiết hơn</a></p>\n<p>Với kiểu operational error, chúng ta có những cách tiếp cận sau</p>\n<ul>\n<li>catch lại error và thực hiện lại thao tác đó lần nữa</li>\n<li>catch error mà ko làm gì cả, hoặc hiển thị một thông báo đến user</li>\n<li>Ko catch luôn, hoặc throw một custom error</li>\n</ul>\n<p>Với lỗi với network request, chúng ta có thể dựa vào <code class=\"language-text\">error.code</code> trả về để lựa chọn thao tác tiếp theo muốn thực hiện.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// notifications.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> fetchNew <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./notification-service'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notifications <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\">Network Error</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token maybe-class-name\">Sentry</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">withScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">scope</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      scope<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setLevel</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Sentry</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Severity</span></span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Info</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token maybe-class-name\">Sentry</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">captureException</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Ở ví dụ trên, chúng ta ko thông báo gì cả cho user mà log lại lỗi đó trong <a href=\"https://sentry.io/welcome/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sentry</a> (Sẵn tiện giới thiệu luôn, Sentry là một tool để lưu lại các lỗi nếu có xảy ra trên app, khá hữu ích nhé)</p>\n<p>Nếu chúng ta có file <code class=\"language-text\">article-service.js</code> chứa function thực hiện request API, rải rác ở nhiều nơi khác trong source, sử dụng function này của <code class=\"language-text\">article-service.js</code>, chúng ta sẽ ko đặt catch error ở trong <code class=\"language-text\">article-service.js</code> mà đặt ở nơi đang sử dụng</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// article-service.js</span>\n<span class=\"token keyword module\">import</span> api <span class=\"token keyword module\">from</span> <span class=\"token string\">'./api'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> api<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> filter<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'article'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// article-listing.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> list <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./article-service'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> articles <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">renderArticles</span><span class=\"token punctuation\">(</span>articles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token maybe-class-name\">Sentry</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">withScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">scope</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    scope<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setLevel</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Sentry</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Severity</span></span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Warning</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token maybe-class-name\">Sentry</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">captureException</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// hiển thị thông báo</span>\n  <span class=\"token comment\">// để user biết có lỗi chứ</span>\n  <span class=\"token function\">renderError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Tóm lại, một điều quan trọng nhất cần nhớ sau bài này là <strong>đừng bao giờ dùng try...catch mà bỏ trống phần catch</strong></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://markus.oberlehner.net/blog/try-catch-the-right-way/\">try...catch: The Right Way</a></p>\n"}},{"node":{"title":"Vấn đề khi dùng array.forEach với async/await","path":"/van-de-khi-dung-array-for-each-voi-async-await/","date":"18. April 2019","timeToRead":2,"desc":"Khi chúng ta sử dụng async/await bên trong vòng lặp array.forEach không cho kết quả đúng như mong muốn và cách giải quyết","content":"<blockquote>\n<p><code class=\"language-text\">async</code>/<code class=\"language-text\">await</code> không hoạt động như chúng ta nghĩ, bên trong vòng lặp <code class=\"language-text\">Array.prototype.forEach</code></p>\n</blockquote>\n<p>Ví dụ để thấy kết quả nếu dùng bên trong <code class=\"language-text\">forEach</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> urls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'https://jsonplaceholder.typicode.com/todos/1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'https://jsonplaceholder.typicode.com/todos/2'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'https://jsonplaceholder.typicode.com/todos/3'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> urls<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> idx</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">const</span> todo <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Received Todo </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>idx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Finished!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">getTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Kết quả nhận được không phải theo thứ tự 1,2,3, mà là một <em>thứ tự không có thứ tự</em></p>\n<pre class=\"language-json\"><code class=\"language-json\">Finished!\nReceived Todo <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ··· <span class=\"token punctuation\">}</span>\nReceived Todo <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ··· <span class=\"token punctuation\">}</span>\nReceived Todo <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> Response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ··· <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>Vấn đề 1: đoạn <em>Finished!</em> được log ra trước, mặc dù chúng ta đã đặt <code class=\"language-text\">await</code> trước <code class=\"language-text\">urls.forEach</code>. Chúng ta ko ép nó <code class=\"language-text\">await</code> cả vòng lặp <code class=\"language-text\">forEach</code> được</li>\n<li>Vấn đề 2: mỗi lần chạy <code class=\"language-text\">fetch</code>, nó cũng ko <code class=\"language-text\">await</code> cho tới khi xong mới chạy tiếp thằng thứ 2, vòng lặp sẽ vẫn chạy bình thường như ko hề có <code class=\"language-text\">await</code> </li>\n</ul>\n<blockquote>\n<p>Tóm lại, ko dùng <code class=\"language-text\">forEach</code> chung với <code class=\"language-text\">async</code>/<code class=\"language-text\">await</code></p>\n</blockquote>\n<p>Để giải quyết vấn đề với <em>Finished!</em>, dùng <code class=\"language-text\">Promise.all</code>, chúng ta có thể sử dụng <code class=\"language-text\">Promise.all</code> để <code class=\"language-text\">await</code> toàn bộ request</p>\n<p>Sửa lại hàm <code class=\"language-text\">getTodos</code> ở trên </p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> promises <span class=\"token operator\">=</span> urls<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> idx</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> \n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Received Todo </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>idx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">all</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Finished!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Kết quả</p>\n<pre class=\"language-json\"><code class=\"language-json\">Received Todo <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ··· <span class=\"token punctuation\">}</span>\nReceived Todo <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ··· <span class=\"token punctuation\">}</span>\nReceived Todo <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> Response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ··· <span class=\"token punctuation\">}</span>\nFinished!</code></pre>\n<p>Một điểm cần lưu ý là <code class=\"language-text\">Promise.all</code> sẽ cho tất cả xuất phát cùng lúc, nó sẽ ko đợi thằng này xong tới thằng kia, trong hầu hết các trường hợp thì ko vấn đề, thực ra lại tối ưu hiệu năng. Nhưng khi chúng ta cần chạy theo một thứ tự nhất định, ko thể dùng <code class=\"language-text\">Promise.all</code>. Đoạn code trên là đúng là <code class=\"language-text\">Received Todo 1,2,3</code> theo đúng thứ tự, nhưng đó là do <strong>hên</strong>, không đúng trong mọi trường hợp</p>\n<p>Để giải quyết triệt để, chúng ta dùng <code class=\"language-text\">for...of</code>, nó sẽ đợi thằng <code class=\"language-text\">await</code> trước đó chạy xong trước khi chạy tiếp</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> urls<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> todo <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Received Todo </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>idx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Finished!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu chúng ta ko cần tới index, viết gọn hơn như thế này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> url <span class=\"token keyword\">of</span> urls<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> ··· <span class=\"token punctuation\">}</span></code></pre>\n<p>Kết quả</p>\n<pre class=\"language-json\"><code class=\"language-json\">Received Todo <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ··· <span class=\"token punctuation\">}</span>\nReceived Todo <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ··· <span class=\"token punctuation\">}</span>\nReceived Todo <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> Response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ··· <span class=\"token punctuation\">}</span>\nFinished!</code></pre>\n<p>Cái giá phải trả khi sử dụng <code class=\"language-text\">for...of</code> là nó rất chậm, hiệu năng thấp nhất trong các vòng lặp của array.</p>\n<p>Bạn có thể sử dụng vòng lặp <code class=\"language-text\">for</code> căn bản nhất để vừa đạt kết quả vừa đạt hiệu năng tốt nhất.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.com/dailyjs/the-pitfalls-of-async-await-in-array-loops-cf9cf713bfeb\">The Pitfalls of Async/Await in Array Loops\n</a></p>\n"}},{"node":{"title":"Tìm hiểu về Time Zone","path":"/tim-hieu-ve-time-zone/","date":"12. April 2019","timeToRead":4,"desc":"Cùng luận bàn những vấn đề liên quan đến time zone","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#gmt-utc-v%C3%A0-offset\">GMT, UTC và Offset</a></li>\n<li>\n<p><a href=\"#time-zone--offset\">Time zone !== offset</a></p>\n<ul>\n<li><a href=\"#summer-time-dst\">Summer time (DST)</a></li>\n<li><a href=\"#time-zone-vui-vui-n%C3%B3-l%E1%BA%A1i-%C4%91%E1%BB%95i\">Time zone vui vui nó lại đổi</a></li>\n</ul>\n</li>\n<li><a href=\"#time-zone-trong-m%C3%B4i-tr%C6%B0%E1%BB%9Dng-server-client\">Time zone trong môi trường Server-Client</a></li>\n<li><a href=\"#%C4%91%E1%BB%91i-t%C6%B0%E1%BB%A3ng-date-trong-javascript\">Đối tượng Date trong javascript</a></li>\n</ul>\n<!-- /TOC -->\n<p>Như Việt Nam chúng ta thì giá trị time zone chỉ có một <em>GMT+7</em>, với những nước to bự như Mỹ, Canada, Nga thì có phải tới vài ba cái time zone trong cùng một nước ( ko hiểu sao Trung Quốc thì chỉ có 1 giá trị Time zone, nên nhiều khu vực ở Trung Quốc mặt trời mọc lúc 10 AM) </p>\n<h2 id=\"gmt-utc-và-offset\"><a href=\"#gmt-utc-v%C3%A0-offset\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GMT, UTC và Offset</h2>\n<p><strong>GMT (Greenwich Mean Time)</strong> là thời gian tính theo cái đồng hồ Royal Observatory ở <em>Greenwich, UK</em></p>\n<p><strong>UTC</strong> là một hệ thống tính toán thời gian quốc tế hơn, giá trị chuẩn xác hơn và được sử dụng rộng rãi hơn trong lập trình.</p>\n<p><strong>Offset</strong> </p>\n<p>Giá trị <code class=\"language-text\">+09:00</code> trong <code class=\"language-text\">UTC+09:00</code> nghĩa là giờ địa phương đang trước mốc giờ chuẩn UTC 9 tiếng, khoảng khác biệt giữa giờ địa phương và giờ lấy làm mốc đó gọi là offset.</p>\n<p>Một vài nước thích đặt tên time zone của mình theo tên riêng luôn, như Hàn Quốc thì nó là <code class=\"language-text\">KST = UTC+09:00</code>, giá trị time zone này cũng là giá trị của Nhật, Indo, và vài nước khác.</p>\n<p>Giá trị offset lại ko phải căn cứ theo giờ, mà có thể chứa cả phút nữa, như Bắc Hàn thì dùng <code class=\"language-text\">+08:30</code>, Úc <code class=\"language-text\">+08:45</code>, <code class=\"language-text\">+09:30</code> một số vùng</p>\n<h2 id=\"time-zone--offset\"><a href=\"#time-zone--offset\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Time zone !== offset</h2>\n<p>Đôi khi chúng ta hay dùng time zone và offset mang ý nghĩa tương tự nhau, như vậy thì chưa chuẩn xác. Lý do:</p>\n<h3 id=\"summer-time-dst\"><a href=\"#summer-time-dst\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Summer time (DST)</h3>\n<p>Khái niệm này sẽ không gặp ở nhiều nước, đa phần các nước ở châu  u sẽ dùng đến thuật ngữ “Summer time” này, nó có tên <strong>khoa học</strong> khác là <strong>Daylight Saving Time (DST)</strong> nghĩa là trong mùa hè thời gian nó sẽ đi trước một tiếng so với giờ chuẩn</p>\n<p>Lấy một ví dụ, California USA dùng PST ( Pacific Standard Time) trong mùa đông và PDT (Pacific Daylight Time, <code class=\"language-text\">UTC-07:00</code>) trong mùa hè. Những khu vực sử dụng 2 time zone như vậy gọi là <strong>Pacific Time (PT)</strong></p>\n<p>Câu hỏi tiếp theo là như vậy căn cứ vào đâu để tính mùa hè và mùa đông bắt đầu/kết thúc. Phủ phàng là giá trị ngày DST ở các nước khác nhau là khác nhau và vào các năm khác nhau cũng khác nhau nốt. Như ở Canada và Mỹ, DST tính từ 2:00AM ngày chủ nhật đầu tiên của tháng 4 cho tới 12:00AM ngày chủ nhật cuối cùng tháng 10 cho tới năm 2006, nhưng sang năm 2007, thì nó từ 2:00AM ngày chủ nhật thứ 2 của tháng 3 đến 2:00AM ngày chủ nhật đầu tiên tháng 11</p>\n<h3 id=\"time-zone-vui-vui-nó-lại-đổi\"><a href=\"#time-zone-vui-vui-n%C3%B3-l%E1%BA%A1i-%C4%91%E1%BB%95i\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Time zone vui vui nó lại đổi</h3>\n<p>Nếu bạn thấy như vậy đã đủ phức tạp, thì bạn chưa biết gì đâu, Time zone nó còn phụ thuộc vào cả tình hình kinh tế, chính trị của một nước. Cụ thể năm 2007, tổng thống George Bush ký thỏa thuận năng lượng hồi năm 2005, làm giá trị DST này thay đổi trong năm 2007.</p>\n<p>Vì quá rắc rối và phức tạp, Nga và Hy Lạp đã ko dùng luôn DST từ năm 2011</p>\n<p>Trước đây Samoa sử dụng <code class=\"language-text\">UTC-10:00</code>, nhưng sau này nó chuyển sang <code class=\"language-text\">UTC+14:00</code> để cắt giảm các thương vụ thất bại với Úc và New Zealand vì sự khác nhau về time zone. Vụ này lên báo toàn thế giới năm 2011, vì nó mất đi hẳn một ngày 30 tháng 12 để điều chỉnh time zone</p>\n<h2 id=\"time-zone-trong-môi-trường-server-client\"><a href=\"#time-zone-trong-m%C3%B4i-tr%C6%B0%E1%BB%9Dng-server-client\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Time zone trong môi trường Server-Client</h2>\n<p>Bây giờ hình dung bạn làm một cái app để lên lịch công việc, bạn lấy giá trị thời điểm user. Chọn ở phía client truyền xuống server rồi lưu lại giá trị đó, sau đó giá trị này được hiển thị lên phía client</p>\n<p>Chuyện sẽ ra sao nếu client truy xuất từ những time zone khác nhau. Thí dụ lúc tạo lịch ở Việt Nam, nhưng sau đó nó đi công tác ở Mỹ rồi mở lên xem, giá trị lưu ở phía server phải là giá trị cố định và ko phụ thuộc time zone. Như vậy client chỉ cần làm việc là hiển thị giá trị đó đúng với time zone hiện tại.</p>\n<p>Ngoài ra, lúc user tạo một mốc thời gian, chúng ta cũng chuyển nó qua đơn vị Unix time theo chuẩn <strong>ISO-8601</strong> để chứa luôn thông tin offset <code class=\"language-text\">2017–03–10T11:30:00+09:00</code>. Cái chúng ta làm đó thuật ngữ chuyên ngành hay dùng 2 từ để mô tả là <code class=\"language-text\">parsing</code> và <code class=\"language-text\">formatting</code></p>\n<h2 id=\"đối-tượng-date-trong-javascript\"><a href=\"#%C4%91%E1%BB%91i-t%C6%B0%E1%BB%A3ng-date-trong-javascript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đối tượng Date trong javascript</h2>\n<p>Trong native javascript, chúng ta có đối tượng <code class=\"language-text\">Date</code> để làm việc với kiểu date, nhưng chắc không dev nào chịu xài đâu, vì nó có rất nhiều vấn đề, nên đa phần đều dùng thêm 1 thư viện bổ sung, đọc thêm bài <a href=\"https://luubinhan.github.io/blog/2019-03-17-vi-sao-ban-ko-nen-xai-moment-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vì sao quần hùng kéo nhau không xài moment.js nữa</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.com/@toastui/handling-time-zone-in-javascript-547e67aa842d\">Handling Time Zone in JavaScript\n</a></p>\n"}},{"node":{"title":"Các phương thức trên array cần nhớ","path":"/cac-phuong-thuc-tren-array-can-nho/","date":"8. April 2019","timeToRead":6,"desc":"Khi cần loop qua một array, tìm phần tử, sắp xếp, hoặc làm gì đó trên array, khả năng rất cao là trong array đã có một phương thức sẵn để bạn xài, không cần dùng tới vòng lặp for. Chúng ta sẽ cùng điểm qua những phương thức như vậy trong bài viết này.","content":"<!-- TOC -->\n<ul>\n<li>\n<p><a href=\"#c%C3%A1c-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-ph%E1%BA%A3i-bi%E1%BA%BFt\">Các phương thức <strong>phải biết</strong></a></p>\n<ul>\n<li><a href=\"#map\">map</a></li>\n<li><a href=\"#filter\">filter</a></li>\n<li><a href=\"#reduce\">reduce</a></li>\n<li><a href=\"#spread-operator\">spread operator</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#bi%E1%BA%BFt-th%C3%AC-t%E1%BB%91t\">Biết thì tốt</a></p>\n<ul>\n<li><a href=\"#includes\">includes</a></li>\n<li><a href=\"#concat\">concat</a></li>\n<li><a href=\"#foreach\">forEach</a></li>\n<li><a href=\"#indexof\">indexOf</a></li>\n<li><a href=\"#find\">find</a></li>\n<li><a href=\"#findindex\">findIndex</a></li>\n<li><a href=\"#slice\">slice</a></li>\n<li><a href=\"#some\">some</a></li>\n<li><a href=\"#every\">every</a></li>\n<li><a href=\"#from\">from</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"các-phương-thức-phải-biết\"><a href=\"#c%C3%A1c-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-ph%E1%BA%A3i-bi%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các phương thức <strong>phải biết</strong></h2>\n<h3 id=\"map\"><a href=\"#map\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>map</h3>\n<p>Hàm được sử dụng nhiều nhất trong đám, mỗi khi cần thay đổi giá trị phần tử trong array, không thay đổi số lượng phần tử, nghĩ tới <code class=\"language-text\">map</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// cộng thêm một vào tất cả các phần tử</span>\n<span class=\"token keyword\">const</span> numbersPlusOne <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token arrow operator\">=></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>numbersPlusOne<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [2, 3, 4, 5]</span></code></pre>\n<p>Tạo một array mới, chỉ giữ lại một kiểu property mong muốn trong object</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> allActivities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'My activity'</span><span class=\"token punctuation\">,</span> coordinates<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">50.123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.291</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'Another activity'</span><span class=\"token punctuation\">,</span> coordinates<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1.238</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.292</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// etc.</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> allCoordinates <span class=\"token operator\">=</span> allActivities<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">activity</span> <span class=\"token arrow operator\">=></span> activity<span class=\"token punctuation\">.</span><span class=\"token property-access\">coordinates</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>allCoordinates<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [[50.123, 3.291], [1.238, 4.292]]</span></code></pre>\n<h3 id=\"filter\"><a href=\"#filter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>filter</h3>\n<p>Hàm này sẽ trả về array mới, khi phần tử thỏa điều kiện đặt ra</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> oddNumbers <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token arrow operator\">=></span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>oddNumbers<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 3, 5]</span></code></pre>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> participants <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'a3f47'</span><span class=\"token punctuation\">,</span> username<span class=\"token operator\">:</span> <span class=\"token string\">'john'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'fek28'</span><span class=\"token punctuation\">,</span> username<span class=\"token operator\">:</span> <span class=\"token string\">'mary'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'n3j44'</span><span class=\"token punctuation\">,</span> username<span class=\"token operator\">:</span> <span class=\"token string\">'sam'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">removeParticipant</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">participants<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> participants<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">participant</span> <span class=\"token arrow operator\">=></span> participant<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">removeParticipant</span><span class=\"token punctuation\">(</span>participants<span class=\"token punctuation\">,</span> <span class=\"token string\">'a3f47'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">//  [{ id: 'fek28', username: 'mary' }, { id: 'n3j44', username: 'sam' }];</span></code></pre>\n<h3 id=\"reduce\"><a href=\"#reduce\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>reduce</h3>\n<p>Một trong những phương thức khó hiểu nhất, theo quan điểm cá nhân, nhưng một khi đã master rồi thì bạn sẽ làm được khá nhiều thứ hay ho với nó</p>\n<p>Về căn bản, <code class=\"language-text\">reduce</code> sẽ lấy các giá trị trong array,  tính toán các kiểu rồi <strong>trả về 1 giá trị</strong>. Nó nhận vào các tham số</p>\n<ul>\n<li>Kết quả trả về từ lần tính toán trước, lần chạy đầu tiên, giá trị này là phần tử đầu tiên trong array</li>\n<li>Giá trị phần tử hiện tại trong array</li>\n<li>Giá trị index của phần tử</li>\n<li>Mảng đã gọi trước đó</li>\n</ul>\n<p>Hầu như chúng ta chỉ sử dụng 2 tham số đầu</p>\n<p>Lấy một ví dụ kinh điển về <code class=\"language-text\">reduce</code>, cộng tất cả giá trị trong mảng</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> total <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">total<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> total <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 90</span></code></pre>\n<p>Chúng ta có thể dựng hàm <code class=\"language-text\">map</code> và <code class=\"language-text\">filter</code> bằng hàm <code class=\"language-text\">reduce</code> luôn</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">map</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mappedArr<span class=\"token punctuation\">,</span> element</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>mappedArr<span class=\"token punctuation\">,</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">n</span> <span class=\"token arrow operator\">=></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [2, 3, 4, 5]</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">filter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">filteredArr<span class=\"token punctuation\">,</span> element</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>filteredArr<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>filteredArr<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">n</span> <span class=\"token arrow operator\">=></span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 3, 5]</span></code></pre>\n<p>Giờ xét tới một ví dụ tương đối phức tạp hơn, giảm số chiều trong mảng xuống 1, cụ thể là [1, 2, 3, [4, [[[5, [6, 7]]]], 8]] thành [1, 2, 3, 4, 5, 6, 7, 8]</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">flatDeep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flattenArray<span class=\"token punctuation\">,</span> element</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isArray</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>flattenArray<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span><span class=\"token method function property-access\">flatDeep</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n      <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>flattenArray<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">flatDeep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">// [1, 2, 3, 4, 5, 6, 7, 8]</span></code></pre>\n<h3 id=\"spread-operator\"><a href=\"#spread-operator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>spread operator</h3>\n<p>Đồng ý đây không phải là một phương thức. Nhưng vì nó quá hữu dụng nên cũng đưa vào luôn</p>\n<p>Merge nhiều mảng lại thành 1</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> numbersCopy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>numbers<span class=\"token punctuation\">]</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>numbersCopy<span class=\"token punctuation\">)</span> \n<span class=\"token comment\">// [1, 2, 3]</span>\n\n<span class=\"token keyword\">const</span> otherNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> numbersConcatenated <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>numbers<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>otherNumbers<span class=\"token punctuation\">]</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>numbersConcatenated<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [1, 2, 3, 4, 5, 6]</span></code></pre>\n<p>Lưu ý quan trọng, khi sử dụng spread operator luôn khắc ghi trong lòng là nó sẽ thực hiện một <strong>shallow copy</strong>, mà <strong>shallow copy</strong> nghĩa là gì, là nó sẽ copy dùng cách đỡ tốn công nhất có thể, nếu các giá trị trong mảng kiểu số, chữ (primitive types) thì không vấn đề, khi trong mảng đó chứa mảng khác, object thì nó chỉ <strong>trỏ tới</strong> cùng đối tượng gốc thôi, chứ không phải là <strong>sao i</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Thomas'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>arr<span class=\"token punctuation\">]</span>\n\ncopy<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// No mutations: [\"foo\", 42, { name: \"Thomas\" }]</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [\"bar\", 42, { name: \"Thomas\" }]</span>\n\ncopy<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// /!\\ MUTATION [\"foo\", 42, { name: \"Hello\" }]</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [\"bar\", 42, { name: \"Hello\" }]</span></code></pre>\n<p>Phải nhắc lại, vì đây là trường hợp hay bị bug nhất. Nên khi cần giải quyết vấn đề copy này triệt để, nhớ đến <a href=\"https://lodash.com/docs/#cloneDeep\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cloneDeep</a> của Lodash</p>\n<h2 id=\"biết-thì-tốt\"><a href=\"#bi%E1%BA%BFt-th%C3%AC-t%E1%BB%91t\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Biết thì tốt</h2>\n<h3 id=\"includes\"><a href=\"#includes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>includes</h3>\n<p>Nếu đã từng sử dụng phương thức <code class=\"language-text\">indexOf</code> để kiểm tra xem phần tử đó có tồn tại trong array không, thì bạn có thể thay thế bằng việc dùng <code class=\"language-text\">includes</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> sports <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'football'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'archery'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'judo'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> hasFootball <span class=\"token operator\">=</span> sports<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'football'</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>hasFootball<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre>\n<h3 id=\"concat\"><a href=\"#concat\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>concat</h3>\n<p>Phương thức merge nhiều mảng thành 1</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> otherNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> numbersConcatenated <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span>otherNumbers<span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>numbersConcatenated<span class=\"token punctuation\">)</span> \n<span class=\"token comment\">// [1, 2, 3, 4, 5, 6]</span>\n\n<span class=\"token comment\">// You can merge as many arrays as you want</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">concatAll</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>arrays</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span>arrays<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">concatAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]</span></code></pre>\n<h3 id=\"foreach\"><a href=\"#foreach\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>forEach</h3>\n<p>Loop qua mảng, chậm hơn <code class=\"language-text\">for</code> nhưng xài tiện hơn</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">log</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 1 0 [ 1, 2, 3 ]</span>\n<span class=\"token comment\">// 2 1 [ 1, 2, 3 ]</span>\n<span class=\"token comment\">// 3 2 [ 1, 2, 3 ]</span></code></pre>\n<h3 id=\"indexof\"><a href=\"#indexof\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>indexOf</h3>\n<p>Được sử dụng thường xuyên để kiểm tra phần tử có tồn tại trong mảng không</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> sports <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'football'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'archery'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'judo'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> judoIndex <span class=\"token operator\">=</span> sports<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'judo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>judoIndex<span class=\"token punctuation\">)</span> \n<span class=\"token comment\">// 2</span></code></pre>\n<h3 id=\"find\"><a href=\"#find\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>find</h3>\n<p>Khá tương đồng với hàm <code class=\"language-text\">filter</code>, chúng ta cung cấp cho nó một hàm để kiểm tra tất cả các phần tử của mảng. Tuy nhiên nó sẽ trả về <strong>phần tử</strong> đầu tiên thỏa điều kiện chứ không chạy hết toàn bộ mảng.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'af35'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'john'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'6gbe'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'mary'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'932j'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'gary'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token arrow operator\">=></span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">===</span> <span class=\"token string\">'6gbe'</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// { id: '6gbe', name: 'mary' }</span></code></pre>\n<h3 id=\"findindex\"><a href=\"#findindex\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>findIndex</h3>\n<p>Giống như hàm find, nhưng thay vì trả về phần tử, nó trả về index của phần tử </p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'af35'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'john'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'6gbe'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'mary'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'932j'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'gary'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token arrow operator\">=></span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">===</span> <span class=\"token string\">'6gbe'</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></code></pre>\n<h3 id=\"slice\"><a href=\"#slice\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>slice</h3>\n<p>Khi chúng ta cần lấy một <strong>đoạn</strong> trong mảng, hoặc copy một <strong>đoạn</strong>, chúng ta nhớ tới <code class=\"language-text\">slice</code>. Nó cũng thực hiện một <strong>shallow copy</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Ví dụ, chúng ta muốn lấy một số đoạn chat messages từ API, 2 cách làm với vòng lặp <code class=\"language-text\">for</code> và <code class=\"language-text\">slice</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// The \"traditional way\" to do it:</span>\n<span class=\"token comment\">// xác định số lượng muốn lấy, sử dụng vòng lặp for</span>\n<span class=\"token keyword\">const</span> nbMessages <span class=\"token operator\">=</span> messages<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span> <span class=\"token operator\">?</span> messages<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">let</span> messagesToShow <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nbMessages<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  messagesToShow<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Nếu \"arr\" ít hơn 5 phần tử,</span>\n<span class=\"token comment\">// nó vẫn chạy bình thường</span>\n<span class=\"token keyword\">const</span> messagesToShow <span class=\"token operator\">=</span> messages<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"some\"><a href=\"#some\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>some</h3>\n<p>Để kiểm tra có ít nhất một phần tử trong mảng thỏa điều kiện</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'fe34'</span><span class=\"token punctuation\">,</span>\n    permissions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'write'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'a198'</span><span class=\"token punctuation\">,</span>\n    permissions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'18aa'</span><span class=\"token punctuation\">,</span>\n    permissions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'delete'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'read'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'write'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> hasDeletePermission <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token arrow operator\">=></span>\n  user<span class=\"token punctuation\">.</span><span class=\"token property-access\">permissions</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'delete'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>hasDeletePermission<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre>\n<h3 id=\"every\"><a href=\"#every\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>every</h3>\n<p>Tất cả các phần tử trong mảng điều thỏa điều kiện</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'fe34'</span><span class=\"token punctuation\">,</span>\n    permissions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'write'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'a198'</span><span class=\"token punctuation\">,</span>\n    permissions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'18aa'</span><span class=\"token punctuation\">,</span>\n    permissions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'delete'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'read'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'write'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> hasAllReadPermission <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">every</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token arrow operator\">=></span>\n  user<span class=\"token punctuation\">.</span><span class=\"token property-access\">permissions</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>hasAllReadPermission<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre>\n<h3 id=\"from\"><a href=\"#from\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>from</h3>\n<p>Tạo một array mới từ một object hoặc một đối tượng bất kỳ có thể tạo được</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> nodes <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.todo-item'</span><span class=\"token punctuation\">)</span>\n <span class=\"token comment\">//lấy danh sách NodeList</span>\n<span class=\"token keyword\">const</span> todoItems <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span>\n <span class=\"token comment\">// có thể sử dụng các phương thức của array trên todoItems này</span>\n\ntodoItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  item<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked on </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHTML</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://thomlom.dev/what-you-should-know-about-js-arrays/\">What you should know about JavaScript arrays\n</a></p>\n"}},{"node":{"title":"Vì sao quần hùng kéo nhau không xài moment.js nữa","path":"/vi-sao-quan-hung-keo-nhau-khong-xai-moment-js-nua/","date":"17. March 2019","timeToRead":5,"desc":"Tất cả chúng ta đã từng và đang sử dụng moment.js mà ko hề dành chút thời gian để xem nó ảnh hưởng như thế nào đến performance","content":"<!-- TOC -->\n<ul>\n<li>\n<p><a href=\"#n%C3%B3-qu%C3%A1-ch%E1%BA%ADm\">Nó quá chậm</a></p>\n<ul>\n<li><a href=\"#parsing-gi%C3%A1-tr%E1%BB%8B-iso-8601\">Parsing giá trị ISO 8601</a></li>\n<li><a href=\"#parsing-gi%C3%A1-tr%E1%BB%8B-epoch\">Parsing giá trị EPOCH</a></li>\n<li><a href=\"#format\">Format</a></li>\n<li><a href=\"#t%C3%ADnh-to%C3%A1n\">Tính toán</a></li>\n<li><a href=\"#so-s%C3%A1nh\">So sánh</a></li>\n</ul>\n</li>\n<li><a href=\"#n%C3%B3-qu%C3%A1-n%E1%BA%B7ng\">Nó quá nặng</a></li>\n<li><a href=\"#n%C3%B3-mutable\">Nó Mutable</a></li>\n<li><a href=\"#qu%C3%A1-kh%C3%B3-%C4%91%E1%BB%83-debug\">Quá khó để debug</a></li>\n</ul>\n<!-- /TOC -->\n<p>Trước đây khi nhắc đến thư viện xử lý ngày tháng, là trong đầu mọi developer frontend sẽ nghĩ ngay tới <a href=\"https://momentjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Moment.js</a>, tuy nhiên dạo gần đây, đâu đâu cũng nghe cũng thấy đến các bài viết khuyên chúng ta bỏ ngay moment.js hoặc ít nhất là xài một cách cẩn trọng hơn.</p>\n<p>Thằng Date object build sẵn của javascript thì ko đủ xài. Sớm hay muộn chúng ta cùng cần đến một thư viện thứ 3 để làm việc với ngày tháng, và lựa chọn hiển nhiên trước đây là moment.js. Một thư viện tất cả trong một, giải quyết tuốt tuồn tật các vấn đề liên quan đến ngày tháng.</p>\n<p><strong>Vậy tại sao bây giờ người ta chê nó?</strong></p>\n<h2 id=\"nó-quá-chậm\"><a href=\"#n%C3%B3-qu%C3%A1-ch%E1%BA%ADm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nó quá chậm</h2>\n<p>Trong quá trình thực hiện optimize cho dự án, tác giả bài này (ko phải mình nhé) đã phát hiện ra rằng, phần lớn những chổ <strong>tắt nghẽn</strong> là ở chỗ  parsing ngày chuẩn ISO8601 từ database, cụ thể là hàm <code class=\"language-text\">moment(ISO8601_DATE_HERE)</code>, khá là sốc với kết quả này, vì ko dùng bất cứ một định dạng đặc biệt nào, một input chuẩn ISO bình thường, nếu mà dùng <code class=\"language-text\">moment(new Date(ISO8601_DATE_HERE))</code> thì nhanh hơn gấp 7 lần.</p>\n<p>Thực hiện test và so sánh với một số thư viện khác</p>\n<p><img src=\"https://i.imgur.com/QjK9gvY.png\" alt=\"Nó quá nặng\"></p>\n<h3 id=\"parsing-giá-trị-iso-8601\"><a href=\"#parsing-gi%C3%A1-tr%E1%BB%8B-iso-8601\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Parsing giá trị ISO 8601</h3>\n<p>Moment.js tốn khoảng 9 giây để parse 100.000 giá trị ngày ISO8601, trong khi đó <a href=\"https://github.com/iamkun/dayjs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Day.js</a> chỉ mất .5 giây, các API cung cấp khá giống nhau, tuy nhiên thằng Day.js <strong>khôn hơn</strong>, nó xác định giá trị <code class=\"language-text\">z</code> ở cuối string, nếu có nó sẽ gọi <code class=\"language-text\">new Date(string)</code>. Trong khi Moment.js, <a href=\"https://moment.github.io/luxon/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Luxon</a> và <a href=\"https://js-joda.github.io/js-joda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JS-Joda</a> sử dụng một regex của từng thằng để làm.</p>\n<blockquote>\n<p>Lưu ý không dùng Day.js hay Date-Fns nếu bạn cần hỗ trợ IE9, <em>hy vọng là bạn không xui tới vậy</em>, từ ES5 thì <code class=\"language-text\">Date.parse</code> mới làm việc tốt với ISO 8601</p>\n</blockquote>\n<h3 id=\"parsing-giá-trị-epoch\"><a href=\"#parsing-gi%C3%A1-tr%E1%BB%8B-epoch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Parsing giá trị EPOCH</h3>\n<p>Kết quả parse EPOCH Time thì các thư viện cho kết quả tương đương, tuy nhiên nếu bạn là đứa nghiện tốc độ, khuyến nghị sử dụng Date-Fns</p>\n<h3 id=\"format\"><a href=\"#format\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Format</h3>\n<p>Về vấn đề format, các thư viện lại gần như ko cung cấp hàm nào cả, đa phần tụi nó sẽ dùng regex để thực hiện. Riêng thằng JS-Joda sử dụng một hàm trong đó nó ì các kiểu để kiểm tra, rồi <code class=\"language-text\">charAt</code> nên nhanh hơn một chút so với những thằng dùng regex</p>\n<h3 id=\"tính-toán\"><a href=\"#t%C3%ADnh-to%C3%A1n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tính toán</h3>\n<p>Các phép toán trên ngày tháng đúng là lằn xà ngoằn, moment.js làm khá tốt hơn hẳn Day.js và Luxon, tuy nhiên vô đối vấn là JS-Joda trên vụ này.</p>\n<h3 id=\"so-sánh\"><a href=\"#so-s%C3%A1nh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>So sánh</h3>\n<p>Kiểm tra 2 giá trị ngày có là bằng nhau tương đối phức tạp hơn so sánh 2 ngày có lớn hơn nhau, bởi vì chúng ta không thực hiện so sánh giá trị khoảng thời gian (timestamps)\nMấy thư viện khác ngoài Luxon có vẻ ok, không rõ vì sao Luxon lại lấp vấp vụ này.</p>\n<h2 id=\"nó-quá-nặng\"><a href=\"#n%C3%B3-qu%C3%A1-n%E1%BA%B7ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nó quá nặng</h2>\n<p><img src=\"https://i.imgur.com/X7EsHHT.png\" alt=\"Nó quá nặng\"></p>\n<p>Moment.js dung lượng khoảng 232kB (zip lại thì cỡ 66 kB), mà theo Yoshihide Jimbo thì có thể cắt bớt chỉ còn 68 kB ( 23 kB zip) bằng cách loại bỏ locale.</p>\n<p>JS-Joda chỉ nhẹ hơn Moment.js chút xíu, tuy nhiên do nó cũng là thư viện nặng vì phải chứa period và time zone, 2 thằng này dùng Moment.js bạn phải cài thêm dạng plugin</p>\n<p>Mấy thằng còn lại như Luxon, Day.js, Date-Fns thì nhẹ khỏi nói, ít nhất cũng phải nhẹ hơn 22 lần so với moment.js</p>\n<p>Nếu bạn đang dùng moment.js ở Backend thì ko sợ nhiều, chứ còn ở Frontend thì 1kb cũng có giá của nó.</p>\n<h2 id=\"nó-mutable\"><a href=\"#n%C3%B3-mutable\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nó Mutable</h2>\n<p>Ví dụ bạn đang làm một cái app lịch hiển thị những sự kiện sắp diễn ra.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> startedAt <span class=\"token operator\">=</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> endedAt   <span class=\"token operator\">=</span> startedAt<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'year'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>startedAt<span class=\"token punctuation\">)</span> <span class=\"token comment\">// > 2020-02-09T13:39:07+01:00</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>endedAt<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// > 2020-02-09T13:39:07+01:00</span></code></pre>\n<p><code class=\"language-text\">startedAt</code>, <code class=\"language-text\">endedAt</code> đều là mutable (có thể thay đổi), rõ ràng chúng ta không muốn giá trị của <code class=\"language-text\">startedAt</code> bị thay đổi sau khi gọi hàm <code class=\"language-text\">add</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> init   <span class=\"token operator\">=</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> add    <span class=\"token operator\">=</span> init<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'year'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> sub    <span class=\"token operator\">=</span> init<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subtract</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'months'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> start  <span class=\"token operator\">=</span> init<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">startOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'year'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> end    <span class=\"token operator\">=</span> init<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">endOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'year'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> utc    <span class=\"token operator\">=</span> init<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">utc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> local  <span class=\"token operator\">=</span> init<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">local</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> init<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">utcOffset</span><span class=\"token punctuation\">(</span><span class=\"token number\">480</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Tất cả đống biến này đều trỏ tới cùng 1 object.  Giải quyết cũng đơn giản</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> startedAt <span class=\"token operator\">=</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> endedAt   <span class=\"token operator\">=</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span>startedAt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'year'</span><span class=\"token punctuation\">)</span></code></pre>\n<blockquote>\n<p>Khi dùng Moment.js luôn nhớ dùng cách này để tạo một instance mới</p>\n</blockquote>\n<h2 id=\"quá-khó-để-debug\"><a href=\"#qu%C3%A1-kh%C3%B3-%C4%91%E1%BB%83-debug\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Quá khó để debug</h2>\n<p>Nếu giá trị input đẹp đẽ, sạch sẽ, mọi việc đều sẽ trót lọt (ko tính đến vụ mutation nhé). Tuy nhiên đời mà ai lại ko có lỗi lầm</p>\n<p>Giờ chúng ta thử ví dụ, có object là. <code class=\"language-text\">person { lastVisitedAt }</code> </p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> lastVisitedAt<span class=\"token operator\">:</span> <span class=\"token string\">'2017-11-11T00:00:00.000Z'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token function\">moment</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token property-access\">lastVsitedAt</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// > '2019-02-08T16:01:45+01:00'</span></code></pre>\n<p>Nếu bạn lỡ gõ nhầm tên property như vậy đi <code class=\"language-text\">lastVsitedAt</code>, thì <code class=\"language-text\">moment(undefined)</code> cũng không <code class=\"language-text\">throw error</code> luôn.</p>\n<p>Giờ thử đưa mấy giá trị lạ lạ như sau vào moment()</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\">// > 2019-02-08T17:07:22+01:00</span>\n<span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// > 2019-02-08T17:07:22+01:00</span>\n<span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// > Invalid date</span>\n<span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// > 2019-02-08T17:07:22+01:00</span>\n<span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// > Invalid date</span>\n<span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// > 2019-02-08T17:07:22+01:00</span>\n<span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// > Invalid date</span>\n<span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">// > 1970-01-01T01:00:00+01:00</span></code></pre>\n<p>Moment.js ko throw error mà chỉ trả về <code class=\"language-text\">Invalid Date object</code></p>\n<p>Khi gọi <code class=\"language-text\">toISOString()</code> nó lại lạ kỳ trả về <code class=\"language-text\">null</code> chứ ko phải chuỗi <code class=\"language-text\">Invalid Date</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\">// >  2019-02-08T16:14:10.835Z</span>\n<span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// >  2019-02-08T16:14:10.835Z</span>\n<span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// >  null</span>\n<span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// >  2019-02-08T16:14:10.836Z</span>\n<span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// >  null</span>\n<span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// >  2019-02-08T16:14:10.836Z</span>\n<span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// >  null</span>\n<span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">// >  1970-01-01T00:00:00.000Z</span></code></pre>\n<p>Nói cách ngắn gọn, <code class=\"language-text\">undefined</code> không hợp lệ trong moment(), nhưng <code class=\"language-text\">null</code> thì ok. Bị lỗi ư, nó trả về một <code class=\"language-text\">Invalid Date object</code>, <code class=\"language-text\">null</code> hoặc custom object tuỳ vào nó vui hay buồn.</p>\n<p>Nếu kết quả này chưa làm bạn thuyết phục, hay tự kiểm chứng nhé.\n<a href=\"https://repl.it/@piotrekfracek/DateTime\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://repl.it/@piotrekfracek/DateTime</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://overreacted.io/how-are-function-components-different-from-classes/\">Why you shouldn't use Moment.js...</a></p>\n"}},{"node":{"title":"for vs forEach vs for/in vs for/of trong javascript","path":"/for-vs-for-each-vs-for-in-vs-for-of-trong-javascript/","date":"7. March 2019","timeToRead":3,"desc":"Trong javascript có rất nhiều cách để loop qua một array, chúng ta cùng bàn qua 4 cách chính hay sử dụng nhất","content":"<ul>\n<li>for (let i = 0; i &#x3C; arr.length; ++i)</li>\n<li>arr.forEach((v, i) => { /<em> ….. </em>/})</li>\n<li>for (let i in arr)</li>\n<li>for (const v of arr)</li>\n</ul>\n<p>2 phương thức là <code class=\"language-text\">for</code> và <code class=\"language-text\">for/in</code> cho phép chúng ta truy cập đến giá trị index trong array, ko phải giá trị của element trong array</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// sau đó chúng ta dùng truy cập element bằng giá trị index</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Trong khi đó hai phương thức <code class=\"language-text\">for/of</code> và <code class=\"language-text\">forEach</code> sẽ truy xuất đến phần tử trong element, cũng có thể truy xuất vào index, nếu thích.</p>\n<pre class=\"language-js\"><code class=\"language-js\">arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> v <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Có thể bạn chưa biết, array trong javascript cũng là một dạng <em>đặc biệt</em> của object, chúng ta có thể gán một property cho nó</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'object'</span>\n\narr<span class=\"token punctuation\">.</span><span class=\"token property-access\">test</span> <span class=\"token operator\">=</span> <span class=\"token string\">'bad'</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">test</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bad</span>\n\narr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> arr<span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true, </span></code></pre>\n<p>Nếu loop qua bằng 4 phương thức trên, chỉ duy nhất thằng <code class=\"language-text\">for/in</code> sẽ chạy qua</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token property-access\">test</span> <span class=\"token operator\">=</span> <span class=\"token string\">'bad'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// \"a, b, c, bad\"</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đó là lý do tại sao chúng ta ko nên dùng <code class=\"language-text\">for/in</code> để loop qua array</p>\n<p>Đối với một element <strong>trống</strong> như thế này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></code></pre>\n<p>Không chỉ vậy thôi đâu, nếu loop qua mảng <code class=\"language-text\">[&#39;a&#39;,,&#39;b&#39;]</code> nó cũng sẽ khác với <code class=\"language-text\">[&#39;a&#39;, undefined, &#39;c&#39;]. 2 thằng</code>for/in<code class=\"language-text\">và</code>for/each<code class=\"language-text\">sẽ bỏ qua phần tử trống như vậy, nhưng</code>for<code class=\"language-text\">và</code>for/of` vẫn tính</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// Prints \"a, undefined, c\"</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Prints \"a, c\"</span>\narr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Prints \"a, c\"</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Prints \"a, undefined, c\"</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> v <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Tuy nhiên, nếu là <code class=\"language-text\">[&#39;a&#39;, undefined, &#39;c&#39;]</code>, cả 4 phương thức trên đề print hết giá trị trong array.</p>\n<p>Một cách để chèn phần tử trống vào array</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Tuy nhiên là trường hợp <code class=\"language-text\">[a, , c]</code> này sẽ rất rất ít khi xảy ra, vì căn bản là file JSON như thế là không hợp lệ. Chúng ta cũng không cần lo lắng lắm</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{\"arr\":[\"a\",\"b\",\"c\"]}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span> arr<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{\"arr\":[\"a\",null,\"c\"]}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span> arr<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{\"arr\":[\"a\",,\"c\"]}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">SyntaxError</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Unexpected</span> token <span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token known-class-name class-name\">JSON</span> at position <span class=\"token number\">12</span></code></pre>\n<p>Với từ khóa <code class=\"language-text\">this</code>, <code class=\"language-text\">for</code>, <code class=\"language-text\">for/in</code>, <code class=\"language-text\">for/of</code> sẽ dùng chung scope với thằng cha, trong khi <code class=\"language-text\">forEach</code> thì nó là scope của nó.</p>\n<p><code class=\"language-text\">forEach</code> cũng xảy ra nhiều tình huống ko đúng khi dùng với <code class=\"language-text\">async/await</code> hoặc <code class=\"language-text\">generator</code>. Code bên dưới là không chạy, không dùng await cho callback của <code class=\"language-text\">forEach</code> cũng như <code class=\"language-text\">yield</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// SyntaxError</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// SyntaxError</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Dùng với <code class=\"language-text\">for/of</code> thì ok</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">asyncFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> el <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">generatorFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> el <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Túm lại, <code class=\"language-text\">for/of</code> có thể dùng gần như mọi lúc. Mặc dù performance ko bằng <code class=\"language-text\">for</code>, nhưng dễ xài hơn, cũng ko dính nhiều trường hợp đặc biệt như <code class=\"language-text\">for/in</code> và <code class=\"language-text\">forEach</code>. Nếu ko cần dùng đến giá trị index, thì <code class=\"language-text\">for/of</code> sẽ được dùng. Còn nếu muốn truy xuất tới giá trị index với <code class=\"language-text\">for/of</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Prints \"0 a\", \"1 b\", \"2 c\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://thecodebarbarian.com/for-vs-for-each-vs-for-in-vs-for-of-in-javascript.html\">For vs forEach() vs for/in vs for/of in JavaScript</a></p>\n"}},{"node":{"title":"Không cho phép import với ESlint","path":"/khong-cho-phep-import-voi-e-slint/","date":"26. February 2019","timeToRead":1,"desc":"Với ESlint chúng ta có thể cấm import những thư viện lớn, tránh để bà con trong team import tá lả.","content":"<p>Sử dụng rule <code class=\"language-text\">no-restricted-imports</code></p>\n<p>Ví dụ chúng ta nghiêm cấm import <em>moment.js</em>, một thư viện khiến cục bundle của chúng ta phình to. Nếu được các bạn nên cân nhắc sử dụng <a href=\"https://date-fns.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">date-fns</a> hoặc <a href=\"https://moment.github.io/luxon/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Luxon</a></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"no-restricted-imports\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"moment\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Sử dụng date-fns hoặc Luxon đi cưng à\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Khi <em>bọn nó</em> cố ý import sẽ nhận được cảnh báo</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> moment <span class=\"token keyword module\">from</span> <span class=\"token string\">'moment'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Ví dụ khác, chặn ko cho import <strong>lodash</strong>, khuyến cáo dùng <a href=\"https://www.npmjs.com/package/lodash-es\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lodash-es</a></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"no-restricted-imports\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Use lodash-es instead!\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Có thể dùng message mặc định, truyền vào một mảng các thư viện bị cấm</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"no-restricted-imports\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"underscore\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bluebird\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Trong trường hợp phức tạp hơn,  chúng ta có thể chặn tất cả những module nào khớp với pattern <code class=\"language-text\">legacy/*</code>, kiểu như <code class=\"language-text\">import helpers from &#39;legacy/helpers&#39;</code> là cấm</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"no-restricted-imports\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"patterns\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"legacy/*\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://addyosmani.com/blog/disallow-imports/\">Disallow large imports from JavaScript projects</a></p>\n"}},{"node":{"title":"5 điều cần nhớ khi làm việc với service worker","path":"/5-dieu-can-nho-khi-lam-viec-voi-service-worker/","date":"20. February 2019","timeToRead":2,"desc":"Năm điều nhỏ nhỏ, nhưng rất hay ho cần thiết, cần biết","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#%C4%91%E1%BA%B7t-file-service-worker-trong-th%C6%B0-m%E1%BB%A5c-root\">Đặt file service worker trong thư mục root</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-panel-application-tr%C3%AAn-chrome-dev-tools\">Sử dụng Panel Application trên Chrome Dev Tools</a></li>\n<li><a href=\"#kh%C3%B4ng-s%E1%BB%AD-d%E1%BB%A5ng-hard-reload\">Không sử dụng Hard Reload</a></li>\n<li><a href=\"#b%E1%BA%ADt-update-on-reload\">Bật \"Update on Reload\"</a></li>\n<li><a href=\"#inspect-v%C3%A0-manual-delete-cache\">Inspect và manual delete cache</a></li>\n</ul>\n<!-- /TOC -->\n<p>Nếu chưa biết <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Service worker API</a> là gì, bạn hãy vào đọc lại link mình đã gắn sẵn</p>\n<h2 id=\"đặt-file-service-worker-trong-thư-mục-root\"><a href=\"#%C4%91%E1%BA%B7t-file-service-worker-trong-th%C6%B0-m%E1%BB%A5c-root\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đặt file service worker trong thư mục root</h2>\n<p><img src=\"https://cms-assets.tutsplus.com/uploads/users/53/posts/31424/image/rootdir.jpg\" alt=\"5 điều cần nhớ khi làm việc với service worker\"></p>\n<p>Đừng thấy file service worker là js mà bạn đi bỏ nào trong thư mục <em>js</em> hay <em>scripts</em>, bởi vì file service worker bỏ vào thư mục nó sẽ bị giới hạn hoạt động ở trong thư mục <em>js</em> đó thôi. Nghĩa là nó chỉ can thiệp được khi user truy cập <code class=\"language-text\">www.yoursite.com/js/</code>, tất cả request từ <code class=\"language-text\">www.yoursite.com</code> hay <code class=\"language-text\">www.yoursite.com/news</code> nó sẽ cho qua.</p>\n<p>Tuy nhiên, chúng ta có thể thay đổi scope này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token dom variable\">navigator</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">serviceWorker</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/sw.js'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n scope<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nhưng thật lòng mà nói, bỏ luôn trong thư mục root có phải dễ chịu không, nó tự động handle toàn bộ request ở cả site luôn cho khỏe</p>\n<h2 id=\"sử-dụng-panel-application-trên-chrome-dev-tools\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-panel-application-tr%C3%AAn-chrome-dev-tools\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Panel Application trên Chrome Dev Tools</h2>\n<p><img src=\"https://cms-assets.tutsplus.com/uploads/users/53/posts/31424/image/applicationstab.jpg\" alt=\"5 điều cần nhớ khi làm việc với service worker\"></p>\n<p>Trên tab này chúng ta sẽ biết được mình đã đăng ký file service worker thành công chưa, giả lập offline, bypass cái service worker hoặc gỡ bỏ luôn.</p>\n<h2 id=\"không-sử-dụng-hard-reload\"><a href=\"#kh%C3%B4ng-s%E1%BB%AD-d%E1%BB%A5ng-hard-reload\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Không sử dụng Hard Reload</h2>\n<p><img src=\"https://cms-assets.tutsplus.com/uploads/users/53/posts/31424/image/donthardreload.jpg\" alt=\"5 điều cần nhớ khi làm việc với service worker\"></p>\n<p>Một trong những thói quen của chúng ta là dùng \"Hard Reload\" hay \"Empty Cache and Hard Reload\" trên trình duyệt để xem những thay đổi mới nhất. Tuy nhiên là khi có service worker rồi, nó sẽ tự động bypass vụ \"Hard Reload\" này. Tip tiếp theo sẽ chỉ bạn cách làm ngay thôi</p>\n<h2 id=\"bật-update-on-reload\"><a href=\"#b%E1%BA%ADt-update-on-reload\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bật \"Update on Reload\"</h2>\n<p><img src=\"https://cms-assets.tutsplus.com/uploads/users/53/posts/31424/image/updateonreload.jpg\" alt=\"5 điều cần nhớ khi làm việc với service worker\"></p>\n<p>Để đảm bảo luôn luôn lấy file mới nhất, trên tab <strong>Application</strong> check vào ô <strong>Update on Reload</strong> là xong. Như vậy thì khi thực hiện reload trang (reload bình thường luôn ấy) trình duyệt tự động update cái service worker luôn.</p>\n<p>Còn muốn thực hiện manual, click vào link <strong>Update</strong> bên dưới màn hình này.</p>\n<h2 id=\"inspect-và-manual-delete-cache\"><a href=\"#inspect-v%C3%A0-manual-delete-cache\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Inspect và manual delete cache</h2>\n<p>Cuối cùng, cũng hay, là trên tab <strong>Application</strong> cho phép chúng ta xóa chỉ định <strong>cụ thể</strong> file cache nào muốn xóa. Cột bên trái, mục <strong>Cache Storage</strong>, click nút expand, bạn sẽ thấy danh sách cache object đang được lưu trên trang này</p>\n<p><img src=\"https://cms-assets.tutsplus.com/uploads/users/53/posts/31424/image/inspectcache.jpg\" alt=\"5 điều cần nhớ khi làm việc với service worker\"></p>\n<p>Muốn xóa? Đơn giản click phải chọn <strong>Delete</strong></p>\n<p><img src=\"https://cms-assets.tutsplus.com/uploads/users/53/posts/31424/image/manuallydeletecache.jpg\" alt=\"5 điều cần nhớ khi làm việc với service worker\"></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://webdesign.tutsplus.com/tutorials/5-essential-tips-for-service-worker-development--cms-31424\">5 Essential Tips for Service Worker Development</a></p>\n"}},{"node":{"title":"Convert giá trị String qua Number trong Javascript","path":"/convert-gia-tri-string-qua-number-trong-javascript/","date":"30. January 2019","timeToRead":3,"desc":"Javascript rất lạ kỳ, convert giá trị String qua number cũng lắm nẻo dăm ba đường,nào NaN, nào radix. Bài này chúng ta cùng tìm hiểu parseFloat(), Number(), Number.isNaN(), isNaN()","content":"<p>Javascript rất lạ kỳ, convert giá trị String qua number cũng lắm nẻo dăm ba đường,nào NaN, nào radix. Bài này chúng ta cùng tìm hiểu parseFloat(), Number(), Number.isNaN(), isNaN()</p>\n<blockquote>\n<p>Một cách ngắn gọn, chúng ta nên dùng <code class=\"language-text\">Number(x)</code> để convert giá trị sang dạng number, hoặc <code class=\"language-text\">parseFloat(x)</code> nếu muốn chuẩn mực</p>\n</blockquote>\n<p>Để kiểm tra kết quả có convert được hay không, luôn dùng <code class=\"language-text\">Number.isNaN()</code>, <strong>không nên</strong> dùng phương thức global <code class=\"language-text\">isNaN()</code>.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'42'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'number'</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'42'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'number'</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre>\n<p>Sử dụng <code class=\"language-text\">Number(x)</code> sẽ có vài trường hợp đặc biệt, nó có thể là đúng cũng có thể là sai, tùy theo cách hiểu của chúng ta.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span></code></pre>\n<p>Rất nhiều dev sử dụng <code class=\"language-text\">+x</code> để convert giá trị <em>x</em> sang number. Theo như khai báo của javascript, <code class=\"language-text\">+x</code> sẽ tương tự như <code class=\"language-text\">Number(x)</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">+</span><span class=\"token string\">'42 fail'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">valueOf</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token string\">'42'</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">toString</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token string\">'42'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token string\">'     '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span></code></pre>\n<h2 id=\"cái-sai-của-numberx\"><a href=\"#c%C3%A1i-sai-c%E1%BB%A7a-numberx\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cái sai của <code class=\"language-text\">Number(x)</code></h2>\n<p><code class=\"language-text\">Number(x)</code> và <code class=\"language-text\">parseFloat(x)</code> xử trí các tình huống đặc biệt rất khác nhau, <code class=\"language-text\">parseFloat()</code> <em>có vẻ</em> dễ giải hơn khi chấp nhận một số kiểu String</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'42 fail'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'42 fail'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 42</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'42 fail'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 42</span>\n\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'    10'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n<span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'    10'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'    10'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span></code></pre>\n<p>Đừng thấy vậy mà kết luận rằng <code class=\"language-text\">Number(x)</code> chuẩn mực và an toàn hơn. Thực ra, <code class=\"language-text\">Number(x)</code> hay lấn cấn khi string chứa khoảng trắng, <code class=\"language-text\">null</code>,  và một số tính huống khác. Nó convert khá nhiều trường hợp sang 0.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'        '</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">toString</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">valueOf</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token string\">'  '</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span></code></pre>\n<p>Nguyên tắc làm việc của <code class=\"language-text\">parseFloat()</code> đơn giản và dễ đoán hơn. Cắt hết khoảng trắng, rồi kiểm tra với một regular expression được quy ước để lấy giá trị số dài nhất trong chuỗi.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// parseInt hoạt động tương tự</span>\n<span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'    '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">toString</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">valueOf</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token string\">'  '</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span></code></pre>\n<h2 id=\"numberisnan-và-isnan\"><a href=\"#numberisnan-v%C3%A0-isnan\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Number.isNaN() và isNaN()</h2>\n<p>Javascript sẽ ko quăng lỗi nếu nó ko convert được giá trị sang number, nó trả về một giá trị đặc biệt gọi là <code class=\"language-text\">NaN</code> (not a number). Và vẫn chưa đủ độ huyền bí, nếu kiểm tra <code class=\"language-text\">typeof</code> của một giá trị là <code class=\"language-text\">NaN</code> chúng ta nhận được 'number`. Nực cười quá mà.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'number'</span></code></pre>\n<p>Lý do cho sự có mặt của <code class=\"language-text\">Number.isNaN()</code> và <code class=\"language-text\">isNaN()</code> là vì <code class=\"language-text\">==</code> và <code class=\"language-text\">===</code> không chạy đúng trên giá trị <code class=\"language-text\">NaN</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token number\">NaN</span> <span class=\"token operator\">===</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre>\n<p><code class=\"language-text\">Number.isNaN()</code> là một hàm mới được bổ sung trong ES6, tuy nhiên ko nhận được nhiều sự quan tâm. Chúng ta nên tập sử dụng <code class=\"language-text\">Number.isNaN()</code> thay cho <code class=\"language-text\">isNaN()</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre>\n<p>Một cách dễ hình dung sự khác nhau, nếu <code class=\"language-text\">Number.isNaN()</code> là so sánh <code class=\"language-text\">===</code> thì <code class=\"language-text\">isNaN()</code> là so sánh <code class=\"language-text\">==</code></p>\n<p>Thằng <code class=\"language-text\">isNaN()</code> nó sẽ convert giá trị qua number trước, rồi mới đem đi so sánh kết quả.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>‘fail’<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isNaN</span><span class=\"token punctuation\">(</span>‘fail’<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre>\n<p>Nói cách khác, nếu giá trị x không phải kiểu number, thì <code class=\"language-text\">Number.isNaN(x)</code> sẽ là false</p>\n<p>Cái polyfill cho <code class=\"language-text\">Number.isNaN()</code> được hiện thực đơn giản như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">isNaN</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://thecodebarbarian.com/convert-a-string-to-a-number-in-javascript.html\n\">Convert a String to a Number in JavaScript</a></p>\n"}},{"node":{"title":"15 ví dụ sử dụng map, reduce và filter","path":"/15-vi-du-su-dung-map-reduce-va-filter/","date":"28. January 2019","timeToRead":5,"desc":"Nếu đang muốn tìm những ví dụ thực tế sử dụng map và reduce, quá chán với ví dụ cộng số, bài viết này chính là dành cho bạn.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#x%C3%B3a-ph%E1%BA%A7n-t%E1%BB%AD-tr%C3%B9ng-trong-m%E1%BA%A3ng\">Xóa phần tử trùng trong mảng</a></li>\n<li><a href=\"#ph%C6%B0%C6%A1ng-th%E1%BB%A9c-search-%C4%91%C6%A1n-gi%E1%BA%A3n-ph%C3%A2n-bi%E1%BB%87t-hoa-th%C6%B0%E1%BB%9Dng\">Phương thức search đơn giản, phân biệt hoa thường</a></li>\n<li><a href=\"#search-%C4%91%C6%A1n-gi%E1%BA%A3n-kh%C3%B4ng-ph%E1%BA%A7n-bi%E1%BB%87t-hoa-th%C6%B0%E1%BB%9Dng\">Search đơn giản, không phần biệt hoa thường</a></li>\n<li><a href=\"#ki%E1%BB%83m-tra-user-c%C3%B3-n%E1%BA%B1m-trong-group-admin-kh%C3%B4ng\">Kiểm tra user có nằm trong group admin không</a></li>\n<li><a href=\"#gi%E1%BA%A3m-s%E1%BB%91-chi%E1%BB%81u-c%E1%BB%A7a-m%E1%BA%A3ng\">Giảm số chiều của mảng</a></li>\n<li><a href=\"#t%E1%BA%A1o-m%E1%BB%99t-object-ch%E1%BB%A9a-1-key-%C4%91%C6%B0%E1%BB%A3c-t%C3%ADnh-to%C3%A1n\">Tạo một object chứa 1 key được tính toán</a></li>\n<li><a href=\"#t%E1%BA%A1o-m%E1%BB%99t-object-t%E1%BB%AB-m%E1%BA%A3ng\">Tạo một object từ mảng</a></li>\n<li><a href=\"#l%E1%BA%A5y-gi%C3%A1-tr%E1%BB%8B-unique-c%E1%BB%A7a-c%C3%A1c-item-trong-m%E1%BB%99t-m%E1%BA%A3ng\">Lấy giá trị unique của các item trong một mảng</a></li>\n<li><a href=\"#%C4%91%E1%BA%A3o-gi%C3%A1-tr%E1%BB%8B-key-value-trong-object\">Đảo giá trị key-value trong object</a></li>\n<li><a href=\"#chuy%E1%BB%83n-%C4%91%E1%BB%95i-m%E1%BA%A3ng-ch%E1%BB%A9a-gi%C3%A1-tr%E1%BB%8B-%C4%91%E1%BB%99-f-sang-gi%C3%A1-tr%E1%BB%8B-%C4%91%E1%BB%99-c\">Chuyển đổi mảng chứa giá trị độ F sang giá trị độ C</a></li>\n<li><a href=\"#chuy%E1%BB%83n-object-th%C3%A0nh-query-string\">Chuyển object thành query string</a></li>\n<li><a href=\"#echo-ra-b%E1%BA%A3ng-gi%C3%A1-tr%E1%BB%8B-d%E1%BB%AF-li%E1%BB%87u\">Echo ra bảng giá trị dữ liệu</a></li>\n<li><a href=\"#t%C3%ACm-v%C3%A0-thay-th%E1%BA%BF-key-value-trong-m%E1%BB%99t-m%E1%BA%A3ng-object\">Tìm và thay thế key-value trong một mảng object</a></li>\n<li><a href=\"#union-hay-m%E1%BA%A3ng\">Union hay mảng</a></li>\n<li><a href=\"#l%E1%BA%A5y-k%E1%BA%BFt-qu%E1%BA%A3-giao-nhau-gi%E1%BB%AFa-2-m%E1%BA%A3ng\">Lấy kết quả giao nhau giữa 2 mảng</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"xóa-phần-tử-trùng-trong-mảng\"><a href=\"#x%C3%B3a-ph%E1%BA%A7n-t%E1%BB%AD-tr%C3%B9ng-trong-m%E1%BA%A3ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xóa phần tử trùng trong mảng</h2>\n<p>Bạn có một mảng String, Number, giờ chúng ta xóa đi các phần tử bị trùng giá trị. Chúng ta sử dụng <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">kiểu Set</a> để đạt được mục đích này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> uniqueValues <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// uniqueValues [3,1,5,2,4]</span></code></pre>\n<h2 id=\"phương-thức-search-đơn-giản-phân-biệt-hoa-thường\"><a href=\"#ph%C6%B0%C6%A1ng-th%E1%BB%A9c-search-%C4%91%C6%A1n-gi%E1%BA%A3n-ph%C3%A2n-bi%E1%BB%87t-hoa-th%C6%B0%E1%BB%9Dng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phương thức search đơn giản, phân biệt hoa thường</h2>\n<p>Chúng ta dùng hàm <code class=\"language-text\">filter</code> để tạo mảng mới, với điều kiện phần tử đó <code class=\"language-text\">includes</code> một String hoặc thỏa một expression</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Adam'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> group<span class=\"token operator\">:</span> <span class=\"token string\">'editor'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">47</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> group<span class=\"token operator\">:</span> <span class=\"token string\">'admin'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">85</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'William'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> group<span class=\"token operator\">:</span> <span class=\"token string\">'editor'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">97</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Oliver'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> group<span class=\"token operator\">:</span> <span class=\"token string\">'admin'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">it</span> <span class=\"token arrow operator\">=></span> it<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'oli'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// res is []</span></code></pre>\n<h2 id=\"search-đơn-giản-không-phần-biệt-hoa-thường\"><a href=\"#search-%C4%91%C6%A1n-gi%E1%BA%A3n-kh%C3%B4ng-ph%E1%BA%A7n-bi%E1%BB%87t-hoa-th%C6%B0%E1%BB%9Dng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Search đơn giản, không phần biệt hoa thường</h2>\n<p>Chúng ta dùng <code class=\"language-text\">RegExp</code> để lọc theo điều kiện</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">it</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'oli'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// res is</span>\n<span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">97</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Oliver'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> group<span class=\"token operator\">:</span> <span class=\"token string\">'admin'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre>\n<h2 id=\"kiểm-tra-user-có-nằm-trong-group-admin-không\"><a href=\"#ki%E1%BB%83m-tra-user-c%C3%B3-n%E1%BA%B1m-trong-group-admin-kh%C3%B4ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kiểm tra user có nằm trong group admin không</h2>\n<p>Dùng phương thức <code class=\"language-text\">some()</code> để kiểm tra có ít nhất một element trong mảng thỏa điều kiện đặt ra</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> hasAdmin <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token arrow operator\">=></span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">group</span> <span class=\"token operator\">===</span> ‘admin’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// hasAdmin is true</span></code></pre>\n<h2 id=\"giảm-số-chiều-của-mảng\"><a href=\"#gi%E1%BA%A3m-s%E1%BB%91-chi%E1%BB%81u-c%E1%BB%A7a-m%E1%BA%A3ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giảm số chiều của mảng</h2>\n<p>Nếu chúng ta có một mảng [...[], ...[1,2,3]], và chúng ta muốn transform nó thành [1,2,3]</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> nested <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> flat <span class=\"token operator\">=</span> nested<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> it</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>acc<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>it<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// kết quả: [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></code></pre>\n<p>Ở đây chúng ta không có quan tâm đến performance, nên dùng luôn spread operator bên trong <code class=\"language-text\">reduce()</code>.</p>\n<p>Còn đây là cách của Paweł Wolak, không sử dụng <code class=\"language-text\">Array.reduce</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> flat <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nested<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"tạo-một-object-chứa-1-key-được-tính-toán\"><a href=\"#t%E1%BA%A1o-m%E1%BB%99t-object-ch%E1%BB%A9a-1-key-%C4%91%C6%B0%E1%BB%A3c-t%C3%ADnh-to%C3%A1n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tạo một object chứa 1 key được tính toán</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Adam'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> group<span class=\"token operator\">:</span> <span class=\"token string\">'editor'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">47</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> group<span class=\"token operator\">:</span> <span class=\"token string\">'admin'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">85</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'William'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> group<span class=\"token operator\">:</span> <span class=\"token string\">'editor'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">97</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Oliver'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> group<span class=\"token operator\">:</span> <span class=\"token string\">'admin'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> groupByAge <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> it</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span>acc<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span><span class=\"token property-access\">age</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span><span class=\"token property-access\">age</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"tạo-một-object-từ-mảng\"><a href=\"#t%E1%BA%A1o-m%E1%BB%99t-object-t%E1%BB%AB-m%E1%BA%A3ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tạo một object từ mảng</h2>\n<p>Thay vì tiến hành trên cả array để tìm user theo id, chúng ta tạo một object mới, trong đó user id sẽ là key của object này, truy xuất sẽ nhanh hơn.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> uTable <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> it</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span>acc<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> it <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// kết quả</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token number\">11</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Adam'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> group<span class=\"token operator\">:</span> <span class=\"token string\">'editor'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">47</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">47</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> group<span class=\"token operator\">:</span> <span class=\"token string\">'admin'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">85</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">85</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'William'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> group<span class=\"token operator\">:</span> <span class=\"token string\">'editor'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">97</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">97</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Oliver'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> group<span class=\"token operator\">:</span> <span class=\"token string\">'admin'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"lấy-giá-trị-unique-của-các-item-trong-một-mảng\"><a href=\"#l%E1%BA%A5y-gi%C3%A1-tr%E1%BB%8B-unique-c%E1%BB%A7a-c%C3%A1c-item-trong-m%E1%BB%99t-m%E1%BA%A3ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lấy giá trị unique của các item trong một mảng</h2>\n<p>Chúng ta có mảng user, mỗi user có thuộc vào một group khác nhau, chúng ta sẽ lấy tất cả group đang tồn tại trong mảng <code class=\"language-text\">user</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> listOfUserGroups <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">it</span> <span class=\"token arrow operator\">=></span> it<span class=\"token punctuation\">.</span><span class=\"token property-access\">group</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// kết quả: listOfUserGroups is ['editor', 'admin'];</span></code></pre>\n<h2 id=\"đảo-giá-trị-key-value-trong-object\"><a href=\"#%C4%91%E1%BA%A3o-gi%C3%A1-tr%E1%BB%8B-key-value-trong-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đảo giá trị key-value trong object</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> cities <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token maybe-class-name\">Lyon</span><span class=\"token operator\">:</span> <span class=\"token string\">'France'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">Berlin</span><span class=\"token operator\">:</span> <span class=\"token string\">'Germany'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">Paris</span><span class=\"token operator\">:</span> <span class=\"token string\">'France'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> countries <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>cities<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> k</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">[</span>cities<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">[</span>cities<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> acc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// countries is</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token maybe-class-name\">France</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Lyon\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Paris\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">Germany</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Berlin\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu đoạn code trên quá phức tạp, quá khó hiểu, viết lại như thế này cho dễ dòm hơn</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> countries <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>cities<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> k</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> country <span class=\"token operator\">=</span> cities<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  acc<span class=\"token punctuation\">[</span>country<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">[</span>country<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"chuyển-đổi-mảng-chứa-giá-trị-độ-f-sang-giá-trị-độ-c\"><a href=\"#chuy%E1%BB%83n-%C4%91%E1%BB%95i-m%E1%BA%A3ng-ch%E1%BB%A9a-gi%C3%A1-tr%E1%BB%8B-%C4%91%E1%BB%99-f-sang-gi%C3%A1-tr%E1%BB%8B-%C4%91%E1%BB%99-c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chuyển đổi mảng chứa giá trị độ F sang giá trị độ C</h2>\n<p>Có thể áp dụng để chuyển đổi tiền tệ, khối lượng, …</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> celsius <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> fahrenheit <span class=\"token operator\">=</span> celsius<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span> <span class=\"token arrow operator\">=></span> t <span class=\"token operator\">*</span> <span class=\"token number\">1.8</span> <span class=\"token operator\">+</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// kết quả [5, 23, 32, 50, 60.8, 68, 75.2, 89.6]</span></code></pre>\n<h2 id=\"chuyển-object-thành-query-string\"><a href=\"#chuy%E1%BB%83n-object-th%C3%A0nh-query-string\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chuyển object thành query string</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>lat<span class=\"token operator\">:</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> lng<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> alt<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> queryString <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'='</span> <span class=\"token operator\">+</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// kết quả \"lat=45&amp;lng=6&amp;alt=1000\"</span></code></pre>\n<h2 id=\"echo-ra-bảng-giá-trị-dữ-liệu\"><a href=\"#echo-ra-b%E1%BA%A3ng-gi%C3%A1-tr%E1%BB%8B-d%E1%BB%AF-li%E1%BB%87u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Echo ra bảng giá trị dữ liệu</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Adam'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> group<span class=\"token operator\">:</span> <span class=\"token string\">'editor'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">47</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> group<span class=\"token operator\">:</span> <span class=\"token string\">'admin'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">85</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'William'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> group<span class=\"token operator\">:</span> <span class=\"token string\">'editor'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">97</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Oliver'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> group<span class=\"token operator\">:</span> <span class=\"token string\">'admin'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nusers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> group<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>group<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// kết quả</span>\n\"\n<span class=\"token number\">11</span> <span class=\"token number\">23</span> editor\n<span class=\"token number\">47</span> <span class=\"token number\">28</span> admin\n<span class=\"token number\">85</span> <span class=\"token number\">34</span> editor\n<span class=\"token number\">97</span> <span class=\"token number\">28</span> admin\"</code></pre>\n<h2 id=\"tìm-và-thay-thế-key-value-trong-một-mảng-object\"><a href=\"#t%C3%ACm-v%C3%A0-thay-th%E1%BA%BF-key-value-trong-m%E1%BB%99t-m%E1%BA%A3ng-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tìm và thay thế key-value trong một mảng object</h2>\n<p>Ví dụ chúng ta đổi giá trị tuổi của một user <code class=\"language-text\">users[1].age = 29</code>, đó là trong trường hợp ta biết giá trị index user muốn đổi, chúng ta tạo hẳn một mảng mới và thay đổi giá trị của phần tử mong muốn. Tại sao lại làm vậy? Để chúng ta có thể so sánh nhanh <code class=\"language-text\">updatedUsers == user</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> updatedUsers <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">p</span> <span class=\"token arrow operator\">=></span> p<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">!==</span> <span class=\"token number\">47</span> <span class=\"token operator\">?</span> p <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span>p<span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> p<span class=\"token punctuation\">.</span><span class=\"token property-access\">age</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"union-hay-mảng\"><a href=\"#union-hay-m%E1%BA%A3ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Union hay mảng</h2>\n<p>Không cần union của ladash, chúng ta dùng <code class=\"language-text\">Set</code> để giải quyết vấn đề này.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arrA <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> arrB <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>arrA<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>arrB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// kết quả: [1, 4, 3, 2, 5, 6, 7]</span></code></pre>\n<h2 id=\"lấy-kết-quả-giao-nhau-giữa-2-mảng\"><a href=\"#l%E1%BA%A5y-k%E1%BA%BFt-qu%E1%BA%A3-giao-nhau-gi%E1%BB%AFa-2-m%E1%BA%A3ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lấy kết quả giao nhau giữa 2 mảng</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arrA <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> arrB <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\narrA<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">it</span> <span class=\"token arrow operator\">=></span> arrB<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// kết quả: [1,2]</span></code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.com/@alex.permyakov/15-useful-javascript-examples-of-map-reduce-and-filter-74cbbb5e0a1f\n\">15 Useful JS Examples of map(), reduce() and filter()</a></p>\n"}},{"node":{"title":"Tổng kết một năm của thế giới FrontEnd","path":"/tong-ket-mot-nam-cua-the-gioi-front-end/","date":"9. January 2019","timeToRead":5,"desc":"Thế giới lập trình Frontend nhiều biến chuyển, nhanh chóng mặt, chúng ta cùng điểm lại những tin tức, sự kiện, xu hướng nổi bật nhất trong năm 2018 vừa qua","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#webassembly-ra-b%E1%BA%A3n-10\">WebAssembly ra bản 1.0</a></li>\n<li><a href=\"#top-download-tr%C3%AAn-npm\">Top download trên NPM</a></li>\n<li><a href=\"#graphql-ph%C3%A1t-tri%E1%BB%83n-%C4%91%C6%B0%E1%BB%A3c-ch%E1%BB%9D-%C4%91%E1%BB%A3i-nh%C6%B0ng-ch%C6%B0a-th%E1%BB%83-thay-th%E1%BA%BF-rest\">GraphQL phát triển, được chờ đợi nhưng chưa thể thay thế REST</a></li>\n<li><a href=\"#css-in-js-mu%C3%B4n-h%C3%ACnh-mu%C3%B4n-v%E1%BA%BB\">CSS-in-JS muôn hình muôn vẻ</a></li>\n<li><a href=\"#developer-tin-d%C3%B9ng-nh%E1%BB%AFng-b%E1%BB%99-cli-c%C3%B3-s%E1%BA%B5n\">Developer tin dùng những bộ CLI có sẵn</a></li>\n<li><a href=\"#static-site-generator-ph%C3%A1t-tri%E1%BB%83n-%C4%91em-%C4%91%E1%BA%BFn-s%E1%BB%B1-%C4%91%C6%A1n-gi%E1%BA%A3n-qu%C3%A1-cho-frontend-v%C3%A0-t%E1%BB%91i-%C6%B0u-performance\">Static site generator phát triển đem đến sự đơn giản quá cho Frontend và tối ưu performance</a></li>\n<li><a href=\"#serverless-v%C3%A0-jamstack\">Serverless và JAMStack</a></li>\n<li><a href=\"#vs-code-tr%E1%BB%9F-th%C3%A0nh-%C3%B4ng-vua-m%E1%BB%9Bi-c%E1%BB%A7a-text-editoride\">VS Code trở thành ông vua mới của Text Editor/IDE</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"webassembly-ra-bản-10\"><a href=\"#webassembly-ra-b%E1%BA%A3n-10\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>WebAssembly ra bản 1.0</h2>\n<p>WebAssembly thường được nhắc đến như là tương lai của web. Performance cao nhất, giảm kích thước file, cho phép phát triển web trên nhiều ngôn ngữ.\nCuối năm 2017 các trình duyệt thông báo sẽ hỗ trợ WebAssembly. Tháng 3 2018, WebAssembly công bố 3 release quan trọng</p>\n<ul>\n<li><a href=\"https://www.w3.org/TR/wasm-core-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The core specification released 1.0</a></li>\n<li><a href=\"https://www.w3.org/TR/wasm-js-api-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript interface for WebAssembly</a></li>\n<li><a href=\"https://www.w3.org/TR/wasm-web-api-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web API for WebAssembly</a></li>\n</ul>\n<h2 id=\"top-download-trên-npm\"><a href=\"#top-download-tr%C3%AAn-npm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Top download trên NPM</h2>\n<p>React, jQuery, Angular, Vue là 4 thư viện được download nhiều nhất.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*e036ugWPXTbBzMTSRsXiEw.png\" alt=\"Tổng kết một năm của thế giới FrontEnd\"></p>\n<p>React chiếm ưu thế tuyệt đối trong năm vừa qua, đồng thời nó tiếp tục là thư viện được yêu thích nhất theo như khảo sát của <a href=\"https://insights.stackoverflow.com/survey/2018/#most-loved-dreaded-and-wanted\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stackoverlow</a></p>\n<p>Team phát triển chính của React rất tích cực cập nhập và bổ sung tính năng mới. Trong năm 2018, chúng ta đã thấy rất nhiều thứ được thêm vào trong React 16, các phương thức lifecycle mới, context API mới, pointer event, hàm lazy, React.memo. Tuy nhiên 2 tính năng được cộng động quan tâm lớn nhất là React hook và Suspense API</p>\n<p>React Hook nhận được rất nhiều phản hồi tích cực. Hook cho phép thêm <code class=\"language-text\">state</code> trong một function component với hàm <code class=\"language-text\">useState</code>, đồng thời quản lý sự kiện lifecycle</p>\n<p>Video của Ryan Florence giới thiệu sử dụng React Hook giúp code sạch hơn 90%</p>\n<iframe width=\"700\" height=\"393\" src=\"https://www.youtube.com/embed/wXLf18DsV-I\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\nReact Suspense cho phép quản lý data fetch bên trong React component. Nó sẽ *đợi* dữ liệu trả về từ một async response (dữ liệu từ việc call api) trước khi render. Trong tương lai, tham vọng của nó sẽ là đảm nhiệm quản lý toàn bộ việc load dữ liệu từ API và cache dữ liệu này.\n<iframe width=\"700\" height=\"393\" src=\"https://www.youtube.com/embed/nLF0n9SACd4\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p>Vue tiếp tục phát triển và vượt React về số lượt Star trên Github</p>\n<p>Sau khi được giới thiệu năm 2017, Vue tiếp tục phát triển lớn mạnh trong 2018. Tuy vậy cũng nên biết là nó vẫn còn phía sau React và Angular về số lượng project sử dụng thực tế. Thư viện Vue sẽ còn tiếp tục phát triển trong nhiều năm tới và sẽ không bị mất hút trước sự lớn mạnh của React.</p>\n<p>Angular tiếp tục được cập nhập với phiên bản 7\nTháng 10, Angular chính thức ra phiên bản thứ 7. Mặc dù không được cộng đồng fan lớn như React hay Vue, nó là lựa chọn phổ biến cho các dự án <em>chính quy</em>. Rất nhiều dev sau khi sử dụng React nhận ra một điều là, để có một ứng dụng hoàn thiện bằng React, phụ thuộc rất nhiều và các thư viện nguồn mở khác. Mỗi thư viện như vậy là được code bởi những cá nhân hoặc tập thể mà kiến trúc của nó tùy thuộc rất nhiều vào nhóm phát triển đó.</p>\n<p>Trong khí đó, Angular sẽ gạt bỏ những tư duy và cách code không theo chuẩn mực chung. Angular có thể xem là một framework mà tư duy lập trình khá ràng buộc và nhất quán.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*SXOEH2cmEaC9SBHNp-nvtA.png\" alt=\"Tổng kết một năm của thế giới FrontEnd\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*SXOEH2cmEaC9SBHNp-nvtA.png\" alt=\"Tổng kết một năm của thế giới FrontEnd\"></p>\n<h2 id=\"graphql-phát-triển-được-chờ-đợi-nhưng-chưa-thể-thay-thế-rest\"><a href=\"#graphql-ph%C3%A1t-tri%E1%BB%83n-%C4%91%C6%B0%E1%BB%A3c-ch%E1%BB%9D-%C4%91%E1%BB%A3i-nh%C6%B0ng-ch%C6%B0a-th%E1%BB%83-thay-th%E1%BA%BF-rest\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GraphQL phát triển, được chờ đợi nhưng chưa thể thay thế REST</h2>\n<p>GraphQL được sự quan tâm của nhiều ông lớn, như Github. Tuy nhiên nó vẫn chưa thay thế REST như người ta đã dự đoán. Theo thống kê, chỉ 1/5 frontend developer đã từng sử dụng GraphQL, mặc dù 62,5% đã nghe và muốn học nó.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*m6vDkicw6EUt8uc6EhcXAQ.png\" alt=\"Tổng kết một năm của thế giới FrontEnd\"></p>\n<h2 id=\"css-in-js-muôn-hình-muôn-vẻ\"><a href=\"#css-in-js-mu%C3%B4n-h%C3%ACnh-mu%C3%B4n-v%E1%BA%BB\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CSS-in-JS muôn hình muôn vẻ</h2>\n<p>Làm web có xu hướng đưa toàn bộ xuống javascript, CSS-chung-nhà-với-JS vì thế cũng được nhiều quan tâm, ra đời nhiều kiểu tích hợp.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Component JS file</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">MyComp</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> isActive <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> isActive <span class=\"token operator\">?</span> <span class=\"token string\">'active'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'inactive'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">HI</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// CSS file</span>\n<span class=\"token punctuation\">.</span><span class=\"token property-access\">active</span> <span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> green<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token property-access\">inactive</span> <span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> red<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>Với CSS-ịn-JS bạn không còn quản lý các class CSS nữa, chúng ta truyền prop vào cho các styled component, nó sẽ xử lý việc cập nhập style.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Header</span> <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span><span class=\"token property-access\">div</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token css language-css\">\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> isActive <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> isActive <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token punctuation\">;</span>\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">MyComp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isActive <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Header</span></span> <span class=\"token attr-name\">isActive</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isActive<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">HI</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Header</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>2 thư viện nổi đình nổi đám là <a href=\"https://www.styled-components.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">styled-components</a> và <a href=\"https://emotion.sh/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">emotion</a>. Styled-component ra đời sớm hơn và nhiều người sử dụng hơn, Emotion cũng là một đối thủ vươn lên mạnh mẽ.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*WfbUcGwcI4hmuD80S9XsCg.png\" alt=\"Tổng kết một năm của thế giới FrontEnd\"></p>\n<p>Vue cũng hỗ trợ <em>scoped</em> CSS mà ko cần cài thêm bất cứ package gì. Chỉ việc gắn thêm attribute scoped vào là CSS đó sẽ <em>bám dính</em> lấy component đang định nghĩa.</p>\n<h2 id=\"developer-tin-dùng-những-bộ-cli-có-sẵn\"><a href=\"#developer-tin-d%C3%B9ng-nh%E1%BB%AFng-b%E1%BB%99-cli-c%C3%B3-s%E1%BA%B5n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Developer tin dùng những bộ CLI có sẵn</h2>\n<p>Không có gì ngạc nhiên khi việc cập nhập các thư viện mới nhất, các configure mới nhất, lựa chọn kiến trúc tốt nhất luôn là vấn đề mệt mỏi. Khó khăn này được giải quyết bằng những package CLI cho phép developer tập trung vào viết logic của app. Next.js, Create-React-App, Nuxt.js, Vue CLI, Expo CLI, Angular là những cái tên được dùng nhiều nhất.</p>\n<h2 id=\"static-site-generator-phát-triển\"><a href=\"#static-site-generator-ph%C3%A1t-tri%E1%BB%83n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Static site generator phát triển</h2>\n<p>Ai cũng thích học những công nghệ tiên tiến, những thư viện mới nhất của javascript, tuy nhiên chúng ta cũng nhận ra rằng, không phải tất cả các website điều cần đến một single page app phức tạp. Đó là nguồn gốc của những công cụ phát triển static site.</p>\n<p>Static site đem đến các website đơn giản, đảm bảo hiệu năng tốt nhất. Với HTML được render lúc build, chúng ta có ngay một trang html gửi đến user mà không cần server side render, cho phép load trang gần như ngay lập tức. Các file javascript được download cho phép trải nghiệm tương tự như một single page app.</p>\n<p>Những cái tên như <a href=\"https://www.gatsbyjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gatsby</a>, <a href=\"https://github.com/nozzle/react-static\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Static</a>, <a href=\"https://vuepress.vuejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VuePress</a>. Sự phổ biến của những trang static như vậy được minh chứng bằng việc Gatsby đã thành lập hẳn một công ty và được rót vốn phát triển trong năm qua</p>\n<h2 id=\"serverless-và-jamstack\"><a href=\"#serverless-v%C3%A0-jamstack\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Serverless và JAMStack</h2>\n<p>Đi đôi với sự phổ biến của static site, chúng ta cũng thấy sự phát triển để bắt kịp trend ở phía server. Sự ra đời của JAMStack (javascript, APIs, Markup), trong năm 2018 chúng ta lần đầu có <a href=\"https://medium.freecodecamp.org/winners-from-the-2018-freecodecamp-jamstack-hackathon-at-github-2a39bd1db878\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JAMStack hackathon</a></p>\n<p>Để hiểu hơn một website JAMStack có thể scale đến mức nào mà vẫn có thể duy trì được performance, <a href=\"https://medium.com/@quincylarson\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Quincy Larson</a> có giải thích freecodecamp.org [sử dụng kiến trúc JAM]  như thế nào(<a href=\"https://www.freecodecamp.org/news/beaucarnes/freecodecamp-jamstack--i9ZVp23pm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.freecodecamp.org/news/beaucarnes/freecodecamp-jamstack--i9ZVp23pm</a>).</p>\n<h2 id=\"vs-code-trở-thành-ông-vua-mới-của-text-editoride\"><a href=\"#vs-code-tr%E1%BB%9F-th%C3%A0nh-%C3%B4ng-vua-m%E1%BB%9Bi-c%E1%BB%A7a-text-editoride\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>VS Code trở thành ông vua mới của Text Editor/IDE</h2>\n<p>Cuộc chiến tranh dành vị trí  Text editor và IDE yêu thích của mọi developer không có gì ngạc nhiên khi VS Code không có đối thủ</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*mLBjsSYDWEAdOy8pUjOjOg.png\" alt=\"Tổng kết một năm của thế giới FrontEnd\"></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://levelup.gitconnected.com/a-recap-of-frontend-development-in-2018-715724c9441d\n\">A Recap of Frontend Development in 2018</a></p>\n"}},{"node":{"title":"Tìm hiểu Currying function trong Javascript","path":"/tim-hieu-currying-function-trong-javascript/","date":"19. December 2018","timeToRead":3,"desc":"Bài viết này chúng ta sẽ tìm hiểu về cái cà-ri này, nó chạy ra sao, hữu dụng thế nào.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#th%E1%BA%BF-n%C3%A0o-g%E1%BB%8Di-l%C3%A0-carrying\">Thế nào gọi là Carrying?</a></li>\n<li><a href=\"#currying-c%C3%B3-h%E1%BB%AFu-d%E1%BB%A5ng-kh%C3%B4ng\">Currying có hữu dụng không?</a></li>\n<li><a href=\"#chuy%E1%BB%83n-b%E1%BA%A5t-c%E1%BB%A9-h%C3%A0m-n%C3%A0o-th%C3%A0nh-h%C3%A0m-currying\">Chuyển bất cứ hàm nào thành hàm Currying</a></li>\n</ul>\n<!-- /TOC -->\n<p>Bạn sẽ gặp kiểu lập trình truyền vào <strong>function như một argument</strong> (callback) cho một function khác không chỉ trong Javascript mà còn có thể thấy ở Haskell, Clojure, Erlang và Scala</p>\n<p>Việc sử dụng function như một argument đẻ ra thêm một số khái niệm khác: <strong>Pure function*, </strong>Currying<strong>, </strong>Higher-Order Function**</p>\n<h2 id=\"thế-nào-gọi-là-carrying\"><a href=\"#th%E1%BA%BF-n%C3%A0o-g%E1%BB%8Di-l%C3%A0-carrying\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thế nào gọi là Carrying?</h2>\n<p>Thay vì truyền vào cho function 1 lúc nhiều argument, chúng ta lại chuyển kiểu viết đó thành 1 function chỉ nhận 1 argument, nhưng bên trong đó chúng ta lòng các function con bên trong, và return về function con này.</p>\n<p>Ví dụ cho dễ hiểu hé. Đây là kiểu viết truyền nhiều argument ai cũng biết.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b <span class=\"token operator\">*</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span></code></pre>\n<p>Đây là phiên bản <em>cà-ry</em> của function <code class=\"language-text\">multiply</code> ở trên, kết quả cuối cùng cũng ko thay đổi.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b <span class=\"token operator\">*</span> c\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span></code></pre>\n<p>Bạn có thể chửi viết chi mà phức con mẹ nó tạp vậy, callback hell. Nhưng lợi ích của nó là giúp chúng ta gọi được hàm multiply theo kiểu <code class=\"language-text\">multiply(1)(2)(3)</code> thay vì `multiply(1,2,3). Vẫn chưa thấy lợi ích? Hy vọng viết thế này bạn sẽ thấy được công năng của nó</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mul1 <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mul2 <span class=\"token operator\">=</span> <span class=\"token function\">mul1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">mul2</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// result : 6</span></code></pre>\n<p>Tận dụng scope mà <code class=\"language-text\">mul2</code> có thể truy xuất đến kết quả của <code class=\"language-text\">mul1</code>. Dù đã được gọi nhưng kết quả của <code class=\"language-text\">multiply</code> sẽ ko <em>chết liền</em> mà vẫn tồn tại cho đến khi chạy đến lần gọi sau cùng.</p>\n<p>Bạn cũng có thể viết Currying function theo kiểu sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">volume</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b <span class=\"token operator\">*</span> c\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">volume</span><span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">volume</span><span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">390</span><span class=\"token punctuation\">,</span><span class=\"token number\">320</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">volume</span><span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">940</span><span class=\"token punctuation\">,</span><span class=\"token number\">340</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"currying-có-hữu-dụng-không\"><a href=\"#currying-c%C3%B3-h%E1%BB%AFu-d%E1%BB%A5ng-kh%C3%B4ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Currying có hữu dụng không?</h2>\n<p>Thí dụ bạn có một hàm để tính giá trị discount, giảm ngay 10% cho khách hàng thân thiết.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">discount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">price<span class=\"token punctuation\">,</span> discount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> price <span class=\"token operator\">*</span> discount\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Giảm ngay 50 đồng khi khách hàng đã tiêu 500 đồng.</span>\n<span class=\"token keyword\">const</span> price <span class=\"token operator\">=</span> <span class=\"token function\">discount</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// $50 </span>\n<span class=\"token comment\">// $500  - $50 = $450</span></code></pre>\n<p>Khách hàng tiêu tiền điên cuồng, chúng ta gọi hàm này say mê</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> price <span class=\"token operator\">=</span> <span class=\"token function\">discount</span><span class=\"token punctuation\">(</span><span class=\"token number\">1500</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// $150</span>\n<span class=\"token comment\">// $1,500 - $150 = $1,350</span>\n<span class=\"token keyword\">const</span> price <span class=\"token operator\">=</span> <span class=\"token function\">discount</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// $200</span>\n<span class=\"token comment\">// $2,000 - $200 = $1,800</span>\n<span class=\"token keyword\">const</span> price <span class=\"token operator\">=</span> <span class=\"token function\">discount</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// $5</span>\n<span class=\"token comment\">// $50 - $5 = $45</span>\n<span class=\"token keyword\">const</span> price <span class=\"token operator\">=</span> <span class=\"token function\">discount</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// $500</span>\n<span class=\"token comment\">// $5,000 - $500 = $4,500</span>\n<span class=\"token keyword\">const</span> price <span class=\"token operator\">=</span> <span class=\"token function\">discount</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// $30</span>\n<span class=\"token comment\">// $300 - $30 = $270</span></code></pre>\n<p>Chúng ta có thể đưa vào giá trị discount ở lần đầu tiên, đến các lần gọi tiếp theo, chúng ta ko cần truyền giá trị 10% này nữa</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">discount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">discount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">price</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> price <span class=\"token operator\">*</span> discount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> tenPercentDiscount <span class=\"token operator\">=</span> <span class=\"token function\">discount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">tenPercentDiscount</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// $50</span>\n<span class=\"token keyword\">const</span> twentyPercentDiscount <span class=\"token operator\">=</span> <span class=\"token function\">discount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">twentyPercentDiscount</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n<span class=\"token comment\">// $500 - $100 = $400</span>\n<span class=\"token function\">twentyPercentDiscount</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1000</span>\n<span class=\"token comment\">// $5,000 - $1,000 = $4,000</span>\n<span class=\"token function\">twentyPercentDiscount</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 200000</span>\n<span class=\"token comment\">// $1,000,000 - $200,000 = $600,000</span></code></pre>\n<p>Nói một cách ngắn gọn, khi cần truyền vào 1 argument ít thay đổi, cố định trong đa số các trường hợp, nghĩ đến carrying.</p>\n<h2 id=\"chuyển-bất-cứ-hàm-nào-thành-hàm-currying\"><a href=\"#chuy%E1%BB%83n-b%E1%BA%A5t-c%E1%BB%A9-h%C3%A0m-n%C3%A0o-th%C3%A0nh-h%C3%A0m-currying\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chuyển bất cứ hàm nào thành hàm Currying</h2>\n<p>Chúng ta sẽ viết một cái hàm, nhiệm vụ của nó là biến một hàm bất kỳ và trả về một phiên bản currying  của function đó.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>_arg</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>_arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Giải thích hàm này nha, hàm <code class=\"language-text\">curry</code> này nhận vào argument đầu tiên là một function, các argument tiếp theo sẽ là giá trị số. Sử dụng với hàm <code class=\"language-text\">multiply</code> ban đầu</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b <span class=\"token operator\">*</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// phiên bản currying</span>\n<span class=\"token keyword\">const</span> multiplyCurrying <span class=\"token operator\">=</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span>multiply<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">multiplyCurrying</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">multiplyCurrying</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://blog.bitsrc.io/understanding-currying-in-javascript-ceb2188c339\">Understanding currying in javascript</a></p>\n"}},{"node":{"title":"Map và Object trong Javascript","path":"/map-va-object-trong-javascript/","date":"7. December 2018","timeToRead":5,"desc":"Kẻ tám lạng người nữa cân","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#key\">key</a></li>\n<li><a href=\"#th%E1%BB%A9-t%E1%BB%B1-c%C3%A1c-element\">Thứ tự các element</a></li>\n<li><a href=\"#kh%E1%BB%9Fi-t%E1%BA%A1o\">Khởi tạo</a></li>\n<li><a href=\"#l%E1%BA%A5y-gi%C3%A1-tr%E1%BB%8B\">Lấy giá trị</a></li>\n<li><a href=\"#th%C3%AAm-m%E1%BB%99t-element\">Thêm một element</a></li>\n<li><a href=\"#x%C3%B3a-element\">Xóa element</a></li>\n<li><a href=\"#l%E1%BA%A5y-size-hay-length\">Lấy <code class=\"language-text\">size</code> (hay length)</a></li>\n<li><a href=\"#loop\">Loop</a></li>\n<li><a href=\"#khi-n%C3%A0o-d%C3%B9ng-map-khi-n%C3%A0o-d%C3%B9ng-object\">Khi nào dùng <code class=\"language-text\">Map</code>, khi nào dùng <code class=\"language-text\">Object</code></a></li>\n</ul>\n<!-- /TOC -->\n<p><code class=\"language-text\">Map</code> có thể coi là con đẻ của <code class=\"language-text\">Object</code>, nó kế thừa, cắt bỏ, bổ sung một số thứ trong Object</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>map <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span></code></pre>\n<p>Mỗi phần tử trong Map được lưu theo cặp <code class=\"language-text\">key: value</code>, các giá trị <code class=\"language-text\">key</code> này cũng là duy nhất trong Map, không có trường hợp được lặp lại, giống Object thôi, phần khác nhau sẽ được đề cặp ở dưới.</p>\n<p>Nói về cái tên Map một chút, vì mang các đặc điểm rất giống với World Map, Street Map. Chữ <code class=\"language-text\">Map</code> được dùng trong các trường hợp cần tìm nhanh dữ liệu, vì các giá trị trên Map là duy nhất.</p>\n<p>Ví dụ bản đồ TP.HCM thì tất cả các con đường là khác nhau (do hết tên anh hùng nên nhiều khi đặt trùng trên một số quận, vụ này không tính nhé), bản đồ thế giới thì mỗi nước là duy nhất trên bản đồ.</p>\n<p>Giờ nói các điểm khác nhau nè</p>\n<h2 id=\"key\"><a href=\"#key\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>key</h2>\n<p>Key của <code class=\"language-text\">Object</code> chỉ có thể là <code class=\"language-text\">String</code> hoặc <code class=\"language-text\">Integer</code></p>\n<p>Key trong <code class=\"language-text\">Map</code> có thể là một <code class=\"language-text\">Object</code>, <code class=\"language-text\">Array</code>, <code class=\"language-text\">Function</code>, nói chung không giới hạn</p>\n<h2 id=\"thứ-tự-các-element\"><a href=\"#th%E1%BB%A9-t%E1%BB%B1-c%C3%A1c-element\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thứ tự các element</h2>\n<p>Trong Map <strong>thứ tự các element là cố định</strong>, ngược lại so với Object</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    z<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'@'</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    b<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">5</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>myObject<span class=\"token punctuation\">)</span> \n<span class=\"token comment\">// Object {1: 4, 5: 5, z: 1, @: 2, b: 3}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>item <span class=\"token keyword\">in</span> myObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 5</span>\n<span class=\"token comment\">// z</span>\n<span class=\"token comment\">// @</span>\n<span class=\"token comment\">// b</span></code></pre>\n<p>Thứ tự các phần trong object không quan trọng, khi <code class=\"language-text\">for...in</code> qua các phần tử trên object, tùy theo enzine của trình duyệt, thứ tự này có thể khác nhau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> myObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// z 1</span>\n<span class=\"token comment\">// @ 2</span>\n<span class=\"token comment\">// b 3</span></code></pre>\n<p>Thứ tự khi chạy <code class=\"language-text\">for...of</code> trên Map luôn đúng theo thứ tự đã thêm</p>\n<h2 id=\"khởi-tạo\"><a href=\"#kh%E1%BB%9Fi-t%E1%BA%A1o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khởi tạo</h2>\n<p>Với Oject ta có một số cách để khởi tạo</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// bằng constructor</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// cùng kết quả như trên</span>\n\n<span class=\"token comment\">// dùng Object.prototype.create</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<blockquote>\n<p>Dùng <code class=\"language-text\">Object.create</code> để tạo object mới *<em>kế thừa</em> từ một object khác.</p>\n</blockquote>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token maybe-class-name\">Vehicle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"General\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">display</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Car sẽ kế thừa các property của Vehicle</span>\n<span class=\"token keyword\">var</span> <span class=\"token maybe-class-name\">Car</span> <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Vehicle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// overwrite lại giá trị type</span>\n<span class=\"token maybe-class-name\">Car</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Car\"</span><span class=\"token punctuation\">;</span> \n<span class=\"token maybe-class-name\">Car</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Car\"</span>\n\n<span class=\"token maybe-class-name\">Vehicle</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// vẫn là \"General\"</span></code></pre>\n<p>Cũng tương tự như Array, chúng ta không dùng constructor nhiều vì nó tốn tài nguyên (và lười đánh máy dài)</p>\n<p>Với <code class=\"language-text\">Map</code> chúng ta sẽ <strong>chỉ có duy nhất một cách để khởi tạo</strong> bằng constructor <code class=\"language-text\">new Map</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// map = {1=>2, 2=>3}</span></code></pre>\n<h2 id=\"lấy-giá-trị\"><a href=\"#l%E1%BA%A5y-gi%C3%A1-tr%E1%BB%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lấy giá trị</h2>\n<p>Lấy một giá trị trong Map thông qua <code class=\"language-text\">Map.prototype.get(key)</code></p>\n<pre class=\"language-js\"><code class=\"language-js\">map<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>keyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Object thì cũng có vài đường</p>\n<pre class=\"language-js\"><code class=\"language-js\">obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">keyName</span>\nobj<span class=\"token punctuation\">[</span><span class=\"token string\">'keyName'</span><span class=\"token punctuation\">]</span></code></pre>\n<p>Kiểm tra element có tồn tại trong Map dễ hơn chút so với Object</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Map</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">has</span><span class=\"token punctuation\">(</span>keyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// object</span>\n<span class=\"token keyword\">var</span> isExist <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">keyName</span> <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span>\n<span class=\"token comment\">// hoặc</span>\n<span class=\"token keyword\">var</span> isExist <span class=\"token operator\">=</span> <span class=\"token string\">'keyName'</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// kiểm tra property trường hợp ko phải kế thừa từ object cha</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">(</span>keyName<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"thêm-một-element\"><a href=\"#th%C3%AAm-m%E1%BB%99t-element\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thêm một element</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Map</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// cặp giá trị key, value</span>\n\n<span class=\"token comment\">// Object</span>\nobj<span class=\"token punctuation\">[</span><span class=\"token string\">'gender'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'female'</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token property-access\">gender</span> <span class=\"token operator\">=</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">;</span> </code></pre>\n<h2 id=\"xóa-element\"><a href=\"#x%C3%B3a-element\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xóa element</h2>\n<p>Object không có phương thức để xóa một element, chúng ta dùng operator <code class=\"language-text\">delete</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">keyName</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chỗ này cũng sẽ có nhiều tranh luận quanh vấn đề performance, một số quan điểm cho là làm như bên dưới tốt hơn</p>\n<pre class=\"language-js\"><code class=\"language-js\">obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">keyName</span> <span class=\"token operator\">=</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nhưng đây rõ ràng là 2 cách làm khác nhau, nếu <code class=\"language-text\">delete</code> là xóa hẳn, thì cách sau là gán <code class=\"language-text\">key</code> đó với giá trị <code class=\"language-text\">undefined</code>, đồng nghĩa với việc khi <code class=\"language-text\">for..in</code> nó vẫn chạy qua element đó.</p>\n<p>Map thì có các hàm sẵn để làm chuyện xóa element</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// trả về true/false</span>\n<span class=\"token keyword\">var</span> isDeleteSuccessed <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delete</span><span class=\"token punctuation\">(</span>keyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// xóa sạch</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {}</span></code></pre>\n<h2 id=\"lấy-size-hay-length\"><a href=\"#l%E1%BA%A5y-size-hay-length\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lấy <code class=\"language-text\">size</code> (hay length)</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Object không có trực tiếp mà phải gọi hàm keys</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Map, rất đơn giản</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token property-access\">size</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"loop\"><a href=\"#loop\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Loop</h2>\n<blockquote>\n<p>Một trong những khác biệt đáng chú ý nhất mà bạn nên cân nhắc dùng <code class=\"language-text\">Map</code> thay vì <code class=\"language-text\">Object</code></p>\n</blockquote>\n<p>Kiểm tra xem kiểu dữ liệu có là dạng <code class=\"language-text\">iterable</code> (loop được)</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">iterator</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// > undefined</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> map<span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">iterator</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// > function</span></code></pre>\n<p>Nghĩa là chúng ta có thể dùng <code class=\"language-text\">for...of</code> trên <code class=\"language-text\">Map</code>, <code class=\"language-text\">Object</code> chỉ có thể <code class=\"language-text\">for...in</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//For map: { 2=>3, 4=>5}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// Array[2,3]</span>\n<span class=\"token comment\">// Array[4,5]</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">key: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, value: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//key: 2, value: 3</span>\n<span class=\"token comment\">//key: 4, value: 5</span></code></pre>\n<p>Hoặc <code class=\"language-text\">forEach</code></p>\n<pre class=\"language-js\"><code class=\"language-js\">map<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">key: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, value: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// key: 2, value: 3</span>\n<span class=\"token comment\">// key: 4, value: 5</span></code></pre>\n<p>Trong Object thậm chí là khi ta dùng <code class=\"language-text\">for..in</code> cũng không thể dùng trực tiếp <code class=\"language-text\">value</code> mà phải viết <code class=\"language-text\">obj[key]</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">key: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, value: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// key: id, value: 1</span>\n<span class=\"token comment\">// key: name, value: test</span></code></pre>\n<h2 id=\"khi-nào-dùng-map-khi-nào-dùng-object\"><a href=\"#khi-n%C3%A0o-d%C3%B9ng-map-khi-n%C3%A0o-d%C3%B9ng-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khi nào dùng <code class=\"language-text\">Map</code>, khi nào dùng <code class=\"language-text\">Object</code></h2>\n<p>Mặc dù nãy giờ đọc thì bạn sẽ thấy <code class=\"language-text\">Map</code> quá ư thần thánh, vậy tại sao ta không dẹp luôn Object?</p>\n<ul>\n<li>Trường hợp mà các giá trị key của chúng ta nó chỉ là <code class=\"language-text\">integer</code>, <code class=\"language-text\">string</code>, truy xuất một element trong object bằng key là <strong>nhanh nhất</strong>, trong khi <code class=\"language-text\">Map.prototype.get</code> là một function thì nó phải tốn chút tính toán</li>\n<li>Hoặc trường hợp chúng ta có các element phụ thuộc lẫn nhau như bên dưới</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"It's Me!\"</span><span class=\"token punctuation\">,</span> \n    <span class=\"token function-variable function\">print</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n         <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Object Id: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, with Name: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Với <code class=\"language-text\">Map</code>? đơn giản là hổng làm được.</p>\n<p>JSON bản thân đã hỗ trợ Object, xài luôn Object chứ không cần convert qua chi.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.com/front-end-hacking/es6-map-vs-object-what-and-when-b80621932373\">ES6 — Map vs Object — What and when?</a></p>\n"}},{"node":{"title":"Tạo Array trong Javascript","path":"/tao-array-trong-javascript/","date":"2. December 2018","timeToRead":4,"desc":"Cùng xem qua các cách để tạo một array mới","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#array-constructor\">Array Constructor</a></li>\n<li><a href=\"#t%E1%BA%A1o-m%E1%BB%99t-array-m%E1%BB%9Bi-v%E1%BB%9Bi-%C4%91%E1%BB%99-d%C3%A0i-c%E1%BB%A5-th%E1%BB%83\">Tạo một array mới với độ dài cụ thể</a></li>\n<li><a href=\"#arrayprototypefill\">Array.prototype.fill()</a></li>\n<li><a href=\"#arrayfrom\">Array.from()</a></li>\n<li><a href=\"#spread-operator\">Spread Operator</a></li>\n<li><a href=\"#arrayof\">Array.of()</a></li>\n<li><a href=\"#convert-sang-array\">Convert sang Array</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"array-constructor\"><a href=\"#array-constructor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Array Constructor</h2>\n<p>Phương pháp phổ biến để tạo array là viết array literal </p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre>\n<p>Cách ít ai xài hơn là dùng Array constructor</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Truyền nhiều tham số</span>\n<span class=\"token comment\">// Mỗi tham số là một giá trị của mảng</span>\n<span class=\"token keyword\">var</span> array1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3]</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array1<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n<span class=\"token comment\">// Nếu chỉ truyền vào 1 tham số</span>\n<span class=\"token comment\">// Tạo mảng có số lượng item = tham số</span>\n<span class=\"token comment\">// Tham số truyền vào phải là số nguyên dương</span>\n<span class=\"token keyword\">var</span> array2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Array(3) {length: 3}</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array2<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n<span class=\"token comment\">// Truyền vào 1 tham số không phải là kiểu số</span>\n<span class=\"token keyword\">var</span> array3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"3\"]</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array3<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></code></pre>\n<h2 id=\"tạo-một-array-mới-với-độ-dài-cụ-thể\"><a href=\"#t%E1%BA%A1o-m%E1%BB%99t-array-m%E1%BB%9Bi-v%E1%BB%9Bi-%C4%91%E1%BB%99-d%C3%A0i-c%E1%BB%A5-th%E1%BB%83\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tạo một array mới với độ dài cụ thể</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// thay vì viết new Array(5), chúng ta có thể bỏ new luôn</span>\n<span class=\"token keyword\">var</span> array1 <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array1<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre>\n<p>Ở ví dụ trên, bạn đừng nghĩ là mỗi key trong <code class=\"language-text\">array1</code> được gán cho giá trị là <code class=\"language-text\">undefined</code>. Thực ra các key này ko tồn tại.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> array1 <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> array2 <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>array1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [\"length\"]</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>array2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [\"0\", \"1\", \"2\", \"length\"]</span></code></pre>\n<p>Chúng ta sẽ không thể thực hiện các thao tác như <code class=\"language-text\">map()</code>, <code class=\"language-text\">filter()</code>, <code class=\"language-text\">reduce()</code>. Nếu như chúng ta muốn đưa giá trị 5 cho tất cả key trong <code class=\"language-text\">array1</code>, chúng ta cần dùng đến <code class=\"language-text\">fill()</code></p>\n<h2 id=\"arrayprototypefill\"><a href=\"#arrayprototypefill\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Array.prototype.fill()</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> array1 <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>array1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [\"0\", \"1\", \"2\", \"3\", \"4\", \"length\"]</span></code></pre>\n<p>Lưu ý là hàm <code class=\"language-text\">fill()</code> chỉ có trong ES6</p>\n<h2 id=\"arrayfrom\"><a href=\"#arrayfrom\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Array.from()</h2>\n<p>Sử dụng <code class=\"language-text\">Array.from()</code> để tạo mới, hoặc shallow-copy của một Array khác</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> array1 <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token comment\">// Mỗi element sẽ có giá trị là undefined</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>array1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [\"0\", \"1\", \"2\", \"3\", \"4\", \"length\"]</span></code></pre>\n<p><code class=\"language-text\">undefined</code> là một giá trị nhé, chứ không phải nó không tồn tại. Chúng ta vẫn có thể loop qua được.</p>\n<p>Một điểm cũng nên lưu ý với hàm <code class=\"language-text\">Array.from</code> là nó nhận một argument thứ 2, dùng như <code class=\"language-text\">map</code>, ta có thể viết lại</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> array1 <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></code></pre>\n<h2 id=\"spread-operator\"><a href=\"#spread-operator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spread Operator</h2>\n<p>Kết quả sẽ giống như gọi <code class=\"language-text\">Array.from()</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> array1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>array1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [\"0\", \"1\", \"2\", \"3\", \"4\", \"length\"]</span></code></pre>\n<h2 id=\"arrayof\"><a href=\"#arrayof\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Array.of()</h2>\n<p>Kết quả khi tạo một array bằng <code class=\"language-text\">Array.of()</code> cũng tương tự như viết constructor. Điểm khác duy nhất là cách nó xử lý khi chỉ truyền 1 tham số integer</p>\n<p>Câu <code class=\"language-text\">Array.of(5)</code> tạo một array với 1 item giá trị là 5, trong khi new <code class=\"language-text\">Array(5)</code> tạo array với 5 element</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> array1 <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [5]</span>\n<span class=\"token keyword\">var</span> array2 <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Array(5) {length: 5}</span></code></pre>\n<h2 id=\"convert-sang-array\"><a href=\"#convert-sang-array\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Convert sang Array</h2>\n<p>Bạn chắc biết đến <code class=\"language-text\">arguments</code> object  trong function, một object <strong>dạng</strong> array có thể được truy xuất trong các function của javascript, nó chứa các tham số truyền vào trong function</p>\n<p>Mặc dù khá giống với array bình thường, nhưng nó lại không truy xuất được các phương thức của <code class=\"language-text\">Array.prototype</code>. Javascript có những thứ điên khùng lắm các bạn, <strong>giống như array</strong> nhưng éo phải array</p>\n<p>Trước khi ES6 ra đời, chúng ta sẽ dùng cách này để convert <code class=\"language-text\">arguments</code> sang array</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// convert arguments sáng array và lưu lại trong args</span>\n  <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// thực hiện cộng dồn</span>\n  <span class=\"token keyword\">return</span> args<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sum<span class=\"token punctuation\">,</span> x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> sum <span class=\"token operator\">+</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 15</span></code></pre>\n<p>Với <code class=\"language-text\">Aray.from()</code> và spread operator, chúng ta có cách nhanh chóng hơn để convert</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Array.from()</span>\n<span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Spread operator</span>\n<span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chúng ta cũng có thể áp dụng cách trên cho các đối tượng <code class=\"language-text\">iterables</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"String\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>string<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"S\", \"t\", \"r\", \"i\", \"n\", \"g\"]</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>array<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [[0, 1], [1, 2], [2, 3]]</span></code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.freecodecamp.org/https-medium-com-gladchinda-hacks-for-creating-javascript-arrays-a1b80cb372b\">Hacks for Creating JavaScript Arrays</a></p>\n"}},{"node":{"title":"Một vài tips rất hay sử dụng trong javascript","path":"/mot-vai-tips-rat-hay-su-dung-trong-javascript/","date":"20. November 2018","timeToRead":4,"desc":"Tổng hợp một số cú pháp, cách viết hay dùng hằng ngày","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#gi%C3%A1-tr%E1%BB%8B-truthy-v%C3%A0-falsy\">Giá trị: <code class=\"language-text\">truthy</code> và <code class=\"language-text\">falsy</code></a></li>\n<li><a href=\"#chuy%E1%BB%83n-%C4%91%E1%BB%95i-number-v%C3%A0-string\">Chuyển đổi: Number và String</a></li>\n<li><a href=\"#short-circuiting\">Short-Circuiting</a></li>\n<li><a href=\"#c%C3%A2u-%C4%91i%E1%BB%81u-ki%E1%BB%87n-r%C3%BAt-g%E1%BB%8Dn\">Câu điều kiện rút gọn</a></li>\n<li><a href=\"#h%C3%A0m-random-hay-d%C3%B9ng\">Hàm random hay dùng</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"giá-trị-truthy-và-falsy\"><a href=\"#gi%C3%A1-tr%E1%BB%8B-truthy-v%C3%A0-falsy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giá trị: <code class=\"language-text\">truthy</code> và <code class=\"language-text\">falsy</code></h2>\n<p>Đa phần ai cũng biết các kiểu dữ liệu của javascript như <code class=\"language-text\">object</code>, <code class=\"language-text\">array</code>, <code class=\"language-text\">Boolean</code>, <code class=\"language-text\">string</code> mà ko biết trong javascript có tồn tại khái niệm gọi là <code class=\"language-text\">truthy</code> và <code class=\"language-text\">falsy</code></p>\n<p>Khi cần giá trị <code class=\"language-text\">true/false</code>, truthy sẽ được đưa về <code class=\"language-text\">true</code> và <code class=\"language-text\">falsy</code> đưa về <code class=\"language-text\">false</code></p>\n<p>Các giá trị thuộc nhóm <code class=\"language-text\">falsy</code></p>\n<blockquote>\n<p>0, -0, null, undefined, ‘’, NaN</p>\n</blockquote>\n<p>Để lấy giá trị Boolean, có thể dùng <code class=\"language-text\">!!</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// FALSY VALUES</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// TRUTHY VALUES</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">+</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">-</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token string\">'Non-empty'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre>\n<p>Như vậy chúng ta có thể viết lại</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>person <span class=\"token operator\">!==</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// có thể viết lại</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span> <span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"chuyển-đổi-number-và-string\"><a href=\"#chuy%E1%BB%83n-%C4%91%E1%BB%95i-number-v%C3%A0-string\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chuyển đổi: Number và String</h2>\n<p>Các phép toán trong javascript <code class=\"language-text\">+</code>, <code class=\"language-text\">-</code>, <code class=\"language-text\">*</code>, <code class=\"language-text\">\\</code> yêu cầu cả 2 vế đều là number, nếu không phải thì nó tự chuyển qua number. Tuy nhiên trong javascript thì dấu <code class=\"language-text\">+</code> còn dùng để nối chuỗi, nên trường hợp gặp String nó sẽ ưu tiên chuyển thành String</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 150</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">-</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 50</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'100'</span> <span class=\"token operator\">+</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"10050\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'100'</span> <span class=\"token operator\">-</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 50</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span> <span class=\"token operator\">+</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 50</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span> <span class=\"token operator\">-</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -50</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token number\">0</span> <span class=\"token operator\">-</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">+</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 51</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">-</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -49</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">+</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 50</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">-</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -50</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"50\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -50</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"10050\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 50</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">+</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"[object Object]50\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">-</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span> <span class=\"token operator\">+</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Thu May 31 2018 18:27:51 GMT+0100 (WAT)1000\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span> <span class=\"token operator\">-</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1527787670595</span></code></pre>\n<p>Sự khác biệt này nguyên nhân là do thứ tự mà javascript gọi <code class=\"language-text\">toString()</code> và <code class=\"language-text\">valueOf()</code> trên object khi cần convert sang kiểu giá trị primitive</p>\n<p>Trong trường hợp luôn thực hiện kiểu convert sang số</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token string\">'100'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1527790306576</span></code></pre>\n<p>Thêm dấu <code class=\"language-text\">+</code> vào trước nó sẽ tương tự như sử dụng hàm <code class=\"language-text\">Number()</code> để convert</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span> <span class=\"token operator\">===</span> <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre>\n<p>Cũng có thể dùng <code class=\"language-text\">+</code> để chuyển kiểu số sang string, bằng cách ghép với 1 chuỗi rỗng</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"100\"</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"null\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"undefined\"</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"true\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"false\"</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"100\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"100,50\"</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"[object Object]\"</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Thu May 31 2018 19:28:09 GMT+0100 (WAT)\"</span></code></pre>\n<p>Có thể hiểu nó sẽ chạy như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre>\n<h2 id=\"short-circuiting\"><a href=\"#short-circuiting\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Short-Circuiting</h2>\n<p><code class=\"language-text\">&amp;&amp;</code> trả về giá trị của mệnh đề đầu nếu nó là <code class=\"language-text\">falsy</code>, và ngược lại thì trả về giá trị mệnh đề 2</p>\n<p>Sử dụng <code class=\"language-text\">&amp;&amp;</code> để thay thế câu điều kiện đơn giản</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Cách 2</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fetchProfile</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Cách 2</span>\nperson <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">fetchProfile</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Lưu ý là short-circuiting sẽ trả về một giá trị vì nó là expression, có thể lưu lại kết quả này vào biến</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> personProfile <span class=\"token operator\">=</span> person <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">fetchProfile</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code class=\"language-text\">||</code> trả về giá trị mệnh đề đầu nếu là <code class=\"language-text\">truthy</code>, không thì trả về giá trị mệnh đề 2</p>\n<p>Có thể dùng để làm giá trị <code class=\"language-text\">fallback</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Cách 1</span>\n<span class=\"token keyword\">let</span> requestAnimFrame <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">requestAnimationFrame</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  requestAnimFrame <span class=\"token operator\">=</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">requestAnimationFrame</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">webkitRequestAnimationFrame</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  requestAnimFrame <span class=\"token operator\">=</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">webkitRequestAnimationFrame</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mozRequestAnimationFrame</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  requestAnimFrame <span class=\"token operator\">=</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mozRequestAnimationFrame</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Cách 2</span>\n<span class=\"token keyword\">const</span> requestAnimFrame2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">requestAnimationFrame</span> <span class=\"token operator\">||</span>\n  <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">webkitRequestAnimationFrame</span> <span class=\"token operator\">||</span>\n  <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mozRequestAnimationFrame</span> <span class=\"token operator\">||</span>\n  <span class=\"token keyword null nil\">null</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Thêm một ví dụ nữa với <code class=\"language-text\">&amp;&amp;</code> và <code class=\"language-text\">||</code> để trả về giá trị boolean</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">booleanOrFalse</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">==</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> value<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">booleanOrTrue</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">!=</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> value<span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">booleanOrFalse</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">booleanOrFalse</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">booleanOrFalse</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">booleanOrFalse</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">booleanOrFalse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'String'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">booleanOrFalse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">booleanOrFalse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">booleanOrTrue</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">booleanOrTrue</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">booleanOrTrue</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">booleanOrTrue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">booleanOrTrue</span><span class=\"token punctuation\">(</span><span class=\"token string\">'String'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">booleanOrTrue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">booleanOrTrue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre>\n<h2 id=\"câu-điều-kiện-rút-gọn\"><a href=\"#c%C3%A2u-%C4%91i%E1%BB%81u-ki%E1%BB%87n-r%C3%BAt-g%E1%BB%8Dn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Câu điều kiện rút gọn</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">return</span> value <span class=\"token keyword\">if</span> truthy<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">return</span> value <span class=\"token keyword\">if</span> falsy<span class=\"token punctuation\">)</span></code></pre>\n<p>Sử dụng thực tế</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Cách 1</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loggedIn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">showUserProfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">showLoginForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Cách 2</span>\nloggedIn <span class=\"token operator\">?</span> <span class=\"token function\">showUserProfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">showLoginForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nested nó thì thế này</p>\n<pre class=\"language-js\"><code class=\"language-js\">a <span class=\"token operator\">?</span> b <span class=\"token operator\">:</span> c <span class=\"token operator\">?</span> d <span class=\"token operator\">:</span> e <span class=\"token operator\">?</span> f <span class=\"token operator\">:</span> g</code></pre>\n<p>Nó sẽ chạy như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span>a <span class=\"token operator\">?</span> b <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">?</span> d <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">?</span> f <span class=\"token operator\">:</span> g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Có thể dùng để thay câu if...else if... else </p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token constant\">MIN_VALUE</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token constant\">MAX_VALUE</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Cách 1</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">boundedValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">></span> <span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MIN_VALUE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">MIN_VALUE</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Cách 2</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">boundedValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">></span> <span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token constant\">MAX_VALUE</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MIN_VALUE</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token constant\">MIN_VALUE</span> <span class=\"token operator\">:</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">boundedValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token function\">boundedValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token function\">boundedValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></code></pre>\n<h2 id=\"hàm-random-hay-dùng\"><a href=\"#h%C3%A0m-random-hay-d%C3%B9ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hàm random hay dùng</h2>\n<p>Tạo một số ngẫu nhiên trong khoản từ 1 đến giá trị truyền vào.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">randomInteger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">maxvalue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">floor</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> maxvalue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://codeburst.io/cool-javascript-shortcuts-and-tips-for-everyday-use-66cd174ab216\" target=\"_blank\" rel=\"noopener noreferrer\">Cool JavaScript Shortcuts and Tips for Everyday Use</a></p>\n"}},{"node":{"title":"Xử lý lỗi nếu có xảy ra trong javascript","path":"/xu-ly-loi-neu-co-xay-ra-trong-javascript/","date":"19. November 2018","timeToRead":3,"desc":"Lỗi nếu có xảy ra, phải được xử lý hết tránh để chết nguyên ứng dụng. Điểm lại một vài cách xử lý lỗi trong javascript","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#javascript-error\">Javascript error</a></li>\n<li><a href=\"#trycatch\">try...catch</a></li>\n<li><a href=\"#finally\">...finally</a></li>\n<li>\n<p><a href=\"#c%C3%A1c-h%C3%A0m-async\">Các hàm async</a></p>\n<ul>\n<li><a href=\"#callback\">callback</a></li>\n<li><a href=\"#promise\">Promise</a></li>\n<li><a href=\"#asyncawait\">async/await</a></li>\n</ul>\n</li>\n<li><a href=\"#hi%E1%BB%83n-th%E1%BB%8B-l%E1%BB%97i-%E1%BB%9F-ph%C3%ADa-giao-di%E1%BB%87n-ng%C6%B0%E1%BB%9Di-d%C3%B9ng\">Hiển thị lỗi ở phía giao diện người dùng</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"javascript-error\"><a href=\"#javascript-error\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Javascript error</h2>\n<p><code class=\"language-text\">throw new Error(&#39;khi có lỗi&#39;)</code> sẽ tạo ra một object Error và dừng chạy.</p>\n<p>Error object có 2 property có sẵn, 1 là <code class=\"language-text\">message</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myError <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Lỗi rồi nè'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>myError<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => Lỗi rồi nè</span></code></pre>\n<p>...cái thứ 2, rất quan trọng, là <code class=\"language-text\">stack</code>, nó sẽ cho ta history các phương thức và file đã gọi qua.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Error</span><span class=\"token operator\">:</span> please improve your code\n at <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>anonymous<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">Users</span><span class=\"token operator\">/</span>gisderdube<span class=\"token operator\">/</span><span class=\"token maybe-class-name\">Documents</span><span class=\"token operator\">/</span>_projects<span class=\"token operator\">/</span>hacking<span class=\"token punctuation\">.</span><span class=\"token property-access\">nosync</span><span class=\"token operator\">/</span>error<span class=\"token operator\">-</span>handling<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>general<span class=\"token punctuation\">.</span><span class=\"token property-access\">js</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">79</span><span class=\"token punctuation\">)</span>\n at <span class=\"token maybe-class-name\">Module</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">_compile</span> <span class=\"token punctuation\">(</span>internal<span class=\"token operator\">/</span>modules<span class=\"token operator\">/</span>cjs<span class=\"token operator\">/</span>loader<span class=\"token punctuation\">.</span><span class=\"token property-access\">js</span><span class=\"token operator\">:</span><span class=\"token number\">689</span><span class=\"token operator\">:</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n at <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Module</span></span><span class=\"token punctuation\">.</span><span class=\"token property-access\">_extensions</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">js</span> <span class=\"token punctuation\">(</span>internal<span class=\"token operator\">/</span>modules<span class=\"token operator\">/</span>cjs<span class=\"token operator\">/</span>loader<span class=\"token punctuation\">.</span><span class=\"token property-access\">js</span><span class=\"token operator\">:</span><span class=\"token number\">700</span><span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n at <span class=\"token maybe-class-name\">Module</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">load</span> <span class=\"token punctuation\">(</span>internal<span class=\"token operator\">/</span>modules<span class=\"token operator\">/</span>cjs<span class=\"token operator\">/</span>loader<span class=\"token punctuation\">.</span><span class=\"token property-access\">js</span><span class=\"token operator\">:</span><span class=\"token number\">599</span><span class=\"token operator\">:</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span>\n at <span class=\"token function\">tryModuleLoad</span> <span class=\"token punctuation\">(</span>internal<span class=\"token operator\">/</span>modules<span class=\"token operator\">/</span>cjs<span class=\"token operator\">/</span>loader<span class=\"token punctuation\">.</span><span class=\"token property-access\">js</span><span class=\"token operator\">:</span><span class=\"token number\">538</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n at <span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Module</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">_load</span> <span class=\"token punctuation\">(</span>internal<span class=\"token operator\">/</span>modules<span class=\"token operator\">/</span>cjs<span class=\"token operator\">/</span>loader<span class=\"token punctuation\">.</span><span class=\"token property-access\">js</span><span class=\"token operator\">:</span><span class=\"token number\">530</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n at <span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Module</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">runMain</span> <span class=\"token punctuation\">(</span>internal<span class=\"token operator\">/</span>modules<span class=\"token operator\">/</span>cjs<span class=\"token operator\">/</span>loader<span class=\"token punctuation\">.</span><span class=\"token property-access\">js</span><span class=\"token operator\">:</span><span class=\"token number\">742</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n at <span class=\"token function\">startup</span> <span class=\"token punctuation\">(</span>internal<span class=\"token operator\">/</span>bootstrap<span class=\"token operator\">/</span>node<span class=\"token punctuation\">.</span><span class=\"token property-access\">js</span><span class=\"token operator\">:</span><span class=\"token number\">266</span><span class=\"token operator\">:</span><span class=\"token number\">19</span><span class=\"token punctuation\">)</span>\n at <span class=\"token function\">bootstrapNodeJSCore</span> <span class=\"token punctuation\">(</span>internal<span class=\"token operator\">/</span>bootstrap<span class=\"token operator\">/</span>node<span class=\"token punctuation\">.</span><span class=\"token property-access\">js</span><span class=\"token operator\">:</span><span class=\"token number\">596</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Nếu chúng ta không tự xử lý các trường hợp có lỗi, nó sẽ chết ngay chổ đó, để tránh tình huống này, tìm hiểu một số cách bắt lỗi</p>\n<h2 id=\"trycatch\"><a href=\"#trycatch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>try...catch</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// b chưa được định nghĩa, nó sẽ báo lỗi</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// vẫn chạy đến đây</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu không để <code class=\"language-text\">console.log(b)</code> bên trong <code class=\"language-text\">try..catch</code>, nó sẽ không chạy đến đoạn <code class=\"language-text\">console.log(a)</code></p>\n<h2 id=\"finally\"><a href=\"#finally\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>...finally</h2>\n<p>Đôi khi chúng ta cần chạy một đoạn code dù nó có bị lỗi hay không bị lỗi, nó cũng sẽ giống ở trên, nhưng viết nó sẽ rõ ràng hơn</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// b chưa được định nghĩa, nó sẽ báo lỗi</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"các-hàm-async\"><a href=\"#c%C3%A1c-h%C3%A0m-async\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các hàm async</h2>\n<p>Hiện tại chúng ta có 3 cách để làm việc với các hàm async, cách xử lý lỗi nếu có trên 3 cách này: callback, Promise, async/await</p>\n<h3 id=\"callback\"><a href=\"#callback\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>callback</h3>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">myAsyncFunc</span><span class=\"token punctuation\">(</span>someInput<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"promise\"><a href=\"#promise\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Promise</h3>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'something went wrong'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// sẽ không chạy</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// (A)</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// trong trường hợp block (A) xảy ra lỗi</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"asyncawait\"><a href=\"#asyncawait\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>async/await</h3>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">someFuncThatThrowsAnError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// vẫn chạy</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Easy!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"hiển-thị-lỗi-ở-phía-giao-diện-người-dùng\"><a href=\"#hi%E1%BB%83n-th%E1%BB%8B-l%E1%BB%97i-%E1%BB%9F-ph%C3%ADa-giao-di%E1%BB%87n-ng%C6%B0%E1%BB%9Di-d%C3%B9ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hiển thị lỗi ở phía giao diện người dùng</h2>\n<p>Ví dụ chúng ta làm Single Page App bằng React, chúng ta muốn hiển thị lỗi trên giao diện như thế này</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*xSpVDWEQ4wMHQ5kObFwf8w.jpeg\" alt=\"Xử lý lỗi nếu có xảy ra trong javascript\"></p>\n<p>Có thể dùng React Portal để chèn vào hoặc dùng một component nhận vào Error Object và render ra trên giao diện</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GobalError</span></span> <span class=\"token attr-name\">err</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>errorObj<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">reset</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleResetError<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Nếu lỗi hiển thị dạng inline phía dưới input</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*tpmtTom2eSmH7AnrAI55QQ.jpeg\" alt=\"Xử lý lỗi nếu có xảy ra trong javascript\"></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n      <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">_callBackend</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Delete your city</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">InlineError</span></span> <span class=\"token attr-name\">error</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">error</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p><a href=\"https://levelup.gitconnected.com/the-definite-guide-to-handling-errors-gracefully-in-javascript-58424d9c60e6\" target=\"_blank\" rel=\"noopener noreferrer\">Handling Errors in JavaScript: The Definitive Guide</a></p>\n"}},{"node":{"title":"Bảo mật web - Một số kiểu tấn công","path":"/bao-mat-web-mot-so-kieu-tan-cong/","date":"18. November 2018","timeToRead":4,"desc":"Tổng quát các vấn đề bạn cần quan tâm để bảo mật ứng dụng web","content":"<!-- TOC -->\n<ul>\n<li>\n<p><a href=\"#c%C3%A1ch-qu%E1%BA%A3n-l%C3%BD-session-hi%E1%BB%87n-t%E1%BA%A1i\">Cách quản lý Session hiện tại</a></p>\n<ul>\n<li><a href=\"#session-qu%E1%BA%A3n-l%C3%BD-b%E1%BB%9Fi-server\">Session quản lý bởi server</a></li>\n<li><a href=\"#session-qu%E1%BA%A3n-l%C3%BD-%E1%BB%9F-client\">Session quản lý ở client</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#m%E1%BB%99t-s%E1%BB%91-ki%E1%BB%83u-t%E1%BA%A5n-c%C3%B4ng\">Một số kiểu tấn công</a></p>\n<ul>\n<li>\n<p><a href=\"#csrf-cross-site-request-forgery\">CSRF (Cross-Site Request Forgery)</a></p>\n<ul>\n<li><a href=\"#c%C3%A1ch-ng%C4%83n-ch%E1%BA%B7n-1-s%E1%BB%AD-d%E1%BB%A5ng-html-token\">Cách ngăn chặn #1: Sử dụng HTML token</a></li>\n<li><a href=\"#c%C3%A1ch-ng%C4%83n-ch%E1%BA%B7n-2-origin-header\">Cách ngăn chặn #2: Origin Header</a></li>\n<li><a href=\"#c%C3%A1ch-ng%C4%83n-ch%E1%BA%B7n-3-d%C3%B9ng-transparent-token\">Cách ngăn chặn #3: dùng transparent token</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#cross-site-scripting-xss\">Cross-Site Scripting (XSS)</a></p>\n<ul>\n<li><a href=\"#store-xss---l%C6%B0u-%C4%91o%E1%BA%A1n-script-%C4%91%C3%B3-l%C3%AAn-tr%C3%AAn-server\">Store XSS - lưu đoạn script đó lên trên server</a></li>\n<li><a href=\"#reflect-xss\">Reflect XSS</a></li>\n<li><a href=\"#dom-based-xss\">DOM-Based XSS</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#c%C3%B4ng-c%E1%BB%A5-ki%E1%BB%83m-tra\">Công cụ kiểm tra</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"cách-quản-lý-session-hiện-tại\"><a href=\"#c%C3%A1ch-qu%E1%BA%A3n-l%C3%BD-session-hi%E1%BB%87n-t%E1%BA%A1i\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cách quản lý Session hiện tại</h2>\n<p>HTTP = stateless</p>\n<ul>\n<li>Tất cả request từ cùng 1 client không liên quan gì với nhau</li>\n<li>Server không có cách nào để lưu tạm giá trị state\nHTTP hỗ trợ gửi đi dữ liệu authentication</li>\n<li>Thông qua <strong>Header.Authorization</strong></li>\n<li>Gửi thông tin kèm theo tất cả request</li>\n<li>Server không can thiệp gì trên từng session</li>\n</ul>\n<h3 id=\"session-quản-lý-bởi-server\"><a href=\"#session-qu%E1%BA%A3n-l%C3%BD-b%E1%BB%9Fi-server\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Session quản lý bởi server</h3>\n<p>Server toàn quyền kiểm soát session, kiểm tra tình trạng active, expire, invalid date, xóa session</p>\n<p>Đại diện cho cách này là dùng Cookie</p>\n<ul>\n<li>Dữ liệu được truyền qua lại giữa server và client</li>\n<li>Hầu hết các trình duyệt đều hỗ trợ, <strong>khó</strong>, nếu sử dụng bên ngoài trình duyệt (ứng dụng điện thoại chẳng hạn)</li>\n<li>Bị tấn công <a href=\"#csrf-cross-site-request-forgery\">CSRF</a></li>\n</ul>\n<p>Theo mặc định các request sẽ không nên gửi kèm thông tin xác thực tài khoản (ví dụ cookie), nếu cần gửi thêm thông tin này bằng thiết đặt <code class=\"language-text\">withCredentials</code> thủ công, phía server đồng thời cũng gửi lại trong response header giá trị <code class=\"language-text\">Access-Control-Allow-Credentials: true</code></p>\n<h3 id=\"session-quản-lý-ở-client\"><a href=\"#session-qu%E1%BA%A3n-l%C3%BD-%E1%BB%9F-client\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Session quản lý ở client</h3>\n<p>Đưa toàn bộ thông tin session xuống phía client\nServer không kiểm soát session nào đang active\nDữ liệu session được gửi đi trên mỗi request</p>\n<p>Đại diện cho kiểu này là dùng Token (JWT đang là phổ biến nhất)</p>\n<ul>\n<li>Dữ liệu session được lưu xuống token, server gửi token này qua HTTP header hoặc body của response</li>\n<li>Ứng dụng tự quản lý chuyện gửi server token này</li>\n<li>Trên mỗi request gửi đi nó không tự chèn token vào, do đó nó không thể tấn công bằng <a href=\"#csrf-cross-site-request-forgery\">CSRF</a></li>\n<li>Mồi ngon của tấn công <a href=\"#cross-site-scripting-xss\">XSS</a></li>\n</ul>\n<h2 id=\"một-số-kiểu-tấn-công\"><a href=\"#m%E1%BB%99t-s%E1%BB%91-ki%E1%BB%83u-t%E1%BA%A5n-c%C3%B4ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một số kiểu tấn công</h2>\n<h3 id=\"csrf-cross-site-request-forgery\"><a href=\"#csrf-cross-site-request-forgery\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CSRF (Cross-Site Request Forgery)</h3>\n<p>Kiểu tấn công rất phổ biến, nếu thông tin session được gửi qua Cookie. Đại khái là nếu bạn đăng nhập vào facebook.com, sau đó truy cập vào trang web nào đó bị hack rồi, trang bị hack này sẽ gửi một trang có nội dung html bên trong đó nó dùng một thẻ nào đó (như <code class=\"language-text\">&lt;img /&gt;</code>, <code class=\"language-text\">&lt;iframe/&gt;</code>, <code class=\"language-text\">&lt;link/&gt;</code>, <code class=\"language-text\">&lt;bgsound/&gt;</code>, <code class=\"language-text\">&lt;background /&gt;</code>) để gửi một request thay đổi email lên trang facebook.com</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>facebook.com/api/1/destroy<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>facebook.com/api/1/destroy<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bgsound</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>facebook.com/api/1/destroy<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>background</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>facebook.com/api/1/destroy<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>facebook.com/api/1/destroy<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code></pre>\n<p><img src=\"https://i.imgur.com/sRrzge5.png\" alt=\"CSRF (Cross-Site Request Forgery)\"></p>\n<h4 id=\"cách-ngăn-chặn-1-sử-dụng-html-token\"><a href=\"#c%C3%A1ch-ng%C4%83n-ch%E1%BA%B7n-1-s%E1%BB%AD-d%E1%BB%A5ng-html-token\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cách ngăn chặn #1: Sử dụng HTML token</h4>\n<p>Dấu token bên trong HTML, ví dụ như nhét nó trong form, server khi nhận được sẽ kiểm tra lại để chắc chắn là token này hợp lệ </p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit.php<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>hidden<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>CSRFToken<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>OWY4NmQwODE4ODRjN2Q2NTlhMmZlYWEwYzU1YWQwMTVhM2JmNGYxYjJiMGI4MjJjZDE1ZDZMGYwMGEwOA==<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Tuy nhiên cách này sẽ không thích hợp với SPA, vì yêu cầu phía server phải quản lý session của từng user đang login</p>\n<h4 id=\"cách-ngăn-chặn-2-origin-header\"><a href=\"#c%C3%A1ch-ng%C4%83n-ch%E1%BA%B7n-2-origin-header\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cách ngăn chặn #2: Origin Header</h4>\n<p>Với những request như POST/PUT/DELETE, tự động thêm Origin Header để xác thực yêu cầu</p>\n<p><img src=\"https://i.stack.imgur.com/ymk6L.png\" alt=\"Cách ngăn chặn #2: Origin Header\"></p>\n<p><img src=\"https://i.imgur.com/wXzd41T.jpg\" alt=\"Cách ngăn chặn #2: Origin Header\"></p>\n<h4 id=\"cách-ngăn-chặn-3-dùng-transparent-token\"><a href=\"#c%C3%A1ch-ng%C4%83n-ch%E1%BA%B7n-3-d%C3%B9ng-transparent-token\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cách ngăn chặn #3: dùng transparent token</h4>\n<p>So sánh giá trị cookie với giá trị header</p>\n<p>User gửi đi một request, nó nhận được 1 Session Cookie và 1 CSRF Token Cookie.</p>\n<pre class=\"language-text\"><code class=\"language-text\">Set-Cookie: session=...\nSet-Cookie: CSRF-Token=123</code></pre>\n<p>Khi ứng dụng gửi đi một request, javascript sẽ copy cookie và đưa vào header <code class=\"language-text\">X-CSRF-Token</code> chỉ javascript trên trang hiện tại mới truy xuất được thông tin này</p>\n<pre class=\"language-text\"><code class=\"language-text\">Cookie: session=...\nCookie: CSRF-Token=123\nX-CSRF-Token: 123</code></pre>\n<p>Server đơn giản là kiểm tra 2 giá trị <code class=\"language-text\">Cookie: CSRF-Token</code> và <code class=\"language-text\">X-CSRF-Token</code> có khớp không</p>\n<h3 id=\"cross-site-scripting-xss\"><a href=\"#cross-site-scripting-xss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cross-Site Scripting (XSS)</h3>\n<p>Hacker sẽ tìm cách để chạy javascript trên trang trình duyệt của user, khi user truy cập vào một trang đã bị hack. Hacker sẽ dùng những cách sau</p>\n<h4 id=\"store-xss---lưu-đoạn-script-đó-lên-trên-server\"><a href=\"#store-xss---l%C6%B0u-%C4%91o%E1%BA%A1n-script-%C4%91%C3%B3-l%C3%AAn-tr%C3%AAn-server\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Store XSS - lưu đoạn script đó lên trên server</h4>\n<p><img src=\"https://i.imgur.com/45lHKy2.jpg\" alt=\"Cross-Site Scripting (XSS)\"></p>\n<h4 id=\"reflect-xss\"><a href=\"#reflect-xss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reflect XSS</h4>\n<p><img src=\"https://i.imgur.com/dbRVLC5.jpg\" alt=\"Reflect XSS\"></p>\n<h4 id=\"dom-based-xss\"><a href=\"#dom-based-xss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DOM-Based XSS</h4>\n<p><img src=\"https://i.imgur.com/29G28Ee.jpg\" alt=\"Reflect XSS\"></p>\n<p>Cách phổ biến để phòng chống</p>\n<ul>\n<li>Filter hết mấy đoạn html nguy hiểm (như &#x3C; >, \" \", &#x26;) trước khi lưu</li>\n<li>Dùng thư viện để escape context-sensitive trước khi output</li>\n</ul>\n<h2 id=\"công-cụ-kiểm-tra\"><a href=\"#c%C3%B4ng-c%E1%BB%A5-ki%E1%BB%83m-tra\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Công cụ kiểm tra</h2>\n<p>Một số trang online để check</p>\n<p><a href=\"https://securityheaders.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://securityheaders.com/</a></p>\n<p><a href=\"https://sitecheck.sucuri.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sitecheck.sucuri.net/</a></p>\n<p><a href=\"https://www.ssllabs.com/ssltest/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.ssllabs.com/ssltest/</a></p>\n<p><a href=\"https://quttera.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://quttera.com/</a></p>\n<p><a href=\"https://detectify.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://detectify.com/</a></p>\n<p><a href=\"https://app.webinspector.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://app.webinspector.com/</a></p>\n<p><a href=\"https://app.upguard.com/webscan\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://app.upguard.com/webscan</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=UFPGOvDrTOk\" target=\"_blank\" rel=\"noopener noreferrer\">Getting Single Page Application Security Right by Philippe De Ryck</a></p>\n"}},{"node":{"title":"Câu điều kiện trong javascript","path":"/cau-dieu-kien-trong-javascript/","date":"16. November 2018","timeToRead":4,"desc":"Nắm vững conditional expression trong javascript để viết code sạch sẽ hơn","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#ph%C3%A2n-bi%E1%BB%87t-expression-v%C3%A0-statement\">Phân biệt Expression và Statement</a></li>\n<li><a href=\"#ph%C3%A2n-bi%E1%BB%87t-truefalse-truthyfalsy\">Phân biệt <code class=\"language-text\">true/false</code>, <code class=\"language-text\">truthy/falsy</code></a></li>\n<li><a href=\"#ph%C3%A2n-bi%E1%BB%87t-to%C3%A1n-t%E1%BB%AD-and--v%C3%A0-or-\">Phân biệt toán tử AND <code class=\"language-text\">&amp;&amp;</code> và OR <code class=\"language-text\">||</code></a></li>\n<li><a href=\"#thay-statement-b%E1%BA%B1ng-expression\">Thay statement bằng expression</a></li>\n<li><a href=\"#m%E1%BB%99t-s%E1%BB%91-c%C3%A1ch-vi%E1%BA%BFt-t%E1%BA%AFt-v%C3%A0-l%C6%B0u-%C3%BD\">Một số cách viết tắt và lưu ý</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"phân-biệt-expression-và-statement\"><a href=\"#ph%C3%A2n-bi%E1%BB%87t-expression-v%C3%A0-statement\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phân biệt Expression và Statement</h2>\n<p>Trước tiên chúng ta ôn lại expression và statement trong javascript.</p>\n<div class=\"note\">An expression is any phrase that the JavaScript engine can evaluate to <strong>produce a value.</strong></div>\n<p>Expression là một đoạn code luôn trả về 1 giá trị.\nBên dưới là expression</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// number</span>\n<span class=\"token number\">0xFF</span>\n\n<span class=\"token comment\">// array</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// object</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// regexp</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token operator\">+</span>$<span class=\"token operator\">/</span>\n\n<span class=\"token comment\">// logical AND operation</span>\n<span class=\"token punctuation\">(</span>x <span class=\"token operator\">&amp;&amp;</span> y<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// bitwise XOR operation</span>\n<span class=\"token punctuation\">(</span>x <span class=\"token operator\">^</span> y<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ternary operation</span>\n<span class=\"token punctuation\">(</span>x <span class=\"token operator\">?</span> y <span class=\"token operator\">:</span> z<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// arithmetic operation</span>\n<span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> z\n\n<span class=\"token comment\">// assignment</span>\nx <span class=\"token operator\">=</span> <span class=\"token string\">'string'</span>\n\n<span class=\"token comment\">// function expression</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// function invocation</span>\n<span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// object property access</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token property-access\">students</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span></code></pre>\n<div class=\"note\">\nA statement is any sentence or command that the JavaScript engine can execute to make <strong>something happen</strong> or cause some <strong>side-effect</strong>.\n</div>\n<p>Statement là lệnh, tập lệnh thực hiện một hành động.</p>\n<p>Câu điều kiện, khai báo biến, khai báo hàm, loop, throw, try/catch/finally là  statement</p>\n<h2 id=\"phân-biệt-truefalse-truthyfalsy\"><a href=\"#ph%C3%A2n-bi%E1%BB%87t-truefalse-truthyfalsy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phân biệt <code class=\"language-text\">true/false</code>, <code class=\"language-text\">truthy/falsy</code></h2>\n<p>Tất cả giá trị trong javascript đều có thể phân thành <strong>truthy</strong> hoặc <strong>falsy</strong> ( không phải true/false)</p>\n<p>Các giá trị sau được xếp vào <strong>falsy</strong></p>\n<div class=\"note\">\n  '', \"\", ``, 0, -0, null, undefined, NaN, false\n</div>\n<p>Các giá trị còn lại được coi là <strong>truthy</strong>. Khi nào javascript cần giá trị là <code class=\"language-text\">Boolean</code>, nó sẽ tự động đưa những giá trị trong nhóm truthy thành <code class=\"language-text\">true</code>, nhóm falsy thành <code class=\"language-text\">false</code></p>\n<p>Nếu không tin, bạn có thể kiểm tra</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre>\n<p>Hoặc bạn có thể dùng operator <code class=\"language-text\">!!</code> để chuyển một giá trị thành boolean.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre>\n<h2 id=\"phân-biệt-toán-tử-and--và-or-\"><a href=\"#ph%C3%A2n-bi%E1%BB%87t-to%C3%A1n-t%E1%BB%AD-and--v%C3%A0-or-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phân biệt toán tử AND <code class=\"language-text\">&amp;&amp;</code> và OR <code class=\"language-text\">||</code></h2>\n<p>Operator <code class=\"language-text\">&amp;&amp;</code> và <code class=\"language-text\">||</code> sẽ cho kết quả là một boolean. Lưu ý là <code class=\"language-text\">&amp;&amp;</code> sẽ ưu tiên chạy trước <code class=\"language-text\">||</code>, nếu muốn thay đổi thứ tự ưu tiên thì phải dùng <code class=\"language-text\">()</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre>\n<p>2 toán tử AND và OR có một đặc điểm: thằng đứng trước luôn được tính giá trị, thằng thứ 2 có thể sẽ không được đếm xỉa luôn. </p>\n<p><code class=\"language-text\">&amp;&amp;</code> và <code class=\"language-text\">||</code> <strong>không phải lúc nào cũng trả về kết quả boolean</strong> (true, false), nó thích trả về gì là nó trả thôi.</p>\n<div class=\"note\">Nếu mệnh đề đầu của <code>&&</code> nó trả về <strong>truthy</strong> nó tính kết quả và trả về mệnh đề 2, nếu mệnh đề đầu là <strong>falsy</strong> thì bỏ qua mệnh đề 2. </div>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 'a' là 'truthy', nên 'a' &amp;&amp; 'b' sẽ trả về 'b'</span>\n<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre>\n<div class=\"note\">Nếu mệnh đề đầu của <code>||</code> trả về <strong>truthy</strong>, nó ko quan tâm đến mệnh đề 2, nếu mệnh đề đầu là <strong>falsy</strong> nó sẽ tính và trả về giá trị mệnh đề 2</div>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span>a <span class=\"token operator\">||</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">(</span>a <span class=\"token operator\">||</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre>\n<h2 id=\"thay-statement-bằng-expression\"><a href=\"#thay-statement-b%E1%BA%B1ng-expression\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thay statement bằng expression</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// viết kiểu statement</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;&amp;</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">canDeletePost</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">deletePost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// viết kiểu expresion</span>\nuser <span class=\"token operator\">&amp;&amp;</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">canDeletePost</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">deletePost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Một câu if...else... đơn giản như kiểm tra độ mạnh mật khẩu</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> strength <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  strength <span class=\"token operator\">=</span> <span class=\"token string\">'Strong'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  strength <span class=\"token operator\">=</span> <span class=\"token string\">'Weak'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// viết kiểu expresion,</span>\n<span class=\"token keyword\">const</span> strength <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'Strong'</span> <span class=\"token operator\">||</span> <span class=\"token string\">'Weak'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// khuyên dùng ternary operator trong trường hợp này</span>\n<span class=\"token keyword\">const</span> strength <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'Strong'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Weak'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>ternary operator là kiểu viết thế này, nếu bạn có quên</p>\n<pre class=\"language-js\"><code class=\"language-js\">condition <span class=\"token operator\">?</span> <span class=\"token constant\">A</span> <span class=\"token operator\">:</span> <span class=\"token constant\">B</span></code></pre>\n<p>Trong nhiều trường hợp như ví dụ bên dưới, việc sử dụng expression sẽ vô vùng nguy hiểm</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> xmlhttp <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">XMLHttpRequest</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token comment\">// Modern browsers</span>\n  xmlhttp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ActiveXObject</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token comment\">// Older versions of Internet Explorer (IE &lt;= 6)</span>\n  xmlhttp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ActiveXObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Microsoft.XMLHTTP'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu chúng ta viết bằng expression</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> xmlhttp <span class=\"token operator\">=</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">XMLHttpRequest</span></span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">||</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ActiveXObject</span></span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ActiveXObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Microsoft.XMLHTTP'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">||</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Lạm dụng expression như vậy là không nên, chúng ta nên viết một cách rõ ràng hơn bằng ternary operator</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> xmlhttp <span class=\"token operator\">=</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">XMLHttpRequest</span></span>\n  <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">:</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ActiveXObject</span></span>\n    <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ActiveXObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Microsoft.XMLHTTP'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"một-số-cách-viết-tắt-và-lưu-ý\"><a href=\"#m%E1%BB%99t-s%E1%BB%91-c%C3%A1ch-vi%E1%BA%BFt-t%E1%BA%AFt-v%C3%A0-l%C6%B0u-%C3%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một số cách viết tắt và lưu ý</h2>\n<p>Luật De Morgan</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// là như nhau</span>\n<span class=\"token operator\">!</span><span class=\"token constant\">A</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token constant\">B</span> <span class=\"token operator\">==</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token operator\">||</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// như nhau luôn</span>\n<span class=\"token operator\">!</span><span class=\"token constant\">A</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token constant\">B</span> <span class=\"token operator\">==</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Nếu <code class=\"language-text\">A</code>, <code class=\"language-text\">B</code>, <code class=\"language-text\">C</code> là các giá trị Boolean</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// chuyển AND qua OR</span>\n<span class=\"token constant\">A</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">B</span> <span class=\"token operator\">==</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token constant\">A</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token constant\">B</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// chuyển OR qua AND</span>\n<span class=\"token constant\">A</span> <span class=\"token operator\">||</span> <span class=\"token constant\">B</span> <span class=\"token operator\">==</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token constant\">A</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token constant\">B</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// bỏ nested AND</span>\n<span class=\"token constant\">A</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">A</span> <span class=\"token operator\">||</span> <span class=\"token constant\">B</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">C</span>\n\n<span class=\"token comment\">// bỏ nested OR</span>\n<span class=\"token constant\">A</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span> <span class=\"token operator\">||</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token constant\">A</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token constant\">B</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token constant\">C</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Chúng ta có ví dụ ở trên sử dụng ternary operator để giải quyết các câu if lồng vào nhau.</p>\n<p>ternary operator có độ ưu tiên thấp hơn các xử lý logic và tính toán  khác</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// câu này</span>\n<span class=\"token constant\">A</span> <span class=\"token operator\">?</span> <span class=\"token constant\">B</span> <span class=\"token operator\">+</span> <span class=\"token constant\">C</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">D</span> <span class=\"token operator\">:</span> <span class=\"token constant\">E</span> <span class=\"token operator\">||</span> <span class=\"token constant\">F</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">G</span>\n\n<span class=\"token comment\">// sẽ chạy theo thứ tự sao</span>\n<span class=\"token constant\">A</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token constant\">B</span><span class=\"token operator\">+</span><span class=\"token constant\">C</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">E</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">F</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">G</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Nếu lồng nhiều ternary operator vào nhau nó sẽ chạy từ <strong>phải qua trái</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token constant\">A</span> <span class=\"token operator\">?</span> <span class=\"token constant\">B</span> <span class=\"token operator\">:</span> <span class=\"token constant\">C</span> <span class=\"token operator\">?</span> <span class=\"token constant\">D</span> <span class=\"token operator\">:</span> <span class=\"token constant\">E</span> <span class=\"token operator\">?</span> <span class=\"token constant\">F</span> <span class=\"token operator\">:</span> <span class=\"token constant\">G</span>\n\n<span class=\"token comment\">// sẽ chạy theo thứ tự</span>\n<span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token operator\">?</span> <span class=\"token constant\">B</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">C</span> <span class=\"token operator\">?</span> <span class=\"token constant\">D</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">E</span> <span class=\"token operator\">?</span> <span class=\"token constant\">F</span> <span class=\"token operator\">:</span> <span class=\"token constant\">G</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Để thay đổi độ ưu tiên của nó trong expression chúng ta phải dùng dấu <code class=\"language-text\">()</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// expresion</span>\n<span class=\"token constant\">A</span> <span class=\"token operator\">?</span> <span class=\"token constant\">B</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">C</span> <span class=\"token operator\">?</span> <span class=\"token constant\">D</span> <span class=\"token operator\">:</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token constant\">F</span> <span class=\"token operator\">:</span> <span class=\"token constant\">G</span>\n\n<span class=\"token comment\">// ưu tiên chạy sẽ là</span>\n<span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token operator\">?</span> <span class=\"token constant\">B</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token constant\">C</span> <span class=\"token operator\">?</span> <span class=\"token constant\">D</span> <span class=\"token operator\">:</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token constant\">F</span> <span class=\"token operator\">:</span> <span class=\"token constant\">G</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Rất vui là bạn cũng đọc được tới đây của bài viết, nếu bạn đã hiểu hết những gì mình trình bày, Bravo, bạn là chuyên gia rồi, nếu chưa hiểu hết bạn nên đọc lại vài lần vì cách viết câu điều kiện và hiểu cách nó chạy như thế nào, thứ tự ra sao là kiến thức cực kỳ quan trọng để bạn đọc hiểu đưọc những đoạn code quá xá phức tạp của mấy bác Senior</p>\n<p><a href=\"https://hackernoon.com/conditional-javascript-for-experts-d2â456è67c\" target=\"_blank\" rel=\"noopener noreferrer\">Conditional JavaScript for Experts</a></p>\n"}},{"node":{"title":"Copy object trong javascript","path":"/copy-object-trong-javascript/","date":"13. November 2018","timeToRead":2,"desc":"Luận bàn các cách mà chúng ta copy một object trong javascript, shallow copy và deep copy","content":"<p>Chúng ta đã biết object trong javascript là một con trỏ đến địa chỉ trên memory, copy 1 object sẽ là 2 biến trỏ tới cùng một địa chỉ memory</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token string\">\"luubinhan\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// luubinhan</span>\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// luubinhan</span>\n\nfoo<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"github\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// github</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// github</span>\n\nbar<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"google.com\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// google.com</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// google.com</span></code></pre>\n<p>Có thể thấy là việc thay đổi 1 trong 2 biến <code class=\"language-text\">foo</code>, <code class=\"language-text\">bar</code> sẽ ảnh hưởng qua lại lẫn nhau, khi muốn thực hiện copy một object trong javascript phải hết sức cẩn thận</p>\n<h2 id=\"shallow-copy\"><a href=\"#shallow-copy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Shallow copy</h2>\n<p>Nếu các property bên trong của object là một <a href=\"/2017-09-25-10-khai-niem-javascript-can-biet/\">giá trị primitive type</a>, có thể thực hiện copy nhanh (shallow)</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> bar<span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// cách 1</span>\n<span class=\"token keyword\">var</span> copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>obj <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// cách 2</span>\n<span class=\"token keyword\">var</span> copy2 <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu bên trong object là một tham chiếu khác, thì việc copy này sẽ cũng tương tự như <code class=\"language-text\">var bar = foo</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>foo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ncopy<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\ncopy<span class=\"token punctuation\">.</span><span class=\"token property-access\">b</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">c</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dir</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {a: 0, b: {c: 2}}</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dir</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {a:1, b: {c: 2}}</span></code></pre>\n<h2 id=\"deep-copy\"><a href=\"#deep-copy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Deep copy</h2>\n<p>Để tránh tình huống này xảy ra, chúng ta sẽ muốn thực hiện cái gọi là deep copy, trước tiên là serialize thành string rồi deserialize ngược lại</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> copy <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Lại tuy nhiên, nếu bên trong object là một giá trị không thể serialize như <code class=\"language-text\">Date</code> object, ko thực hiện được.</p>\n<p>Có thể dùng <code class=\"language-text\">cloneDeep</code> của <a href=\"https://lodash.com/docs/4.17.11#cloneDeep\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">thư viện lodash</a> là an toàn nhất để thực hiện Deep copy, còn nếu thích tự làm mọi thứ, thì đây là một hàm implement chức năng clone deep</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> copy<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// kiểu primitive, null hoặc undefined</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span> <span class=\"token operator\">==</span> obj <span class=\"token operator\">||</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// nếu là kiểu Date</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    copy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    copy<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setTime</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> copy<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// kiểu Array</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      copy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> copy<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// kiểu Function</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">copy</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> copy<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// kiểu Object</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> attr <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> copy<span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> copy<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"Unable to copy obj as type isn't supported \"</span> <span class=\"token operator\">+</span> obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">constructor</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://smalldata.tech/blog/2018/11/01/copying-objects-in-javascript\" target=\"_blank\" rel=\"noopener noreferrer\">COPYING OBJECTS IN JAVASCRIPT</a></p>\n"}},{"node":{"title":"3 lỗi javascript thường mắc phải làm ảnh hưởng perfomance","path":"/3-loi-javascript-thuong-mac-phai-lam-anh-huong-perfomance/","date":"5. November 2018","timeToRead":1,"desc":"Bài viết dành cho những người nghiện tốc độ, nghiện cách viết ES6","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#1-loop-qua-m%E1%BB%99t-array\">1. loop qua một array</a></li>\n<li><a href=\"#2-duplicate-m%E1%BB%99t-array\">2. Duplicate một array</a></li>\n<li><a href=\"#3-loop-qua-m%E1%BB%99t-object\">3. Loop qua một object</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"1-loop-qua-một-array\"><a href=\"#1-loop-qua-m%E1%BB%99t-array\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. loop qua một array</h2>\n<p>Chúng ta thử xem thời gian tiêu tốn cho việc loop qua 10k item trong array</p>\n<ul>\n<li><code class=\"language-text\">for</code>: ~10 microseconds</li>\n<li><code class=\"language-text\">while</code>: ~11 microseconds</li>\n<li><code class=\"language-text\">forEach</code>: ~77 microseconds</li>\n<li><code class=\"language-text\">for-of</code>: ~110 microseconds</li>\n<li><code class=\"language-text\">reduce</code>: ~113 microseconds</li>\n</ul>\n<p>Nếu muốn tính tổng của một array thì sử dụng <code class=\"language-text\">reduce</code> là rõ ràng, tuy nhiên cái giá phải trả quá lớn. Vòng lặp mới nhất từ ES6 <code class=\"language-text\">for-of</code> cũng về áp chót. Như vậy cứ xài vòng <code class=\"language-text\">for</code> kinh điển, tuy cũ mà nhanh gấp 10 lần cái <code class=\"language-text\">for-of</code></p>\n<h2 id=\"2-duplicate-một-array\"><a href=\"#2-duplicate-m%E1%BB%99t-array\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Duplicate một array</h2>\n<p>Khi thế giới đang tồn thờ tư tưởng <strong>immutable function</strong> ( không sửa cái input khi cho ra output ), việc duplicate một input array là chuyện thường ngày ở huyện.</p>\n<p>Chúng ta hãy xem kết quả tất cả các cách chúng ta có thể dùng để duplicate một array</p>\n<ul>\n<li><code class=\"language-text\">[].concat(arr)</code>: ~366 microseconds</li>\n<li><code class=\"language-text\">arr.slice()</code>: ~367 microseconds</li>\n<li><code class=\"language-text\">arr.map(x =&gt; x)</code>: ~469 microseconds</li>\n<li><code class=\"language-text\">[...arr]</code>: ~512 microseconds</li>\n<li><code class=\"language-text\">Array.from(arr)</code>: ~1,436 microseconds</li>\n</ul>\n<p>Như vậy 2 phương thức cũ như dưa mắm <code class=\"language-text\">concat</code> và <code class=\"language-text\">slice</code> vẫn dành chiến thắng, kiểu spread operation mới ES6 vẫn top cuối.</p>\n<h2 id=\"3-loop-qua-một-object\"><a href=\"#3-loop-qua-m%E1%BB%99t-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Loop qua một object</h2>\n<ul>\n<li><code class=\"language-text\">for(let key in obj)</code>: ~240 microseconds</li>\n<li><code class=\"language-text\">Object.keys(obj)</code> sau đó for each: ~294 microseconds</li>\n<li><code class=\"language-text\">Object.entries(obj)</code> sau đó for of: ~535 microseconds</li>\n</ul>\n<p>Ở hai cách làm bên dưới, do phải tạo thêm một mảng chứa key, rồi mới loop qua mảng này object nên nó chậm.</p>\n<div class=\"note\">Đừng mù quáng xài cách viết mới nếu không phù hợp với ứng dụng đang viết</div>\n<p><a href=\"https://hackernoon.com/3-javascript-performance-mistakes-you-should-stop-doing-ebf84b9de951\" target=\"_blank\" rel=\"noopener noreferrer\">3 JavaScript Performance Mistakes You Should Stop Doing &#x3C;/a</p>\n"}}]}}},"context":{}}