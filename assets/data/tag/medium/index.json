{"hash":"a024fab2966897089cf72f0b270a7db411a685ed","data":{"tag":{"title":"medium","belongsTo":{"edges":[{"node":{"id":"f92db246b489ea2b34cf82e11e30aea6","title":"Làm tính năng Theme trong React?","path":"/lam-tinh-nang-theme-trong-react/","date":"2021-02-21","timeToRead":3,"desc":"Sẽ có nhiều tiếp cận để làm theme cho trang web, mổ xẻ 2 cách phổ biến hiện nay trong React, chọn cách nào cho nó đơn giản nhưng mang lại hiệu quả cao","content":"<p>Để hỗ trợ tính năng <em>Theme</em>, cho phép người dùng lựa chọn kiểu giao diện mà họ thích, trong React, bạn sẽ có thể tiếp cận 1 trong 2 cách dùng CSS-in-JS hoặc dùng CSS variable (tất nhiên không có hỗ trợ với IE)</p>\n<p>Nếu dùng CSS-in-JS bạn sẽ có thể làm được nhiều <em>thứ</em> hơn, bạn có một bộ công cụ đủ các <strong>đạo cụ</strong> để mua mai trong JS. Bài viết này sẽ chỉ ra tại sao bạn nên dùng CSS variable cho nhu cầu làm theme</p>\n<p>Nếu dùng CSS-in-JS, trong React bạn sẽ tổ chức một <code class=\"language-text\">ThemeProvider</code> bằng React Context, dùng hook <code class=\"language-text\">useTheme</code>  để lấy giá trị trong <code class=\"language-text\">ThemeProvider</code>, sẽ như thế này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">styled</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'@emotion/styled'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">ThemeProvider</span><span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'emotion-theming'</span>\n\n<span class=\"token keyword\">const</span> themes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  light<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    colors<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      primary<span class=\"token operator\">:</span> <span class=\"token string\">'deeppink'</span><span class=\"token punctuation\">,</span>\n      background<span class=\"token operator\">:</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  dark<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    colors<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      primary<span class=\"token operator\">:</span> <span class=\"token string\">'lightpink'</span><span class=\"token punctuation\">,</span>\n      background<span class=\"token operator\">:</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">PrimaryText</span> <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">div</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  padding<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n  color<span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span><span class=\"token property-access\">colors</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">primary</span><span class=\"token punctuation\">,</span>\n  backgroundColor<span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span><span class=\"token property-access\">colors</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">background</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ThemeToggler</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">,</span> onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> nextTheme <span class=\"token operator\">=</span> theme <span class=\"token operator\">===</span> <span class=\"token string\">'light'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'dark'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'light'</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>nextTheme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Change to </span><span class=\"token punctuation\">{</span>nextTheme<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> mode\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">,</span> setTheme<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeProvider</span></span> <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>themes<span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PrimaryText</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">This text is the primary color</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">PrimaryText</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeToggler</span></span>\n        <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextTheme</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setTheme</span><span class=\"token punctuation\">(</span>nextTheme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeProvider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">App</span></code></pre>\n<p>Nếu dùng CSS variable, chúng ta khai bao một bộ các biến cần dùng, rồi chèn thêm <code class=\"language-text\">data-theme</code> cho thẻ <code class=\"language-text\">body</code></p>\n<p>CSS</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body<span class=\"token attribute\"><span class=\"token punctuation\">[</span><span class=\"token attr-name\">data-theme</span><span class=\"token operator\">=</span><span class=\"token attr-value\">'light'</span><span class=\"token punctuation\">]</span></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token variable\">--colors-primary</span><span class=\"token punctuation\">:</span> <span class=\"token color\">deeppink</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">--colors-background</span><span class=\"token punctuation\">:</span> <span class=\"token color\">white</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">body<span class=\"token attribute\"><span class=\"token punctuation\">[</span><span class=\"token attr-name\">data-theme</span><span class=\"token operator\">=</span><span class=\"token attr-value\">'dark'</span><span class=\"token punctuation\">]</span></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token variable\">--colors-primary</span><span class=\"token punctuation\">:</span> <span class=\"token color\">lightpink</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">--colors-background</span><span class=\"token punctuation\">:</span> <span class=\"token color\">black</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Phần implement của React component lúc này sửa lại</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token string\">'./css-vars.css'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">styled</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'@emotion/styled'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">PrimaryText</span> <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">div</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  padding<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n  color<span class=\"token operator\">:</span> <span class=\"token string\">'var(--colors-primary)'</span><span class=\"token punctuation\">,</span>\n  backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'var(--colors-background)'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ThemeToggler</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">,</span> setTheme<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> nextTheme <span class=\"token operator\">=</span> theme <span class=\"token operator\">===</span> <span class=\"token string\">'light'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'dark'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'light'</span>\n  <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">dataset</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">theme</span> <span class=\"token operator\">=</span> theme\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setTheme</span><span class=\"token punctuation\">(</span>nextTheme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Change to </span><span class=\"token punctuation\">{</span>nextTheme<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> mode\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PrimaryText</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">This text is the primary color</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">PrimaryText</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeToggler</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">App</span></code></pre>\n<p>Thẳng thắn mà nói, cả 2 cách làm này đều cho kết quả như nhau về mặt trãi nghiệm sử dụng, dùng CSS-in-JS sẽ có chút cảm giác hơi quá đà kỹ thuật, từ chuyên ngành là over-engineering.</p>\n<iframe src=\"https://codesandbox.io/embed/css-variables-vs-themeprovider-df90h?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"CSS Variables vs ThemeProvider\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n<p>Về hiệu năng thì sao?</p>\n<p>ThemeProvider</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/b903d3908c2f09f6139573d3da3ce48d0e831885/2cc29/static/e25d5f73f3fffe0fed8586eea95892df/e7448/theme-provider.png\" alt=\"Profiling session showing everything rendered\"></p>\n<p>CSS variable</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/e737a004afce33b75c4c0b07e42c58a3ff1aaeec/21d3b/static/47d22cd6f96a31f50329ff658f18af39/e7448/css-vars.png\" alt=\"Profiling session showing only one component rendered\"></p>\n<p>Cũng không nhất thiết phải nhìn vào con số mili giây phải tốn cho việc render, vì simple này khá là bé. Bạn cứ hình dùng nếu một cây React Component với hàng trăm component con lồng ghép nhau, khi thay đổi giá trị trong ThemeProvider, tất cả những component đều bị render lại thì sẽ như thế nào? Việc dùng CSS variable sẽ mang lại hiệu quả hơn nhiều vì trình duyệt không phải làm quá nhiều thứ như cách 1.</p>\n<p>Có một lý do mà mình cho là hơi ngụy biện khi khăng khăng đòi dùng JS-in-CSS theo mình đoán là các bạn thật sự chưa đủ tự tin cũng như \"trình\" để viết CSS hiện đại, bạn chuyên tâm nâng tầm JS của mình mà quên mất việc nâng tầm CSS, vón đã phát triển rất xa từ cái thời bạn dùng <code class=\"language-text\">float</code></p>\n<p><a href=\"https://epicreact.dev/css-variables/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Use CSS Variables instead of React Context</a></p>\n","cover_image":""}},{"node":{"id":"af1b4fabe8e0499431dafa72082c9288","title":"Hỏi nhanh đáp gọn về REST","path":"/hoi-nhanh-dap-gon-ve-rest/","date":"2021-01-15","timeToRead":2,"desc":"Chuyên mục hỏi nhanh - đáp gọn, nếu bạn chưa biết gì về REST","content":"<p><em>Một vài đặc tính chính của REST?</em></p>\n<ul>\n<li>REST là dạng stateless, server sẽ không có thông tin <em>status</em> (nói cách khác là không lưu giữ session)</li>\n<li>Web service chủ yếu dùng POST để thao tác, REST dùng <code class=\"language-text\">GET</code> để truy xuất đến resource</li>\n</ul>\n<p><em>Các thành phần chính của một http response</em></p>\n<ul>\n<li>Status / Response Code</li>\n<li>HTTP Version</li>\n<li>Response header</li>\n<li>Response body</li>\n</ul>\n<p><em>Các thành phần chính của một http request</em></p>\n<ul>\n<li>Method (<code class=\"language-text\">GET</code>, <code class=\"language-text\">POST</code>, <code class=\"language-text\">PUT</code>, <code class=\"language-text\">DELETE</code>)</li>\n<li>URI</li>\n<li>HTTP Version</li>\n<li>Request Header</li>\n<li>Request Body</li>\n</ul>\n<p><em>Stateless là gì?</em></p>\n<p>Theo định nghĩa của RESTful, server không lưu trữ bất kỳ thông tin gì về client state, nguyên tắc này gọi là <strong>Stateless</strong>. Phía client gửi thông tin cần thiết trên mỗi request</p>\n<p><em>Stateless có gì hay?</em></p>\n<p>Scale khả năng đáp ứng của API lên cho hàng triệu concurrent user bằng cách deploy lên nhiều server  khác nhau. Bất kỳ server nào cũng có thể handle một request từ client vì tất cả thông tin cần thiết điều được gửi từ phía client.</p>\n<p>Đơn giản hóa API nhờ vào việc gở bỏ việc đồng bộ logic của <em>state</em></p>\n<p>Dễ cache hơn. Phía server có thể quyết định cache hay không một kết quả HTTP request dựa vào thông tin của một request, những request trước đó không ảnh hưởng đến khả năng <em>cache</em> của request hiện tại.</p>\n<p><em>Vài cái status code phổ biến?</em></p>\n<ul>\n<li>201 created</li>\n<li>204 No content</li>\n<li>400 Bad request</li>\n<li>403 Forbidden</li>\n<li>404 Not found</li>\n<li>405 Method not allowed</li>\n<li>409 Conflict</li>\n<li>500 internal server error</li>\n</ul>\n<p><em>Cái gì cache được, cái gì không?</em></p>\n<ul>\n<li><code class=\"language-text\">GET</code> cache được</li>\n<li><code class=\"language-text\">POST</code> mặc định là không, nhưng có thể dùng <strong>expires header</strong> hoặc <strong>cache-control header</strong> nếu muốn bật cache</li>\n<li><code class=\"language-text\">PUT/DELETE</code> không</li>\n</ul>\n<p><em>Khác nhau giữa AJAX và REST?</em></p>\n<p>AJAX là một <strong>kỹ thuật thực hiện phía client</strong> để cập nhập giao diện, trong khi REST là <strong>một kiểu kiến trúc</strong> để truyền và xử lý HTTP Request.</p>\n<p><em>Keep-Alive là gì và lợi ích của nó?</em></p>\n<p>Mặc định một HTTP connection sẽ tự đống sau khi request đã complete, nghĩa là phía server sẽ close TCP connection sau khi đã gửi đi response. Để giữ connection này cho nhiều request, dùng thuộc tính <code class=\"language-text\">keep-alive</code> trên header</p>\n<p>Ví dụ</p>\n<pre class=\"language-text\"><code class=\"language-text\">Message Trace:\n-------------------------------------------\n~$ curl -I https://www.domain.com/file.html\nHTTP/1.1 200 OK\nConnection: Keep-Alive\nContent-Type: text/html; charset=UTF-8\nDate: Thu, 15 Jan 2015 16:45:29 GMT\nContent-Length: 1845\nKeep-Alive: timeout=10, max=20\nServer: Apache/2.4.9 (Unix) PHP/5.6.2\n-------------------------------------------</code></pre>\n<p>Lợi ích</p>\n<ul>\n<li><strong>Giảm tải việc sử dụng CPU</strong>, mỗi lần thiết lập một TCP connection sẽ cần tiêu hao CPU và bộ nhớ.</li>\n<li><strong>Cải thiện tốc độ trang web</strong>: đáp ứng nhiều file sử dụng cùng một connection cho phép giảm tải và nâng cao tốc độ của ứng dụng</li>\n<li><strong>HTTPS</strong>: muốn dùng keep-alive bắt buộc phải là HTTPS, cũng có thể xem là một ưu điểm cho vấn đề bảo mật</li>\n</ul>\n","cover_image":""}},{"node":{"id":"dc34c8a0c083ef6c15db1a0747852887","title":"Hỏi nhanh đáp gọn về webpack","path":"/hoi-nhanh-dap-gon-ve-webpack/","date":"2021-01-13","timeToRead":2,"desc":"Chuyên mục hỏi nhanh - đáp gọn, nếu bạn chưa biết gì về webpack","content":"<p><em>🐸 Những module pattern nào webpack hỗ trợ?</em></p>\n<p><code class=\"language-text\">common.js</code> và es6</p>\n<p>🐸 Có được phép có nhiều entry point trong cùng 1 file config?*</p>\n<p>Có</p>\n<p><em>🐸 Làm sao để tạo file config webpack tự động?</em></p>\n<p><code class=\"language-text\">webpack-cli init</code></p>\n<p><em>🐸 Loader trong webpack là gì?</em></p>\n<p>transform những module nào không phải là JS vào trong bundle</p>\n<p><em>🐸 Loader chạy sync hay async</em></p>\n<p>Cả hai</p>\n<p><em>🐸 Khác nhau giữa loader và plugin</em></p>\n<p>Loader dùng để pre-processing, plugin phức tạp hơn và nó can thiệp nhiều vào quá trình compile.</p>\n<p><em>🐸 Làm sao để tách một số data ra khỏi bundle thành một file riêng biệt, ví dụ như file css</em></p>\n<p>Sử dụng <a href=\"https://github.com/webpack-contrib/extract-text-webpack-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ExtractTextWebpackPlugin</a>. Tất cả css sẽ không còn nằm inline trong file JS bundle, nó sẽ là một file riêng (style.css chẳng hạn)</p>\n<p><em>🐸 Hot module replacement là gì?</em></p>\n<p>Tính năng cho phép cập nhập module mà không cần reload</p>\n<p><em>🐸 parallel-webpack là gì và nó ảnh hưởng thế nào đến quá trình build</em></p>\n<p><a href=\"https://github.com/trivago/parallel-webpack\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">parallel-webpack</a> sẽ giúp config với nhiều entry point, cho phép webpack build parallel, nâng cao tốc độ build</p>\n<p><em>🐸 Mô tả một cách ngắn gọn long-term caching và làm sao sử dụng nó trong webpack?</em></p>\n<p>Browser sẽ cache static file bên dưới local để cải thiện tốc độ load, để đảm bảo nếu có bản build mới, trình duyệt biết và download file mới, tên  file thường được đặt như sau</p>\n<pre class=\"language-text\"><code class=\"language-text\">app.js?build=1\napp.js?build=2\n\n// hoặc\napp.js.2a6c1fee4b5b0d2c9285.js\napp.js.70b594fe8b07bcedaa98.js</code></pre>\n<p>Để làm việc này, trong webpack chúng ta đặt config</p>\n<pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token spread operator\">...</span>\n    output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     filename<span class=\"token operator\">:</span> <span class=\"token string\">\"[name].[hash].js\"</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><em>🐸 Khác nhau giữa hash và chunkhash?</em></p>\n<p>[hash] tạo ra một id ngẫu nhiên cho từng lần build và sử dụng cho tất cả  chunk. Nếu thay [hash] bằng [chunkhash] nó sẽ tạo ra mỗi chunk một id ngẫu nhiên.</p>\n<p><em>🐸 Mô tả CommonsChunk Plugin?</em></p>\n<p>Là một tính năng có sẵn của webpack, cho phép tạo file riêng (gọi là chunk) cho những module dùng chung. Hỗ trợ caching và nâng cao tốc độ load</p>\n<p><em>🐸Diễn giải đoạn code bên dưới</em></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>ContextReplacementPlugin</span><span class=\"token punctuation\">(</span>\n     <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">moment<span class=\"token charset\"><span class=\"token charset-punctuation punctuation\">[</span><span class=\"token escape\">\\/</span><span class=\"token special-escape escape\">\\\\</span><span class=\"token charset-punctuation punctuation\">]</span></span>locale</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n     <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token group punctuation\">(</span>en-gb<span class=\"token alternation keyword\">|</span>en-us<span class=\"token group punctuation\">)</span><span class=\"token special-escape escape\">\\.</span>js</span><span class=\"token regex-delimiter\">/</span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Báo với webpack, chỉ include những file có tên khớp với điều kiện <code class=\"language-text\">/(en-gb|en-us)\\.js/</code>, trong đường dẫn <code class=\"language-text\">/moment[\\/\\\\]locale/</code> khi bundle</p>\n<p><em>🐸 Làm sao để remove những css selector không dùng đến?</em></p>\n<p>Dùng plugin <a href=\"https://github.com/webpack-contrib/purifycss-webpack\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">purifycss-webpack</a></p>\n","cover_image":""}}]}}},"context":{}}