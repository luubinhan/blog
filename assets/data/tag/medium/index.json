{"hash":"32a692caa050f4449db6ef3758917749cdab929d","data":{"tag":{"title":"medium","belongsTo":{"edges":[{"node":{"id":"2aec3bdb98d3d116d4be25b134ee21c7","title":"Một vài ứng dụng của AbortController","path":"/2022-06-20-ung-dung-abort-controller/","date":"2022-06-20","timeToRead":2,"desc":"","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#x%C3%B3a-event-handler\">Xóa Event Handler</a></li>\n<li><a href=\"#async-trong-react-hook\">Async trong React hook</a></li>\n</ul>\n<!-- /TOC -->\n<p>Món <em>đồ chơi</em> mới <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AbortController\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AbortController</a> (ý là thằng bạn trình duyệt cũ không chịu chơi chung) cho phép chúng ta hủy một tác vụ đang chạy, tác dụ hay gặp nhất là việc fetching data</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vuilaptrinh.com'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">signal</span><span class=\"token operator\">:</span> controller<span class=\"token punctuation\">.</span>signal <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// dừng lại anh ơi</span>\ncontroller<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Trước khi có <code class=\"language-inline-text\">AbortController</code> đố bạn có cách nào để ngưng việc <code class=\"language-inline-text\">fetch</code> một khi đã báo nó <em>chạy đi em</em></p>\n<blockquote>\n<p><code class=\"language-inline-text\">controller.signal</code>  ở trên mang giá trị <code class=\"language-inline-text\">state</code>, mọi thứ được xử lý bên trong AbortController, chúng ta chỉ khai báo với anh <code class=\"language-inline-text\">fetch</code> có thay đổi state thì truyền vào đây giúp em nhé</p>\n</blockquote>\n<p>Chúng ta sẽ tham khảo một vài ứng dụng của AbortController nào</p>\n<h2 id=\"xóa-event-handler\"><a href=\"#x%C3%B3a-event-handler\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xóa Event Handler</h2>\n<p>Nếu chúng ta muốn hủy đăng ký một trên <code class=\"language-inline-text\">event</code> để tránh ngốn RAM của user</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* do something */</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// hủy đăng ký</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* do something */</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nhưng nếu nhìn kỹ, chúng ta sẽ ngộ ra cái <code class=\"language-inline-text\">() => doSomething()</code> truyền cho <code class=\"language-inline-text\">addEventListener</code> và <code class=\"language-inline-text\">removeEventListener</code> hoàn toàn khác nhau, nghĩa là  việc chúng ta làm là công cốc rồi. Đúng ra chúng ta phải viết</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> doSomething<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> doSomething<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nhưng nếu lỡ chúng ta đã <em>khoái</em> arrow function và hông <em>khoái</em> cái <code class=\"language-inline-text\">removeEventListener</code>. Chúng ta có thể dùng <code class=\"language-inline-text\">AbortController</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> signal <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> controller<span class=\"token punctuation\">;</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* do something */</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> signal <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// unregister nè</span>\ncontroller<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>Lưu ý Chrome cũ không chạy và Safari dưới 15 không chạy</p>\n</blockquote>\n<h2 id=\"async-trong-react-hook\"><a href=\"#async-trong-react-hook\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Async trong React hook</h2>\n<p>Xung quanh việc <em>làm cái gì</em> bên trong <em>useEffect</em> có khá nhiều quan điểm, số lượng người dùng <code class=\"language-inline-text\">useEffect</code> để <em>fetching</em> data cũng không phải ít. Nói chung cũng ok thôi, và sử dụng <code class=\"language-inline-text\">async</code> bên trong <code class=\"language-inline-text\">useEffect</code> đúng là một <em>canh bạc</em> hên xui mai rũi, xui xui chưa fetch xong user <em>lạng</em> qua trang khác thì biết chuyện gì xảy ra rồi, nó vẫn fetching cho xong dữ liệu</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">VuiComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Để đảm bảm khi component chúng ta bị remove, nó phải hủy luôn việc fetching</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">VuiComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> signal <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> controller<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> controller<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Một điểm rất đáng để tâm trong React là sau khi <code class=\"language-inline-text\">await</code> cú call đầu tiên, nếu chúng ta lấy <code class=\"language-inline-text\">state</code> bên trong hàm <code class=\"language-inline-text\">async</code> không hẳn nó là giá trị mới nhất, rất có thể nó lấy giá trị trước đó</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">KhongVuiComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Ở đây không chắc value lúc nào cũng = giá trị sau khi click button nha</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Increment<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">fetchButton<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n","cover_image":""}},{"node":{"id":"bdfc71038bab95dc85fb3d294445a3b7","title":"Sử dụng React-Query để fetch data","path":"/2021-08-15-data-fetching-voi-react-query/","date":"2021-08-15","timeToRead":4,"desc":"Một giải pháp để chúng ta có thể đơn giản hóa việc lưu trữ dữ liệu từ server và inject vào trong component dễ dàng","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#th%E1%BB%B1c-hi%E1%BB%87n-fetch-v%E1%BB%9Bi-usequery\">Thực hiện fetch với <code class=\"language-inline-text\">useQuery</code></a></li>\n<li><a href=\"#th%E1%BB%B1c-hi%E1%BB%87n-cache\">Thực hiện cache</a></li>\n</ul>\n<!-- /TOC -->\n<p>Đã bao giờ anh em react chúng ta rơi vào cảnh sau: thử tới thử lui bao nhiều là thư viện để quản lý global state, thử bao nhiêu là hook <code class=\"language-inline-text\">useFancyPromise</code>, rồi tự viết những giải pháp riêng, tất cả điều dẫn đến một kết cục: viết cả đống code để xử lý việc fetch data?</p>\n<blockquote>\n<p>Server state và client state cơ bản là khác nhau, vậy tại sao lại trộn chung</p>\n</blockquote>\n<p><strong>Đặc điểm của Server state</strong></p>\n<ol>\n<li><strong>cố định</strong>, ngoài khả năng kiểm soát của client</li>\n<li><strong>bất đồng bộ (async)</strong>, cần fetch để lấy dữ liệu hoặc cập nhập</li>\n<li><strong>chia sẽ</strong>, nhiều người cùng truy xuất đến cùng một tập dữ liệu cũng như thao tác xử lý trên tập dữ liệu này</li>\n</ol>\n<blockquote>\n<p>Đến lúc dừng việc trộn server state vào trong client state</p>\n</blockquote>\n<p><strong>Lợi ích mang lại khi tách việc quản lý server state bằng một công cụ riêng</strong></p>\n<ol>\n<li><strong>cache</strong>, phần khó nhất của lập trình</li>\n<li><strong>Không duplicate</strong> nhiều request</li>\n<li><strong>Cập nhập</strong> ngầm các dữ liệu outdate</li>\n<li><strong>Tối ưu hiệu năng</strong> bằng phân trang, lazy load</li>\n<li>Quản lý <strong>memory và garbage collection</strong> tốt hơn</li>\n</ol>\n<p>Xin giới thiệu với bạn người bạn mới React-query, anh này sẽ cung cấp cho chúng ta</p>\n<ul>\n<li>Một global context để lưu trữ dữ liệu lấy về từ server</li>\n<li>Thiết đặt caching vô cùng đơn giản</li>\n</ul>\n<p>Nếu thích bạn cũng có thể tham khảo thêm <a href=\"https://github.com/vercel/swr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">swr</a> cũng khá cool</p>\n<p>Chúng ta sẽ có các Server side APIs sau</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// api/product.js</span>\n\n<span class=\"token comment\">// 1. Fetch tất cả products</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useFetchProducts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 2. Fetch một product cụ thể</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useFetchProduct</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 3. Thêm một product</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useAddProduct</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">product</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 4. Cập nhập một product</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useEditProduct</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">product</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 5. Xóa một product</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useDeleteProduct</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"thực-hiện-fetch-với-usequery\"><a href=\"#th%E1%BB%B1c-hi%E1%BB%87n-fetch-v%E1%BB%9Bi-usequery\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thực hiện fetch với <code class=\"language-inline-text\">useQuery</code></h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-query'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useFetchProducts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token comment\">// định danh</span>\n<span class=\"gridsome-highlight-code-line\">\t\t<span class=\"token string\">'products'</span><span class=\"token punctuation\">,</span></span>\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/products'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sử dụng trong component</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useFetchProducts <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../api/products\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Products</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> products<span class=\"token punctuation\">,</span>\n\t\tisLoading\n\t<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useFetchProducts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token punctuation\">{</span>\n\t\t\t\tisLoading <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token punctuation\">{</span>\n\t\t\t\tproducts <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n\t\t\t\t\tproducts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">product</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>product<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t\t\t\t\t</span><span class=\"token punctuation\">{</span>product<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t\t\t\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Việc <code class=\"language-inline-text\">fetch</code> dữ liệu sẽ còn thêm các tính năng như <em>search, phân trang, filter</em>. Có react-query mọi thứ sẽ vô cùng đơn giản</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useFetchProducts <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../api/products\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Products</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// trang hiện tại</span>\n<span class=\"gridsome-highlight-code-line\">\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>page<span class=\"token punctuation\">,</span> setPage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span>\n\t<span class=\"token comment\">// số item trên trang</span>\n<span class=\"gridsome-highlight-code-line\">\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>limit<span class=\"token punctuation\">,</span> setLimit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></span>\n\t<span class=\"token comment\">// từ khóa</span>\n<span class=\"gridsome-highlight-code-line\">\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\t\t</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> products<span class=\"token punctuation\">,</span>\n\t\tisLoading\n\t<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useFetchProducts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gridsome-highlight-code-line\">\t\tpage<span class=\"token punctuation\">,</span></span><span class=\"gridsome-highlight-code-line\">\t\tlimit<span class=\"token punctuation\">,</span></span><span class=\"gridsome-highlight-code-line\">\t\tname</span>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">\t\t\t</span><span class=\"token punctuation\">{</span>\n\t\t\t\tisLoading <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">\t\t\t</span><span class=\"token punctuation\">{</span>\n\t\t\t\tproducts <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n\t\t\t\t\tproducts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">product</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>product<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">\t\t\t\t\t\t\t</span><span class=\"token punctuation\">{</span>product<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">\t\t\t\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Chúng ta cần cập nhập lại <code class=\"language-inline-text\">useFetchProducts</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-query'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useFetchProducts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> page<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span>\n<span class=\"gridsome-highlight-code-line\">\t\t<span class=\"token punctuation\">[</span><span class=\"token string\">'products'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> page<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gridsome-highlight-code-line\">\t\t\t<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/products?page=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>page<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;limit=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>limit<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;search=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></span>\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"thực-hiện-cache\"><a href=\"#th%E1%BB%B1c-hi%E1%BB%87n-cache\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thực hiện cache</h2>\n<p>Ví dụ chúng ta muốn đặt cache 10s, chúng ta sẽ sử dụng thiết đặt <code class=\"language-inline-text\">staleTime</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-query'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useFetchProducts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> page<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token punctuation\">[</span><span class=\"token string\">'products'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> page<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/products?page=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>page<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;limit=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>limit<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;search=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span>\n<span class=\"gridsome-highlight-code-line\">\t\t\t<span class=\"token literal-property property\">staleTime</span><span class=\"token operator\">:</span> <span class=\"token number\">10000</span></span>\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>Cực kỳ đơn giản đúng không!</em></p>\n<p>Tưởng tượng chúng ta có danh sách <em>product</em> hiển thị trên màn hình, click vào một <em>product</em> chúng ta hiển thị pop-up với các thông tin của product</p>\n<p>Để <code class=\"language-inline-text\">fetch</code> một product, chúng ta cũng đồng thời áp dụng cache</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useFetchProduct</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token punctuation\">[</span><span class=\"token string\">'product'</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/products/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token literal-property property\">staleTime</span><span class=\"token operator\">:</span> <span class=\"token number\">10000</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Đến phần thú vị nè, <em>nếu các thông tin của từng product hoàn toán giống với thông tin trả về từ danh sách product?</em>, chúng ta có thể áp dụng cache cho từng product trong lúc fetch danh sách product</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQuery<span class=\"token punctuation\">,</span> useQueryClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-query'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useFetchProducts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> page<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gridsome-highlight-code-line\">\t<span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token function\">useQueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token punctuation\">[</span><span class=\"token string\">'products'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> page<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/products?page=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>page<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;limit=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>limit<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;search=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span>\t\t\t\n\t\t\t<span class=\"token literal-property property\">staleTime</span><span class=\"token operator\">:</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span>\n<span class=\"gridsome-highlight-code-line\">\t\t\t<span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">products</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>\t\t\t\tproducts<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">product</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gridsome-highlight-code-line\">\t\t\t\t\tqueryClient<span class=\"token punctuation\">.</span><span class=\"token function\">setQueryData</span><span class=\"token punctuation\">(</span></span>\t\t\t\t\t\t<span class=\"token punctuation\">[</span><span class=\"token string\">'product'</span><span class=\"token punctuation\">,</span> product<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\tproduct\n\t\t\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Bằng cách dùng <code class=\"language-inline-text\">useQueryClient().setQuery</code>, chúng ta force cache cho từng <code class=\"language-inline-text\">product.id</code>, để khi <code class=\"language-inline-text\">useFetchProduct</code> chạy nó sẽ có sẵn giá trị cache này và không cần thực hiện gọi API</p>\n<p>Thể hiện chút tình yêu với dự án <code class=\"language-inline-text\">react-query</code> nhé các bạn, <a href=\"https://github.com/tannerlinsley/react-query\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">star ngay không nói nhiều</a></p>\n","cover_image":""}},{"node":{"id":"70f3e2bd989634dc3f0a0ae306169ed8","title":"Prototype của object","path":"/2021-08-10-javascript-prototype-object/","date":"2021-08-10","timeToRead":3,"desc":"","content":"<p>Khi chúng ta <code class=\"language-inline-text\">console.log</code> một object của JS, sẽ thấy một property ẩn đặc biệt <code class=\"language-inline-text\">[[Prototype]]</code>, nó có thể là <code class=\"language-inline-text\">null</code> hoặc là trỏ đến một object khác</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">object a <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Prototype<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> prototype object b</code></pre></div>\n<p>Điều này có nghĩa là object a kế thừa từ object b, b có gì thì a sẽ có đó</p>\n<p>Chúng ta không thể truy xuất trực tiếp thông qua <code class=\"language-inline-text\">[[Prototype]]</code>, mà thông qua các phương pháp khác</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> animal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">eats</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Animal walk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> rabbit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">jumps</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"gridsome-highlight-code-line\">    <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> animal</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// hoặc khai báo bằng</span>\n<span class=\"gridsome-highlight-code-line\">rabbit<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> animal<span class=\"token punctuation\">;</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rabbit<span class=\"token punctuation\">.</span>eats<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => true;</span>\n\nrabbit<span class=\"token punctuation\">.</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-inline-text\">__proto__</code> != <code class=\"language-inline-text\">[[Prototype]]</code></p>\n</blockquote>\n<p>Về bản chất, <code class=\"language-inline-text\">__proto__</code> không phải là property <code class=\"language-inline-text\">[[Prototype]]</code>, chính xác thì nó là getter/setter của <code class=\"language-inline-text\">[[Prototype]]</code></p>\n<p>Thời điểm hiện tại, không khuyến khích dùng <code class=\"language-inline-text\">__proto__</code>, thay vào đó dùng <code class=\"language-inline-text\">Object.getPrototypeOf/Object.setPrototypeOf</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">surname</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Smith\"</span><span class=\"token punctuation\">,</span>\n    \n    <span class=\"token keyword\">set</span> <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    \n    <span class=\"token keyword\">get</span> <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> admin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">isAdmin</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>admin<span class=\"token punctuation\">.</span>fullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => John Smith</span>\n\nadmin<span class=\"token punctuation\">.</span>fullName <span class=\"token operator\">=</span> <span class=\"token string\">\"Alice Cooper\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gridsome-highlight-code-line\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>admin<span class=\"token punctuation\">.</span>fullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token comment\">// => Alice Cooper</span>\n\n<span class=\"gridsome-highlight-code-line\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>fullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token comment\">// => John Smith</span></code></pre></div>\n<p>Khi dùng prototype, không trực tiếp thay đổi property ở object cha từ object con, việc này cần thông qua một hàm setter để đảm bảo dữ liệu sẽ độc lập trên từng object.</p>\n<p>Như ví dụ trên, <code class=\"language-inline-text\">this</code> lúc này đang trỏ đến object phía trước dấu <code class=\"language-inline-text\">.</code>, nên dữ liệu hoàn toàn độc lập, trong khi các phương thức thì share với nhau</p>\n<h2 id=\"vòng-lặp-forin\"><a href=\"#v%C3%B2ng-l%E1%BA%B7p-forin\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vòng lặp <code class=\"language-inline-text\">for...in</code></h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> animal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">eats</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> rabbit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">jumps</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> animal\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gridsome-highlight-code-line\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>rabbit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token comment\">// jumps</span>\n\n<span class=\"gridsome-highlight-code-line\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> prop <span class=\"token keyword\">in</span> rabbit<span class=\"token punctuation\">)</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token comment\">// jumps, then eats</span></code></pre></div>\n<p>Nếu không muốn chạy qua các <code class=\"language-inline-text\">property</code> kề thừa qua <code class=\"language-inline-text\">__prototype__</code>, sử dụng <code class=\"language-inline-text\">obj.hasOwnProperty(key)</code> để xác định 1 property của được kế thừa hay không</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> prop <span class=\"token keyword\">in</span> rabbit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gridsome-highlight-code-line\">  <span class=\"token keyword\">let</span> isOwn <span class=\"token operator\">=</span> rabbit<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOwn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Our: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prop<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Our: jumps</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Inherited: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prop<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Inherited: eats</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Một điều thú vị, nếu để ý chúng ta không hề khai báo <code class=\"language-inline-text\">rabbit.hasOwnProperty</code>, vậy nó từ đâu mà có? và nó cũng không xuất hiện bên trong vòng lặp <code class=\"language-inline-text\">for...in</code>?</p>\n<p>Đây là một property kế thừa từ <code class=\"language-inline-text\">Object</code> chúa, và nó đã được khai báo decriptor với giá trị <code class=\"language-inline-text\">enumerable: false</code></p>\n<p>Đọc lại bài <a href=\"https://luubinhan.github.io/blog/2021-08-07-huong-dan-khoa-object-khong-cho-thay-doi/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">decriptor</a></p>\n<h2 id=\"objectprototype\"><a href=\"#objectprototype\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Object.prototype</h2>\n<p>Xét qua ví dụ</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> obj <span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => \"[object Object]\"</span></code></pre></div>\n<p>Bạn có bao giờ thắc mắc tại sao lại có kết quả <code class=\"language-inline-text\">[object Object]</code>? <code class=\"language-inline-text\">obj</code> là một object rỗng mà?</p>\n<p>Thật ra, <code class=\"language-inline-text\">obj = {}</code> sẽ tương đương với <code class=\"language-inline-text\">obj = new Object()</code>, tức là, chúng ta khởi tạo một object thông qua việc gọi một constructor function, và nó sẽ kế thừa tất cả property, phương thức từ <code class=\"language-inline-text\">Object</code>, như <code class=\"language-inline-text\">toString</code>, <code class=\"language-inline-text\">[[Prototype]]</code></p>\n<p>Khi gọi <code class=\"language-inline-text\">obj.toString()</code> có nghĩa là chúng ta đang gọi đến phương thức <code class=\"language-inline-text\">Object.prototype.toString</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => true</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">===</span> obj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => true</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => true</span></code></pre></div>\n<blockquote>\n<p>Tất cả những object khác như <code class=\"language-inline-text\">Array</code>, <code class=\"language-inline-text\">Date</code>, <code class=\"language-inline-text\">Function</code> đều kế thừa từ <code class=\"language-inline-text\">Object</code></p>\n</blockquote>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> arr<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> arr<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span></code></pre></div>\n<p><img src=\"https://javascript.info/article/native-prototypes/console_dir_array.png\"></p>\n<h2 id=\"tóm-tắt\"><a href=\"#t%C3%B3m-t%E1%BA%AFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tóm tắt</h2>\n<ul>\n<li>Mỗi object sẽ chứa một property đặc biệt <code class=\"language-inline-text\">[[Prototype]]</code>, giá trị là null, hoặc trỏ đến một object khác</li>\n<li>Sử dụng <code class=\"language-inline-text\">obj.__proto__</code> để truy cập</li>\n<li><code class=\"language-inline-text\">this</code> luôn trỏ đến obj hiện tại thay vì prototype object</li>\n<li><code class=\"language-inline-text\">for..in</code> sẽ chạy qua tất cả property chính chủ và property được kế thừa</li>\n<li>Tất cả những object build-in (như Array, Object, Date) đều lưu các phương thức bên trong property <code class=\"language-inline-text\">prototype</code> (Array.prototype, Object.prototype, Date.prototype)</li>\n</ul>\n<p>Javascript.info</p>\n","cover_image":""}},{"node":{"id":"a69e8a733fdf12a74c6dfcf52d90e187","title":"Các cách lock một property hay object của JS","path":"/2021-08-07-huong-dan-khoa-object-khong-cho-thay-doi/","date":"2021-08-07","timeToRead":2,"desc":"","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#kh%C3%B3a-property-c%E1%BB%A7a-object\">Khóa property của object</a></li>\n<li><a href=\"#kh%C3%B3a-to%C3%A0n-b%E1%BB%99-object\">Khóa toàn bộ object</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"khóa-property-của-object\"><a href=\"#kh%C3%B3a-property-c%E1%BB%A7a-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khóa property của object</h2>\n<p>Set giá trị một object trong js, chúng ta chỉ cần biết đến <code class=\"language-inline-text\">property: value</code></p>\n<p>Vậy nếu muốn <em>khóa</em> <em>property</em> này không cho phép chỉnh sửa thì sao?</p>\n<p>Mỗi property trong object sẽ được <em>khuyến mãi</em> thêm 3 <em>flag attribute</em> <strong>đặc biệt</strong> - <strong>descriptor</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> descriptor <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>descriptor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// kết quả</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"writable\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  \t<span class=\"token string-property property\">\"enumerable\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  \t<span class=\"token string-property property\">\"configurable\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><strong>writable</strong>: = <code class=\"language-inline-text\">true</code> thì chúng ta cập nhập được <code class=\"language-inline-text\">value</code></li>\n<li><strong>enumerable</strong>: = <code class=\"language-inline-text\">true</code> thì khi loop chúng ta sẽ <strong>thấy</strong> nó</li>\n<li><strong>configurable</strong>: = <code class=\"language-inline-text\">true</code> thì có thể <em>delete</em> được, các <em>attribute</em> <code class=\"language-inline-text\">writable</code>, <code class=\"language-inline-text\">enumerable</code> có thể chỉnh sửa</li>\n</ul>\n<p>Để thay đổi giá trị cho các attribute này, chúng ta thực hiện thông qua hàm <code class=\"language-inline-text\">Object.defineProperty(obj, propertyName, descriptor)</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"gridsome-highlight-code-line\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gridsome-highlight-code-line\">    <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span><span class=\"gridsome-highlight-code-line\">    <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span><span class=\"gridsome-highlight-code-line\">    <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// không còn change giá trị của name được nữa</span>\nuser<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Peter\"</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// Error: Cannot assign to read only property 'name'</span>\n\n<span class=\"token comment\">// không còn thấy khi loop</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> user<span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ví dụ một property có attribute <code class=\"language-inline-text\">configurable=false</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// tự động gán false hết cho các attribute</span>\n<span class=\"token keyword\">let</span> descriptor <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">,</span> <span class=\"token string\">'PI'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n{\n  \"value\": 3.141592653589793,\n  \"writable\": false,\n  \"enumerable\": false,\n  \"configurable\": false\n}\n*/</span>\n\nMath<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// Error, because it has writable: false</span>\n\n<span class=\"token comment\">// ko thể thay đổi attribute writable nữa</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">,</span> <span class=\"token string\">\"PI\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Error, because of configurable: false</span></code></pre></div>\n<blockquote>\n<p>Nếu chỉ set <code class=\"language-inline-text\">configurable = false</code> thì vẫn thay đổi giá trị được, nó chỉ không cho thay đổi attribute và delete</p>\n</blockquote>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nuser<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Pete\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// vẫn được</span>\n<span class=\"token keyword\">delete</span> user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n<p>Nếu muốn khai báo nhiều property cùng lúc, dùng <code class=\"language-inline-text\">Object.defineProperties()</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">prop1</span><span class=\"token operator\">:</span> descriptor1<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">prop2</span><span class=\"token operator\">:</span> descriptor2\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Ví dụ</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">surname</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Smith\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Lấy tất cả descriptor, <code class=\"language-inline-text\">Object.getOwnDescriptors(obj)</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> clone <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptors</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"khóa-toàn-bộ-object\"><a href=\"#kh%C3%B3a-to%C3%A0n-b%E1%BB%99-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khóa toàn bộ object</h2>\n<p>Để khóa hẳn một object, chúng ta có đến tận 3 phương thức</p>\n<ul>\n<li><code class=\"language-inline-text\">Object.preventExtension(obj)</code> không cho thể các property mới</li>\n<li><code class=\"language-inline-text\">Object.seal(obj)</code> không cho thêm/xóa các property, <code class=\"language-inline-text\">configurable: false</code></li>\n<li><code class=\"language-inline-text\">Object.freeze(obj)</code> không cho thêm/xóa/thay đổi property, <code class=\"language-inline-text\">configurable: false, writable: false</code></li>\n</ul>\n<p><a href=\"https://javascript.info/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://javascript.info/</a></p>\n","cover_image":""}},{"node":{"id":"9e78d79690782d97be1a4e92614d65b1","title":"Intersection Observer API","path":"/2021-07-24-huong-dan-su-dung-intersection-observer-api/","date":"2021-07-24","timeToRead":3,"desc":"Làm sao để chạy một hàm khi element bắt đầu xuất hiện trên màn hình?","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng-1-lazy-load-image\">Ứng dụng 1: lazy load image</a></li>\n<li><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng-2-t%E1%BB%B1-%C4%91%E1%BB%99ng-pause-video-khi-ra-kh%E1%BB%8Fi-m%C3%A0n-h%C3%ACnh\">Ứng dụng 2: Tự động pause video khi ra khỏi màn hình</a></li>\n<li><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng-3-toggle-class-khi-header-sticky\">Ứng dụng 3: Toggle class khi header sticky</a></li>\n</ul>\n<!-- /TOC -->\n<p>Chúng ta thường phải đặt <code class=\"language-inline-text\">listener</code> trên sự kiện <code class=\"language-inline-text\">window.scroll</code> thực hiện một số thao tác tính toán, so sánh với thanh <em>scroll</em> để biết được khi nào element bắt đầu xuất hiện.</p>\n<p>Cách làm này gây nhiều vấn đề hiệu năng và tương đối rườm rà. Giờ các trình duyệt đã đồng loạt hỗ trợ <strong>Intersection Observer API</strong>, chúng ta có một cách hoàn toàn <em>gọn gàng, sạch sẽ</em> mà lại tối ưu hiệu năng hơn nhiều.</p>\n<p>Cách sử dụng như sau, chúng ta khởi tạo một <em>instance</em> <code class=\"language-inline-text\">IntersectionObserver</code> và gọi <code class=\"language-inline-text\">observe</code> trên element muốn theo dõi (<em>watch</em> là thuật ngữ chuyên ngành hơn)</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myImg <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.animate-me'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry<span class=\"token punctuation\">,</span> observer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> entry <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> observer <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>myImg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Trong trường hợp chúng ta muốn <strong>observe</strong> trên nhiều element cùng lúc</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myImgs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.animate-me'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyImgs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">image</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Để thực thi một tác vụ nào đó khi element bắt đầu xuất hiện trong viewport hoặc leave khỏi viewport</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myImgs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.animate-me'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>intersectionRatio <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in the view'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'out of view'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyImgs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">image</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Với điều kiện <code class=\"language-inline-text\">intersectionRatio > 0</code> chúng ta biết được element đã xuất hiện trong viewport hay không</p>\n<p>Với lazy load, chúng ta chỉ cần observe ở lần đầu tiên khi xuất hiện trên viewport, chúng ta sẽ <code class=\"language-inline-text\">unobserve</code> nó đi vì không cần <strong>tracking</strong> tiếp nữa</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myImgs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.animate-me'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>intersectionRatio <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in the view'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      observer<span class=\"token punctuation\">.</span><span class=\"token function\">unobserve</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'out of view'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyImgs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">image</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-inline-text\">IntersectionObserver</code> API nhận thêm params thứ 2, để chúng ta truyền một số config</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">rootMargin</span><span class=\"token operator\">:</span> <span class=\"token string\">'50px 20px 75px 30px'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">threshold</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Các giá trị có thể truyền vào cho config</p>\n<ul>\n<li><code class=\"language-inline-text\">root</code> element dùng để kiểm tra intersection, nếu <code class=\"language-inline-text\">null</code> nó sẽ lấy <code class=\"language-inline-text\">document</code> viewport</li>\n<li><code class=\"language-inline-text\">rootMargin</code>:  khai báo như giá trị margin css, ví dụ <code class=\"language-inline-text\">3rem 2rem</code>, có thể dùng để thêm <code class=\"language-inline-text\">offset</code> cho intersection point</li>\n<li><code class=\"language-inline-text\">threhold</code>: mảng giá trị từ 0 đến 1, tương ứng với ratio xuất hiện của element, 0 = hoàn toàn ra khỏi viewport, 1 là đang nằm trong viewport hoàn toàn, <code class=\"language-inline-text\">callback</code> sẽ được gọi vào tất cả các giá trị đã khai báo</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/769b2733-5700-4d2d-a32f-6850a173abaa/1-dynamic-header-intersection-observer.png\"></p>\n<p>Element được xem là nằm ngoài viewport khi nó đã nằm ngoài viewport + 15px margin</p>\n<p><img src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a5908e69-f81a-4e1c-81e6-aae2f1b96a28/2-dynamic-header-intersection-observer.png\"></p>\n<p><img src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b95822cd-d3e8-4b71-9d38-862e6d39990a/3-dynamic-header-intersection-observer.png\"></p>\n<h2 id=\"ứng-dụng-1-lazy-load-image\"><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng-1-lazy-load-image\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ứng dụng 1: lazy load image</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">entries<span class=\"token punctuation\">,</span> observer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \nentries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Placeholder replacement */</span>\n    entry<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">;</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">unobserve</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">{</span><span class=\"token literal-property property\">rootMargin</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0px 0px -200px 0px\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">img</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"ứng-dụng-2-tự-động-pause-video-khi-ra-khỏi-màn-hình\"><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng-2-t%E1%BB%B1-%C4%91%E1%BB%99ng-pause-video-khi-ra-kh%E1%BB%8Fi-m%C3%A0n-h%C3%ACnh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ứng dụng 2: Tự động pause video khi ra khỏi màn hình</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> video <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> isPaused <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Flag for auto-paused video */</span>\n<span class=\"token keyword\">let</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries<span class=\"token punctuation\">,</span> observer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n  entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>intersectionRatio<span class=\"token operator\">!=</span><span class=\"token number\">1</span>  <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>video<span class=\"token punctuation\">.</span>paused<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      video<span class=\"token punctuation\">.</span><span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> isPaused <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isPaused<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>video<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> isPaused<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">threshold</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"ứng-dụng-3-toggle-class-khi-header-sticky\"><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng-3-toggle-class-khi-header-sticky\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ứng dụng 3: Toggle class khi header sticky</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> primaryNav <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'primaryNav'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">callBack</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sticky\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>intersectionRatio <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span> \n    callBack<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">threshold</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>primaryNav<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">prefers-reduced-motion</span><span class=\"token punctuation\">:</span> no-preference<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">.scroller</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">scroll-behavior</span><span class=\"token punctuation\">:</span> smooth<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tham khảo</p>\n<ul>\n<li><a href=\"https://alligator.io/js/intersection-observer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://alligator.io/js/intersection-observer/</a></li>\n<li><a href=\"https://css-tricks.com/a-few-functional-uses-for-intersection-observer-to-know-when-an-element-is-in-view/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://css-tricks.com/a-few-functional-uses-for-intersection-observer-to-know-when-an-element-is-in-view/</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2021/07/dynamic-header-intersection-observer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.smashingmagazine.com/2021/07/dynamic-header-intersection-observer/</a></li>\n</ul>\n","cover_image":""}},{"node":{"id":"bff5502ad191e77b4931317d28f1584a","title":"Làm tính năng Theme trong React?","path":"/2021-02-21-lam-theme-bang-css-hay-react-context/","date":"2021-02-21","timeToRead":3,"desc":"Sẽ có nhiều tiếp cận để làm theme cho trang web, mổ xẻ 2 cách phổ biến hiện nay trong React, chọn cách nào cho nó đơn giản nhưng mang lại hiệu quả cao","content":"<p>Để hỗ trợ tính năng <em>Theme</em>, cho phép người dùng lựa chọn kiểu giao diện mà họ thích, trong React, bạn sẽ có thể tiếp cận 1 trong 2 cách dùng CSS-in-JS hoặc dùng CSS variable (tất nhiên không có hỗ trợ với IE)</p>\n<p>Nếu dùng CSS-in-JS bạn sẽ có thể làm được nhiều <em>thứ</em> hơn, bạn có một bộ công cụ đủ các <strong>đạo cụ</strong> để mua mai trong JS. Bài viết này sẽ chỉ ra tại sao bạn nên dùng CSS variable cho nhu cầu làm theme</p>\n<p>Nếu dùng CSS-in-JS, trong React bạn sẽ tổ chức một <code class=\"language-inline-text\">ThemeProvider</code> bằng React Context, dùng hook <code class=\"language-inline-text\">useTheme</code>  để lấy giá trị trong <code class=\"language-inline-text\">ThemeProvider</code>, sẽ như thế này</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/styled'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>ThemeProvider<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'emotion-theming'</span>\n\n<span class=\"token keyword\">const</span> themes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">light</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">colors</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">primary</span><span class=\"token operator\">:</span> <span class=\"token string\">'deeppink'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">dark</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">colors</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">primary</span><span class=\"token operator\">:</span> <span class=\"token string\">'lightpink'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> PrimaryText <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span><span class=\"token function\">div</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">padding</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">.</span>primary<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">backgroundColor</span><span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span>colors<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ThemeToggler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">,</span> onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> nextTheme <span class=\"token operator\">=</span> theme <span class=\"token operator\">===</span> <span class=\"token string\">'light'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'dark'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'light'</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>nextTheme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Change to </span><span class=\"token punctuation\">{</span>nextTheme<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> mode\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">,</span> setTheme<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeProvider</span></span> <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>themes<span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PrimaryText</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">This text is the primary color</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">PrimaryText</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeToggler</span></span>\n        <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextTheme</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTheme</span><span class=\"token punctuation\">(</span>nextTheme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeProvider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>Nếu dùng CSS variable, chúng ta khai bao một bộ các biến cần dùng, rồi chèn thêm <code class=\"language-inline-text\">data-theme</code> cho thẻ <code class=\"language-inline-text\">body</code></p>\n<p>CSS</p>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body[data-theme='light']</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--colors-primary</span><span class=\"token punctuation\">:</span> deeppink<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--colors-background</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">body[data-theme='dark']</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--colors-primary</span><span class=\"token punctuation\">:</span> lightpink<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--colors-background</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Phần implement của React component lúc này sửa lại</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./css-vars.css'</span>\n<span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/styled'</span>\n\n<span class=\"token keyword\">const</span> PrimaryText <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span><span class=\"token function\">div</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">padding</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'var(--colors-primary)'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">backgroundColor</span><span class=\"token operator\">:</span> <span class=\"token string\">'var(--colors-background)'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ThemeToggler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">,</span> setTheme<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> nextTheme <span class=\"token operator\">=</span> theme <span class=\"token operator\">===</span> <span class=\"token string\">'light'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'dark'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'light'</span>\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>theme <span class=\"token operator\">=</span> theme\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTheme</span><span class=\"token punctuation\">(</span>nextTheme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Change to </span><span class=\"token punctuation\">{</span>nextTheme<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> mode\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PrimaryText</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">This text is the primary color</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">PrimaryText</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeToggler</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>Thẳng thắn mà nói, cả 2 cách làm này đều cho kết quả như nhau về mặt trãi nghiệm sử dụng, dùng CSS-in-JS sẽ có chút cảm giác hơi quá đà kỹ thuật, từ chuyên ngành là over-engineering.</p>\n<iframe src=\"https://codesandbox.io/embed/css-variables-vs-themeprovider-df90h?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"CSS Variables vs ThemeProvider\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n<p>Về hiệu năng thì sao?</p>\n<p>ThemeProvider</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/b903d3908c2f09f6139573d3da3ce48d0e831885/2cc29/static/e25d5f73f3fffe0fed8586eea95892df/e7448/theme-provider.png\" alt=\"Profiling session showing everything rendered\"></p>\n<p>CSS variable</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/e737a004afce33b75c4c0b07e42c58a3ff1aaeec/21d3b/static/47d22cd6f96a31f50329ff658f18af39/e7448/css-vars.png\" alt=\"Profiling session showing only one component rendered\"></p>\n<p>Cũng không nhất thiết phải nhìn vào con số mili giây phải tốn cho việc render, vì simple này khá là bé. Bạn cứ hình dùng nếu một cây React Component với hàng trăm component con lồng ghép nhau, khi thay đổi giá trị trong ThemeProvider, tất cả những component đều bị render lại thì sẽ như thế nào? Việc dùng CSS variable sẽ mang lại hiệu quả hơn nhiều vì trình duyệt không phải làm quá nhiều thứ như cách 1.</p>\n<p>Có một lý do mà mình cho là hơi ngụy biện khi khăng khăng đòi dùng JS-in-CSS theo mình đoán là các bạn thật sự chưa đủ tự tin cũng như \"trình\" để viết CSS hiện đại, bạn chuyên tâm nâng tầm JS của mình mà quên mất việc nâng tầm CSS, vón đã phát triển rất xa từ cái thời bạn dùng <code class=\"language-inline-text\">float</code></p>\n<p><a href=\"https://epicreact.dev/css-variables/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Use CSS Variables instead of React Context</a></p>\n","cover_image":""}},{"node":{"id":"e35584fe8d93774b9a4cfcce81d825d5","title":"Hỏi nhanh đáp gọn về REST","path":"/2021-01-15-rest-faq-hoi-nhanh-dap-gon-ve-rest/","date":"2021-01-15","timeToRead":3,"desc":"Chuyên mục hỏi nhanh - đáp gọn, nếu bạn chưa biết gì về REST","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#m%E1%BB%99t-v%C3%A0i-%C4%91%E1%BA%B7c-t%C3%ADnh-ch%C3%ADnh-c%E1%BB%A7a-rest\">Một vài đặc tính chính của REST?</a></li>\n<li><a href=\"#c%C3%A1c-th%C3%A0nh-ph%E1%BA%A7n-ch%C3%ADnh-c%E1%BB%A7a-m%E1%BB%99t-http-response\">Các thành phần chính của một http response</a></li>\n<li><a href=\"#c%C3%A1c-th%C3%A0nh-ph%E1%BA%A7n-ch%C3%ADnh-c%E1%BB%A7a-m%E1%BB%99t-http-request\">Các thành phần chính của một http request</a></li>\n<li><a href=\"#stateless-l%C3%A0-g%C3%AC\">Stateless là gì?</a></li>\n<li><a href=\"#stateless-c%C3%B3-g%C3%AC-hay\">Stateless có gì hay?</a></li>\n<li><a href=\"#v%C3%A0i-c%C3%A1i-status-code-ph%E1%BB%95-bi%E1%BA%BFn\">Vài cái status code phổ biến?</a></li>\n<li><a href=\"#c%C3%A1i-g%C3%AC-cache-%C4%91%C6%B0%E1%BB%A3c-c%C3%A1i-g%C3%AC-kh%C3%B4ng\">Cái gì cache được, cái gì không?</a></li>\n<li><a href=\"#kh%C3%A1c-nhau-gi%E1%BB%AFa-ajax-v%C3%A0-rest\">Khác nhau giữa AJAX và REST?</a></li>\n<li><a href=\"#keep-alive-l%C3%A0-g%C3%AC-v%C3%A0-l%E1%BB%A3i-%C3%ADch-c%E1%BB%A7a-n%C3%B3\">Keep-Alive là gì và lợi ích của nó?</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"một-vài-đặc-tính-chính-của-rest\"><a href=\"#m%E1%BB%99t-v%C3%A0i-%C4%91%E1%BA%B7c-t%C3%ADnh-ch%C3%ADnh-c%E1%BB%A7a-rest\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một vài đặc tính chính của REST?</h2>\n<ul>\n<li>REST là dạng <strong>stateless</strong>, server sẽ không có thông tin <em>status</em> (nói cách khác là không lưu giữ user session)</li>\n<li>Nếu <em>Web service</em> chủ yếu dùng POST để thao tác, thì REST dùng <code class=\"language-inline-text\">GET</code> để truy xuất đến resource</li>\n</ul>\n<h2 id=\"các-thành-phần-chính-của-một-http-response\"><a href=\"#c%C3%A1c-th%C3%A0nh-ph%E1%BA%A7n-ch%C3%ADnh-c%E1%BB%A7a-m%E1%BB%99t-http-response\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các thành phần chính của một http response</h2>\n<ul>\n<li>Status / Response Code</li>\n<li>HTTP Version</li>\n<li>Response header</li>\n<li>Response body</li>\n</ul>\n<h2 id=\"các-thành-phần-chính-của-một-http-request\"><a href=\"#c%C3%A1c-th%C3%A0nh-ph%E1%BA%A7n-ch%C3%ADnh-c%E1%BB%A7a-m%E1%BB%99t-http-request\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các thành phần chính của một http request</h2>\n<ul>\n<li>Method (<code class=\"language-inline-text\">GET</code>, <code class=\"language-inline-text\">POST</code>, <code class=\"language-inline-text\">PUT</code>, <code class=\"language-inline-text\">DELETE</code>)</li>\n<li>URI</li>\n<li>HTTP Version</li>\n<li>Request Header</li>\n<li>Request Body</li>\n</ul>\n<h2 id=\"stateless-là-gì\"><a href=\"#stateless-l%C3%A0-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Stateless là gì?</h2>\n<p>Theo định nghĩa của RESTful, server không lưu trữ bất kỳ thông tin gì về client state, đặc trưng này gọi là <strong>stateless</strong>. Phía client gửi thông tin cần thiết trên mỗi request</p>\n<h2 id=\"stateless-có-gì-hay\"><a href=\"#stateless-c%C3%B3-g%C3%AC-hay\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Stateless có gì hay?</h2>\n<ol>\n<li><strong>Scale</strong> khả năng đáp ứng của API lên cho hàng triệu <em>concurrent user</em> bằng cách deploy lên nhiều server khác nhau. Bất kỳ server nào cũng có thể handle một request từ client vì tất cả thông tin cần thiết điều được gửi từ phía client.</li>\n<li><strong>Đơn giản hóa API</strong> nhờ vào việc gở bỏ việc đồng bộ logic của <em>state</em></li>\n<li><strong>Dễ cache hơn</strong>, phía server có thể quyết định cache hay không một kết quả HTTP request dựa vào thông tin của một request, những request trước đó không ảnh hưởng đến khả năng <em>cache</em> của request hiện tại.</li>\n</ol>\n<h2 id=\"vài-cái-status-code-phổ-biến\"><a href=\"#v%C3%A0i-c%C3%A1i-status-code-ph%E1%BB%95-bi%E1%BA%BFn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vài cái status code phổ biến?</h2>\n<ul>\n<li>201 created</li>\n<li>204 No content</li>\n<li>400 Bad request</li>\n<li>403 Forbidden</li>\n<li>404 Not found</li>\n<li>405 Method not allowed</li>\n<li>409 Conflict</li>\n<li>500 internal server error</li>\n</ul>\n<h2 id=\"cái-gì-cache-được-cái-gì-không\"><a href=\"#c%C3%A1i-g%C3%AC-cache-%C4%91%C6%B0%E1%BB%A3c-c%C3%A1i-g%C3%AC-kh%C3%B4ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cái gì cache được, cái gì không?</h2>\n<ul>\n<li><code class=\"language-inline-text\">GET</code> cache được</li>\n<li><code class=\"language-inline-text\">POST</code> mặc định là không, nhưng có thể dùng <strong>expires header</strong> hoặc <strong>cache-control header</strong> nếu muốn bật cache</li>\n<li><code class=\"language-inline-text\">PUT/DELETE</code> không</li>\n</ul>\n<h2 id=\"khác-nhau-giữa-ajax-và-rest\"><a href=\"#kh%C3%A1c-nhau-gi%E1%BB%AFa-ajax-v%C3%A0-rest\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khác nhau giữa AJAX và REST?</h2>\n<p>AJAX là một <strong>kỹ thuật thực hiện phía client</strong> để cập nhập giao diện, trong khi REST là <strong>một kiểu kiến trúc</strong> để truyền và xử lý HTTP Request.</p>\n<h2 id=\"keep-alive-là-gì-và-lợi-ích-của-nó\"><a href=\"#keep-alive-l%C3%A0-g%C3%AC-v%C3%A0-l%E1%BB%A3i-%C3%ADch-c%E1%BB%A7a-n%C3%B3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keep-Alive là gì và lợi ích của nó?</h2>\n<p>Mặc định một HTTP connection sẽ <strong>tự đóng sau khi request đã complete</strong>, nghĩa là phía server sẽ close TCP connection sau khi đã gửi đi response. Để giữ connection này cho nhiều request, dùng thuộc tính <code class=\"language-inline-text\">keep-alive</code> trên header</p>\n<p>Ví dụ</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Message Trace:\n-------------------------------------------\n~$ <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-I</span> https://www.domain.com/file.html\nHTTP/1.1 <span class=\"token number\">200</span> OK\nConnection: Keep-Alive\nContent-Type: text/html<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">charset</span><span class=\"token operator\">=</span>UTF-8\nDate: Thu, <span class=\"token number\">15</span> Jan <span class=\"token number\">2015</span> <span class=\"token number\">16</span>:45:29 GMT\nContent-Length: <span class=\"token number\">1845</span>\nKeep-Alive: <span class=\"token assign-left variable\">timeout</span><span class=\"token operator\">=</span><span class=\"token number\">10</span>, <span class=\"token assign-left variable\">max</span><span class=\"token operator\">=</span><span class=\"token number\">20</span>\nServer: Apache/2.4.9 <span class=\"token punctuation\">(</span>Unix<span class=\"token punctuation\">)</span> PHP/5.6.2\n-------------------------------------------</code></pre></div>\n<p><em>Lợi ích</em></p>\n<ul>\n<li><strong>Giảm tải việc sử dụng CPU</strong>, mỗi lần thiết lập một TCP connection sẽ cần tiêu hao CPU và bộ nhớ.</li>\n<li><strong>Cải thiện tốc độ trang web</strong>: đáp ứng nhiều file sử dụng cùng một connection cho phép giảm tải và nâng cao tốc độ của ứng dụng</li>\n<li><strong>HTTPS</strong>: muốn dùng keep-alive bắt buộc phải là HTTPS, cũng có thể xem là một ưu điểm cho vấn đề bảo mật</li>\n</ul>\n","cover_image":""}},{"node":{"id":"1e87f736220a3d127bcf506ae3c80b0d","title":"Hỏi nhanh đáp gọn về webpack","path":"/2021-01-13-webpack-faq-hoi-nhanh-dap-gon-voi-webpack/","date":"2021-01-13","timeToRead":2,"desc":"Chuyên mục hỏi nhanh - đáp gọn, nếu bạn chưa biết gì về webpack","content":"<p><em>🐸 Những module pattern nào webpack hỗ trợ?</em></p>\n<p><code class=\"language-inline-text\">common.js</code> và es6</p>\n<p>🐸 Có được phép có nhiều entry point trong cùng 1 file config?*</p>\n<p>Có</p>\n<p><em>🐸 Làm sao để tạo file config webpack tự động?</em></p>\n<p><code class=\"language-inline-text\">webpack-cli init</code></p>\n<p><em>🐸 Loader trong webpack là gì?</em></p>\n<p>transform những module nào không phải là JS vào trong bundle</p>\n<p><em>🐸 Loader chạy sync hay async</em></p>\n<p>Cả hai</p>\n<p><em>🐸 Khác nhau giữa loader và plugin</em></p>\n<p>Loader dùng để pre-processing, plugin phức tạp hơn và nó can thiệp nhiều vào quá trình compile.</p>\n<p><em>🐸 Làm sao để tách một số data ra khỏi bundle thành một file riêng biệt, ví dụ như file css</em></p>\n<p>Sử dụng <a href=\"https://github.com/webpack-contrib/extract-text-webpack-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ExtractTextWebpackPlugin</a>. Tất cả css sẽ không còn nằm inline trong file JS bundle, nó sẽ là một file riêng (style.css chẳng hạn)</p>\n<p><em>🐸 Hot module replacement là gì?</em></p>\n<p>Tính năng cho phép cập nhập module mà không cần reload</p>\n<p><em>🐸 parallel-webpack là gì và nó ảnh hưởng thế nào đến quá trình build</em></p>\n<p><a href=\"https://github.com/trivago/parallel-webpack\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">parallel-webpack</a> sẽ giúp config với nhiều entry point, cho phép webpack build parallel, nâng cao tốc độ build</p>\n<p><em>🐸 Mô tả một cách ngắn gọn long-term caching và làm sao sử dụng nó trong webpack?</em></p>\n<p>Browser sẽ cache static file bên dưới local để cải thiện tốc độ load, để đảm bảo nếu có bản build mới, trình duyệt biết và download file mới, tên  file thường được đặt như sau</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.js?build=1\napp.js?build=2\n\n// hoặc\napp.js.2a6c1fee4b5b0d2c9285.js\napp.js.70b594fe8b07bcedaa98.js</code></pre></div>\n<p>Để làm việc này, trong webpack chúng ta đặt config</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"[name].[hash].js\"</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>🐸 Khác nhau giữa hash và chunkhash?</em></p>\n<p>[hash] tạo ra một id ngẫu nhiên cho từng lần build và sử dụng cho tất cả  chunk. Nếu thay [hash] bằng [chunkhash] nó sẽ tạo ra mỗi chunk một id ngẫu nhiên.</p>\n<p><em>🐸 Mô tả CommonsChunk Plugin?</em></p>\n<p>Là một tính năng có sẵn của webpack, cho phép tạo file riêng (gọi là chunk) cho những module dùng chung. Hỗ trợ caching và nâng cao tốc độ load</p>\n<p><em>🐸Diễn giải đoạn code bên dưới</em></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>ContextReplacementPlugin</span><span class=\"token punctuation\">(</span>\n     <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">moment[\\/\\\\]locale</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n     <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(en-gb|en-us)\\.js</span><span class=\"token regex-delimiter\">/</span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Báo với webpack, chỉ include những file có tên khớp với điều kiện <code class=\"language-inline-text\">/(en-gb|en-us)\\.js/</code>, trong đường dẫn <code class=\"language-inline-text\">/moment[\\/\\\\]locale/</code> khi bundle</p>\n<p><em>🐸 Làm sao để remove những css selector không dùng đến?</em></p>\n<p>Dùng plugin <a href=\"https://github.com/webpack-contrib/purifycss-webpack\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">purifycss-webpack</a></p>\n","cover_image":""}}]}}},"context":{}}