{"hash":"99e40fc31a30de3332c68fee139e44329976dab8","data":{"tag":{"title":"middleware","belongsTo":{"edges":[{"node":{"id":"3cbd2588e65e7ca4b1ebac17d5d87485","title":"Một số ứng dụng của middleware","path":"/2018-06-21-huong-dan-mot-so-ung-dung-cua-middleware/","date":"2018-06-21","timeToRead":5,"desc":"Tiếp theo bài trước về middleware, ứng dụng với các trường hợp thực tế","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#%C4%91%C3%B3ng-g%C3%B3i-c%C3%A1c-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-g%E1%BB%8Di-api\">Đóng gói các phương thức gọi API</a></li>\n<li><a href=\"#localstorage-v%C3%A0-cookies\">localStorage và Cookies</a></li>\n<li><a href=\"#theo-d%C3%B5i-file\">Theo dõi file</a></li>\n<li><a href=\"#tr%C3%ACnh-nghe-nh%E1%BA%A1c\">Trình nghe nhạc</a></li>\n</ul>\n<!-- /TOC -->\n<p>Tổng hợp lại để nhớ về middleware, nó là 1 function nhận vào</p>\n<p>storeInstance\n=> functionToCallWithAnActionThatWillSendItToTheNextMiddleware\n=> actionThatDispatchWasCalledWith\n=> valueToUseAsTheReturnValueOfTheDispatchCall</p>\n<p>Được viết với dạng syntax</p>\n<pre class=\"language-text\"><code class=\"language-text\">store =&gt; next =&gt; action =&gt; result</code></pre>\n<p>Sau đấy được sử dụng bằng cách truyền vào như một tham số cho hàm <code class=\"language-text\">applyMiddleware</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> middlewares <span class=\"token operator\">=</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>middleware1<span class=\"token punctuation\">,</span> middleware2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">,</span> initState<span class=\"token punctuation\">,</span> middlewares<span class=\"token punctuation\">)</span></code></pre>\n<p>Middleware đơn giản nhất là một function éo làm gì cả, nó chỉ forward cái action đến middleware kế tiếp</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"đóng-gói-các-phương-thức-gọi-api\"><a href=\"#%C4%91%C3%B3ng-g%C3%B3i-c%C3%A1c-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-g%E1%BB%8Di-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đóng gói các phương thức gọi API</h2>\n<p>Nếu API của chúng ta cần authentication token, thay vì trên mỗi action creatỏ chúng ta lấy token (có thể từ <code class=\"language-text\">store.getState</code> hoặc <code class=\"language-text\">sessionStorage</code>), rồi truyền tham số này vào trước khi gọi api, chúng ta dùng middleware để làm chuyện đó sẽ tốt hơn</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'FETCH'</span><span class=\"token punctuation\">,</span>\n    url<span class=\"token punctuation\">,</span>\n    params<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">fetchImplementation</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'FETCH'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">token</span><span class=\"token punctuation\">;</span>\n        _<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> <span class=\"token string\">'headers.token'</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">fetchImplementation</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetchMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">fetch</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// vi du goi action</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUser</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">id</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>dispatch<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://api.website.com/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Thằng middleware <code class=\"language-text\">fetchMiddleware</code> khi túm được <code class=\"language-text\">action.type</code> tên là <strong>FETCH</strong> nó sẽ thực hiện việc gởi một HTTP request và trả về 1 <code class=\"language-text\">promise</code></p>\n<p>Ở đây để làm cho ví dụ đơn giản chúng ta không implement cái <code class=\"language-text\">fetchImplementation</code> mà đang hard code thằng này sử dụng <code class=\"language-text\">window.fetch</code></p>\n<h2 id=\"localstorage-và-cookies\"><a href=\"#localstorage-v%C3%A0-cookies\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>localStorage và Cookies</h2>\n<p>Ứng dụng nào cũng sẽ cần lưu thông tin user, có thể là <em>authentication token</em> hoặc đường dẫn lần trước user truy cập. Chúng ta sẽ sử dụng middleware để lưu trạng thái này xuống <code class=\"language-text\">localStorage</code> hoặc <em>cookies</em>.</p>\n<p>Nếu chúng ta gọi <code class=\"language-text\">getState</code> trước khi gọi <code class=\"language-text\">next(action)</code>, chúng ta sẽ có <strong>before state</strong> trước khi action đến tay <code class=\"language-text\">reducer</code>, nếu chúng ta gọi nó sau <code class=\"language-text\">next(action)</code>, chúng ta có <strong>after state</strong> sau khi reducer xử lý. Dựa vào <strong>before state</strong> và <strong>after state</strong> này chúng ta có thể thay đổi đúng cái đã bị thay đổi</p>\n<p>Ví dụ lưu authentication token xuống <code class=\"language-text\">localStorage</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// lấy before state và after state</span>\n    <span class=\"token keyword\">const</span> previousToken <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">token</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> nextToken <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">token</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// thay đổi</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>nextToken <span class=\"token operator\">!==</span> previousToken<span class=\"token punctuation\">)</span> <span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">,</span> nextToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// lấy init state từ localStorage</span>\n<span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> <span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> initState <span class=\"token operator\">=</span> token\n    <span class=\"token operator\">?</span> _<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>defaultState<span class=\"token punctuation\">,</span> <span class=\"token string\">'token'</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> defaultState<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">,</span> middlewares<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"theo-dõi-file\"><a href=\"#theo-d%C3%B5i-file\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Theo dõi file</h2>\n<p>Ví dụ trong ứng dụng ta có state là <code class=\"language-text\">activeFiles</code>, là một mảng file bạn muốn theo dõi thay đổi. Khi file thay đổi, chúng ta muốn <code class=\"language-text\">dispatch</code> 1 action</p>\n<p>Sử dụng tương tự như trên</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fileWatcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fileWatcher<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file-changed'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">filename</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'FILE_CHANGED'</span><span class=\"token punctuation\">,</span> filename <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Make sure we're watching files that may be included in the store's initial state</span>\n    <span class=\"token keyword\">const</span> initialFiles <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">activeFiles</span><span class=\"token punctuation\">;</span>\n    fileWatcher<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">watchFiles</span><span class=\"token punctuation\">(</span>initialFiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Get the state before and after the action was performed</span>\n        <span class=\"token keyword\">const</span> previousFiles <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">activeFiles</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> nextFiles <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">activeFiles</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// See what changed before and after</span>\n        <span class=\"token keyword\">const</span> filesToUnwatch <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">difference</span><span class=\"token punctuation\">(</span>previousFiles<span class=\"token punctuation\">,</span> nextFiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> filesToWatch <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">difference</span><span class=\"token punctuation\">(</span>nextFiles<span class=\"token punctuation\">,</span> previousFiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Respond to changes</span>\n        fileWatcher<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unwatchFiles</span><span class=\"token punctuation\">(</span>filesToUnwatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        fileWatcher<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">watchFiles</span><span class=\"token punctuation\">(</span>filesToWatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Ở đây thì nó không phụ thuộc action: vô tư tạo vô số action nếu muốn thay đổi giá trị active files, chúng ta không cần thay đổi logic trong middleware.</p>\n<p>Về mặt kỹ thuật, ví vụ trên có thể viết lại bằng cách sử dụng <code class=\"language-text\">store.subscribe</code>. Tuy nhiên tiếp cận vấn đề liên quan tới side-effect của middleware phụ thuộc vào action bằng middleware là tốt nhất</p>\n<h2 id=\"trình-nghe-nhạc\"><a href=\"#tr%C3%ACnh-nghe-nh%E1%BA%A1c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Trình nghe nhạc</h2>\n<p>Rất giống như ví vụ trên. Khác biệt quan trọng là: sự thay đổi của <code class=\"language-text\">state</code> có thể xảy ra từ middleware hoặc từ những nguồn khác.</p>\n<p>Giờ chúng ta có <code class=\"language-text\">state</code> là <code class=\"language-text\">isPlaying</code> và <code class=\"language-text\">currentTime</code>. Chúng ta sẽ giữ đúng khái niệm \"single source of truth\" của redux, middleware sẽ đảm nhiệm việc giữ giá rị state này. Nếu action thay đổi <code class=\"language-text\">isPlaying</code> từ <code class=\"language-text\">false</code> sang <code class=\"language-text\">true</code>, thì ta play nhạc, nếu action thay đổi <code class=\"language-text\">currentTime</code> chúng ta sẽ phát đến đúng thời gian đó.</p>\n<p>Để cho chính xác, trong middleware chúng ta adjust một chút để khi <code class=\"language-text\">isPlaying</code> chuyển sang <code class=\"language-text\">false</code>, chúng ta thay đổi luôn <code class=\"language-text\">currentTime</code>. Cái ngày cực kỳ quan trọng vì chúng ta không muốn cứ mỗi khi <code class=\"language-text\">currentTime</code> mà thay đổi thì chúng ta lại phát đúng đến thời điểm đó. Thêm parameter <code class=\"language-text\">origin</code> trong action để làm đối số kiểm tra</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">musicPlayer</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> playbackOrigin <span class=\"token operator\">=</span> <span class=\"token string\">'playbackOrigin'</span><span class=\"token punctuation\">;</span>\n\n    musicPlayer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'current-time-changed'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">currentTime</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'SET_CURRENT_TIME'</span><span class=\"token punctuation\">,</span> origin<span class=\"token operator\">:</span> playbackOrigin<span class=\"token punctuation\">,</span> currentTime <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    musicPlayer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'playback-finished'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'STOP_PLAYING'</span><span class=\"token punctuation\">,</span> origin<span class=\"token operator\">:</span> playbackOrigin <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> initState <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>initState<span class=\"token punctuation\">.</span><span class=\"token property-access\">isPlaying</span><span class=\"token punctuation\">)</span> musicPlayer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    musicPlayer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">seek</span><span class=\"token punctuation\">(</span>initState<span class=\"token punctuation\">.</span><span class=\"token property-access\">currentTime</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isPlaying<span class=\"token operator\">:</span> wasPlaying<span class=\"token punctuation\">,</span> currentTime<span class=\"token operator\">:</span> previousTime <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isPlaying<span class=\"token operator\">:</span> isPlaying<span class=\"token punctuation\">,</span> currentTime<span class=\"token operator\">:</span> nextTime <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// không dispatch action với các action từ player</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">origin</span> <span class=\"token operator\">===</span> playbackOrigin<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>wasPlaying <span class=\"token operator\">&amp;&amp;</span> isPlaying<span class=\"token punctuation\">)</span> musicPlayer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>wasPlaying <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>isPlaying<span class=\"token punctuation\">)</span> musicPlayer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>previousTime <span class=\"token operator\">!==</span> nextTime<span class=\"token punctuation\">)</span> musicPlayer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">seek</span><span class=\"token punctuation\">(</span>nextTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Miễn là làm đúng cái middleware này, chúng ta sẽ không bao giờ dính mấy con bug kiểu như nút Play thì đang cho thấy ở trạng thái Pause trong khi đang phát rầm rầm.</p>\n<p><a href=\"https://medium.com/@jacobp100/you-arent-using-redux-middleware-enough-94ffe991e6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài gốc của tác giả Jacob Parker</a></p>\n","cover_image":""}},{"node":{"id":"02a5a60cd7a087f460f4ccfd777912ea","title":"Sử dụng Middleware với Redux dành cho người mới bắt đầu","path":"/2018-06-18-huong-dan-tim-hieu-middleware-va-redux/","date":"2018-06-18","timeToRead":4,"desc":"Nếu đã nắm rõ redux, bước tiếp theo phải tìm hiểu là middleware","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#middleware-l%C3%A0-g%C3%AC\">Middleware là gì</a></li>\n<li><a href=\"#t%E1%BA%A1i-sao-v%C3%A0-t%E1%BA%A1i-sao\">Tại sao và tại sao</a></li>\n<li>\n<p><a href=\"#m%E1%BB%99t-s%E1%BB%91-%E1%BB%A9ng-d%E1%BB%A5ng-c%E1%BB%A7a-middleware\">Một số ứng dụng của Middleware</a></p>\n<ul>\n<li><a href=\"#loging\">Loging</a></li>\n<li><a href=\"#%C4%91%E1%BB%A3i-user-confirm\">Đợi user confirm</a></li>\n</ul>\n</li>\n<li><a href=\"#m%E1%BB%99t-s%E1%BB%91-l%E1%BB%B1a-ch%E1%BB%8Dn\">Một số lựa chọn</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"middleware-là-gì\"><a href=\"#middleware-l%C3%A0-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Middleware là gì</h2>\n<p>Nghe tên thì hơi phức tạp nhưng thực sự nó đơn giản lắm, nó là một hàm sẽ modify và được gọi trước khi action được dispatch.</p>\n<p>Mô phỏng quá trình hoạt động không có middleware</p>\n<p><img src=\"https://viblo.asia/uploads/5c72ff3e-859a-457a-ae11-e1392baa90af.gif\"></p>\n<p>và khi áp dụng middleware</p>\n<p><img src=\"https://viblo.asia/uploads/8ff8bd43-308a-47da-b382-891adae237d2.gif\"></p>\n<h2 id=\"tại-sao-và-tại-sao\"><a href=\"#t%E1%BA%A1i-sao-v%C3%A0-t%E1%BA%A1i-sao\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao và tại sao</h2>\n<p>Trong thế giới của Rect, Redux là lựa chọn được ưa chuộng để có một container chứa chỉ chứa state. Ý tưởng chính của redux là tất cả những logic của app thì đưa vào <strong>reducers</strong>, là những function nhận vào 1 <code class=\"language-text\">state</code>, 1 <code class=\"language-text\">action</code> và trả về <code class=\"language-text\">state</code> mới. <strong>Reducers</strong> buộc phải là <em>pure function</em> không phụ thuộc và chỉnh sửa global state, để mà dễ test, dể refactor, performance tốt hơn.</p>\n<p>Thí dụ 1 redux store lưu giá trị counter</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">redux</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'INCREMENT'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword control-flow\">return</span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> redux<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createStore</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu để ý chúng ta có thể thấy redux có 2 ràng buộc</p>\n<ol>\n<li><strong>Reducers</strong> PHẢI là hàm sync, trả về <code class=\"language-text\">state</code> mới</li>\n<li>Do không được thay đổi global state, reducers không được sử dụng những hàm như <code class=\"language-text\">setInterval()</code></li>\n</ol>\n<p>Thí dụ chúng ta làm một cái app để bấm thời gian, sau khi user bấm stop hiển thị giá trị thời gian đã chạy và sau đó lưu lại trên server bằng HTTP request. Chuyện gì sẽ xảy ra khi ta đang muốn quăng một hàm chạy async?</p>\n<p>Reducer của chúng ta cần listen 3 actions:</p>\n<ol>\n<li><code class=\"language-text\">START_TIMER</code>, khi bắt đầu tính thời gian</li>\n<li><code class=\"language-text\">STICK</code>, khi ta thay đổi giá trị hiện tại</li>\n<li><code class=\"language-text\">STOP_TIMER</code> khi chúng ta không nhận được action <code class=\"language-text\">TICK</code> nào nữa</li>\n</ol>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">stopWatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">switch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'START_TIMMER'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>startTime<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">currentTime</span><span class=\"token punctuation\">,</span> elapsed<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'TICK'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>elapsed<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">currentTime</span> <span class=\"token operator\">-</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">startTime</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'STOP_TIMER'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> redux<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createStore</span><span class=\"token punctuation\">(</span>stopWatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Khi user click button start, chúng ta dispatch event <code class=\"language-text\">START_TIMER</code>, khi user click stop, ta dispatch <code class=\"language-text\">STOP_TIMMER</code></p>\n<p>Vấn đề là làm sao dispatch <code class=\"language-text\">TICK</code>, nếu chúng ta gọi <code class=\"language-text\">setInterval()</code> trong <code class=\"language-text\">START_TIMER</code> thì lúc đó chúng ta đã thay đổi global state và vi phạm best practices của redux. Chổ thích hợp nhất để dispatch <code class=\"language-text\">TICK</code> là ở middleware</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">timerMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'START_TIMER'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        action<span class=\"token punctuation\">.</span><span class=\"token property-access\">interval</span> <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'TICK'</span><span class=\"token punctuation\">,</span> currentTime<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Date</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'STOP_TIMER'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">interval</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">stopWatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'START_TIMER'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        startTime<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">currentTime</span><span class=\"token punctuation\">,</span>\n        elapsed<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        interval<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">interval</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'TICK'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> elapsed<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">currentTime</span> <span class=\"token operator\">-</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">startTime</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'STOP_TIMER'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> interval<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> redux<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">applyMiddleware</span><span class=\"token punctuation\">(</span>timerMiddleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> redux<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createStore</span><span class=\"token punctuation\">(</span>stopWatch<span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Syntax của redux middleware là điều cần phải bàn tới: 1 middleware function là 1 function return 1 function return 1 function. Nhất đầu ghê chưa. Thật ra đang dùng currying function trong javascript (<a href=\"https://luubinhan.github.io/blog/2018-03-02-gioi-thieu-higher-order-component-trong-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">đọc cà-ri function ở đây</a>). Function đầu tiên nhận vào <code class=\"language-text\">store</code> làm parameter, function thứ 2 sẽ nhận function <code class=\"language-text\">next</code> làm parameter, và function thứ 3 nhận dispatch <code class=\"language-text\">action</code> làm parameter. <code class=\"language-text\">store</code> và <code class=\"language-text\">action</code> là giá trị store và dispatch action hiện tại. Chiếc đũa thuần kỳ ở đây chính là function <code class=\"language-text\">next</code>, bạn có thể gọi nó là \"sau khi middleware chạy xong, truyền cái cái action này cho middleware kế tiếp\". Nói cách khác, middleware có thể là hàm async.</p>\n<p>Tiếp theo chúng ta sẽ lưu giá trị sau khi user click stop lên server.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">promiseMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// kiểm tra payload nếu là promise thì đợi nó resolve</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">payload</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">payload</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">then</span> <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        action<span class=\"token punctuation\">.</span><span class=\"token property-access\">payload</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>\n            <span class=\"token parameter\">res</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">payload</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">error</span> <span class=\"token operator\">=</span> err<span class=\"token punctuation\">;</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> redux<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">applyMiddleware</span><span class=\"token punctuation\">(</span>timerMiddleware<span class=\"token punctuation\">,</span> promiseMiddleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> redux<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createStore</span><span class=\"token punctuation\">(</span>stopWatch<span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Khi gởi lên một HTTP request, chúng ta sẽ gởi request này ở dạng <code class=\"language-text\">promise</code>, <code class=\"language-text\">promiseMiddelware</code> sẽ đứng đợi promise này có giá trị trả về thì mới gọi <code class=\"language-text\">next(action)</code></p>\n<p>Ta sẽ gởi lên server bằng <code class=\"language-text\">axios</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">axios</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n\nstore<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'SAVE_TIME'</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> axios<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/save'</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Reducer listen <code class=\"language-text\">SAVE_TIME</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">stopwatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'START_TIMER'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        startTime<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">currentTime</span><span class=\"token punctuation\">,</span>\n        elapsed<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        interval<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">interval</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'TICK'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> elapsed<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">currentTime</span> <span class=\"token operator\">-</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">startTime</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'STOP_TIMER'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> interval<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'SAVE_TIME'</span><span class=\"token operator\">:</span>\n      <span class=\"token comment\">// If there was an error, set the error property on the state</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">error</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// Otherwise, clear all the timer state</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> startTime<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> elapsed<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> error<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"một-số-ứng-dụng-của-middleware\"><a href=\"#m%E1%BB%99t-s%E1%BB%91-%E1%BB%A9ng-d%E1%BB%A5ng-c%E1%BB%A7a-middleware\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một số ứng dụng của Middleware</h2>\n<h3 id=\"loging\"><a href=\"#loging\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Loging</h3>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loggerMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"đợi-user-confirm\"><a href=\"#%C4%91%E1%BB%A3i-user-confirm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đợi user confirm</h3>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">confirmationMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">shouldConfirm</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Are you sure?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"một-số-lựa-chọn\"><a href=\"#m%E1%BB%99t-s%E1%BB%91-l%E1%BB%B1a-ch%E1%BB%8Dn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một số lựa chọn</h2>\n<p>Một số thư viện để làm việc với middleware cho Redux rất phổ biến có thể tham khảo là <code class=\"language-text\">redux-thunk</code>, <code class=\"language-text\">redux-saga</code>, <code class=\"language-text\">redux-observable</code></p>\n<p><a href=\"https://www.codementor.io/vkarpov/beginner-s-guide-to-redux-middleware-du107uyud\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài gốc của tác giả Vkarpov</a></p>\n<p>Tham khảo thêm:</p>\n<ul>\n<li><a href=\"https://github.com/gothinkster/react-redux-realworld-example-app/blob/master/src/middleware.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Realworld example sử dụng redux, middleware</a></li>\n<li><a href=\"https://medium.com/@meagle/understanding-87566abcfb7a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tìm hiểu Middleware của tác giả Mark</a></li>\n<li><a href=\"https://redux.js.org/api-reference/applymiddleware\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">applyMiddleware</a></li>\n</ul>\n","cover_image":""}}]}}},"context":{}}