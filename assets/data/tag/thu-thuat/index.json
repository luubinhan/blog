{"hash":"41646715fe6219ba04b0e6297c5ad6e74e7d73b0","data":{"tag":{"title":"thu-thuat","belongsTo":{"edges":[{"node":{"id":"a768f07da7090b52ca88fa7a97c63126","title":"Kết nối và debug bằng điện thoại Android","path":"/2022-10-30-debug-dien-thoai-tu-chrome/","date":"2022-10-30","timeToRead":1,"desc":"Các bước thực hiện kết nối với điện thoại và debug trên máy tính","content":"<h2 id=\"bước-1-thiết-đặt-cần-thiết-trên-điện-thoại-android\"><a href=\"#b%C6%B0%E1%BB%9Bc-1-thi%E1%BA%BFt-%C4%91%E1%BA%B7t-c%E1%BA%A7n-thi%E1%BA%BFt-tr%C3%AAn-%C4%91i%E1%BB%87n-tho%E1%BA%A1i-android\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bước 1: Thiết đặt cần thiết trên điện thoại Android</h2>\n<ol>\n<li>Bật chế độ <strong>Developer Options</strong> trên điện thoại, tùy vào phiên bản Android đang sử dụng, cách bật xem <a href=\"https://developer.android.com/studio/debug/dev-options.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ở đây</a></li>\n<li>Chọn <strong>Enable USB Debugging</strong></li>\n<li>Mở trình duyệt Chrome trên máy tính và truy cập địa chỉ <code class=\"language-inline-text\">chrome://inspect#devices</code></li>\n<li>Đảm bảo đang chọn <strong>Discover USB devices</strong>\n<img src=\"https://wd.imgix.net/image/BrQidfK9jaQyIHwdw91aVpkPiib2/4P4G0Hmt3CbDkqMoTOiY.png?auto=format&#x26;w=845\"></li>\n<li>Kết nối điện thoại với máy tính bằng cáp USB, danh sách điện thoại đã kết nối thành công sẽ hiện ở trong cửa sổ này\n<img src=\"https://wd.imgix.net/image/BrQidfK9jaQyIHwdw91aVpkPiib2/7Iy1yVH62Xz40tbiwgRg.png?auto=format&#x26;w=845\"></li>\n</ol>\n<h2 id=\"bước-2-thực-hiện-debug\"><a href=\"#b%C6%B0%E1%BB%9Bc-2-th%E1%BB%B1c-hi%E1%BB%87n-debug\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bước 2: Thực hiện debug</h2>\n<ol>\n<li>Nhập vào địa chỉ trang web muốn debug từ cửa sổ thiết bị đã kết nối\n<img src=\"https://wd.imgix.net/image/BrQidfK9jaQyIHwdw91aVpkPiib2/JaZPnZlDhAywdFkn8vNm.png?auto=format&#x26;w=8450\"></li>\n<li>Click vào <strong>open</strong> sau đó trang web sẽ được mở trên điện thoại</li>\n<li>Trên máy tính sẽ mở debug tool của Chrome và chúng ta có thể debug như mình bình thường bằng <em>inspect element</em> <img src=\"https://wd.imgix.net/image/BrQidfK9jaQyIHwdw91aVpkPiib2/y9AaD4jeSmPRG4sQSylM.png?auto=format&#x26;w=42\"></li>\n<li>Click vào icon <img src=\"https://wd.imgix.net/image/BrQidfK9jaQyIHwdw91aVpkPiib2/A5AtRECWSgsdtMZkI6g5.png?auto=format&#x26;w=44\"> kế bên nút inspect element để xem trực tiếp trên máy tính, song song với điện thoại</li>\n</ol>\n<p><a href=\"https://developer.chrome.com/docs/devtools/remote-debugging/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tham khảo</a></p>\n","cover_image":""}},{"node":{"id":"6a08f6bfe349436c8bd75edfa4ca574f","title":"Một vài thay đổi đáng chú ý của Chrome 106","path":"/2022-09-26-chrome-106-co-gi-moi/","date":"2022-09-26","timeToRead":1,"desc":"Một vài thay đổi đáng chú ý trong DevTools của Chrome 106 sắp tới","content":"<h2 id=\"group-file-theo-authoreddeployed\"><a href=\"#group-file-theo-authoreddeployed\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Group file theo Authored/Deployed</h2>\n<p>Source Code trong cửa sổ <em>Sources</em> thông thường được sắp xếp theo <em>Deployed</em> đến <em>Authored</em>, để tiện hơn trong lúc debug ở local, có thể đảo thứ tự này lại</p>\n<p><img src=\"https://wd.imgix.net/image/dPDCek3EhZgLQPGtEG3y0fTn4v82/HI12Jz3K7CCy0cm01jBk.png?auto=format&#x26;w=845\"></p>\n<h2 id=\"cải-thiện-stack-trace\"><a href=\"#c%E1%BA%A3i-thi%E1%BB%87n-stack-trace\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cải thiện Stack Trace</h2>\n<h3 id=\"luồn-async\"><a href=\"#lu%E1%BB%93n-async\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Luồn async</h3>\n<p>Thay vì như trước đây chỉ hiện một phần khi hàm thực thi là <code class=\"language-inline-text\">async</code>, giờ chúng ta có đầy đủ nguồn gốc, xuất xứ ai đã gây ra hàm <code class=\"language-inline-text\">async</code> này. Ví dụ như hình bên phải cho ta thấy thứ tự (ngược) là <code class=\"language-inline-text\">setTimeout > increment > onClick</code></p>\n<p><img src=\"https://wd.imgix.net/image/dPDCek3EhZgLQPGtEG3y0fTn4v82/2jAETpw8QWzsg1Wqk0Ya.png?auto=format&#x26;w=845\"></p>\n<h3 id=\"tự-động-bỏ-qua-code-của-third-party\"><a href=\"#t%E1%BB%B1-%C4%91%E1%BB%99ng-b%E1%BB%8F-qua-code-c%E1%BB%A7a-third-party\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tự động bỏ qua code của third-party</h3>\n<p>Issue 100% đến từ source code của chúng ta, nên viện hiển thị những hàm của third-party đã chạy qua là không cần thiết trong Stack trace, nó sẽ tự động bị ẩn</p>\n<p><img src=\"https://wd.imgix.net/image/dPDCek3EhZgLQPGtEG3y0fTn4v82/GQ9B11tKBcFc1BxQYW9z.png?auto=format&#x26;w=845\"></p>\n<p>Nếu không thích bạn có thể bật lại như cũ <strong>Settings > Ignore list > Automatically add known third-party scripts to ignore list</strong></p>\n<p><img src=\"https://wd.imgix.net/image/dPDCek3EhZgLQPGtEG3y0fTn4v82/elkhLqA0KV8pWYFgKk8g.png?auto=format&#x26;w=845\"></p>\n<h2 id=\"ẩn-danh-sách-file-không-quan-tâm-trong-source\"><a href=\"#%E1%BA%A9n-danh-s%C3%A1ch-file-kh%C3%B4ng-quan-t%C3%A2m-trong-source\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ẩn danh sách file không quan tâm trong Source</h2>\n<p>Những source code như <code class=\"language-inline-text\">node_modules</code>, <code class=\"language-inline-text\">webpack</code> sẽ không phải là vấn đề cần quan tâm, và chúng ta có thể ẩn nó đi để đở rối mắt</p>\n<p><img src=\"https://wd.imgix.net/image/dPDCek3EhZgLQPGtEG3y0fTn4v82/Y4KSjl9zJQdnAhTvtnXm.png?auto=format&#x26;w=845\"></p>\n<p>Khi bật tính năng này, đồng thời khi chúng ta duyệt file sẽ không còn thấy những file trong danh sách bỏ qua</p>\n<p><img src=\"https://wd.imgix.net/image/dPDCek3EhZgLQPGtEG3y0fTn4v82/vi0yhKte5KN511F57FQM.png?auto=format&#x26;w=845\"></p>\n<p>Một số thay đổi nhỏ khác, tham khảo đầy đủ hơn ở <a href=\"https://developer.chrome.com/blog/new-in-devtools-106/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">What's New In DevTools (Chrome 106)</a></p>\n","cover_image":""}},{"node":{"id":"2aec3bdb98d3d116d4be25b134ee21c7","title":"Một vài ứng dụng của AbortController","path":"/2022-06-20-ung-dung-abort-controller/","date":"2022-06-20","timeToRead":2,"desc":"","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#x%C3%B3a-event-handler\">Xóa Event Handler</a></li>\n<li><a href=\"#async-trong-react-hook\">Async trong React hook</a></li>\n</ul>\n<!-- /TOC -->\n<p>Món <em>đồ chơi</em> mới <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AbortController\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AbortController</a> (ý là thằng bạn trình duyệt cũ không chịu chơi chung) cho phép chúng ta hủy một tác vụ đang chạy, tác dụ hay gặp nhất là việc fetching data</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vuilaptrinh.com'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">signal</span><span class=\"token operator\">:</span> controller<span class=\"token punctuation\">.</span>signal <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// dừng lại anh ơi</span>\ncontroller<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Trước khi có <code class=\"language-inline-text\">AbortController</code> đố bạn có cách nào để ngưng việc <code class=\"language-inline-text\">fetch</code> một khi đã báo nó <em>chạy đi em</em></p>\n<blockquote>\n<p><code class=\"language-inline-text\">controller.signal</code>  ở trên mang giá trị <code class=\"language-inline-text\">state</code>, mọi thứ được xử lý bên trong AbortController, chúng ta chỉ khai báo với anh <code class=\"language-inline-text\">fetch</code> có thay đổi state thì truyền vào đây giúp em nhé</p>\n</blockquote>\n<p>Chúng ta sẽ tham khảo một vài ứng dụng của AbortController nào</p>\n<h2 id=\"xóa-event-handler\"><a href=\"#x%C3%B3a-event-handler\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xóa Event Handler</h2>\n<p>Nếu chúng ta muốn hủy đăng ký một trên <code class=\"language-inline-text\">event</code> để tránh ngốn RAM của user</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* do something */</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// hủy đăng ký</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* do something */</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nhưng nếu nhìn kỹ, chúng ta sẽ ngộ ra cái <code class=\"language-inline-text\">() => doSomething()</code> truyền cho <code class=\"language-inline-text\">addEventListener</code> và <code class=\"language-inline-text\">removeEventListener</code> hoàn toàn khác nhau, nghĩa là  việc chúng ta làm là công cốc rồi. Đúng ra chúng ta phải viết</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> doSomething<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> doSomething<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nhưng nếu lỡ chúng ta đã <em>khoái</em> arrow function và hông <em>khoái</em> cái <code class=\"language-inline-text\">removeEventListener</code>. Chúng ta có thể dùng <code class=\"language-inline-text\">AbortController</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> signal <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> controller<span class=\"token punctuation\">;</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* do something */</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> signal <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// unregister nè</span>\ncontroller<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>Lưu ý Chrome cũ không chạy và Safari dưới 15 không chạy</p>\n</blockquote>\n<h2 id=\"async-trong-react-hook\"><a href=\"#async-trong-react-hook\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Async trong React hook</h2>\n<p>Xung quanh việc <em>làm cái gì</em> bên trong <em>useEffect</em> có khá nhiều quan điểm, số lượng người dùng <code class=\"language-inline-text\">useEffect</code> để <em>fetching</em> data cũng không phải ít. Nói chung cũng ok thôi, và sử dụng <code class=\"language-inline-text\">async</code> bên trong <code class=\"language-inline-text\">useEffect</code> đúng là một <em>canh bạc</em> hên xui mai rũi, xui xui chưa fetch xong user <em>lạng</em> qua trang khác thì biết chuyện gì xảy ra rồi, nó vẫn fetching cho xong dữ liệu</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">VuiComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Để đảm bảm khi component chúng ta bị remove, nó phải hủy luôn việc fetching</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">VuiComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> signal <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> controller<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> controller<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Một điểm rất đáng để tâm trong React là sau khi <code class=\"language-inline-text\">await</code> cú call đầu tiên, nếu chúng ta lấy <code class=\"language-inline-text\">state</code> bên trong hàm <code class=\"language-inline-text\">async</code> không hẳn nó là giá trị mới nhất, rất có thể nó lấy giá trị trước đó</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">KhongVuiComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Ở đây không chắc value lúc nào cũng = giá trị sau khi click button nha</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Increment<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">fetchButton<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n","cover_image":""}},{"node":{"id":"fba9262d31709b3a64b14109124e46a0","title":"Chèn Youtube Video responsive","path":"/2022-06-12-chen-youtube-video-responsive/","date":"2022-06-12","timeToRead":1,"desc":"","content":"<p>Khi nhúng video youtube bằng iframe, chúng ta phải đảm bảo kích thước iframe phải theo đúng tỷ lệ, nếu không nó sẽ xuất hiện viền đen phía trên và dưới video</p>\n<p>Để hiển thị tốt trên nhiều thiết bị khác nhau (responsive) chúng ta phải đưa kích thước chiều ngang về 100%</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://www.youtube.com/embed/....<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">frameborder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">allow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">allowfullscreen</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Để chiều cao tự động co giản theo chiều ngang, vì tỷ lệ ngang/dọc của youtube video là không đổi, height luôn = <strong>56.25%</strong> width</p>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.video-container</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.video-container::after</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">/* tương ứng với độ cao video, tỷ lệ 16:9 */</span>\n    <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 56.25%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* scale video theo div bọc ngoài */</span>\n<span class=\"token selector\">.video-container iframe</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nếu video hiển thị ở tỷ lệ 4:3, chúng ta sẽ cần set giá trị padding <strong>75%</strong></p>\n","cover_image":""}},{"node":{"id":"43406148266add9ca30a703612341dbb","title":"Tất cả những gì bạn cần biết khi làm user avatar trong React","path":"/2022-05-01-tat-ca-nhung-gi-can-biet-de-lam-viec-voi-avatar-trong-react/","date":"2022-05-01","timeToRead":4,"desc":"","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#t%E1%BA%A1o-avatar-m%E1%BA%B7c-%C4%91%E1%BB%8Bnh\">Tạo avatar mặc định</a></li>\n<li><a href=\"#cho-user-upload-avatar\">Cho user upload avatar</a></li>\n<li><a href=\"#crop-%E1%BA%A3nh\">Crop ảnh</a></li>\n<li><a href=\"#to%C3%A0n-b%E1%BB%99-source-code\">Toàn bộ source code</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"tạo-avatar-mặc-định\"><a href=\"#t%E1%BA%A1o-avatar-m%E1%BA%B7c-%C4%91%E1%BB%8Bnh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tạo avatar mặc định</h2>\n<p>Trong trường hợp user chưa upload avatar, chúng ta sẽ hiển thị một avatar mặc định, sử dụng <a href=\"https://www.npmjs.com/package/jdenticon\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jdenticon</a> nó sẽ cho chúng ta bộ hình sau</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--kYzqAMFa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrn6svy3k9b3qznrgkla.png\"></p>\n<div class=\"gridsome-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ComponentProps<span class=\"token punctuation\">,</span> <span class=\"token constant\">FC</span><span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> AutoAvatar<span class=\"token operator\">:</span> <span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>\n  ComponentProps<span class=\"token operator\">&lt;</span><span class=\"token string\">'img'</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> userId<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> size<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> userId<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>imgProps <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>base64<span class=\"token punctuation\">,</span> setBase64<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// dùng dynamic import để tối ưu</span>\n  <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jdenticon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> toSvg <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> svgString <span class=\"token operator\">=</span> <span class=\"token function\">toSvg</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> base64 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>svgString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setBase64</span><span class=\"token punctuation\">(</span>base64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> base64 <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">backgroundColor</span><span class=\"token operator\">:</span> <span class=\"token string\">'rgb(225,225,225)'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span>\n        <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>imgProps<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">data:image/svg+xml;base64,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>base64<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">alt</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'User Avatar'</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> size<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> size<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> <span class=\"token string\">'inline-block'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Loading...\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Thư viện này khoản 45kb, để webpack dynamic load khi cần thiết cho tiết kiệm\nGiá trị <strong>base64</strong> trả về chúng ta có thể gán cho <code class=\"language-inline-text\">src</code> của thẻ <code class=\"language-inline-text\">&lt;img /></code></p>\n<h2 id=\"cho-user-upload-avatar\"><a href=\"#cho-user-upload-avatar\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cho user upload avatar</h2>\n<p>Nếu chỉ dùng <code class=\"language-inline-text\">&lt;input type=\"file\" /></code> UI nó sẽ khá xấu, chúng ta <em>dấu</em> nó đi và thay bằng một <code class=\"language-inline-text\">&lt;button /></code> để dễ chỉnh CSS hơn. Sử dụng <code class=\"language-inline-text\">ref</code> để trigger sự kiện <em>click</em> trên <code class=\"language-inline-text\">input</code></p>\n<div class=\"gridsome-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>createRef<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ImageSelect</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> fileRef <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>HTMLInputElement<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> onFileInputChange<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ChangeEventHandler<span class=\"token operator\">&lt;</span>HTMLInputElement<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token operator\">?.</span>files<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>fileRef<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onFileInputChange<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">accept</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/png,image/jpeg,image/gif<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> fileRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Cool Button\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"crop-ảnh\"><a href=\"#crop-%E1%BA%A3nh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Crop ảnh</h2>\n<p>Trước khi gửi ảnh xuống backend dể lưu lại, chúng ta sẽ cho phép user <code class=\"language-inline-text\">crop</code> ảnh bằng <a href=\"https://fengyuanchen.github.io/cropperjs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cropper.js</a> và <a href=\"https://www.npmjs.com/package/react-cropper\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-cropper</a></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--B3T2HPu8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmvn8upi2y1onvpsvclt.gif\"></p>\n<div class=\"gridsome-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>createRef<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Cropper<span class=\"token punctuation\">,</span> ReactCropperElement<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-cropper\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'cropperjs/dist/cropper.css'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ImageCrop</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cropperRef <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ReactCropperElement<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cropper</span></span>\n      <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&lt;the iamge src><span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">autoCropArea</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">aspectRatio</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">viewMode</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">guides</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>cropperRef<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Một số thiết đặt</p>\n<ul>\n<li><code class=\"language-inline-text\">autoCropArea = 1</code> mặc định là chọn toàn bộ hình</li>\n<li><code class=\"language-inline-text\">aspectRatio = 1</code> tỉ lệ crop mong muốn, chọn 1:1, vuông</li>\n<li><code class=\"language-inline-text\">viewMode = 3</code> không cho phép chọn vào vùng nằm ngoài hình</li>\n<li><code class=\"language-inline-text\">guides = false</code> không hiển thị mấy đường <em>grid</em></li>\n</ul>\n<div class=\"gridsome-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>createRef<span class=\"token punctuation\">,</span> useState<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Cropper<span class=\"token punctuation\">,</span> ReactCropperElement<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-cropper\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'cropperjs/dist/cropper.css'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ImageCrop</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cropperRef <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ReactCropperElement<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>cropped<span class=\"token punctuation\">,</span> setCropped<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onSaveClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> imageElement<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> cropperRef<span class=\"token operator\">?.</span>current<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> cropper<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> imageElement<span class=\"token operator\">?.</span>cropper<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setCropped</span><span class=\"token punctuation\">(</span>cropper<span class=\"token punctuation\">.</span><span class=\"token function\">getCroppedCanvas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDataURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cropper</span></span>\n        <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"https://picsum.photos/500/300\"</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">autoCropArea</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">aspectRatio</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">viewMode</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">guides</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>cropperRef<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onSaveClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Crop</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>cropped <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>cropped<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">alt</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"It's cropped\"</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Để lấy image cho việc upload, sử dụng <code class=\"language-inline-text\">blob</code>. Còn nếu chỉ cần hiển thị thì dùng <code class=\"language-inline-text\">dataUrl</code> như ở trên</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cropper<span class=\"token punctuation\">.</span><span class=\"token function\">getCroppedCanvas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBlob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"toàn-bộ-source-code\"><a href=\"#to%C3%A0n-b%E1%BB%99-source-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Toàn bộ source code</h2>\n<div class=\"gridsome-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>createRef<span class=\"token punctuation\">,</span> useState<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./App.css'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Cropper<span class=\"token punctuation\">,</span> ReactCropperElement<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-cropper\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'cropperjs/dist/cropper.css'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./roundedCropper.css'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// chuyển file qua base64</span>\n<span class=\"token keyword\">const</span> file2Base64 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>file<span class=\"token operator\">:</span> File<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    reader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsDataURL</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    reader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span>result<span class=\"token operator\">?.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    reader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ref đến file input</span>\n  <span class=\"token keyword\">const</span> fileRef <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>HTMLInputElement<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// hình được chọn</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>uploaded<span class=\"token punctuation\">,</span> setUploaded<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// kết quả của image sau khi crop</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>cropped<span class=\"token punctuation\">,</span> setCropped<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ref đến crop element</span>\n  <span class=\"token keyword\">const</span> cropperRef <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ReactCropperElement<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> onFileInputChange<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ChangeEventHandler<span class=\"token operator\">&lt;</span>HTMLInputElement<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> file <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token operator\">?.</span>files<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">file2Base64</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>base64<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setUploaded</span><span class=\"token punctuation\">(</span>base64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onCrop</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> imageElement<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> cropperRef<span class=\"token operator\">?.</span>current<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> cropper<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> imageElement<span class=\"token operator\">?.</span>cropper<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setCropped</span><span class=\"token punctuation\">(</span>cropper<span class=\"token punctuation\">.</span><span class=\"token function\">getCroppedCanvas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDataURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>\n          uploaded <span class=\"token operator\">?</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cropper</span></span>\n                <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>uploaded<span class=\"token punctuation\">}</span></span>\n                <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n                <span class=\"token attr-name\">autoCropArea</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span>\n                <span class=\"token attr-name\">aspectRatio</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span>\n                <span class=\"token attr-name\">viewMode</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span></span>\n                <span class=\"token attr-name\">guides</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span>\n                <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>cropperRef<span class=\"token punctuation\">}</span></span>\n              <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onCrop<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Crop</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token punctuation\">{</span>cropped <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>cropped<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Cropped!<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token operator\">:</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n                <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n                <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>fileRef<span class=\"token punctuation\">}</span></span>\n                <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onFileInputChange<span class=\"token punctuation\">}</span></span>\n                <span class=\"token attr-name\">accept</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/png,image/jpeg,image/gif<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n                <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> fileRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n              <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Upload something!\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><a href=\"https://tolgee.io/blog/manage-user-avatar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">All you need to know to deal with user avatars 👤 in React</a></li>\n</ul>\n","cover_image":""}},{"node":{"id":"edf4266cd7225277113199cb85829abb","title":"Bỏ túi 6 đoạn code chỉ với một dòng rất hữu ích trong JavaScript","path":"/2022-03-04-bo-tui-6-doan-code-huu-ich-trong-js/","date":"2022-03-04","timeToRead":1,"desc":"","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#tr%E1%BB%99n-ng%E1%BA%ABu-nhi%C3%AAn-m%E1%BB%99t-m%E1%BA%A3ng\">Trộn ngẫu nhiên một mảng</a></li>\n<li><a href=\"#copy-v%C3%A0o-clipboard\">Copy vào clipboard</a></li>\n<li><a href=\"#x%C3%A1c-%C4%91%E1%BB%8Bnh-window-c%C3%B3-%C4%91ang-ch%E1%BB%8Dn-ch%E1%BA%BF-%C4%91%E1%BB%99-darkmode\">Xác định window có đang chọn chế độ DarkMode</a></li>\n<li><a href=\"#scroll-l%C3%AAn-%C4%91%E1%BA%A7u-trang\">Scroll lên đầu trang</a></li>\n<li><a href=\"#cu%E1%BB%99n-xu%E1%BB%91ng-cu%E1%BB%91i-trang\">Cuộn xuống cuối trang</a></li>\n<li><a href=\"#t%E1%BA%A1o-m%C3%A3-m%C3%A0u-ng%E1%BA%ABu-nhi%C3%AAn\">Tạo mã màu ngẫu nhiên</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"trộn-ngẫu-nhiên-một-mảng\"><a href=\"#tr%E1%BB%99n-ng%E1%BA%ABu-nhi%C3%AAn-m%E1%BB%99t-m%E1%BA%A3ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Trộn ngẫu nhiên một mảng</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">shuffleArray</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">shuffleArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"copy-vào-clipboard\"><a href=\"#copy-v%C3%A0o-clipboard\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Copy vào clipboard</h2>\n<blockquote>\n<p>Chạy trên trình duyệt có hỗ trợ <code class=\"language-inline-text\">navigator.clipboard</code></p>\n</blockquote>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">copyToClipboard</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  navigator<span class=\"token punctuation\">.</span>clipboard<span class=\"token operator\">?.</span>writeText <span class=\"token operator\">&amp;&amp;</span> navigator<span class=\"token punctuation\">.</span>clipboard<span class=\"token punctuation\">.</span><span class=\"token function\">writeText</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">copyToClipboard</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"xác-định-window-có-đang-chọn-chế-độ-darkmode\"><a href=\"#x%C3%A1c-%C4%91%E1%BB%8Bnh-window-c%C3%B3-%C4%91ang-ch%E1%BB%8Dn-ch%E1%BA%BF-%C4%91%E1%BB%99-darkmode\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xác định window có đang chọn chế độ DarkMode</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isDarkMode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  window<span class=\"token punctuation\">.</span>matchMedia <span class=\"token operator\">&amp;&amp;</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">matchMedia</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(prefers-color-scheme: dark)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>matches<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isDarkMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"scroll-lên-đầu-trang\"><a href=\"#scroll-l%C3%AAn-%C4%91%E1%BA%A7u-trang\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Scroll lên đầu trang</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">scrollToTop</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  element<span class=\"token punctuation\">.</span><span class=\"token function\">scrollIntoView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">behavior</span><span class=\"token operator\">:</span> <span class=\"token string\">\"smooth\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">block</span><span class=\"token operator\">:</span> <span class=\"token string\">\"start\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"cuộn-xuống-cuối-trang\"><a href=\"#cu%E1%BB%99n-xu%E1%BB%91ng-cu%E1%BB%91i-trang\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cuộn xuống cuối trang</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">scrollToBottom</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  element<span class=\"token punctuation\">.</span><span class=\"token function\">scrollIntoView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">behavior</span><span class=\"token operator\">:</span> <span class=\"token string\">\"smooth\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">block</span><span class=\"token operator\">:</span> <span class=\"token string\">\"end\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"tạo-mã-màu-ngẫu-nhiên\"><a href=\"#t%E1%BA%A1o-m%C3%A3-m%C3%A0u-ng%E1%BA%ABu-nhi%C3%AAn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tạo mã màu ngẫu nhiên</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateRandomHexColor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">#</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0xffffff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n","cover_image":""}},{"node":{"id":"6d279ec5ee3e089ef43d2aa38bb7816e","title":"Ứng dụng hay của flatMap","path":"/2022-02-03-ung-dung-hay-cua-flatmap/","date":"2022-02-03","timeToRead":1,"desc":"Thay thế hàm filter và map bằng flatMap","content":"<p>Sử dụng <code class=\"language-inline-text\">flatMap</code> có thể giúp code ngắn hơn, ví dụ trong tình huống bên dưới</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// filter các giá trị âm</span>\n<span class=\"token comment\">// nhân đôi các giá trị dương còn lại</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> num <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> num <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// -> [2, 6, 10]</span></code></pre></div>\n<p>Cách này không có gì sai, nhưng nếu muốn viết bằng một phương pháp khác thì sao?</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>num <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// -> [2, 6, 10]</span></code></pre></div>\n<p>Nếu muốn rút ngắn hơn nữa</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span>num <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token comment\">// -> [2, 6, 10]</span></code></pre></div>\n<p>Tuy nhiên, nếu xét về mặt viết-sao-cho-dễ-đọc thì có vẻ dùng <code class=\"language-inline-text\">filter</code> và <code class=\"language-inline-text\">map</code> sẽ tốt hơn, <code class=\"language-inline-text\">flatMap</code> được cái viết ngắn hơn.</p>\n<p>Túm lại, ưng mắt cách nào hơn thì bạn viết cách đó.</p>\n<ul>\n<li><a href=\"https://www.stefanjudis.com/snippets/filter-and-map-array-values-with-a-flatmap-one-liner/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Filter and map Array values with a flatMap one-liner</a></li>\n</ul>\n","cover_image":""}},{"node":{"id":"bdfc71038bab95dc85fb3d294445a3b7","title":"Sử dụng React-Query để fetch data","path":"/2021-08-15-data-fetching-voi-react-query/","date":"2021-08-15","timeToRead":4,"desc":"Một giải pháp để chúng ta có thể đơn giản hóa việc lưu trữ dữ liệu từ server và inject vào trong component dễ dàng","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#th%E1%BB%B1c-hi%E1%BB%87n-fetch-v%E1%BB%9Bi-usequery\">Thực hiện fetch với <code class=\"language-inline-text\">useQuery</code></a></li>\n<li><a href=\"#th%E1%BB%B1c-hi%E1%BB%87n-cache\">Thực hiện cache</a></li>\n</ul>\n<!-- /TOC -->\n<p>Đã bao giờ anh em react chúng ta rơi vào cảnh sau: thử tới thử lui bao nhiều là thư viện để quản lý global state, thử bao nhiêu là hook <code class=\"language-inline-text\">useFancyPromise</code>, rồi tự viết những giải pháp riêng, tất cả điều dẫn đến một kết cục: viết cả đống code để xử lý việc fetch data?</p>\n<blockquote>\n<p>Server state và client state cơ bản là khác nhau, vậy tại sao lại trộn chung</p>\n</blockquote>\n<p><strong>Đặc điểm của Server state</strong></p>\n<ol>\n<li><strong>cố định</strong>, ngoài khả năng kiểm soát của client</li>\n<li><strong>bất đồng bộ (async)</strong>, cần fetch để lấy dữ liệu hoặc cập nhập</li>\n<li><strong>chia sẽ</strong>, nhiều người cùng truy xuất đến cùng một tập dữ liệu cũng như thao tác xử lý trên tập dữ liệu này</li>\n</ol>\n<blockquote>\n<p>Đến lúc dừng việc trộn server state vào trong client state</p>\n</blockquote>\n<p><strong>Lợi ích mang lại khi tách việc quản lý server state bằng một công cụ riêng</strong></p>\n<ol>\n<li><strong>cache</strong>, phần khó nhất của lập trình</li>\n<li><strong>Không duplicate</strong> nhiều request</li>\n<li><strong>Cập nhập</strong> ngầm các dữ liệu outdate</li>\n<li><strong>Tối ưu hiệu năng</strong> bằng phân trang, lazy load</li>\n<li>Quản lý <strong>memory và garbage collection</strong> tốt hơn</li>\n</ol>\n<p>Xin giới thiệu với bạn người bạn mới React-query, anh này sẽ cung cấp cho chúng ta</p>\n<ul>\n<li>Một global context để lưu trữ dữ liệu lấy về từ server</li>\n<li>Thiết đặt caching vô cùng đơn giản</li>\n</ul>\n<p>Nếu thích bạn cũng có thể tham khảo thêm <a href=\"https://github.com/vercel/swr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">swr</a> cũng khá cool</p>\n<p>Chúng ta sẽ có các Server side APIs sau</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// api/product.js</span>\n\n<span class=\"token comment\">// 1. Fetch tất cả products</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useFetchProducts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 2. Fetch một product cụ thể</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useFetchProduct</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 3. Thêm một product</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useAddProduct</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">product</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 4. Cập nhập một product</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useEditProduct</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">product</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 5. Xóa một product</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useDeleteProduct</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"thực-hiện-fetch-với-usequery\"><a href=\"#th%E1%BB%B1c-hi%E1%BB%87n-fetch-v%E1%BB%9Bi-usequery\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thực hiện fetch với <code class=\"language-inline-text\">useQuery</code></h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-query'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useFetchProducts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token comment\">// định danh</span>\n<span class=\"gridsome-highlight-code-line\">\t\t<span class=\"token string\">'products'</span><span class=\"token punctuation\">,</span></span>\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/products'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sử dụng trong component</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useFetchProducts <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../api/products\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Products</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> products<span class=\"token punctuation\">,</span>\n\t\tisLoading\n\t<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useFetchProducts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token punctuation\">{</span>\n\t\t\t\tisLoading <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token punctuation\">{</span>\n\t\t\t\tproducts <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n\t\t\t\t\tproducts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">product</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>product<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t\t\t\t\t</span><span class=\"token punctuation\">{</span>product<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t\t\t\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Việc <code class=\"language-inline-text\">fetch</code> dữ liệu sẽ còn thêm các tính năng như <em>search, phân trang, filter</em>. Có react-query mọi thứ sẽ vô cùng đơn giản</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useFetchProducts <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../api/products\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Products</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// trang hiện tại</span>\n<span class=\"gridsome-highlight-code-line\">\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>page<span class=\"token punctuation\">,</span> setPage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span>\n\t<span class=\"token comment\">// số item trên trang</span>\n<span class=\"gridsome-highlight-code-line\">\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>limit<span class=\"token punctuation\">,</span> setLimit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></span>\n\t<span class=\"token comment\">// từ khóa</span>\n<span class=\"gridsome-highlight-code-line\">\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\t\t</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> products<span class=\"token punctuation\">,</span>\n\t\tisLoading\n\t<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useFetchProducts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gridsome-highlight-code-line\">\t\tpage<span class=\"token punctuation\">,</span></span><span class=\"gridsome-highlight-code-line\">\t\tlimit<span class=\"token punctuation\">,</span></span><span class=\"gridsome-highlight-code-line\">\t\tname</span>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">\t\t\t</span><span class=\"token punctuation\">{</span>\n\t\t\t\tisLoading <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">\t\t\t</span><span class=\"token punctuation\">{</span>\n\t\t\t\tproducts <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n\t\t\t\t\tproducts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">product</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>product<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">\t\t\t\t\t\t\t</span><span class=\"token punctuation\">{</span>product<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">\t\t\t\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Chúng ta cần cập nhập lại <code class=\"language-inline-text\">useFetchProducts</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-query'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useFetchProducts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> page<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span>\n<span class=\"gridsome-highlight-code-line\">\t\t<span class=\"token punctuation\">[</span><span class=\"token string\">'products'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> page<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gridsome-highlight-code-line\">\t\t\t<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/products?page=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>page<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;limit=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>limit<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;search=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></span>\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"thực-hiện-cache\"><a href=\"#th%E1%BB%B1c-hi%E1%BB%87n-cache\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thực hiện cache</h2>\n<p>Ví dụ chúng ta muốn đặt cache 10s, chúng ta sẽ sử dụng thiết đặt <code class=\"language-inline-text\">staleTime</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-query'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useFetchProducts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> page<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token punctuation\">[</span><span class=\"token string\">'products'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> page<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/products?page=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>page<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;limit=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>limit<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;search=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span>\n<span class=\"gridsome-highlight-code-line\">\t\t\t<span class=\"token literal-property property\">staleTime</span><span class=\"token operator\">:</span> <span class=\"token number\">10000</span></span>\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>Cực kỳ đơn giản đúng không!</em></p>\n<p>Tưởng tượng chúng ta có danh sách <em>product</em> hiển thị trên màn hình, click vào một <em>product</em> chúng ta hiển thị pop-up với các thông tin của product</p>\n<p>Để <code class=\"language-inline-text\">fetch</code> một product, chúng ta cũng đồng thời áp dụng cache</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useFetchProduct</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token punctuation\">[</span><span class=\"token string\">'product'</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/products/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token literal-property property\">staleTime</span><span class=\"token operator\">:</span> <span class=\"token number\">10000</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Đến phần thú vị nè, <em>nếu các thông tin của từng product hoàn toán giống với thông tin trả về từ danh sách product?</em>, chúng ta có thể áp dụng cache cho từng product trong lúc fetch danh sách product</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQuery<span class=\"token punctuation\">,</span> useQueryClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-query'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useFetchProducts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> page<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gridsome-highlight-code-line\">\t<span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token function\">useQueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token punctuation\">[</span><span class=\"token string\">'products'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> page<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/products?page=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>page<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;limit=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>limit<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;search=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span>\t\t\t\n\t\t\t<span class=\"token literal-property property\">staleTime</span><span class=\"token operator\">:</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span>\n<span class=\"gridsome-highlight-code-line\">\t\t\t<span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">products</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>\t\t\t\tproducts<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">product</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gridsome-highlight-code-line\">\t\t\t\t\tqueryClient<span class=\"token punctuation\">.</span><span class=\"token function\">setQueryData</span><span class=\"token punctuation\">(</span></span>\t\t\t\t\t\t<span class=\"token punctuation\">[</span><span class=\"token string\">'product'</span><span class=\"token punctuation\">,</span> product<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\tproduct\n\t\t\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Bằng cách dùng <code class=\"language-inline-text\">useQueryClient().setQuery</code>, chúng ta force cache cho từng <code class=\"language-inline-text\">product.id</code>, để khi <code class=\"language-inline-text\">useFetchProduct</code> chạy nó sẽ có sẵn giá trị cache này và không cần thực hiện gọi API</p>\n<p>Thể hiện chút tình yêu với dự án <code class=\"language-inline-text\">react-query</code> nhé các bạn, <a href=\"https://github.com/tannerlinsley/react-query\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">star ngay không nói nhiều</a></p>\n","cover_image":""}},{"node":{"id":"9e78d79690782d97be1a4e92614d65b1","title":"Intersection Observer API","path":"/2021-07-24-huong-dan-su-dung-intersection-observer-api/","date":"2021-07-24","timeToRead":3,"desc":"Làm sao để chạy một hàm khi element bắt đầu xuất hiện trên màn hình?","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng-1-lazy-load-image\">Ứng dụng 1: lazy load image</a></li>\n<li><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng-2-t%E1%BB%B1-%C4%91%E1%BB%99ng-pause-video-khi-ra-kh%E1%BB%8Fi-m%C3%A0n-h%C3%ACnh\">Ứng dụng 2: Tự động pause video khi ra khỏi màn hình</a></li>\n<li><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng-3-toggle-class-khi-header-sticky\">Ứng dụng 3: Toggle class khi header sticky</a></li>\n</ul>\n<!-- /TOC -->\n<p>Chúng ta thường phải đặt <code class=\"language-inline-text\">listener</code> trên sự kiện <code class=\"language-inline-text\">window.scroll</code> thực hiện một số thao tác tính toán, so sánh với thanh <em>scroll</em> để biết được khi nào element bắt đầu xuất hiện.</p>\n<p>Cách làm này gây nhiều vấn đề hiệu năng và tương đối rườm rà. Giờ các trình duyệt đã đồng loạt hỗ trợ <strong>Intersection Observer API</strong>, chúng ta có một cách hoàn toàn <em>gọn gàng, sạch sẽ</em> mà lại tối ưu hiệu năng hơn nhiều.</p>\n<p>Cách sử dụng như sau, chúng ta khởi tạo một <em>instance</em> <code class=\"language-inline-text\">IntersectionObserver</code> và gọi <code class=\"language-inline-text\">observe</code> trên element muốn theo dõi (<em>watch</em> là thuật ngữ chuyên ngành hơn)</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myImg <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.animate-me'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry<span class=\"token punctuation\">,</span> observer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> entry <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> observer <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>myImg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Trong trường hợp chúng ta muốn <strong>observe</strong> trên nhiều element cùng lúc</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myImgs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.animate-me'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyImgs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">image</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Để thực thi một tác vụ nào đó khi element bắt đầu xuất hiện trong viewport hoặc leave khỏi viewport</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myImgs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.animate-me'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>intersectionRatio <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in the view'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'out of view'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyImgs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">image</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Với điều kiện <code class=\"language-inline-text\">intersectionRatio > 0</code> chúng ta biết được element đã xuất hiện trong viewport hay không</p>\n<p>Với lazy load, chúng ta chỉ cần observe ở lần đầu tiên khi xuất hiện trên viewport, chúng ta sẽ <code class=\"language-inline-text\">unobserve</code> nó đi vì không cần <strong>tracking</strong> tiếp nữa</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myImgs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.animate-me'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>intersectionRatio <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in the view'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      observer<span class=\"token punctuation\">.</span><span class=\"token function\">unobserve</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'out of view'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyImgs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">image</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-inline-text\">IntersectionObserver</code> API nhận thêm params thứ 2, để chúng ta truyền một số config</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">rootMargin</span><span class=\"token operator\">:</span> <span class=\"token string\">'50px 20px 75px 30px'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">threshold</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Các giá trị có thể truyền vào cho config</p>\n<ul>\n<li><code class=\"language-inline-text\">root</code> element dùng để kiểm tra intersection, nếu <code class=\"language-inline-text\">null</code> nó sẽ lấy <code class=\"language-inline-text\">document</code> viewport</li>\n<li><code class=\"language-inline-text\">rootMargin</code>:  khai báo như giá trị margin css, ví dụ <code class=\"language-inline-text\">3rem 2rem</code>, có thể dùng để thêm <code class=\"language-inline-text\">offset</code> cho intersection point</li>\n<li><code class=\"language-inline-text\">threhold</code>: mảng giá trị từ 0 đến 1, tương ứng với ratio xuất hiện của element, 0 = hoàn toàn ra khỏi viewport, 1 là đang nằm trong viewport hoàn toàn, <code class=\"language-inline-text\">callback</code> sẽ được gọi vào tất cả các giá trị đã khai báo</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/769b2733-5700-4d2d-a32f-6850a173abaa/1-dynamic-header-intersection-observer.png\"></p>\n<p>Element được xem là nằm ngoài viewport khi nó đã nằm ngoài viewport + 15px margin</p>\n<p><img src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a5908e69-f81a-4e1c-81e6-aae2f1b96a28/2-dynamic-header-intersection-observer.png\"></p>\n<p><img src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b95822cd-d3e8-4b71-9d38-862e6d39990a/3-dynamic-header-intersection-observer.png\"></p>\n<h2 id=\"ứng-dụng-1-lazy-load-image\"><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng-1-lazy-load-image\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ứng dụng 1: lazy load image</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">entries<span class=\"token punctuation\">,</span> observer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \nentries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Placeholder replacement */</span>\n    entry<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">;</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">unobserve</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">{</span><span class=\"token literal-property property\">rootMargin</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0px 0px -200px 0px\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">img</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"ứng-dụng-2-tự-động-pause-video-khi-ra-khỏi-màn-hình\"><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng-2-t%E1%BB%B1-%C4%91%E1%BB%99ng-pause-video-khi-ra-kh%E1%BB%8Fi-m%C3%A0n-h%C3%ACnh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ứng dụng 2: Tự động pause video khi ra khỏi màn hình</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> video <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> isPaused <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Flag for auto-paused video */</span>\n<span class=\"token keyword\">let</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries<span class=\"token punctuation\">,</span> observer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n  entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>intersectionRatio<span class=\"token operator\">!=</span><span class=\"token number\">1</span>  <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>video<span class=\"token punctuation\">.</span>paused<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      video<span class=\"token punctuation\">.</span><span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> isPaused <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isPaused<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>video<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> isPaused<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">threshold</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"ứng-dụng-3-toggle-class-khi-header-sticky\"><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng-3-toggle-class-khi-header-sticky\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ứng dụng 3: Toggle class khi header sticky</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> primaryNav <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'primaryNav'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">callBack</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sticky\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>intersectionRatio <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span> \n    callBack<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">threshold</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>primaryNav<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">prefers-reduced-motion</span><span class=\"token punctuation\">:</span> no-preference<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">.scroller</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">scroll-behavior</span><span class=\"token punctuation\">:</span> smooth<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tham khảo</p>\n<ul>\n<li><a href=\"https://alligator.io/js/intersection-observer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://alligator.io/js/intersection-observer/</a></li>\n<li><a href=\"https://css-tricks.com/a-few-functional-uses-for-intersection-observer-to-know-when-an-element-is-in-view/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://css-tricks.com/a-few-functional-uses-for-intersection-observer-to-know-when-an-element-is-in-view/</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2021/07/dynamic-header-intersection-observer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.smashingmagazine.com/2021/07/dynamic-header-intersection-observer/</a></li>\n</ul>\n","cover_image":""}},{"node":{"id":"8a1551a47737f4d1cf9dc50fa514c3e5","title":"Quản lý state: nhận định boolean tốt và không tốt","path":"/2021-05-31-huong-dan-viet-boolean/","date":"2021-05-31","timeToRead":1,"desc":"","content":"<p>Tóm tắt nếu bạn lười đọc:</p>\n<blockquote>\n<p><code class=\"language-inline-text\">boolean</code> không tốt đại diện cho <code class=\"language-inline-text\">state</code>, <code class=\"language-inline-text\">boolean</code> tốt là kết quả tính từ <code class=\"language-inline-text\">state</code></p>\n</blockquote>\n<p>Một ví dụ dễ thấy nhất với <code class=\"language-inline-text\">boolean</code> không tốt là cách thiết kế <code class=\"language-inline-text\">state</code> như vầy</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> isLoading <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> isComplete <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> hasError <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Thoạt nhìn chúng ta sẽ nghĩ nó tốt. Chúng ta đưa ra 3 <code class=\"language-inline-text\">state</code> khác nhau ứng với 3 giá trị <code class=\"language-inline-text\">boolean</code> riêng biệt, chỉ duy nhất một giá trị là <code class=\"language-inline-text\">true</code> </p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeFetch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  isLoading <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    isComplete <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    hasErrored <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  isLoading <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nhưng khi nghĩ kỹ lại, chúng ta sẽ nhận được 2 giá trị <code class=\"language-inline-text\">true</code> nếu <code class=\"language-inline-text\">makeFetch</code> được gọi lại lần nữa</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">isLoading <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nisComplete <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nhasError <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Vậy làm sao để thiết kế một <code class=\"language-inline-text\">boolean</code> tốt cho trường hợp trên?</strong></p>\n<p><code class=\"language-inline-text\">State</code> ở đây chúng ta sẽ có tất cả các giá trị sau</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> statusEnum <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">idle</span><span class=\"token operator\">:</span> <span class=\"token string\">'idle'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token string\">'loading'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">complete</span><span class=\"token operator\">:</span> <span class=\"token string\">'complete'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'error'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Và chúng ta dùng nó trong hàm <code class=\"language-inline-text\">makeFetch</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeFetch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  status <span class=\"token operator\">=</span> statusEnum<span class=\"token punctuation\">.</span>loading<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    status <span class=\"token operator\">=</span> statusEnum<span class=\"token punctuation\">.</span>complete<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    status <span class=\"token operator\">=</span> statusEnum<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Cần giá trị <code class=\"language-inline-text\">boolean</code> bạn <em>tính</em> từ giá trị <code class=\"language-inline-text\">state</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isLoading</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> status <span class=\"token operator\">===</span> statusEnum<span class=\"token punctuation\">.</span>loading<span class=\"token punctuation\">;</span></code></pre></div>\n","cover_image":""}},{"node":{"id":"930a1f128fcc405c8b99fa56b91dc79c","title":"Một vài thay đổi đáng chú ý của Chrome 90","path":"/2021-04-17-chrome-90-co-gi-moi/","date":"2021-04-17","timeToRead":2,"desc":"Một vài thay đổi đáng chú ý trong DevTools của Chrome 90 sắp tới","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#c%C3%B4ng-c%E1%BB%A5-debug-css-flexbox-x%E1%BB%8Bn-x%C3%B2-h%C6%A1n\">Công cụ debug CSS Flexbox xịn xò hơn</a></li>\n<li><a href=\"#%C4%91o-performance-b%E1%BA%B1ng-core-web-vitals\">Đo performance bằng Core Web Vitals</a></li>\n<li><a href=\"#tab-issue\">Tab Issue</a></li>\n<li><a href=\"#%C4%91%E1%BB%8Bnh-d%E1%BA%A1ng-l%E1%BA%A1i-chu%E1%BB%97i-trong-console\">Định dạng lại chuỗi trong console</a></li>\n<li><a href=\"#trust-token-panel-trong-application\">Trust token panel trong Application</a></li>\n<li><a href=\"#ng%C6%B0ng-support-fndisplayname\">Ngưng support <code class=\"language-inline-text\">fn.displayName</code></a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"công-cụ-debug-css-flexbox-xịn-xò-hơn\"><a href=\"#c%C3%B4ng-c%E1%BB%A5-debug-css-flexbox-x%E1%BB%8Bn-x%C3%B2-h%C6%A1n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Công cụ debug CSS Flexbox xịn xò hơn</h2>\n<p><img src=\"https://developer-chrome-com.imgix.net/image/BrQidfK9jaQyIHwdw91aVpkPiib2/hbg2toNQJqIWB30Mo2xt.png?auto=format&#x26;w=846\" alt=\"Công cụ debug CSS Flexbox xịn xò hơn\"></p>\n<p>Giờ nếu có một HTML element có dạng <code class=\"language-inline-text\">display: flex</code> hoặc <code class=\"language-inline-text\">display: inline-flex</code>, bạn sẽ thấy một cái nút bé bé <code class=\"language-inline-text\">flex</code> trên cái <strong>Element panel</strong></p>\n<p>Bên dưới <strong>Style panel</strong>, sẽ có thêm một icon nhỏ kế bên <code class=\"language-inline-text\">display: flex</code>, click vào đó sẽ mở ra một menu để lựa chọn như trên hình.</p>\n<p>Trong <strong>Layout Panel</strong> sẽ có thêm một khu vực cho <strong>Flexbox</strong> liệt kê tất cả các element đang có dạng hiển thị <em>flex</em></p>\n<h2 id=\"đo-performance-bằng-core-web-vitals\"><a href=\"#%C4%91o-performance-b%E1%BA%B1ng-core-web-vitals\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đo performance bằng Core Web Vitals</h2>\n<p><a href=\"https://web.dev/vitals/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Core web vitals</a> là một bộ hướng dẫn do google khởi xướng để đánh giá thế nào là một trang web xịn xò.</p>\n<p><code class=\"language-inline-text\">Ctrl + Shift + P</code> để mở Command menu trong DevTools, tìm mục <strong>Show Rendering</strong>, click vào checkbox <strong>Core Web Vitals</strong></p>\n<p>Một ô màu đen nho nhỏ sẽ xuất hiện chứa các thông tin quan trọng sau:</p>\n<ul>\n<li><a href=\"https://web.dev/lcp/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Largest Contentful Paint (LCP)</a>: đo thời gian load. Trong khoản <strong>2.5 giây</strong> cho lần load đầu tiên là ngon.</li>\n<li><a href=\"https://web.dev/fid/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">First Input Delay (FID)</a>: thời điểm có thể <em>tương tác</em>. FID vào <strong>dưới 100 mili giây</strong>.</li>\n<li><a href=\"https://web.dev/cls/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cumulative Layout Shift (CLS)</a>: độ ổn định của UI, ví dụ như việc bạn load quá nhiều font khác nhau sẽ tác động tới con số này. CLS <strong>dưới 0.1</strong>.</li>\n</ul>\n<p><img src=\"https://developer-chrome-com.imgix.net/image/BrQidfK9jaQyIHwdw91aVpkPiib2/95Iw3l9ePIopJuApx65h.png?auto=format&#x26;w=846\" alt=\"Đo performance bằng Core Web Vitals\"></p>\n<h2 id=\"tab-issue\"><a href=\"#tab-issue\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tab Issue</h2>\n<p><img src=\"https://developer-chrome-com.imgix.net/image/BrQidfK9jaQyIHwdw91aVpkPiib2/vg2AGCiq8IWkXU7MoHR9.png?auto=format&#x26;w=846\" alt=\"Tab Issue\"></p>\n<p>Số issue có trên trang được move lên trên cùng của <strong>Console Panel</strong> để nhắc nhở chúng ta ngày này quá tháng nọ.</p>\n<p>Bổ sung  <a href=\"https://developer.chrome.com/docs/android/trusted-web-activity/overview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Trusted Web Activity</a>, lại nhắc nhẹ chúng ta về chất lượng của ứng dụng</p>\n<p><img src=\"https://developer-chrome-com.imgix.net/image/BrQidfK9jaQyIHwdw91aVpkPiib2/FSoAR540YOC6B86Cl7l7.png?auto=format&#x26;w=846\" alt=\"Trusted web activity\"></p>\n<p><a href=\"https://youtu.be/QJlbMfW3jPc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem thêm video này của Andre để hiểu thêm</a></p>\n<h2 id=\"định-dạng-lại-chuỗi-trong-console\"><a href=\"#%C4%91%E1%BB%8Bnh-d%E1%BA%A1ng-l%E1%BA%A1i-chu%E1%BB%97i-trong-console\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Định dạng lại chuỗi trong console</h2>\n<p>Chuỗi trong console sẽ được định dạng theo chuẩn JS string literal, nó sẽ <strong>escape</strong> ký tự <code class=\"language-inline-text\">\"</code></p>\n<p><img src=\"https://developer-chrome-com.imgix.net/image/BrQidfK9jaQyIHwdw91aVpkPiib2/4OPajz8MHz5lPMhPpzg5.png?auto=format&#x26;w=846\" alt=\"Định dạng lại chuỗi trong console\"></p>\n<h2 id=\"trust-token-panel-trong-application\"><a href=\"#trust-token-panel-trong-application\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Trust token panel trong Application</h2>\n<p>Bên trong tab <strong>Application</strong>, có thêm mục mới <strong>Trust Tokens</strong></p>\n<p><strong>Trust Token</strong> là một API mới giúp chống gian lận, phân biệt người thật với bot, <a href=\"https://web.dev/trust-tokens/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tìm hiểu thêm</a></p>\n<p><img src=\"https://developer-chrome-com.imgix.net/image/BrQidfK9jaQyIHwdw91aVpkPiib2/j5idcrmLOWTIcd6vG0q9.png?auto=format\" alt=\"New Trust Tokens pane\"></p>\n<h2 id=\"ngưng-support-fndisplayname\"><a href=\"#ng%C6%B0ng-support-fndisplayname\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ngưng support <code class=\"language-inline-text\">fn.displayName</code></h2>\n<p><img src=\"https://developer-chrome-com.imgix.net/image/BrQidfK9jaQyIHwdw91aVpkPiib2/oXk5CGKAAPyJIQeecS0I.png?auto=format\" alt=\"Example usage of displayName\"></p>\n<p>Trước đây Chrome vẫn cho phép sử dụng <code class=\"language-inline-text\">fn.displayName</code> để có dễ trace lỗi lúc debug. Giờ sẽ được thay thế bằng <code class=\"language-inline-text\">fn.name</code></p>\n<p><a href=\"https://developer.chrome.com/blog/new-in-devtools-90\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem toàn bộ các thay đổi khác</a></p>\n","cover_image":""}},{"node":{"id":"708598252908e5c36103d5ed79cb70de","title":"Vài lưu ý trong React để tránh các vấn đề với bảo mật","path":"/2020-11-23-10-kinh-nghiem-trong-react-voi-van-de-bao-mat/","date":"2020-11-23","timeToRead":2,"desc":"Một vài điểm nhắc nhẹ các bạn khi đang viết React, để tránh bị dính injection","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#d%C3%B9ng-data-binding-m%E1%BA%B7c-%C4%91%E1%BB%8Bnh-%C4%91%E1%BB%83-c%C3%B3-xss-protection\">Dùng data binding mặc định để có XSS protection</a></li>\n<li><a href=\"#validate-urls-tr%C6%B0%E1%BB%9Bc-khi-s%E1%BB%AD-d%E1%BB%A5ng\">Validate URLs trước khi sử dụng</a></li>\n<li><a href=\"#render-html\">Render HTML</a></li>\n<li><a href=\"#truy-c%E1%BA%ADp-tr%E1%BB%B1c-ti%E1%BA%BFp-%C4%91%E1%BA%BFn-dom\">Truy cập trực tiếp đến DOM</a></li>\n<li><a href=\"#ki%E1%BB%83m-tra-th%C6%B0-vi%E1%BB%87n-dependency\">Kiểm tra thư viện dependency</a></li>\n<li><a href=\"#json\">JSON</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"dùng-data-binding-mặc-định-để-có-xss-protection\"><a href=\"#d%C3%B9ng-data-binding-m%E1%BA%B7c-%C4%91%E1%BB%8Bnh-%C4%91%E1%BB%83-c%C3%B3-xss-protection\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dùng data binding mặc định để có XSS protection</h2>\n<p>Khi render một nội dung dạng <code class=\"language-inline-text\">text</code> bằng kiểu <strong>data binding mặc định</strong> (đặt trong dấu <code class=\"language-inline-text\">{}</code>), React sẽ <strong>mặc định</strong> xử lý để tránh các vấn đề về XSS. Lưu ý một điều là nếu truyền vào cho <code class=\"language-inline-text\">attribute</code> của element thì sẽ không có được tính năng này.</p>\n<p>Mặc định có XSS protection</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>textContent<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Không có XSS protection, nhớ validate thủ công trước</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<h2 id=\"validate-urls-trước-khi-sử-dụng\"><a href=\"#validate-urls-tr%C6%B0%E1%BB%9Bc-khi-s%E1%BB%AD-d%E1%BB%A5ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Validate URLs trước khi sử dụng</h2>\n<p>URLs có thể bị <em>inject</em> một code js bằng <code class=\"language-inline-text\">javascript:</code>. Để <strong>validate</strong> một URL chỉ được phép là một trong 2 dạng <code class=\"language-inline-text\">http:</code> <code class=\"language-inline-text\">https:</code>:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">validateURL</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> parsed <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'https:'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http:'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>parsed<span class=\"token punctuation\">.</span>protocol<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">validateURL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> url <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Click here!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"render-html\"><a href=\"#render-html\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Render HTML</h2>\n<p>Việc render HTML như trên trang chính thức của React cũng đã đề cập, <em>hết sức nguy hiểm</em>, nên luôn phải <strong>sanitized</strong> trước khi render, dùng thư viện <a href=\"https://www.npmjs.com/package/dompurify\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.npmjs.com/package/dompurify</a></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> purify <span class=\"token keyword\">from</span> <span class=\"token string\">\"dompurify\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">dangerouslySetInnerHTML</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">__html</span><span class=\"token operator\">:</span>purify<span class=\"token punctuation\">.</span><span class=\"token function\">sanitize</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<h2 id=\"truy-cập-trực-tiếp-đến-dom\"><a href=\"#truy-c%E1%BA%ADp-tr%E1%BB%B1c-ti%E1%BA%BFp-%C4%91%E1%BA%BFn-dom\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Truy cập trực tiếp đến DOM</h2>\n<p>Không được truy cập trực tiếp đến DOM rồi <em>inject</em> thêm vào element nào đó, luôn sử dụng cặp đôi <code class=\"language-inline-text\">dangerouslySetInnerHTML</code> và <code class=\"language-inline-text\">dompurify</code> như ở trên nếu cần chèn nội dung</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> purify <span class=\"token keyword\">from</span> <span class=\"token string\">\"dompurify\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">dangerouslySetInnerHTML</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">__html</span><span class=\"token operator\">:</span>purify<span class=\"token punctuation\">.</span><span class=\"token function\">sanitize</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>Đừng có làm vậy nghe, dùng <code class=\"language-inline-text\">findDomNode()</code>, rồi <code class=\"language-inline-text\">innerHTML</code> như thời đi học</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> attackerControlledValue<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"kiểm-tra-thư-viện-dependency\"><a href=\"#ki%E1%BB%83m-tra-th%C6%B0-vi%E1%BB%87n-dependency\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kiểm tra thư viện dependency</h2>\n<p>Các thư viện dependency đôi khi cũng rất nguy hiểm, một cách vô tình hay cố ý, dùng những công cụ như là <a href=\"https://www.npmjs.com/package/snyk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">snyk</a> tích hợp với công cụ quản lý code (Github, Gitlab, Bitbucket) để kiểm tra một cách tự động.</p>\n<h2 id=\"json\"><a href=\"#json\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JSON</h2>\n<p>Việc gửi đi một JSON lên phía server cũng không phải là ít gặp, luôn escape ký tự <code class=\"language-inline-text\">&lt;</code> để tránh bị <em>inject</em></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span>__PRELOADED_STATE__ <span class=\"token operator\">=</span>   $<span class=\"token punctuation\">{</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>preloadedState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&lt;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\u003c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://snyk.io/blog/10-react-security-best-practices/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">10 React security best practices</a></p>\n","cover_image":""}},{"node":{"id":"0c0f7e2ab636f0ca3e9ebe9a0d58f581","title":"Hướng dẫn kỹ thuật FLIP animation với React","path":"/2020-11-18-huong-dan-flip-animation-voi-react/","date":"2020-11-18","timeToRead":2,"desc":"Nếu bạn là người làm animation có tâm, bạn không muốn animation làm ảnh hưởng đến tốc độ của ứng dụng, bạn cần biết đến FLIP animation","content":"<p>Trước đây mình đã có một bài về FLIP animation, các bạn có thể đọc lại <a href=\"https://luubinhan.github.io/blog/2018-07-25-huong-dan-tao-animate-voi-flip-technique/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ở đây</a> để biết kỹ thuật này là gì và tại sao nó lại giúp tối ưu tốc độ.</p>\n<p>Có thể tóm tắt kỹ thuật FLIP bằng hình minh họa bên dưới</p>\n<p><img src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/06/JakPwnSa.png?w=398&#x26;ssl=1\"></p>\n<p>Những gì trong ô màu tím, cần diễn ra trước sự kiện <em>paint</em> của trình duyệt.</p>\n<p>Để đạt mục đích <strong><em>transform</em> trước khi trình duyệt thực hiện <code class=\"language-inline-text\">paint</code></strong>, chúng ta sẽ sử dụng <code class=\"language-inline-text\">useLayoutEffect</code>, những gì diễn ra ở đây sẽ xảy ra <strong>sau khi DOM cập nhập</strong>, <strong>trước khi paint</strong></p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"React FLIP animations\" src=\"https://codepen.io/jlkiri/embed/oNjaMrK?height=265&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/jlkiri/pen/oNjaMrK'>React FLIP animations</a> by Kirill Vasiltsov\n  (<a href='https://codepen.io/jlkiri'>@jlkiri</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>Với lần render đầu tiên, chúng ta cần <em>cache</em> lại vị trí cuối cùng của animation</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">const</span> rects <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">const</span> squares <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.square'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> square <span class=\"token keyword\">of</span> squares<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        rects<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> square<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> squares <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.square'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> square <span class=\"token keyword\">of</span> squares<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> cachedRect <span class=\"token operator\">=</span> rects<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cachedRect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> nextRect <span class=\"token operator\">=</span> square<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// invert</span>\n            <span class=\"token keyword\">const</span> translateX <span class=\"token operator\">=</span> cachedRect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> nextRect<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// cache position và size</span>\n            rects<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> nextRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// play animation</span>\n            square<span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translateX(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>translateX<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            \t<span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translateX(0px)</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> ids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tóm tắt những gì đã thực hiện bằng hình minh họa sau</p>\n<p><img src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/06/kTkr-F7_.png?fit=1024%2C1024&#x26;ssl=1\" alt=\"Diagram. Cache the size and position, retrieve previous size and position from cache, get new size and position, calculate the difference, and play the animation.\"></p>\n<p><strong>Một vài lưu ý</strong></p>\n<ul>\n<li>Đảm bảo các tính toán không vượt quá 100ms, điều này nhằm đảm bảo user không cảm nhận có một độ trễ trên giao diện, có thể kiểm tra bằng DevTools\n<img src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/06/6LqLR8Jc.png?fit=1024%2C275&#x26;ssl=1\" alt=\"img\"></li>\n<li>Để tránh re-render không cần thiết, chúng ta ko được dùng <code class=\"language-inline-text\">useState</code>, thay vào đó chúng ta phải dùng <code class=\"language-inline-text\">useRef</code> một object cố định chúng ta có thể thay đổi giá trị mà không gây ra re-render</li>\n<li>Không thực hiện đọc vị trí -> chạy animate ngay và luôn trên element đó, luôn thực hiện theo dạng đọc hàng loạt, sau đó animate một loạt</li>\n<li>Nếu không muốn tự viết, có thể tham khảo 2 thư viện dùng với React: <a href=\"https://github.com/aholachek/react-flip-toolkit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-inline-text\">react-flip-toolkit</code></a> và <a href=\"https://github.com/jlkiri/react-easy-flip\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-inline-text\">react-easy-flip</code></a>.</li>\n</ul>\n<p><a href=\"https://css-tricks.com/everything-you-need-to-know-about-flip-animations-in-react/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Everything You Need to Know About FLIP Animations in React</a></p>\n","cover_image":""}},{"node":{"id":"996dfeac96bccc094b4f736116b47426","title":"Hướng dẫn sử dụng useMemo trong React","path":"/2020-10-26-huong-dan-su-dung-usememo-react/","date":"2020-10-26","timeToRead":3,"desc":"Nếu bạn thấy app của mình bắt đầu chậm, đó là lúc bạn nên bắt đầu cân nhắc các phương pháp để tối ưu tốc độ và đọc bài viết này.","content":"<p>Thường React khá nhanh, chúng ta cũng không cần quá bận tâm đến việc tối ưu, nhiều bạn cũng sẽ không đồng ý với quan điểm này: những <strong>tiện ích</strong> để tối ưu mà React cung cấp, chưa đủ <strong>trưởng thành</strong> (premature - theo quan điểm của tác giả).</p>\n<p>Chúng ta sẽ cùng xem qua cách sử dụng một <strong>tiện ích</strong> như vậy trong React để tối ưu tốc độ: <code class=\"language-inline-text\">useMemo</code></p>\n<h2 id=\"khi-nào-sử-dụng-usememo\"><a href=\"#khi-n%C3%A0o-s%E1%BB%AD-d%E1%BB%A5ng-usememo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khi nào sử dụng <code class=\"language-inline-text\">useMemo</code></h2>\n<blockquote>\n<p>Khi có những tính toán để lấy giá trị khá mất công, chúng ta lưu kết quả tính lại cho tiết kiệm thời gian tính toán.</p>\n</blockquote>\n<p>Đừng dùng lộn với <code class=\"language-inline-text\">React.memo</code> và <code class=\"language-inline-text\">useCallback</code>, chúng nó được dùng vào những mục đích rất khác nhau.</p>\n<h2 id=\"ví-dụ\"><a href=\"#v%C3%AD-d%E1%BB%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ví dụ</h2>\n<p>Ví dụ chúng ta có ứng dụng hiển thị danh sách user, với tính năng cho phép filter theo user name.</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Robin'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Dennis'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>text<span class=\"token punctuation\">,</span> setText<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>search<span class=\"token punctuation\">,</span> setSearch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleText</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSearch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setSearch</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n  <span class=\"token keyword\">const</span> filteredUsers <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Filter function is running ...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleText<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSearch<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Search\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n \n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span></span> <span class=\"token attr-name\">list</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>filteredUsers<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">List</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> list <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListItem</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">item</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ListItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> item <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chỉ khi điền giá trị vào input, sau đó click <code class=\"language-inline-text\">handleSearch</code> thì lúc giá trị của <code class=\"language-inline-text\">filteredUsers</code> mới có sự thay đổi, tuy nhiên vì <code class=\"language-inline-text\">filteredUsers</code> là một hàm nó sẽ luôn được rồi khi render, mỗi lần gõ một ký tự vào input, nó đã bị gọi lại, với giá trị trả về y như nhau.</p>\n<p>Tất nhiên ứng dụng nhỏ thì vấn đề ở đây ko quá nghiêm trọng. Còn nếu muốn tối ưu hơn, chúng ta lưu lại kết quả, và chỉ chạy lại hàm tính toán kết quả khi có một sự thay đổi nào đó.</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> filteredUsers <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    users<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Filter function is running ...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>search<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Hàm này chỉ <em>execute</em> khi giá trị <code class=\"language-inline-text\">search</code> thay đổi so với lần chạy trước đó.</p>\n<p>Bản chất bên trong React thực hiện một phép so sánh trên giá trị <code class=\"language-inline-text\">search</code> trước khi thực thi. Điều này có nghĩa là nếu chi phí cho việc so sánh này trong một số tình huống, đôi khi còn tốn nhiều thời gian hơn là việc gọi luôn mà ko cần so sánh. Nên các bạn có sử dụng cũng nên linh động, không nên quá cứng nhắc.</p>\n<p><a href=\"https://www.robinwieruch.de/react-usememo-hook?ck_subscriber_id=887772023\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to useMemo in React</a></p>\n","cover_image":""}},{"node":{"id":"c8924a626b9ca1dbf8b52197310df518","title":"Hướng dẫn chạy nhiều Node version khác nhau trên Windows","path":"/2020-10-09-huong-dan-chay-nhieu-node-version-khac-nhau/","date":"2020-10-09","timeToRead":1,"desc":"","content":"<p><strong>Tại sao lại có nhu cầu này</strong>?</p>\n<p>Ví dụ như source code mỗi project yêu cầu một node version khác nhau, và bắt buộc phải đúng version đó <em>mới chịu</em></p>\n<p><strong>Todo bạn cần làm</strong></p>\n<p>Gỡ bỏ Node đang sử dụng, và xóa hết các thư mục liên quan\n<code class=\"language-inline-text\">C:\\Users&lt;user>\\AppData\\Roaming\\npm</code></p>\n<p>Tải về và cài đặt <em>Node Version Manager</em></p>\n<ul>\n<li>Nếu dùng linux hay macOS: <a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nwm</a></li>\n<li>Nếu dùng Windows: <a href=\"https://github.com/coreybutler/nvm/releases\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NVM mới nhất</a></li>\n</ul>\n<p>Ví dụ bạn cần chạy Node version 10.18.0 và 12.16.1, chạy lệnh sau trọng PowerShell</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># installs the node version 10.19.0</span>\nnvm <span class=\"token function\">install</span> <span class=\"token number\">10.19</span>.0\n\n<span class=\"token comment\"># installs the node version 12.16.1</span>\nnvm <span class=\"token function\">install</span> <span class=\"token number\">12.16</span>.1</code></pre></div>\n<p>Để chỉ định version muốn dùng, chạy lệnh</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">nvm use <span class=\"token number\">12.16</span>.1\n// switch về <span class=\"token number\">10.19</span>.0\nnvm use <span class=\"token number\">10.19</span>.0</code></pre></div>\n<p>Lưu ý chạy bằng quyền admin nhé.</p>\n","cover_image":""}},{"node":{"id":"8e83520314b3de3abfec3b3790f57b44","title":"Định dạng số trong JavaScript","path":"/2020-09-14-format-number-trong-javascript/","date":"2020-09-14","timeToRead":1,"desc":"Cùng nghiên cứu xem Javascript hổ trợ sẵn những hàm nào để định dạng kiểu số trước khi nghĩ đến một thư viện thứ 3","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#numberprototypetolocalestring\">Number.prototype.toLocaleString()</a></li>\n<li><a href=\"#%C4%91%E1%BB%8Bnh-d%E1%BA%A1ng-ti%E1%BB%81n-t%E1%BB%87\">Định dạng tiền tệ</a></li>\n<li><a href=\"#ph%E1%BA%A7n-tr%C4%83m\">Phần trăm</a></li>\n<li><a href=\"#intlnumberformat\">Intl.NumberFormat</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"numberprototypetolocalestring\"><a href=\"#numberprototypetolocalestring\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Number.prototype.toLocaleString()</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> number <span class=\"token operator\">=</span> <span class=\"token number\">12345.6789</span>\n\n<span class=\"token comment\">// sẽ lấy local mặc định của trình duyệt</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 12,345.679 (en-US)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vi-VN'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 123.456,789</span></code></pre></div>\n<h2 id=\"định-dạng-tiền-tệ\"><a href=\"#%C4%91%E1%BB%8Bnh-d%E1%BA%A1ng-ti%E1%BB%81n-t%E1%BB%87\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Định dạng tiền tệ</h2>\n<p>Nếu muốn định dạng tiền tệ, bạn cần sử dụng thêm tham số thứ 2 của hàm <code class=\"language-inline-text\">toLocaleString</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token string\">'currency'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">currency</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>giá trị <span class=\"token constant\">ISO</span> <span class=\"token number\">4217</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// tham số bắt buộc, ko truyền lỗi</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tham khảo giá trị <a href=\"http://www.currency-iso.org/en/home/tables/table-a1.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ISO 3217</a></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> number <span class=\"token operator\">=</span> <span class=\"token number\">12345.6789</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n    number<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vi-VN'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token string\">'currency'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">currency</span><span class=\"token operator\">:</span> <span class=\"token string\">'VND'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 12.346 ₫</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  number<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ja-JP'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token string\">'currency'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">currency</span><span class=\"token operator\">:</span> <span class=\"token string\">'JPY'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ￥12,346</span></code></pre></div>\n<h2 id=\"phần-trăm\"><a href=\"#ph%E1%BA%A7n-tr%C4%83m\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phần trăm</h2>\n<p>Chuyển đồi thành đơn vị phần % ngoài việc nhân với 100, ns còn thêm 2 tùy chỉnh cũng vui là <code class=\"language-inline-text\">minimumFractionDigits</code> và <code class=\"language-inline-text\">maximumFractionDigits</code> (mặc định là 0 và 2 cho kiểu tiền tệ) để lấy số lượng ký tự muốn lấy</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0.1234</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  number<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'en-US'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token string\">'percent'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">minimumFractionDigits</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 12.34%</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  number<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'en-US'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token string\">'percent'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">minimumFractionDigits</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 12.3%</span></code></pre></div>\n<h2 id=\"intlnumberformat\"><a href=\"#intlnumberformat\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Intl.NumberFormat</h2>\n<p>Nếu hông ưu <code class=\"language-inline-text\">Number.prototype.toLocaleString()</code> có thể dùng constructor <code class=\"language-inline-text\">Intl.NumberFormat</code>. Nếu như thấy sao phải lăng tăng giữa 2 thằng này? Trong trường hợp bạn cần làm việc định dạng này tới lui nhiều lần cho cùng một locale, cùng một tùy chọn cố định, thì bạn nên dùng <code class=\"language-inline-text\">Intl.NumberFormat</code> cho chuẩn tốc độ.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> numberFormat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>NumberFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vi-VN'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token string\">'currency'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">currency</span><span class=\"token operator\">:</span> <span class=\"token string\">'VND'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numberFormat<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">12345.6789</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 12.346 ₫</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numberFormat<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">2345.67891</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2.346 ₫</span></code></pre></div>\n<p><a href=\"https://elijahmanor.com/blog/format-js-numbers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Natively Format JavaScript Numbers</a></p>\n<p>Happy coding 🎉🙌</p>\n","cover_image":""}},{"node":{"id":"584d255194aabcb163f6d4986ec1bd2e","title":"Thêm kiểm tra type trong Javascript với VS Code","path":"/2020-08-06-them-type-check-cho-javascript-voi-vscode/","date":"2020-08-06","timeToRead":2,"desc":"Bạn thấy rằng JavaScript đã đủ xài trong dự án, bạn không ưa thằng TypeScript và bạn đang sử dụng VS Code. Bài viết này là dành cho bạn rồi.","content":"<p>VS Code có một công cụ không thể tuyệt vời hơn cho các bạn viết JS một cách an toàn ko sợ sai type. Túm gọn chỉ bằng một comment thần thánh</p>\n<blockquote>\n<p>@ts-check</p>\n</blockquote>\n<p>Ví dụ, bạn muốn nghiêm cấm việc thay đổi type của một biến đã gán sẵn giá trị trước đó</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tất cả những gì bạn cần làm</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// @ts-check</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// indicates error</span></code></pre></div>\n<p>VS Code sẽ thông báo cho bạn một lỗi rất <em>dễ thương</em> như thế này</p>\n<blockquote>\n<p>Type <code class=\"language-inline-text\">false</code> is not assignable to type <code class=\"language-inline-text\">Number</code></p>\n</blockquote>\n<p>Một vài ví dụ sử dụng để bạn tham khảo</p>\n<h2 id=\"kiểm-tra-params-của-hàm\"><a href=\"#ki%E1%BB%83m-tra-params-c%E1%BB%A7a-h%C3%A0m\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kiểm tra params của hàm</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Code trên vẫn ko sai nhé, mặc dù chúng ta không hề khai báo param thứ 3. Thêm // @ts-check để thông báo khi <em>vô tình</em> truyền nhiều hơn số param cần thiết</p>\n<blockquote>\n<p>Expected 0-2 arguments but got 3</p>\n</blockquote>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// @ts-check</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// complains about the `3`</span></code></pre></div>\n<h2 id=\"kiểm-tra-object\"><a href=\"#ki%E1%BB%83m-tra-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kiểm tra Object</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// @ts-check</span>\n<span class=\"token keyword\">let</span> gameObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ngameObject<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Cái này nó sẽ không bắt lỗi, chúng ta vẫn được quyền thêm <code class=\"language-inline-text\">z</code> sau khi đã khai báo</p>\n<p>Vậy sao? Dùng JsDoc</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// @ts-check</span>\n\n<span class=\"token comment\">/** @type {{x: number, y: number, width: number, height: number, getArea: Function }} */</span>\n<span class=\"token keyword\">let</span> gameObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ngameObject<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"biến-không-bắt-buộc\"><a href=\"#bi%E1%BA%BFn-kh%C3%B4ng-b%E1%BA%AFt-bu%E1%BB%99c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Biến không bắt buộc</h2>\n<p>Chúng ta có một hàm mà giá trị param truyền vào không bắt buộc lúc nào cùng có</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config <span class=\"token operator\">&amp;&amp;</span> config<span class=\"token punctuation\">.</span>shouldRun<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// run</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">shouldRun</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chỗ này chúng ta cũng cần sự hỗ trợ của JsDoc như trường hợp trên</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// @ts-check</span>\n\n<span class=\"token comment\">/**\n * @param {{ shouldRun: boolean }} [config] - Somebody's name.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config <span class=\"token operator\">&amp;&amp;</span> config<span class=\"token punctuation\">.</span>shouldRun<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// run</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">canRun</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this now indicates an error</span>\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">shouldRun</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Với cách thiết đặt như vậy, chúng ta sẽ nhận được cảnh báo khi truyền vào một <code class=\"language-inline-text\">object</code> mà không có giá trị <code class=\"language-inline-text\">shouldRun</code></p>\n<h2 id=\"ngoại-lệ\"><a href=\"#ngo%E1%BA%A1i-l%E1%BB%87\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ngoại lệ</h2>\n<p>Nếu có trường hợp ngoại lệ nào đó bạn muốn bỏ qua việc kiểm tra tính <em>chuẩn mực</em> của type, dùng thần chú <code class=\"language-inline-text\">//@ts-ignore</code> hoặc <code class=\"language-inline-text\">//@ts-nocheck</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//@ts-ignore</span>\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">canRun</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sau nhiều năm chinh chiến, mình ngộ ra rằng TypeScript cũng tốt, nhưng nó không dành cho tất cả mọi người, tất cả dự án. Những cái kiểm tra nhỏ nhỏ như vậy đôi khi lại mang khác biệt đủ lớn khi bạn viết code.</p>\n<p><a href=\"https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem thêm kiểm tra type cho JS</a></p>\n<p><a href=\"https://dev.to/itnext/type-checking-your-javascript-with-vs-code-the-superpowers-you-didn-t-know-you-had-1jp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Type checking your JavaScript with VS Code - the superpowers you didn't know you had</a></p>\n","cover_image":""}},{"node":{"id":"576af49a62bfb2b0d1a0d01977480eef","title":"Sử dụng ellipsis text với flexbox","path":"/2020-07-22-su-dung-ellipsis-text-voi-flexbox/","date":"2020-07-22","timeToRead":1,"desc":"Câu chuyển cắt chuỗi khi quá dài bằng CSS, trong tình huống sau, cái tên file của bạn quá dài, nhưng bạn không muốn cắt ở cuối chuỗi, mà cắt ở giữa để vẫn thấy được file extension","content":"<p><img src=\"https://leonardofaria.net/wp-content/uploads/2020/07/finder.jpg\" alt=\"Finder\"></p>\n<p>Chuỗi chưa cắt</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mobile-phone-screenshot-long-fine-name.png</code></pre></div>\n<p>Chuỗi sau khi cắt</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mobile-phone-sc...g-fine-name.png</code></pre></div>\n<p><img src=\"https://leonardofaria.net/wp-content/uploads/2020/07/filename.gif\" alt=\"Finder\"></p>\n<p>Cái HTML structure dĩ nhiên là chúng ta tách cái đuôi file ra riêng, độc lập với cái tên</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>filename<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>filename__base<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>this-file-has-a-really-really-really-long-filename.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>filename__extension<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>pdf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>CSS:</p>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.filename</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.filename__base</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">text-overflow</span><span class=\"token punctuation\">:</span> ellipsis<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> nowrap<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.filename__extension</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">flex-shrink</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Việc ellipsis text sẽ được thực hiện bởi kết hợp ba thuộc tính <code class=\"language-inline-text\">text-overflow</code>, <code class=\"language-inline-text\">white-space</code> và <code class=\"language-inline-text\">overflow</code>. Tuy nhiên chúng ta vẫn phải ước lượng được mối liên hệ giữa phần chứa file name <code class=\"language-inline-text\">.filename__base</code> và element bọc bên ngoài (ở đây là <code class=\"language-inline-text\">.filename</code>)</p>\n<p>Thủ thuật quan trọng ở đây là dùng thuộc tính <strong><code class=\"language-inline-text\">min-width: 0</code></strong>, chúng ta đặt giá trị nhỏ nhất cho phép của <code class=\"language-inline-text\">.filename</code>, nó sẽ <em>ép</em> các thằng con bên dưới co lại nếu nó không có khai báo thuộc tính <code class=\"language-inline-text\">flex-shrink</code></p>\n<p><a href=\"https://codepen.io/leonardofaria/pen/rNxZJad\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo các bạn xem ở đây</a></p>\n<p><a href=\"https://leonardofaria.net/2020/07/18/using-flexbox-and-text-ellipsis-together/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using Flexbox and text ellipsis together</a></p>\n","cover_image":""}},{"node":{"id":"a0d62141942c6366d4d111bd124a5d3c","title":"Hiểm nguy rình rập khi dùng toán tử + trong javascript","path":"/2020-04-05-hiem-nguy-rinh-rap-khi-dung-toan-tu-cong-chuoi/","date":"2020-04-05","timeToRead":1,"desc":"Một toán tử phình phường có thể làm chúng ta điêu đứng","content":"<p>Như mọi thứ ngôn ngữ lập trình, ngôn ngữ toán học, Javascript dùng dấu <code class=\"language-inline-text\">+</code> để thực hiện cộng giá trị. Tuy nhiên, vì là Javascript, anh <em>có quyền</em> không đi theo quy chuẩn chung, anh còn được dùng cho việc <strong>nối chuỗi</strong></p>\n<p>Nếu chúng ta dùng nó cho việc cộng số</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> giaKhauTrangBinhThuong <span class=\"token operator\">=</span> <span class=\"token number\">35000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> doiGiaDichCovy <span class=\"token operator\">=</span> <span class=\"token number\">300000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> tienShip <span class=\"token operator\">=</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> chiPhiMuaHopKhauTrang <span class=\"token operator\">=</span> giaKhauTrangBinhThuong <span class=\"token operator\">*</span> doiGiaDichCovy <span class=\"token operator\">+</span> tienShip<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chúng ta dùng nó cho việc <strong>nối chuỗi</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ten <span class=\"token operator\">=</span> <span class=\"token string\">\"Tui là An\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> nenLamGi <span class=\"token operator\">=</span> <span class=\"token string\">\"Tui ở nhà cho Bình An\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> tuiLaAi <span class=\"token operator\">=</span> ten <span class=\"token operator\">+</span> <span class=\"token string\">' &amp; '</span> <span class=\"token operator\">+</span> nenLamGi<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chúng ta sẽ có câu \"Tui là An &#x26; Tui ở nhà cho Bình An\", mọi thứ hoạt động bình thường.</p>\n<p>Thí dụ bạn <strong>lỡ</strong> viết thế này thì sao</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> seRaSao <span class=\"token operator\">=</span> <span class=\"token number\">9</span> <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Khi có 2 giá trị khác kiểu, nó sẽ ưu tiên kiểu giá trị mạnh hơn, là kiếu <code class=\"language-inline-text\">string</code> nên kết quả chúng ta nhận là \"91\" chữ không phải <code class=\"language-inline-text\">10</code></p>\n<p>Điều đúc kết ở đây là gì, hễ chúng ta muốn cộng 2 con số lại, chuyển nó về giá trị số <code class=\"language-inline-text\">Number(ten_bien)</code> trước cho chắc.</p>\n","cover_image":""}},{"node":{"id":"8ef635ee472380b1e51c95dd48658af0","title":"Nên dùng gì thay cho input number","path":"/2020-03-27-nen-dung-gi-thay-cho-input-number/","date":"2020-03-27","timeToRead":1,"desc":"Ngoài input type number, còn những giá trị gì bạn nên cân nhắc sử dụng","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#tel\">tel</a></li>\n<li><a href=\"#decimal\">decimal</a></li>\n<li><a href=\"#email\">Email</a></li>\n<li><a href=\"#url\">Url</a></li>\n<li><a href=\"#search\">Search</a></li>\n</ul>\n<!-- /TOC -->\n<p>Có thể bạn sẽ nghĩ ngay đến <code class=\"language-inline-text\">&lt;input type='number' /></code> khi muốn cho user nhập số. Tuy nhiên <em>đời không như là mơ</em>, nó có kha khá vấn đề, đôi khi có những giá trị nhìn thì như <em>số</em>, nhưng không phải (như credit card), hoặc một dạng chuỗi số.</p>\n<p>Trên Gov.uk họ dùng kiểu này</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">inputmode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>numeric<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">pattern</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[0-9]*<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>Thuộc tính <code class=\"language-inline-text\">inputmode</code> cũng khá hay ho, được đề cập rất cũ thể <a href=\"https://css-tricks.com/everything-you-ever-wanted-to-know-about-inputmode/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ở đây</a></p>\n<p>Tóm tắt lại cho bạn nào lười đọc</p>\n<h3 id=\"tel\"><a href=\"#tel\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>tel</h3>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">inputmode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tel<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<h3 id=\"decimal\"><a href=\"#decimal\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>decimal</h3>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">inputmode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>decimal<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/05/inputmode-03.png?ssl=1\"></p>\n<h3 id=\"email\"><a href=\"#email\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Email</h3>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">inputmode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p><img src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2019/05/inputmode-04.png?ssl=1\"></p>\n<h3 id=\"url\"><a href=\"#url\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Url</h3>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">inputmode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p><img src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2019/05/inputmode-05.png?ssl=1\"></p>\n<h3 id=\"search\"><a href=\"#search\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Search</h3>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">inputmode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/05/inputmode-06a.png?ssl=1\"></p>\n<p>Hoặc để nhập vào mã code xác thực, Twilio sử dụng định dạng này</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n  <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>token<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>token<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">inputmode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>numeric<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">pattern</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[0-9]*<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">autocomplete</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>one-time-code<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>Với <code class=\"language-inline-text\">autocomplete=\"one-time-code\"</code> chúng ta sẽ có được <em>tính năng</em> tự điền như thế này</p>\n<p><img src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/03/two-factor-input.png\" alt=\"iOS screen with a numeric input and a text message offering to auto-fill the two-factor auth\"></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#Values\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem danh sách autocomplete đầy đủ</a></p>\n<p><a href=\"https://css-tricks.com/what-to-use-instead-of-number-inputs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">What to Use Instead of Number Inputs</a></p>\n","cover_image":""}},{"node":{"id":"36b1ec934cd2381cf5f940e61280b2b6","title":"Vấn đề của React Context trên các xử lý async","path":"/2020-03-16-van-de-cua-react-context-tren-async/","date":"2020-03-16","timeToRead":7,"desc":"React Context có phải là viên đạn bạc sẽ giải quyết mọi vấn đề thay cho Redux hay không?","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#ch%C3%BAng-ta-b%E1%BA%AFt-%C4%91%E1%BA%A7u-v%E1%BB%9Bi-m%E1%BB%99t-component-duy-nh%E1%BA%A5t\">Chúng ta bắt đầu với một component duy nhất</a></li>\n<li><a href=\"#l%E1%BA%A5y-d%E1%BB%AF-li%E1%BB%87u-sau-khi-c%C3%B3-t%C6%B0%C6%A1ng-t%C3%A1c\">Lấy dữ liệu sau khi có tương tác</a></li>\n<li><a href=\"#%C4%91%C3%A2u-l%C3%A0-gi%E1%BA%A3i-ph%C3%A1p\">Đâu là giải pháp</a></li>\n</ul>\n<!-- /TOC -->\n<p>Để chia sẻ <code class=\"language-inline-text\">state</code> giữa các component, React cung cấp API Context, <em>với lời hứa ngon ngọt</em> mà bạn có thể dễ dàng đọc được trên mạng \"có thể thay thế redux\". Từ kinh nghiệm thực tế của team Atlassian cũng như của bản thân mình (là tui luckyluu), sử dụng nó trên các module lớn, hoặc trên toàn bộ App (gốc trên cùng của cây React) là một cơn <strong>ác mộng</strong> trường kỳ.</p>\n<h2 id=\"chúng-ta-bắt-đầu-với-một-component-duy-nhất\"><a href=\"#ch%C3%BAng-ta-b%E1%BA%AFt-%C4%91%E1%BA%A7u-v%E1%BB%9Bi-m%E1%BB%99t-component-duy-nh%E1%BA%A5t\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chúng ta bắt đầu với một component duy nhất</h2>\n<p>Lấy ví dụ, chúng tạo ra một component Dropdown hiển thị danh sách categories</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CategoriesQuery</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/categories'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// sử dụng</span>\n<span class=\"token keyword\">const</span> CategoriesDropdown <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoriesQuery</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    ({ data, loading, error }) => </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CategoriesQuery</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Khá sạch đẹp, đúng không? Lúc component được <em>mount</em> vào DOM chúng ta <em>fetch</em> dữ liệu, đặt giá trị cho state loading.</p>\n<p>Tình huống hay gặp là chúng ta có nhu cầu sử dụng danh sách categories này trên một component nào đó khác. Việc cứ phải <em>wrap</em> component lại dạng cha con, rồi truyền danh sách categories thông qua <code class=\"language-inline-text\">props</code> không phải là <em>lựa chọn khôn ngoan</em>, chúng ta cần lưu nó ở một nơi tập trung (store) và truy xuất ở bất kỳ đâu, chúng ta có thể sử dụng <code class=\"language-inline-text\">createContext</code>. Việc chuyển qua dùng <code class=\"language-inline-text\">createContext</code> dễ như ăn bún</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Provider<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">Consumer</span><span class=\"token operator\">:</span> CategoriesConsumer <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CategoriesProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/categories'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// sử dụng</span>\n<span class=\"token keyword\">const</span> CategoriesDropdown <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoriesConsumer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    ({ data, loading, error }) => </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CategoriesConsumer</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Chúng ta <strong>\"chỉ\"</strong> còn lại 2 vấn đề: đặt <code class=\"language-inline-text\">&lt;CategoriesProvider/></code> ở đâu và chuyện gì sẽ xảy ra nếu Provider vì lý do nào đó không thể là <em>cha chú</em> của một component consumer?</p>\n<p>Xử lý các vấn đề phức tạp xung quanh việc viết context thế nào cho hợp lý, fallback ra làm sao sẽ cần đến một bài viết dài dòng khắc, giờ cứ tưởng tượng bạn luôn cần Provider render \"ở đâu đó\" (nhiều khi là cùng với cả tá provider khác nữa khi bạn cứ wrap thằng này trong thằng kia liên tục).</p>\n<h2 id=\"lấy-dữ-liệu-sau-khi-có-tương-tác\"><a href=\"#l%E1%BA%A5y-d%E1%BB%AF-li%E1%BB%87u-sau-khi-c%C3%B3-t%C6%B0%C6%A1ng-t%C3%A1c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lấy dữ liệu sau khi có tương tác</h2>\n<p>Đoạn code fetch dữ liệu lúc mount component ở trên trông rất hợp lý, nhưng sẽ có tình huống bạn cần trigger <code class=\"language-inline-text\">fetch</code> không phải lúc mount.</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Node A\n    - Node B\n        - Node C</code></pre></div>\n<p>Nếu đặt tình huống bạn fetch dữ liệu categories ở <code class=\"language-inline-text\">&lt;Node A /></code>, được <code class=\"language-inline-text\">&lt;Node C/></code> hiển thị, nhưng user lúc sử dụng đôi khi chả bao giờ thấy đến <code class=\"language-inline-text\">&lt;Node C/></code>, họ có thể dừng lại ở màn hình <code class=\"language-inline-text\">&lt;Node A /></code>, việc bắt trình duyệt đi lấy dữ liệu quá sớm <em>không phải là một chuyện nên làm</em>. Do đó chúng ta sẽ có nhu cầu trả về hàm lấy dữ liệu trực tiếp xuống <code class=\"language-inline-text\">context</code>:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">fetch</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fetch <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>ĐỪNG BAO GIỜ LÀM NHƯ VẬY</strong>. Bạn có thấy được con bug <strong>\"ngầm\"</strong> trong cách viết trên không? Mỗi lần <code class=\"language-inline-text\">CategoriesProvider</code> re-render, chúng ta truyền xuống một giá trị hoàn toàn mới cho <code class=\"language-inline-text\">value</code> - <em>một object được khởi tạo mới tinh</em>. Tạo ra một object rồi truyền xuống thành <code class=\"language-inline-text\">props</code> là <strong>lỗi căn bản</strong> cần tránh, tuy nhiên khi dùng cho Context Provider nó đặc biệt trầm trọng. Khi để ý thấy lỗi này, chúng tôi đã theo sự chỉ dẫn từ tài liệu của <a href=\"https://reactjs.org/docs/context.html#caveats\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Context guidelines</a>, lưu phương thức đó vào state</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CategoriesProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">fetch</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fetch\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sau đó trong component consumer, chúng ta sẽ fetch dữ liệu categories khi thằng component consumer thực sự render</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">CategoriesQuery</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>CategoriesContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>context<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>context<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">children</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Xong! <strong>Chưa thật sự xong đâu</strong>, khi thêm <code class=\"language-inline-text\">&lt;CategoriesQuery/></code> ở 2 nơi khác nhau trên cây, nếu 2 component được mount cùng một lúc, <code class=\"language-inline-text\">fetch</code> sẽ chạy <strong>2 lần</strong>.</p>\n<p><em>Bug nhỏ thôi mà đúng không?</em> Chúng ta không kiểm tra state <code class=\"language-inline-text\">loading</code> trước khi gọi <code class=\"language-inline-text\">fetch</code>. Sửa nhanh trong Provider:</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// class CategoriesProvider...</span>\n<span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Thử refresh lại trang, với 2 <code class=\"language-inline-text\">CategoriesQuery</code> mount và... <strong>BÙM</strong> Vẫn là 2 request network. Kiểm tra lại lần nữa nào, có gì đó lỗi rồi, không lỗi nữa, lại lỗi nữa, ....</p>\n<p>....</p>\n<p>lại lỗi\n....</p>\n<p>còn lỗi\n....</p>\n<p>chưa hết lỗi\n....</p>\n<p>Rồi bỗng dưng chúng ta nhận ra React <code class=\"language-inline-text\">setState</code> là một <code class=\"language-inline-text\">async</code>. Có nghĩa là việc giá trị <code class=\"language-inline-text\">loading</code> vẫn là <code class=\"language-inline-text\">false</code> trong cả 2 lần gọi thậm chí <code class=\"language-inline-text\">setState</code> đã được gọi một lần. \"Shitty React\" (React như c*t)</p>\n<p>Bắt đầu tìm kiếm một cách làm \"less shitty\" (bớt nhảm shit) với chuyện <code class=\"language-inline-text\">setState</code> async trong Context Provider (có 4 năm cách làm tùy theo độ <em>sáng tạo</em>), nhưng có thể đảm bảo rằng không có cách nào <em>thập toàn thập mỹ</em>. Luôn cảm thấy chúng ta đang <strong>chống lại cách làm chính quy từ React</strong>.</p>\n<h2 id=\"đâu-là-giải-pháp\"><a href=\"#%C4%91%C3%A2u-l%C3%A0-gi%E1%BA%A3i-ph%C3%A1p\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đâu là giải pháp</h2>\n<p>Context API có rất nhiều điểm cộng ngay cả khi so sánh với Redux, cái chúng ta cần là một cách vẹn toàn cả cho cả 2.</p>\n<p>Mình cũng gặp vấn đề y chang như vậy với ứng dụng đang làm. Tìm kiếm và cuối cùng chốt hạ dùng <a href=\"https://atlassian.github.io/react-sweet-state/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-sweet-state</a> cho cả team</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore<span class=\"token punctuation\">,</span> createHook <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-sweet-state\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// giá trị khởi tạo</span>\n<span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// define the actions that mutate the state</span>\n<span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">fetch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> getState<span class=\"token punctuation\">,</span> setState <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/categories\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// tạo store</span>\n<span class=\"token keyword\">const</span> CategoriesStore <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> initialState<span class=\"token punctuation\">,</span> actions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// tạo components để truy cập dữ liệu từ store</span>\n<span class=\"token keyword\">const</span> useCategories <span class=\"token operator\">=</span> <span class=\"token function\">createHook</span><span class=\"token punctuation\">(</span>CategoriesStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// sử dụng</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">CategoriesQuery</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> actions<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useCategories</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> actions<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> actions<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">children</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Có nhiều điểm cộng cho <a href=\"https://atlassian.github.io/react-sweet-state/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-sweet-state</a> như nó vẫn dùng Context API, nhưng an toàn hơn, các action sẽ dễ test hơn, làm việc được với Redux DevTools, đã xử lý những lỗi vẫn hay gặp với React Context. Và nhiều điều hay ho khác nữa. Các bạn nhớ like cho repo này trên github.</p>\n<p>Một số dẫn chứng khác để bạn tham khảo</p>\n<ul>\n<li><a href=\"https://twitter.com/dan_abramov/status/1109595839347990528\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Context <strong>Không được thiết kế cho dữ liệu thường xuyên cập nhập</strong></a></li>\n<li><a href=\"https://github.com/facebook/react/issues/13739\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>Hạn chế hiệu năng</strong> của React Context</a></li>\n<li><a href=\"https://github.com/facebook/react/issues/14110\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Context <strong>Không hỗ trợ selector</strong></a></li>\n<li><a href=\"https://github.com/facebook/react/issues/15156\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Context <strong>Không thể ngăn chặn việc re-render</strong></a></li>\n</ul>\n<p><a href=\"https://medium.com/@albertogasparin/the-pitfalls-of-async-operations-via-react-context-api-ab987d4290e6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The pitfalls of async operations via React Context API</a></p>\n","cover_image":""}},{"node":{"id":"c1ca8e342319f71c16520e0aa7d41aad","title":"Thủ thuật sử dụng đơn vị viewport trên mobile","path":"/2020-03-12-thu-thuat-su-dung-don-vi-viewport-tren-mobile/","date":"2020-03-12","timeToRead":2,"desc":"Để có thể quản lý được state của ứng dụng một cách tốt nhất, chúng ta cần sự phân chia phù hợp giữa local state (internal state của component) và state cửa ứng dụng đặt trong React Context. Một vài điều muốn chia sẽ để nâng cao khả năng bảo trì và trải nghiệm nếu sử dụng đến context trong React.","content":"<p>Đơn vị viewport trong css (<code class=\"language-inline-text\">vh</code>, <code class=\"language-inline-text\">vw</code>) không phải lúc nào cũng chạy đúng trên mọi trình duyệt điện thoại. Giống như chưa đủ khổ cho dev nên mỗi trình duyệt mobile lại có cách xử lý riêng cho đơn vị này.</p>\n<p>Cách mà <a href=\"https://www.w3.org/TR/css-values-3/#viewport-relative-lengths\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">w3 định nghĩa</a> cách tính đơn vị này. Với mobile cái chúng ta quan tâm nhiều nhất là đơn vị <code class=\"language-inline-text\">vh</code></p>\n<blockquote>\n<p>1vh = 1% độ cao khởi tạo của khu vực trình duyệt dùng để hiển thị trang web.</p>\n</blockquote>\n<p>Nghĩa là giá trị này không bao gồm các phần khác của trình duyệt, như thanh address, thanh bookmark (<strong>nếu có</strong>), tab bar, ... và những thứ linh tinh khác mà user có thể add thêm vào trình duyệt của họ.</p>\n<p>Nhưng khi bạn bắt đầu scroll trên điện thoại, câu chuyện trở nên phức tạp hơn, thanh address bar sẽ biến mất, giá trị của <code class=\"language-inline-text\">vh</code> cần phải cập nhập lại, hiện tượng <em>cà khịa</em> xuất hiện trên màn hình.</p>\n<p>Trình duyệt Safari trên iOS là người tiên phong sử dụng luôn một giá trị cố định đúng với kích thước màn hình (không phải kích thước khung hiển thị của trình duyệt). Chrome mobile cũng bắt đầu áp dụng cách này để chặn việc nội dung trang nhảy lung tung.</p>\n<p>Điều này có ý nghĩa như thế nào? Nghĩa là khi bạn đặt giá trị <code class=\"language-inline-text\">100vh</code> nó sẽ vượt ra ngoài, user sẽ phải scroll trên trình duyệt để xem hết.</p>\n<p><img src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2018/07/viewport-units-mobile-crop.jpg?ssl=1\"></p>\n<p>Để khắc phục nhược điểm này. Chúng ta không thể trông cậy vào css, phải dùng đến javascript túm lấy độ cao <code class=\"language-inline-text\">window.innerHeight</code>, lưu giá trị đó lại thành một biến CSS và sử dụng nó thay cho đơn vị <code class=\"language-inline-text\">vh</code></p>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.my-element</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* fallback khi trình duyệt không hỗ trợ biến css */</span>\n  <span class=\"token comment\">/* cái này chỉ có trên webkit */</span>\n  <span class=\"token property\">min-height</span><span class=\"token punctuation\">:</span> -webkit-fill-available<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--vh<span class=\"token punctuation\">,</span> 1vh<span class=\"token punctuation\">)</span> * 100<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Chúng ta sẽ <em>túm lấy</em> và định nghĩa <code class=\"language-inline-text\">--vh</code> bằng javascript</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Trước tiên lấy viewport height và chuyển thành giá trị 1%</span>\n<span class=\"token keyword\">let</span> vh <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>innerHeight <span class=\"token operator\">*</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Đặt biến css</span>\ndocument<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--vh\"</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>vh<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Còn một vấn đề nhỏ còn lại cần phải xử lý là cập nhập lại giá trị này khi trình duyệt thay đổi kích thước (xoay trái, xoay phải, xoay ngang, xoay dọc)</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// chạy lại khi window resize</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resize\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// làm tương tự 2 bước đã làm</span>\n  <span class=\"token keyword\">let</span> vh <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>innerHeight <span class=\"token operator\">*</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--vh\"</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>vh<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The trick to viewport units on mobile</a></p>\n","cover_image":""}},{"node":{"id":"05464840886f0ff47c5676cff5196c48","title":"Sử dụng React Context như thế nào cho hiệu quả","path":"/2020-03-08-huong-dan-su-dung-react-context-nhu-the-nao-cho-hieu-qua/","date":"2020-03-08","timeToRead":10,"desc":"Để có thể quản lý được state của ứng dụng một cách tốt nhất, chúng ta cần sự phân chia phù hợp giữa local state (internal state của component) và state cửa ứng dụng đặt trong React Context. Một vài điều muốn chia sẽ để nâng cao khả năng bảo trì và trải nghiệm nếu sử dụng đến context trong React.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#provider-component\">Provider Component</a></li>\n<li><a href=\"#consumer-hook\">Consumer Hook</a></li>\n<li><a href=\"#typescript--flow\">TypeScript / Flow</a></li>\n<li><a href=\"#v%E1%BA%ADy-c%C3%B2n-dispatch-type\">Vậy còn dispatch <code class=\"language-inline-text\">type</code>?</a></li>\n<li><a href=\"#v%E1%BA%ADy-c%C3%B2n-c%C3%A1c-async-action-th%C3%AC-sao-\">Vậy còn các async action thì sao ?</a></li>\n<li><a href=\"#c%E1%BA%A3m-th%E1%BA%A5y-t%C3%A1ch-state-v%C3%A0-dispatch-r%E1%BA%A5t-kh%C3%B3-ch%E1%BB%8Bu\">Cảm thấy tách state và dispatch rất khó chịu</a></li>\n<li><a href=\"#to%C3%A0n-b%E1%BB%99-source-code\">Toàn bộ source code</a></li>\n</ul>\n<!-- /TOC -->\n<p>Chúng ta có một <em>module</em> (một nhánh trên cây react component cho dể hình dung) muốn sử dụng Context là <code class=\"language-inline-text\">count</code>, chúng ta tạo file <code class=\"language-inline-text\">count-context.js</code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/count-context.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> CountStateContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> CountDispatchContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Điều muốn nói đầu tiên là chúng ta cố tình <strong>không khai báo giá trị khởi tạo</strong> cho <code class=\"language-inline-text\">CountStateContext</code>, nếu muốn bạn có thể gọi <code class=\"language-inline-text\">React.createContext({count: 0})</code>. Khai báo một <code class=\"language-inline-text\">defaultValue</code> chỉ hữu dụng trong trường hợp như bên dưới</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">CountDisplay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> count <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>CountStateContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Vì không khai báo giá trị khởi tạo, chúng ta sẽ nhận lỗi khi viết destructure giá trị trả về từ <code class=\"language-inline-text\">useContext</code>. Vì giá trị mặc định là <code class=\"language-inline-text\">undefined</code> và chúng ta không thể destructure <code class=\"language-inline-text\">undefined</code></p>\n<p>Không ai trong chúng ta muốn nhận lỗi do không có giá trị khởi tạo. Tuy nhiên, nếu chỉ sử dụng giá trị mặc định được cung cấp, lợi ích sẽ không nhiều bằng việc linh động giá trị này. Kinh nghiệm thực tế cho thấy khi khởi tạo và sử dụng context trong ứng dụng, chúng ta muốn các consumer context (component sử dụng <code class=\"language-inline-text\">useContext</code>) có thể cung cấp thêm các giá trị mới.</p>\n<p><em>Trong tài liệu chính thức của React có đề cập, \"cung cấp giá trị mặc định có thế giúp việc test component độc lập mà không cần bộc chúng lại (component lồng vào nhau)\". Không cùng quan điểm với ý kiến này, cá nhân tác giả (Kent C. Dodds) cho rằng tốt hơn nên bộc component với các context cần thiết khi test. Hãy nhớ là mỗi lần chúng ta làm gì đó bên trong test, chúng ta không làm những việc như vậy trong ứng dụng, chúng ta giảm bớt sự tự tin mà unit test mang lại.</em></p>\n<blockquote>\n<p>Lưu ý: nếu đang sử dụng Flow hay TypeScript, không cung cấp giá trị mặc định sẽ bị nhận ngay thẻ \"cảnh cáo\", rất phiền toái nếu sử dụng <code class=\"language-inline-text\">React.useContext</code>. Đọc tiếp phần dưới sẽ chỉ cách khắc phục</p>\n</blockquote>\n<p>Mục đích của <code class=\"language-inline-text\">CountDispatchContext</code> là để làm gì. Mình đã sử dụng context trong một thời gian, và nói chuyện với một số người đang làm việc với nó, có thể chia sẻ với bạn là đây là <strong>cách đơn giản nhất</strong> để tránh các rắc rối với context (đặc biệt khi bạn bắt đầu sử dụng <code class=\"language-inline-text\">dispatch</code> trong effect) khi bạn bắt đầu tách state và dispatch trong context. <strong>Hãy tin mình!</strong></p>\n<h2 id=\"provider-component\"><a href=\"#provider-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Provider Component</h2>\n<p>Để các component bên dưới có thể sử dụng context module, chúng ta phải <em>bộc</em> các component lại về trong cùng một context, sử dụng với Provider Component, cái này thì ai cũng biết</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountDisplay</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountProvider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-inline-text\">CountProvider</code> được đưa ra để xài như thế nào cho hiệu quả thì lại ích ai quan tâm, đây là cách mà <code class=\"language-inline-text\">CountProvider</code> được đưa ra cho thế giới</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/count-context.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> CountStateContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> CountDispatchContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">countReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"increment\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"decrement\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Unhandled action type: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>action<span class=\"token punctuation\">.</span>type<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">CountProvider</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>countReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountStateContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountDispatchContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>dispatch<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountDispatchContext.Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountStateContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> CountProvider <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"consumer-hook\"><a href=\"#consumer-hook\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Consumer Hook</h2>\n<p>Các thư viện sử dụng context tìm thấy trên mạng đa phần sẽ dùng cách này</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SomethingContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"some-context-package\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> something <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>SomethingContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Để nâng cao trải nghiệm khi chúng ta sử dụng, câu lệnh này <code class=\"language-inline-text\">React.useContext(SomethingContext)</code> cần phải thay thế. Nếu có thể viết như thế này, sẽ tuyệt vời hơn rất nhiều</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useSomething <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"some-context-package\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> something <span class=\"token operator\">=</span> <span class=\"token function\">useSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Để có thể dùng <code class=\"language-inline-text\">useSomething()</code> như bên trên, chúng ta sẽ cần viết lại context như sau</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/count-context.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> CountStateContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> CountDispatchContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">countReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"increment\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"decrement\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Unhandled action type: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>action<span class=\"token punctuation\">.</span>type<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">CountProvider</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>countReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountStateContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountDispatchContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>dispatch<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountDispatchContext.Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountStateContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useCountState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>CountStateContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"useCountState must be used within a CountProvider\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useCountDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>CountDispatchContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"useCountDispatch must be used within a CountProvider\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> CountProvider<span class=\"token punctuation\">,</span> useCountState<span class=\"token punctuation\">,</span> useCountDispatch <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chúng ta tạo <code class=\"language-inline-text\">useCountState</code> và <code class=\"language-inline-text\">useCountDispatch</code> hook sử dụng <code class=\"language-inline-text\">React.useContext</code> để lấy được giá trị context cung cấp từ <code class=\"language-inline-text\">CountProvider</code>. Tuy nhiên, nếu không có giá trị, chúng ta hiển thị thông báo lỗi để báo hook chỉ được sử dụng trong function component được render bên trong <code class=\"language-inline-text\">CountProvider</code>. Lỗi này rất hay quên, nên nhắc trước cho tốt.</p>\n<p>Nếu cần sử dụng với React &#x3C; 16.8.0, chúng ta dùng render-prop với Consumer Component như sau</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">CountConsumer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountStateContext.Consumer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token parameter\">context</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CountConsumer must be used within a CountProvider\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">children</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountStateContext.Consumer</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Nếu bạn đã dùng React cũ, hoặc là nâng cấp mới nhất, hoặc giữ nguyên tình trạng hiện tại cho an toàn?</strong></p>\n<h2 id=\"typescript--flow\"><a href=\"#typescript--flow\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>TypeScript / Flow</h2>\n<p>Như đã hứa ở trên, với vấn đề <code class=\"language-inline-text\">defaultValue</code> khi sử dụng TypeScript và Flow. Giải quyết như sau</p>\n<div class=\"gridsome-highlight has-highlighted-lines\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// src/count-context.tsx</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Action</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'decrement'</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Dispatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>action<span class=\"token operator\">:</span> Action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">State</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">CountProviderProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>children<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">}</span>\n\n<span class=\"gridsome-highlight-code-line\"><span class=\"token keyword\">const</span> CountStateContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">createContext</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>State<span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span></span><span class=\"gridsome-highlight-code-line\"><span class=\"token keyword\">const</span> CountDispatchContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Dispatch <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span></span><span class=\"gridsome-highlight-code-line\"><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span></span><span class=\"gridsome-highlight-code-line\"><span class=\"token punctuation\">)</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">countReducer</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span> action<span class=\"token operator\">:</span> Action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'increment'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'decrement'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Unhandled action type: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>action<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">CountProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> CountProviderProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>countReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountStateContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountDispatchContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>dispatch<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountDispatchContext.Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountStateContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gridsome-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useCountState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gridsome-highlight-code-line\">  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>CountStateContext<span class=\"token punctuation\">)</span></span><span class=\"gridsome-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gridsome-highlight-code-line\">    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'useCountState must be used within a CountProvider'</span><span class=\"token punctuation\">)</span></span><span class=\"gridsome-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>  <span class=\"token keyword\">return</span> context\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gridsome-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useCountDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gridsome-highlight-code-line\">  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>CountDispatchContext<span class=\"token punctuation\">)</span></span><span class=\"gridsome-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gridsome-highlight-code-line\">    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'useCountDispatch must be used within a CountProvider'</span><span class=\"token punctuation\">)</span></span><span class=\"gridsome-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>  <span class=\"token keyword\">return</span> context\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>CountProvider<span class=\"token punctuation\">,</span> useCountState<span class=\"token punctuation\">,</span> useCountDispatch<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Với cách viết này, ai cũng có thể sử dụng <code class=\"language-inline-text\">useCountState</code> hoặc <code class=\"language-inline-text\">useCountDispatch</code> mà không cần kiểm tra <code class=\"language-inline-text\">undefined</code></p>\n<p><a href=\"https://codesandbox.io/s/bitter-night-i5mhj\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem CodeSandbox</a></p>\n<h2 id=\"vậy-còn-dispatch-type\"><a href=\"#v%E1%BA%ADy-c%C3%B2n-dispatch-type\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vậy còn dispatch <code class=\"language-inline-text\">type</code>?</h2>\n<p>Nếu bạn từng viết Redux, sẽ thắc mắc \"vậy action creator đâu?\". Nếu <em>thích</em> bạn có thể tự viết nếu muốn. Nhưng mình không phải là <em>fan</em> của action creator (cô thư ký xinh đẹp trong <a href=\"https://luubinhan.github.io/blog/2019-05-28-giai-thich-pattern-flux-trong-react/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bài giải thích về Flux Pattern của mình</a>. Mình luôn cảm thấy em này khá dư thừa, không cần thiết phải phức tạp thêm một tổ chức đã quá phức tạp như Flux (<strong>hoàn hảo không phải là không còn gì để thêm nữa mà là ko còn gì có thể bỏ đi mà</strong>). Nếu sử dụng TypeScript hoặc Flow, nó sẽ giúp chúng ta tự điền action type có thể điền</p>\n<p><img src=\"https://kentcdodds.com/static/d99d4329b1d7ebd2e63bf76471f540ab/e3189/auto-complete.png\" alt=\"Sử dụng React Context như thế nào cho hiệu quả\"></p>\n<p><img src=\"https://kentcdodds.com/static/0d45ecb53470729181863636bdafc2b9/e3189/type-error.png\" alt=\"Sử dụng React Context như thế nào cho hiệu quả\"></p>\n<p>Mình thích kiểu gọi <code class=\"language-inline-text\">dispatch</code> như thế này, nếu để ý bạn sẽ biết <code class=\"language-inline-text\">dispatch</code> sẽ không thay đổi trong suốt quá trình tồn tại của component, nghĩa là bạn có thể truyền nó vào mảng phụ thuộc của <code class=\"language-inline-text\">useEffect</code> vô tư.</p>\n<h2 id=\"vậy-còn-các-async-action-thì-sao-\"><a href=\"#v%E1%BA%ADy-c%C3%B2n-c%C3%A1c-async-action-th%C3%AC-sao-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vậy còn các async action thì sao ?</h2>\n<p>Một câu hỏi hay, bạn gặp tình huống cần xử lý là một async (thao tác bất đồng bộ như network request) và bạn cần dispatch nhiều action cùng lúc, dispatch một action nào đó phụ thuộc vào kết quả từ dispatch trước đó? Bạn có thể làm điều đó trong component, tuy nhiên <em>xử lý thủ công</em> như thế trên từng component rất là phiền.</p>\n<p>Mình đề nghị tạo một helper function trong context module, nhận <code class=\"language-inline-text\">dispatch</code> và tất cả những dữ liệu bạn cần, helper function (AKA middleware) này sẽ chịu trách nhiệm xử lý tất cả những việc đã nêu trên (theo kiểu state machine)</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// user-context.js</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> updates</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"start update\"</span><span class=\"token punctuation\">,</span> updates <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> updatedUser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> userClient<span class=\"token punctuation\">.</span><span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> updates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"finish update\"</span><span class=\"token punctuation\">,</span> updatedUser <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fail update\"</span><span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> UserProvider<span class=\"token punctuation\">,</span> useUserDispatch<span class=\"token punctuation\">,</span> useUserState<span class=\"token punctuation\">,</span> updateUser <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sử dụng nó sẽ như thế này</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// user-profile.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useUserState<span class=\"token punctuation\">,</span> useUserDispatch<span class=\"token punctuation\">,</span> updateUser <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./user-context\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">UserSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useUserState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> userDispatch <span class=\"token operator\">=</span> <span class=\"token function\">useUserDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span>userDispatch<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> formState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"cảm-thấy-tách-state-và-dispatch-rất-khó-chịu\"><a href=\"#c%E1%BA%A3m-th%E1%BA%A5y-t%C3%A1ch-state-v%C3%A0-dispatch-r%E1%BA%A5t-kh%C3%B3-ch%E1%BB%8Bu\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cảm thấy tách state và dispatch rất khó chịu</h2>\n<p>Nhiều người phàn nàn tách state và dispatch riêng rất khó chịu</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">useCountState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useCountDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tại sao không <em>đơn giản</em> là làm thế này</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tất nhiên bạn có thể</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">useCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token function\">useCountState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">useCountDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cái này tùy cách nhìn nhận của từng người viết, không có chuyện ai đúng ai sai, chỉ là bạn cảm thấy <em>thoải mái</em>, <em>vui</em> hơn với cách viết nào thôi.</p>\n<h2 id=\"toàn-bộ-source-code\"><a href=\"#to%C3%A0n-b%E1%BB%99-source-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Toàn bộ source code</h2>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/count-context.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> CountStateContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> CountDispatchContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">countReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"increment\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"decrement\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Unhandled action type: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>action<span class=\"token punctuation\">.</span>type<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">CountProvider</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>countReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountStateContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountDispatchContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>dispatch<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountDispatchContext.Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountStateContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useCountState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>CountStateContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"useCountState must be used within a CountProvider\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useCountDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>CountDispatchContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"useCountDispatch must be used within a CountProvider\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> CountProvider<span class=\"token punctuation\">,</span> useCountState<span class=\"token punctuation\">,</span> useCountDispatch <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ở đây, mình đang cố tính không <code class=\"language-inline-text\">export CountContext</code>, chúng ta chỉ cung cấp một cách để cung cấp giá trị trong context và một cách để lấy về giá trị này. Việc này đảm bảo người sử dụng giá trị context đúng theo cái cách chúng ta muốn, cho phép chúng ta hạn chế một số code không cần thiết khi lúc nào cũng phải khai báo <code class=\"language-inline-text\">useContext</code> nào.</p>\n<p>Hy vọng bài viết mang đến nhiều điều hữu ích cho bạn.</p>\n<p><strong>Tâm niệm rằng:</strong></p>\n<ul>\n<li>Không nên đặt trọn niềm tin 100% vào context có thể giải quyết <strong>tất cả</strong> vấn đề liên quan đến chia sẻ state</li>\n<li>Context không nhất thiết là một global state cho toàn bộ ứng dụng, nó có thể được áp dụng trên một phần của cây component cụ thể nào đó.</li>\n<li>Bạn có thể (và bạn nên) chia các logic khác nhau trên các context khác nhau.</li>\n</ul>\n<p><a href=\"https://codesandbox.io/s/react-codesandbox-je6cc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Code Sandbox cho bạn nào cần vọc vạch</a></p>\n<p><a href=\"https://kentcdodds.com/blog/how-to-use-react-context-effectively\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to use React Context effectively</a></p>\n<p><a href=\"https://kentcdodds.com/blog/application-state-management-with-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Application State Management with React</a></p>\n<p><a href=\"https://kentcdodds.com/blog/how-to-optimize-your-context-value\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to optimize your context value</a></p>\n","cover_image":""}},{"node":{"id":"07576c6aada92ee8762632decca394aa","title":"5 kinh nghiệm khi viết arrow function","path":"/2020-02-09-5-kinh-nghiem-khi-lam-viec-voi-arrow-function/","date":"2020-02-09","timeToRead":2,"desc":"Sử dụng arrow function đã quá phổ biến, ai cũng biết nó là gì, không cần một bài giới thiệu vài dòng nữa, bài viết này chia sẻ 5 kinh nghiệm để bạn làm việc với arrow function thêm mượt mà","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#g%C3%A1n-t%C3%AAn-cho-arrow-function\">Gán tên cho arrow function</a></li>\n<li><a href=\"#inline-khi-n%C3%A0o-c%C3%B3-th%E1%BB%83\">Inline khi nào có thể</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-v%E1%BB%9Bi-ph%C3%A9p-so-s%C3%A1nh\">Sử dụng với phép so sánh</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-v%E1%BB%9Bi-object-literal\">Sử dụng với object literal</a></li>\n<li><a href=\"#h%E1%BA%A1n-ch%E1%BA%BF-l%E1%BB%93ng-nhi%E1%BB%81u-arrow-function\">Hạn chế lồng nhiều arrow function</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"gán-tên-cho-arrow-function\"><a href=\"#g%C3%A1n-t%C3%AAn-cho-arrow-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gán tên cho arrow function</h2>\n<p>arrow function trong javascript là một <code class=\"language-inline-text\">anonymous</code> (hàm không có tên), nếu gọi vào <code class=\"language-inline-text\">name</code> của nó chúng ta sẽ nhận được một chuỗi rỗng</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => ''</span></code></pre></div>\n<p>Trong lúc debug hoặc phân tích call stack, hàm dạng <code class=\"language-inline-text\">anonymous</code> rất khó chịu vì không biết đang chạy <em>cái gì</em></p>\n<p><img src=\"https://dmitripavlutin.com/static/da011c996cd4544e2e5131e5862c85b6/f8b1b/anonymous-arrow-functions-3.webp\" alt=\"Đó mà biết được đang chạy cái gì nếu chỉ hiện thị anonymous\"></p>\n<p>Bên cột call stack có 2 function <code class=\"language-inline-text\">anonymous</code>, không có bất kỳ thông tin nào được trích xuất ra cho chúng ta ở đây.</p>\n<p>Nhưng nếu chúng ta khai báo một biến nắm giữ arrow function, Javascript lúc này lại <em>ngầm</em> hiểu nó là tên cho function đó (các đặc tính khác của arrow function không đổi)</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increaseNumber</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\nincreaseNumber<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 'increaseNumber'</span></code></pre></div>\n<p>Lúc debug, nó đã hiện nguyên hình</p>\n<p><img src=\"https://dmitripavlutin.com/static/7cf0de61d6b0cd2fb01e9cfb145e8708/c04be/named-arrow-functions-2.png\" alt=\"Anonymous arrow functions call stack\" title=\"Anonymous arrow functions call stack\"></p>\n<h2 id=\"inline-khi-nào-có-thể\"><a href=\"#inline-khi-n%C3%A0o-c%C3%B3-th%E1%BB%83\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Inline khi nào có thể</h2>\n<p>Thay vì phải viết một cách dài dòng</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\narray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> number <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chúng ta có thể bỏ hẳn <code class=\"language-inline-text\">{}</code> và <code class=\"language-inline-text\">return</code>, ở dạng một expression</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\narray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> number <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"sử-dụng-với-phép-so-sánh\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-v%E1%BB%9Bi-ph%C3%A9p-so-s%C3%A1nh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng với phép so sánh</h2>\n<p>Các phép so sánh <code class=\"language-inline-text\">&lt;=</code>, <code class=\"language-inline-text\">>=</code> nhiều khi dễ gây nhầm lẫn khi đứng chung với <code class=\"language-inline-text\">=></code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">negativeToZero</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Để không <em>đánh đố</em> người đọc, bọc nó lại trong dấu ngoặc đơn <code class=\"language-inline-text\">()</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">negativeToZero</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//hoặc một cách tường minh</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">negativeToZero</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> number <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"sử-dụng-với-object-literal\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-v%E1%BB%9Bi-object-literal\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng với object literal</h2>\n<p>Nếu viết object literal như bên dưới chắc chắn bạn bị báo lỗi</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// throws SyntaxError!</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'number'</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Đừng quên thêm ngoặc đơn cho nó</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Works!</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'number'</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// có nhiều property</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">'number'</span><span class=\"token operator\">:</span> number\n  <span class=\"token string-property property\">'propA'</span><span class=\"token operator\">:</span> <span class=\"token string\">'value A'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'propB'</span><span class=\"token operator\">:</span> <span class=\"token string\">'value B'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"hạn-chế-lồng-nhiều-arrow-function\"><a href=\"#h%E1%BA%A1n-ch%E1%BA%BF-l%E1%BB%93ng-nhi%E1%BB%81u-arrow-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hạn chế lồng nhiều arrow function</h2>\n<p>Thí dụ có một button, sau khi click chúng ta request lên server, sau khi nhận được giá trị, log xuống trình duyệt</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">myButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items.json'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">json</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      json<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Viết vậy, <em>thiên hạ</em> chê khó đọc. Cân nhắc cách viết sau</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">readItemsJson</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">json</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  json<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleButtonClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items.json'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>readItemsJson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmyButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> handleButtonClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Muốn <em>ngon</em> hơn là dùng <code class=\"language-inline-text\">async/await</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleButtonClick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/items.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  json<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmyButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> handleButtonClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://dmitripavlutin.com/javascript-arrow-functions-best-practices/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">5 Best Practices to Write Quality Arrow Functions</a></p>\n","cover_image":""}},{"node":{"id":"c048c2f5efbd71ac1d33f8c5debd6e23","title":"Bắt sự kiện click bên ngoài Component React","path":"/2020-01-30-huong-dan-bat-su-kien-ben-ngoai-react-md/","date":"2020-01-30","timeToRead":1,"desc":"Thủ thuật nhỏ để bắt sự kiện click có nằm ngoài component không","content":"<p>Nếu bạn tự làm một react component như <em>dropdown</em>, <em>modal</em>, <em>popover</em>, không sớm thì muộn bạn sẽ rơi vào tình huống sao \"Bắt sự kiện click bên ngoài component để đóng nó (modal, popover, dropdown) lại\"</p>\n<p><img src=\"https://miro.medium.com/max/546/1*7dmOCdkoDLfnWz6hBF0fYA.png\"></p>\n<p>Đây là những gì bạn cần làm</p>\n<ol>\n<li>Để biết sự kiện nằm trong hay ngoài component, chúng ta phải lấy được DOM của element, dùng <code class=\"language-inline-text\">ref</code> để lấy tham chiếu đến DOM <em>thực</em> của component</li>\n</ol>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        ...\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<ol start=\"2\">\n<li>Thêm một event listener cho sự kiện click ( <em>mousedown</em> )</li>\n</ol>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//  thêm khi đã mount</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mousedown\"</span><span class=\"token punctuation\">,</span> handleClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// dọn dẹp</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mousedown\"</span><span class=\"token punctuation\">,</span> handleClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ol start=\"3\">\n<li>Bên trong <code class=\"language-inline-text\">handleClick</code> <strong>node.current.contains(e.target)</strong> sẽ trả về <code class=\"language-inline-text\">true</code> nếu click xuất phát bên trong ref <code class=\"language-inline-text\">node</code></li>\n</ol>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// outside</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://codesandbox.io/s/w62xl39907\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Code</a>\n<a href=\"https://medium.com/@pitipatdop/little-neat-trick-to-capture-click-outside-react-component-5604830beb7f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Little Neat trick to capture click outside with React Hook</a></p>\n","cover_image":""}},{"node":{"id":"31407f912ad8520cf0cec0a089d472d6","title":"Viết và Deploy một Lambda Function trên Netlify","path":"/2020-01-10-huong-dan-viet-lambda-function-voi-netlify/","date":"2020-01-10","timeToRead":4,"desc":"","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#lambda-function-l%C3%A0-g%C3%AC\">Lambda function là gì?</a></li>\n<li><a href=\"#ch%E1%BA%A1y-c%C3%A1c-function-lambda-%E1%BB%9F-local\">Chạy các function Lambda ở local</a></li>\n<li><a href=\"#deploy-l%C3%AAn-netlify\">Deploy lên Netlify</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"lambda-function-là-gì\"><a href=\"#lambda-function-l%C3%A0-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lambda function là gì?</h2>\n<p>Giải thích về Serverless bạn đọc bài trước có đăng</p>\n<p>Nếu bạn chỉ có một trang blog như thế này, viết bằng Gatsby, không có backend làm sao bạn có thể có được tính năng cho phép user đăng ký nhận bản tin? Ví dụ dùng dịch vụ của MailChimp đi.</p>\n<p>Chúng ta ko thể đưa API key vào trang frontend được, hiển nhiên quá mà! Ai cũng có thể lấy được cái key này thì sao.</p>\n<p>Chúng ta phải thông qua một bên ở giữa, là Lambda function trên Netlify, chúng ta đưa key này cho Netlify, nó sẽ có trách nhiệm bảo mật key này và truyền thông tin tới MailChimp</p>\n<p>Chữ Lambda được <strong>phát minh</strong> đầu tiên bởi Amazon AWS, sau này Netlify cũng dùng luôn tên này, nó là kiểu các <em>hàm trung gian</em>, giúp chúng ta giao tiếp với phía server (vì đây là dạng serverless, chúng ta dùng dịch vụ của nó cung cấp, giống như vua chúa, nếu muốn giao tiếp với anh thì chú cứ thông qua thái dám, họ sẽ truyền tin tới cho anh)</p>\n<p>Cứ dùng trang mặc định của Gatsby</p>\n<p><img src=\"https://scotch-res.cloudinary.com/image/upload/dpr_1,w_800,q_auto:good,f_auto/v1540301648/sv9k9cv1zdtr4ebqpr09.png\" alt=\"Viết và Deploy một Lambda Function trên Netlify\"></p>\n<p>Tạo một thư mục bên trong source code, nó sẽ chứa toàn bộ các hàm sẽ giao tiếp với Lambda. Thư mục này đặt đâu cũng được, cứ đặt vào dưới thư mục gốc tên <code class=\"language-inline-text\">functions</code></p>\n<blockquote>\n<p>Mỗi file chỉ chứa 1 function</p>\n</blockquote>\n<p>test.js</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Mỗi function sẽ nhận 3 parameter </p>\n<ul>\n<li><code class=\"language-inline-text\">event</code>: chứa post data, header</li>\n<li><code class=\"language-inline-text\">context</code>: function này được call ở đâu, thông tin user hiện tại</li>\n<li><code class=\"language-inline-text\">callback</code>: hàm callback thôi, hàm này nhận param đâu tiền là error nếu có lỗi</li>\n</ul>\n<p><img src=\"https://scotch-res.cloudinary.com/image/upload/dpr_1,w_800,q_auto:good,f_auto/v1540301809/exdwztr8lfepei1x88ux.png\" alt=\"Viết và Deploy một Lambda Function trên Netlify\"></p>\n<h2 id=\"chạy-các-function-lambda-ở-local\"><a href=\"#ch%E1%BA%A1y-c%C3%A1c-function-lambda-%E1%BB%9F-local\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chạy các function Lambda ở local</h2>\n<p>Cần cài <code class=\"language-inline-text\">netlify-lambda</code> để chạy test dưới local </p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install netlify<span class=\"token operator\">-</span>lambda</code></pre></div>\n<p><img src=\"https://scotch-res.cloudinary.com/image/upload/dpr_1,w_800,q_auto:good,f_auto/v1540301932/y8uyqgcmxa8i9sczpljo.png\" alt=\"Viết và Deploy một Lambda Function trên Netlify\"></p>\n<div class=\"gridsome-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">netlify-lambda serve &lt;functions_directory></code></pre></div>\n<p><code class=\"language-inline-text\">&lt;functions_directory></code> là thư mục chứa mấy function chúng ta viết</p>\n<p>Thêm đoạn <em>shortcut</em> vào trong package.json để chạy lệnh này</p>\n<p><img src=\"https://scotch-res.cloudinary.com/image/upload/dpr_1,w_800,q_auto:good,f_auto/v1540302074/xnpujx0smgs1ftul0hr2.png\" alt=\"Viết và Deploy một Lambda Function trên Netlify\"></p>\n<p>Bước cuối cùng cần làm, tạo file config để báo với Netlify, đây không phải là thư mục chứa source code của chúng ta, đây là thư mục sau khi build. Tạo file <code class=\"language-inline-text\">Netlify.toml</code> trong thư mục gốc</p>\n<p><img src=\"https://scotch-res.cloudinary.com/image/upload/dpr_1,w_800,q_auto:good,f_auto/v1540302243/gzlbxxtidpi0lukcxmmy.png\" alt=\"Viết và Deploy một Lambda Function trên Netlify\"></p>\n<p>Sau khi build, file bên trong <code class=\"language-inline-text\">functions</code> sẽ được đưa vào thư mục tên <code class=\"language-inline-text\">lambda</code></p>\n<p>Chạy lại đoạn script <em>shortcut</em> hồi nãy khai báo <code class=\"language-inline-text\">npm run start:lambda</code>, bên dưới hình này đoạn chạy bị lỗi là khi chưa tạo file <code class=\"language-inline-text\">Netlify.toml</code>, chúng ta bắt buộc phải tạo file này trước khi chạy</p>\n<p><img src=\"https://scotch-res.cloudinary.com/image/upload/dpr_1,w_800,q_auto:good,f_auto/v1540302301/vyr4hwlxacgkhvkvhzdn.png\" alt=\"Viết và Deploy một Lambda Function trên Netlify\"></p>\n<p>Mở Postman lên gọi test thử</p>\n<p><img src=\"https://scotch-res.cloudinary.com/image/upload/dpr_1,w_800,q_auto:good,f_auto/v1540302549/jblo4vceh9ylxxipnct8.png\" alt=\"Viết và Deploy một Lambda Function trên Netlify\"></p>\n<p>Function đầu tiên đã chạy thành công!!!</p>\n<p>Chúng ta truyền thêm một object <code class=\"language-inline-text\">{ \"name\" : \"James\" }</code>, và muốn nhận được một JSON object thay vì là một <code class=\"language-inline-text\">string</code>. Muốn vậy trong phần body chúng ta phải gọi <code class=\"language-inline-text\">JSON.stringify</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">statusCode</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Thanks for visiting \"</span> <span class=\"token operator\">+</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// nếu không nhận được name= james</span>\n\n<span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You're not James\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://scotch-res.cloudinary.com/image/upload/dpr_1,w_800,q_auto:good,f_auto/v1540303047/s7lrt4qmn8svganfbd6s.png\" alt=\"Viết và Deploy một Lambda Function trên Netlify\"></p>\n<p>Test trên Postman</p>\n<p><img src=\"https://scotch-res.cloudinary.com/image/upload/dpr_1,w_800,q_auto:good,f_auto/v1540303082/gmlkczsp2hhlasrrko2d.png\" alt=\"Viết và Deploy một Lambda Function trên Netlify\"></p>\n<p>Trường hợp phát sinh lỗi</p>\n<p><img src=\"https://scotch-res.cloudinary.com/image/upload/dpr_1,w_800,q_auto:good,f_auto/v1540303092/y1uu9ipfgy0rq6p3mtwr.png\" alt=\"Viết và Deploy một Lambda Function trên Netlify\"></p>\n<h2 id=\"deploy-lên-netlify\"><a href=\"#deploy-l%C3%AAn-netlify\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Deploy lên Netlify</h2>\n<p>Nãy giờ chúng ta đang chạy các Lambda function ở dưới local bằng lệnh <code class=\"language-inline-text\">serve</code>,  để đưa lên Netlify, chúng ta cần <code class=\"language-inline-text\">build</code> source code trước khi đẩy lên Netlify</p>\n<p>Chúng ta phải setup chạy 2 script, một để build Gatsby, sau đó build mấy functions lambda</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"props\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run build; npm run build:lambda\"</span></code></pre></div>\n<p><img src=\"https://scotch-res.cloudinary.com/image/upload/dpr_1,w_800,q_auto:good,f_auto/v1540315111/hv7omcr0angknnup175q.png\" alt=\"Viết và Deploy một Lambda Function trên Netlify\"></p>\n<p>Lưu ý: do đang dùng gatsby, nên cần 2 lệnh này, nếu bạn dùng một thằng khác, thì lệnh sẽ khác, tuy cách setup</p>\n<p>Phải cập nhập lại <strong>Netlify.toml</strong>, chúng ta sẽ báo với Netlify: \"Ê, khi nào tao chạy xong <code class=\"language-inline-text\">prop</code>, thì mày deploy nhe\"</p>\n<p><img src=\"https://scotch-res.cloudinary.com/image/upload/dpr_1,w_800,q_auto:good,f_auto/v1540315122/lytjmmofmjjgixzxycwo.png\" alt=\"Viết và Deploy một Lambda Function trên Netlify\"></p>\n<p>Sau khi commit lên Github, Netlify sẽ bắt đầu trigger deploy, vào trang chính của Netlify, trong tab <strong>Deployment</strong>, bạn có theo dõi xem nó đang deploy tới đâu rồi</p>\n<p><img src=\"https://scotch-res.cloudinary.com/image/upload/dpr_1,w_800,q_auto:good,f_auto/v1540315158/kulpc3u2tqftgxijpr6c.png\" alt=\"Viết và Deploy một Lambda Function trên Netlify\"></p>\n<p>Sau khi deploy thành công, bạn có thể chuyển qua tab <strong>Function</strong>, các function nào đã có sẽ được liệt kê ở đây</p>\n<p><img src=\"https://scotch-res.cloudinary.com/image/upload/dpr_1,w_800,q_auto:good,f_auto/v1540315181/nblkoi0l6shvdvvybtje.png\" alt=\"Viết và Deploy một Lambda Function trên Netlify\"></p>\n<p>Cơ bản là thế thôi, các bạn có thể làm <em>\"mọi thứ\"</em> với function mình viết (miễn là nó có cho), như gửi email, lưu dữ liệu xuống DB, gọi một API</p>\n<p><a href=\"https://scotch.io/tutorials/build-and-deploy-a-serverless-function-to-netlify\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://scotch.io/tutorials/build-and-deploy-a-serverless-function-to-netlify</a></p>\n","cover_image":""}},{"node":{"id":"1d3a15c999b8622326ef60a24979905b","title":"Sử dụng useReducer và useContext để làm global state","path":"/2020-01-08-su-dung-context-de-lam-global-store-trong-react/","date":"2020-01-08","timeToRead":3,"desc":"","content":"<p>Thông thường chúng ta sẽ dùng một <em>nhà kho</em> để chứa dữ liệu <code class=\"language-inline-text\">state</code> như <em>Redux</em>, một component container bọc ở nút đầu tiên trong app, các component con bên trong có thể truy xuất và cập nhập các dữ liệu một cách dễ dàng</p>\n<p>Với các API mới được React bổ sung là <code class=\"language-inline-text\">useState</code>, <code class=\"language-inline-text\">createContext</code>, <code class=\"language-inline-text\">useContext</code> chúng ta có <em>thêm một lựa chọn</em> để làm <em>nhà kho</em> mà ko cần dùng đến Redux</p>\n<p>Ví dụ chúng ta có 3 dữ liệu như bên dưới</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> teamMembersNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mary\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jason\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"David\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>sharing<span class=\"token punctuation\">,</span> setSharing<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>help<span class=\"token punctuation\">,</span> setHelp<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>pairing<span class=\"token punctuation\">,</span> setPairing<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>teamMembersNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Câu hỏi là làm sao chúng ta đưa dữ liệu vào <em>nhà kho</em>. Chúng ta sẽ dùng API <code class=\"language-inline-text\">createContext</code> (tạo em cái kho)</p>\n<p>Khi sử dụng <code class=\"language-inline-text\">React.createContext</code> chúng ta sẽ nhận về 2 component là <code class=\"language-inline-text\">Provider</code> (anh tung) và <code class=\"language-inline-text\">Consumer</code> (em hứng).</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./src/utils/store.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> StoreContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// các em đã vào nhà kho</span>\n  <span class=\"token keyword\">const</span> teamMembersNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mary\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jason\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"David\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>sharing<span class=\"token punctuation\">,</span> setSharing<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>help<span class=\"token punctuation\">,</span> setHelp<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>pairing<span class=\"token punctuation\">,</span> setPairing<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>teamMembersNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">sharing</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>sharing<span class=\"token punctuation\">,</span> setSharing<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">help</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>help<span class=\"token punctuation\">,</span> setHelp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">pairing</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>pairing<span class=\"token punctuation\">,</span> setPairing<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StoreContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StoreContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Để các component bên trong <code class=\"language-inline-text\">&lt;App/></code> đều dùng được <code class=\"language-inline-text\">&lt;Consumer /></code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./index.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> StoreProvider <span class=\"token keyword\">from</span> <span class=\"token string\">\"./utils/store\"</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StoreProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StoreProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Với bất kỳ component nào muốn sử dụng, để lấy được dữ liệu trong store, chúng ta sử dụng <code class=\"language-inline-text\">useContext</code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StoreContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../utils/store\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">SomeComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// dữ liệu dùng chung</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> sharing <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>StoreContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Hoặc nếu thích dùng cách viết render props, có thể dùng luôn component <code class=\"language-inline-text\">&lt;Consumer/></code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StoreContext.Consumer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token parameter\">store</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">InputComponent</span></span> <span class=\"token attr-name\">store</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StoreContext.Consumer</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"ứng-dụng-làm-useauth\"><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng-l%C3%A0m-useauth\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ứng dụng làm <code class=\"language-inline-text\">useAuth</code></h2>\n<p>Một trong những ví dụ dễ thấy, phần dữ liệu nên đưa vào <em>nhà kho chung</em> là phần thông tin user đang đăng nhập</p>\n<p>Chúng ta sẽ cần 3 phần</p>\n<ol>\n<li>Khai báo một nhà kho bằng <code class=\"language-inline-text\">createContext</code></li>\n<li>Bộ <code class=\"language-inline-text\">reducer</code> làm nhiệm vụ cập nhập xử lý <code class=\"language-inline-text\">state</code></li>\n<li>Một hook tùy biến <code class=\"language-inline-text\">useAuth</code> cung cấp các API cần thiết để tương tác với <em>nhà kho chung</em> đã khai báo</li>\n</ol>\n<p>1) <strong>AuthProvider.js</strong> Khai báo nhà kho (bản rút gọn)</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// AuthProvider.js</span>\n<span class=\"token keyword\">import</span> authReducer <span class=\"token keyword\">from</span> <span class=\"token string\">\"authReducer\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> AuthContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AuthProvider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// khởi tạo</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>authReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AuthContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AuthContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"2\">\n<li><strong>authReducer.js</strong> (bản rút gọn)</li>\n</ol>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// authReducer.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">authReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"login\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> authResult<span class=\"token punctuation\">,</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> expiresAt <span class=\"token operator\">=</span> authResult<span class=\"token punctuation\">.</span>expiresIn <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"expires_at\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>expiresAt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">,</span> expiresAt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"logout\"</span><span class=\"token operator\">:</span>\n      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"expires_at\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">expiresAt</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"3\">\n<li>Một hook tùy biến <strong><code class=\"language-inline-text\">useAuth</code></strong></li>\n</ol>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// useAuth.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AuthProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"AuthProvider\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useAuth</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">,</span> dispatch <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">userContext</span><span class=\"token punctuation\">(</span>AuthContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">login</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// làm gì đó ở đây</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// làm gì đó ở đây</span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"logout\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...  còn một số thức khác</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isAuthenticated</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>expiresAt <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> state<span class=\"token punctuation\">.</span>expiresAt<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...  còn một số thức khác</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        isAuthenticated<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">userId</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>user <span class=\"token operator\">?</span> state<span class=\"token punctuation\">.</span>user <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        login<span class=\"token punctuation\">,</span>\n        logout<span class=\"token punctuation\">,</span>\n        handleAuthentication\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Với cách làm này, bất kỳ component nào sử dụng <code class=\"language-inline-text\">useAuth</code> đều sẽ truy xuất đến một kho dữ liệu <em>chung</em></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> useAuth <span class=\"token keyword\">from</span> <span class=\"token string\">\"useAuth\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyCom</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* quá trời thứ linh tinh trả về */</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useAuth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://swizec.com/blog/usereducer-usecontext-for-easy-global-state-without-libraries/swizec/9182\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">useReducer + useContext for easy global state without libraries</a></p>\n<p><a href=\"https://dev.to/nazmifeeroz/using-usecontext-and-usestate-hooks-as-a-store-mnm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using useContext and useState hooks as a store</a></p>\n","cover_image":""}},{"node":{"id":"1a00e863794568261c44674e696c6427","title":"Khi nào nên sử dụng useLayoutEffect thay vì useEffect","path":"/2020-01-02-khi-nao-nen-su-dung-uselayouteffect-trong-react/","date":"2020-01-02","timeToRead":2,"desc":"2 React Hook làm nhiệm vụ khá giống nhau là useEffect và useLayoutEffect bạn đã biết cách sử dụng thế nào cho đúng","content":"<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// thực hiện side effect</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token comment\">/* dọn rác */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>khai báo các giá trị mà nó phụ thuộc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// thực hiện side effect</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token comment\">/* dọn rác */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>thực hiện side effect<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nếu ko có khác nhau thì React team sẽ không tạo ra 2 thằng, hiển nhiên?. (Hầu như có thể dụng <code class=\"language-inline-text\">useEffect</code> trong mọi tình huống)</p>\n<p>Khác nhau là ở <strong>THỜI GIAN THỰC HIỆN</strong></p>\n<p><code class=\"language-inline-text\">useEffect</code> chạy <strong>bất tuần tự</strong> và đợi <strong>sau</strong> khi việc component đã xuất hiện trên màn hình (sau khi trình duyệt <em>paint</em>)</p>\n<p>Quá trình cụ thế là thế này</p>\n<ol>\n<li>Component gọi đến <code class=\"language-inline-text\">render</code></li>\n<li>Màn hình cập nhập lại UI mới</li>\n<li><strong>SAU ĐÓ</strong> chạy <code class=\"language-inline-text\">useEffect</code></li>\n</ol>\n<p><code class=\"language-inline-text\">useLayoutEffect</code>, ngược lại, chạy <strong>tuần tự</strong> sau khi render nhưng là <strong>trước</strong> khi UI cập nhập</p>\n<p>Quá trình</p>\n<ol>\n<li>Component gọi đến <code class=\"language-inline-text\">render</code></li>\n<li><code class=\"language-inline-text\">useLayoutEffect</code> được gọi, đợi chạy xong mới đi tiếp</li>\n<li>Màn hình cập nhập lại UI mới</li>\n</ol>\n<p>Trong 99% các trường hợp, sử dụng <code class=\"language-inline-text\">useEffect</code>  sẽ là cách tốt nhất, vì những effect của chúng ta sẽ cần đồng bộ với prop, state, không cần xảy ra <strong>NGAY LẬP TỨC</strong> và không ảnh hưởng đến kết quả cuối cùng của UI.</p>\n<p>Ví dụ như fetch dữ liệu sẽ không cần có kết quả ngay lập tức, hay đặt để các event handler</p>\n<p>Nếu thấy UI bị <code class=\"language-inline-text\">flickering</code> (giống như xuất hiện sọc sọc trên màn hình tivi) khi cập nhập, nguyên nhân do nó đã render khi <em>vừa có</em> state, sau đó lại re-render lại với state nhận được sau cùng. Đó là lúc bạn dùng <code class=\"language-inline-text\">useLayoutEffect</code></p>\n<p>Ví dụ nhé, bạn cho user click để thay đổi state <code class=\"language-inline-text\">value</code>, nó sẽ re-render component, sau đó effect chạy, nó lại set giá trị <code class=\"language-inline-text\">value</code> thành một con số ngẫu nhiên => lại re-render component.</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  useState<span class=\"token punctuation\">,</span>\n  useLayoutEffect\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">BlinkyRender</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'render'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      value: </span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span> <span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BlinkyRender</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Với cách dùng <code class=\"language-inline-text\">useLayoutEffect</code> chúng ta chỉ cập nhập UI đúng <strong>1</strong> lần, trong khi component gọi render <strong>2</strong> lần.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://daveceddia.com/useeffect-vs-uselayouteffect/\">📜 When to useLayoutEffect Instead of useEffect</a></p>\n","cover_image":""}},{"node":{"id":"1cf860be68de4f1b6e19afe1672c5cf3","title":"Clean Code","path":"/2020-01-03-clean-code/","date":"2020-01-02","timeToRead":2,"desc":"","content":"<h2 id=\"đặt-tên\"><a href=\"#%C4%91%E1%BA%B7t-t%C3%AAn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đặt tên</h2>\n<p>❌ Không ngữ nghĩa</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> x <span class=\"token operator\">></span><span class=\"token number\">1990</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>✅ Có ngữ nghĩa</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> userAge <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> currentYear <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userAge <span class=\"token operator\">></span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentYear <span class=\"token operator\">-</span> userAge <span class=\"token operator\">></span><span class=\"token number\">1990</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>❌ Dư hậu tố, tiền tố không cần thiết</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> nameValue<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">theProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>✅ Vừa đủ</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"điều-kiện\"><a href=\"#%C4%91i%E1%BB%81u-ki%E1%BB%87n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Điều kiện</h2>\n<p>❌ Không dùng điều kiện phủ định</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isUserExist</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>✅ Không dùng <code class=\"language-inline-text\">!</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isNewExist</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>❌ Quá nhiều điều kiện chồng chéo</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isPercentage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>✅ Hạn chế điều kiện bằng return</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isPercentage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">></span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// hoặc xịn hơn</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isPercentage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> isInRange <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> val <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> isInRange<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"tham-số\"><a href=\"#tham-s%E1%BB%91\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tham số</h2>\n<p>❌ Không truyền tham số mặc định</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getUserData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> userName <span class=\"token operator\">=</span> userName <span class=\"token operator\">||</span> <span class=\"token string\">\"Patrick Collision\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>✅ Truyền tham số mặc định</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getUserData</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Patrick Collision\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>❌ Truyền nhiều tham số</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getUserData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> role</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>✅ Truyền tham số kiểu object</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getUserData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> role <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"function\"><a href=\"#function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Function</h2>\n<p>❌ Đa tính năng, nhiều công dụng</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">checkSomething</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">statement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">REGEXES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> statements <span class=\"token operator\">=</span> statement<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> tokens <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token constant\">REGEXES</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">REGEX</span></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    statements<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">statement</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> names<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  tokens<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">token</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// lex...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  names<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// parse...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>✅ Tối giản hóa chức năng</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">checkSomething</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">statement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> tokens <span class=\"token operator\">=</span> <span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span>statement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> syntaxTree <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  syntaxTree<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// parse...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">code</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">REGEXES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> statements <span class=\"token operator\">=</span> code<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> tokens <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token constant\">REGEXES</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">REGEX</span></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    statements<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">statement</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> tokens<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tokens</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> syntaxTree <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  tokens<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">token</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    syntaxTree<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> syntaxTree<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"bắt-lỗi\"><a href=\"#b%E1%BA%AFt-l%E1%BB%97i\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bắt lỗi</h2>\n<p>❌ Bắt lỗi cho vui</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">functionThatMightThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>✅ Có lỗi thì kèm theo xử lý</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">functionThatMightThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"comment\"><a href=\"#comment\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Comment</h2>\n<p>❌ Cái gì cũng comment</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hashing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// The hash</span>\n  <span class=\"token keyword\">let</span> hash <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Length of string</span>\n  <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Loop through every character in data</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Get character code.</span>\n    <span class=\"token keyword\">const</span> char <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Make the hash</span>\n    hash <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> hash <span class=\"token operator\">+</span> char<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Convert to 32-bit integer</span>\n    hash <span class=\"token operator\">&amp;=</span> hash<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>✅ Comment đúng nơi cần thiết</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hashing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> hash <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> char <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    hash <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> hash <span class=\"token operator\">+</span> char<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Convert to 32-bit integer</span>\n    hash <span class=\"token operator\">&amp;=</span> hash<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n","cover_image":""}},{"node":{"id":"1df2c1620520a59013fefdcfbdcce4ab","title":"Ứng dụng JSON.parse để cải thiện tốc độ?","path":"/2019-12-14-thu-thuat-tang-toc-bang-json-parse/","date":"2019-12-14","timeToRead":3,"desc":"Thủ thuật để cải thiện tốc độ bằng JSON.parse","content":"<p>Với các ứng dụng web ngày nay, không khó bắt gặp việc sử dụng object như một nơi lưu trữ state và các dạng dữ liệu cần thiết khác cho ứng dụng. Cụ thể nhất chúng ta thường thấy trong store của Redux.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">bar</span><span class=\"token operator\">:</span> <span class=\"token number\">1337</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🐌</span></code></pre></div>\n<p>Trong thực tế nó sẽ không đơn giản như ví dụ ở trên, mà cấu trúc nếu không chồng chéo thì cũng rất lớn vì phải gánh vác toàn bộ <code class=\"language-inline-text\">state</code> của ứng dụng. Nếu nó lại dữ liệu cần thiết trong lúc khởi tạo ứng dụng lần đầu tiên. Việc này sẽ nằm trong render critical path của trình duyệt, đồng nghĩa với việc user không thấy gì hết cho đến khi dữ liệu này được load, parse, compile, execute bởi Javascript engine bên dưới.</p>\n<p>Để khắc phục việc này một trong những cách làm là dùng server side rendering, chúng ta chỉ quăng cái HTML đã chứa toàn bộ kết quả của quá trình xuống user. Trình duyệt user không cần đảm đương công việc đó nữa.</p>\n<p>Nhưng nếu chúng ta không thể dùng server side rendering thì sao?</p>\n<p>Nếu object chúng ta cần không chứa những gì mà JSON không hỗ trợ, như BigInt, Maps, Sets,... Chúng ta có thể sử dụng <code class=\"language-inline-text\">JSON.parse</code></p>\n<p>Vì cú pháp của JSON đơn giản hơn nhiều so với Javascript, nên quá trình parse sẽ ít tốn kém hơn so với Javascript rất nhiều.</p>\n<p>Nội dung bên trong JSON đối với các engine rất dễ đoán, và ngược lại với các object. Thí dụ nếu bạn là cái engine rồi nhìn vào đây</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>'<span class=\"token punctuation\">{</span></code></pre></div>\n<p>Khi bạn thấy dấu <code class=\"language-inline-text\">{</code>, bạn sẽ biết được chỉ có 2 khả năng có thể xảy ra: một là bắt đầu một object, hai là một JSON không hợp lệ.</p>\n<p>Trong khi đó sau dấu <code class=\"language-inline-text\">{</code>  của object, có rất nhiều khả năng xảy ra</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Đây có phải là object không? Giá trị x đang trỏ tới đâu? Không thể nào có đáp án nếu không xem hết toàn bộ code</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// khởi tạo object, x trở tới thằng khai báo trước đó</span>\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// object destructuring, x không trỏ tới thằng đầu</span>\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// một arrow function</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">y</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Như vậy, nếu gặp dấu <code class=\"language-inline-text\">{</code>, các engine phải vô cùng thận trọng vì phải biết ngữ cảnh hiện tại mới biết nó là gì. </p>\n<p>Lợi dụng đặc tính này chúng ta có thể cải thiện tốc độ của các ứng dụng web có sử dụng một object có cấu trúc tương tự như JSON ( ví dụ như Redux Store). Thay vì sử dụng một khai báo object như thế này</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">bar</span><span class=\"token operator\">:</span> <span class=\"token number\">1337</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🐌</span></code></pre></div>\n<p>Có thể tăng tốc bằng cách viết</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{\"foo\":42,\"bar\":1337}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚀</span></code></pre></div>\n<p>Miễn là việc tính toán này chỉ cần parse một lần bằng <code class=\"language-inline-text\">JSON.parse</code>, nó sẽ nhanh hơn nhiều so với cách khai bao object bình thường, và chỉ nên suy nghĩ áp dụng khi object đã vượt quá kích thước 10kB. </p>\n<p>Thực hiện kiểm tra tốc độ của một object khoảng 8Mb dung lượng trên các engine khác nhau. Kết quả nhận được ít nhất cũng tăng tốc gấp 1.5 lần trên các phiên bản khác nhau của V8</p>\n<p><img src=\"https://v8.dev/_img/cost-of-javascript-2019/json.svg\"></p>\n<p><a href=\"https://v8.dev/blog/cost-of-javascript-2019#json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://v8.dev/blog/cost-of-javascript-2019#json</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=ff4fgQxPaO0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Faster apps with JSON.parse (Chrome Dev Summit 2019)</a></p>\n","cover_image":""}},{"node":{"id":"7eb4dc9bc18ae70738d82bd056c38e90","title":"Tối ưu component React bằng React.memo, useMemo và useCallback","path":"/2019-12-13-huong-dan-cai-thien-hieu-nang-react-component/","date":"2019-12-13","timeToRead":2,"desc":"Sử dụng những hàm có sẵn của React để viết component ngon hơn","content":"<p>Hầu hết các trường hợp, hiệu năng của các ứng dụng React không phải là vấn đề quá nghiêm trọng. Bản thân thư viện React đã hỗ trợ tận răng các phương để cải thiện lúc render component. Tuy nhiên cũng có vài trường hợp các component của chúng ta render nhiều hơn mức cần thiết và làm ảnh hưởng đến hiệu năng chung.</p>\n<p>Lấy ví dụ</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ListPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> title <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Header</span></span> <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span></span> <span class=\"token attr-name\">listItems</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Trong ví dụ rất rất đơn giản trên, nếu <code class=\"language-inline-text\">data</code> thay đổi, toàn bộ <code class=\"language-inline-text\">&lt;Listpage/></code> sẽ render, bao gồm cả <code class=\"language-inline-text\">&lt;Header /></code> vốn không có thay đổi gì nếu giá trị <code class=\"language-inline-text\">data</code> khác đi</p>\n<p>Thời bây giờ chúng ta chuộng kiểu viết functional component hơn, 3 cách để tối ưu cho một functional component là sử dụng: <code class=\"language-inline-text\">React.memo</code>, <code class=\"language-inline-text\">useMemo</code>, <code class=\"language-inline-text\">useCallback</code></p>\n<h2 id=\"reactmemo\"><a href=\"#reactmemo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>React.Memo</h2>\n<p>Là một Higher order component dùng để <strong>ghi nhớ</strong> kết quả của function component, tất nhiên nếu truyền cùng một prop thì kết quả trả về sẽ là không đổi, nên có thể lấy kết quả <strong>đã nhớ</strong> trước đó</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Header</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>Header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Cách viết trên là bắt buộc, vì nếu bạn viết như bên dưới, component của bạn sẽ không xuất hiện trong devtool</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> Header <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Header<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"usememo\"><a href=\"#usememo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useMemo</h2>\n<p>Tên có vẻ giống, nhưng không giống nhau, nếu <code class=\"language-inline-text\">React.memo</code> là một HOC để ghi nhớ một function component, <code class=\"language-inline-text\">useMemo</code> là hàm giống như helper cho phép chỉ định: lưu lại kết quả của hàm nào và những giá trị nào sẽ làm thay đổi kết quả đó.</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> widgetList <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    widgets<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">w</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>w<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">totalPrice</span><span class=\"token operator\">:</span> <span class=\"token function\">someComplexFunction</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">estimatedDeliveryDate</span><span class=\"token operator\">:</span> <span class=\"token function\">someOtherComplexFunction</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span>warehouseAddress<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>widgets<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ở đoạn code trên, chúng ta muốn <strong>ghi nhớ</strong> giá trị của <code class=\"language-inline-text\">totalPrice</code> và <code class=\"language-inline-text\">estimatedDeliveryDate</code> bởi vì việc tính toán các giá trị này vô cùng <em>tốn sức</em>. Chúng ta chỉ định <code class=\"language-inline-text\">widgets</code> nếu không thay đổi thì đừng đi tính lại làm gì, mà lấy kết quả lần trước ra.</p>\n<h2 id=\"usecallback\"><a href=\"#usecallback\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useCallback</h2>\n<p>Được sử dụng để chặn việc render không cần thiết giữa <code class=\"language-inline-text\">parent</code> và <code class=\"language-inline-text\">children</code> component</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Parent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showExtraDetails<span class=\"token punctuation\">,</span> setShowExtraDetails<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\n        <span class=\"token operator\">&lt;</span>Child onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">showData</span><span class=\"token punctuation\">(</span>showExtraDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Component <code class=\"language-inline-text\">Child</code> sẽ luôn re-render khi <code class=\"language-inline-text\">Parent</code> render, thậm chí <code class=\"language-inline-text\">Child</code> là một <code class=\"language-inline-text\">PureComponent</code> hoặc được bọc trong <code class=\"language-inline-text\">React.memo</code></p>\n<p><code class=\"language-inline-text\">useCallback</code> được dùng như bên dưới</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Parent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showExtraDetails<span class=\"token punctuation\">,</span> setShowExtraDetails<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> handleClick <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">showData</span><span class=\"token punctuation\">(</span>showExtraDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span>showExtraDetails<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://headway.io/blog/react-optimize-components-memo-usememo-usecallback/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://headway.io/blog/react-optimize-components-memo-usememo-usecallback/</a></p>\n","cover_image":""}},{"node":{"id":"5b00a35128015178d6efbc7146488897","title":"Sử dụng v-model trên component lồng nhau","path":"/2019-12-10-huong-dan-su-dung-v-model-tren-component-long-nhau/","date":"2019-12-10","timeToRead":3,"desc":"Cách viết dùng v-model để tự đồng bộ giá trị khi lồng các component","content":"<p>Bạn có component nhận vào <code class=\"language-inline-text\">prop</code>, muốn sử dụng <code class=\"language-inline-text\">v-model</code> để nó tự cập nhập giá trị khi có thay đổi</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">// Address.vue\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>street<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>street<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>city<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>city<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>state<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>state<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>zip<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>zip<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'street'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'city'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'state'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'zip'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Bạn truyền nó vào như thế này, với hy vọng mọi thứ chạy ngon lành</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">// Form.vue\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mailing-address</span>\n            <span class=\"token attr-name\">:street</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>address.street<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:city</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>address.city<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:state</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>address.state<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">:zip</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>address.zip<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">import</span> MailingAddress <span class=\"token keyword\">from</span> <span class=\"token string\">'./Address.vue'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> MailingAddress <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token literal-property property\">street</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">city</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">zip</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Nhưng không 😭 nó sẽ thông báo trong console</p>\n<blockquote>\n<p>“Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. “</p>\n</blockquote>\n<p>Về nguyên tắc, chúng ta ko được thay đổi giá trị truyền vào từ <code class=\"language-inline-text\">prop</code>, nếu không lúc re-render nó sẽ ko còn đúng nữa.</p>\n<p><strong><code class=\"language-inline-text\">v-model</code> về bản chất nó là gì?</strong></p>\n<p><code class=\"language-inline-text\">v-model</code> nó làm cho chúng ta 2 việc</p>\n<ol>\n<li>bind giá trị vào biến <code class=\"language-inline-text\">value</code></li>\n<li>bind handle cho sự kiện <code class=\"language-inline-text\">v-on:input</code>.</li>\n</ol>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Form.vue</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        &lt;mailing-address\n            :value=\"address\"\n            @input=\"(newAddress) => {address = newAddress}\"\n        />\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    import MailingAddress from './Address.vue';\n    export default {\n        components: { MailingAddress },\n        data() {\n            return {\n                name: '',\n                email: '',\n                address: {\n                    street: '',\n                    city: '',\n                    state: '',\n                    zip: ''\n                }\n            }\n        }\n    }\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Cập nhập lại component Address của chúng ta</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">// Address.vue\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>street<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value.street<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>city<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value.city<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>state<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value.state<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>zip<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value.zip<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Object<span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">watch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Nếu nó thêm một cấp nữa thì sao? Ví dụ bên trong <code class=\"language-inline-text\">Address.vue</code> chúng ta nhét thêm một component cháu nội của <code class=\"language-inline-text\">Form</code> nữa</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">// Address.vue\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n        ...\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>state</span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value.state<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">import</span> State <span class=\"token keyword\">from</span> <span class=\"token string\">\"./State\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> State <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Object<span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">watch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>State component</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(state, abbreviation) in states<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">:value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>abbreviation<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">v-html</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>state<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/babel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">states</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token constant\">NY</span><span class=\"token operator\">:</span> <span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token constant\">WI</span><span class=\"token operator\">:</span> <span class=\"token string\">'Wisconsin'</span>\n                    <span class=\"token comment\">// + rest of the states</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Nó sẽ tiếp tục chửi bới chúng ta, vì chúng ta đi thay đổi prop nữa rồi, chúng ta cần đưa nó về <code class=\"language-inline-text\">computed</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// State.vue</span>\n<span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>select v<span class=\"token operator\">-</span>model<span class=\"token operator\">=</span><span class=\"token string\">\"localState\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>option v<span class=\"token operator\">-</span><span class=\"token keyword\">for</span><span class=\"token operator\">=</span><span class=\"token string\">\"(state, abbreviation) in states\"</span>\n                <span class=\"token operator\">:</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"abbreviation\"</span>\n                v<span class=\"token operator\">-</span>html<span class=\"token operator\">=</span><span class=\"token string\">\"state\"</span>\n        <span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>option<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>select<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/babel\"</span><span class=\"token operator\">></span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">states</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token constant\">NY</span><span class=\"token operator\">:</span> <span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token constant\">WI</span><span class=\"token operator\">:</span> <span class=\"token string\">'Wisconsin'</span>\n                    <span class=\"token comment\">// + rest of the states</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">localState</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>localState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> localState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>Cách này giống như chúng ta dùng controlled component trong React</p>\n<ul>\n<li>📜 <a href=\"https://zaengle.com/blog/using-v-model-on-nested-vue-components\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using v-model on Nested Vue Components</a></li>\n</ul>\n","cover_image":""}},{"node":{"id":"f005bfcfc06ce6ca0e3d0fefd0cccccf","title":"Thiết đặt ESLint cho dự án React","path":"/2019-11-23-thiet-dat-eslint/","date":"2019-11-23","timeToRead":2,"desc":"Các thiết đặt và công cụ cần thiết để eslint hoạt động tốt trong dự án React","content":"<p>ESLint có thể cài global, nhưng mình thấy nên cài trên từng project sẽ tiện hơn khi phải mang đi mang lại. Đây là những package cần thiết cho eslint chạy trên project React</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev\neslint\nbabel-eslint\neslint-config-airbnb\neslint-config-babel\neslint-config-prettier\neslint-plugin-import\neslint-plugin-react</code></pre></div>\n<p>Bên trong thư mục gốc của project, tạo một file <code class=\"language-inline-text\">.eslintrc</code>, với nội dung ngắn gọn thế này (muốn thêm bớt như thế này thì mọi người tự tùy chỉnh theo ý thích)</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"airbnb\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:prettier/recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:jsx-a11y/recommended\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"prettier\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"jsx-a11y\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel-eslint\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Mấy bộ config sẵn của <strong>airbnb</strong>, <strong>prettier</strong> và <strong>jsx-a11y</strong> nếu không đủ dùng, bạn có thể tự thêm mắm muối vào trong file này luôn.</p>\n<p>Thay vì mỗi lần phải chạy lint thủ công trên từng file/thư mục</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx eslint src/App.js</code></pre></div>\n<p><img src=\"https://miro.medium.com/max/1480/1*_P4YPpbVg4L-Utu7egF-vg.png\"></p>\n<p>Chúng ta có thể thêm một đoạn shortcut vào trong <code class=\"language-inline-text\">package.json</code></p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint .\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"lint:fix\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --fix .\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sau này chúng ta có thể chạy</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">// chạy kiểm tra\n<span class=\"token function\">npm</span> run lint\n\n// chạy sửa lỗi\n<span class=\"token function\">npm</span> run lint:fix</code></pre></div>\n<p>Đợi nó chạy mới báo lỗi cũng được, nếu đang xài VSCode, cài package <a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint#overview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vscode-eslint</a> này vào, nó sẽ highlight những lỗi eslint ngay trên giao diện không cần phải đợi chạy mới báo</p>\n<p><img src=\"https://miro.medium.com/max/2880/1*O6Q5VDIKC4UM_sfJOlE82w.png\" alt=\"Chưa cài ESLint\"></p>\n<p><img src=\"https://miro.medium.com/max/2880/1*n20krHQQGci7D347-4HELQ.png\" alt=\"Đã cài ESlint\"></p>\n<p>Để hỗ trợ team tối đa, bạn có thể <em>export</em> những thiết đặt của VSCode vào 1 file trong thư mục <code class=\"language-inline-text\">.vscode</code>, khi team nhận được thư mục project đồng thời cũng có luôn các plugin và thiết đặt cần thiết</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// file extensions.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"recommendations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"dbaeumer.vscode-eslint\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"esbenp.prettier-vscode\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"dzannotti.vscode-babel-coloring\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// File settings.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"eslint.validate\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"javascript\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"javascriptreact\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"language\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"typescript\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"autoFix\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"language\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"typescriptreact\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"autoFix\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslintConfig\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"react-app\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"shared-config\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"additional-rule\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"warn\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"overrides\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"**/*.ts?(x)\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"additional-typescript-only-rule\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"warn\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Chúng ta cũng nên dùng Prettier để format code lại trước khi commit lên git. Cài đặt các package cần thiết cho nhu cầu này</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">--save</span>\nhusky\nlint-staged\nprettier</code></pre></div>\n<ul>\n<li><code class=\"language-inline-text\">husky</code> sẽ giúp chúng ta tương tác với git hook</li>\n<li><code class=\"language-inline-text\">lint-stated</code> cho phép chúng ta chạy script trên các file đang nằm trong staged</li>\n<li><code class=\"language-inline-text\">prettier</code> là công cụ để format code</li>\n</ul>\n<p>Tiếp theo, mở file <code class=\"language-inline-text\">package.json</code></p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"husky\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"hooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"pre-commit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Bên dưới chỗ dependencies của file package.json</p>\n<div class=\"gridsome-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">\"dependencies\": {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   // ...\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> },\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> \"lint-staged\": {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   \"src/**/*.{js,jsx,ts,tsx,json,css,scss,md}\": [\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     \"prettier --write\",\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     \"git add\"\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   ]\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> },\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \"scripts\": {</span></span></code></pre></div>\n<p>Hết ! 😉</p>\n","cover_image":""}},{"node":{"id":"74ec92e68d7b65af2ebda9e8e698e511","title":"Gắn video làm background toàn màn hình","path":"/2019-11-12-lam-video-fullscreen-voi-react/","date":"2019-11-12","timeToRead":2,"desc":"Chia sẽ kỹ thuật làm background video để chạy full màn hình","content":"<p>Kết quả các bạn có thể xem trên trang mình mới làm\n<a href=\"http://chat-production.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://chat-production.com/</a></p>\n<p>Để có một cái video chạy toàn màn hình, chúng ta sẽ nghĩ ngay đến việc dùng thẻ <code class=\"language-inline-text\">&lt;video /></code> của HTML5, đặt nó trong một cái <code class=\"language-inline-text\">&lt;div/></code> có kích thước <code class=\"language-inline-text\">width: 100%</code>, buồn thay nó không đúng như chúng ta mong đợi.</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- HTML --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>videoContainer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">loop</span> <span class=\"token attr-name\">autoplay</span> <span class=\"token attr-name\">muted</span> <span class=\"token attr-name\">playsinline</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/show-reel.mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<blockquote>\n<p>Thêm <code class=\"language-inline-text\">playsinline</code> để có thể chạy trên IOS như iPhone</p>\n</blockquote>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 60vw<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token selector\">video</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>   \n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Thứ nhất là nó sẽ không tự scale ra 100% của màn hình, thứ 2 khi chúng ta kéo to thu nhỏ cửa sổ trình duyệt, tỷ lệ khung hình (ngang và đứng) cũng sẽ không đạt đúng tỉ lệ thật của video.</p>\n<p>Để video có thể thay đổi kích thước theo từng giá trị màn hình khác nhau, chúng ta phải dùng đến javascript và css</p>\n<div class=\"gridsome-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">#videoContainer </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 780px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 60vw<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">video </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100vw<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* canh video ngay giữa */</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span> <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">,</span> -50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Source này được lấy từ <a href=\"https://codetheory.in/html5-fullscreen-background-video/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codetheory.in/html5-fullscreen-background-video/</a>, mình sử dụng chung với React</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// JS</span>\n  <span class=\"token keyword\">var</span> video <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"video\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#videoContainer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">setVideoDimensions</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> w <span class=\"token operator\">=</span> video<span class=\"token punctuation\">.</span>videoWidth<span class=\"token punctuation\">,</span>\n      h <span class=\"token operator\">=</span> video<span class=\"token punctuation\">.</span>videoHeight<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Intrinsic Ratio</span>\n    <span class=\"token comment\">// Will be more than 1 if W > H and less if W &lt; H</span>\n    <span class=\"token keyword\">var</span> videoRatio <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">/</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Get the container's computed styles</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// Also calculate the min dimensions required (this will be</span>\n    <span class=\"token comment\">// the container dimensions)</span>\n    <span class=\"token keyword\">var</span> containerStyles <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">getComputedStyle</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      minW <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>containerStyles<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      minH <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>containerStyles<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// What's the min:intrinsic dimensions</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// The idea is to get which of the container dimension</span>\n    <span class=\"token comment\">// has a higher value when compared with the equivalents</span>\n    <span class=\"token comment\">// of the video. Imagine a 1200x700 container and</span>\n    <span class=\"token comment\">// 1000x500 video. Then in order to find the right balance</span>\n    <span class=\"token comment\">// and do minimum scaling, we have to find the dimension</span>\n    <span class=\"token comment\">// with higher ratio.</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// Ex: 1200/1000 = 1.2 and 700/500 = 1.4 - So it is best to</span>\n    <span class=\"token comment\">// scale 500 to 700 and then calculate what should be the</span>\n    <span class=\"token comment\">// right width. If we scale 1000 to 1200 then the height</span>\n    <span class=\"token comment\">// will become 600 proportionately.</span>\n    <span class=\"token keyword\">var</span> widthRatio <span class=\"token operator\">=</span> minW <span class=\"token operator\">/</span> w<span class=\"token punctuation\">,</span>\n      heightRatio <span class=\"token operator\">=</span> minH <span class=\"token operator\">/</span> h<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Whichever ratio is more, the scaling</span>\n    <span class=\"token comment\">// has to be done over that dimension</span>\n    <span class=\"token keyword\">let</span> newWidth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> newHeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>widthRatio <span class=\"token operator\">></span> heightRatio<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      newWidth <span class=\"token operator\">=</span> minW<span class=\"token punctuation\">;</span>\n      newHeight <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>newWidth <span class=\"token operator\">/</span> videoRatio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      newHeight <span class=\"token operator\">=</span> minH<span class=\"token punctuation\">;</span>\n      newWidth <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>newHeight <span class=\"token operator\">*</span> videoRatio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    video<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> newWidth <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span>\n    video<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> newHeight <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  video<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loadedmetadata\"</span><span class=\"token punctuation\">,</span> setVideoDimensions<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resize\"</span><span class=\"token punctuation\">,</span> setVideoDimensions<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Đoạn js trên để đảm bảo kích thước của video được scale ra hết khung hình và thay đổi cho phù hợp khi trình duyệt thay đổi kích thước</p>\n<blockquote>\n<p>Dùng 2 listener <code class=\"language-inline-text\">loadedmetadata</code> trên video và <code class=\"language-inline-text\">resize</code> trên window để chỉnh lại kích thước thẻ video</p>\n</blockquote>\n","cover_image":""}},{"node":{"id":"650b9ee01e08b364ddbc6c3fe3f7db16","title":"Tùy biến code theo tốc độ mạng","path":"/2019-08-23-tuy-bien-code-theo-toc-do-mang/","date":"2019-08-23","timeToRead":2,"desc":"Responsive với CSS chúng ta tùy biến code bằng @media, vậy với JS, ta thêm các điều kiện theo tốc độ mạng bằng cách nào?","content":"<p>Responsive với CSS chúng ta tùy biến code bằng @media, vậy với JS, ta thêm các điều kiện theo tốc độ mạng bằng cách nào?</p>\n<p>Chúng ta sẽ sử dụng API của trình duyệt <code class=\"language-inline-text\">navigator.connection.effectiveType</code> để tối ưu theo tốc độ kết nối mạng của user</p>\n<p>Các thông tin về mạng của user có thể lấy qua <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Navigator/connection\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">navigator.connection</a>, trong đó có giá trị <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/effectiveType\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">effectiveType</a> là một trong các giá trị 'slow-2g', '2g', '3g', '4g'</p>\n<p>Chrome 62 trở về trước, chúng ta chỉ có giá trị <code class=\"language-inline-text\">navigator.connection.type</code>, giá trị này không phải tốc độ mạng. Mặc dù <code class=\"language-inline-text\">type</code> là wifi, nhưng lại là một wifi cùi mía, tốc độ ngang ngửa 2g, Chrome sau này có <em>phát minh</em> thêm giá trị <code class=\"language-inline-text\">effectiveType</code>, tính theo tốc độ đi-về của cục dữ liệu cho chính xác.</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--T54UF-7H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/wqeuhx12frs3k126bmrv.png\" alt=\"Đáp ứng theo tốc độ mạng\"></p>\n<p>Còn trường hợp, trong nhà có thanh niên nào đó mở link down film Nhật, tốc độ mạng đang \"như tia chớp\", thì chuyển sang \"cùi mía\", biết được sự thay đổi này cần add thêm cái listener cho đối tượng <code class=\"language-inline-text\">navigator.connection</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">onConnectionChange</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n        rtt<span class=\"token punctuation\">,</span>\n        downlink<span class=\"token punctuation\">,</span>\n        effectiveType<span class=\"token punctuation\">,</span>\n        saveData\n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> navigator<span class=\"token punctuation\">.</span>connection\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Effective network connection type: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>effectiveType<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Downlink Speed/bandwidth estimate: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>downlink<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">Mb/s</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Round-trip time estimate: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>rtt<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">ms</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Data-saver mode on/requested: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>saveData<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nnavigator<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> onConnectionChange<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Dùng Chrome DevTools để giả lập các tốc độ mạng khác nhau để test, chứ đừng down film để test tốc độ</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gdIz0VyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/t9zadl65erjhll14zbcp.png\" alt=\"Đáp ứng theo tốc độ mạng\"></p>\n<p>Mấy trình duyệt xịn xịn như Chrome, Opera, Firefox là dùng được <code class=\"language-inline-text\">navigator.connection</code> chứ không riêng gì Chrome</p>\n<p>Dùng một regex để gom mấy kết quả <em>gờ gờ</em> là mạng chậm hết, 3g Việt Nam thì cũng như 2g thôi</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\slow-2g|2g|3g</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span>effectiveType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connection <span class=\"token operator\">=</span> <span class=\"token string\">\"slow\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connection <span class=\"token operator\">=</span> <span class=\"token string\">\"fast\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Mình sử dụng Vue.js, không phải HTML thuần nên đừng thắc mắc sao có cái <code class=\"language-inline-text\">v-if</code> nhé</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>home<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>connection === 'fast'<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\">&lt;!-- 1.3MB video --></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>theatre<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autoplay</span> <span class=\"token attr-name\">muted</span> <span class=\"token attr-name\">playsinline</span> <span class=\"token attr-name\">control</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/static/img/doodle-theatre.webm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/webm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/static/img/doodle-theatre.mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/mp4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 28KB image --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>connection === 'slow'<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>theatre<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/static/img/doodle-theatre-poster.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_tvmKtK---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/8jukzhdu62nbghw0cfx3.png\" alt=\"Đáp ứng theo tốc độ mạng\"></p>\n<p>Nếu bạn viết React, có <a href=\"https://mxb.dev/blog/connection-aware-components/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bài này cũng hay</a>, nói về việc làm component đáp ứng theo tốc độ kết nối</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://dev.to/addyosmani/adaptive-serving-using-javascript-and-the-network-information-api-331p\">📜 Adaptive Serving using JavaScript and the Network Information API</a></p>\n","cover_image":""}},{"node":{"id":"f590cf684411f41b712e0f08e333c8e4","title":"6 ví dụ để bạn yêu luôn observable","path":"/2019-07-09-6-vi-du-giup-ban-yeu-luon-rxjs-observable/","date":"2019-07-09","timeToRead":7,"desc":"Thêm những lý do để dụ dỗ bạn xài Observable","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#Handle-c%C3%A1c-event-b%E1%BA%B1ng-Observable\">Handle các event bằng Observable</a></li>\n<li><a href=\"#Operator-operator\">Operator, operator</a></li>\n<li><a href=\"#Ai-c%C3%B3-th%E1%BB%83-l%C3%A0-Observable\">Ai có thể là Observable</a></li>\n<li><a href=\"#Observable-cho-c%C3%A1c-HTTP-request\">Observable cho các HTTP request</a></li>\n<li><a href=\"#K%E1%BA%BFt-h%E1%BB%A3p-c%C3%A1c-Observable\">Kết hợp các Observable</a></li>\n<li><a href=\"#K%E1%BA%BFt\">Kết</a></li>\n</ul>\n<!-- /TOC -->\n<p><strong>Observable</strong> mình dịch ra tiếng việt thế này cho bạn dễ hình dung. Một khi bạn bật chế độ <code class=\"language-inline-text\">observable</code> với một đứa con gái nào đó, là bạn đang trong giai đoạn bị nó ám ảnh, nhất cử nhất động của nó bạn điều để ý, nó hắc xì bạn cũng biết, một tuần nó mặc mấy bộ đồ bạn cũng biết. Chỉ cần nghe tiếng bước chân là bạn biết được hôm nay nó mang đôi dép gì (mức độ này hơi kinh khủng lắm rồi) là bạn có những phản xạ vô điều kiện bộc phát nơi cửa miệng \"Chiều nay trời mưa nhe em, mang dép lào đi cho chuẩn\". Phản xạ này là gọi là <strong>subscription</strong></p>\n<p>Rồi quay lại với vấn đề kỹ thuật, bài này không giải thích rõ Observable pattern, các khái niệm chính của nó, nếu muốn bạn đọc lại bài này trước đây <a href=\"https://luubinhan.github.io/blog/2018-10-30-gioi-thieu-reactive-programing-trong-javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">có viết rồi</a>, như cái tựa bài viết nó spoil hết cái nội dung rồi \"Ví dụ để thấy tại sao chúng ta nên <em>bật chế độ</em> Observable với một em gái nào đó\"</p>\n<p>Thần chú mình muốn bạn thuộc lầu</p>\n<blockquote>\n<p>Lập trình Reactive là làm việc với luồng dữ liệu bất đồng bộ</p>\n</blockquote>\n<p>Lại phải giải thích câu này chút, <strong>Nếu những gì diễn ra trên ứng dụng đang xảy ra một cách bất đồng bộ, khả năng rất cao là Observable sẽ giúp ích cho cuộc sống của anh em chúng ta bớt khổ hơn</strong>.</p>\n<p>Có nhiều cách làm và thư viện handle vụ luồng dữ liệu bất đồng bộ này, tuy nhiên, Observable có gì mà cool, sắp được chuẩn hóa và đưa vào ECMAScript. Thư viện RxJS đang được sử dụng rộng rãi và quá ngon rồi.</p>\n<p>Rồi vô luôn ví dụ nhe</p>\n<h2 id=\"handle-các-event-bằng-observable\"><a href=\"#handle-c%C3%A1c-event-b%E1%BA%B1ng-observable\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Handle các event bằng Observable</h2>\n<p>Chúng ta có 1 button, khi button này click tạo ra một chuỗi ngẫu nhiên. Viết bằng cả 2 cách javascript thuần, và sử dụng RxJS</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'output'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbutton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    output<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Bằng RxJS nè</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'output'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nRx<span class=\"token punctuation\">.</span>Observable\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        output<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Nó dài hơn khi viết javascript thuần mà man 😂. Chi mà phức tạp vậy? Đúng luôn, nhưng giờ thêm yêu cầu này vào thì sao: <em>Ở mỗi lần click đến bội số của 3 ( 3,6,9,12,...) thì mới random một string mới</em></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Rx<span class=\"token punctuation\">.</span>Observable\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">bufferCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// một dòng duy nhất</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        output<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Vậy bạn viết JS thôi thì sao, khỏi nói cũng biết nó sẽ dài dòng hơn.</p>\n<h2 id=\"operator-operator\"><a href=\"#operator-operator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Operator, operator</h2>\n<p>Trong ví dụ trên, <code class=\"language-inline-text\">.bufferCount</code> *đã cho thấy sức mạnh vượt trội<strong> so với cách thông thường. Có thể nói thế này, </strong>chúng ta xài Observable này là vì những gì chúng ta làm được bằng operator**. Trong thư viện RxJS nó cả tá Operator tha hồ mà chơi.</p>\n<p>Một ví dụ khác, cũng là vụ random string ở trên, mà giờ chỉ muốn random <strong>khi nó là một cú triple click</strong> (một phát 3 nháy, không phải double click nhoa)</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> click$ <span class=\"token operator\">=</span> Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nclick$<span class=\"token punctuation\">.</span>Observable\n    <span class=\"token punctuation\">.</span><span class=\"token function\">bufferWhen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        click$<span class=\"token punctuation\">.</span><span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// kkhoảng thời gian của một cú 3 click</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">events</span> <span class=\"token operator\">=></span> events<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        output<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>DỊch ra ngôn ngữ con người nó sẽ như thế này, <strong>trong khoảng thời gian là 400ms, trong đám event được emit (tụi này được đưa vào mảng <code class=\"language-inline-text\">events</code>), nếu mảng này lớn hơn hoặc bằng 3, thực hiện đống việc đã đăng ký bên dưới <code class=\"language-inline-text\">subscribe</code></strong></p>\n<p>Bạn đã bắt đầu yêu Observable chưa? Mình đã khoái khoái rồi đó.</p>\n<h2 id=\"ai-có-thể-là--observable\"><a href=\"#ai-c%C3%B3-th%E1%BB%83-l%C3%A0--observable\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ai có thể là  Observable</h2>\n<p>Đơn giản, bất kể già trẻ lớn bé, trai gái, nếu RxJS có hàm ( khi nãy là <code class=\"language-inline-text\">.fromEvent</code>) thì chúng ta có thể biến nó thành đối tượng bị theo dõi liên tục.</p>\n<h2 id=\"observable-cho-các-http-request\"><a href=\"#observable-cho-c%C3%A1c-http-request\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Observable cho các HTTP request</h2>\n<p>Một sức mạnh <em>siêu nhiên</em> khác của RxJS: xử lý mấy em HTTP request rất mượt mà</p>\n<p>Ví dụ, fetching một danh sách album và render.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> albumsApiUrl <span class=\"token operator\">=</span> <span class=\"token string\">'https://jsonplaceholder.typicode.com/albums'</span><span class=\"token punctuation\">;</span>\n\nRx<span class=\"token punctuation\">.</span>Observable\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span>albumsApiUrl<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>\n        <span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span></code></pre></div>\n<p>Trộn chung với ví dụ ở trên, chúng ta làm cái tính năng awsome sau, click  là có danh sách album ngẫu nhiên</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Rx<span class=\"token punctuation\">.</span>Observable\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>getAlbums<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>\n        render<span class=\"token punctuation\">,</span>\n        <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getAlbums</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> userId <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://jsonplaceholder.typicode.com/albums?userId=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n        <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Observables 4\" src=\"//codepen.io/mmiszy/embed/WZOJjy/?height=265&theme-id=0&default-tab=js,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/mmiszy/pen/WZOJjy/'>Observables 4</a> by Michał Miszczyszyn\n  (<a href='https://codepen.io/mmiszy'>@mmiszy</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>Ví dụ trên có sử dụng operator <code class=\"language-inline-text\">flatMap</code>, 1 trong những operator siêu kinh điển của RxJS, cho phép merge 2 mảng kiểu Observable thành 1</p>\n<p>Nếu chúng ta click liên tục trong thời gian ngắn, là có vấn đề, re-render nhiều lần, chúng ta cũng ko xác định được request nào được resolve cuối cùng. Cụ thể là thế này, có thể thằng xuất phát trước lại về đích sau cùng, chuyện của network ai mà biết được thời điểm đó nó download film gì làm chậm mạng, thằng request sau có khi lại về đích trước, như vậy thì dùng cục response lúc nào để render, mình muốn response của thằng request cuối cùng.</p>\n<p>Bạn muốn, trong công cuộc tán gái, đứa nào ở lại đến giây phút cuối cùng là đứa chiến thắng, bạn sẽ dẹp luôn những đứa nào thả thính trước đó? Ví von như vậy cũng chưa chuẩn, phải là đứa nào đến sau cùng thì dữ lại, dẹp mẹ tụi tới trước (thế này thì bất công vl mấy bạn)</p>\n<p>RxJS làm được chuyện đó không? Có chứ, <strong>mọi thứ đã có operator</strong>, chuyển qua dùng <code class=\"language-inline-text\">switchMap</code>, sẽ chỉ có <strong>response cuối cùng được render</strong>, mấy request trước đó sẽ bị cancel hết</p>\n<p><img src=\"https://res.cloudinary.com/dukp6c7f7/image/upload/f_auto,fl_lossy,q_auto/s3-ghost/2017/09/Screen_Shot_2017_09_29_at_9_24_06_PM-1506713083152.png\"></p>\n<div class=\"gridsome-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Rx<span class=\"token punctuation\">.</span>Observable\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span>\n<span class=\"gridsome-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">switchMap</span><span class=\"token punctuation\">(</span>getAlbums<span class=\"token punctuation\">)</span></span>    <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>\n        render<span class=\"token punctuation\">,</span>\n        <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"kết-hợp-các-observable\"><a href=\"#k%E1%BA%BFt-h%E1%BB%A3p-c%C3%A1c-observable\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết hợp các Observable</h2>\n<p>Một use case khác mà chúng ta gặp hoài. Chức năng filter hoạt động như sau: cho tụi user nhập vào <code class=\"language-inline-text\">user id</code> bằng <code class=\"language-inline-text\">&lt;input /></code>, và chọn thể loại âm nhạc nó muốn bằng <code class=\"language-inline-text\">&lt;select /></code>. Điều quan trọng là chỉ tạo request mới khi cả 2 giá trị trong đó điều có dữ liệu, và re-render khi một trong 2 giá trị này bị thay đổi.</p>\n<p>Tạo Observable trước nhé</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> id$ <span class=\"token operator\">=</span> Rx<span class=\"token punctuation\">.</span>Observable\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> resource$ <span class=\"token operator\">=</span> Rx<span class=\"token punctuation\">.</span>Observable\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">,</span> <span class=\"token string\">'change'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Chúng ta phải hợp thể 2 thằng trên vào một, để khi một trong 2 thằng có thay đổi chúng ta lấy được giá trị sau cùng của cả 2. <strong>mọi thứ đã có operator</strong>, nhiều lắm, ở đây dùng <code class=\"language-inline-text\">combineLatest</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Rx<span class=\"token punctuation\">.</span>Observable\n    <span class=\"token punctuation\">.</span><span class=\"token function\">combineLatest</span><span class=\"token punctuation\">(</span>id$<span class=\"token punctuation\">,</span> resource$<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">switchMap</span><span class=\"token punctuation\">(</span>getResource<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>render<span class=\"token punctuation\">)</span></code></pre></div>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Observables 6\" src=\"//codepen.io/mmiszy/embed/mBwLoX/?height=265&theme-id=0&default-tab=js,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/mmiszy/pen/mBwLoX/'>Observables 6</a> by Michał Miszczyszyn\n  (<a href='https://codepen.io/mmiszy'>@mmiszy</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<h2 id=\"kết\"><a href=\"#k%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết</h2>\n<p>Bạn đã thấy sử dụng Observable thú vị dường nào chưa? Nếu câu trả lời là \"Có ❤️, trọn đời yêu em\", bạn hãy nhào vô document của nó để nghiên cứu chuyên sâu hơn. Hoặc <a href=\"https://luubinhan.github.io/blog/2018-10-30-gioi-thieu-reactive-programing-trong-javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">đọc lại bài trước đây của mình</a>.</p>\n<p>Nếu câu trả lời là \"No 💩, anh éo care mấy đứa ạ\". Thì bạn cũng nên bớt bớt đối xử tệ với nó đi, vì trong tương lai JS sẽ đưa nào vào như một object chính thức luôn, không chạy đằng trời được đâu các bạn ạ.</p>\n<p>Hy vọng anh em hôm nay đã học thêm được cái gì đó thú vị, hẹn gặp lại anh em vào một viết thú vị khác.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://x-team.com/blog/rxjs-observables/\">6 SIMPLE EXAMPLES WHICH WILL MAKE YOU LOVE OBSERVABLES (RXJS 5)</a></p>\n","cover_image":""}},{"node":{"id":"762d5d59a6c3d325b575e796c2dc160c","title":"3 bước tối ưu hiệu năng React App bằng các API mới của React","path":"/2019-06-17-huong-dan-toi-uu-hieu-nang-react-app/","date":"2019-06-17","timeToRead":3,"desc":"Bài viết hướng dẫn tối ưu hiệu năng bằng memo, useMemo, useCallback","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#Reactmemo\">React.memo</a></li>\n<li><a href=\"#useMemo\">useMemo</a></li>\n<li><a href=\"#useCallback\">useCallback</a></li>\n</ul>\n<!-- /TOC -->\n<p>Khi sử dụng function component, React cung cấp 3 phương thức để tối ưu: <code class=\"language-inline-text\">React.memo</code>, <code class=\"language-inline-text\">useMemo</code>, và <code class=\"language-inline-text\">useCallback</code>, chúng ta cùng điểm qua 3 thằng này</p>\n<p>Xét ví dụ</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ListPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> title <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Header title<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>List listItems<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Component như trên (<code class=\"language-inline-text\">&lt;ListPage /></code>), khi nhận một <code class=\"language-inline-text\">data</code> mới, tất cả component con bên trong là <code class=\"language-inline-text\">Header</code> và <code class=\"language-inline-text\">List</code> sẽ re-render, mặc dù cái <code class=\"language-inline-text\">title</code> không hề thay đổi. Nếu <code class=\"language-inline-text\">Header</code> không tốn quá nhiều thời gian để render thì ko có vấn đề. Ngược lại dĩ nhiên là nếu render <code class=\"language-inline-text\">Header</code> tốn rất nhiều thời gian, chúng ta phải <strong>xây lại</strong> để tối ưu hơn.</p>\n<h2 id=\"reactmemo\"><a href=\"#reactmemo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>React.memo</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> MyComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* render using props */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-inline-text\">React.memo</code> là một HOC, <a href=\"https://luubinhan.github.io/blog/2018-11-04-gioi-thieu-react-memo-moi-trong-react-16\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">đọc lại bài này</a>, nó sẽ <strong>nhớ</strong> kết quả render của component. Nếu component trả về một output giống hệt cho cùng một prop, đưa nó vào <code class=\"language-inline-text\">React.memo</code> sẽ tiết kiệm tí thời gian.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Header</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Header<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Wrap lại trong <code class=\"language-inline-text\">React.memo</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Header</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>Header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"usememo\"><a href=\"#usememo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useMemo</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> memoizedValue <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">computeExpensiveValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Cũng tương tự nó sẽ nhớ kết quả trả về, tuy nhiên nó sẽ có thêm phần gọi là <code class=\"language-inline-text\">array dependencies</code>, là một danh sách các <strong>thằng</strong> mà nó phụ thuộc, nếu giá trị phụ thuộc thay đổi nó mới rọi render lại, không thể trả thẳng kết quả lần trước</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> widgetList <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> \n        widgets<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">w</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>w<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">totalPrice</span><span class=\"token operator\">:</span> <span class=\"token function\">someComplexFunction</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">estimatedDeliveryDate</span><span class=\"token operator\">:</span> <span class=\"token function\">someOtherComplexFunction</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span>warehouse<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>widgets<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Trong ví dụ trên, 1 component nhận một danh sách các widget, các widget này trước khi truyền vào sẽ được thêm vào 2 giá trị là <em>total price</em> và <em>delivery date</em>. Nếu giá trị các widget không thay đổi khi render lại component, thì không cần thiết phải chạy qua các hàm <code class=\"language-inline-text\">someComplexFunction</code>, <code class=\"language-inline-text\">someOtherComplexFunction</code>. Sử dụng <code class=\"language-inline-text\">useMemo</code> để ghi nhớ kết quả và bỏ qua trong trường hợp đó.</p>\n<h2 id=\"usecallback\"><a href=\"#usecallback\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useCallback</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> memoizedCallback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Mục đích để chặn các lần render không cần thiết giữa component cha và con</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Parent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showExtraDetails<span class=\"token punctuation\">,</span> setShowExtraDetails<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Child onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">showData</span><span class=\"token punctuation\">(</span>showExtraDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>1 component như vậy sẽ re-render cả cha và con cùng lúc, thậm chí component con có là <code class=\"language-inline-text\">PureComponent</code> được wrap bên trong <code class=\"language-inline-text\">React.memo</code> đi nữa, bởi vì <code class=\"language-inline-text\">onClick</code> sẽ khác nhau trên mỗi lần render. Sử dụng <code class=\"language-inline-text\">useCallback</code> chúng ta viết lại như sau</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Parent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showExtraDetails<span class=\"token punctuation\">,</span> setShowExtraDetails<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> handleClick <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">showData</span><span class=\"token punctuation\">(</span>showExtraDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span>showExtraDetails<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Child onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Như vậy hàm <code class=\"language-inline-text\">handleClick</code> sẽ giống nhau cho các lần render khác nhau, nó chỉ khác khi <code class=\"language-inline-text\">showExtraDetails</code> thay đổi.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://headway.io/blog/react-optimize-components-memo-usememo-usecallback\">React: Optimize Components with React.memo, useMemo, and useCallback</a></p>\n","cover_image":""}},{"node":{"id":"ed20a83a12390cec12e47b8a4c0b97b8","title":"Không cho cuộn trang khi mở Modal","path":"/2019-06-07-huong-dang-xu-ly-modal-va-scroll/","date":"2019-06-07","timeToRead":1,"desc":"Xử lý cuộn trang khi mở modal","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#C%C3%A1ch-%C4%91%C6%A1n-gi%E1%BA%A3n-nh%E1%BA%A5t\">Cách đơn giản nhất</a></li>\n<li><a href=\"#Tr%C3%AAn-mobile\">Trên mobile</a></li>\n<li><a href=\"#Gi%E1%BA%A3i-ph%C3%A1p-cu%E1%BB%91i-c%C3%B9ng\">Giải pháp cuối cùng</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"cách-đơn-giản-nhất\"><a href=\"#c%C3%A1ch-%C4%91%C6%A1n-gi%E1%BA%A3n-nh%E1%BA%A5t\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cách đơn giản nhất</h2>\n<p>Đặt độ cao của body = 100% của viewport, sau đó cho overflow thành hidden, thêm mục padding right = 15 để fix trường hợp trang đã có thanh cuộn rồi</p>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body.model-open</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">overflow-y</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding-right</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"trên-mobile\"><a href=\"#tr%C3%AAn-mobile\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Trên mobile</h2>\n<p>Cách trên chạy tốt trên desktop và android, buồn thay iOS vẫn cuộn được, thêm <code class=\"language-inline-text\">position fixed</code> để sửa bug này</p>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tuy nhiên, cách này vẫn bị vấn để bự khác, nếu cuộn xuống dưới, mở modal lên, đóng lại thì trang cuộn lên đầu</p>\n<h2 id=\"giải-pháp-cuối-cùng\"><a href=\"#gi%E1%BA%A3i-ph%C3%A1p-cu%E1%BB%91i-c%C3%B9ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giải pháp cuối cùng</h2>\n<p>Đi đâu rồi cũng về javascript thôi. Lưu lại vị trí scroll, set lại vị trí này khi đóng modal</p>\n<p>Khi bung modal</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showDialog</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dialog'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'show'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> scrollY <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--scroll-y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n  body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> <span class=\"token string\">'fixed'</span><span class=\"token punctuation\">;</span>\n  body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>scrollY<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Khi đóng modal</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">closeDialog</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> scrollY <span class=\"token operator\">=</span> body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">;</span>\n  body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">scrollTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>scrollY <span class=\"token operator\">||</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dialog'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'show'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--scroll-y'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>window<span class=\"token punctuation\">.</span>scrollY<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Avoid body scrollable in safari when modal dialog shown\" src=\"//codepen.io/geoffgraham/embed/LogERe/?height=265&theme-id=0&default-tab=html,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/geoffgraham/pen/LogERe/'>Avoid body scrollable in safari when modal dialog shown</a> by Geoff Graham\n  (<a href='https://codepen.io/geoffgraham'>@geoffgraham</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://css-tricks.com/prevent-page-scrolling-when-a-modal-is-open/\">Prevent Page Scrolling When a Modal is Open</a></p>\n","cover_image":""}},{"node":{"id":"d6b471fa675ea8216c96c6740a2f1218","title":"Một vài ứng dụng hay ho của reduce","path":"/2019-05-26-ung-dung-cao-cap-cua-reduce/","date":"2019-05-26","timeToRead":5,"desc":"Hãy học sử dụng reduce, vượt qua những ví vụ căn bản bằng cộng, trừ, nhân, chia","content":"<p>Khi đọc tài liệu trên <a href=\"https://developer.mozilla.org/vi/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN về Array.prototype.reduce()</a> chúng ta sẽ có cái nhìn khá tổng quát về <code class=\"language-inline-text\">.reduce()</code>, những ví dụ cộng, nhân số cơ bản để chúng ta dễ nắm cách hàm <code class=\"language-inline-text\">.reduce()</code> chạy. Tuy nhiên vì nó quá căn bản, nên bạn sẽ không thể thấy hết được sự <strong>lợi hại</strong> của <code class=\"language-inline-text\">.reduce()</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> sampleArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> sampleArray<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tổng:'</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ⦘ Tổng: 10</span>\n\n<span class=\"token keyword\">const</span> product <span class=\"token operator\">=</span> sampleArray<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>multiply<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nhân lại bằng:'</span><span class=\"token punctuation\">,</span> product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ⦘ Nhân lại bằng: 24</span></code></pre></div>\n<p>Có thể nhiều người không để ý, biến tích lũy (accumulator = tham số đầu tiên) và giá trị hiện tại (tham số thứ 2) không nhất thiết phải giống nhau.</p>\n<p>Chúng ta có thể khai báo một hàm reducer như sau là hoàn toàn hợp lệ</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fizzBuzzReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element <span class=\"token operator\">%</span> <span class=\"token number\">15</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>acc<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">Fizz Buzz\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>acc<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">Fizz\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>acc<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">Buzz\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>acc<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>element<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>fizzBuzzReducer<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Với bài viết này chúng ta cũng xem xét những ứng dụng khác, <strong>cao cấp</strong> hơn của <code class=\"language-inline-text\">.reduce()</code>, sử dụng việc thay đổi <em>kiểu</em> của biến tích lũy như ví dụ trên, mở ra nhiều ứng dụng bảo đảm là <strong>hay</strong></p>\n<h2 id=\"chuyển-một-array-sang-object\"><a href=\"#chuy%E1%BB%83n-m%E1%BB%99t-array-sang-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chuyển một array sang object</h2>\n<p>Chúng ta có một array thế này</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> peopleArr  <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span>    <span class=\"token string\">'glestrade'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">displayname</span><span class=\"token operator\">:</span> <span class=\"token string\">'Inspector Lestrade'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span>       <span class=\"token string\">'glestrade@met.police.uk'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">authHash</span><span class=\"token operator\">:</span>    <span class=\"token string\">'bdbf9920f42242defd9a7f76451f4f1d'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">lastSeen</span><span class=\"token operator\">:</span>    <span class=\"token string\">'2019-05-13T11:07:22+00:00'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span>    <span class=\"token string\">'mholmes'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">displayname</span><span class=\"token operator\">:</span> <span class=\"token string\">'Mycroft Holmes'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span>       <span class=\"token string\">'mholmes@gov.uk'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">authHash</span><span class=\"token operator\">:</span>    <span class=\"token string\">'b4d04ad5c4c6483cfea030ff4e7c70bc'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">lastSeen</span><span class=\"token operator\">:</span>    <span class=\"token string\">'2019-05-10T11:21:36+00:00'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span>    <span class=\"token string\">'iadler'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">displayname</span><span class=\"token operator\">:</span> <span class=\"token string\">'Irene Adler'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span>       <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">authHash</span><span class=\"token operator\">:</span>    <span class=\"token string\">'319d55944f13760af0a07bf24bd1de28'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">lastSeen</span><span class=\"token operator\">:</span>    <span class=\"token string\">'2019-05-17T11:12:12+00:00'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nếu cần chuyển nó qua dạng object, lấy giá trị <code class=\"language-inline-text\">username</code> làm key</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">keyByUsernameReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>acc<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>person<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> person <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> peopleObj <span class=\"token operator\">=</span> peopleArr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>keyByUsernameReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ⦘ {</span>\n<span class=\"token comment\">//     \"glestrade\": {</span>\n<span class=\"token comment\">//         \"username\":    \"glestrade\",</span>\n<span class=\"token comment\">//         \"displayname\": \"Inspector Lestrade\",</span>\n<span class=\"token comment\">//         \"email\":       \"glestrade@met.police.uk\",</span>\n<span class=\"token comment\">//         \"authHash\":    \"bdbf9920f42242defd9a7f76451f4f1d\",</span>\n<span class=\"token comment\">//          \"lastSeen\":    \"2019-05-13T11:07:22+00:00\"</span>\n<span class=\"token comment\">//     },</span>\n<span class=\"token comment\">//     \"mholmes\": {</span>\n<span class=\"token comment\">//         \"username\":    \"mholmes\",</span>\n<span class=\"token comment\">//         \"displayname\": \"Mycroft Holmes\",</span>\n<span class=\"token comment\">//         \"email\":       \"mholmes@gov.uk\",</span>\n<span class=\"token comment\">//         \"authHash\":    \"b4d04ad5c4c6483cfea030ff4e7c70bc\",</span>\n<span class=\"token comment\">//          \"lastSeen\":    \"2019-05-10T11:21:36+00:00\"</span>\n<span class=\"token comment\">//     },</span>\n<span class=\"token comment\">//     \"iadler\":{</span>\n<span class=\"token comment\">//         \"username\":    \"iadler\",</span>\n<span class=\"token comment\">//         \"displayname\": \"Irene Adler\",</span>\n<span class=\"token comment\">//         \"email\":       null,</span>\n<span class=\"token comment\">//         \"authHash\":    \"319d55944f13760af0a07bf24bd1de28\",</span>\n<span class=\"token comment\">//          \"lastSeen\":    \"2019-05-17T11:12:12+00:00\"</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">// }</span></code></pre></div>\n<h2 id=\"chuyển-một-array-thành-một-array-khác\"><a href=\"#chuy%E1%BB%83n-m%E1%BB%99t-array-th%C3%A0nh-m%E1%BB%99t-array-kh%C3%A1c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chuyển một array thành một array khác</h2>\n<p>Bình thường khi nghĩ tới <code class=\"language-inline-text\">.reduce()</code> chúng ta nghĩ tới viết lấy một mảng sau đó đưa nó về 1 giá trị bằng biến tích lũy, giá trị này hoàn toàn có thể là một array khác.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fileLines <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'Inspector Algar,Inspector Bardle,Mr. Barker,Inspector Barton'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Inspector Baynes,Inspector Bradstreet,Inspector Sam Brown'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Monsieur Dubugue,Birdy Edwards,Inspector Forbes,Inspector Forrester'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Inspector Gregory,Inspector Tobias Gregson,Inspector Hill'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Inspector Stanley Hopkins,Inspector Athelney Jones'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">splitLineReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> line</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">,</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> investigators <span class=\"token operator\">=</span> fileLines<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>splitLineReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [</span>\n<span class=\"token comment\">//   \"Inspector Algar\",</span>\n<span class=\"token comment\">//   \"Inspector Bardle\",</span>\n<span class=\"token comment\">//   \"Mr. Barker\",</span>\n<span class=\"token comment\">//   \"Inspector Barton\",</span>\n<span class=\"token comment\">//   \"Inspector Baynes\",</span>\n<span class=\"token comment\">//   \"Inspector Bradstreet\",</span>\n<span class=\"token comment\">//   \"Inspector Sam Brown\",</span>\n<span class=\"token comment\">//   \"Monsieur Dubugue\",</span>\n<span class=\"token comment\">//   \"Birdy Edwards\",</span>\n<span class=\"token comment\">//   \"Inspector Forbes\",</span>\n<span class=\"token comment\">//   \"Inspector Forrester\",</span>\n<span class=\"token comment\">//   \"Inspector Gregory\",</span>\n<span class=\"token comment\">//   \"Inspector Tobias Gregson\",</span>\n<span class=\"token comment\">//   \"Inspector Hill\",</span>\n<span class=\"token comment\">//   \"Inspector Stanley Hopkins\",</span>\n<span class=\"token comment\">//   \"Inspector Athelney Jones\"</span>\n<span class=\"token comment\">// ]</span></code></pre></div>\n<p>Tất nhiên trong điều kiện có thể sử dụng <code class=\"language-inline-text\">.flatMap()</code> (  không hỗ trợ trên edge và IE) thì nên dùng <code class=\"language-inline-text\">.flatMap()</code> thay cho reduce</p>\n<h2 id=\"thực-hiện-2-tính-toán-cùng-lúc\"><a href=\"#th%E1%BB%B1c-hi%E1%BB%87n-2-t%C3%ADnh-to%C3%A1n-c%C3%B9ng-l%C3%BAc\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thực hiện 2 tính toán cùng lúc</h2>\n<p>Nếu cần thực hiện 2 tính toán dựa trên 1 array, ví dụ lấy giá trị nhỏ nhất và lớn nhất trong dãy số</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> readings <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> maxReading <span class=\"token operator\">=</span> readings<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> minReading <span class=\"token operator\">=</span> readings<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-inline-text\">.reduce</code> không chỉ có thể trả về number, nó có thể trả về bất cứ kiểu gì, chúng ta có thể đưa 2 giá trị này vào một object</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">minMaxReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> reading</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">minReading</span><span class=\"token operator\">:</span> Match<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">.</span>minReading<span class=\"token punctuation\">,</span> reading<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">maxReading</span><span class=\"token operator\">:</span> Match<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">.</span>maxReading<span class=\"token punctuation\">,</span> reading<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> initMinMax <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">minReading</span><span class=\"token operator\">:</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">maxReading</span><span class=\"token operator\">:</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_VALUE</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> minMax <span class=\"token operator\">=</span> readings<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>minMaxReducer<span class=\"token punctuation\">,</span> initMinMax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Vấn đề duy nhất của cách thứ 2 này là performance không tốt.</p>\n<h2 id=\"kết-hợp-map-và-filter-cùng-lúc\"><a href=\"#k%E1%BA%BFt-h%E1%BB%A3p-map-v%C3%A0-filter-c%C3%B9ng-l%C3%BAc\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết hợp map và filter cùng lúc</h2>\n<p>Lấy lại ví dụ với mảng <code class=\"language-inline-text\">peopleArr</code> ở trên, chúng ta lấy người vừa đăng nhập sau cùng, không tính các user không có email. Cách thứ nhất để làm là tách ra làm 3 bước</p>\n<ul>\n<li>Lọc hết các user không có email</li>\n<li>Lấy giá trị <code class=\"language-inline-text\">lastSeen</code></li>\n<li>Tìm giá trị lớn nhất</li>\n</ul>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">notEmptyEmail</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>email <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>email <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getLastSeen</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span>lastSeen<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greater</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> peopleWithEmail <span class=\"token operator\">=</span> peopleArr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>notEmptyEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> lastSeenDates   <span class=\"token operator\">=</span> peopleWithEmail<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>getLastSeen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mostRecent      <span class=\"token operator\">=</span> lastSeenDates<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>greater<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Một cách khác để làm với <code class=\"language-inline-text\">reduce</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">notEmptyEmail</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>email <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>email <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">greater</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">notEmptyMostRecent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentRecent<span class=\"token punctuation\">,</span> person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">notEmptyEmail</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">greater</span><span class=\"token punctuation\">(</span>currentRecent<span class=\"token punctuation\">,</span> person<span class=\"token punctuation\">.</span>lastSeen<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> currentRecent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> mostRecent <span class=\"token operator\">=</span> peopleArr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>notEmptyMostRecent<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"chạy-các-phương-thức-async-theo-hàng-đợi\"><a href=\"#ch%E1%BA%A1y-c%C3%A1c-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-async-theo-h%C3%A0ng-%C4%91%E1%BB%A3i\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chạy các phương thức async theo hàng đợi</h2>\n<p>Rất hữu ích khi cần giới hạn số lượng request API, hoặc lấy kết quả của một Promise truyền cho thằng kế tiếp. Ví dụ lấy message cho tất cả user trong mảng <code class=\"language-inline-text\">peopleArr</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fetchMessages</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">username</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://example.com/api/messages/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>username<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">chainedFetchMessages</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> username</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// p là một promise</span>\n    <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchMessages</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>username<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> msgObj <span class=\"token operator\">=</span> peopleArr\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>getUsername<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>chainedFetchMessages<span class=\"token punctuation\">,</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span></code></pre></div>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jrsinclair.com/articles/2019/functional-js-do-more-with-reduce/\">FUNCTIONAL JAVASCRIPT: HOW TO USE ARRAY REDUCE FOR MORE THAN JUST NUMBERS\n</a></p>\n","cover_image":""}}]}}},"context":{}}