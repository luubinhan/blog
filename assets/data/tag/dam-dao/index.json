{"hash":"aa1b14b28c6a95ff3b4e2423c3c2ee3502c18cfa","data":{"tag":{"title":"dam-dao","belongsTo":{"edges":[{"node":{"id":"d2e65b2b5b2523d59011e21cbc5ecf7f","title":"Khi nào bạn đã là Senior dev","path":"/2020-10-31-the-nao-duoc-goi-la-senior-developer/","date":"2020-10-31","timeToRead":3,"desc":"Chia sẻ của một lập trình viên đã ứng tuyển vào vị trí Senior dev và toàn thất bại","content":"<p>Như thế nào là một Senior dev, có rất nhiều <em>chuẩn mực</em> được đặt ra như</p>\n<ul>\n<li>Senior dev là những người viết code <em>tốt</em> hơn junior dev. <em>Thực tế có những junior dev viết code rất tốt, và không ít senior dev viết code méo thể nào maintain nổi</em></li>\n<li>Senior dev là người biết tuốt những công nghệ mới nhất. <em>Thế hệ trẻ mới thật sự là người tiếp cận công nghệ mới nhất.</em></li>\n<li>Senior dev hoàn thành công việc nhanh hơn. Không hẳn, nếu bạn giao task cho một principle dev, anh ta phải viết unit test coverage 90%, phải thực hiện một loạt các bài test khác, document cho toàn bộ những gì anh ta làm, thời gian có khi cần gấp đôi, gấp ba lần</li>\n<li>Senior là những người viết code ít bug hơn, thậm chí không có bug, nhưng chúng ta điều biết một sự thật hơi <em>đau đớn</em>, tất cả code điều có bug, dev cũng chỉ là người và viết code chạy trên những môi trường không thể nào biết hết được, với tỉ tỉ use case khác nhau được tạo ra từ cả triệu người sử dụng.</li>\n</ul>\n<p><strong><em>Vậy thì tiêu chí nào để đánh giá một bạn là Senior dev nói chung?</em></strong></p>\n<p>Đây là cách mà các <em>sếp</em> mình dùng để đánh giá bậc <strong>Senior Dev</strong></p>\n<p><strong>Nên</strong></p>\n<ul>\n<li>Khi tiếp nhận từ đồng nghiệp, hãy suy nghĩ, dù là bất cứ câu hỏi nào, nó vẫn là câu đáng để hỏi, không có câu hỏi nào vô lý, hỏi vậy cũng hỏi. Luôn luôn lắng nghe, lâu lâu trả lời :D</li>\n<li>Không đưa ra bất kỳ đánh giá cá nhân trên code review, thảo luận mang mục đỉnh giải quyết vấn đề chứ không phán xét.</li>\n<li>Khi review code, luôn luôn tìm ít nhất một điểm gì đó để đóng góp, trên tinh thần thảo luận, đặt câu hỏi, không đưa ra <strong>chỉ thị</strong> phải làm như thế nào</li>\n<li>Sẵn sàng giải thích, một cách kiên trì, tìm ra giải pháp cho những vấn đề mà team đang vướng phải.</li>\n<li>Tự thân tìm hiểu học hỏi những kỹ năng nâng cao nghề nghiệp</li>\n<li>Không cần người cầm cây dí đít mới làm, luôn có tình thần trách nhiệm cao trong công việc được giao phó</li>\n<li>Tìm giải pháp khi có vấn đề, chứ không phải ngồi đó la làng <strong>khó quá sao làm</strong>, <strong>khó quá anh tự đi mà làm</strong></li>\n<li>Khi đưa ra giải pháp, cân nhắc đảm bảo cân đối giữa các yếu tố: thời gian hoàn thành, best practice, chi phí thực hiện, mức độ rủi ro tới các phần khác của hệ thống</li>\n</ul>\n<p><strong>Tránh</strong></p>\n<ol>\n<li>Khi gặp một cách code nào đó <em>hơi lạ</em>, <strong>style code</strong> bạn không thích thì sẽ là lối kiểu <strong>Đưa nào viết cái gì tào lao quá vậy, viết thế này như anh đi</strong></li>\n<li>Khi review code - \"nên đổi thế này, thế này đi\"</li>\n<li><strong>Áp đặt</strong> cách tư duy lập trình của mình lên người khác</li>\n</ol>\n<p>Còn gì nữa không, mọi người góp ý thêm.</p>\n","cover_image":""}},{"node":{"id":"d6fb0d32e4ef12d7a00ffb83684328e2","title":"Import lodash như thế nào mới đúng","path":"/2020-10-20-import-lodash-sao-cho-dung/","date":"2020-10-20","timeToRead":2,"desc":"Nếu cần xài lodash, thì bạn xài nó sao cho hiệu quả","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#c%C3%A1ch-1\">Cách 1</a></li>\n<li><a href=\"#c%C3%A1ch-2\">Cách 2</a></li>\n<li><a href=\"#c%C3%A1ch-3\">Cách 3</a></li>\n<li><a href=\"#d%C3%B9ng-lodash-babel-plugin\">Dùng lodash babel plugin</a></li>\n<li><a href=\"#d%C3%B9ng-lodash-webpack-plugin\">Dùng Lodash webpack plugin</a></li>\n<li><a href=\"#k%E1%BA%BFt-lu%E1%BA%ADn\">Kết luận</a></li>\n</ul>\n<!-- /TOC -->\n<p>Mình đã từng nghe một bạn Principle FE trong công ty phát biểu là</p>\n<blockquote>\n<p>Đã 2020 rồi mà còn xài lodash là sao, lodash đã tối cổ, chả ai xài nữa đâu</p>\n</blockquote>\n<p>Khoan bàn chuyện đúng sai trong phát biểu này, nếu bạn cũng như mình, vẫn đang dùng <code class=\"language-inline-text\">lodash</code> thì bạn cần biết <code class=\"language-inline-text\">import</code> nó như thế nào cho đúng</p>\n<p><strong>Tại sao cần làm đúng? Vì nếu làm sao vô tình bạn sẽ làm phình cục bundle lên gấp mấy chục lần</strong></p>\n<p>Giờ so sánh 3 cách <code class=\"language-inline-text\">import</code></p>\n<h2 id=\"cách-1\"><a href=\"#c%C3%A1ch-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cách 1</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tại sao lại chọn kiểu này? Không cần quan tâm đến user, cảm giác rất quyền lực như có găng tay vô cực, chỉ với <code class=\"language-inline-text\">_.</code> chúng ta có tất cả mọi thứ.</p>\n<p>Điểm yếu, đây là cách tuyệt đối nghiêm cấm, vì gần như là load nguyên cái thư viện</p>\n<p><img src=\"https://cdn2.hubspot.net/hubfs/208250/Blog_Images/lodash2.png\" alt=\"the best way to import lodash\"></p>\n<p>Tổng 190 KB, Lodash ngốn hết 72.5kb</p>\n<h2 id=\"cách-2\"><a href=\"#c%C3%A1ch-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cách 2</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> map<span class=\"token punctuation\">,</span> each<span class=\"token punctuation\">,</span> get<span class=\"token punctuation\">,</span> set <span class=\"token punctuation\">}</span> from lodash<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Kiểu này ổn, dễ đọc, rất rõ ràng để thấy được những hàm nào cần sử dụng.</p>\n<p>Tuy nhiên, nó lại không khác gì với cách 1. Tổng vẫn là 190kb</p>\n<h2 id=\"cách-3\"><a href=\"#c%C3%A1ch-3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cách 3</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> map <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash/map'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> each <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash/each'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">get</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash/get'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">set</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash/set'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Kết quả cho thấy đây là cách tiết kiệm nhất, mặc dù thực tế sử dụng cho thấy cách này hơi tốn công anh em dev của chúng ta và nhìn đoạn import có vẻ dài.</p>\n<p><img src=\"https://cdn2.hubspot.net/hubfs/208250/Blog_Images/lodash3.png\" alt=\"benchmarking lodash import\"></p>\n<p>Một số ý kiến cho là dùng <a href=\"https://www.npmjs.com/package/lodash-es\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lodash-es</a>, một phiên bản theo kiểu ES module sẽ tiết kiệm hơn, đây là kết quả đo được</p>\n<ol>\n<li>Cách 1: 256.4 KB</li>\n<li>Cách 1: 256.54 KB</li>\n<li>Cách 1: 142.39 KB</li>\n</ol>\n<p>Như vậy việc dùng <code class=\"language-inline-text\">lodash-es</code> có vẻ là vô dụng</p>\n<h2 id=\"dùng-lodash-babel-plugin\"><a href=\"#d%C3%B9ng-lodash-babel-plugin\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dùng lodash babel plugin</h2>\n<p>Sử dụng <a href=\"https://github.com/lodash/babel-plugin-lodash\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lodash babel plugin</a> chúng ta có kết quả 140kb trên tất cả các cách <em>import</em></p>\n<p><img src=\"https://cdn2.hubspot.net/hubfs/208250/Blog_Images/lodash4.png\" alt=\"importing lodash with the lodash babel plugin\"></p>\n<h2 id=\"dùng-lodash-webpack-plugin\"><a href=\"#d%C3%B9ng-lodash-webpack-plugin\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dùng Lodash webpack plugin</h2>\n<p><a href=\"https://github.com/lodash/lodash-webpack-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lodash webpack plugin</a> không biết đã bùa chú kiểu gì mà kết quả cuối cùng rất <em>ngon</em> 121kb cho cách 1, các cách khác sẽ còn bé hơn nữa</p>\n<p><img src=\"https://cdn2.hubspot.net/hubfs/208250/Blog_Images/lodash5.png\" alt=\"imprting lodash with the webpack plugin\"></p>\n<h2 id=\"kết-luận\"><a href=\"#k%E1%BA%BFt-lu%E1%BA%ADn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết luận</h2>\n<p>Nếu ko siêng bạn nên dùng cách 3, còn nếu siêng bạn setup với babel-plugin-lodash và lodash-webpack-plugin để đạt hiệu quả cao nhất.</p>\n<p>Lodash-es thì nên dẹp luôn đừng xài vì nó ko thay đổi gì tích cực cả.</p>\n<p><a href=\"https://www.blazemeter.com/blog/the-correct-way-to-import-lodash-libraries-a-benchmark\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Correct Way to Import Lodash Libraries</a></p>\n","cover_image":""}},{"node":{"id":"c7db4e8951472801d63827ce67e67fe7","title":"Micro frontend tại sao và như thế nào","path":"/2020-10-15-micro-frontend-giai-thich-huong-dan/","date":"2020-10-15","timeToRead":11,"desc":"Lướt qua một vài điểm về Micro Frontend, ý tưởng chính và các vấn đề được quan tâm","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#t%E1%BA%A1i-sao-b%E1%BA%A1n-c%E1%BA%A7n-bi%E1%BA%BFt-%C4%91%E1%BA%BFn-micro-frontend\">Tại sao bạn cần biết đến Micro frontend</a></li>\n<li><a href=\"#micro-frontend-l%C3%A0-c%C3%A1i-g%C3%AC\">Micro frontend là cái gì</a></li>\n<li>\n<p><a href=\"#hi%E1%BB%87n-th%E1%BB%B1c-h%C3%B3a-nh%C6%B0-th%E1%BA%BF-n%C3%A0o\">Hiện thực hóa như thế nào</a></p>\n<ul>\n<li><a href=\"#t%C6%B0%C6%A1ng-t%C3%A1c-gi%E1%BB%AFa-c%C3%A1c-%E1%BB%A9ng-d%E1%BB%A5ng\">Tương tác giữa các ứng dụng</a></li>\n<li><a href=\"#th%C6%B0-vi%E1%BB%87n-component-d%C3%B9ng-chung\">Thư viện component dùng chung</a></li>\n<li><a href=\"#styling\">Styling</a></li>\n<li><a href=\"#c%C3%A1c-c%C3%A1ch-%C4%91%E1%BB%83-integrate\">Các cách để integrate</a></li>\n</ul>\n</li>\n<li><a href=\"#k%E1%BA%BFt\">Kết</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"tại-sao-bạn-cần-biết-đến-micro-frontend\"><a href=\"#t%E1%BA%A1i-sao-b%E1%BA%A1n-c%E1%BA%A7n-bi%E1%BA%BFt-%C4%91%E1%BA%BFn-micro-frontend\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao bạn cần biết đến Micro frontend</h2>\n<p>Vấn đề cần giải quyết:</p>\n<ul>\n<li>Ứng dụng càng lúc càng phình ra về quy mô, cũng như độ phức tạp</li>\n<li><strong>Một codebase FE</strong> duy nhất mà muốn maintain thì chỉ có <em>gặp ác mộng hằng đêm</em></li>\n<li>Nhiều team FE, mỗi team chỉ làm việc trên một phần tính năng nào đó rất cụ thể, chỉ 1 codebase mà hơn 5 team vào làm việc trên đó thì thôi xong</li>\n<li>Bạn muốn có 1 codebase viết bằng typescript, một codebase viết js, một feature được build bằng React, feature khác được build Vue. Nếu bạn có thắc mắc tại sao lại có nhu cầu này? Câu trả lời là vì bạn ko ràng buộc team vào một technical nào cả, team có thể tự quyết định</li>\n<li>Nâng cấp từng project sẽ dễ hơn nhiều</li>\n</ul>\n<h2 id=\"micro-frontend-là-cái-gì\"><a href=\"#micro-frontend-l%C3%A0-c%C3%A1i-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Micro frontend là cái gì</h2>\n<p>Đây là cách tiếp cận cũng <em>na ná</em> như microservice, thay vì 1, chúng ta có nhiều codebase, và trên từng codebase chỉ quản lý một tính năng cụ thể mà thôi.</p>\n<p>Có thể xem một ứng dụng web là một bộ kết hợp của nhiều tính năng, mỗi một tính năng như vậy được quản lý bởi một team</p>\n<p><img src=\"https://microfrontends.com/img/deployment.png\" alt=\"A flow diagram showing 3         independent deployment pipelines for 3 different micro frontends, which         are then composed into a single app after deployment\"></p>\n<p>Thuật ngữ này được giới thiệu lần đầu vào 2016 bởi <a href=\"https://www.thoughtworks.com/radar/techniques/micro-frontends\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Thourghtworks Tech Radar</a></p>\n<blockquote>\n<p>An architectural style where independently deliverable frontend applications are composed into a greater whole</p>\n</blockquote>\n<p><img src=\"https://microfrontends.com/img/radar.png\" alt=\"Micro frontends on the ThoughtWorks tech radar\"></p>\n<p>Một cách trực quan hơn bạn có thể tham khảo hình sau</p>\n<p><img src=\"https://microfrontends.com/img/composition.png\" alt=\"A wireframe of an example website,         showing a container application that embeds a micro frontend within it\"></p>\n<p>Còn đây là demo của trang microfrontends.com <a href=\"https://demo.microfrontends.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://demo.microfrontends.com/</a></p>\n<h2 id=\"hiện-thực-hóa-như-thế-nào\"><a href=\"#hi%E1%BB%87n-th%E1%BB%B1c-h%C3%B3a-nh%C6%B0-th%E1%BA%BF-n%C3%A0o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hiện thực hóa như thế nào</h2>\n<p>Để có thể hiện thực hóa hoàn chỉnh micro frontend sẽ bao gồm rất nhiều thứ, ở đây chỉ tóm tắt một số vấn đề cơ bản cần giải quyết</p>\n<h3 id=\"tương-tác-giữa-các-ứng-dụng\"><a href=\"#t%C6%B0%C6%A1ng-t%C3%A1c-gi%E1%BB%AFa-c%C3%A1c-%E1%BB%A9ng-d%E1%BB%A5ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tương tác giữa các ứng dụng</h3>\n<p>Một câu hỏi được đặt ra đầu tiên là nếu tách ra thành nhiều bộ source như vậy, làm sao chúng có thể nói chuyện được với nhau? Một cách tổng quát, <strong>nên hạn chế việc trao đổi thông tin qua lại ít chừng nào tốt chừng đó</strong>, bởi vì nếu bạn làm ngược lại, nghĩa là bạn đang lặp lại vấn đề chúng ta muốn giải quyết ngay từ đâu: <strong>decoupling</strong> các tính năng với nhau.</p>\n<p>Nhưng việc trao đổi giữa các ứng dụng với nhau là không tránh khỏi và cần thiết, chúng ta chỉ tiết chế chứ không loại bỏ hết, <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Custom event</a> là một cách, cách khác, lấy mô hình truyền callback và data từ trên xuống trong React để làm <strong>kênh</strong> trao đổi thông tin, làm như thế nó sẽ rất tường minh, cách thứ 3 là thông qua thanh đường dẫn trên trình duyệt, chút nữa nói kỹ hơn.</p>\n<p>Tựa chung, chúng ta không share state, mà chỉ share dữ liệu trong database như microservice.</p>\n<h3 id=\"thư-viện-component-dùng-chung\"><a href=\"#th%C6%B0-vi%E1%BB%87n-component-d%C3%B9ng-chung\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thư viện component dùng chung</h3>\n<p>Nó chung, ý tưởng <strong>re-use</strong> lại những component UI không có gì mới, nghe cũng rất hợp lý, mặc dù ai cũng biết việc đó khó làm.</p>\n<p>Sai lầm thường thấy là việc tạo các component như vậy quá sớm, việc <em>hào hứng</em> quá mức vào xây dựng một Framework UI chuẩn không cần chỉnh, viết một lần xài mãi mãi, thống nhất giao diện trên mọi mặt trận là điều thường thấy ở mọi team. Tuy nhiên, trong thực tế, kinh nghiệm cho biết rằng việc đó rất khó, nếu không muốn nói là không thể, không thể ngồi nghĩ ra một bộ Framework với tất cả các API cần thiết rồi đưa cho tất cả các team xài, chắc gì API đó đã đáp ứng đúng nhu cầu cho tất cả các team? Lời khuyên là các team cứ tạo ra những component riêng trong codebase nếu họ thấy cần, dù cho nó có bị duplicate đây nữa cũng chẳng sao. Và khi đã chín mùi, những API nào cần thiết sẽ hiện nguyên hình, chúng ta đưa những cho đang bị duplicate vào trong thư viện dùng chung.</p>\n<p>Tất nhiên cũng có những ngoại lệ, những component mà nhìn vào chúng ta biết ngay là cần đưa vào share component, như icon, label, button, autocomplete, drop-down, search, table. Và nhớ là chỉ đưa đúng UI logic, đừng đưa bất kỳ business logic và domain logic vào đây. Ví dụ như một component <code class=\"language-inline-text\">ProductTable</code> cho riêng cái domain Product là không nên, chỉ nên làm một cái component <code class=\"language-inline-text\">Table</code>.</p>\n<p>Thoạt nghe làm một share component có vẻ đơn giản, nhưng nó lại là công việc đòi hỏi kỹ thuật phải rất cứng tay, và người có nhúng tay vào tất cả các team.</p>\n<h3 id=\"styling\"><a href=\"#styling\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Styling</h3>\n<p>Styling 2020 là một câu chuyện dài, như mình đã kể trong một <a href=\"https://luubinhan.github.io/blog/2020-05-22-cam-giac-viet-css-nam-2020/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bài viết</a>, tựa chung mà nói bạn có thể dùng BEM, dùng SASS, dùng CSS module, dùng CSS-in-JS, dùng Styled Component, dùng Tailwind, kiểu gì cũng được, miễn đảm bảo được style không chồng chéo lên nhau, thằng nào độc lập thằng đó, và tự tin đoạn code nó sẽ chạy như <strong>đúng như lường trước</strong>.</p>\n<h3 id=\"các-cách-để-integrate\"><a href=\"#c%C3%A1c-c%C3%A1ch-%C4%91%E1%BB%83-integrate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các cách để integrate</h3>\n<p>Để hiện thực hóa ý tưởng của micro frontend, cũng có nhiều cách làm, cách nào cũng có đánh đổi. Tựu chung, nếu xét theo hướng giao diện, chúng ta có thể tổ chức nó theo dạng một ứng dụng dạng <strong>container</strong>, bao gồm những thành phần chung như <em>header</em>, <em>menu</em>, và các <em>micro frontend</em> sẽ nhúng vào phần <strong>ruột</strong> của trang</p>\n<p><img src=\"https://martinfowler.com/articles/micro-frontends/composition.png\" alt=\"A web page with boxes drawn around different sections. One box wraps the whole page, labelling it as the &#x27;container application&#x27;. Another box wraps the main content (but not the global page title and navigation), labelling it as the &#x27;browse micro frontend&#x27;\"></p>\n<p><strong>Cách 1: composition dùng server side template</strong></p>\n<p>Với một cách <em>không chính thống lắm</em> cho việc phát triển code FE, chúng ta render HTML ở phía server, với nhiều bộ template khác nhau. Chúng ta có một file <code class=\"language-inline-text\">index.html</code> với các phần tử chung, server sẽ quyết định phần <em>ruột</em> trả về cho từng trang</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dir</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ltr<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Feed me<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>🍽 Feed me<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--# include file=\"$PAGE.html\" --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Ở ví dụ này đang dùng với Nginx, biến <code class=\"language-inline-text\">$PAGE</code> sẽ ứng với URL đang được request</p>\n<div class=\"gridsome-highlight\" data-language=\"nginx\"><pre class=\"language-nginx\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token directive\"><span class=\"token keyword\">listen</span> <span class=\"token number\">8080</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">server_name</span> localhost</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token directive\"><span class=\"token keyword\">root</span> /usr/share/nginx/html</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">index</span> index.html</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">ssi</span> <span class=\"token boolean\">on</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># Redirect / đến /browse</span>\n    <span class=\"token directive\"><span class=\"token keyword\">rewrite</span> ^/$ http://localhost:8080/browse redirect</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># Dùng HTML nào để insert dựa vào URL</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> /browse</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token directive\"><span class=\"token keyword\">set</span> <span class=\"token variable\">$PAGE</span> <span class=\"token string\">'browse'</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> /order</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token directive\"><span class=\"token keyword\">set</span> <span class=\"token variable\">$PAGE</span> <span class=\"token string\">'order'</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> /profile</span> <span class=\"token punctuation\">{</span>\n      set $PAGE 'profile'\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\"># Cho phép render ở index.html</span>\n    <span class=\"token directive\"><span class=\"token keyword\">error_page</span> <span class=\"token number\">404</span> /index.html</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Kỹ thuật này mình không nắm lắm, nên cũng chỉ để đây cho các bạn tham khảo, trong thực tế mình gặp và làm việc với những cách làm bên dưới nhiều hơn.</p>\n<p><strong>Cách 2: Integrate lúc build</strong></p>\n<p>Cách này sẽ publish cái micro frontend ở dạng package, container sẽ khai báo những micro frontend này ở dạng dependency. File <code class=\"language-inline-text\">package.json</code> nó sẽ trông như thế này:</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@feed-me/container\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A food delivery web app\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@feed-me/browse-restaurants\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.2.3\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@feed-me/order-food\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.5.6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@feed-me/user-profile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.8.9\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Thoạt nhìn, cũng khá hợp lý, tuy nhiên nếu để ý, bạn sẽ thấy chúng ta phải re-compile và release trên từng cục dependency, rồi sao đó lại phải release tiếp container. Đây vẫn không phải là cách làm được khuyến khích.</p>\n<p><strong>Cách 3: Integrate lúc run-time bằng iframe</strong></p>\n<p>Đây cũng là cách mà dự án mình đang dùng, một cách tiếp cận đơn giản nhất để compose nhiều ứng dụng với nhau trong trình duyệt đã có từ rất rất lâu. Lợi ích có thể kể thêm của cách làm này là phần styling và biến global đều độc lập và không bị đụng độ lẫn nhau</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Feed me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Welcome to Feed me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>micro-frontend-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token keyword\">const</span> microFrontendsByRoute <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">'/'</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://browse.example.com/index.html'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">'/order-food'</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://order.example.com/index.html'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">'/user-profile'</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://profile.example.com/index.html'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> iframe <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'micro-frontend-container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      iframe<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> microFrontendsByRoute<span class=\"token punctuation\">[</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Nhược điểm của cách này là việc tích hợp giữa các phần của ứng dụng, như route, history, deep-link sẽ rất phức tạp, responsive cũng sẽ gặp nhiều vấn đề cần xử lý hơn.</p>\n<p><strong>Cách 4: Integrate lúc run-time bằng JavaScript</strong></p>\n<p>Đây là cách linh hoạt nhất, và được nhiều team chọn làm. Mỗi một micro frontend sẽ được nhét vào trong trang bằng thẻ <code class=\"language-inline-text\">&lt;script /></code>. Container sẽ làm nhiệm vụ cho mount micro frontend nào và thực thi các hàm liên quan để báo cho các micro frontend sẽ render ở đâu và khi nào.</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Feed me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Welcome to Feed me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">&lt;!-- Nó không render bất cứ gì cả --></span>\n    <span class=\"token comment\">&lt;!-- Nó sẽ đưa vào hàm entry-point vào `window` --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://browse.example.com/bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://order.example.com/bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://profile.example.com/bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>micro-frontend-root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token comment\">// Những global function này được nhét vào window bằng các đoạn script include ở trên</span>\n      <span class=\"token keyword\">const</span> microFrontendsByRoute <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">'/'</span><span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>renderBrowseRestaurants<span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">'/order-food'</span><span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>renderOrderFood<span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">'/user-profile'</span><span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>renderUserProfile\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> renderFunction <span class=\"token operator\">=</span> microFrontendsByRoute<span class=\"token punctuation\">[</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Sau khi đã có các hàm cần thiết,</span>\n      <span class=\"token comment\">// đưa id của element sẽ dùng để render</span>\n      <span class=\"token function\">renderFunction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'micro-frontend-root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Trên đây chỉ là ví dụ cơ bản nhất để mô tả kỹ thuật sẽ làm, thật tế có thể phải thêm thắt một số thứ khác. Không giống với cách integrate lúc build, <code class=\"language-inline-text\">bundle.js</code> có thể được deploy một cách độc lập. Và khác iframe, chúng ta có thể linh động chọn lựa việc render micro frontend nào chúng ta thích.</p>\n<p>Nếu có hứng thú với cách làm này, có thể tham khảo thêm <a href=\"https://martinfowler.com/articles/micro-frontends.html#TheExampleInDetail\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ví dụ chi tiết hơn</a></p>\n<p><strong>Cách 5: Integrate lúc run-time bằng Web Component</strong></p>\n<p>Một lựa chọn khác cũng tương tự như cách làm trên, mỗi một micro frontend sẽ được link với element</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Feed me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Welcome to Feed me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">&lt;!-- Chưa render gì cả --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://browse.example.com/bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://order.example.com/bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://profile.example.com/bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>micro-frontend-root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token comment\">// Những element type này được định nghĩa ở các script trên</span>\n      <span class=\"token keyword\">const</span> webComponentsByRoute <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">'/'</span><span class=\"token operator\">:</span> <span class=\"token string\">'micro-frontend-browse-restaurants'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">'/order-food'</span><span class=\"token operator\">:</span> <span class=\"token string\">'micro-frontend-order-food'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">'/user-profile'</span><span class=\"token operator\">:</span> <span class=\"token string\">'micro-frontend-user-profile'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> webComponentType <span class=\"token operator\">=</span> webComponentsByRoute<span class=\"token punctuation\">[</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Tạo instance và đưa vào document ứng với từng loại phù hợp</span>\n      <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'micro-frontend-root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> webComponent <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>webComponentType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      root<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>webComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Khác nhau duy nhất so với cách trên có lẽ chỉ là việc dùng <em>web component</em> thay vì một interface chúng ta tự định nghĩa.</p>\n<p><strong>Tương tác với Backend</strong></p>\n<p>Cái này chưa biết, không dám chém.</p>\n<h2 id=\"kết\"><a href=\"#k%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết</h2>\n<p>Micro frontend có thể không lạ với một số người và khá mới với số còn lại, thực tế mà nói đã có rất nhiều dự án đang áp dụng kiến trúc này (dự án mình đang làm).</p>\n<p>Hy vọng với bài viết này bạn đã thấy công việc của những lập trình viên frontend không còn đơn thuần là việc làm sao cho trang web bay, lượn, responsive mượt mà, nếu bạn muốn tiến xa hơn, giới hạn là chân trời.</p>\n<p><strong>Các bài viết đã tham khảo</strong></p>\n<ul>\n<li><a href=\"https://martinfowler.com/articles/micro-frontends.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://martinfowler.com/articles/micro-frontends.html</a></li>\n<li><a href=\"https://microfrontends.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://microfrontends.com/</a></li>\n<li><a href=\"https://micro-frontends.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://micro-frontends.org/</a></li>\n</ul>\n","cover_image":""}},{"node":{"id":"17aa91b8bb6a8030186c20fab2e90f95","title":"Bài phỏng vấn Evan You","path":"/2020-09-19-bai-phong-van-evan-you/","date":"2020-09-19","timeToRead":8,"desc":"Nhân sự kiện Vue 3 chính thức được giới thiệu, Evrone.com có cuộc nói chuyện cùng Evan You tác giả của Vue, xoay quanh vấn đề cách tiếp cận no-backend và fullstack, cân bằng giữa cuộc sống và công việc.","content":"<p><em>Chào Evan, rất vui được nói chuyện với anh hôm nay! Hãy bắt đầu bằng câu hỏi: làm một công việc full time bằng Patreon chắc khá khác biệt, làm sao anh có thể cân bằng giữa công việc và cuộc sống để không bị kiệt sức</em></p>\n<p>Tôi cố gắng đi theo một lịch trình cố định hằng ngày, thậm chí đang làm việc tại nhà và \"tự thuê mình\". Có con thật sự giúp tôi rất nhiều vì tôi phải dành nhiều thời gian hơn với gia đình khi tôi không làm việc. Điều khác cũng khá quan trọng, khi thấy cần tôi sẽ <em>nghỉ phép</em> khá lâu, điều này sẽ khó nếu bạn đang làm việc full time ở một công ty</p>\n<p><em>Vue 3 mới ra mắt, anh có nghỉ phép không hay đã có kế hoạch cho version tiếp theo của <a href=\"https://github.com/vitejs/vite\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vite</a></em></p>\n<p>Lúc nào tôi cũng có backlog dài lắm. Hiện tại với Vite mục tiêu chính là giúp nó stable hơn, hệ thống khá mới và mọi người đang sử dụng nó trong nhiều tình huống mà tôi không thiết kế ngay từ đầu, nên chúng tôi cần thêm thời gian để xác định sẽ phát triển tiếp những gì. Hiện tại cũng có khá nhiều ý tưởng đang chờ cho Vue 3.1. Tất nhiên tôi sẽ nghĩ khá lâu đấy, tôi cần phải \"sạc pin\" lại.</p>\n<p><em>Trước đây, với nền tảng là người có kiến thức Art History khi gia nhập Google Creative Lab ở vị trí creative technologist, có bao giờ anh cảm thấy thiếu kiến thức toán học, thuật toán, cấu trúc dữ liệu khi làm việc với Vue? Chúng ta có thật sự cần nền tảng khoa học máy tính để trở thành lập trình viên?</em></p>\n<p>Thật lòng mà nói là không, cá nhân tôi nghĩ, Vue, hay frontend framework nói chung, không cần có chuyên môn quá sâu về toán/thuật toán (nếu đem so với database). Tôi vẫn nghĩ bản thân mình không quá mạnh về thuật toán, cấu trúc dữ liệu. Sẽ rất tốt nếu tôi có thể mạnh những thứ đó, tuy nhiên khi xây dựng một framework phổ biến bạn cần rất nhiều thứ phải làm lắm và đặc biệt là <strong>hiểu người sử dụng nó</strong>, thiết kế các API hợp lý, xây dựng cộng đồng, cam kết hỗ trợ, bảo trì nó trong thời gian dài.</p>\n<p>Tôi nghĩ chúng ta không nên cảm thấy không đủ xứng đáng để trở thành lập trình viên vì chúng ta không trãi qua các lớp đào tạo khoa học máy tính, điều nay không đồng nghĩa tôi khuyên bạn nên phớt lờ những kiến thức đó, nó vẫn rất hữu ích. Tôi trãi qua con đường khá thực dụng, tôi làm sai rất nhiều, rồi sau đó thấy sự cần thiết và học cách để làm tốt hơn.</p>\n<p><em>Với khá nhiều công nghệ hiện tại như Nuxt.js, JAMstack, lập trình viên khá hứng thú với việc tập trung toàn bộ vào frontend và sử dụng rất ít Backend. Anh nghĩ thế nào về cách tiếp cận \"no-backend\" hoặc \"fullstack\"?</em></p>\n<p>Tôi thấy sản phẩm sẽ định hướng công nghệ sử dụng chứ không phải chiều ngược lại. Lập trình viên đi theo hướng công nghệ nào đó bởi vì nó phù hợp với sản phẩm họ đang xây dựng. Rõ ràng \"no-backend\" không phải là viên đạn bạc nhưng nó sẽ rất phù hợp với một nhóm các ứng dụng cụ thể</p>\n<p><em>Vue được viết lại rất nhiều lần. Nếu có thể quay về thời điểm ban đầu, một lời khuyên về công nghệ cho những người trẻ thì nó sẽ là gì?</em></p>\n<p><strong>Làm cách nào để tách biệt và decouple các module internal tốt hơn</strong></p>\n<p><em>Những năm gần đây, chúng ta thấy sự phát triển song song giữa JavaScript và TypeScript. Anh sẽ đặt cược vào tương lai nào: liệu chúng ta sẽ có type được thêm vào trong JavaScript hay TypeScript sẽ thay thế luôn JavaScript hay gì đó khác?</em></p>\n<p>Tôi nghĩ việc thêm type vào JS sẽ còn <em>rất rất</em> lâu - Tôi không nghĩ nó sẽ xảy ra luôn đấy chứ, bởi vì thiết kế một hệ thống type bởi cộng đồng (và được đánh giá bởi TC39) khá là... không khả thi. TypeScript cũng sẽ không thay thế JS vì nó được thiết kế là một <strong>superset của JS</strong>. Cá nhân tôi nghĩ có JS và TS (superset với Type) cùng phát triển đồng thời là cách tiếp cận thực tế và sẽ như vậy trong tương lai.</p>\n<p><em>Những người sử dụng Vue đã lên hàng triệu developer. Anh nghĩ cách nào tốt nhất để đánh giá tầm ảnh hưởng của một công nghệ. Số câu hỏi trên Stack Overflow, sao của Github, số lượt truy cập, hay số người sử dụng trong các công ty tập đoàn (mạng bị tách biệt không thể có thông tin được), những cá nhân bị \"ép\" sử dụng bởi quyết định của cấp trên. Tất cả những nhân tố đó có ảnh hưởng thế nào đến mức độ phổ biến của một công nghệ?</em></p>\n<p>Đây là một vấn đề bản chất của phần mềm nguồn mở, người sử dụng không cần phải báo cáo việc họ sử dụng và chúng ta cũng không có cách nào có track việc đó một cách chính xác. Đó là lý do tại sao tôi xem số lượng người sử dụng công cụ DevTool của Vue là con số tương đối chính xác vì nó biết chính xác tài khoản nào đang sử dụng.</p>\n<p><em>Làm việc với tree-shaking khá nhiều trong Vue.js 3. Anh thấy tại sao tree-shaking mất quá nhiều thời gian để áp dụng vào các framework hiện đại? Bộ có khó khăn gì với nó à?</em></p>\n<p>Cách làm việc của tree-shaking phụ thuộc vào việc source code tổ chức theo một cách rất cụ thể - nghĩa là nó làm việc tốt nhất khi code được viết (và các API được thiết kế) với tâm thế tree-shaking ngay từ ngày đầu tiên. Rất khó để một source code đã có trước sống <em>hòa thuận</em> với tree-shaking, hoặc phải thay đổi rất nhiều trong các API đã có, hoặc refactor gần như toàn bộ (rủi ro sẽ rất cao).</p>\n<p><em>Đề xuất Function-based component API trong Vue 3 nhận được khá nhiều thảo luận trong cộng đồng. Anh có suy nghĩ nào khác muốn chia sẻ với các lập trình viên?</em></p>\n<p>Đa phần phản hồi chúng tôi nghe được là việc sợ chúng tôi sẽ ngừng hỗ trợ các API của Vue 2.x hiện tại, và rõ ràng là sai lầm nếu chúng tôi làm việc đó. Là tác giả, người bảo trì hằng ngày chúng tôi tiếp xúc với những thay đổi, những ý tưởng mới sớm hơn ai hết, thường kéo theo việc chúng tôi sẽ quên mất tầm quan trọng của việc hỗ trợ tương thích ngược. Chúng tôi hiểu rằng người sử dụng sẽ không vui vẻ gì nếu chuyện đó xảy ra.</p>\n<p>Điều có thể rút ra là, chúng ta cần biết người dùng cần gì - thường không dễ để biết được và phải đi theo những cách rất khó khăn, và bạn cần sẵn sàng lắng nghe một cách tích cực chủ động.</p>\n<p><em>Vue được sử dụng trong các doanh nghiệp nhỏ, vừa và thậm chí các công ty triệu đô. Louis Vuitton and NASA đang sử dụng Vue. Có ví dụ nào anh đề nghị mọi người nên tham khảo như một ví dụ sử dụng thực tế</em></p>\n<p>Vấn đề là các dự án thực tế đủ phức tạp lại không phải open-source. Tôi nghĩ có thể xem source của Vue DevTools và Vue CLI UI nếu bạn cần một ví dụ đủ phức tạp, cả hai đều có giao diện không bình thường được viết bằng Vue, mặc dù nó không phải vấn đề mà các web app thường gặp.</p>\n<p>Bài phỏng vấn của <a href=\"https://evrone.com/evan-you-interview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">evrone</a></p>\n<blockquote>\n<p>Users don’t like things being taken away. The takeaway is you need to understand what your users want — it’s not that easy and sometimes you will get that information the hard way, but you need to be willing to listen regardless.</p>\n</blockquote>\n<p>Happy coding 🎉🙌</p>\n","cover_image":"https://evrone.com/sites/default/files/styles/card_w1920/public/n-fields/cases/person-4.jpg"}},{"node":{"id":"39970bf34d66401b7a43dee75d82df7b","title":"Cảm giác khi bạn viết CSS như thế nào trong năm 2020","path":"/2020-05-22-cam-giac-viet-css-nam-2020/","date":"2020-05-22","timeToRead":5,"desc":"Nếu đã có bài làm một website trong năm 2016 nó như thế nào, thì giờ ta sẽ nói xem viết css trong năm 2020 sẽ ra mần sao","content":"<p><strong>Anh technical leader: em biết sao không, anh đã không viết code từ năm 2016 tới giờ, công việc của anh giờ chỉ toàn làm chính trị trong công ty thôi. Giờ em thấy cái dự án này công ty mình mới lấy về, họ muốn thêm phần giao diện cho nó khác đi, sửa responsive lại chút</strong></p>\n<p>Ngon ăn đấy anh, nhận đi.</p>\n<p><strong>Cái này họ làm React, nhưng mà lúc đó không biết đứa nào viết chỉ có một file css duy nhất với hơn 3000 dòng code, nhìn gớm quá, nhiều cái cứ xài tới xài lui mà không chịu kế thừa, cấu trúc thì khỏi nói rồi, gớm luôn, em thấy giờ mình làm sao cho tốt?</strong></p>\n<p>Đúng rồi anh, ai mà làm như thế.</p>\n<p><strong>Trước mắt, chúng ta coi hết lại đống này, xóa bớt mấy cái không cần thiết, sắp xếp lại, comment mọi thứ cho nó rõ ràng</strong></p>\n<p>Làm trên một file CSS đó luôn hả anh?</p>\n<p><strong>Ừ thì mình làm thêm bộ màu mới, thêm mấy tương tác cho nó cool hơn, sửa lỗi media queries, chắc là đủ rồi</strong></p>\n<p>Được mà, mà giờ không ai viết CSS thuần nữa đâu anh.</p>\n<p><strong>Giờ mình có những lựa chọn khác nào vậy em?</strong></p>\n<p>Giờ mình có nhiều framework, với những bộ màu đã định nghĩa sẵn, làm sẵn luôn responsive và hiệu ứng nhè nhẹ.</p>\n<p><strong>Kiểu bootstrap đúng không?</strong></p>\n<p>Xài cũng được, nhưng em không khuyến khích anh xài cái đó.</p>\n<p><strong>Sao vậy ta, hồi anh còn code, nó nổi lắm mà</strong></p>\n<p>Bớt nổi rồi anh. Giờ còn nhiều em <em>hót</em> không kém như Foundation, Bulma, Materialize, Semantic UI, Tailwind</p>\n<p><strong>Chọn đại một cái được không em</strong></p>\n<p>Mỗi thằng có ưu nhược khác nhau anh à, mà xài những cái này, các website bây giờ cứ na ná nhau, kiểu template, nói thật nhìn nó <em>khắm</em> lắm.</p>\n<p><strong>Vậy hổng lẽ tự viết sao em?</strong></p>\n<p>Bậy nè, anh không nên tự viết từ đầu chi, mà anh phải đi override lại chúng thôi, cũng khá khá nhiều thứ cần override.</p>\n<p><strong>Ít nhất nó cũng giúp chúng ta đơn giản hóa việt layout và responsive đúng chứ?</strong></p>\n<p>Nếu mà không yêu cầu cao, anh dùng những thư viện <em>nhẹ hiều</em> như Skeleton hay Pure CSS đi.</p>\n<p><strong>Pure CSS, anh tưởng anh đã đang viết pure css</strong></p>\n<p>Bậy nè, nó là tên thư viện, mà anh ít nhất biết dùng Flexbox chứ?</p>\n<p><strong>Nó là gì đó, anh dùng float không à, ủa mà tại sao ít nhất?</strong></p>\n<p>Kiểu layout bây giờ dùng flexbox không anh, còn cao cấp hơn thì dùng luôn css grid</p>\n<p><strong>Nó có gì hay ho vậy?</strong></p>\n<p>Nếu mà flexbox là kiểu layout một chiều, thì css grid là kiểu layout 2 chiều</p>\n<p><strong>Kiểu 2 chiều, như X, Y đúng không</strong></p>\n<p>Nó cho phép anh đưa nội dung về dạng row và column, rất nhiều tính năng xịn sò để làm các layout bay bổng</p>\n<p><strong>Ngon, vậy xài được đó</strong></p>\n<p>Chịu khó học nghe anh, lúc đầu hơi chua ăn đó.</p>\n<p><strong>Còn lựa chọn nào khác cho css không em?</strong></p>\n<p>Giờ anh có css variable nè, mixins, nesting, import, tính toán, hàm helper để code anh có tổ chức hơn.</p>\n<p><strong>Anh có nghe nhầm không, function và variable?</strong></p>\n<p>Không nhầm ạ</p>\n<p><strong>Mấy cái syntax lạ lồng như thế, có nguy hiểm không</strong></p>\n<p>Anh có mấy cái CSS preprocessor lo rồi mà</p>\n<p><strong>Như SASS/SCSS?</strong></p>\n<p>Đúng. Mà nó khác nhau đó nghe anh, SCSS > SASS, giờ cũng ít ai viết SASS lắm</p>\n<p><strong>LESS xài được ko em, anh quen viết LESS</strong></p>\n<p>Xưa rồi anh ơi, ai mà viết less nữa, nó chết bà rồi.</p>\n<p><strong>Nhiều thứ quá nhỉ</strong></p>\n<p>Đó em chưa kể đến mấy cái preprocessor mới ra là Stylus, CSS Crush, Myth đó.</p>\n<p><strong>Khó quá, bỏ qua, chọn đại một cái đi</strong></p>\n<p>Anh định dùng animation không, có quan tâm tới việc support nhiều trình duyệt không?</p>\n<p><strong>Có chứ em</strong></p>\n<p>Vậy anh phải coi thêm post-processor nữa, như PostCSS vậy</p>\n<p><strong>Nó là gì nữa á</strong></p>\n<p>Pre là xử lý <em>đường vào</em>, post là xử lý <em>đường ra</em> đó anh, nó đơn giản là thêm mấy cái syntax phù hợp cho các trình duyệt khác nhau</p>\n<p><strong>Vậy còn kinh nghiệm của em, thì chúng ta nên tổ chức sao cho tốt?</strong></p>\n<p>Xem thêm BEM á anh, một chuẩn mực đặt tên class sao cho dễ đọc để nuốt</p>\n<p><strong>Em có tự chế không đó?</strong></p>\n<p>Nào có anh ơi, em còn biết đến OOCSS và SUITCSS nữa mà không dám nói sợ anh nói em nói xạo</p>\n<p><strong>Kiểu này là anh phải sấp mặt mấy tháng để cập nhập kiến thức rồi em</strong></p>\n<p>Mà anh biết CSS-in-JS chưa?</p>\n<p><strong>Nó là cái nồi gì nữa em?</strong></p>\n<p>Nó cho anh viết CSS trong file JS</p>\n<p><strong>Em đùa vui quá</strong></p>\n<p>Xạo làm chó, bây giờ React nó hổng viết CSS như bình thường nữa anh, nó chơi kiểu CSS in JS, hay là styled component. Còn không anh dùng inline style sheet,, CSS module,...</p>\n<p><strong>Inline CSS, cái đó là Bad practice mà em</strong></p>\n<p>Giờ người ta không nghĩ vậy nữa đâu anh, nó là chuyện bình thường mà. Còn chưa nói đến JSS nữa đó anh</p>\n<p><strong>Thôi em à, anh thấy chúng ta đi xa quá rồi, từ CSS mà em chuyển nó thành JSS</strong></p>\n<p>Nhưng đó là những gì đang hót nhất mà anh, anh thấy không hót hả.</p>\n<p><strong>Anh nghĩ mình nên để yên cái project này và không thêm thắt gì nữa đi em, nó như vậy là đẹp rồi</strong></p>\n<p><a href=\"https://dev.to/madarsbiss/how-it-feels-like-to-style-things-in-2020-21cm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dev.to/madarsbiss/how-it-feels-like-to-style-things-in-2020-21cm</a></p>\n","cover_image":""}},{"node":{"id":"ff0fd9deb1f207207ccc97a3bf08485e","title":"Con đường để bạn trở thành tech lead","path":"/2020-04-07-ban-da-san-sang-cho-vi-tri-tech-lead-chua/","date":"2020-04-07","timeToRead":2,"desc":"Bạn là một lập trình viên sành sỏi, code bạn viết chưa bao giờ làm các sếp thất vọng, vậy đâu là bước tiếp theo cho bạn - lead một team. Bài viết chia sẽ tóm gọn những đặc điểm, kỹ năng, kinh nghiệm nào cần có để thành công như một tech lead. ","content":"<h2 id=\"thế-nào-là-một-tech-lead-tl\"><a href=\"#th%E1%BA%BF-n%C3%A0o-l%C3%A0-m%E1%BB%99t-tech-lead-tl\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thế nào là một Tech Lead (TL)</h2>\n<ul>\n<li>TL là <strong>cánh tay phải</strong> đắc lực của <strong>Project manager</strong> (PM)</li>\n<li>Sự thành/bại của một TL được đong đo bằng <strong>sự thành công của team</strong> anh ấy dẫn dắt</li>\n<li>Là người có thể đưa ra một <strong>tầm nhìn công nghệ</strong>, đưa ra lựa chọn, <strong>quyết định</strong> sử dụng cái nào và không sử dụng cái nào</li>\n<li>Là người đưa đường dẫn lối cả team <strong>làm việc được cùng nhau</strong></li>\n<li>TL có thể <strong>nâng cao</strong> và <strong>giải quyết</strong> các vấn đề của team thông qua giao tiếp, kỹ năng lãnh đạo, và tầm ảnh hưởng.</li>\n</ul>\n<h2 id=\"kỹ-năng-công-nghệ\"><a href=\"#k%E1%BB%B9-n%C4%83ng-c%C3%B4ng-ngh%E1%BB%87\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kỹ năng công nghệ</h2>\n<ul>\n<li>Nắm một cách <strong>thông thạo</strong>, <strong>cứng cựa</strong> một ngôn ngữ, công nghệ nhất định</li>\n<li>Là người có thể <strong>debug</strong> những <strong>issue khó nhất</strong> mà cả team bó tay</li>\n<li><strong>Đưa ra giải pháp</strong> cốt lõi để cả team có thể <strong>làm việc hiệu quả</strong>, <strong>phối hợp ăn ý</strong></li>\n</ul>\n<h2 id=\"giao-tiếp-lãnh-đạo\"><a href=\"#giao-ti%E1%BA%BFp-l%C3%A3nh-%C4%91%E1%BA%A1o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giao tiếp, lãnh đạo</h2>\n<ul>\n<li>Khả năng <strong>trình bài rõ ràng, thuyết phục</strong> các ý tưởng, tầm nhìn, và kiến trúc công nghệ của mình cũng như của người khác</li>\n<li><strong>Hướng dẫn, chỉ dạy</strong> những người lập trình viên khác với sự vui vẻ và nhiệt tâm</li>\n</ul>\n<h2 id=\"đối-với-dự-án\"><a href=\"#%C4%91%E1%BB%91i-v%E1%BB%9Bi-d%E1%BB%B1-%C3%A1n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đối với dự án</h2>\n<ul>\n<li>Đưa ra nhưng <strong>giải pháp</strong> giúp khách hàng, dự án, team hoàn thành tốt công việc của mình</li>\n<li>Phân chia công việc <strong>tránh</strong> các bản <strong>release to bự</strong> không thể kiểm soát, tránh bị BA (business analyser) đè đầu làm cả trăm feature trong một sprint</li>\n<li>Luôn trong tâm ý làm sao đạt được kết quả một cách <strong>tiết kiệm, hợp lý</strong>, đưa ra những <strong>dự đoán</strong> về rủi ro có thể gặp</li>\n</ul>\n<h2 id=\"tính-cách\"><a href=\"#t%C3%ADnh-c%C3%A1ch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tính cách</h2>\n<ul>\n<li>Kỹ năng làm việc với <strong>áp lực</strong> một cách <strong>hiệu quả</strong> là yêu cầu bắt buộc</li>\n<li>Luôn <strong>giữ mối quan hệ tốt đẹp</strong> với khách hàng, thành viên trong team</li>\n</ul>\n<h2 id=\"tầm-ảnh-hưởng\"><a href=\"#t%E1%BA%A7m-%E1%BA%A3nh-h%C6%B0%E1%BB%9Fng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tầm ảnh hưởng</h2>\n<ul>\n<li>Giúp mọi người tốt hơn, thông qua <strong>code review</strong>, <strong>tài liệu, định hướng kỹ thuật, và hướng dẫn trực tiếp</strong></li>\n<li>Khả năng xây dựng, phát triển <strong>kiến trúc ứng dụng tiến xa hơn</strong>, bay cao hơn và đưa đường dẫn lối cho team đi theo</li>\n</ul>\n<p><a href=\"https://speakerdeck.com/cromwellryan/making-the-leap-to-tech-lead\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Making the leap to tech lead</a></p>\n","cover_image":""}},{"node":{"id":"1ba061475abb23bc0355ce6df2e57b4c","title":"7 lý do bạn không nên sử dụng TypeScript","path":"/2020-02-15-7-ly-do-chinh-dang-khuyen-ban-khong-nen-dung-typescript/","date":"2020-02-15","timeToRead":5,"desc":"TypeScript có phải là con ác chủ bài, ngôn ngữ của tương lai, viết TypeScript thì mọi thứ sẽ không thể nào còn lỗi, những lý do khiến bạn phải suy nghĩ lại những nhận định trên","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#qu%C3%A1-m%E1%BA%A1o-hi%E1%BB%83m\">Quá mạo hiểm</a></li>\n<li><a href=\"#qu%C3%A1-r%E1%BB%91i-r%E1%BA%AFm\">Quá rối rắm</a></li>\n<li><a href=\"#kh%C3%B4ng-gi%E1%BA%A3i-quy%E1%BA%BFt-v%E1%BA%A5n-%C4%91%E1%BB%81\">Không giải quyết vấn đề</a></li>\n<li><a href=\"#ch%E1%BA%B3ng-thay-th%E1%BA%BF-ch%E1%BB%89-l%C3%A0-ph%E1%BA%A7n-m%E1%BB%9F-r%E1%BB%99ng\">Chẳng thay thế, chỉ là phần mở rộng</a></li>\n<li><a href=\"#m%C3%A3-ngu%E1%BB%93n-m%E1%BB%9F-c%C3%B3-th%E1%BA%ADt-v%E1%BA%ADy-kh%C3%B4ng\">Mã nguồn mở, có thật vậy không?</a></li>\n<li><a href=\"#c%C3%A1c-c%C3%B4ng-ty-l%E1%BB%9Bn-s%E1%BB%AD-d%E1%BB%A5ng\">Các công ty lớn sử dụng...</a></li>\n<li><a href=\"#nhi%E1%BB%81u-t%C3%ADnh-n%C4%83ng-h%C6%A1n\">Nhiều tính năng hơn</a></li>\n</ul>\n<!-- /TOC -->\n<p>Rất nhiều người yêu TypeScript, nó <em>\"giải quyết\"</em> rất nhiều vấn đề mà JS gặp phải, một ngôn ngữ <em>\"thay thế\"</em> cho JS, nó sẽ báo bạn ngay nếu code bạn có <em>vấn đề</em> và <em>dễ đọc</em> hơn. Có nhiều nhiều lý do được đưa ra để bạn nên dùng TypeScript, bài này ngược lại đưa cho bạn 7 lý do không nên dùng TypeScript</p>\n<h2 id=\"quá-mạo-hiểm\"><a href=\"#qu%C3%A1-m%E1%BA%A1o-hi%E1%BB%83m\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Quá mạo hiểm</h2>\n<p>Tại sao lại mạo hiểm? Nếu TypeScript thêm định nghĩa type và kiểm tra lúc compile, IDE còn thông báo ngay lúc nếu kiểu dữ liệu không khớp. Chính xác đó là lý do. TypeScript chỉ kiểm tra kiểu dữ liệu lúc compile và <em>chỉ</em> sử dụng kiểu có định nghĩa. Tất cả các network call, API và thư viện bổ sung chưa có type sẽ không có cách nào tương tác với TypeScript.</p>\n<p>Nếu trong JS, chúng ta không đặt giả định về kiểu sẽ nhận được, không tự nhủ \"cái này chắc chắn\" sẽ trả về kiểu <code class=\"language-inline-text\">string</code>, chúng ta luôn biết phải kiểm tra giá trị thật sự của biến nhận được trước khi sử dụng. Với TS, bạn phụ thuộc compiler làm việc này, nhưng sẽ có rất nhiều thứ phải làm. Bạn vừa phải bỏ thời gian viết định nghĩa cho từng tỉ tỉ thứ, rồi bỏ thêm mớ thời gian để đảm bảo các định nghĩa bạn viết ra phải đúng lúc chạy, vậy mục tiêu cuối cùng của tất cả những thứ đó là gì?</p>\n<h2 id=\"quá-rối-rắm\"><a href=\"#qu%C3%A1-r%E1%BB%91i-r%E1%BA%AFm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Quá rối rắm</h2>\n<p>Mặt trái của sự thật: một ngôn ngữ được kỳ vọng sẽ đem đến sự minh bạch, sạch sẽ, dễ đọc hơn lại đem đến điều người lại. Để minh họa, hãy nhìn thử một đoạn TS sau</p>\n<div class=\"gridsome-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// TODO: do this more elegantly</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>currentReducer <span class=\"token keyword\">as</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Reducer<span class=\"token operator\">&lt;</span>NewState<span class=\"token punctuation\">,</span>NewActions<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> nextReducer\n\n<span class=\"token keyword\">static</span> create<span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>subscribe<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>subscriber<span class=\"token operator\">:</span> Subscriber<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> TeardownLogic<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span>subscribe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Đóng code trên lấy từ thư viện Redux và RxJS. Nếu bạn đang viết React và thích HOC, thì bạn sẽ hiểu viết bổ sung TypeScript sẽ đem đến mồ hôi và nước mắt cho các đồng nghiệp khác như thế nào.</p>\n<h2 id=\"không-giải-quyết-vấn-đề\"><a href=\"#kh%C3%B4ng-gi%E1%BA%A3i-quy%E1%BA%BFt-v%E1%BA%A5n-%C4%91%E1%BB%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Không giải quyết vấn đề</h2>\n<p>TS bảo là giải quyết các vấn đề mà JS đang gặp. Nhưng sự thật là KHÔNG. Dynamic typing chưa bao giờ là vấn đề với những lập trình viên JS (có mình luôn), bạn sẽ phàn nàn vậy \"NaN === NaN\" không phải là vấn đề sau, việc có cũng được không có cũng được dấu chấm phẩy <code class=\"language-inline-text\">;</code> không phải là vấn đề à,... một vài lý do khác nữa. TypeScript cũng chẳng giải quyết như bạn tưởng tượng đâu, nó chỉ giới thiệu một chuẩn mới, làm phân cực công đồng JS thêm thôi.</p>\n<p>Thậm chí, nếu việc thiếu type trong JS là một vấn đề, TS không giải quyết luôn. Những ngôn ngữ thật sự giải quyết nó là Java, C, C# và các ngôn ngữ <code class=\"language-inline-text\">compiled</code>.</p>\n<h2 id=\"chẳng-thay-thế-chỉ-là-phần-mở-rộng\"><a href=\"#ch%E1%BA%B3ng-thay-th%E1%BA%BF-ch%E1%BB%89-l%C3%A0-ph%E1%BA%A7n-m%E1%BB%9F-r%E1%BB%99ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chẳng thay thế, chỉ là phần mở rộng</h2>\n<p>TS sau cùng cũng complie về JS, nó không hề là <strong>một ngôn ngữ có thể thay thế</strong> JS như tự sướng. Những gì TypeScript có thể làm, sẽ bị giới hạn trong những gì JS làm được. Đừng ảo tưởng với TS là bạn đã đủ chinh chiến trên mọi chiến trường, đừng tin vào lời dối trá đó, hãy tìm hiểu nhiều hơn sức mạnh thực sự của JS và linh động kiểu dữ liệu mang lại gì cho bạn, lúc đó bạn sẽ thấy mình đã tiến xa hơn những gì cái khung TS đã đóng bạn lại.</p>\n<h2 id=\"mã-nguồn-mở-có-thật-vậy-không\"><a href=\"#m%C3%A3-ngu%E1%BB%93n-m%E1%BB%9F-c%C3%B3-th%E1%BA%ADt-v%E1%BA%ADy-kh%C3%B4ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mã nguồn mở, có thật vậy không?</h2>\n<p>Nhiều lý do đưa ra khi sử dụng TS là vì nó mã nguồn mở. Đúng, nhưng chưa đủ. Nó vẫn chịu sự chi phối từ Microsoft, một tập đoàn độc quyền khổng lồ nổi tiếng nhất thế giới, Microsoft chia sẻ mã nguồn nó như một động thái tiếp thị và lôi kéo thêm lập trình viên. Đừng lẫn lộn giữa mã nguồn mở với sự dân chủ: Microsoft vẫn ở đây và có quyền làm mọi thứ với TS, bạn chẳng làm gì được ngoài việc đứng nhìn. JS, lại khác, được cộng đồng đảm trách, sẽ không thay đổi bất cứ thứ gì nếu không được sự đồng ý từ số đông cộng đồng.</p>\n<h2 id=\"các-công-ty-lớn-sử-dụng\"><a href=\"#c%C3%A1c-c%C3%B4ng-ty-l%E1%BB%9Bn-s%E1%BB%AD-d%E1%BB%A5ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các công ty lớn sử dụng...</h2>\n<p>Không ít các cá nhân có trách nhiệm lựa chọn ngôn ngữ cho dự án lại đưa đây làm một lý do để sử dụng TS. Vậy có tính đến chuyện các công ty lớn cũng có những bộ codebase cũ mèm, lỗi thời. Việc người khác chọn một thứ gì đó, chắc gì thứ đó cũng hợp với mình.</p>\n<h2 id=\"nhiều-tính-năng-hơn\"><a href=\"#nhi%E1%BB%81u-t%C3%ADnh-n%C4%83ng-h%C6%A1n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nhiều tính năng hơn</h2>\n<p>Xưa rồi, khi TS được giới thiệu năm 2012, các tính năng như <code class=\"language-inline-text\">class</code> chưa có trên JS. Nhưng nay đã là 2020, hơn 8 năm nay, JS đã tiến một bước rất xa, phải nói đúng hơn là giờ TS còn phải chạy theo JS</p>\n<p>Từ quan điểm của một cá nhân không thấy nhiều lợi ích mà TypeScript mang lại.</p>\n<p><a href=\"https://everyday.codes/javascript/7-really-good-reasons-not-to-use-typescript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">7 really good reasons not to use TypeScript</a></p>\n","cover_image":""}},{"node":{"id":"05c193d3b678d4c4e765c0a2c85ccb2d","title":"Chém gió: Tại sao tui vẫn thích Firefox","path":"/2018-04-05-huong-dan-tai-sao-tui-van-thich-firefox/","date":"2018-04-05","timeToRead":4,"desc":"Không biết bạn sinh ra từ thuở nào, nhưng tui là thế hệ 8x, thời điểm mà Firefox nổi lên - rồi chìm xuống","content":"<p>Ngày xưa khi Firefox ra đời đánh dấu sự tàn lụi của IE6, với những tính năng siêu ngầu như: cho phép user cài thêm <strong>extensions</strong>, thay <strong>theme</strong> như thay áo. Ai cũng khoái.</p>\n<p>Vài năm sau, dân chơi thứ thiệt bước vào cuộc đấu, cái tên ai cũng biết là ai đấy - <strong>Chrome</strong>. Khi vừa xuất hiện thực sự Chrome trở thành cơn địa chấn, số lượng người dùng lúc ban đầu nhiều không tưởng, và không ngừng tăng, bởi vì nó được chống lưng bởi Google, con ác chủ bài để Google có thể chiếm hết thị phần trình duyệt. Chắc chắn bạn cũng đang dùng Chrome để đọc blog này!</p>\n<p>Web <em>bây giờ</em> khác xưa nhiều rồi, công nghệ tân thời tốn điện hơn xưa, à ko, tốn RAM và CPU hơn, web ko còn là những trang tin đơn giản, nó còn là những ứng dụng phức tạp chạy trên trình duyệt bằng những công nghệ, ngôn ngữ không ngừng thay đổi để <strong>thõa mãn</strong> thú tính của người sử dụng, chúng ta đấy.</p>\n<blockquote>\n<p>Tui một developer chạy con Macbook Pro cấu hình cao nhất, mới nhất. Khi bắt đầu lập trình và bật Chrome DevTools lên, pin tụt nhanh như chó phóng qua hàng rào</p>\n</blockquote>\n<p>Và nếu bạn cũng là developer như tui, chắc bạn cũng sẽ bật Task manager lên và kiểm tra, a đù, sao Chrome mày ăn RAM tao kinh dị vạy.</p>\n<p>Rồi bạn nghe đâu với bản <a href=\"https://blog.mozilla.org/blog/2017/11/14/introducing-firefox-quantum/?utm_source=twitter&#x26;utm_medium=social&#x26;utm_campaign=quantum-launch-2017&#x26;utm_content=launch-blog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Firefox Quantum</a> mới bọn dev của mozila đã ngồi fix hơn 7 triệu dòng code để Firefox cạnh tranh về tốc độ với Google! Quảng cáo ngầu ghê!</p>\n<p>Năm 2017 Quantum chạy chính thức trên Android, Linux, iOS, Mac, Windows, nói chung chạy tuốt, phải hơn sau 10 năm từ ngày phiên bản đầu tiên, phiên bản đã giết chết IE mới có một cập nhập thực sự đáng đồng tiền bát cháo.</p>\n<p><img src=\"https://www.mozilla.org/media/img/firefox/home/hero-laptop.cd8ad96e2fbc.png\" alt=\"Chém gió: Tại sao tui vẫn thích Firefox\"></p>\n<p>Bên cạnh giao diện cool mới, nó load web nhanh hơn gấp đôi so với phiên bản Firefox 6, sử dụng ít hơn 30% RAM so với Chrome.</p>\n<p>Sau 10 năm lăn lộn trên chiến trường, Mozilla đã hiểu được rằng để cạnh tranh được với đối thủ bây giờ thì không chỉ cần một vài cải tiến nhỏ là được, mọi thứ phải thực sự <strong>AWSOME</strong>.</p>\n<p>Có thể những tính năng được đưa vào Firefox Quantum bạn cũng có thể tìm thấy trên Chrome, nhưng điều gì khiến tui vẫn thích Firefox và luôn muốn mình sử dụng Firefox khi có thể?</p>\n<p>Các công ty lớn điều sẽ muốn người sử dụng sản phẩm từ một nhà cung cấp khác quay lưng và sử dụng sản phẩm của mình, công ty sẽ cung cấp những tính năng chỉ-có-thể-tìm-thấy trên sản phẩm của họ để cầm chân người dùng trong ecosymtem của công ty.</p>\n<p>Lấy ví dụ như Apple Keynote chỉ có thể sử dụng với Safari, iMessage chỉ có trên iOS, bạn phải say-good-bye khi chuyển qua Android, trang update của Microsoft chỉ có thể sự dụng trên IE, Edge, để chép nhạc vào iphone bạn phải cài iTune,... ngược lại Firefox có thể nói là kẻ phá đám đứng ngoài khu vườn thượng uyển đó, là đối thủ cạnh tranh để chống lại sự độc quyền và khiến việc các công ty lớn bắt chúng ta phụ thuộc ngày càng nhiều vào các công ty này trở nên khó hơn, khiến họ phải dè chừng và không ngừng cái tiến sản phẩm. Như câu nói nghe suốt \"Có cạnh tranh thì mới có phát triển\", như khi Grab đã loại đi Uber rồi và khi chúng ta sẽ ra sau, Youtube của google một khi đã giết hết tất cả đối thủ trong mảng Video trực tuyến, chúng ta ăn quảng cáo còn hơn cả trên truyền hình, xem một clip 10 phút là đã có quảng cáo, vừa vào xem đã phải xem quảng cáo trước.</p>\n<p>Bonus: từ hàng triệu yêu cầu từ user, Firefox đã có tính năng tắt hết cái <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1368744\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Push-Notify</a>, một trong những yêu cầu hết sực bực mình khi các trang web bây giờ đều đòi cấp phép cho nó quăng thông báo quảng cáo qua trình duyệt dù mình không đang truy cập nó.</p>\n<p>Fanboy Firefox cho hay :D</p>\n<p>Dịch từ đâu quên nguồn</p>\n","cover_image":"https://cdn-images-1.medium.com/max/1000/1*Gd9wkMJQxrCi8UNZWRgx-Q.png"}}]}}},"context":{}}