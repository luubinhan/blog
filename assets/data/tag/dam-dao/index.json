{"hash":"758a6cb1620fd44d4d49859fe95b9857298eb57d","data":{"tag":{"title":"dam-dao","belongsTo":{"edges":[{"node":{"title":"Bài phỏng vấn Evan You","path":"/bai-phong-van-evan-you/","date":"19. September 2020","timeToRead":6,"desc":"Nhân sự kiện Vue 3 chính thức được giới thiệu, Evrone.com có cuộc nói chuyện cùng Evan You tác giả của Vue, xoay quanh vấn đề cách tiếp cận no-backend và fullstack, cân bằng giữa cuộc sống và công việc.","content":"<p><em>Chào Evan, rất vui được nói chuyện với anh hôm nay! Hãy bắt đầu bằng câu hỏi: làm một công việc full time bằng Patreon chắc khá khác biệt, làm sao anh có thể cân bằng giữa công việc và cuộc sống để không bị kiệt sức</em></p>\n<p>Tôi cố gắng đi theo một lịch trình cố định hằng ngày, thậm chí đang làm việc tại nhà và \"tự thuê mình\". Có con thật sự giúp tôi rất nhiều vì tôi phải dành nhiều thời gian hơn với gia đình khi tôi không làm việc. Điều khác cũng khá quan trọng, khi thấy cần tôi sẽ <em>nghỉ phép</em> khá lâu, điều này sẽ khó nếu bạn đang làm việc full time ở một công ty</p>\n<p><em>Vue 3 mới ra mắt, anh có nghỉ phép không hay đã có kế hoạch cho version tiếp theo của <a href=\"https://github.com/vitejs/vite\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vite</a></em></p>\n<p>Lúc nào tôi cũng có backlog dài lắm. Hiện tại với Vite mục tiêu chính là giúp nó stable hơn, hệ thống khá mới và mọi người đang sử dụng nó trong nhiều tình huống mà tôi không thiết kế ngay từ đầu, nên chúng tôi cần thêm thời gian để xác định sẽ phát triển tiếp những gì. Hiện tại cũng có khá nhiều ý tưởng đang chờ cho Vue 3.1. Tất nhiên tôi sẽ nghĩ khá lâu đấy, tôi cần phải \"sạc pin\" lại.</p>\n<p><em>Trước đây, với nền tảng là người có kiến thức Art History khi gia nhập Google Creative Lab ở vị trí creative technologist, có bao giờ anh cảm thấy thiếu kiến thức toán học, thuật toán, cấu trúc dữ liệu khi làm việc với Vue? Chúng ta có thật sự cần nền tảng khoa học máy tính để trở thành lập trình viên?</em></p>\n<p>Thật lòng mà nói là không, cá nhân tôi nghĩ, Vue, hay frontend framework nói chung, không cần có chuyên môn quá sâu về toán/thuật toán (nếu đem so với database). Tôi vẫn nghĩ bản thân mình không quá mạnh về thuật toán, cấu trúc dữ liệu. Sẽ rất tốt nếu tôi có thể mạnh những thứ đó, tuy nhiên khi xây dựng một framework phổ biến bạn cần rất nhiều thứ phải làm lắm và đặc biệt là <strong>hiểu người sử dụng nó</strong>, thiết kế các API hợp lý, xây dựng cộng đồng, cam kết hỗ trợ, bảo trì nó trong thời gian dài.</p>\n<p>Tôi nghĩ chúng ta không nên cảm thấy không đủ xứng đáng để trở thành lập trình viên vì chúng ta không trãi qua các lớp đào tạo khoa học máy tính, điều nay không đồng nghĩa tôi khuyên bạn nên phớt lờ những kiến thức đó, nó vẫn rất hữu ích. Tôi trãi qua con đường khá thực dụng, tôi làm sai rất nhiều, rồi sau đó thấy sự cần thiết và học cách để làm tốt hơn.</p>\n<p><em>Với khá nhiều công nghệ hiện tại như Nuxt.js, JAMstack, lập trình viên khá hứng thú với việc tập trung toàn bộ vào frontend và sử dụng rất ít Backend. Anh nghĩ thế nào về cách tiếp cận \"no-backend\" hoặc \"fullstack\"?</em></p>\n<p>Tôi thấy sản phẩm sẽ định hướng công nghệ sử dụng chứ không phải chiều ngược lại. Lập trình viên đi theo hướng công nghệ nào đó bởi vì nó phù hợp với sản phẩm họ đang xây dựng. Rõ ràng \"no-backend\" không phải là viên đạn bạc nhưng nó sẽ rất phù hợp với một nhóm các ứng dụng cụ thể</p>\n<p><em>Vue được viết lại rất nhiều lần. Nếu có thể quay về thời điểm ban đầu, một lời khuyên về công nghệ cho những người trẻ thì nó sẽ là gì?</em></p>\n<p><strong>Làm cách nào để tách biệt và decouple các module internal tốt hơn</strong></p>\n<p><em>Những năm gần đây, chúng ta thấy sự phát triển song song giữa JavaScript và TypeScript. Anh sẽ đặt cược vào tương lai nào: liệu chúng ta sẽ có type được thêm vào trong JavaScript hay TypeScript sẽ thay thế luôn JavaScript hay gì đó khác?</em></p>\n<p>Tôi nghĩ việc thêm type vào JS sẽ còn <em>rất rất</em> lâu - Tôi không nghĩ nó sẽ xảy ra luôn đấy chứ, bởi vì thiết kế một hệ thống type bởi cộng đồng (và được đánh giá bởi TC39) khá là... không khả thi. TypeScript cũng sẽ không thay thế JS vì nó được thiết kế là một <strong>superset của JS</strong>. Cá nhân tôi nghĩ có JS và TS (superset với Type) cùng phát triển đồng thời là cách tiếp cận thực tế và sẽ như vậy trong tương lai.</p>\n<p><em>Những người sử dụng Vue đã lên hàng triệu developer. Anh nghĩ cách nào tốt nhất để đánh giá tầm ảnh hưởng của một công nghệ. Số câu hỏi trên Stack Overflow, sao của Github, số lượt truy cập, hay số người sử dụng trong các công ty tập đoàn (mạng bị tách biệt không thể có thông tin được), những cá nhân bị \"ép\" sử dụng bởi quyết định của cấp trên. Tất cả những nhân tố đó có ảnh hưởng thế nào đến mức độ phổ biến của một công nghệ?</em></p>\n<p>Đây là một vấn đề bản chất của phần mềm nguồn mở, người sử dụng không cần phải báo cáo việc họ sử dụng và chúng ta cũng không có cách nào có track việc đó một cách chính xác. Đó là lý do tại sao tôi xem số lượng người sử dụng công cụ DevTool của Vue là con số tương đối chính xác vì nó biết chính xác tài khoản nào đang sử dụng.</p>\n<p><em>Làm việc với tree-shaking khá nhiều trong Vue.js 3. Anh thấy tại sao tree-shaking mất quá nhiều thời gian để áp dụng vào các framework hiện đại? Bộ có khó khăn gì với nó à?</em></p>\n<p>Cách làm việc của tree-shaking phụ thuộc vào việc source code tổ chức theo một cách rất cụ thể - nghĩa là nó làm việc tốt nhất khi code được viết (và các API được thiết kế) với tâm thế tree-shaking ngay từ ngày đầu tiên. Rất khó để một source code đã có trước sống <em>hòa thuận</em> với tree-shaking, hoặc phải thay đổi rất nhiều trong các API đã có, hoặc refactor gần như toàn bộ (rủi ro sẽ rất cao).</p>\n<p><em>Đề xuất Function-based component API trong Vue 3 nhận được khá nhiều thảo luận trong cộng đồng. Anh có suy nghĩ nào khác muốn chia sẻ với các lập trình viên?</em></p>\n<p>Đa phần phản hồi chúng tôi nghe được là việc sợ chúng tôi sẽ ngừng hỗ trợ các API của Vue 2.x hiện tại, và rõ ràng là sai lầm nếu chúng tôi làm việc đó. Là tác giả, người bảo trì hằng ngày chúng tôi tiếp xúc với những thay đổi, những ý tưởng mới sớm hơn ai hết, thường kéo theo việc chúng tôi sẽ quên mất tầm quan trọng của việc hỗ trợ tương thích ngược. Chúng tôi hiểu rằng người sử dụng sẽ không vui vẻ gì nếu chuyện đó xảy ra.</p>\n<p>Điều có thể rút ra là, chúng ta cần biết người dùng cần gì - thường không dễ để biết được và phải đi theo những cách rất khó khăn, và bạn cần sẵn sàng lắng nghe một cách tích cực chủ động.</p>\n<p><em>Vue được sử dụng trong các doanh nghiệp nhỏ, vừa và thậm chí các công ty triệu đô. Louis Vuitton and NASA đang sử dụng Vue. Có ví dụ nào anh đề nghị mọi người nên tham khảo như một ví dụ sử dụng thực tế</em></p>\n<p>Vấn đề là các dự án thực tế đủ phức tạp lại không phải open-source. Tôi nghĩ có thể xem source của Vue DevTools và Vue CLI UI nếu bạn cần một ví dụ đủ phức tạp, cả hai đều có giao diện không bình thường được viết bằng Vue, mặc dù nó không phải vấn đề mà các web app thường gặp.</p>\n<p>Bài phỏng vấn của <a href=\"https://evrone.com/evan-you-interview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">evrone</a></p>\n<blockquote>\n<p>Users don’t like things being taken away. The takeaway is you need to understand what your users want — it’s not that easy and sometimes you will get that information the hard way, but you need to be willing to listen regardless.</p>\n</blockquote>\n"}},{"node":{"title":"Cảm giác khi bạn viết CSS như thế nào trong năm 2020","path":"/cam-giac-khi-ban-viet-css-nhu-the-nao-trong-nam-2020/","date":"22. May 2020","timeToRead":4,"desc":"Nếu đã có bài làm một website trong năm 2016 nó như thế nào, thì giờ ta sẽ nói xem viết css trong năm 2020 sẽ ra mần sao","content":"<p><strong>Anh technical leader: em biết sao không, anh đã không viết code từ năm 2016 tới giờ, công việc của anh giờ chỉ toàn làm chính trị trong công ty thôi. Giờ em thấy cái dự án này công ty mình mới lấy về, họ muốn thêm phần giao diện cho nó khác đi, sửa responsive lại chút</strong></p>\n<p>Ngon ăn đấy anh, nhận đi.</p>\n<p><strong>Cái này họ làm React, nhưng mà lúc đó không biết đứa nào viết chỉ có một file css duy nhất với hơn 3000 dòng code, nhìn gớm quá, nhiều cái cứ xài tới xài lui mà không chịu kế thừa, cấu trúc thì khỏi nói rồi, gớm luôn, em thấy giờ mình làm sao cho tốt?</strong></p>\n<p>Đúng rồi anh, ai mà làm như thế.</p>\n<p><strong>Trước mắt, chúng ta coi hết lại đống này, xóa bớt mấy cái không cần thiết, sắp xếp lại, comment mọi thứ cho nó rõ ràng</strong></p>\n<p>Làm trên một file CSS đó luôn hả anh?</p>\n<p><strong>Ừ thì mình làm thêm bộ màu mới, thêm mấy tương tác cho nó cool hơn, sửa lỗi media queries, chắc là đủ rồi</strong></p>\n<p>Được mà, mà giờ không ai viết CSS thuần nữa đâu anh.</p>\n<p><strong>Giờ mình có những lựa chọn khác nào vậy em?</strong></p>\n<p>Giờ mình có nhiều framework, với những bộ màu đã định nghĩa sẵn, làm sẵn luôn responsive và hiệu ứng nhè nhẹ.</p>\n<p><strong>Kiểu bootstrap đúng không?</strong></p>\n<p>Xài cũng được, nhưng em không khuyến khích anh xài cái đó.</p>\n<p><strong>Sao vậy ta, hồi anh còn code, nó nổi lắm mà</strong></p>\n<p>Bớt nổi rồi anh. Giờ còn nhiều em <em>hót</em> không kém như Foundation, Bulma, Materialize, Semantic UI, Tailwind</p>\n<p><strong>Chọn đại một cái được không em</strong></p>\n<p>Mỗi thằng có ưu nhược khác nhau anh à, mà xài những cái này, các website bây giờ cứ na ná nhau, kiểu template, nói thật nhìn nó <em>khắm</em> lắm.</p>\n<p><strong>Vậy hổng lẽ tự viết sao em?</strong></p>\n<p>Bậy nè, anh không nên tự viết từ đầu chi, mà anh phải đi override lại chúng thôi, cũng khá khá nhiều thứ cần override.</p>\n<p><strong>Ít nhất nó cũng giúp chúng ta đơn giản hóa việt layout và responsive đúng chứ?</strong></p>\n<p>Nếu mà không yêu cầu cao, anh dùng những thư viện <em>nhẹ hiều</em> như Skeleton hay Pure CSS đi.</p>\n<p><strong>Pure CSS, anh tưởng anh đã đang viết pure css</strong></p>\n<p>Bậy nè, nó là tên thư viện, mà anh ít nhất biết dùng Flexbox chứ?</p>\n<p><strong>Nó là gì đó, anh dùng float không à, ủa mà tại sao ít nhất?</strong></p>\n<p>Kiểu layout bây giờ dùng flexbox không anh, còn cao cấp hơn thì dùng luôn css grid</p>\n<p><strong>Nó có gì hay ho vậy?</strong></p>\n<p>Nếu mà flexbox là kiểu layout một chiều, thì css grid là kiểu layout 2 chiều</p>\n<p><strong>Kiểu 2 chiều, như X, Y đúng không</strong></p>\n<p>Nó cho phép anh đưa nội dung về dạng row và column, rất nhiều tính năng xịn sò để làm các layout bay bổng</p>\n<p><strong>Ngon, vậy xài được đó</strong></p>\n<p>Chịu khó học nghe anh, lúc đầu hơi chua ăn đó.</p>\n<p><strong>Còn lựa chọn nào khác cho css không em?</strong></p>\n<p>Giờ anh có css variable nè, mixins, nesting, import, tính toán, hàm helper để code anh có tổ chức hơn.</p>\n<p><strong>Anh có nghe nhầm không, function và variable?</strong></p>\n<p>Không nhầm ạ</p>\n<p><strong>Mấy cái syntax lạ lồng như thế, có nguy hiểm không</strong></p>\n<p>Anh có mấy cái CSS preprocessor lo rồi mà</p>\n<p><strong>Như SASS/SCSS?</strong></p>\n<p>Đúng. Mà nó khác nhau đó nghe anh, SCSS > SASS, giờ cũng ít ai viết SASS lắm</p>\n<p><strong>LESS xài được ko em, anh quen viết LESS</strong></p>\n<p>Xưa rồi anh ơi, ai mà viết less nữa, nó chết bà rồi.</p>\n<p><strong>Nhiều thứ quá nhỉ</strong></p>\n<p>Đó em chưa kể đến mấy cái preprocessor mới ra là Stylus, CSS Crush, Myth đó.</p>\n<p><strong>Khó quá, bỏ qua, chọn đại một cái đi</strong></p>\n<p>Anh định dùng animation không, có quan tâm tới việc support nhiều trình duyệt không?</p>\n<p><strong>Có chứ em</strong></p>\n<p>Vậy anh phải coi thêm post-processor nữa, như PostCSS vậy</p>\n<p><strong>Nó là gì nữa á</strong></p>\n<p>Pre là xử lý <em>đường vào</em>, post là xử lý <em>đường ra</em> đó anh, nó đơn giản là thêm mấy cái syntax phù hợp cho các trình duyệt khác nhau</p>\n<p><strong>Vậy còn kinh nghiệm của em, thì chúng ta nên tổ chức sao cho tốt?</strong></p>\n<p>Xem thêm BEM á anh, một chuẩn mực đặt tên class sao cho dễ đọc để nuốt</p>\n<p><strong>Em có tự chế không đó?</strong></p>\n<p>Nào có anh ơi, em còn biết đến OOCSS và SUITCSS nữa mà không dám nói sợ anh nói em nói xạo</p>\n<p><strong>Kiểu này là anh phải sấp mặt mấy tháng để cập nhập kiến thức rồi em</strong></p>\n<p>Mà anh biết CSS-in-JS chưa?</p>\n<p><strong>Nó là cái nồi gì nữa em?</strong></p>\n<p>Nó cho anh viết CSS trong file JS</p>\n<p><strong>Em đùa vui quá</strong></p>\n<p>Xạo làm chó, bây giờ React nó hổng viết CSS như bình thường nữa anh, nó chơi kiểu CSS in JS, hay là styled component. Còn không anh dùng inline style sheet,, CSS module,...</p>\n<p><strong>Inline CSS, cái đó là Bad practice mà em</strong></p>\n<p>Giờ người ta không nghĩ vậy nữa đâu anh, nó là chuyện bình thường mà. Còn chưa nói đến JSS nữa đó anh</p>\n<p><strong>Thôi em à, anh thấy chúng ta đi xa quá rồi, từ CSS mà em chuyển nó thành JSS</strong></p>\n<p>Nhưng đó là những gì đang hót nhất mà anh, anh thấy không hót hả.</p>\n<p><strong>Anh nghĩ mình nên để yên cái project này và không thêm thắt gì nữa đi em, nó như vậy là đẹp rồi</strong></p>\n<p><a href=\"https://dev.to/madarsbiss/how-it-feels-like-to-style-things-in-2020-21cm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dev.to/madarsbiss/how-it-feels-like-to-style-things-in-2020-21cm</a></p>\n"}},{"node":{"title":"Con đường để bạn trở thành tech lead","path":"/con-duong-de-ban-tro-thanh-tech-lead/","date":"7. April 2020","timeToRead":2,"desc":"Bạn là một lập trình viên sành sỏi, code bạn viết chưa bao giờ làm các sếp thất vọng, vậy đâu là bước tiếp theo cho bạn - lead một team. Bài viết chia sẽ tóm gọn những đặc điểm, kỹ năng, kinh nghiệm nào cần có để thành công như một tech lead. ","content":"<h2 id=\"thế-nào-là-một-tech-lead-tl\"><a href=\"#th%E1%BA%BF-n%C3%A0o-l%C3%A0-m%E1%BB%99t-tech-lead-tl\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thế nào là một Tech Lead (TL)</h2>\n<ul>\n<li>TL là <strong>cánh tay phải</strong> đắc lực của <strong>Project manager</strong> (PM)</li>\n<li>Sự thành/bại của một TL được đong đo bằng <strong>sự thành công của team</strong> anh ấy dẫn dắt</li>\n<li>Là người có thể đưa ra một <strong>tầm nhìn công nghệ</strong>, đưa ra lựa chọn, <strong>quyết định</strong> sử dụng cái nào và không sử dụng cái nào</li>\n<li>Là người đưa đường dẫn lối cả team <strong>làm việc được cùng nhau</strong></li>\n<li>TL có thể <strong>nâng cao</strong> và <strong>giải quyết</strong> các vấn đề của team thông qua giao tiếp, kỹ năng lãnh đạo, và tầm ảnh hưởng.</li>\n</ul>\n<h2 id=\"kỹ-năng-công-nghệ\"><a href=\"#k%E1%BB%B9-n%C4%83ng-c%C3%B4ng-ngh%E1%BB%87\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kỹ năng công nghệ</h2>\n<ul>\n<li>Nắm một cách <strong>thông thạo</strong>, <strong>cứng cựa</strong> một ngôn ngữ, công nghệ nhất định</li>\n<li>Là người có thể <strong>debug</strong> những <strong>issue khó nhất</strong> mà cả team bó tay</li>\n<li><strong>Đưa ra giải pháp</strong> cốt lõi để cả team có thể <strong>làm việc hiệu quả</strong>, <strong>phối hợp ăn ý</strong></li>\n</ul>\n<h2 id=\"giao-tiếp-lãnh-đạo\"><a href=\"#giao-ti%E1%BA%BFp-l%C3%A3nh-%C4%91%E1%BA%A1o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giao tiếp, lãnh đạo</h2>\n<ul>\n<li>Khả năng <strong>trình bài rõ ràng, thuyết phục</strong> các ý tưởng, tầm nhìn, và kiến trúc công nghệ của mình cũng như của người khác</li>\n<li><strong>Hướng dẫn, chỉ dạy</strong> những người lập trình viên khác với sự vui vẻ và nhiệt tâm</li>\n</ul>\n<h2 id=\"đối-với-dự-án\"><a href=\"#%C4%91%E1%BB%91i-v%E1%BB%9Bi-d%E1%BB%B1-%C3%A1n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đối với dự án</h2>\n<ul>\n<li>Đưa ra nhưng <strong>giải pháp</strong> giúp khách hàng, dự án, team hoàn thành tốt công việc của mình</li>\n<li>Phân chia công việc <strong>tránh</strong> các bản <strong>release to bự</strong> không thể kiểm soát, tránh bị BA (business analyser) đè đầu làm cả trăm feature trong một sprint</li>\n<li>Luôn trong tâm ý làm sao đạt được kết quả một cách <strong>tiết kiệm, hợp lý</strong>, đưa ra những <strong>dự đoán</strong> về rủi ro có thể gặp</li>\n</ul>\n<h2 id=\"tính-cách\"><a href=\"#t%C3%ADnh-c%C3%A1ch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tính cách</h2>\n<ul>\n<li>Kỹ năng làm việc với <strong>áp lực</strong> một cách <strong>hiệu quả</strong> là yêu cầu bắt buộc</li>\n<li>Luôn <strong>giữ mối quan hệ tốt đẹp</strong> với khách hàng, thành viên trong team</li>\n</ul>\n<h2 id=\"tầm-ảnh-hưởng\"><a href=\"#t%E1%BA%A7m-%E1%BA%A3nh-h%C6%B0%E1%BB%9Fng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tầm ảnh hưởng</h2>\n<ul>\n<li>Giúp mọi người tốt hơn, thông qua <strong>code review</strong>, <strong>tài liệu, định hướng kỹ thuật, và hướng dẫn trực tiếp</strong></li>\n<li>Khả năng xây dựng, phát triển <strong>kiến trúc ứng dụng tiến xa hơn</strong>, bay cao hơn và đưa đường dẫn lối cho team đi theo</li>\n</ul>\n<p><a href=\"https://speakerdeck.com/cromwellryan/making-the-leap-to-tech-lead\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Making the leap to tech lead</a></p>\n"}},{"node":{"title":"7 lý do bạn không nên sử dụng TypeScript","path":"/7-ly-do-ban-khong-nen-su-dung-type-script/","date":"15. February 2020","timeToRead":4,"desc":"TypeScript có phải là con ác chủ bài, ngôn ngữ của tương lai, viết TypeScript thì mọi thứ sẽ không thể nào còn lỗi, những lý do khiến bạn phải suy nghĩ lại những nhận định trên","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#qu%C3%A1-m%E1%BA%A1o-hi%E1%BB%83m\">Quá mạo hiểm</a></li>\n<li><a href=\"#qu%C3%A1-r%E1%BB%91i-r%E1%BA%AFm\">Quá rối rắm</a></li>\n<li><a href=\"#kh%C3%B4ng-gi%E1%BA%A3i-quy%E1%BA%BFt-v%E1%BA%A5n-%C4%91%E1%BB%81\">Không giải quyết vấn đề</a></li>\n<li><a href=\"#ch%E1%BA%B3ng-thay-th%E1%BA%BF-ch%E1%BB%89-l%C3%A0-ph%E1%BA%A7n-m%E1%BB%9F-r%E1%BB%99ng\">Chẳng thay thế, chỉ là phần mở rộng</a></li>\n<li><a href=\"#m%C3%A3-ngu%E1%BB%93n-m%E1%BB%9F-c%C3%B3-th%E1%BA%ADt-v%E1%BA%ADy-kh%C3%B4ng\">Mã nguồn mở, có thật vậy không?</a></li>\n<li><a href=\"#c%C3%A1c-c%C3%B4ng-ty-l%E1%BB%9Bn-s%E1%BB%AD-d%E1%BB%A5ng\">Các công ty lớn sử dụng...</a></li>\n<li><a href=\"#nhi%E1%BB%81u-t%C3%ADnh-n%C4%83ng-h%C6%A1n\">Nhiều tính năng hơn</a></li>\n</ul>\n<!-- /TOC -->\n<p>Rất nhiều người yêu TypeScript, nó <em>\"giải quyết\"</em> rất nhiều vấn đề mà JS gặp phải, một ngôn ngữ <em>\"thay thế\"</em> cho JS, nó sẽ báo bạn ngay nếu code bạn có <em>vấn đề</em> và <em>dễ đọc</em> hơn. Có nhiều nhiều lý do được đưa ra để bạn nên dùng TypeScript, bài này ngược lại đưa cho bạn 7 lý do không nên dùng TypeScript</p>\n<h2 id=\"quá-mạo-hiểm\"><a href=\"#qu%C3%A1-m%E1%BA%A1o-hi%E1%BB%83m\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Quá mạo hiểm</h2>\n<p>Tại sao lại mạo hiểm? Nếu TypeScript thêm định nghĩa type và kiểm tra lúc compile, IDE còn thông báo ngay lúc nếu kiểu dữ liệu không khớp. Chính xác đó là lý do. TypeScript chỉ kiểm tra kiểu dữ liệu lúc compile và <em>chỉ</em> sử dụng kiểu có định nghĩa. Tất cả các network call, API và thư viện bổ sung chưa có type sẽ không có cách nào tương tác với TypeScript.</p>\n<p>Nếu trong JS, chúng ta không đặt giả định về kiểu sẽ nhận được, không tự nhủ \"cái này chắc chắn\" sẽ trả về kiểu <code class=\"language-text\">string</code>, chúng ta luôn biết phải kiểm tra giá trị thật sự của biến nhận được trước khi sử dụng. Với TS, bạn phụ thuộc compiler làm việc này, nhưng sẽ có rất nhiều thứ phải làm. Bạn vừa phải bỏ thời gian viết định nghĩa cho từng tỉ tỉ thứ, rồi bỏ thêm mớ thời gian để đảm bảo các định nghĩa bạn viết ra phải đúng lúc chạy, vậy mục tiêu cuối cùng của tất cả những thứ đó là gì?</p>\n<h2 id=\"quá-rối-rắm\"><a href=\"#qu%C3%A1-r%E1%BB%91i-r%E1%BA%AFm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Quá rối rắm</h2>\n<p>Mặt trái của sự thật: một ngôn ngữ được kỳ vọng sẽ đem đến sự minh bạch, sạch sẽ, dễ đọc hơn lại đem đến điều người lại. Để minh họa, hãy nhìn thử một đoạn TS sau</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// TODO: do this more elegantly</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>currentReducer <span class=\"token keyword\">as</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Reducer<span class=\"token operator\">&lt;</span>NewState<span class=\"token punctuation\">,</span>NewActions<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> nextReducer\n\n<span class=\"token keyword\">static</span> create<span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>subscribe<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>subscriber<span class=\"token operator\">:</span> Subscriber<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> TeardownLogic<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span>subscribe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đóng code trên lấy từ thư viện Redux và RxJS. Nếu bạn đang viết React và thích HOC, thì bạn sẽ hiểu viết bổ sung TypeScript sẽ đem đến mồ hôi và nước mắt cho các đồng nghiệp khác như thế nào.</p>\n<h2 id=\"không-giải-quyết-vấn-đề\"><a href=\"#kh%C3%B4ng-gi%E1%BA%A3i-quy%E1%BA%BFt-v%E1%BA%A5n-%C4%91%E1%BB%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Không giải quyết vấn đề</h2>\n<p>TS bảo là giải quyết các vấn đề mà JS đang gặp. Nhưng sự thật là KHÔNG. Dynamic typing chưa bao giờ là vấn đề với những lập trình viên JS (có mình luôn), bạn sẽ phàn nàn vậy \"NaN === NaN\" không phải là vấn đề sau, việc có cũng được không có cũng được dấu chấm phẩy <code class=\"language-text\">;</code> không phải là vấn đề à,... một vài lý do khác nữa. TypeScript cũng chẳng giải quyết như bạn tưởng tượng đâu, nó chỉ giới thiệu một chuẩn mới, làm phân cực công đồng JS thêm thôi.</p>\n<p>Thậm chí, nếu việc thiếu type trong JS là một vấn đề, TS không giải quyết luôn. Những ngôn ngữ thật sự giải quyết nó là Java, C, C# và các ngôn ngữ <code class=\"language-text\">compiled</code>.</p>\n<h2 id=\"chẳng-thay-thế-chỉ-là-phần-mở-rộng\"><a href=\"#ch%E1%BA%B3ng-thay-th%E1%BA%BF-ch%E1%BB%89-l%C3%A0-ph%E1%BA%A7n-m%E1%BB%9F-r%E1%BB%99ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chẳng thay thế, chỉ là phần mở rộng</h2>\n<p>TS sau cùng cũng complie về JS, nó không hề là <strong>một ngôn ngữ có thể thay thế</strong> JS như tự sướng. Những gì TypeScript có thể làm, sẽ bị giới hạn trong những gì JS làm được. Đừng ảo tưởng với TS là bạn đã đủ chinh chiến trên mọi chiến trường, đừng tin vào lời dối trá đó, hãy tìm hiểu nhiều hơn sức mạnh thực sự của JS và linh động kiểu dữ liệu mang lại gì cho bạn, lúc đó bạn sẽ thấy mình đã tiến xa hơn những gì cái khung TS đã đóng bạn lại.</p>\n<h2 id=\"mã-nguồn-mở-có-thật-vậy-không\"><a href=\"#m%C3%A3-ngu%E1%BB%93n-m%E1%BB%9F-c%C3%B3-th%E1%BA%ADt-v%E1%BA%ADy-kh%C3%B4ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mã nguồn mở, có thật vậy không?</h2>\n<p>Nhiều lý do đưa ra khi sử dụng TS là vì nó mã nguồn mở. Đúng, nhưng chưa đủ. Nó vẫn chịu sự chi phối từ Microsoft, một tập đoàn độc quyền khổng lồ nổi tiếng nhất thế giới, Microsoft chia sẻ mã nguồn nó như một động thái tiếp thị và lôi kéo thêm lập trình viên. Đừng lẫn lộn giữa mã nguồn mở với sự dân chủ: Microsoft vẫn ở đây và có quyền làm mọi thứ với TS, bạn chẳng làm gì được ngoài việc đứng nhìn. JS, lại khác, được cộng đồng đảm trách, sẽ không thay đổi bất cứ thứ gì nếu không được sự đồng ý từ số đông cộng đồng.</p>\n<h2 id=\"các-công-ty-lớn-sử-dụng\"><a href=\"#c%C3%A1c-c%C3%B4ng-ty-l%E1%BB%9Bn-s%E1%BB%AD-d%E1%BB%A5ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các công ty lớn sử dụng...</h2>\n<p>Không ít các cá nhân có trách nhiệm lựa chọn ngôn ngữ cho dự án lại đưa đây làm một lý do để sử dụng TS. Vậy có tính đến chuyện các công ty lớn cũng có những bộ codebase cũ mèm, lỗi thời. Việc người khác chọn một thứ gì đó, chắc gì thứ đó cũng hợp với mình.</p>\n<h2 id=\"nhiều-tính-năng-hơn\"><a href=\"#nhi%E1%BB%81u-t%C3%ADnh-n%C4%83ng-h%C6%A1n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nhiều tính năng hơn</h2>\n<p>Xưa rồi, khi TS được giới thiệu năm 2012, các tính năng như <code class=\"language-text\">class</code> chưa có trên JS. Nhưng nay đã là 2020, hơn 8 năm nay, JS đã tiến một bước rất xa, phải nói đúng hơn là giờ TS còn phải chạy theo JS</p>\n<p>Từ quan điểm của một cá nhân không thấy nhiều lợi ích mà TypeScript mang lại.</p>\n<p><a href=\"https://everyday.codes/javascript/7-really-good-reasons-not-to-use-typescript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">7 really good reasons not to use TypeScript</a></p>\n"}},{"node":{"title":"Chém gió: Tại sao tui vẫn thích Firefox","path":"/chem-gio-tai-sao-tui-van-thich-firefox/","date":"5. April 2018","timeToRead":3,"desc":"Không biết bạn sinh ra từ thuở nào, nhưng tui là thế hệ 8x, thời điểm mà Firefox nổi lên - rồi chìm xuống","content":"<p>Ngày xưa khi Firefox ra đời đánh dấu sự tàn lụi của IE6, với những tính năng siêu ngầu như: cho phép user cài thêm <strong>extensions</strong>, thay <strong>theme</strong> như thay áo. Ai cũng khoái.</p>\n<p>Vài năm sau, dân chơi thứ thiệt bước vào cuộc đấu, cái tên ai cũng biết là ai đấy - <strong>Chrome</strong>. Khi vừa xuất hiện thực sự Chrome trở thành cơn địa chấn, số lượng người dùng lúc ban đầu nhiều không tưởng, và không ngừng tăng, bởi vì nó được chống lưng bởi Google, con ác chủ bài để Google có thể chiếm hết thị phần trình duyệt. Chắc chắn bạn cũng đang dùng Chrome để đọc blog này!</p>\n<p>Web <em>bây giờ</em> khác xưa nhiều rồi, công nghệ tân thời tốn điện hơn xưa, à ko, tốn RAM và CPU hơn, web ko còn là những trang tin đơn giản, nó còn là những ứng dụng phức tạp chạy trên trình duyệt bằng những công nghệ, ngôn ngữ không ngừng thay đổi để <strong>thõa mãn</strong> thú tính của người sử dụng, chúng ta đấy.</p>\n<blockquote>\n<p>Tui một developer chạy con Macbook Pro cấu hình cao nhất, mới nhất. Khi bắt đầu lập trình và bật Chrome DevTools lên, pin tụt nhanh như chó phóng qua hàng rào</p>\n</blockquote>\n<p>Và nếu bạn cũng là developer như tui, chắc bạn cũng sẽ bật Task manager lên và kiểm tra, a đù, sao Chrome mày ăn RAM tao kinh dị vạy.</p>\n<p>Rồi bạn nghe đâu với bản <a href=\"https://blog.mozilla.org/blog/2017/11/14/introducing-firefox-quantum/?utm_source=twitter&#x26;utm_medium=social&#x26;utm_campaign=quantum-launch-2017&#x26;utm_content=launch-blog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Firefox Quantum</a> mới bọn dev của mozila đã ngồi fix hơn 7 triệu dòng code để Firefox cạnh tranh về tốc độ với Google! Quảng cáo ngầu ghê!</p>\n<p>Năm 2017 Quantum chạy chính thức trên Android, Linux, iOS, Mac, Windows, nói chung chạy tuốt, phải hơn sau 10 năm từ ngày phiên bản đầu tiên, phiên bản đã giết chết IE mới có một cập nhập thực sự đáng đồng tiền bát cháo.</p>\n<p><img src=\"https://www.mozilla.org/media/img/firefox/home/hero-laptop.cd8ad96e2fbc.png\" alt=\"Chém gió: Tại sao tui vẫn thích Firefox\"></p>\n<p>Bên cạnh giao diện cool mới, nó load web nhanh hơn gấp đôi so với phiên bản Firefox 6, sử dụng ít hơn 30% RAM so với Chrome.</p>\n<p>Sau 10 năm lăn lộn trên chiến trường, Mozilla đã hiểu được rằng để cạnh tranh được với đối thủ bây giờ thì không chỉ cần một vài cải tiến nhỏ là được, mọi thứ phải thực sự <strong>AWSOME</strong>.</p>\n<p>Có thể những tính năng được đưa vào Firefox Quantum bạn cũng có thể tìm thấy trên Chrome, nhưng điều gì khiến tui vẫn thích Firefox và luôn muốn mình sử dụng Firefox khi có thể?</p>\n<p>Các công ty lớn điều sẽ muốn người sử dụng sản phẩm từ một nhà cung cấp khác quay lưng và sử dụng sản phẩm của mình, công ty sẽ cung cấp những tính năng chỉ-có-thể-tìm-thấy trên sản phẩm của họ để cầm chân người dùng trong ecosymtem của công ty.</p>\n<p>Lấy ví dụ như Apple Keynote chỉ có thể sử dụng với Safari, iMessage chỉ có trên iOS, bạn phải say-good-bye khi chuyển qua Android, trang update của Microsoft chỉ có thể sự dụng trên IE, Edge, để chép nhạc vào iphone bạn phải cài iTune,... ngược lại Firefox có thể nói là kẻ phá đám đứng ngoài khu vườn thượng uyển đó, là đối thủ cạnh tranh để chống lại sự độc quyền và khiến việc các công ty lớn bắt chúng ta phụ thuộc ngày càng nhiều vào các công ty này trở nên khó hơn, khiến họ phải dè chừng và không ngừng cái tiến sản phẩm. Như câu nói nghe suốt \"Có cạnh tranh thì mới có phát triển\", như khi Grab đã loại đi Uber rồi và khi chúng ta sẽ ra sau, Youtube của google một khi đã giết hết tất cả đối thủ trong mảng Video trực tuyến, chúng ta ăn quảng cáo còn hơn cả trên truyền hình, xem một clip 10 phút là đã có quảng cáo, vừa vào xem đã phải xem quảng cáo trước.</p>\n<p>Bonus: từ hàng triệu yêu cầu từ user, Firefox đã có tính năng tắt hết cái <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1368744\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Push-Notify</a>, một trong những yêu cầu hết sực bực mình khi các trang web bây giờ đều đòi cấp phép cho nó quăng thông báo quảng cáo qua trình duyệt dù mình không đang truy cập nó.</p>\n<p>Fanboy Firefox cho hay :D</p>\n<p>Dịch từ đâu quên nguồn</p>\n"}}]}}},"context":{}}