{"hash":"caea05e5fffa0cfcd138bf0521c438fe71931a82","data":{"tag":{"title":"react","belongsTo":{"edges":[{"node":{"title":"5 sai làm thường thấy khi viết react component","path":"/5-sai-lam-thuong-thay-khi-viet-react-component/","date":"3. August 2020","timeToRead":5,"desc":"Tổng hợp những lỗi thường thấy khi bạn viết react component, và làm sao để khắc phục","content":"<p>Đây cũng chẳng phải là những lỗi <em>bắt buộc</em> phải sửa, thoạt nhìn bạn cũng sẽ ko biết được nó có bị sai gì không, cũng không ảnh hưởng đến performance hay gì. Tuy nhiên mỗi người sẽ có ý kiến khác nhau trên một vấn đề, có người sẽ bắt fix, người thì cho là ko cần thiết, rất mong các bạn bổ sung cho quan điểm của mình.</p>\n<h2 id=\"sử-dụng-usestate-khi-không-thực-sự-cần-thiết\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-usestate-khi-kh%C3%B4ng-th%E1%BB%B1c-s%E1%BB%B1-c%E1%BA%A7n-thi%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng <code class=\"language-text\">useState</code> khi không thực sự cần thiết</h2>\n<p>Đôi khi chúng ta sử dụng <code class=\"language-text\">useState</code> trong nhiều trường hợp không cần thiết, đưa những giá trị vào <code class=\"language-text\">state</code> không thực sự ảnh hưởng đến việc cập nhập component.</p>\n<p>Ví dụ, trong ta có 2 cái nút: Counter và Submit, nút counter tăng giá trị count, nút submit sẽ gửi giá trị count lên API. <strong>Lưu ý là không có hiển thị giá trị count trên giao diện</strong></p>\n<p>❌</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ClickButton</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClickCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClickRequest</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">apiCall</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClickCount<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Counter</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClickRequest<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Submit</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nhìn chung code này cũng sẽ ko có lỗi gì đâu, chỉ là nếu để ý bạn sẽ thấy khi state thay đổi, component <em>re-render</em>, nhưng rõ ràng việc <em>re-render</em> cũng chẳng thay đổi gì, vì chúng ta không hiển thị giá trị <code class=\"language-text\">count</code> ra giao diện</p>\n<p>✅ Cách làm đề nghị như sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ClickButton</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClickCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClickRequest</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">apiCall</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClickCount<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Counter</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClickRequest<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Submit</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Ở đây chúng ta dùng <code class=\"language-text\">useRef</code>, giá trị của <code class=\"language-text\">useRef</code> dù có thay đổi cũng không ảnh hưởng đến việc <em>re-render</em>.</p>\n<h2 id=\"sử-dụng-routerpush-thay-vì-link\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-routerpush-thay-v%C3%AC-link\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng <code class=\"language-text\">router.push</code> thay vì link</h2>\n<p>Ví dụ nếu chúng ta muốn <em>navigate</em> đến một trang nào đó khi user click vào</p>\n<p>❌</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ClickButton</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> history <span class=\"token operator\">=</span> <span class=\"token function\">useHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    history<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/next-page'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Go to next page</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Vấn đề là nếu làm như vậy, làm sau user có thể mở ra một tab mới?, các trình screen reader cũng sẽ ko hiểu được nó là một link (accessibility không tốt).</p>\n<p>✅ Cách làm đề nghị như sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ClickButton</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/next-page<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Go to next page</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"handle-action-bằng-useeffect\"><a href=\"#handle-action-b%E1%BA%B1ng-useeffect\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Handle action bằng useEffect</h2>\n<p><code class=\"language-text\">useEffect</code> là một trong những hook tốt nhất, và tốn nhiều giấy mực nhất của react. Mặc dù cũng hữu ích đấy nhưng cũng không ít lúc phải mệt mỏi với nó.</p>\n<p>Thí dụ có một cái component <code class=\"language-text\">fetch</code> một danh sách dữ liệu, rồi render ra</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">DataList</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onSuccess <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>loading <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>error <span class=\"token operator\">&amp;&amp;</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> onSuccess<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Data: </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Ở đây chúng ta setup 2 hook <code class=\"language-text\">useEffect</code>, cái đầu để load dữ liệu lần đầu tiên, cái thứ 2 để gọi <code class=\"language-text\">onSuccess</code> khi có thay đổi về dữ liệu.</p>\n<p>Vấn đề là nó làm mất quan hệ 1-1 giữa action và function cần gọi. Nói một cách dễ hiểu hơn là việc <code class=\"language-text\">onSuccess</code> không <strong>đảm bảo chỉ</strong> được gọi khi get dữ liệu thành công, đâu đó trong code bạn vẫn có thể có những cách khác để gọi <code class=\"language-text\">onSuccess</code>.</p>\n<p>✅ Cách làm đề nghị như sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">DataList</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onSuccess <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fetchedData</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>fetchedData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"mỗi-component-một-nhiệm-vụ\"><a href=\"#m%E1%BB%97i-component-m%E1%BB%99t-nhi%E1%BB%87m-v%E1%BB%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mỗi component một nhiệm vụ</h2>\n<p>Compose nhiều component nói chúng là khó, khó ở chỗ khi nào tách thì hợp lý. Lấy ví dụ như cái header sẽ xuất hiện một nút burger trên mobile và tab trên desktop</p>\n<p>❌</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Header</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> menuItems <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HeaderInner</span></span> <span class=\"token attr-name\">menuItems</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>menuItems<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">HeaderInner</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> menuItems <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">isMobile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BurgerButton</span></span> <span class=\"token attr-name\">menuItems</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>menuItems<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tabs</span></span> <span class=\"token attr-name\">tabData</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>menuItems<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Vấn để ở đây là với logic <code class=\"language-text\">isMobile</code> như vậy, chúng ta có thực sự cần thiết tách <code class=\"language-text\">HeaderInner</code> ra không?</p>\n<p>✅ Cách làm đề nghị như sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Header</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token function\">isMobile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BurgerButton</span></span> <span class=\"token attr-name\">menuItems</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>menuItems<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tabs</span></span> <span class=\"token attr-name\">tabData</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>menuItems<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"chỉ-một-công-việc-thực-hiện-trong-useeffect\"><a href=\"#ch%E1%BB%89-m%E1%BB%99t-c%C3%B4ng-vi%E1%BB%87c-th%E1%BB%B1c-hi%E1%BB%87n-trong-useeffect\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chỉ một công việc thực hiện trong <code class=\"language-text\">useEffect</code></h2>\n<p>Nếu không cẩn thận việc sử dụng <code class=\"language-text\">useEffect</code> lắm lúc cũng giống như cơn ác mộng với <code class=\"language-text\">componentWillReceivedProps</code> và <code class=\"language-text\">componentDidUpdate</code> một thời. Tưởng tượng chúng ta có một component fetch dữ liệu từ backend, hiển thị breadcrumb tùy theo vị trí hiện tại</p>\n<p>❌</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Example</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token dom variable\">location</span> <span class=\"token operator\">=</span> <span class=\"token function\">useLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/*  Calling the api */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateBreadcrumbs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Updating the breadcrumbs*/</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">updateBreadcrumbs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token dom variable\">location</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pathname</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BreadCrumbs</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta đang chạy 2 effect khác nhau: 1 là fetch dữ liệu, 2 là update breadcrumb trên giá trị location (nếu có thay đổi). Rõ ràng là đôi khi location có change thật nhưng chúng ta đâu cần <code class=\"language-text\">fetchData</code> chạy</p>\n<p>Nên tách ra mỗi effect chỉ làm 1 việc thôi.</p>\n<p>✅ Cách làm đề nghị như sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Example</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token dom variable\">location</span> <span class=\"token operator\">=</span> <span class=\"token function\">useLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateBreadcrumbs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Updating the breadcrumbs*/</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">updateBreadcrumbs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token dom variable\">location</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pathname</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/*  Calling the api */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BreadCrumbs</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Không biết còn trường hợp nào chúng ta vẫn hay mắc phải không, các bạn có thể chia sẻ thêm.</p>\n<p><a href=\"https://www.lorenzweiss.de/common_mistakes_react_hooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Five common mistakes writing react components (with hooks) in 2020</a></p>\n"}},{"node":{"title":"Mental model trong React","path":"/mental-model-trong-react/","date":"17. May 2020","timeToRead":5,"desc":"Nếu lập trình đủ lâu, bạn sẽ ít nhiều nghe đến khái niệm mental model, và nếu bạn đã và đang viết React, bạn càng thấy thuật ngữ này xuất hiện rất nhiều. Đây là một khái niệm không chỉ trong hữu dụng trong React, mà nó còn là chìa khóa để bạn tự tin khi làm việc với những thư viện như React.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#mental-model-l%C3%A0-g%C3%AC\">Mental model là gì</a></li>\n<li>\n<p><a href=\"#h%C3%ACnh-dung-c%C3%A1ch-react-v%E1%BA%ADn-h%C3%A0nh-nh%C6%B0-th%E1%BA%BF-n%C3%A0o\">Hình dung cách React vận hành như thế nào</a></p>\n<ul>\n<li><a href=\"#t%E1%BA%A5t-c%E1%BA%A3-%C4%91%E1%BB%81u-l%C3%A0-function\">Tất cả đều là function</a></li>\n<li><a href=\"#component-m%E1%BB%99t-function-tr%E1%BA%A3-v%E1%BB%81-jsx\">Component: một function trả về JSX</a></li>\n<li><a href=\"#prop-tham-s%E1%BB%91-c%E1%BB%A7a-function\">Prop: tham số của function</a></li>\n<li><a href=\"#h%C3%ACnh-dung-v%E1%BB%81-m%E1%BB%99t-function\">Hình dung về một function</a></li>\n</ul>\n</li>\n<li><a href=\"#h%C3%ACnh-dung-c%C3%A1ch-react-render\">Hình dung cách React render</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"mental-model-là-gì\"><a href=\"#mental-model-l%C3%A0-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mental model là gì</h2>\n<p>Một chữ rất khó tìm được một từ tiếng việt gói gọn để mô tả nó. Một cách dài dòng thì nó <strong>là cách mà chúng ta hình dung một vấn đề trong đầu</strong>, một bước <strong>mapping</strong> một hệ thống ở bên ngoài vào trong đầu trong ta, hình dung nó cách vận hành.</p>\n<p><img src=\"https://obedparla.com/static/d3c5f4f4adcb11d610da2a9dd9b38ce5/601b1/mental-models-representation.webp\" alt=\"Mental model trong React\"></p>\n<p>Một ví dụ điển hình của mental model là <em>internet</em>: một hệ thống phức tạp gồm nhiều phần kết nối lại với nhau, nhưng hãy nghĩ đến cái mà bạn hình dung về nó. Tôi sẽ nghĩ nó là một hệ thống các máy tính kết nối lẫn nhau thông qua rất nhiều server, một vài <em>điều hướng viên</em> giúp định hướng đường đi của thông tin.</p>\n<p>Nó không phải là một hệ thống mô tả đầy đủ chi tiết về internet, nhưng ít nhất với cái hình dung này, tôi có thể xử lý nhiều thứ liên quan, thí dụ như nếu tôi cần mạng thì tôi cần có máy tính thiết bị đầu cuối và nối vào một đường truyền của nhà mạng.</p>\n<p><strong>Tại sao quan trọng?</strong></p>\n<p>Nếu chúng ta hình dung được mọi thứ sẽ vận hành ra làm sao, nếu gặp một vấn đề, chúng ta có thể làm việc với nó trơn tru hơn.</p>\n<h2 id=\"hình-dung-cách-react-vận-hành-như-thế-nào\"><a href=\"#h%C3%ACnh-dung-c%C3%A1ch-react-v%E1%BA%ADn-h%C3%A0nh-nh%C6%B0-th%E1%BA%BF-n%C3%A0o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hình dung cách React vận hành như thế nào</h2>\n<p>React giúp chúng ta xây dựng nhưng hệ thống UI phức tạp, với tùm lum thứ tương tác qua lại với nhau dễ dàng hơn trước đây rất nhiều. Nó cũng định hướng chúng ta viết code theo một cách rất cụ thể, giống như nó thể thơ \"lục bát\", khi bạn viết thì phải tuân thủ những nguyên tắc nhất định.</p>\n<p>Ý tưởng chính của React: <strong>đóng gói</strong> những logic và UI giống nhau của ứng dụng thành <strong>một khối</strong>, React đảm bảo phần đóng gói này luôn cập nhập.</p>\n<h3 id=\"tất-cả-đều-là-function\"><a href=\"#t%E1%BA%A5t-c%E1%BA%A3-%C4%91%E1%BB%81u-l%C3%A0-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tất cả đều là function</h3>\n<ol>\n<li>React component: là một function</li>\n<li>Một component chứa một component khác: một function gọi đến một function khác</li>\n<li>Prop: tham số của một function</li>\n</ol>\n<p>Khi viết bằng JSX, bạn có thể tưởng nhầm component, prop là gì đó cao siêu. Nếu bỏ hết những gì của JSX đi, React là những function gọi qua gọi lại.</p>\n<h3 id=\"component-một-function-trả-về-jsx\"><a href=\"#component-m%E1%BB%99t-function-tr%E1%BA%A3-v%E1%BB%81-jsx\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Component: một function trả về JSX</h3>\n<p>React sử dụng JSX - Javascript XML - một cách viết <em>nhét</em> HTML vào trong javascript.</p>\n<p>Hãy bỏ qua class component và chỉ tập trung vào functional component đang trở nên phổ biến hơn. Một function component sẽ hoạt động y như một javascript function thông thường. React component luôn trả về JSX -> sau đó sẽ được thực thi và trả về kết quả cuối cùng là HTML</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Li</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">RickRoll</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Li</span></span> <span class=\"token attr-name\">color</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Never give you up</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Li</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Sẽ được đưa về Javascript như sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Li</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">RickRoll</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        className<span class=\"token operator\">:</span> <span class=\"token string\">\"wrapper\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"ul\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span>\n          <span class=\"token maybe-class-name\">Li</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            color<span class=\"token operator\">:</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"Never give you up\"</span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Trong React, cũng như trong HTML và đời sống, con thì chỉ có một mẹ, không đứa con nào của thể do 2 người mẹ sinh ra, mỗi component cũng chỉ có một <em>mẹ</em>, component <em>mẹ</em> thì có thể có nhiều con.</p>\n<h3 id=\"prop-tham-số-của-function\"><a href=\"#prop-tham-s%E1%BB%91-c%E1%BB%A7a-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Prop: tham số của function</h3>\n<p>Prop (properties) chẳng qua là <em>một cách gọi khác</em> cho tham số truyền vào trong function, còn về mọi thứ còn lại nó hoàn toàn giống nhau, React có <em>nhét</em> thêm một số tham số của riêng nó như <code class=\"language-text\">children</code>.</p>\n<h3 id=\"hình-dung-về-một-function\"><a href=\"#h%C3%ACnh-dung-v%E1%BB%81-m%E1%BB%99t-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hình dung về một function</h3>\n<p>Bạn có thể hình dung function/component như những chiếc hộp, thằng này bọc thằng kia</p>\n<p><img src=\"https://obedparla.com/static/cf7892f6a3db2815d6c502fe74538e4a/1f85e/box-inside-box.webp\" alt=\"Mental model trong React\"></p>\n<p><strong>Những chiếc hộp này tương tác với nhau như thế nào?</strong></p>\n<p>Bạn có thể hình dung trong đời sống thực ông bà có câu nói <strong>tài sản của cha/mẹ là của con, tài sản của con là của con</strong>, Javascript người ta đặt tên cho kiểu kế thừa đó gọi là <strong>closure</strong>.</p>\n<p>Đây là cách mà các function cha-con tương tác với nhau, bạn sử dụng function, bạn đã sử dụng closure.</p>\n<p><img src=\"https://obedparla.com/static/96f403cd585425c1057214447165bbbe/ffce4/data-flow.webp\" alt=\"Mental model trong React\"></p>\n<p>Nghĩa là trong React, là cha mẹ chúng ta có thể truyền prop xuống cho con, nhưng <em>tài sản</em> của con thì chúng ta không đụng vào được</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Parent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      The count is </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildButtons</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>setCount<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">count</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">ChildButtons</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> props<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onClick</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Increase count\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> props<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onClick</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Decrease count\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"hình-dung-cách-react-render\"><a href=\"#h%C3%ACnh-dung-c%C3%A1ch-react-render\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hình dung cách React render</h2>\n<p>Render có thể xem là phần gây <em>khó dễ</em> nhất của React để mà hình dung. Có những thứ nhìn vào code chúng ta sẽ không thấy được cơ chế khi render chuyện gì xảy ra và không xảy ra.</p>\n<p>Tưởng tượng nó như một cái hộp có thể <em>tái chế</em>, lần render đầu tiền là lúc sản xuất ra chiếc hộp này, các lần re-render tiếp theo, hay <em>tái chế</em>, phần lớn mọi thứ sẽ được đập đi làm lại, nhưng những phần như <code class=\"language-text\">state</code> sẽ được <em>tái sử dụng</em></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Thumbnail</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">withIcon</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AmazingIcon</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">imgUrl</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">alt</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">alt</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><img src=\"https://obedparla.com/static/78de62863da9bd4c40c588c294167031/ffce4/react-rendering-mental-model.webp\" alt=\"Mental model trong React\"></p>\n<p>Việc của React phải làm với <code class=\"language-text\">state</code> là đảm bảo nó consistent giữa các lần render.</p>\n<p>Khi một chiếc hộp được tái chế, toàn bộ các hộp con bên trong cũng được tái chế - re-render bởi các <code class=\"language-text\">state</code> và <code class=\"language-text\">prop</code> lúc này đã thay đổi.</p>\n<p><img src=\"https://obedparla.com/static/267768646d810a0032728d222c3f13a5/ffce4/react-rendering-mental-model-full.webp\" alt=\"Mental model trong React\"></p>\n<p>Hy vọng qua bài viết kiểu này các bạn đã có thể làm việc với React Component một cách <em>nhẹ nhàng</em> không cay cú.</p>\n<p><a href=\"https://obedparla.com/code/a-visual-guide-to-react-mental-models/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://obedparla.com/code/a-visual-guide-to-react-mental-models/</a></p>\n"}},{"node":{"title":"Hướng dẫn viết unit test trong React","path":"/huong-dan-viet-unit-test-trong-react/","date":"5. May 2020","timeToRead":12,"desc":"Một bài viết tổng hợp, sẽ cố gắng đề cập càng nhiều càng tốt các vấn đề có thể gặp khi đụng đến unit test với React.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#t%E1%BA%A1i-sao-ph%E1%BA%A3i-test\">Tại sao phải test?</a></li>\n<li><a href=\"#test-c%C3%A1i-g%C3%AC\">Test cái gì?</a></li>\n<li><a href=\"#kh%C3%B4ng-test-c%C3%A1i-g%C3%AC\">Không test cái gì</a></li>\n<li><a href=\"#m%E1%BB%99t-v%C3%A0i-tri%E1%BA%BFt-l%C3%BD-c%C3%A1-nh%C3%A2n-khi-test\">Một vài triết lý cá nhân khi test</a></li>\n<li><a href=\"#shallow-vs-mount\">Shallow vs mount</a></li>\n<li>\n<p><a href=\"#enzyme\">Enzyme</a></p>\n<ul>\n<li><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t\">Cài đặt</a></li>\n</ul>\n</li>\n<li><a href=\"#th%E1%BB%B1c-hi%E1%BB%87n-test-chi-ti%E1%BA%BFt-v%E1%BB%9Bi-enzyme\">Thực hiện test chi tiết với Enzyme</a></li>\n<li>\n<p><a href=\"#react-testing-library\">React-testing-library</a></p>\n<ul>\n<li><a href=\"#usestate\">useState</a></li>\n<li><a href=\"#usereducer\">useReducer</a></li>\n<li><a href=\"#usecontext\">useContext</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<p><a href=\"https://github.com/iqbal125/react-hooks-testing-complete\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Toàn bộ project để bạn tham khảo</a></p>\n<h2 id=\"tại-sao-phải-test\"><a href=\"#t%E1%BA%A1i-sao-ph%E1%BA%A3i-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao phải test?</h2>\n<p>Rất hiển nhiên là chúng ta viết test nhằm mục đích hạn chế được càng nhiều lõi càng tốt, đảm bảo những gì chúng ta viết ra chạy đúng như chúng ta mong muốn. Một vài <em>điểm trừ</em> khi chúng ta <em>phải</em> viết test</p>\n<ol>\n<li>Là nó tốn thời gian và tương đối khó khăn (dù là lập trình viên kinh nghiệm cũng gặp không ít vất vả khi mới bắt đầu viết test)</li>\n<li>Test pass không có nghĩa ứng dụng, function của chúng ta chạy đúng 100%</li>\n<li>Cũng đôi khi, test fail, nhưng ứng dụng, function vẫn chạy hoàn toàn bình thường</li>\n<li>Trong vài trường hợp đặc biệt, chạy test trong CI có thể tốn tiền</li>\n</ol>\n<h2 id=\"test-cái-gì\"><a href=\"#test-c%C3%A1i-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Test cái gì?</h2>\n<p>Test các chức năng, function của ứng dụng, những cái mà user sẽ sử dụng. Nó giúp chúng ta tự tin vỗ ngực, ứng dụng đáp ứng đúng nhu cầu sử dụng</p>\n<h2 id=\"không-test-cái-gì\"><a href=\"#kh%C3%B4ng-test-c%C3%A1i-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Không test cái gì</h2>\n<p>Thích quan điểm của Kent C về việc không nên đi quá chi tiết việc hiện thực. Việc mà code nó hiện thực như thế nào chúng ta không quan tâm, user không quan tâm, chúng ta chỉ quan tâm đầu vào-đầu ra của một function.</p>\n<p>Các thư viện của người khác viết cũng là thứ không cần thiết phải test, nó là trách nhiệm của người viết thư viện. Nếu không tin thì đừng dùng nó. Còn nếu thật sự có tâm bạn hãy hỗ trợ cho thư viện đó trên github bằng cách bổ sung test cho nó.</p>\n<h2 id=\"một-vài-triết-lý-cá-nhân-khi-test\"><a href=\"#m%E1%BB%99t-v%C3%A0i-tri%E1%BA%BFt-l%C3%BD-c%C3%A1-nh%C3%A2n-khi-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một vài triết lý cá nhân khi test</h2>\n<blockquote>\n<p>Nhiều integration test, không dùng snapshot test, vài unit test, vài e-to-e test.</p>\n</blockquote>\n<p>Hãy viết thật nhiều integration test, unit test thì tốt nhưng nó không thật sự là cách mà người dùng sử dụng ứng dụng. Việc test chi tiết code hiện thực ra sao với unit test rất dễ.</p>\n<p>Integration test nên dùng mock (dữ liệu giả lập) ít nhất có thể</p>\n<p>Không nên test những cái tiểu tiết như <em>tên hàm, tên biến, cách khai báo biến số, hằng số</em> có hợp lý.</p>\n<p>Lấy ví dụ, nếu chúng ta test một button và thay đổi tên function xử lý <code class=\"language-text\">onClick</code> từ <code class=\"language-text\">increment</code> sang <code class=\"language-text\">handleClick</code>, test sẽ fail nhưng mọi thứ vẫn hoạt động bình thường.</p>\n<h2 id=\"shallow-vs-mount\"><a href=\"#shallow-vs-mount\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Shallow vs mount</h2>\n<p>Mount là phần html, css, js thật sự khi chạy, như cách mà browser sẽ <em>thấy</em>, nhưng theo cách <strong>giả lập</strong>. Nó không có render, paint bất cứ thứ gì lên UI, nhưng làm <em>như thể</em> nó là browser thật sự và chạy code ngầm bên dưới.</p>\n<p>Không bỏ thời gian ra để paint ra UI giúp test chạy nhanh hơn. Tuy nhiên nó vẫn chưa nhanh bằng shallow render</p>\n<p>Đó là lý do bạn phải <code class=\"language-text\">unmount</code> và <code class=\"language-text\">cleanup</code> sau mỗi test, nếu không test này sẽ gây side-effect lên test kia.</p>\n<p>Mount/render thường được sử dụng cho integration test và shallow sử dụng cho unit test.</p>\n<p>Kiểu shallow render sẽ chỉ render ra một component đang test mà không bao gồm các component con, như vậy để tách biệt việc test trên từng component độc lập.</p>\n<p>Lấy ví dụ như component cha, con như sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildComponent</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">ChildComponent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Child component</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu chúng ta dùng shallow render component <code class=\"language-text\">App</code>, chúng ta sẽ nhận được DOM như sau, phần <code class=\"language-text\">ChildComponent</code> sẽ không bao gồm bộ \"ruột\" bên trong</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>App</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ChildComponent</span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>App</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Với mount, thì chúng ta có</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>App</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ChildComponent</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Child components<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ChildComponent</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>App</span><span class=\"token punctuation\">></span></span></code></pre>\n<p><strong>react-testing-library</strong> là một thư viện khá ổn cho việc viết unit test react, tuy nhiên <strong>Enzyme</strong> là nền tảng cần nắm chắc, chúng ta sẽ đề cập nó trước</p>\n<h2 id=\"enzyme\"><a href=\"#enzyme\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enzyme</h2>\n<h3 id=\"cài-đặt\"><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cài đặt</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> enzyme enzyme-to-json enzyme-adapter-react-16</code></pre>\n<p>Sơ qua những gì chúng ta sẽ import</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">ReactDOM</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">Basic</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../basic_test\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">Enzyme</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> shallow<span class=\"token punctuation\">,</span> render<span class=\"token punctuation\">,</span> mount <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"enzyme\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> toJson <span class=\"token keyword module\">from</span> <span class=\"token string\">\"enzyme-to-json\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">Adapter</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"enzyme-adapter-react-16\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token maybe-class-name\">Enzyme</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> adapter<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>3 cái import đầu tiên là cho React và component đang test, sau đó đến phần của Enzyme, <code class=\"language-text\">toJson</code> là để chuyển shallow component của chúng ta ra thành JSON để lưu thành snapshot</p>\n<p>Cuối cùng là Adapter để làm việc được với react 16</p>\n<h2 id=\"thực-hiện-test-chi-tiết-với-enzyme\"><a href=\"#th%E1%BB%B1c-hi%E1%BB%87n-test-chi-ti%E1%BA%BFt-v%E1%BB%9Bi-enzyme\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thực hiện test chi tiết với Enzyme</h2>\n<p>Chúng ta sẽ lấy một ví dụ tại sao ko nên test việc hiện thực chi tiết, với một component <code class=\"language-text\">&lt;Counter /&gt;</code> như thế này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// đoạn code này mặc dù ko đúng, nhưng khi test vẫn cho kết quả pass</span>\n  <span class=\"token comment\">// &lt;button onClick={this.incremen}></span>\n  <span class=\"token comment\">//   Clicked: {this.state.count}</span>\n  <span class=\"token comment\">// &lt;/button></span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>counter-button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">incremen</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Clicked: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">Counter</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Trong component trên, chúng ta cố tình gõ sai chữ <code class=\"language-text\">incremen</code>, ứng dụng sẽ không chạy, nhưng khi chạy test thì vẫn pass</p>\n<p>File test</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">ReactDOM</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">Counter</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../counter'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">Enzyme</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> shallow<span class=\"token punctuation\">,</span> render<span class=\"token punctuation\">,</span> mount <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'enzyme'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> toJson <span class=\"token keyword module\">from</span> <span class=\"token string\">'enzyme-to-json'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">Adapter</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'enzyme-adapter-react-16'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token maybe-class-name\">Enzyme</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> adapter<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment method increments count'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Counter</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    wrapper<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Thứ nhất là cách viết test như vậy có vấn đề, chúng <strong>ko mô phỏng</strong> cách mà user sẽ sử dụng, chúng ta gọi thẳng <code class=\"language-text\">increment()</code>.</p>\n<p>Nếu bạn simulate việc click nút button <code class=\"language-text\">wrapper.find(&#39;button.counter-button&#39;).simulate(&#39;click&#39;)</code> thay vì gọi <code class=\"language-text\">increment()</code>, test sẻ pass, nhưng <em>lỡ đâu</em>, một lần cập nhập nào đó bạn thay đổi <code class=\"language-text\">className</code> cho button, mà ko cập nhập lại test thì cũng <em>toang</em>.</p>\n<p><strong>Vậy người nông dân biết phải làm sao?</strong></p>\n<h2 id=\"react-testing-library\"><a href=\"#react-testing-library\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>React-testing-library</h2>\n<p>Từ thư viện <code class=\"language-text\">react-testing-library</code>, nó đưa ra một nguyên lý chung như sau</p>\n<blockquote>\n<p>Test càng gần với thực tế sử dụng của ứng dụng, test càng đem đến sự tự tin cho chúng ta</p>\n</blockquote>\n<p>Hãy tâm niệm nguyên lý này trong đầu, chúng ta sẽ còn bàn tiếp về nó</p>\n<h3 id=\"usestate\"><a href=\"#usestate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useState</h3>\n<p>Hay bắt đầu test React hook, chúng ta đã và đang sử dụng nó nhiều hơn là class component</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">TestHook</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Initial State\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Initial State Changed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeNameToSteve</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">changeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>changeState<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">State Change Button</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>changeNameToSteve<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Change Name</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">TestHook</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Prop sẽ được nhận từ component cha là <code class=\"language-text\">App</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some Text\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Moe\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token spread operator\">...</span>\n      <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Steve\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n         </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Basic</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> Counter </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n         </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> Basic Hook useState </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n         </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TestHook</span></span> <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">changeName</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>changeName<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    ...</span></code></pre>\n<p>Với nguyên lý như đã nói, chúng ta sẽ thực hiện test như thế nào</p>\n<p>Cách mà user sử dụng ứng dụng sẽ là: họ thấy một đoạn text trên UI Button, click vào, rồi thấy một kết quả sau khi click đó, một text mới xuất hiện chẳng hạn</p>\n<p>Chúng ta cài đặt thư viện <code class=\"language-text\">@testing-library/react</code> (không phải <code class=\"language-text\">react-testing-library</code> nhé)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @testing-library/react</code></pre>\n<p>Thực hiện việc test</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">ReactDOM</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-dom'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">TestHook</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../test_hook.js'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> fireEvent<span class=\"token punctuation\">,</span> cleanup <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'@testing-library/react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">App</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'..al/App'</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span>cleanup<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text in state is changed when button clicked'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">TestHook</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\">Initial</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Init State\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    fireEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">click</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"State change Button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\">Initial</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Initial State Changed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button click changes props'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">App</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">TestHook</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">App</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\">Moe</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Moe\"</span><span class=\"token punctuation\">)</span>\n\n    fireEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">click</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Change Name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\">Steve</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Steve\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Vì không sử dụng shallow render, nên chúng ta phải gọi <code class=\"language-text\">afterEach(cleanup)</code> để dọn dẹp sau mỗi lực thực hiện test</p>\n<p><code class=\"language-text\">getByText</code> là phương thức nằm trong hàm <code class=\"language-text\">render</code>, còn vài kiểu query khác nữa, nhưng đây là kiểu mà chúng ta dùng nó nhiều nhất, có thể nói là đủ dùng.</p>\n<p>Để test giá trị của state, chúng ta không sử dụng bất cứ tên hàm, tên biến state nào cả. Vẫn là nguyên lý \"Không đi sâu vào việc thực hiện chi tiết\". Vì user sẽ thấy một đoạn text trên UI, chúng ta query nó trên DOM, chúng ta cũng query button bằng cách này và bắn ra sự kiện (<code class=\"language-text\">fireEvent.click</code>). Cuối cùng chúng ta kiểm tra kết quả cuối cùng nhận được, đoạn text bị thay đổi, chứ ko kiểm tra giá trị state (mặc dù nó là tương đương)</p>\n<h3 id=\"usereducer\"><a href=\"#usereducer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useReducer</h3>\n<p>Reducer chúng ta sẽ test</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token constant\">ACTIONS</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./actions\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  stateprop1<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Reducer1</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"SUCCESS\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token spread operator\">...</span>state<span class=\"token punctuation\">,</span>\n        stateprop1<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"FAILURE\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token spread operator\">...</span>state<span class=\"token punctuation\">,</span>\n        stateprop1<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Action</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SUCCESS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"SUCCESS\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">FAILURE</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"FAILURE\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Cuối cùng là component sử dụng action và reducer đã định nghĩa</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useReducer <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token constant\">ACTIONS</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../store/actions\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">Reducer</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../store/reducer\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">TestHookReducer</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>reducerState<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>\n    <span class=\"token maybe-class-name\">Reducer</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Reducer1</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token maybe-class-name\">Reducer</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">initialState</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dispatchActionSuccess</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ACTIONS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUCCESS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dispatchActionFailure</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ACTIONS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FAILURE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>reducerState<span class=\"token punctuation\">.</span><span class=\"token property-access\">stateprop1</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">stateprop1 is true</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">stateprop1 is false</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>dispatchActionSuccess<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Dispatch Success</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">TestHookReducer</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Component này sẽ đổi giá trị của <code class=\"language-text\">stateprop</code> từ <code class=\"language-text\">false</code> sang <code class=\"language-text\">true</code> bằng việc dispatch một <code class=\"language-text\">SUCCESS</code> action</p>\n<p>Thực hiện test</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">ReactDOM</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">TestHookReducer</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../test_hook_reducer.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> fireEvent<span class=\"token punctuation\">,</span> cleanup <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"@testing-library/react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">Reducer</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../../store/reducer\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token constant\">ACTIONS</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../../store/actions\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span>cleanup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test the reducer and action\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"ejs\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return the initial state\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Reducer</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">initialState</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> stateprop1<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should change stateprop1 from false to true\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Reducer</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\"><span class=\"token maybe-class-name\">Reducer1</span></span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Reducer</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">initialState</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ACTIONS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUCCESS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      stateprop1<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reducer changes stateprop1 from fals to true\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> container<span class=\"token punctuation\">,</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">TestHookReducer</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\">stateprop1 is</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stateprop1 is false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  fireEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">click</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dispatch success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\">stateprop1 is</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stateprop1 is true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Trước tiên chúng ta test cái reducer bên trong khối <code class=\"language-text\">describe</code>, thực hiện một test đơn giản với giá trị initial state và sau khi có action success.</p>\n<p>Với ví dụ trên, reducer và action rất chi là đơn giản, bạn có thể nói không cần thực hiện unit test cho nó làm gì, nhưng trong thực tế sử dụng reducer sẽ không hề đơn giản thế, và việc test reducer là thực sự cần thiết, không những vậy, chúng ta còn phải test theo hướng chi tiết hiện thực bên trong.</p>\n<p>Tiếp theo chúng ta có một test cho component, chúng ta vẫn sử dụng cách làm trước đó đã đề cập với <code class=\"language-text\">useState</code>, lấy DOM bằng cách query text và kiểm tra giá trị text sau khi có event click.</p>\n<h3 id=\"usecontext\"><a href=\"#usecontext\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useContext</h3>\n<p>Giờ chúng ta đi đến việc test một component con có thể cập nhập context state trong component cha.</p>\n<p>Thường thì context sẽ được khởi tạo trong một file riêng</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Context</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">Context</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chúng ta sẽ cần một component cha, nắm giữ Context provider. Giá trị truyền vào cho provider sẽ là giá trị <code class=\"language-text\">state</code> và hàm <code class=\"language-text\">setState</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">TestHookContext</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./components/react-testing-lib/test_hook_context\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">Context</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./components/store/context\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some Text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeText</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some Other Text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span> <span class=\"token maybe-class-name\">Basic</span> <span class=\"token maybe-class-name\">Hook</span> useContext<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Context</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Provider</span></span>\n        value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> changeTextProp<span class=\"token operator\">:</span> changeText<span class=\"token punctuation\">,</span> stateProp<span class=\"token operator\">:</span> state <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">TestHookContext</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">Context</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Provider</span></span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">App</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Component con, đây là component chúng ta muốn test</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useContext <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">Context</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../store/context\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">TestHookContext</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>context<span class=\"token punctuation\">.</span><span class=\"token property-access\">changeTextProp</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token maybe-class-name\">Change</span> <span class=\"token maybe-class-name\">Text</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>context<span class=\"token punctuation\">.</span><span class=\"token property-access\">stateProp</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">TestHookContext</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Lưu ý: các giá trị của <code class=\"language-text\">state</code>, khởi tạo, cập nhập điều nằm trong <code class=\"language-text\">App.js</code>, chúng ta chỉ truyền giá trị này xuống các component con thông qua context, mọi thứ điều thực hiện ở <code class=\"language-text\">App</code>, cái này quan trọng cần nhớ để hiểu lúc test</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">ReactDOM</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">TestHookContext</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../test_hook_context.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> act<span class=\"token punctuation\">,</span> render<span class=\"token punctuation\">,</span> fireEvent<span class=\"token punctuation\">,</span> cleanup <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"@testing-library/react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">App</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../../../App\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">Context</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../../store/context\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span>cleanup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"context value is updated by child component\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> container<span class=\"token punctuation\">,</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">App</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Context</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Provider</span></span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">TestHookContext</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">Context</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Provider</span></span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">App</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\">Some</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  fireEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">click</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Change text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\">Some</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some other text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Với context chúng ta cũng không hề thay đổi cách làm như với <code class=\"language-text\">useState</code>, vẫn là tìm và đặt expect thông qua kết quả nhận được cuối cùng.</p>\n<p>Bên trong render function, chúng ta có include <code class=\"language-text\">&lt;Context.Provider/&gt;</code> và <code class=\"language-text\">&lt;TestHookContext/&gt;</code> để code dễ đọc hơn, chứ thật sự chúng ta không cần chúng. Test sẽ vẫn chạy nếu truyền vào <code class=\"language-text\">&lt;App /&gt;</code> bên trong render function</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> container<span class=\"token punctuation\">,</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Tại sao lại như vậy?</p>\n<p>Hãy nghĩ lại một chút về context, tất cả những state của context được handle bên trong <code class=\"language-text\">App.js</code>, vì lý do đó, đây là component chính chúng ta test, mặc dù trông thì có vẻ chúng ta test một child component sử dụng <code class=\"language-text\">useContext</code> hook. Chúng ta lại không thực hiện shallow render, mà render luôn các component con, nên dĩ nhiên <code class=\"language-text\">&lt;Context.Provider /&gt;</code> và <code class=\"language-text\">&lt;TestHookContext /&gt;</code> đều được render vì nó là con của <code class=\"language-text\">&lt;App /&gt;</code></p>\n<p><a href=\"https://www.freecodecamp.org/news/testing-react-hooks/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to Test React Components: the Complete Guide</a></p>\n"}},{"node":{"title":"Làm animate siêu đơn giản với hook khi react component mount và unmount","path":"/lam-animate-sieu-don-gian-voi-hook-khi-react-component-mount-va-unmount/","date":"1. May 2020","timeToRead":2,"desc":"","content":"<p>Có rất nhiều lúc chúng ta muốn thêm/xóa một element trên trình duyệt, nó rất chi là trực quan dễ dàng với jQuery, tuy nhiên vì không còn đụng chạm trực tiếp vào DOM, việc đơn giản đó lại hơi <em>kỳ công</em></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// những ngày xa xưa ấy còn đâu</span>\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#my-element\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fadeIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Tại sao lại khó khăn ấy nhỉ? Hãy mường tượng nó qua một ví dụ</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* styles.css */</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> fadeIn</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">0%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">100%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// index.js</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> show <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  show <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> animation<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">fadeIn 1s</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">HELLO</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Đó là tất cả những gì chúng ta cần làm để animate lúc component đang mount với <code class=\"language-text\">fadeIn</code>, tuy nhiên lại không có cách nào để animate <em>unmount</em>, vì chúng ta đã xóa cái DOM ngay khi <code class=\"language-text\">show</code> chuyển thành <code class=\"language-text\">false</code>. Element đã ra đi ngay lập tức.</p>\n<p>Vậy chúng ta cần làm gì</p>\n<ol>\n<li><code class=\"language-text\">show</code> thay đổi, báo react khoan hãy unmount, delay nó lại một chút</li>\n<li>Chạy animate</li>\n<li>Animate vừa chạy xong, unmount</li>\n</ol>\n<p>Đây là cách làm đơn giản nhất chỉ bằng CSS và hook, tất nhiên nếu đụng tới những tính huống phức tạp hơn, khuyến khích bạn sử dụng <a href=\"https://www.react-spring.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-spring</a></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// index.js</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">ReactDOM</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token string\">\"./styles.css\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">Fade</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./Fade\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>show<span class=\"token punctuation\">,</span> setShow<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setShow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">show</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token operator\">!</span>show<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>show <span class=\"token operator\">?</span> <span class=\"token string\">\"hide\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"show\"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fade</span></span> <span class=\"token attr-name\">show</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>show<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> HELLO </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Fade</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rootElement <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token maybe-class-name\">ReactDOM</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Fade.js</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Fade</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> show<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>shouldRender<span class=\"token punctuation\">,</span> setRender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>show<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>show<span class=\"token punctuation\">)</span> <span class=\"token function\">setRender</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>show<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onAnimationEnd</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>show<span class=\"token punctuation\">)</span> <span class=\"token function\">setRender</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    shouldRender <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n        <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> animation<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>show <span class=\"token operator\">?</span> <span class=\"token string\">\"fadeIn\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"fadeOut\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 1s</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onAnimationEnd</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onAnimationEnd<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">Fade</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* styles.css */</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> fadeIn</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">0%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">100%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> fadeOut</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">0%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">100%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Bạn có thể xem <a href=\"https://codesandbox.io/s/react-easy-animation-b658i\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo ở đây</a></p>\n<p><a href=\"https://czaplinski.io/blog/super-easy-animation-with-react-hooks/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Super easy react mount/unmount animations with hooks</a></p>\n"}},{"node":{"title":"useEffect từ a tới z","path":"/use-effect-tu-a-toi-z/","date":"23. March 2020","timeToRead":11,"desc":"Đây là một bài viết tương đối dài dòng về useEffect, bạn cần biết và đã đọc qua tài liệu về useEffect trên trang chính thức của React trước, và nếu chỉ thực sự cần biết sử dụng useEffect ra sao, bạn không cần đọc bài viết phân tách mổ xẻ sâu kiểu này.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#m%E1%BB%97i-l%E1%BA%A7n-render-l%C3%A0-m%E1%BB%99t-gi%C3%A1-tr%E1%BB%8B-prop-v%C3%A0-state-%C4%91%E1%BB%99c-l%E1%BA%ADp\">Mỗi lần render là một giá trị Prop và State độc lập</a></li>\n<li><a href=\"#m%E1%BB%99t-l%C3%A0-kh%C3%B4ng-n%C3%B3i-l%C3%A1o-2-l%C3%A0-kh%C3%B4ng-n%C3%B3i-l%C3%A1o-nhi%E1%BB%81u-l%E1%BA%A7n\">Một là không nói láo, 2 là không nói láo nhiều lần</a></li>\n<li><a href=\"#h%E1%BA%ADu-qu%E1%BA%A3-c%E1%BB%A7a-vi%E1%BB%87c-d%E1%BB%91i-tr%C3%A1\">Hậu quả của việc dối trá</a></li>\n<li><a href=\"#2-c%C3%A1ch-%C4%91%E1%BB%83-th%C3%BA-th%E1%BA%ADt-v%E1%BB%9Bi-react-v%E1%BB%81-dependency\">2 cách để thú thật với React về dependency</a></li>\n<li><a href=\"#t%C3%ADnh-n%C4%83ng-update-c%E1%BB%A7a-google-docs\">Tính năng update của Google Docs</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"mỗi-lần-render-là-một-giá-trị-prop-và-state-độc-lập\"><a href=\"#m%E1%BB%97i-l%E1%BA%A7n-render-l%C3%A0-m%E1%BB%99t-gi%C3%A1-tr%E1%BB%8B-prop-v%C3%A0-state-%C4%91%E1%BB%99c-l%E1%BA%ADp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mỗi lần render là một giá trị Prop và State độc lập</h2>\n<p>Trước khi bắt đầu nói về <code class=\"language-text\">useEffect</code> chúng ta cần nhắc lại quá trình render</p>\n<pre class=\"language-jsx{6}\"><code class=\"language-jsx{6}\">function Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p> ...\n      <button onClick={() => setCount(count + 1)}></button>\n    </div>\n  );\n}</code></pre>\n<p>Khác với Vue, nó không phải là một dạng <em>data binding</em>, <em>watcher</em>, <em>proxy</em>, nó chỉ là một giá trị thông thường.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span></code></pre>\n<p>Đầu tiên giá trị khởi tạo của <code class=\"language-text\">count</code> sẽ =0. Khi chúng ta gọi <code class=\"language-text\">setCount(1)</code>, React sẽ gọi lại component một lần nữa, với giá trị <code class=\"language-text\">count</code> lúc này là <code class=\"language-text\">1</code>. Cứ vậy</p>\n<pre class=\"language-jsx{3,10,17}\"><code class=\"language-jsx{3,10,17}\">// Lần đầu render\nfunction Counter() {\n  const count = 0; // trả về bởi useState()  // ...\n  <p>You clicked {count} times</p>;\n  // ...\n}\n\n// sau khi click, function này được gọi lại lần nữa\nfunction Counter() {\n  const count = 1; // trả về bởi `useState()  // ...\n  <p>You clicked {count} times</p>;\n  // ...\n}\n\n// sau khi click, function được gọi lại lần nữa\nfunction Counter() {\n  const count = 2; // trả về bởi useState()  // ...\n  <p>You clicked {count} times</p>;\n  // ...\n}</code></pre>\n<p>Khi update một state, React gọi lại component, mỗi lần render như vậy, nó sẽ <strong>thấy</strong> một giá trị <code class=\"language-text\">count</code> mới. Sau đó React sẽ update lại DOM tương ứng.</p>\n<p>Vấn đề mấu chốt cần nắm là giá trị <code class=\"language-text\">count</code> <strong>trong các lần render khác nhau là khác nhau.</strong></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Counter</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleAlertClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked on: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Click me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleAlertClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Show alert</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      ...\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta thực hiện các bước sau</p>\n<ul>\n<li>Bấm counter lên 3</li>\n<li>Bấm \"Show alert\"</li>\n<li>Bấm tiếp <code class=\"language-text\">Click me</code> cho counter lên 5 trước khi bị gọi timeout</li>\n</ul>\n<p><img src=\"https://overreacted.io/46c55d5f1f749462b7a173f1e748e41e/counter.gif\" alt=\"Counter demo\"></p>\n<p>Câu hỏi ở đây là nó sẽ alert ra 5 - giá trị cuối cùng, hay là 3 giá trị lúc chúng ta click</p>\n<p><a href=\"https://codesandbox.io/s/w2wxl3yo0l\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chạy thử</a></p>\n<p><em>Bạn có thấy kết quả quá vô lý?</em></p>\n<p>Như đã nói ở trên, giá trị <code class=\"language-text\">count</code> là hằng số trên mỗi lần render. <strong>Function của chúng ta được gọi nhiều lần, mỗi lần gọi như vậy giá trị <code class=\"language-text\">count</code> bên trong là một số độc lập hoàn toàn với giá trị trước đó</strong></p>\n<p>Không phải <strong>đặc sản</strong> của React, viết dạng function như thế này bạn sẽ dễ hình dung hơn.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> someone <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Dan\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span>someone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsomeone <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Yuzhi\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span>someone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsomeone <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Dominic\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span>someone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Thế còn hàm xử lý event thì sao? cụ thể là hàm <code class=\"language-text\">handleAlertClick</code>? Cũng như trên, hàm này là có các <strong>version</strong> khác nhau ở các lần render khác nhau.</p>\n<p>Bài viết được <strong>quảng cáo</strong> là nói về <code class=\"language-text\">useEffect</code> mà nãy giờ chưa đá động gì!</p>\n<p>Quay lại với ví dụ từ <a href=\"https://reactjs.org/docs/hooks-effect.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">trang chính thức của React</a></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Counter</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Click me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Câu hỏi là <code class=\"language-text\">useEffect</code> đã làm cách nào để lấy được giá trị cuối cùng của <code class=\"language-text\">count</code>?</p>\n<p>Lẽ nào đó có một dạng \"data binding\" hay \"watching\" ở đây để update giá trị <code class=\"language-text\">count</code> bên trong hàm effect? Hoặc giả React <em>chơi chiêu</em> dùng biến mutable bên trong component để luôn có được giá trị cuối?</p>\n<p><em>Không hề!</em></p>\n<p>Chúng ta đã biết: giá trị <code class=\"language-text\">count</code> là hằng số cho các lần render, event handle cũng độc lập trên các lần render khác nhau, effect cũng vậy luôn.</p>\n<p>Không phải giá trị <code class=\"language-text\">count</code> thay đổi bên trong <code class=\"language-text\">useEffect</code> <strong>bất biến</strong>, mà là <code class=\"language-text\">useEffect</code> cũng bị thay đổi trên từng lần render.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// lần render đầu tiên</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Counter</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">0</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// sau khi click</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Counter</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// click thêm lần nữa</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Counter</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">2</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<blockquote>\n<p>Có thể mường tượng effect là một phần của kết quả lúc render</p>\n</blockquote>\n<p>Giờ thử với <code class=\"language-text\">setTimeout</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Counter</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token spread operator\">...</span>\n    <span class=\"token method function property-access\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token spread operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Click me\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu mà click vài lần với một khoảng thời gian <em>bỏ nhỏ</em> thì kết quả log ra là gì?</p>\n<p><a href=\"https://codesandbox.io/s/lyx20m1ol\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Thử ở đây</a></p>\n<p>Bạn không chỉ nhận được 1 mà là một chuỗi các đoạn log ứng với số lần click.</p>\n<p><img src=\"https://overreacted.io/a5727d333c270e05942f508707265378/timeout_counter.gif\" alt=\"Screen recording of 1, 2, 3, 4, 5 logged in order\"></p>\n<p><em>Đương nhiên phải chạy như vậy mới đúng chứ, đâu có gì phải thắc mắc?</em></p>\n<p>Bạn đã thử với <code class=\"language-text\">this.state</code> trong class component chưa?</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"https://overreacted.io/264b329edc111a1973003bdf2bcacd65/timeout_counter_class.gif\" alt=\"Screen recording of 5, 5, 5, 5, 5 logged in order\"></p>\n<p><em>Lý do?</em> Giá trị <code class=\"language-text\">this.state</code> bên trong class component là một mutation (có thể thay đổi).</p>\n<p>Nếu luôn muốn lấy giá trị sau cùng bên trong effect, cách dễ nhất là dùng <code class=\"language-text\">refs</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Example</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token spread operator\">...</span>\n    <span class=\"token keyword\">const</span> latestCount <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token spread operator\">...</span>\n\n    <span class=\"token method function property-access\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token spread operator\">...</span>\n        latestCount<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span> <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n        <span class=\"token spread operator\">...</span>\n        <span class=\"token method function property-access\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token spread operator\">...</span>\n                <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>latestCount<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token spread operator\">...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"https://overreacted.io/timeout_counter_refs-78f7948263dd13b023498b23cb99f4fc.gif\"></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Greeting</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu chúng ta render <code class=\"language-text\">&lt;Greeting name=&quot;Dan&quot; /&gt;</code>, sau đó render <code class=\"language-text\">&lt;Greeting name=&quot;Luu&quot; /&gt;</code>. Cuối cùng chúng ta luôn nhận được <em>Hello, Luu</em></p>\n<p>React luôn đồng bộ cục DOM với giá trị hiện tại của <code class=\"language-text\">prop</code> và <code class=\"language-text\">state</code>. Không cần phân biệt giữa <code class=\"language-text\">mount</code> và <code class=\"language-text\">update</code> khi render. Có thể hình dung effect cũng tương tự như vậy, <strong><code class=\"language-text\">useEffect</code> cho phép đồng bộ những phần không nằm trong React tree với giá trị của <code class=\"language-text\">prop</code> và <code class=\"language-text\">state</code></strong></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Greeting</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Câu thần chú cho việc này là: <strong>Quan trọng là đích đến, không phải quá trình</strong></p>\n<p>Chạy effect trên tất cả lúc chạy render sẽ không hay lắm, đôi khi có trường hợp lặp vô tận.</p>\n<p>Trong quá trình re-render, React chỉ cập nhập đúng phần DOM đã thay đổi.</p>\n<p>Ví dụ như</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, Dan</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Sang</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, Luu</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>React sẽ thấy 2 object</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> oldProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> className<span class=\"token operator\">:</span> <span class=\"token string\">\"Greeting\"</span><span class=\"token punctuation\">,</span> children<span class=\"token operator\">:</span> <span class=\"token string\">\"Hello, Dan\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> className<span class=\"token operator\">:</span> <span class=\"token string\">\"Greeting\"</span><span class=\"token punctuation\">,</span> children<span class=\"token operator\">:</span> <span class=\"token string\">\"Hello, Yuzhi\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nó sẽ xác định được <code class=\"language-text\">children</code> bị thay đổi và cần update, còn <code class=\"language-text\">className</code> thì không, nó sẽ làm như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\">domNode<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerText</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, Luu\"</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chúng ta cũng muốn effect làm điều tương tự, khi re-render chỉ apply những update cần thiết</p>\n<p>Ví dụ với component này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Greeting</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> setCounter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">useEffect</code> không hề liên quan tới giá trị state <code class=\"language-text\">counter</code>, gọi <code class=\"language-text\">document.title</code> khi giá trị <code class=\"language-text\">counter</code> thay đổi không phải là ý hay.</p>\n<p>Đó là lý do tại sao chúng ta có thêm tham số <code class=\"language-text\">dependency</code> (một mảng) khi dùng <code class=\"language-text\">useEffect</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// deps</span></code></pre>\n<p>Dịch ra ngôn ngữ con người là thế này: \"Tao biết React mày không phân biệt được sự khác nhau bên trong function, nên tao hứa là tao chỉ dùng đến <code class=\"language-text\">name</code> bên trong function này thôi, và chỉ giá trị <code class=\"language-text\">name</code> này update thì mày hả gọi nó\"</p>\n<h2 id=\"một-là-không-nói-láo-2-là-không-nói-láo-nhiều-lần\"><a href=\"#m%E1%BB%99t-l%C3%A0-kh%C3%B4ng-n%C3%B3i-l%C3%A1o-2-l%C3%A0-kh%C3%B4ng-n%C3%B3i-l%C3%A1o-nhi%E1%BB%81u-l%E1%BA%A7n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một là không nói láo, 2 là không nói láo nhiều lần</h2>\n<p>Đừng bao giờ lừa gạt React bằng cách đưa dependency không đúng cho nó, hậu quả nhãn tiền. Hợp lý, nhưng nhiều lập trình viên quen sử dụng <code class=\"language-text\">class</code> sẽ cố tình qua mặt</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">SearchResults</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// việc ntn được hôn? không phải lúc nào cũng đúng</span>\n  <span class=\"token comment\">// có cách viết tốt hơn</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Bạn sẽ nghĩ là \"Tao chỉ muốn chạy nó lúc mount thôi\". Nếu chúng ta chỉ định một dependency, <strong>tất cả giá trị bên trong component sử dụng bởi effect phải được khai báo cụ thể</strong>. Bao gồm prop, state, function</p>\n<p>Đôi khi mà làm như vậy nó phát sinh lỗi. Thí dụ như gọi fetch data liên tục hoặc socket được tạo không cần thiết. Cách giải quyets là <strong>không xóa chúng khỏi dependency</strong></p>\n<p>Trước khi nói về cách giải quyết, chúng ta xem vấn đề ở đây là gì khi so sánh Dependency</p>\n<h2 id=\"hậu-quả-của-việc-dối-trá\"><a href=\"#h%E1%BA%ADu-qu%E1%BA%A3-c%E1%BB%A7a-vi%E1%BB%87c-d%E1%BB%91i-tr%C3%A1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hậu quả của việc dối trá</h2>\n<p>Nếu mảng dependency chứa tất cả giá trị sử dụng trong <code class=\"language-text\">useEffect</code>, React biết được khi nào thì re-run nó</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><img src=\"https://overreacted.io/fae247cd068eedbd4b62ba50592d2b3d/deps-compare-correct.gif\" alt=\"Diagram of effects replacing one another\"></p>\n<p>Nhưng nếu chúng ta chỉ định <code class=\"language-text\">[]</code>, nó không re-run sau lần đầu tiên</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// thiếu name</span></code></pre>\n<p><img src=\"https://overreacted.io/25f75db3f9f57ffe1426912093577445/deps-compare-wrong.gif\" alt=\"Diagram of effects replacing one another\">,</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Sai: không được phép bỏ qua thằng name</span></code></pre>\n<p>Rõ ràng là 2 thằng dependency không khác nhau, nên nó sẽ không chạy effect</p>\n<p>Trong tình huống này, vấn đề khá là hiển nhiên, nhưng trực giác có thể đánh lừa bạn trong các tình huống khác, lấy ví dụ, chúng ta muốn giá trị <code class=\"language-text\">counter</code> tăng đều sau mỗi giây. Với một class, trực giác sẽ mách bảo: \"Set up cái interval một lần, rồi dứt tình vứt áo một lần\", kiểu như <a href=\"https://codesandbox.io/s/n5mjzjy9kl\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">thế này</a>, khi chuyển qua dùng <code class=\"language-text\">useEffect</code> bạn sẽ nghĩ đến dùng <code class=\"language-text\">[]</code> cho mảng phụ thuộc \"Tao chỉ muốn tình một đêm\", đúng không?</p>\n<pre class=\"language-jsx{9}\"><code class=\"language-jsx{9}\">function Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      setCount(count + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}</code></pre>\n<p>Theo như lập luận rất hay gặp \"danh sách phụ thuộc cho phép chúng ta chỉ định việc re-render effect khi nào\", và ở đây ta chỉ muốn trigger nó một lần vì nó là interval, <em>nhưng tại sao lại có vấn đề ở đây?</em></p>\n<p>Chúng ta đang muốn effect này chỉ chạy lần đầu tiên mà thôi, đưa vào dependencies là <code class=\"language-text\">[]</code> có vẻ hợp lý, React sẽ bỏ qua hết những lần sau, nhưng chúng ta đang lừa dối React, vì bên trong chúng ta có sử dụng giá trị <code class=\"language-text\">count</code>, chúng ta có giá trị phụ thuộc mà không khai báo. Thực tế <code class=\"language-text\">setCount()</code> sẽ gọi liên tục sau 1 giây, chứ không dừng lại sau lần gọi đầu tiên.</p>\n<p>Ở lần render đầu tiên, <code class=\"language-text\">count</code> = 0, vì thế <code class=\"language-text\">setCount(count + 1)</code> ở lần render đầu tiên nghĩa là <code class=\"language-text\">setCount(0+1)</code>, nhưng vì không re-run effect thêm lần nào nữa, chúng ta cứ gọi mãi <code class=\"language-text\">setCount(0+1)</code> ở những lần tiếp theo</p>\n<pre class=\"language-jsx{8,11}\"><code class=\"language-jsx{8,11}\">// state = 0\nfunction Counter() {\n  // ...\n  useEffect(\n    // lần đầu\n    () => {\n      const id = setInterval(() => {\n        setCount(0 + 1); // luôn là setCount(1)      }, 1000);\n      return () => clearInterval(id);\n    },\n    [] // không re-run  );\n  // ...\n}\n\n// state = 1\nfunction Counter() {\n  // ...\n  useEffect(\n    // không bao giờ chạy    () => {\n      const id = setInterval(() => {\n        setCount(1 + 1);\n      }, 1000);\n      return () => clearInterval(id);\n    },\n    []\n  );\n  // ...\n}</code></pre>\n<p>Những con bug như thế này sẽ rất rất khó để mò ra được, vì thế hãy luôn thành thật với React, khai báo hết dependency đang có.</p>\n<p><img src=\"https://overreacted.io/29e53bd0c9b7d2ac70d3cd924886b030/interval-wrong.gif\" alt=\"Diagram of stale interval closure\"></p>\n<h2 id=\"2-cách-để-thú-thật-với-react-về-dependency\"><a href=\"#2-c%C3%A1ch-%C4%91%E1%BB%83-th%C3%BA-th%E1%BA%ADt-v%E1%BB%9Bi-react-v%E1%BB%81-dependency\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2 cách để thú thật với React về dependency</h2>\n<p><em>Nên chọn cách một, cách 2 chỉ áp dụng khi cần thiết</em></p>\n<p><strong>Cách 1: luôn là người trung thực, chính trực đạo đức hết mực, luôn khai báo đầy đủ thông tin bạn trai, bạn gái, ba má, chú bác nào bạn đang phụ thuộc cho cơ quan thuế</strong></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">etCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Tuy nhiên thế này, khi giá trị <code class=\"language-text\">count</code> thay đổi, cái interval của chúng ta sẽ bị xóa và đặt lại lần nữa sau những lần render, nó không phải là cái chúng ta mong muốn nó hoạt động như vậy</p>\n<p><img src=\"https://overreacted.io/5734271ddfa94d2d65ac6160515e0069/interval-rightish.gif\" alt=\"Diagram of interval that re-subscribes\"></p>\n<p><strong>Cách 2 là thay đổi tư duy, giảm bớt anh trai nuôi, em gái nuôi không cần thiết</strong></p>\n<p>Chúng ta không nói xạo, chúng ta giảm bớt số lượng những thứ phụ thuộc cho việc re-run effect</p>\n<p>Để làm được việc này, chúng ta phải hỏi bản thân: <strong>chúng ta dùng count để làm gì?</strong> Có vẻ như chúng ta chỉ dùng nó cho việc gọi hàm <code class=\"language-text\">setCount</code>, chúng ta không thực sự cần giá trị <code class=\"language-text\">count</code> nếu chúng ta biết được giá trị trước đó, trường hợp trên, chúng ta có thể không cần dùng đến giá trị <code class=\"language-text\">count</code> mà dùng <em>previous state</em></p>\n<pre class=\"language-jsx{3}\"><code class=\"language-jsx{3}\">useEffect(() => {\n  const id = setInterval(() => {\n    setCount(c => c + 1);\n  }, 1000);\n  return () => clearInterval(id);\n}, []);</code></pre>\n<p><img src=\"https://overreacted.io/f128ad20c28317ed27a3cb68197fc906/interval-right.gif\" alt=\"Diagram of interval that works\"></p>\n<p><a href=\"https://codesandbox.io/s/q3181xz1pj\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chạy thử</a></p>\n<h2 id=\"tính-năng-update-của-google-docs\"><a href=\"#t%C3%ADnh-n%C4%83ng-update-c%E1%BB%A7a-google-docs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tính năng update của Google Docs</h2>\n<p>Khi nói về effect, định hướng lập trình chúng ta là <strong>đồng bộ hóa</strong>, có một khái niệm khá thú vị khi thực hiện đồng bộ hóa là chúng ta thường không đồng bộ toàn bộ nội dung. Lấy ví dụ như Google Docs, nó không thực sự truyền tải <strong>cả trang</strong> lên phía server, làm như vậy hiệu năng sẽ rất tệ, cái nó làm là gửi đi một thông tin chứa cái mà user đang muốn thực hiện.</p>\n<p><strong>Tốt nhất truyền đi thật ít thông tin từ effect (chỉ những thông tin cần thiết nhất) vào trong component</strong>. Hàm <code class=\"language-text\">setCount(c =&gt; c + 1)</code> sẽ gửi đi ít thông tin hơn so với hàm <code class=\"language-text\">setCount(count + 1)</code> đứng trên một khía cạnh nào đó vì nó không phụ thuộc giá trị hiện tại, <a href=\"https://reactjs.org/docs/thinking-in-react.html#step-3-identify-the-minimal-but-complete-representation-of-ui-state\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sử dụng ít state nhất có thể</a> để đạt được kết quả là một trong các nguyên lý chính của đợt cập nhập React với effect</p>\n<p>Tuy nhiên không phải lúc nào cuộc sống cũng đơn giản với bạn như vậy, nếu chúng ta muốn tính toán giá trị của state mới dựa trên một prop, 2 giá trị state phụ thuộc lẫn nhau, <code class=\"language-text\">setState</code> là không đủ. Chúng ta có người chị em hàng xóm tên <code class=\"language-text\">useReducer</code></p>\n<pre class=\"language-jsx{6}\"><code class=\"language-jsx{6}\">function Counter({ step }) {\n  const [count, dispatch] = useReducer(reducer, 0);\n\n  function reducer(state, action) {\n    if (action.type === \"tick\") {\n      return state + step;\n    } else {\n      throw new Error();\n    }\n  }\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      dispatch({ type: \"tick\" });\n    }, 1000);\n    return () => clearInterval(id);\n  }, [dispatch]);\n\n  return <h1>{count}</h1>;\n}</code></pre>\n<p>Cách dùng <code class=\"language-text\">useReducer</code> như vậy là một dạng <strong>cheat mode</strong> của hook, cho phép chúng ta bỏ qua các dependency <em>ngầm</em> khỏi effect, và chặn re-run không không cần thiết</p>\n<p><a href=\"https://codesandbox.io/s/7ypm405o8q\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chạy thử</a></p>\n<p>Bài viết này vẫn còn, và nếu bạn vẫn còn muốn đào sâu hơn nữa, có thể tìm đọc bài viết gốc của Dan</p>\n<p><a href=\"https://overreacted.io/a-complete-guide-to-useeffect/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Complete Guide to useEffect</a></p>\n"}},{"node":{"title":"Vấn đề của React Context trên các xử lý async","path":"/van-de-cua-react-context-tren-cac-xu-ly-async/","date":"16. March 2020","timeToRead":6,"desc":"React Context có phải là viên đạn bạc sẽ giải quyết mọi vấn đề thay cho Redux hay không?","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#ch%C3%BAng-ta-b%E1%BA%AFt-%C4%91%E1%BA%A7u-v%E1%BB%9Bi-m%E1%BB%99t-component-duy-nh%E1%BA%A5t\">Chúng ta bắt đầu với một component duy nhất</a></li>\n<li><a href=\"#l%E1%BA%A5y-d%E1%BB%AF-li%E1%BB%87u-sau-khi-c%C3%B3-t%C6%B0%C6%A1ng-t%C3%A1c\">Lấy dữ liệu sau khi có tương tác</a></li>\n<li><a href=\"#%C4%91%C3%A2u-l%C3%A0-gi%E1%BA%A3i-ph%C3%A1p\">Đâu là giải pháp</a></li>\n</ul>\n<!-- /TOC -->\n<p>Để chia sẻ <code class=\"language-text\">state</code> giữa các component, React cung cấp API Context, <em>với lời hứa ngon ngọt</em> mà bạn có thể dễ dàng đọc được trên mạng \"có thể thay thế redux\". Từ kinh nghiệm thực tế của team Atlassian cũng như của bản thân mình (là tui luckyluu), sử dụng nó trên các module lớn, hoặc trên toàn bộ App (gốc trên cùng của cây React) là một cơn <strong>ác mộng</strong> trường kỳ.</p>\n<h2 id=\"chúng-ta-bắt-đầu-với-một-component-duy-nhất\"><a href=\"#ch%C3%BAng-ta-b%E1%BA%AFt-%C4%91%E1%BA%A7u-v%E1%BB%9Bi-m%E1%BB%99t-component-duy-nh%E1%BA%A5t\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chúng ta bắt đầu với một component duy nhất</h2>\n<p>Lấy ví dụ, chúng tạo ra một component Dropdown hiển thị danh sách categories</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CategoriesQuery</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> error<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/categories'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">,</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">children</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// sử dụng</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">CategoriesDropdown</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoriesQuery</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    ({ data, loading, error }) => </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CategoriesQuery</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Khá sạch đẹp, đúng không? Lúc component được <em>mount</em> vào DOM chúng ta <em>fetch</em> dữ liệu, đặt giá trị cho state loading.</p>\n<p>Tình huống hay gặp là chúng ta có nhu cầu sử dụng danh sách categories này trên một component nào đó khác. Việc cứ phải <em>wrap</em> component lại dạng cha con, rồi truyền danh sách categories thông qua <code class=\"language-text\">props</code> không phải là <em>lựa chọn khôn ngoan</em>, chúng ta cần lưu nó ở một nơi tập trung (store) và truy xuất ở bất kỳ đâu, chúng ta có thể sử dụng <code class=\"language-text\">createContext</code>. Việc chuyển qua dùng <code class=\"language-text\">createContext</code> dễ như ăn bún</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Provider</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Consumer</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CategoriesConsumer</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CategoriesProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> error<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/categories'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">,</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// sử dụng</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">CategoriesDropdown</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoriesConsumer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    ({ data, loading, error }) => </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CategoriesConsumer</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Chúng ta <strong>\"chỉ\"</strong> còn lại 2 vấn đề: đặt <code class=\"language-text\">&lt;CategoriesProvider/&gt;</code> ở đâu và chuyện gì sẽ xảy ra nếu Provider vì lý do nào đó không thể là <em>cha chú</em> của một component consumer?</p>\n<p>Xử lý các vấn đề phức tạp xung quanh việc viết context thế nào cho hợp lý, fallback ra làm sao sẽ cần đến một bài viết dài dòng khắc, giờ cứ tưởng tượng bạn luôn cần Provider render \"ở đâu đó\" (nhiều khi là cùng với cả tá provider khác nữa khi bạn cứ wrap thằng này trong thằng kia liên tục).</p>\n<h2 id=\"lấy-dữ-liệu-sau-khi-có-tương-tác\"><a href=\"#l%E1%BA%A5y-d%E1%BB%AF-li%E1%BB%87u-sau-khi-c%C3%B3-t%C6%B0%C6%A1ng-t%C3%A1c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lấy dữ liệu sau khi có tương tác</h2>\n<p>Đoạn code fetch dữ liệu lúc mount component ở trên trông rất hợp lý, nhưng sẽ có tình huống bạn cần trigger <code class=\"language-text\">fetch</code> không phải lúc mount.</p>\n<pre class=\"language-text\"><code class=\"language-text\">Node A\n    - Node B\n        - Node C</code></pre>\n<p>Nếu đặt tình huống bạn fetch dữ liệu categories ở <code class=\"language-text\">&lt;Node A /&gt;</code>, được <code class=\"language-text\">&lt;Node C/&gt;</code> hiển thị, nhưng user lúc sử dụng đôi khi chả bao giờ thấy đến <code class=\"language-text\">&lt;Node C/&gt;</code>, họ có thể dừng lại ở màn hình <code class=\"language-text\">&lt;Node A /&gt;</code>, việc bắt trình duyệt đi lấy dữ liệu quá sớm <em>không phải là một chuyện nên làm</em>. Do đó chúng ta sẽ có nhu cầu trả về hàm lấy dữ liệu trực tiếp xuống <code class=\"language-text\">context</code>:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">,</span> fetch<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">fetch</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>ĐỪNG BAO GIỜ LÀM NHƯ VẬY</strong>. Bạn có thấy được con bug <strong>\"ngầm\"</strong> trong cách viết trên không? Mỗi lần <code class=\"language-text\">CategoriesProvider</code> re-render, chúng ta truyền xuống một giá trị hoàn toàn mới cho <code class=\"language-text\">value</code> - <em>một object được khởi tạo mới tinh</em>. Tạo ra một object rồi truyền xuống thành <code class=\"language-text\">props</code> là <strong>lỗi căn bản</strong> cần tránh, tuy nhiên khi dùng cho Context Provider nó đặc biệt trầm trọng. Khi để ý thấy lỗi này, chúng tôi đã theo sự chỉ dẫn từ tài liệu của <a href=\"https://reactjs.org/docs/context.html#caveats\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Context guidelines</a>, lưu phương thức đó vào state</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CategoriesProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      data<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n      loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      error<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n      fetch<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">fetch</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Sau đó trong component consumer, chúng ta sẽ fetch dữ liệu categories khi thằng component consumer thực sự render</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">CategoriesQuery</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">CategoriesContext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>context<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>context<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">children</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Xong! <strong>Chưa thật sự xong đâu</strong>, khi thêm <code class=\"language-text\">&lt;CategoriesQuery/&gt;</code> ở 2 nơi khác nhau trên cây, nếu 2 component được mount cùng một lúc, <code class=\"language-text\">fetch</code> sẽ chạy <strong>2 lần</strong>.</p>\n<p><em>Bug nhỏ thôi mà đúng không?</em> Chúng ta không kiểm tra state <code class=\"language-text\">loading</code> trước khi gọi <code class=\"language-text\">fetch</code>. Sửa nhanh trong Provider:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// class CategoriesProvider...</span>\n<span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">loading</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Thử refresh lại trang, với 2 <code class=\"language-text\">CategoriesQuery</code> mount và... <strong>BÙM</strong> Vẫn là 2 request network. Kiểm tra lại lần nữa nào, có gì đó lỗi rồi, không lỗi nữa, lại lỗi nữa, ....</p>\n<p>....</p>\n<p>lại lỗi\n....</p>\n<p>còn lỗi\n....</p>\n<p>chưa hết lỗi\n....</p>\n<p>Rồi bỗng dưng chúng ta nhận ra React <code class=\"language-text\">setState</code> là một <code class=\"language-text\">async</code>. Có nghĩa là việc giá trị <code class=\"language-text\">loading</code> vẫn là <code class=\"language-text\">false</code> trong cả 2 lần gọi thậm chí <code class=\"language-text\">setState</code> đã được gọi một lần. \"Shitty React\" (React như c*t)</p>\n<p>Bắt đầu tìm kiếm một cách làm \"less shitty\" (bớt nhảm shit) với chuyện <code class=\"language-text\">setState</code> async trong Context Provider (có 4 năm cách làm tùy theo độ <em>sáng tạo</em>), nhưng có thể đảm bảo rằng không có cách nào <em>thập toàn thập mỹ</em>. Luôn cảm thấy chúng ta đang <strong>chống lại cách làm chính quy từ React</strong>.</p>\n<h2 id=\"đâu-là-giải-pháp\"><a href=\"#%C4%91%C3%A2u-l%C3%A0-gi%E1%BA%A3i-ph%C3%A1p\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đâu là giải pháp</h2>\n<p>Context API có rất nhiều điểm cộng ngay cả khi so sánh với Redux, cái chúng ta cần là một cách vẹn toàn cả cho cả 2.</p>\n<p>Mình cũng gặp vấn đề y chang như vậy với ứng dụng đang làm. Tìm kiếm và cuối cùng chốt hạ dùng <a href=\"https://atlassian.github.io/react-sweet-state/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-sweet-state</a> cho cả team</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> createStore<span class=\"token punctuation\">,</span> createHook <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-sweet-state\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// giá trị khởi tạo</span>\n<span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n  loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  error<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// define the actions that mutate the state</span>\n<span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">fetch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> getState<span class=\"token punctuation\">,</span> setState <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">loading</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/categories\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">,</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// tạo store</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">CategoriesStore</span> <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> initialState<span class=\"token punctuation\">,</span> actions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// tạo components để truy cập dữ liệu từ store</span>\n<span class=\"token keyword\">const</span> useCategories <span class=\"token operator\">=</span> <span class=\"token function\">createHook</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">CategoriesStore</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// sử dụng</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">CategoriesQuery</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> actions<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useCategories</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>state<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">)</span> actions<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> actions<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">children</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Có nhiều điểm cộng cho <a href=\"https://atlassian.github.io/react-sweet-state/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-sweet-state</a> như nó vẫn dùng Context API, nhưng an toàn hơn, các action sẽ dễ test hơn, làm việc được với Redux DevTools, đã xử lý những lỗi vẫn hay gặp với React Context. Và nhiều điều hay ho khác nữa. Các bạn nhớ like cho repo này trên github.</p>\n<p>Một số dẫn chứng khác để bạn tham khảo</p>\n<ul>\n<li><a href=\"https://twitter.com/dan_abramov/status/1109595839347990528\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Context <strong>Không được thiết kế cho dữ liệu thường xuyên cập nhập</strong></a></li>\n<li><a href=\"https://github.com/facebook/react/issues/13739\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>Hạn chế hiệu năng</strong> của React Context</a></li>\n<li><a href=\"https://github.com/facebook/react/issues/14110\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Context <strong>Không hỗ trợ selector</strong></a></li>\n<li><a href=\"https://github.com/facebook/react/issues/15156\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Context <strong>Không thể ngăn chặn việc re-render</strong></a></li>\n</ul>\n<p><a href=\"https://medium.com/@albertogasparin/the-pitfalls-of-async-operations-via-react-context-api-ab987d4290e6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The pitfalls of async operations via React Context API</a></p>\n"}},{"node":{"title":"Sử dụng React Context như thế nào cho hiệu quả","path":"/su-dung-react-context-nhu-the-nao-cho-hieu-qua/","date":"8. March 2020","timeToRead":9,"desc":"Để có thể quản lý được state của ứng dụng một cách tốt nhất, chúng ta cần sự phân chia phù hợp giữa local state (internal state của component) và state cửa ứng dụng đặt trong React Context. Một vài điều muốn chia sẽ để nâng cao khả năng bảo trì và trải nghiệm nếu sử dụng đến context trong React.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#provider-component\">Provider Component</a></li>\n<li><a href=\"#consumer-hook\">Consumer Hook</a></li>\n<li><a href=\"#typescript--flow\">TypeScript / Flow</a></li>\n<li><a href=\"#v%E1%BA%ADy-c%C3%B2n-dispatch-type\">Vậy còn dispatch <code class=\"language-text\">type</code>?</a></li>\n<li><a href=\"#v%E1%BA%ADy-c%C3%B2n-c%C3%A1c-async-action-th%C3%AC-sao-\">Vậy còn các async action thì sao ?</a></li>\n<li><a href=\"#c%E1%BA%A3m-th%E1%BA%A5y-t%C3%A1ch-state-v%C3%A0-dispatch-r%E1%BA%A5t-kh%C3%B3-ch%E1%BB%8Bu\">Cảm thấy tách state và dispatch rất khó chịu</a></li>\n<li><a href=\"#to%C3%A0n-b%E1%BB%99-source-code\">Toàn bộ source code</a></li>\n</ul>\n<!-- /TOC -->\n<p>Chúng ta có một <em>module</em> (một nhánh trên cây react component cho dể hình dung) muốn sử dụng Context là <code class=\"language-text\">count</code>, chúng ta tạo file <code class=\"language-text\">count-context.js</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/count-context.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">CountStateContext</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">CountDispatchContext</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Điều muốn nói đầu tiên là chúng ta cố tình <strong>không khai báo giá trị khởi tạo</strong> cho <code class=\"language-text\">CountStateContext</code>, nếu muốn bạn có thể gọi <code class=\"language-text\">React.createContext({count: 0})</code>. Khai báo một <code class=\"language-text\">defaultValue</code> chỉ hữu dụng trong trường hợp như bên dưới</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">CountDisplay</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> count <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useContext</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">CountStateContext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Vì không khai báo giá trị khởi tạo, chúng ta sẽ nhận lỗi khi viết destructure giá trị trả về từ <code class=\"language-text\">useContext</code>. Vì giá trị mặc định là <code class=\"language-text\">undefined</code> và chúng ta không thể destructure <code class=\"language-text\">undefined</code></p>\n<p>Không ai trong chúng ta muốn nhận lỗi do không có giá trị khởi tạo. Tuy nhiên, nếu chỉ sử dụng giá trị mặc định được cung cấp, lợi ích sẽ không nhiều bằng việc linh động giá trị này. Kinh nghiệm thực tế cho thấy khi khởi tạo và sử dụng context trong ứng dụng, chúng ta muốn các consumer context (component sử dụng <code class=\"language-text\">useContext</code>) có thể cung cấp thêm các giá trị mới.</p>\n<p><em>Trong tài liệu chính thức của React có đề cập, \"cung cấp giá trị mặc định có thế giúp việc test component độc lập mà không cần bộc chúng lại (component lồng vào nhau)\". Không cùng quan điểm với ý kiến này, cá nhân tác giả (Kent C. Dodds) cho rằng tốt hơn nên bộc component với các context cần thiết khi test. Hãy nhớ là mỗi lần chúng ta làm gì đó bên trong test, chúng ta không làm những việc như vậy trong ứng dụng, chúng ta giảm bớt sự tự tin mà unit test mang lại.</em></p>\n<blockquote>\n<p>Lưu ý: nếu đang sử dụng Flow hay TypeScript, không cung cấp giá trị mặc định sẽ bị nhận ngay thẻ \"cảnh cáo\", rất phiền toái nếu sử dụng <code class=\"language-text\">React.useContext</code>. Đọc tiếp phần dưới sẽ chỉ cách khắc phục</p>\n</blockquote>\n<p>Mục đích của <code class=\"language-text\">CountDispatchContext</code> là để làm gì. Mình đã sử dụng context trong một thời gian, và nói chuyện với một số người đang làm việc với nó, có thể chia sẻ với bạn là đây là <strong>cách đơn giản nhất</strong> để tránh các rắc rối với context (đặc biệt khi bạn bắt đầu sử dụng <code class=\"language-text\">dispatch</code> trong effect) khi bạn bắt đầu tách state và dispatch trong context. <strong>Hãy tin mình!</strong></p>\n<h2 id=\"provider-component\"><a href=\"#provider-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Provider Component</h2>\n<p>Để các component bên dưới có thể sử dụng context module, chúng ta phải <em>bộc</em> các component lại về trong cùng một context, sử dụng với Provider Component, cái này thì ai cũng biết</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountDisplay</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountProvider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">CountProvider</code> được đưa ra để xài như thế nào cho hiệu quả thì lại ích ai quan tâm, đây là cách mà <code class=\"language-text\">CountProvider</code> được đưa ra cho thế giới</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/count-context.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">CountStateContext</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">CountDispatchContext</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">countReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"increment\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"decrement\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Unhandled action type: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">CountProvider</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useReducer</span><span class=\"token punctuation\">(</span>countReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountStateContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountDispatchContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>dispatch<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountDispatchContext.Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountStateContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword module\">export</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">CountProvider</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"consumer-hook\"><a href=\"#consumer-hook\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Consumer Hook</h2>\n<p>Các thư viện sử dụng context tìm thấy trên mạng đa phần sẽ dùng cách này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">SomethingContext</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"some-context-package\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">YourComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> something <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useContext</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">SomethingContext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Để nâng cao trải nghiệm khi chúng ta sử dụng, câu lệnh này <code class=\"language-text\">React.useContext(SomethingContext)</code> cần phải thay thế. Nếu có thể viết như thế này, sẽ tuyệt vời hơn rất nhiều</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> useSomething <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"some-context-package\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">YourComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> something <span class=\"token operator\">=</span> <span class=\"token function\">useSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Để có thể dùng <code class=\"language-text\">useSomething()</code> như bên trên, chúng ta sẽ cần viết lại context như sau</p>\n<pre class=\"language-jsx{32-38,40-46,48}\"><code class=\"language-jsx{32-38,40-46,48}\">// src/count-context.js\nimport React from \"react\";\n\nconst CountStateContext = React.createContext();\nconst CountDispatchContext = React.createContext();\n\nfunction countReducer(state, action) {\n  switch (action.type) {\n    case \"increment\": {\n      return { count: state.count + 1 };\n    }\n    case \"decrement\": {\n      return { count: state.count - 1 };\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action.type}`);\n    }\n  }\n}\n\nfunction CountProvider({ children }) {\n  const [state, dispatch] = React.useReducer(countReducer, { count: 0 });\n  return (\n    <CountStateContext.Provider value={state}>\n      <CountDispatchContext.Provider value={dispatch}>\n        {children}\n      </CountDispatchContext.Provider>\n    </CountStateContext.Provider>\n  );\n}\n\nfunction useCountState() {\n  const context = React.useContext(CountStateContext);\n  if (context === undefined) {\n    throw new Error(\"useCountState must be used within a CountProvider\");\n  }\n  return context;\n}\n\nfunction useCountDispatch() {\n  const context = React.useContext(CountDispatchContext);\n  if (context === undefined) {\n    throw new Error(\"useCountDispatch must be used within a CountProvider\");\n  }\n  return context;\n}\n\nexport { CountProvider, useCountState, useCountDispatch };</code></pre>\n<p>Chúng ta tạo <code class=\"language-text\">useCountState</code> và <code class=\"language-text\">useCountDispatch</code> hook sử dụng <code class=\"language-text\">React.useContext</code> để lấy được giá trị context cung cấp từ <code class=\"language-text\">CountProvider</code>. Tuy nhiên, nếu không có giá trị, chúng ta hiển thị thông báo lỗi để báo hook chỉ được sử dụng trong function component được render bên trong <code class=\"language-text\">CountProvider</code>. Lỗi này rất hay quên, nên nhắc trước cho tốt.</p>\n<p>Nếu cần sử dụng với React &#x3C; 16.8.0, chúng ta dùng render-prop với Consumer Component như sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">CountConsumer</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountStateContext.Consumer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token parameter\">context</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CountConsumer must be used within a CountProvider\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">children</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountStateContext.Consumer</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>Nếu bạn đã dùng React cũ, hoặc là nâng cấp mới nhất, hoặc giữ nguyên tình trạng hiện tại cho an toàn?</strong></p>\n<h2 id=\"typescript--flow\"><a href=\"#typescript--flow\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>TypeScript / Flow</h2>\n<p>Như đã hứa ở trên, với vấn đề <code class=\"language-text\">defaultValue</code> khi sử dụng TypeScript và Flow. Giải quyết như sau</p>\n<pre class=\"language-tsx{9-12,40-44,48-52}\"><code class=\"language-tsx{9-12,40-44,48-52}\">// src/count-context.tsx\nimport * as React from 'react'\n\ntype Action = {type: 'increment'} | {type: 'decrement'}\ntype Dispatch = (action: Action) => void\ntype State = {count: number}\ntype CountProviderProps = {children: React.ReactNode}\n\nconst CountStateContext = React.createContext<State| undefined>(undefined)\nconst CountDispatchContext = React.createContext(<Dispatch | undefined>(\nundefined,\n)\n\nfunction countReducer(state: State, action: Action) {\n  switch (action.type) {\n    case 'increment': {\n      return {count: state.count + 1}\n    }\n    case 'decrement': {\n      return {count: state.count - 1}\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action.type}`)\n    }\n  }\n}\n\nfunction CountProvider({children}: CountProviderProps) {\n  const [state, dispatch] = React.useReducer(countReducer, {count: 0})\n\n  return (\n    <CountStateContext.Provider value={state}>\n      <CountDispatchContext.Provider value={dispatch}>\n        {children}\n      </CountDispatchContext.Provider>\n    </CountStateContext.Provider>\n  )\n}\n\nfunction useCountState() {\n  const context = React.useContext(CountStateContext)\n  if (context === undefined) {\n    throw new Error('useCountState must be used within a CountProvider')\n  }\n  return context\n}\n\nfunction useCountDispatch() {\n  const context = React.useContext(CountDispatchContext)\n  if (context === undefined) {\n    throw new Error('useCountDispatch must be used within a CountProvider')\n  }\n  return context\n}\n\nexport {CountProvider, useCountState, useCountDispatch}</code></pre>\n<p>Với cách viết này, ai cũng có thể sử dụng <code class=\"language-text\">useCountState</code> hoặc <code class=\"language-text\">useCountDispatch</code> mà không cần kiểm tra <code class=\"language-text\">undefined</code></p>\n<p><a href=\"https://codesandbox.io/s/bitter-night-i5mhj\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem CodeSandbox</a></p>\n<h2 id=\"vậy-còn-dispatch-type\"><a href=\"#v%E1%BA%ADy-c%C3%B2n-dispatch-type\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vậy còn dispatch <code class=\"language-text\">type</code>?</h2>\n<p>Nếu bạn từng viết Redux, sẽ thắc mắc \"vậy action creator đâu?\". Nếu <em>thích</em> bạn có thể tự viết nếu muốn. Nhưng mình không phải là <em>fan</em> của action creator (cô thư ký xinh đẹp trong <a href=\"http://vuilaptrinh.com/2019-05-28-giai-thich-pattern-flux-trong-react/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bài giải thích về Flux Pattern của mình</a>. Mình luôn cảm thấy em này khá dư thừa, không cần thiết phải phức tạp thêm một tổ chức đã quá phức tạp như Flux (<strong>hoàn hảo không phải là không còn gì để thêm nữa mà là ko còn gì có thể bỏ đi mà</strong>). Nếu sử dụng TypeScript hoặc Flow, nó sẽ giúp chúng ta tự điền action type có thể điền</p>\n<p><img src=\"https://kentcdodds.com/static/d99d4329b1d7ebd2e63bf76471f540ab/e3189/auto-complete.png\" alt=\"Sử dụng React Context như thế nào cho hiệu quả\"></p>\n<p><img src=\"https://kentcdodds.com/static/0d45ecb53470729181863636bdafc2b9/e3189/type-error.png\" alt=\"Sử dụng React Context như thế nào cho hiệu quả\"></p>\n<p>Mình thích kiểu gọi <code class=\"language-text\">dispatch</code> như thế này, nếu để ý bạn sẽ biết <code class=\"language-text\">dispatch</code> sẽ không thay đổi trong suốt quá trình tồn tại của component, nghĩa là bạn có thể truyền nó vào mảng phụ thuộc của <code class=\"language-text\">useEffect</code> vô tư.</p>\n<h2 id=\"vậy-còn-các-async-action-thì-sao-\"><a href=\"#v%E1%BA%ADy-c%C3%B2n-c%C3%A1c-async-action-th%C3%AC-sao-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vậy còn các async action thì sao ?</h2>\n<p>Một câu hỏi hay, bạn gặp tình huống cần xử lý là một async (thao tác bất đồng bộ như network request) và bạn cần dispatch nhiều action cùng lúc, dispatch một action nào đó phụ thuộc vào kết quả từ dispatch trước đó? Bạn có thể làm điều đó trong component, tuy nhiên <em>xử lý thủ công</em> như thế trên từng component rất là phiền.</p>\n<p>Mình đề nghị tạo một helper function trong context module, nhận <code class=\"language-text\">dispatch</code> và tất cả những dữ liệu bạn cần, helper function (AKA middleware) này sẽ chịu trách nhiệm xử lý tất cả những việc đã nêu trên (theo kiểu state machine)</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// user-context.js</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> updates</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"start update\"</span><span class=\"token punctuation\">,</span> updates <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> updatedUser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> userClient<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updateUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> updates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"finish update\"</span><span class=\"token punctuation\">,</span> updatedUser <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"fail update\"</span><span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">UserProvider</span><span class=\"token punctuation\">,</span> useUserDispatch<span class=\"token punctuation\">,</span> useUserState<span class=\"token punctuation\">,</span> updateUser <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Sử dụng nó sẽ như thế này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// user-profile.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> useUserState<span class=\"token punctuation\">,</span> useUserDispatch<span class=\"token punctuation\">,</span> updateUser <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./user-context\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">UserSettings</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useUserState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> userDispatch <span class=\"token operator\">=</span> <span class=\"token function\">useUserDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span>userDispatch<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> formState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"cảm-thấy-tách-state-và-dispatch-rất-khó-chịu\"><a href=\"#c%E1%BA%A3m-th%E1%BA%A5y-t%C3%A1ch-state-v%C3%A0-dispatch-r%E1%BA%A5t-kh%C3%B3-ch%E1%BB%8Bu\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cảm thấy tách state và dispatch rất khó chịu</h2>\n<p>Nhiều người phàn nàn tách state và dispatch riêng rất khó chịu</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">useCountState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useCountDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Tại sao không <em>đơn giản</em> là làm thế này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Tất nhiên bạn có thể</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">useCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token function\">useCountState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">useCountDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Cái này tùy cách nhìn nhận của từng người viết, không có chuyện ai đúng ai sai, chỉ là bạn cảm thấy <em>thoải mái</em>, <em>vui</em> hơn với cách viết nào thôi.</p>\n<h2 id=\"toàn-bộ-source-code\"><a href=\"#to%C3%A0n-b%E1%BB%99-source-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Toàn bộ source code</h2>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/count-context.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">CountStateContext</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">CountDispatchContext</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">countReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"increment\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"decrement\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Unhandled action type: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">CountProvider</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useReducer</span><span class=\"token punctuation\">(</span>countReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountStateContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountDispatchContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>dispatch<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountDispatchContext.Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountStateContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useCountState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useContext</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">CountStateContext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"useCountState must be used within a CountProvider\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useCountDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useContext</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">CountDispatchContext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"useCountDispatch must be used within a CountProvider\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">CountProvider</span><span class=\"token punctuation\">,</span> useCountState<span class=\"token punctuation\">,</span> useCountDispatch <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Ở đây, mình đang cố tính không <code class=\"language-text\">export CountContext</code>, chúng ta chỉ cung cấp một cách để cung cấp giá trị trong context và một cách để lấy về giá trị này. Việc này đảm bảo người sử dụng giá trị context đúng theo cái cách chúng ta muốn, cho phép chúng ta hạn chế một số code không cần thiết khi lúc nào cũng phải khai báo <code class=\"language-text\">useContext</code> nào.</p>\n<p>Hy vọng bài viết mang đến nhiều điều hữu ích cho bạn.</p>\n<p><strong>Tâm niệm rằng:</strong></p>\n<ul>\n<li>Không nên đặt trọn niềm tin 100% vào context có thể giải quyết <strong>tất cả</strong> vấn đề liên quan đến chia sẻ state</li>\n<li>Context không nhất thiết là một global state cho toàn bộ ứng dụng, nó có thể được áp dụng trên một phần của cây component cụ thể nào đó.</li>\n<li>Bạn có thể (và bạn nên) chia các logic khác nhau trên các context khác nhau.</li>\n</ul>\n<p><a href=\"https://codesandbox.io/s/react-codesandbox-je6cc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Code Sandbox cho bạn nào cần vọc vạch</a></p>\n<p><a href=\"https://kentcdodds.com/blog/how-to-use-react-context-effectively\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to use React Context effectively</a></p>\n<p><a href=\"https://kentcdodds.com/blog/application-state-management-with-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Application State Management with React</a></p>\n<p><a href=\"https://kentcdodds.com/blog/how-to-optimize-your-context-value\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to optimize your context value</a></p>\n"}},{"node":{"title":"Chỉ dẫn thiết đặt ESLint trong nhiều tình huống sử dụng Javascript, Typescript, React","path":"/chi-dan-thiet-dat-es-lint-trong-nhieu-tinh-huong-su-dung-javascript-typescript-react/","date":"3. February 2020","timeToRead":7,"desc":"Chúng ta bắt đầu với Javascript trước, sau đó sẽ là TypeScript, và React. Mục tiêu là làm đúng, tránh trường hợp cài package không cần thiết hoặc copy/paste các config tới khi nó chạy được thì thôi.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#t%E1%BA%A1i-sao-d%C3%B9ng-eslint\">Tại sao dùng ESLint</a></li>\n<li><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-eslint\">Cài đặt ESLint</a></li>\n<li><a href=\"#file-c%C3%A0i-%C4%91%E1%BA%B7t-c%E1%BB%A7a-eslint\">File cài đặt của ESLint</a></li>\n<li><a href=\"#javascript-thu%E1%BA%A7n\">Javascript thuần</a></li>\n<li><a href=\"#thi%E1%BA%BFt-%C4%91%E1%BA%B7t-typescript\">Thiết đặt TypeScript</a></li>\n<li>\n<p><a href=\"#thi%E1%BA%BFt-%C4%91%E1%BA%B7t-cho-react\">Thiết đặt cho React</a></p>\n<ul>\n<li><a href=\"#react-javascript\">React Javascript</a></li>\n<li><a href=\"#react-typescript\">React TypeScript</a></li>\n</ul>\n</li>\n<li><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-cho-vscode\">Cài đặt cho VSCode</a></li>\n</ul>\n<!-- /TOC -->\n<p>Nếu chưa rành, bạn cần đọc từ đầu tới cuối, nếu đã thành thạo, chỉ việc nhảy tới phần cuối rồi copy config về xài.</p>\n<p>Hướng dẫn này sử dụng bộ config của Airbnb, vì nó quá nổi tiếng và được sử dụng gần như là chuẩn. Tất nhiên, bạn có quyền thay đổi sao cho hợp <em>gu</em></p>\n<p>Nếu chưa bao giờ <em>nghe</em> đến hướng dẫn viết <em>code sao cho chuẩn</em> của Airbnb, tham khảo các bài viết sau</p>\n<ul>\n<li><a href=\"https://github.com/airbnb/javascript/blob/master/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb JavaScript style guide</a></li>\n<li><a href=\"https://github.com/airbnb/javascript/tree/master/react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb React style guide</a></li>\n<li><a href=\"https://github.com/airbnb/javascript/tree/master/css-in-javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb CSS in JavaScript style guide</a></li>\n<li><a href=\"https://github.com/airbnb/css\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb Sass style guide</a></li>\n</ul>\n<h2 id=\"tại-sao-dùng-eslint\"><a href=\"#t%E1%BA%A1i-sao-d%C3%B9ng-eslint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao dùng ESLint</h2>\n<p>Hiện tại không có bất cứ một đối thủ nào <em>xứng tầm</em> với ESLint, nó là dự án đã và đang được bảo trì bởi cộng đồng rất rộng lớn. Hầu hết các chương trình viết code đều hỗ trợ, chúng ta sẽ không gặp khó khăn trong việc sử dụng nó với VSCode, Vim, Emac, WebStorm, Sublime, Atom,...</p>\n<p>Túm lại, ESLint là <strong>nền tảng</strong> xịn sò nhất, bạn không cần lăng tăng tìm <em>người khác</em>.</p>\n<h2 id=\"cài-đặt-eslint\"><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-eslint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cài đặt ESLint</h2>\n<p>Giống như bất kỳ package nào khác, ESLint có thể được cài đặt ở 2 mức</p>\n<ul>\n<li><em>global</em>, cài luôn vào máy <code class=\"language-text\">npm -g</code></li>\n<li>đi theo từng project</li>\n</ul>\n<p>Việc cài đặt ESLint ở mức <em>global</em> khá là hợp lý vì chúng ta muốn dùng nó ở mọi project. Tuy nhiên cũng <em>hợp lý</em> nếu cài riêng trên từng project nếu bạn đang cần</p>\n<ul>\n<li>Các phiên bản ESLint khác nhau trên từng dự án</li>\n<li>Công khai bạn phụ thuộc vào ESLint cho project đó</li>\n<li>Đồng nghiệp và các công cụ tự động (như mấy thằng CI) có thể cài đặt ESlint như những package khác.</li>\n</ul>\n<p>Cài đặt ESLint trong thư mục project</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i eslint --save-dev</code></pre>\n<p>Chạy ESLint trong project</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npx eslint</code></pre>\n<p>Để tạo một <em>shortcut</em> cho câu lệnh chạy eslint. Bên trong file <code class=\"language-text\">package.json</code> thêm dòng sau</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint .\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Tham số <code class=\"language-text\">.</code> cho phép chạy ESLint bên trong thư mục hiện tại, chúng ta chạy lệnh thông qua shortcut</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run lint</code></pre>\n<h2 id=\"file-cài-đặt-của-eslint\"><a href=\"#file-c%C3%A0i-%C4%91%E1%BA%B7t-c%E1%BB%A7a-eslint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>File cài đặt của ESLint</h2>\n<p>Có thể đặt file cài đặt ESLint ở <a href=\"https://eslint.org/docs/user-guide/configuring#configuration-cascading-and-hierarchy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nhiều vị trí</a>. Nếu không có nhu cầu quá đặt biệt, 1 file duy nhất ở thư mục ngoài cùng ( <code class=\"language-text\">root</code> ) là đủ.</p>\n<p>ESLint cho phép sử dụng nhiều kiểu file</p>\n<ul>\n<li>Javascript</li>\n<li>JSON</li>\n<li>YAML</li>\n</ul>\n<p>Xài YAML trong ví dụ này. Tạo file tên <code class=\"language-text\">.eslintrc.yaml</code>, cái này nếu bạn chạy <code class=\"language-text\">eslint init</code> trong thư mục <code class=\"language-text\">src/</code> của dự án nó sẽ hỏi bạn có muốn tạo không, nó tạo dùm cho.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">eslint --init</code></pre>\n<blockquote>\n<p>Nếu muốn thêm <em>logic</em> bằng code, bạn cần dùng kiểu javascript</p>\n</blockquote>\n<p>Điều cần quan tâm trước hết là thông báo cho ESLint chúng ta đang viết ngôn ngữ gì, phiên bản nào, môi trường mà code sẽ chạy. Nếu không có các thông tin, ESLint sẽ không chạy được.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">parserOptions:\n  ecmaVersion: <span class=\"token number\">6</span>\nenv:\n  node: <span class=\"token boolean\">true</span></code></pre>\n<h2 id=\"javascript-thuần\"><a href=\"#javascript-thu%E1%BA%A7n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Javascript thuần</h2>\n<p>Với project là javascript thuần, toàn bộ file là <code class=\"language-text\">.js</code>, có thể tự định nghĩa từ đầu hết, nhưng như vậy khá mất thời gian, khó bảo trì, chưa chắc chuẩn vì nó phụ thuộc vào sự hiểu biết của bạn về javascript</p>\n<p>Rất nhiều các công ty lớn như <a href=\"https://github.com/google/eslint-config-google\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google</a>, <a href=\"https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb</a>, <a href=\"https://github.com/facebook/fbjs/tree/master/packages/eslint-config-fbjs-opensource\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Facebook</a> bỏ ra cả tỉ tỉ thời gian để bảo trì và cập nhập mấy cài đặt này</p>\n<p>Sử dụng cài đặt vạn người yêu thích, Airbnb</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npx install-peerdeps --dev eslint-config-airbnb-base</code></pre>\n<p>Các bài viết trên mạng sẽ kêu bạn cài <code class=\"language-text\">eslint-config-airbnb</code>, nó có bao gồm luôn phần cài đặt cho React, React Hooks, ... . Không cần thiết trong trường hợp project chỉ là javascript thông thường.</p>\n<p>Để ý chúng ta <strong>KHÔNG</strong> dùng <code class=\"language-text\">npm</code> để cài đặt, mà dùng <code class=\"language-text\">npx install-peerdeps</code>. Nó sẽ cài luôn mấy package nào mà <code class=\"language-text\">eslint-config-airbnb-base</code> phụ thuộc. Trường hợp sử dụng ESLint chúng ta sẽ gặp hoài, vì hầu như nó đều phụ thuộc một vài package khác.</p>\n<p>Cài xong, khai báo sẽ kế thừa bộ cài đặt của Airbnb</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>base</code></pre>\n<p>Những thiết đặt của airbnb có thể nói là rất phổ biến và được tin dùng bởi nhiều dự án lớn nhỏ khác nhau. Chúng ta có thể yên tâm sử dụng nó mà không cần thay đổi gì nhiều.</p>\n<p>Tổng kết</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-config-airbnb-base\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^14.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-import\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.20.0\"</span> (peer dependency)\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parserOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ecmaVersion</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">node</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> eslint<span class=\"token punctuation\">:</span>recommended\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>base</code></pre>\n<h2 id=\"thiết-đặt-typescript\"><a href=\"#thi%E1%BA%BFt-%C4%91%E1%BA%B7t-typescript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thiết đặt TypeScript</h2>\n<p>Vấn đề chính của TypeScript là ESLint không thể tự động mà <code class=\"language-text\">parse</code> được, chúng ta phải thêm một parser <a href=\"https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/parser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@typescript-eslint/parser</a>.</p>\n<p>Cài đặt</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @typescript-eslint/parser --save-dev</code></pre>\n<blockquote>\n<p>Parse làm nhiệm vụ đọc cài file input và tạo ra một <em>phiên bản</em> mà ESLint hiểu được.</p>\n</blockquote>\n<p>Khai báo dùng parser này</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parser</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span></code></pre>\n<p>Đồng thời cập nhập luôn <code class=\"language-text\">package.json</code> và báo với ESLint đừng kiểm tra file <code class=\"language-text\">.js</code> mà kiểm tra file <code class=\"language-text\">.ts</code></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint . --ext .ts\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Tương tự như javascript, chúng ta dùng bộ thiết đặt của Airbnb</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npx install-peerdeps --dev eslint-config-airbnb-typescript\n<span class=\"token function\">npm</span> i eslint-plugin-import --save-dev</code></pre>\n<p><code class=\"language-text\">eslint-plugin-import</code> phải được cài đặt riêng, thủ công, không rõ lý do tại sao luôn.</p>\n<p>Cập nhập lại file config ESLint</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>typescript/base\n  <span class=\"token punctuation\">-</span> plugin<span class=\"token punctuation\">:</span>@typescript<span class=\"token punctuation\">-</span>eslint/recommended</code></pre>\n<p>Bạn có thể thắc mắc, tại sao chưa cài <code class=\"language-text\">@typescript-eslint</code> mà có thể sử dụng, thật ra lúc cài <code class=\"language-text\">eslint-config-airbnb-typescript</code> chúng ta đã cài luôn nó bằng <code class=\"language-text\">npx install-peerdeps</code></p>\n<p>Có thể rule khác nữa có thể tham khảo <a href=\"https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">trực tiếp từ tài liệu trên github</a></p>\n<p>Cuối cùng, bạn sẽ thấy có rất nhiều bài viết trên mạng, chỉ bạn thiết đặt</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token string\">\"@typescript-eslint\"</span></code></pre>\n<p>Nếu không sử dụng các thiết ESLint được đề nghị, cái này không cần thiết. Lý do là Airbnb đã bật luôn các rule như vậy.</p>\n<p>Tổng kết</p>\n<p><strong>package.json</strong></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"@typescript-eslint/eslint-plugin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.17.0\"</span><span class=\"token punctuation\">,</span> (peer dependency)\n  <span class=\"token property\">\"@typescript-eslint/parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.17.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.8.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-config-airbnb-typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.3.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-import\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.20.0\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>.eslintrc.yaml</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parserOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ecmaVersion</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">node</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>typescript/base\n  <span class=\"token punctuation\">-</span> plugin<span class=\"token punctuation\">:</span>@typescript<span class=\"token punctuation\">-</span>eslint/recommended</code></pre>\n<h2 id=\"thiết-đặt-cho-react\"><a href=\"#thi%E1%BA%BFt-%C4%91%E1%BA%B7t-cho-react\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thiết đặt cho React</h2>\n<p>Thêm các thiết đặt ESLint cho React vô cùng đơn giản, mọi thứ đã có Airbnb lo.</p>\n<p>Một trong những sai lầm phổ biến là cho rằng viết như bên dưới sẽ bật hỗ trợ React</p>\n<p><strong>.eslintrc.yaml</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parserOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ecmaFeatures</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">jsx</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre>\n<p>React sử dụng JSX, nhưng theo cách mà ESLint không thể <strong>hiểu nổi</strong>. Để React và ESLint <em>nói chuyện</em> được với nhau, chúng ta phải sử dụng <code class=\"language-text\">eslint-plugin-react</code></p>\n<h3 id=\"react-javascript\"><a href=\"#react-javascript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>React Javascript</h3>\n<p>Cài đặt package</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npx install-peerdeps --dev eslint-config-airbnb</code></pre>\n<p><strong>.eslintrc.yaml</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">browser</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre>\n<p><strong>package.json</strong></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint . --ext .js,.jsx\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu có sử dụng React Hook, bạn nên thêm phần cài đặt sau (có bỏ qua việc kiểm tra accessibility)</p>\n<p><strong>.eslintrc.yaml</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>base\n  <span class=\"token punctuation\">-</span> airbnb/rules/react\n  <span class=\"token punctuation\">-</span> airbnb/hooks</code></pre>\n<p>Tổng kết</p>\n<p><strong>package.json</strong></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-config-airbnb\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^18.0.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-import\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.20.0\"</span><span class=\"token punctuation\">,</span> (peer dependency)\n  <span class=\"token property\">\"eslint-plugin-jsx-a11y\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.2.3\"</span><span class=\"token punctuation\">,</span> (peer dependency)\n  <span class=\"token property\">\"eslint-plugin-react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.18.0\"</span><span class=\"token punctuation\">,</span> (peer dependency)\n  <span class=\"token property\">\"eslint-plugin-react-hooks\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.7.0\"</span> (peer dependency)\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>.eslintrc.yaml</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parserOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ecmaVersion</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">browser</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb\n  <span class=\"token punctuation\">-</span> airbnb/hooks\n\n<span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">react/react-in-jsx-scope</span><span class=\"token punctuation\">:</span> off</code></pre>\n<p><a href=\"https://github.com/yannickcr/eslint-plugin-react#list-of-supported-rules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rảnh ngồi xem toàn bộ thiết đặt</a></p>\n<h3 id=\"react-typescript\"><a href=\"#react-typescript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>React TypeScript</h3>\n<p>Nếu dùng TypeScript, chúng ta không thể cài theo kiểu <code class=\"language-text\">npx install-peerdeps</code>, mà phải cài độc lập</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint-config-airbnb-typescript <span class=\"token punctuation\">\\</span>\n            eslint-plugin-import <span class=\"token punctuation\">\\</span>\n            eslint-plugin-jsx-a11y <span class=\"token punctuation\">\\</span>\n            eslint-plugin-react <span class=\"token punctuation\">\\</span>\n            eslint-plugin-react-hooks <span class=\"token punctuation\">\\</span>\n            @typescript-eslint/eslint-plugin <span class=\"token punctuation\">\\</span>\n            --save-dev</code></pre>\n<p><strong>.eslintrc.yaml</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parserOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ecmaVersion</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">browser</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>typescript\n  <span class=\"token punctuation\">-</span> airbnb/hooks\n  <span class=\"token punctuation\">-</span> plugin<span class=\"token punctuation\">:</span>@typescript<span class=\"token punctuation\">-</span>eslint/recommended\n\n<span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">react/react-in-jsx-scope</span><span class=\"token punctuation\">:</span> off</code></pre>\n<p><strong>package.json</strong></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.8.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"@typescript-eslint/eslint-plugin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.17.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-config-airbnb-typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.3.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-import\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.20.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-jsx-a11y\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.2.3\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.18.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-react-hooks\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.3.0\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint . --ext .ts,.tsx\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"cài-đặt-cho-vscode\"><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-cho-vscode\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cài đặt cho VSCode</h2>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VSCode đã có plugin</a> khá thần thánh để hỗ trợ ESLint. Các thiết đặt yêu thích của mình</p>\n<p>Tự động chạy lint khi save</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"eslint.run\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"onSave\"</span></code></pre>\n<p>VSCode sẽ kiểm tra trên JS, JSX, TS, TSX</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"eslint.validate\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"javascript\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"javascriptreact\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"typescript\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"typescriptreact\"</span>\n<span class=\"token punctuation\">]</span></code></pre>\n<p>Chọn kiểu nháy đơn</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"javascript.preferences.quoteStyle\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"single\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"typescript.preferences.quoteStyle\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"single\"</span><span class=\"token punctuation\">,</span></code></pre>\n<p>Tự động cập nhập vị trí file</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"javascript.updateImportsOnFileMove.enabled\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"typescript.updateImportsOnFileMove.enabled\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span></code></pre>\n<p><a href=\"https://blog.geographer.fr/eslint-guide\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ESLint configuration and best practices</a></p>\n"}},{"node":{"title":"Bắt sự kiện click bên ngoài Component React","path":"/bat-su-kien-click-ben-ngoai-component-react/","date":"30. January 2020","timeToRead":1,"desc":"Thủ thuật nhỏ để bắt sự kiện click có nằm ngoài component không","content":"<p>Nếu bạn tự làm một react component như <em>dropdown</em>, <em>modal</em>, <em>popover</em>, không sớm thì muộn bạn sẽ rơi vào tình huống sao \"Bắt sự kiện click bên ngoài component để đóng nó (modal, popover, dropdown) lại\"</p>\n<p><img src=\"https://miro.medium.com/max/546/1*7dmOCdkoDLfnWz6hBF0fYA.png\"></p>\n<p>Đây là những gì bạn cần làm</p>\n<ol>\n<li>Để biết sự kiện nằm trong hay ngoài component, chúng ta phải lấy được DOM của element, dùng <code class=\"language-text\">ref</code> để lấy tham chiếu đến DOM <em>thực</em> của component</li>\n</ol>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token spread operator\">...</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        ...\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<ol start=\"2\">\n<li>Thêm một event listener cho sự kiện click ( <em>mousedown</em> )</li>\n</ol>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//  thêm khi đã mount</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mousedown\"</span><span class=\"token punctuation\">,</span> handleClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// dọn dẹp</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mousedown\"</span><span class=\"token punctuation\">,</span> handleClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<ol start=\"3\">\n<li>Bên trong <code class=\"language-text\">handleClick</code> <strong>node.current.contains(e.target)</strong> sẽ trả về <code class=\"language-text\">true</code> nếu click xuất phát bên trong ref <code class=\"language-text\">node</code></li>\n</ol>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">contains</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// outside</span>\n    <span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><a href=\"https://codesandbox.io/s/w62xl39907\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Code</a>\n<a href=\"https://medium.com/@pitipatdop/little-neat-trick-to-capture-click-outside-react-component-5604830beb7f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Little Neat trick to capture click outside with React Hook</a></p>\n"}},{"node":{"title":"Viết React Higher-Order Component bằng TypeScript","path":"/viet-react-higher-order-component-bang-type-script/","date":"19. January 2020","timeToRead":6,"desc":"Cuộc sống đưa đẩy bạn phải viết TypeScript, thì bài này sẽ giúp bạn chút ít khi viết type với HOC","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#enhancer\">Enhancer</a></li>\n<li><a href=\"#injector\">Injector</a></li>\n<li><a href=\"#enhance--inject\">Enhance + Inject</a></li>\n</ul>\n<!-- /TOC -->\n<blockquote>\n<p>Từ React 16.8.0, chúng ta có React Hook, nó giải quyết toàn bộ những trường hợp chúng ta phải sử dụng higher-order component và giảm đáng kể độ phức tạp của việc set type so với HOC. Bạn sử dụng hook trong mọi tình huống có thể. Nếu gơi cảnh <em>ngặt nghèo</em>, anh lead của bạn <em>ko rõ lý do gì</em> bắt xài HOC với TypeScript. Thì bài viết này để giúp biết biết cách set type cho HOC.</p>\n</blockquote>\n<p>HOC trong React là <em>công cụ</em> để chúng ta sử dụng nhiều đoạn code giống nhau trên các component khác nhau. Tuy nhiên khi dùng chung với TypeScript thì <strong>triệu triệu</strong> developer gặp không ít khó khăn khi set type cho nó. Bao gồm luôn mình trong đó.</p>\n<p>Trong phạm vi bài viết này, chúng ta sẽ chi ra 2 loại HOC, 2 cách làm HOC phổ biến hiện nay, tạm gọi là <strong>enhancer</strong> và <strong>injector</strong></p>\n<ul>\n<li><strong>Enhancer</strong>: bọc một component, bổ sung thêm các hàm hoặc prop</li>\n<li><strong>Injector</strong>: <em>bơm/chích</em> thêm prop vào một component</li>\n</ul>\n<p>Để phân biệt rõ hơn, bạn xem tiếp ví dụ bên dưới.</p>\n<h2 id=\"enhancer\"><a href=\"#enhancer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enhancer</h2>\n<p>Chúng ta bắt đầu với Enhancer vì nó dễ viết <code class=\"language-text\">type</code> nhất. Ví dụ cơ bản nhất, bổ sung thêm prop <code class=\"language-text\">loading</code> vào component.</p>\n<p>Không bao gồm <code class=\"language-text\">type</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withLoading</span> <span class=\"token operator\">=</span> <span class=\"token parameter\"><span class=\"token maybe-class-name\">Component</span></span> <span class=\"token arrow operator\">=></span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">WithLoading</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> loading <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadingSpinner</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>... và với <code class=\"language-text\">type</code></p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">WithLoadingProps</span> <span class=\"token punctuation\">{</span>\n  loading<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> withLoading <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">object</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(Component: React.ComponentType</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">WithLoading</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token operator\">&amp;</span> <span class=\"token maybe-class-name\">WithLoadingProps</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> loading <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadingSpinner</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span>props <span class=\"token keyword\">as</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">;</span></code></pre>\n<p>Có vài thứ cần giải thích ở đoạn trên, từng bước một nhé</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">WithLoadingProps</span> <span class=\"token punctuation\">{</span>\n  loading<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đây là <code class=\"language-text\">interface</code> khai báo các prop và <code class=\"language-text\">type</code> sẽ được thêm vào (<strong>enhance</strong>)</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">object</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(Component: React.ComponentType</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">)</span></code></pre>\n<p>Chúng ta đang sử dụng một <a href=\"https://www.typescriptlang.org/docs/handbook/generics.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">generic</code></a>, <code class=\"language-text\">P</code> là ký tự dùng để đại diện cho toàn bộ prop của component khi truyền cho HOC. <code class=\"language-text\">React.ComponentType&lt;P&gt;</code> là một type viết tắt cho cả hai <code class=\"language-text\">React.FC&lt;P&gt;</code> và <code class=\"language-text\">React.ClassComponent&lt;P&gt;</code>, nghĩa là một component truyền vào cho HOC này có thể là function cũng được, class component cũng được.</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">WithLoading</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token operator\">&amp;</span> <span class=\"token maybe-class-name\">WithLoadingProps</span><span class=\"token operator\">></span></code></pre>\n<p>Đây là đoạn chúng ta component sẽ <code class=\"language-text\">return</code> từ HOC, nó chỉ định là component này sẽ bao gồm toàn bộ prop từ component (<code class=\"language-text\">P</code>) và prop của chính thằng HOC (<code class=\"language-text\">WithLoadingProps</code>), nó được <em>cộng dồn</em> bằng toán tử <code class=\"language-text\">&amp;</code></p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span></code></pre>\n<blockquote>\n<p>Với phiên bản cũ của TypeScript, có thể chúng ta phải <em>ép kiểu</em> <code class=\"language-text\">this.props</code> như thế này <code class=\"language-text\">this.props as WithLoadingProps</code></p>\n</blockquote>\n<p>Cuối cùng chúng ta sử dụng prop <code class=\"language-text\">loading</code> để đặt điều kiện hiển thị cái <em>Spinner</em></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">return</span> loading <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadingSpinner</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span>props <span class=\"token keyword module\">as</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre>\n<blockquote>\n<p>ép kiểu <code class=\"language-text\">props as P</code> là bắt buộc từ TypeScript 3.2, đây là bug của TypeScript</p>\n</blockquote>\n<p>Với HOC <code class=\"language-text\">withLoading</code> cũng có thể được viết để return một function component thay vì class</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> withLoading <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">object</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(\n  Component: React.ComponentType</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n): React.FC&lt;P &amp; WithLoadingProps> => ({\n  loading,\n  ...props\n}: WithLoadingProps) =>\n  loading ? </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadingSpinner</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"> : &lt;Component </span><span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span>props <span class=\"token keyword\">as</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> />;</span></code></pre>\n<p>Chúng ta gặp vấn đề tương tự khi sử dụng rest/spread object, chúng ta chỉ định kiểu return là <code class=\"language-text\">React.FC&lt;P &amp; WithLoadingProps&gt;</code>, nhưng chỉ sử dụng <code class=\"language-text\">WithLoadingProps</code> bên trong function component</p>\n<h2 id=\"injector\"><a href=\"#injector\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Injector</h2>\n<p>Kiểu <em>injector</em> HOC sẽ hay gặp hơn, nhưng cũng khó set type hơn, bên cạnh việc <em>chích</em> thêm một số prop vào cho component, trong đa số các trường hợp nó còn xóa những prop đã <em>chích</em> vào khi nó bọc lại, như vậy những thằng từ bên ngoài không thể ghi đè lên. <code class=\"language-text\">connect</code> của react-redux là một ví dụ cho injector HOC. Chúng ta không sử dụng nó, vì quá phức tạp, dùng một ví dụ đơn giản hơn, HOC chích thêm giá trị <code class=\"language-text\">counter</code> và <code class=\"language-text\">callback</code> để tăng giảm giá trị.</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Subtract</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"utility-types\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InjectedCounterProps</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onDecrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MakeCounterState</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> makeCounter <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">InjectedCounterProps</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(\n  Component: React.ComponentType</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n) =>\n  class MakeCounter extends React.Component&lt;\n    Subtract&lt;P, InjectedCounterProps>,\n    MakeCounterState\n  > </span><span class=\"token punctuation\">{</span>\n    state<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">MakeCounterState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Component</span>\n          <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">}</span>\n          onIncrement<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">increment</span><span class=\"token punctuation\">}</span>\n          onDecrement<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">decrement</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token plain-text\">;</span></code></pre>\n<p>Một vài điểm khác nhau</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InjectedCounterProps</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onDecrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Khai báo một interface để chỉ định những prop nào sẽ được <em>chích</em>, đồng thời export luôn để component nào dùng HOC có thể lấy xài.</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> makeCounter<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">InjectedCounterProps</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./makeCounter\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CounterProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">InjectedCounterProps</span> <span class=\"token punctuation\">{</span>\n  style<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">CSSProperties</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CounterProps</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">onDecrement</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> - </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">onIncrement</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> + </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">makeCounter</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Counter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">InjectedCounterProps</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(Component: React.ComponentType</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">)</span></code></pre>\n<p>Một lần nữa chúng ta dùng một <code class=\"language-text\">generic</code>, nhưng lần này để đảm bảo component sử dụng HOC có bao gồm các prop đã được chích, nếu không thì báo lỗi.</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MakeCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token operator\">&lt;</span>\n  <span class=\"token maybe-class-name\">Subtract</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">InjectedCounterProps</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">MakeCounterState</span>\n<span class=\"token operator\">></span></code></pre>\n<p>Component được trả về từ HOC sẽ sử dụng <a href=\"https://github.com/piotrwitek/utility-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Subtract</code></a>, nó sẽ tách hết những prop đã chích thêm, nghĩa là nếu ai đó set lại từ kết quả trả về từ HOC, nó sẽ lỗi</p>\n<p><img src=\"https://miro.medium.com/max/451/1*xTKe3DWJdC7nAVQnM4bvbg.png\"></p>\n<h2 id=\"enhance--inject\"><a href=\"#enhance--inject\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enhance + Inject</h2>\n<p>Kết hợp cả 2 cách làm này lại, chúng ta sẽ có một component counter cho phép đưa giá trị minimum và maximum</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InjectedCounterProps</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onDecrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MakeCounterProps</span> <span class=\"token punctuation\">{</span>\n  minValue<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  maxValue<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MakeCounterState</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> makeCounter <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">InjectedCounterProps</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(\n  Component: React.ComponentType</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n) =>\n  class MakeCounter extends React.Component&lt;\n    Subtract&lt;P, InjectedCounterProps> &amp; MakeCounterProps,\n    MakeCounterState\n  > </span><span class=\"token punctuation\">{</span>\n    state<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">MakeCounterState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span>\n          prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">maxValue</span>\n            <span class=\"token operator\">?</span> prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span>\n            <span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span>\n          prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">minValue</span>\n            <span class=\"token operator\">?</span> prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span>\n            <span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> minValue<span class=\"token punctuation\">,</span> maxValue<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Component</span>\n          <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span>props <span class=\"token keyword\">as</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">}</span>\n          onIncrement<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">increment</span><span class=\"token punctuation\">}</span>\n          onDecrement<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">decrement</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token plain-text\">;</span></code></pre>\n<p><code class=\"language-text\">Subtract</code> được sử dụng để kết hợp cả những prop của chính component và prop của HOC</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token maybe-class-name\">Subtract</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">InjectedCounterProps</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token maybe-class-name\">MakeCounterProps</span></code></pre>\n<p>Ngoài ra không còn gì thật sự khác nhau giữa 2 cách làm này cần phải nói thêm.</p>\n<p><a href=\"https://medium.com/@jrwebdev/react-higher-order-component-patterns-in-typescript-42278f7590fb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@jrwebdev/react-higher-order-component-patterns-in-typescript-42278f7590fb</a></p>\n"}},{"node":{"title":"Phương pháp test React Component","path":"/phuong-phap-test-react-component/","date":"9. January 2020","timeToRead":11,"desc":"Bài viết được dịch từ tài liệu chính thức của React","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-c%E1%BB%A5-th%E1%BB%83-setup--teardown\">Cài đặt cụ thể {#setup--teardown}</a></li>\n<li><a href=\"#act-act\"><code class=\"language-text\">act()</code> {#act}</a></li>\n<li><a href=\"#rendering-rendering\">Rendering {#rendering}</a></li>\n<li><a href=\"#fetch-d%E1%BB%AF-li%E1%BB%87u-data-fetching\">Fetch dữ liệu {#data-fetching}</a></li>\n<li><a href=\"#gi%E1%BA%A3-l%E1%BA%ADp-c%C3%A1c-module-mocking-modules\">Giả lập các module {#mocking-modules}</a></li>\n<li><a href=\"#event-events\">Event {#events}</a></li>\n<li><a href=\"#timer-timers\">Timer {#timers}</a></li>\n<li><a href=\"#snapshot-test-snapshot-testing\">Snapshot Test {#snapshot-testing}</a></li>\n<li><a href=\"#multiple-renderer-multiple-renderers\">Multiple Renderer {#multiple-renderers}</a></li>\n<li><a href=\"#c%C3%B2n-thi%E1%BA%BFu-g%C3%AC-%C4%91%C3%B3-something-missing\">Còn thiếu gì đó? {#something-missing}</a></li>\n</ul>\n<!-- /TOC -->\n<p>Một vài cách viết test phổ biến cho component React.</p>\n<blockquote>\n<p>Lưu ý:</p>\n<p>Trang này mặc định bạn đang dùng <a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jest</a> làm test runner. Nếu dùng một test runner khác, bạn cần thay đổi API cho phù hợp, giải pháp sẽ gần như nhau. Đọc thêm chi tiết cách cài đặt môi trường test ở <a href=\"/docs/testing-environments.html\">Môi trường Test</a>.</p>\n</blockquote>\n<p>Trên trang này, chúng tôi sẽ tập chung vào function component. Tuy nhiên, cách để tiếp cận test không phụ thuộc vào phần hiện thực cụ thể, nó cũng sẽ làm việc tốt với class component.</p>\n<ul>\n<li><a href=\"#setup--teardown\">Cài đặt cụ thể</a></li>\n<li><a href=\"#act\"><code class=\"language-text\">act()</code></a></li>\n<li><a href=\"#rendering\">Rendering</a></li>\n<li><a href=\"#data-fetching\">Data Fetching</a></li>\n<li><a href=\"#mocking-modules\">Mocking Modules</a></li>\n<li><a href=\"#events\">Events</a></li>\n<li><a href=\"#timers\">Timers</a></li>\n<li><a href=\"#snapshot-testing\">Snapshot Testing</a></li>\n<li><a href=\"#multiple-renderers\">Multiple Renderers</a></li>\n<li><a href=\"#something-missing\">Something Missing?</a></li>\n</ul>\n<hr>\n<h3 id=\"cài-đặt-cụ-thể-setup--teardown\"><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-c%E1%BB%A5-th%E1%BB%83-setup--teardown\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cài đặt cụ thể {#setup--teardown}</h3>\n<p>Trên mỗi test, chúng ta thường muốn render React tree của chúng ta thành DOM element và chèn nó vào <code class=\"language-text\">document</code>. Chỉ như thế chúng ta mới nhận được các sự kiện trên DOM. Khi kết thúc một test, chúng ta muốn \"dọn dẹp\" và <em>gỡ bỏ</em> cây này khỏi DOM.</p>\n<p>Một cách phổ biến để làm nó là sử dụng bộ đôi <code class=\"language-text\">beforeEach</code> và <code class=\"language-text\">afterEach</code>, để chúng luôn chạy một cách độc lập và không ảnh hưởng đến test khác:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// cài đặt một DOM element như là target cho render</span>\n  container <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// dọn dẹp lúc thoát</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Bạn có thể sử dụng một cách khác, nhưng hãy nhớ chúng ta muốn chạy việc dọn dẹp ngay cả khi test <em>fail</em>. Nếu không, test có thể trở nên \"bất ổn\", và một test có thể ảnh hưởng đến hoạt động của test khác. Như vậy sẽ rất khó để debug.</p>\n<hr>\n<h3 id=\"act-act\"><a href=\"#act-act\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">act()</code> {#act}</h3>\n<p>Khi viết UI test, công việc như render, sự kiện từ user, hoặc fetch dữ liệu có thể được xem như một \"đơn vị\" tương tác với giao diện người dùng. React cung cấp một hàm trợ giúp <code class=\"language-text\">act()</code> để đảm bảo tất cả mọi cập nhập liên quan đến \"đơn vị\" đã được thực thi và áp dụng đến DOM trước khi chúng ta xác nhận kết quả:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// render component</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// xác nhận kết quả</span></code></pre>\n<p>Nó giúp test chạy giống nhất với những gì user nhận được khi sử dụng ứng dụng. Tất cả những ví dụ bên dưới sử dụng <code class=\"language-text\">act()</code> để đảm bảo điều này.</p>\n<p>Bạn có thể thấy sử dụng <code class=\"language-text\">act()</code> trực tiếp rất rườm rà. Để tránh rườm rà, bạn có thể sử dụng một thư viện như <a href=\"https://testing-library.com/react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Testing Library</a>, các hàm hỗ trợ đã được wrap lại sẵn trong <code class=\"language-text\">act()</code>.</p>\n<blockquote>\n<p>Lưu ý:</p>\n<p>Tên <code class=\"language-text\">act</code> có nguồn gốc từ cách làm <a href=\"http://wiki.c2.com/?ArrangeActAssert\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Arrange-Act-Assert</a>.</p>\n</blockquote>\n<hr>\n<h3 id=\"rendering-rendering\"><a href=\"#rendering-rendering\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Rendering {#rendering}</h3>\n<p>Thường thì, chúng ta muốn test xem một component render đúng hay không với các prop nhận được. Xem xét một component đơn giản sẽ render một thông tin dựa vào prop:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// hello.js</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Hello</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hey, stranger</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta có thể viết test cho component:</p>\n<pre class=\"language-jsx{24-27}\"><code class=\"language-jsx{24-27}\">// hello.test.js\n\nimport React from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { act } from \"react-dom/test-utils\";\n\nimport Hello from \"./hello\";\n\nlet container = null;\nbeforeEach(() => {\n  // cài đặt một DOM element như là target cho render\n  container = document.createElement(\"div\");\n  document.body.appendChild(container);\n});\n\nafterEach(() => {\n  // dọn dẹp lúc thoát\n  unmountComponentAtNode(container);\n  container.remove();\n  container = null;\n});\n\nit(\"renders with or without a name\", () => {\n  act(() => {\n    render(<Hello />, container);\n  });\n  expect(container.textContent).toBe(\"Hey, stranger\");\n\n  act(() => {\n    render(<Hello name=\"Jenny\" />, container);\n  });\n  expect(container.textContent).toBe(\"Hello, Jenny!\");\n\n  act(() => {\n    render(<Hello name=\"Margaret\" />, container);\n  });\n  expect(container.textContent).toBe(\"Hello, Margaret!\");\n});</code></pre>\n<hr>\n<h3 id=\"fetch-dữ-liệu-data-fetching\"><a href=\"#fetch-d%E1%BB%AF-li%E1%BB%87u-data-fetching\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Fetch dữ liệu {#data-fetching}</h3>\n<p>Thay vì gọi APIs thật trong test, chúng ta có thể giả lập các request này bằng dữ liệu giả. Giả lập dữ liệu với dữ liệu \"fake\" để tránh ảnh hưởng đến test khi backend không sử dụng được, và để nó chạy nhanh hơn. Lưu ý: bạn có thể muốn nó chạy danh sách các test con sử dụng framework <a href=\"/docs/testing-environments.html#end-to-end-tests-aka-e2e-tests\">\"end-to-end\"</a> để xem toàn bộ ứng dụng có làm việc với nhau không.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// user.js</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">User</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">,</span> setUser<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchUserData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchUserData</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"loading...\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>details</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>summary</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>summary</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">age</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> years old\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      lives in </span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">address</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>details</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Bạn có thể viết test cho nó:</p>\n<pre class=\"language-jsx{23-33,44-45}\"><code class=\"language-jsx{23-33,44-45}\">// user.test.js\n\nimport React from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { act } from \"react-dom/test-utils\";\nimport User from \"./user\";\n\nlet container = null;\nbeforeEach(() => {\n  // cài đặt một DOM element như là target cho render\n  container = document.createElement(\"div\");\n  document.body.appendChild(container);\n});\n\nafterEach(() => {\n  // dọn dẹp lúc thoát\n  unmountComponentAtNode(container);\n  container.remove();\n  container = null;\n});\n\nit(\"renders user data\", async () => {\n  const fakeUser = {\n    name: \"Joni Baez\",\n    age: \"32\",\n    address: \"123, Charming Avenue\"\n  };\n\n  jest.spyOn(global, \"fetch\").mockImplementation(() =>\n    Promise.resolve({\n      json: () => Promise.resolve(fakeUser)\n    })\n  );\n\n  // sử dụng một phiên bản async để áp dụng resolved promise\n  await act(async () => {\n    render(<User id=\"123\" />, container);\n  });\n\n  expect(container.querySelector(\"summary\").textContent).toBe(fakeUser.name);\n  expect(container.querySelector(\"strong\").textContent).toBe(fakeUser.age);\n  expect(container.textContent).toContain(fakeUser.address);\n\n  // xóa giả lập để đảm bảo test chạy tách biệt\n  global.fetch.mockRestore();\n});</code></pre>\n<hr>\n<h3 id=\"giả-lập-các-module-mocking-modules\"><a href=\"#gi%E1%BA%A3-l%E1%BA%ADp-c%C3%A1c-module-mocking-modules\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giả lập các module {#mocking-modules}</h3>\n<p>Một vài module không làm việc tốt trong môi trường test, hoặc không cần thiết cho test đó. Giả lập các module này bằng dummy để dễ dàng test hơn phần code của chúng ta.</p>\n<p>Component <code class=\"language-text\">Contact</code> có nhúng một component third-party <code class=\"language-text\">GoogleMap</code>:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// map.js</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">LoadScript</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">GoogleMap</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-google-maps\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token known-class-name class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadScript</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script-loader<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">googleMapsApiKey</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>YOUR_API_KEY<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GoogleMap</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example-map<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">center</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">center</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">LoadScript</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// contact.js</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token known-class-name class-name\">Map</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./map\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Contact</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>address</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Contact </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> via</span><span class=\"token punctuation\">{</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"mailto:\"</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span><span class=\"token property-access\">email</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          email\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        or on their </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>site<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">site</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          website\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">.\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>address</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span></span> <span class=\"token attr-name\">center</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">center</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu không muốn load component <code class=\"language-text\">GoogleMap</code> trong test của chúng ta, giả lập bằng một dummy component và chạy test:</p>\n<pre class=\"language-jsx{10-18}\"><code class=\"language-jsx{10-18}\">// contact.test.js\n\nimport React from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { act } from \"react-dom/test-utils\";\n\nimport Contact from \"./contact\";\nimport MockedMap from \"./map\";\n\njest.mock(\"./map\", () => {\n  return function DummyMap(props) {\n    return (\n      <div data-testid=\"map\">\n        {props.center.lat}:{props.center.long}\n      </div>\n    );\n  };\n});\n\nlet container = null;\nbeforeEach(() => {\n  // cài đặt một DOM element như là target cho render\n  container = document.createElement(\"div\");\n  document.body.appendChild(container);\n});\n\nafterEach(() => {\n  // dọn dẹp lúc thoát\n  unmountComponentAtNode(container);\n  container.remove();\n  container = null;\n});\n\nit(\"should render contact information\", () => {\n  const center = { lat: 0, long: 0 };\n  act(() => {\n    render(\n      <Contact\n        name=\"Joni Baez\"\n        email=\"test@example.com\"\n        site=\"http://test.com\"\n        center={center}\n      />,\n      container\n    );\n  });\n\n  expect(\n    container.querySelector(\"[data-testid='email']\").getAttribute(\"href\")\n  ).toEqual(\"mailto:test@example.com\");\n\n  expect(\n    container.querySelector('[data-testid=\"site\"]').getAttribute(\"href\")\n  ).toEqual(\"http://test.com\");\n\n  expect(container.querySelector('[data-testid=\"map\"]').textContent).toEqual(\n    \"0:0\"\n  );\n});</code></pre>\n<hr>\n<h3 id=\"event-events\"><a href=\"#event-events\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Event {#events}</h3>\n<p>Chúng tôi khuyến nghị dispatch một event DOM thật trên DOM element, và đặt phần xác nhận kết quả. Xem một component <code class=\"language-text\">Toggle</code>:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// toggle.js</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Toggle</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousState</span> <span class=\"token arrow operator\">=></span> <span class=\"token operator\">!</span>previousState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        props<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>state <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"Turn off\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Turn on\"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta có thể viết test cho nó:</p>\n<pre class=\"language-jsx{13-14,35,43}\"><code class=\"language-jsx{13-14,35,43}\">// toggle.test.js\n\nimport React from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { act } from \"react-dom/test-utils\";\n\nimport Toggle from \"./toggle\";\n\nlet container = null;\nbeforeEach(() => {\n  // cài đặt một DOM element như là target cho render\n  container = document.createElement(\"div\");\n  // container *phải* được chèn vào document để event chạy đúng.\n  document.body.appendChild(container);\n});\n\nafterEach(() => {\n  // dọn dẹp lúc thoát\n  unmountComponentAtNode(container);\n  container.remove();\n  container = null;\n});\n\nit(\"changes value when clicked\", () => {\n  const onChange = jest.fn();\n  act(() => {\n    render(<Toggle onChange={onChange} />, container);\n  });\n\n  // lấy toàn bộ các element, và trigger một vài sự kiện click\n  const button = document.querySelector(\"[data-testid=toggle]\");\n  expect(button.innerHTML).toBe(\"Turn on\");\n\n  act(() => {\n    button.dispatchEvent(new MouseEvent(\"click\", { bubbles: true }));\n  });\n\n  expect(onChange).toHaveBeenCalledTimes(1);\n  expect(button.innerHTML).toBe(\"Turn off\");\n\n  act(() => {\n    for (let i = 0; i < 5; i++) {\n      button.dispatchEvent(new MouseEvent(\"click\", { bubbles: true }));\n    }\n  });\n\n  expect(onChange).toHaveBeenCalledTimes(6);\n  expect(button.innerHTML).toBe(\"Turn on\");\n});</code></pre>\n<p>Các event DOM và thuộc tính được mô tả trong <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a>. Lưu ý bạn phải truyền vào <code class=\"language-text\">{ bubbles: true }</code> trên từng event bạn tạo cho nó để đến React listener vì React tự động truyền các event này đến document.</p>\n<blockquote>\n<p>Lưu ý:</p>\n<p>React Testing Library cung cấp <a href=\"https://testing-library.com/docs/dom-testing-library/api-events\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">một số hàm hỗ trợ</a> cho việc bắn sự kiện.</p>\n</blockquote>\n<hr>\n<h3 id=\"timer-timers\"><a href=\"#timer-timers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Timer {#timers}</h3>\n<p>Code có thể sử dụng hàm liên quan thời gian như <code class=\"language-text\">setTimeout</code> để lên lịch các công việc sẽ thực hiện trong tương lai. Trong ví dụ, một cửa sổ nhiều lựa chọn đợi cho đến khi có lựa chọn, nếu sau 5 giây sẽ không thể chọn:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// card.js</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Card</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> timeoutID <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      props<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onSelect</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeoutID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">onSelect</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">choice</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n      <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>choice<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">data-testid</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>choice<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> props<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onSelect</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>choice<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta có thể viết test cho component bằng cách dùng <a href=\"https://jestjs.io/docs/en/timer-mocks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jest's timer mocks</a> và test sự khác nhau của state.</p>\n<pre class=\"language-jsx{7,31,37,49,59}\"><code class=\"language-jsx{7,31,37,49,59}\">// card.test.js\n\nimport React from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { act } from \"react-dom/test-utils\";\n\njest.useFakeTimers();\n\nlet container = null;\nbeforeEach(() => {\n  // cài đặt một DOM element như là target cho render\n  container = document.createElement(\"div\");\n  document.body.appendChild(container);\n});\n\nafterEach(() => {\n  // dọn dẹp lúc thoát\n  unmountComponentAtNode(container);\n  container.remove();\n  container = null;\n});\n\nit(\"should select null after timing out\", () => {\n  const onSelect = jest.fn();\n  act(() => {\n    render(<Card onSelect={onSelect} />, container);\n  });\n\n  // chạy đến lúc 100ms\n  act(() => {\n    jest.advanceTimersByTime(100);\n  });\n  expect(onSelect).not.toHaveBeenCalled();\n\n  // và chạy đến lúc 5 giây\n  act(() => {\n    jest.advanceTimersByTime(5000);\n  });\n  expect(onSelect).toHaveBeenCalledWith(null);\n});\n\nit(\"should cleanup on being removed\", () => {\n  const onSelect = jest.fn();\n  act(() => {\n    render(<Card onSelect={onSelect} />, container);\n  });\n\n  act(() => {\n    jest.advanceTimersByTime(100);\n  });\n  expect(onSelect).not.toHaveBeenCalled();\n\n  // unmount app\n  act(() => {\n    render(null, container);\n  });\n\n  act(() => {\n    jest.advanceTimersByTime(5000);\n  });\n  expect(onSelect).not.toHaveBeenCalled();\n});\n\nit(\"should accept selections\", () => {\n  const onSelect = jest.fn();\n  act(() => {\n    render(<Card onSelect={onSelect} />, container);\n  });\n\n  act(() => {\n    container\n      .querySelector(\"[data-testid='2']\")\n      .dispatchEvent(new MouseEvent(\"click\", { bubbles: true }));\n  });\n\n  expect(onSelect).toHaveBeenCalledWith(2);\n});</code></pre>\n<p>Bạn có thể giả lập thời gian trong một test. Ở trên, chúng ta bật lên bằng cách gọi <code class=\"language-text\">jest.useFakeTimers()</code>. Ưu điểm chính của chúng cho ta là test không cần thực sự đợi đến 5 giây để chạy, và bạn cũng không cần thay đổi component để phục vụ việc test.</p>\n<hr>\n<h3 id=\"snapshot-test-snapshot-testing\"><a href=\"#snapshot-test-snapshot-testing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Snapshot Test {#snapshot-testing}</h3>\n<p>Framework như Jest cho chúng ta lưu \"ảnh\" với <a href=\"https://jestjs.io/docs/en/snapshot-testing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">toMatchSnapshot</code> / <code class=\"language-text\">toMatchInlineSnapshot</code></a>. Với chúng, bạn có thể \"lưu\" một kết quả render và đảm bảo một thay đổi có thể làm thay đổi của kết quả snapshot.</p>\n<p>Trong ví dụ, chúng ta render một component và định dạng HTML đã render với thư viện <a href=\"https://www.npmjs.com/package/pretty\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">pretty</code></a>, trước khi lưu nó như một snapshot inline:</p>\n<pre class=\"language-jsx{29-31}\"><code class=\"language-jsx{29-31}\">// hello.test.js, again\n\nimport React from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { act } from \"react-dom/test-utils\";\nimport pretty from \"pretty\";\n\nimport Hello from \"./hello\";\n\nlet container = null;\nbeforeEach(() => {\n  // cài đặt một DOM element như là target cho render\n  container = document.createElement(\"div\");\n  document.body.appendChild(container);\n});\n\nafterEach(() => {\n  // dọn dẹp lúc thoát\n  unmountComponentAtNode(container);\n  container.remove();\n  container = null;\n});\n\nit(\"should render a greeting\", () => {\n  act(() => {\n    render(<Hello />, container);\n  });\n\n  expect(\n    pretty(container.innerHTML)\n  ).toMatchInlineSnapshot(); /* ... được tự động điền bởi jest ... */\n\n  act(() => {\n    render(<Hello name=\"Jenny\" />, container);\n  });\n\n  expect(\n    pretty(container.innerHTML)\n  ).toMatchInlineSnapshot(); /* ... được tự động điền bởi jest ... */\n\n  act(() => {\n    render(<Hello name=\"Margaret\" />, container);\n  });\n\n  expect(\n    pretty(container.innerHTML)\n  ).toMatchInlineSnapshot(); /* ... được tự động điền bởi jest ... */\n});</code></pre>\n<p>Thường sẽ tốt hơn nếu chỉ rõ kết quả muốn nhận được thay vì snapshot. Những kiểu test này bao gồm phần hiện thực chi tiết để chúng dễ dàng bị fail. Chọn <a href=\"#mocking-modules\">giả lập một vài component con</a> có thể giúp giảm kích thước snapshot và giữ chúng dễ độc lúc review code.</p>\n<hr>\n<h3 id=\"multiple-renderer-multiple-renderers\"><a href=\"#multiple-renderer-multiple-renderers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Multiple Renderer {#multiple-renderers}</h3>\n<p>Trong những tình huống hiếm, bạn có thể chạy một test trên một component sử dụng multiple renderer. Lấy ví dụ, bạn có thể chạy snapshot test trên một component với <code class=\"language-text\">react-test-renderer</code>, bên trong đó nó dùng <code class=\"language-text\">ReactDOM.render</code>trong một child component để render một vài nội dung. Tình huống đó, bạn có thể wrap phần cập nhập với <code class=\"language-text\">act()</code> ứng với từng renderer</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token keyword module\">as</span> domAct <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token keyword module\">as</span> testAct<span class=\"token punctuation\">,</span> create <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-test-renderer\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">let</span> root<span class=\"token punctuation\">;</span>\n<span class=\"token function\">domAct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">testAct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    root <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<hr>\n<h3 id=\"còn-thiếu-gì-đó-something-missing\"><a href=\"#c%C3%B2n-thi%E1%BA%BFu-g%C3%AC-%C4%91%C3%B3-something-missing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Còn thiếu gì đó? {#something-missing}</h3>\n<p>Nếu các tình huống hay gặp không được đề cập ở đây, có thể liên hệ với chúng tôi qua <a href=\"https://github.com/reactjs/reactjs.org/issues\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">issue tracker</a> cho toàn bộ tài liệu của website</p>\n"}},{"node":{"title":"Sử dụng useReducer và useContext để làm global state","path":"/su-dung-use-reducer-va-use-context-de-lam-global-state/","date":"8. January 2020","timeToRead":3,"desc":"","content":"<p>Thông thường chúng ta sẽ dùng một <em>nhà kho</em> để chứa dữ liệu <code class=\"language-text\">state</code> như <em>Redux</em>, một component container bọc ở nút đầu tiên trong app, các component con bên trong có thể truy xuất và cập nhập các dữ liệu một cách dễ dàng</p>\n<p>Với các API mới được React bổ sung là <code class=\"language-text\">useState</code>, <code class=\"language-text\">createContext</code>, <code class=\"language-text\">useContext</code> chúng ta có <em>thêm một lựa chọn</em> để làm <em>nhà kho</em> mà ko cần dùng đến Redux</p>\n<p>Ví dụ chúng ta có 3 dữ liệu như bên dưới</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> teamMembersNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mary\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jason\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"David\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>sharing<span class=\"token punctuation\">,</span> setSharing<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>help<span class=\"token punctuation\">,</span> setHelp<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>pairing<span class=\"token punctuation\">,</span> setPairing<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span>teamMembersNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Câu hỏi là làm sao chúng ta đưa dữ liệu vào <em>nhà kho</em>. Chúng ta sẽ dùng API <code class=\"language-text\">createContext</code> (tạo em cái kho)</p>\n<p>Khi sử dụng <code class=\"language-text\">React.createContext</code> chúng ta sẽ nhận về 2 component là <code class=\"language-text\">Provider</code> (anh tung) và <code class=\"language-text\">Consumer</code> (em hứng).</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./src/utils/store.js</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">StoreContext</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// các em đã vào nhà kho</span>\n  <span class=\"token keyword\">const</span> teamMembersNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mary\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jason\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"David\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>sharing<span class=\"token punctuation\">,</span> setSharing<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>help<span class=\"token punctuation\">,</span> setHelp<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>pairing<span class=\"token punctuation\">,</span> setPairing<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span>teamMembersNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    sharing<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>sharing<span class=\"token punctuation\">,</span> setSharing<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    help<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>help<span class=\"token punctuation\">,</span> setHelp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    pairing<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>pairing<span class=\"token punctuation\">,</span> setPairing<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StoreContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StoreContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Để các component bên trong <code class=\"language-text\">&lt;App/&gt;</code> đều dùng được <code class=\"language-text\">&lt;Consumer /&gt;</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./index.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">ReactDOM</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">App</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./App\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">StoreProvider</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./utils/store\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token maybe-class-name\">ReactDOM</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StoreProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StoreProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Với bất kỳ component nào muốn sử dụng, để lấy được dữ liệu trong store, chúng ta sử dụng <code class=\"language-text\">useContext</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">StoreContext</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../utils/store\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">SomeComponent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// dữ liệu dùng chung</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> sharing <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useContext</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">StoreContext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Hoặc nếu thích dùng cách viết render props, có thể dùng luôn component <code class=\"language-text\">&lt;Consumer/&gt;</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StoreContext.Consumer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">InputComponent</span></span> <span class=\"token attr-name\">store</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StoreContext.Consumer</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"ứng-dụng-làm-useauth\"><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng-l%C3%A0m-useauth\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ứng dụng làm <code class=\"language-text\">useAuth</code></h2>\n<p>Một trong những ví dụ dễ thấy, phần dữ liệu nên đưa vào <em>nhà kho chung</em> là phần thông tin user đang đăng nhập</p>\n<p>Chúng ta sẽ cần 3 phần</p>\n<ol>\n<li>Khai báo một nhà kho bằng <code class=\"language-text\">createContext</code></li>\n<li>Bộ <code class=\"language-text\">reducer</code> làm nhiệm vụ cập nhập xử lý <code class=\"language-text\">state</code></li>\n<li>Một hook tùy biến <code class=\"language-text\">useAuth</code> cung cấp các API cần thiết để tương tác với <em>nhà kho chung</em> đã khai báo</li>\n</ol>\n<p>1) <strong>AuthProvider.js</strong> Khai báo nhà kho (bản rút gọn)</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// AuthProvider.js</span>\n<span class=\"token keyword module\">import</span> authReducer <span class=\"token keyword module\">from</span> <span class=\"token string\">\"authReducer\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">AuthContext</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">AuthProvider</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// khởi tạo</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>authReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AuthContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AuthContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<ol start=\"2\">\n<li><strong>authReducer.js</strong> (bản rút gọn)</li>\n</ol>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// authReducer.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">authReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"login\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> authResult<span class=\"token punctuation\">,</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> expiresAt <span class=\"token operator\">=</span> authResult<span class=\"token punctuation\">.</span><span class=\"token property-access\">expiresIn</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"expires_at\"</span><span class=\"token punctuation\">,</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>expiresAt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">,</span> expiresAt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"logout\"</span><span class=\"token operator\">:</span>\n      <span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"expires_at\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> expiresAt<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ol start=\"3\">\n<li>Một hook tùy biến <strong><code class=\"language-text\">useAuth</code></strong></li>\n</ol>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// useAuth.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">AuthProvider</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"AuthProvider\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useAuth</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">,</span> dispatch <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">userContext</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">AuthContext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">login</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// làm gì đó ở đây</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// làm gì đó ở đây</span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"logout\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...  còn một số thức khác</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isAuthenticated</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">expiresAt</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">expiresAt</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...  còn một số thức khác</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        isAuthenticated<span class=\"token punctuation\">,</span>\n        user<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span><span class=\"token punctuation\">,</span>\n        userId<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span> <span class=\"token operator\">?</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span> <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n        login<span class=\"token punctuation\">,</span>\n        logout<span class=\"token punctuation\">,</span>\n        handleAuthentication\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Với cách làm này, bất kỳ component nào sử dụng <code class=\"language-text\">useAuth</code> đều sẽ truy xuất đến một kho dữ liệu <em>chung</em></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> useAuth <span class=\"token keyword module\">from</span> <span class=\"token string\">\"useAuth\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">MyCom</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* quá trời thứ linh tinh trả về */</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useAuth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><a href=\"https://swizec.com/blog/usereducer-usecontext-for-easy-global-state-without-libraries/swizec/9182\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">useReducer + useContext for easy global state without libraries</a></p>\n<p><a href=\"https://dev.to/nazmifeeroz/using-usecontext-and-usestate-hooks-as-a-store-mnm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using useContext and useState hooks as a store</a></p>\n"}},{"node":{"title":"Khi nào nên sử dụng useLayoutEffect thay vì useEffect","path":"/khi-nao-nen-su-dung-use-layout-effect-thay-vi-use-effect/","date":"2. January 2020","timeToRead":2,"desc":"2 React Hook làm nhiệm vụ khá giống nhau là useEffect và useLayoutEffect bạn đã biết cách sử dụng thế nào cho đúng","content":"<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// thực hiện side effect</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token comment\">/* dọn rác */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>khai báo các giá trị mà nó phụ thuộc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// thực hiện side effect</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token comment\">/* dọn rác */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>thực hiện side effect<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu ko có khác nhau thì React team sẽ không tạo ra 2 thằng, hiển nhiên?. (Hầu như có thể dụng <code class=\"language-text\">useEffect</code> trong mọi tình huống)</p>\n<p>Khác nhau là ở <strong>THỜI GIAN THỰC HIỆN</strong></p>\n<p><code class=\"language-text\">useEffect</code> chạy <strong>bất tuần tự</strong> và đợi <strong>sau</strong> khi việc component đã xuất hiện trên màn hình (sau khi trình duyệt <em>paint</em>)</p>\n<p>Quá trình cụ thế là thế này</p>\n<ol>\n<li>Component gọi đến <code class=\"language-text\">render</code></li>\n<li>Màn hình cập nhập lại UI mới</li>\n<li><strong>SAU ĐÓ</strong> chạy <code class=\"language-text\">useEffect</code></li>\n</ol>\n<p><code class=\"language-text\">useLayoutEffect</code>, ngược lại, chạy <strong>tuần tự</strong> sau khi render nhưng là <strong>trước</strong> khi UI cập nhập</p>\n<p>Quá trình</p>\n<ol>\n<li>Component gọi đến <code class=\"language-text\">render</code></li>\n<li><code class=\"language-text\">useLayoutEffect</code> được gọi, đợi chạy xong mới đi tiếp</li>\n<li>Màn hình cập nhập lại UI mới</li>\n</ol>\n<p>Trong 99% các trường hợp, sử dụng <code class=\"language-text\">useEffect</code>  sẽ là cách tốt nhất, vì những effect của chúng ta sẽ cần đồng bộ với prop, state, không cần xảy ra <strong>NGAY LẬP TỨC</strong> và không ảnh hưởng đến kết quả cuối cùng của UI.</p>\n<p>Ví dụ như fetch dữ liệu sẽ không cần có kết quả ngay lập tức, hay đặt để các event handler</p>\n<p>Nếu thấy UI bị <code class=\"language-text\">flickering</code> (giống như xuất hiện sọc sọc trên màn hình tivi) khi cập nhập, nguyên nhân do nó đã render khi <em>vừa cos</em> state, sau đó lại re-render lại với state nhận được sau cùng. Đó là lúc bạn dùng <code class=\"language-text\">useLayoutEffect</code></p>\n<p>Ví dụ nhé, bạn cho user click để thay đổi state <code class=\"language-text\">value</code>, nó sẽ re-render component, sau đó effect chạy, nó lại set giá trị <code class=\"language-text\">value</code> thành một con số ngẫu nhiên => lại re-render component.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  useState<span class=\"token punctuation\">,</span>\n  useLayoutEffect\n<span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">ReactDOM</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">BlinkyRender</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'render'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      value: </span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span> <span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token maybe-class-name\">ReactDOM</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BlinkyRender</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Với cách dùng <code class=\"language-text\">useLayoutEffect</code> chúng ta chỉ cập nhập UI đúng <strong>1</strong> lần, trong khi component gọi render <strong>2</strong> lần.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://daveceddia.com/useeffect-vs-uselayouteffect/\">📜 When to useLayoutEffect Instead of useEffect</a></p>\n"}},{"node":{"title":"Chỉ dẫn viết Redux sao cho chuẩn","path":"/chi-dan-viet-redux-sao-cho-chuan/","date":"1. January 2020","timeToRead":12,"desc":"Đây không phải là quan điểm cá nhân, bài viết được dịch thuật từ tài liệu chính thức của Redux","content":"<!-- TOC -->\n<ul>\n<li>\n<p><a href=\"#a-b%E1%BA%AFt-bu%E1%BB%99c\">A. Bắt buộc</a></p>\n<ul>\n<li><a href=\"#ko-mutate-state\">Ko mutate state</a></li>\n<li><a href=\"#reducer-ko-%C4%91%C6%B0%E1%BB%A3c-c%C3%B3-side-effect\">Reducer ko được có side effect</a></li>\n<li><a href=\"#kh%C3%B4ng-%C4%91%C6%B0a-c%C3%A1c-gi%C3%A1-tr%E1%BB%8B-non-serialize-v%C3%A0o-trong-action-v%C3%A0-state\">Không đưa các giá trị Non-Serialize vào trong action và state</a></li>\n<li><a href=\"#ch%E1%BB%89-m%E1%BB%99t-redux-store-cho-app\">Chỉ một Redux store cho app</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#b-c%E1%BB%B1c-k%E1%BB%B3-khuy%E1%BA%BFn-kh%C3%ADch\">B. Cực kỳ khuyến khích</a></p>\n<ul>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-redux-toolkit-%C4%91%E1%BB%83-vi%E1%BA%BFt-redux-logic\">Sử dụng Redux Toolkit để viết Redux logic</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-immer-%C4%91%E1%BB%83-c%E1%BA%ADp-nh%E1%BA%ADp-gi%C3%A1-tr%E1%BB%8B-store\">Sử dụng Immer để cập nhập giá trị store</a></li>\n<li><a href=\"#c%E1%BA%A5u-tr%C3%BAc-file-v%C3%A0-th%C6%B0-m%E1%BB%A5c\">Cấu trúc file và thư mục</a></li>\n<li><a href=\"#%C4%91%C6%B0a-c%C3%A0ng-nhi%E1%BB%81u-logic-v%C3%A0-trong-reducer-c%C3%A0ng-t%E1%BB%91t\">Đưa càng nhiều logic và trong reducer càng tốt</a></li>\n<li><a href=\"#reducer-c%E1%BA%A7n-n%E1%BA%AFm-r%C3%B5-c%E1%BA%A5u-tr%C3%BAc-c%E1%BB%A7a-state\">Reducer cần nắm rõ cấu trúc của state</a></li>\n<li><a href=\"#%C4%91%E1%BA%B7t-t%C3%AAn-state-d%E1%BB%B1a-tr%C3%AAn-d%E1%BB%AF-li%E1%BB%87u-s%E1%BA%BD-l%C6%B0u\">Đặt tên state dựa trên dữ liệu sẽ lưu</a></li>\n<li><a href=\"#xem-reducer-nh%C6%B0-m%E1%BB%99t-c%E1%BB%97-m%C3%A1y-ch%E1%BB%A9a-v%C3%A0-v%E1%BA%ADn-h%C3%A0nh-state\">Xem reducer như một cỗ máy chứa và vận hành state</a></li>\n<li><a href=\"#%C4%91%C6%A1n-gi%E1%BA%A3n-h%C3%B3a-c%C3%A1c-state-ch%E1%BB%93ng-ch%C3%A9oc%C3%B3-quan-h%E1%BB%87-v%E1%BB%9Bi-nhau\">Đơn giản hóa các state chồng chéo/có quan hệ với nhau</a></li>\n<li><a href=\"#c%C3%A1c-action-n%C3%AAn-t%E1%BB%95-ch%E1%BB%A9c-nh%C6%B0-event-kh%C3%B4ng-ph%E1%BA%A3i-setter\">Các action nên tổ chức như event, không phải setter</a></li>\n<li><a href=\"#vi%E1%BA%BFt-t%C3%AAn-action-c%C3%B3-ngh%C4%A9a\">Viết tên action có nghĩa</a></li>\n<li><a href=\"#tr%C3%A1nh-dispatch-c%C3%A1c-action-m%E1%BB%99t-c%C3%A1ch-tu%E1%BA%A7n-t%E1%BB%B1\">Tránh dispatch các action một cách tuần tự</a></li>\n<li><a href=\"#k%E1%BA%BFt-n%E1%BB%91i-c%C3%A0ng-nhi%E1%BB%81u-component-%C4%91%E1%BB%83-%C4%91%E1%BB%8Dc-d%E1%BB%AF-li%E1%BB%87u-trong-store\">Kết nối càng nhiều component để đọc dữ liệu trong store</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1ch-vi%E1%BA%BFt-t%E1%BA%AFt-cho-mapdispatch-khi-d%C3%B9ng-connect\">Sử dụng cách viết tắt cho <code class=\"language-text\">mapDispatch</code> khi dùng <code class=\"language-text\">connect</code></a></li>\n<li><a href=\"#g%E1%BB%8Di-useselector-nhi%E1%BB%81u-l%E1%BA%A7n-trong-function-component\">Gọi <code class=\"language-text\">useSelector</code> nhiều lần trong function component</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-redux-devtools\">Sử dụng Redux DevTools</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#khuy%E1%BA%BFn-kh%C3%ADch\">Khuyến khích</a></p>\n<ul>\n<li><a href=\"#gi%C3%A1-tr%E1%BB%8B-type-c%E1%BB%A7a-action-n%C3%AAn-l%C3%A0-domaineventname\">Giá trị type của action nên là <code class=\"language-text\">domain/eventName</code></a></li>\n<li><a href=\"#vi%E1%BA%BFt-action-s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1ch-%C4%91%E1%BA%B7t-t%C3%AAn-chu%E1%BA%A9n-c%E1%BB%A7a-flux\">Viết action sử dụng cách đặt tên chuẩn của Flux</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-action-creator\">Sử dụng action creator</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-thunk-cho-c%C3%A1c-logic-async\">Sử dụng Thunk cho các logic async</a></li>\n<li><a href=\"#t%C3%A1ch-c%C3%A1c-logic-ph%E1%BB%A9c-t%E1%BA%A1p-ra-kh%E1%BB%8Fi-component\">Tách các logic phức tạp ra khỏi component</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-selector-function-%C4%91%E1%BB%83-%C4%91%E1%BB%8Dc-d%E1%BB%AF-li%E1%BB%87u-trong-store\">Sử dụng selector function để đọc dữ liệu trong store</a></li>\n<li><a href=\"#tr%C3%A1nh-%C4%91%C6%B0a-state-c%E1%BB%A7a-form-v%C3%A0o-trong-redux\">Tránh đưa state của form vào trong redux</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<p>Tài liệu chính thức hướng dẫn viết redux sao cho ngon-sạch, bao gồm những cách làm được đề nghị, kinh nghiệm thực tế và những cách tiếp cận được khuyến khích.</p>\n<p>Cả phần core của Redux và các tài liệu của Redux không hề là chuẩn mực bắt buộc mọi người tuân thủ, có rất nhiều cách để sử dụng Redux, cũng như có rất nhiều cách làm <em>đúng</em> để giải quyết một vấn đề.</p>\n<h2 id=\"a-bắt-buộc\"><a href=\"#a-b%E1%BA%AFt-bu%E1%BB%99c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A. Bắt buộc</h2>\n<h3 id=\"ko-mutate-state\"><a href=\"#ko-mutate-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ko mutate state</h3>\n<p>Chỉnh sửa state là nguyên nhân gây bug thường thấy trong Redux, như không re-render, time-travel trong Redux DevTools ko hoạt động. Tuyệt đối <strong>KO tự chỉnh sửa giá trị của state</strong>, bao gồm cả trong reducer và bất kỳ chỗ nào trong source code, chỉ được phép <strong>thay thế giá trị của state</strong></p>\n<p>Có thể sử dụng những công cụ như <a href=\"https://github.com/leoasis/redux-immutable-state-invariant\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">redux-immutable-state-invariant</a>, <a href=\"https://immerjs.github.io/immer/docs/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">immer</a> để tránh việc vô tình chỉnh sửa state ngoài ý muốn.</p>\n<h3 id=\"reducer-ko-được-có-side-effect\"><a href=\"#reducer-ko-%C4%91%C6%B0%E1%BB%A3c-c%C3%B3-side-effect\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reducer ko được có side effect</h3>\n<p>Các hàm Reducer chỉ phụ thuộc vào <code class=\"language-text\">state</code> và <code class=\"language-text\">action</code>, chỉ tính toán và trả về giá trị mới dựa vào những tham số này. <strong>Không chạy bất kỳ logic bất đồng bộ nào (AJAX, timeout, promise), các giá trị khởi tạo một cách ngẫu nhiên Date.now, Math.random, thay đổi những giá trị bên ngoài reducer</strong></p>\n<h3 id=\"không-đưa-các-giá-trị-non-serialize-vào-trong-action-và-state\"><a href=\"#kh%C3%B4ng-%C4%91%C6%B0a-c%C3%A1c-gi%C3%A1-tr%E1%BB%8B-non-serialize-v%C3%A0o-trong-action-v%C3%A0-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Không đưa các giá trị Non-Serialize vào trong action và state</h3>\n<p><strong>Tránh dùng các giá trị non-serialize như Promise, Symbol, function, class instance vào trong state hoặc dispatch action.</strong> Điều này còn nhằm đảm bảo các công như Redux DevTool chạy đúng</p>\n<h3 id=\"chỉ-một-redux-store-cho-app\"><a href=\"#ch%E1%BB%89-m%E1%BB%99t-redux-store-cho-app\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chỉ một Redux store cho app</h3>\n<p>Với một ứng dụng, <strong>chỉ được sử dụng một Redux store, sử dụng bởi toàn bộ ứng dụng</strong>, khai báo trong file <code class=\"language-text\">store.js</code></p>\n<p>Cũng không có một chỗ nào trong source được import store trực tiếp. Nó phải được truyền vào <code class=\"language-text\">&lt;Provider/&gt;</code>, hoặc tham chiếu thông qua middleware như Thunk.</p>\n<h2 id=\"b-cực-kỳ-khuyến-khích\"><a href=\"#b-c%E1%BB%B1c-k%E1%BB%B3-khuy%E1%BA%BFn-kh%C3%ADch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>B. Cực kỳ khuyến khích</h2>\n<h3 id=\"sử-dụng-redux-toolkit-để-viết-redux-logic\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-redux-toolkit-%C4%91%E1%BB%83-vi%E1%BA%BFt-redux-logic\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Redux Toolkit để viết Redux logic</h3>\n<p><a href=\"https://redux.js.org/redux-toolkit/overview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redux Toolkit</a> là bộ công cụ chính thức của chúng tôi (Redux team) để phát triển redux một cách hiệu quả, chuẩn để viết logic redux của chúng tôi.</p>\n<p>Nó bao gồm các hàm để làm việc với các trường hợp phổ biến nhất của Redux, bao gồm cài đặt store, khai báo reducer, các thư viện được sử dụng rộng rãi trong Redux như Redux Thunk, Reselect để viết các selector function.</p>\n<h3 id=\"sử-dụng-immer-để-cập-nhập-giá-trị-store\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-immer-%C4%91%E1%BB%83-c%E1%BA%ADp-nh%E1%BA%ADp-gi%C3%A1-tr%E1%BB%8B-store\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Immer để cập nhập giá trị store</h3>\n<p>Viết update cho store đôi khi rất mệt mỏi, có thể sử dụng thêm công cụ hỗ trợ <a href=\"https://immerjs.github.io/immer/docs/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">immerjs</a>.</p>\n<h3 id=\"cấu-trúc-file-và-thư-mục\"><a href=\"#c%E1%BA%A5u-tr%C3%BAc-file-v%C3%A0-th%C6%B0-m%E1%BB%A5c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cấu trúc file và thư mục</h3>\n<p>Về cơ bản Redux <em>không quan tâm cách bạn tổ chức file và thư mục</em>. Tuy nhiên, trong thực tế việc đặt các logic gần nhau giúp việc cập nhập code nhanh hơn.</p>\n<p>Khuyến khích sử dụng cách tiếp cận \"feature folder\" hoặc <a href=\"https://github.com/erikras/ducks-modular-redux\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cách làm ducks</a> (tất cả những logic cho feature nằm trong một file duy nhất)</p>\n<p>Một cấu trúc thư mục cơ bản sẽ gồm</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">-/src\n--/index.tsx\n--/app\n---/store.ts\n---/rootReducer.ts\n---/App.tsx\n--/common\n--/features\n---/todos\n----/todosSlice.ts\n----/Todos.tsx</code></pre>\n<h3 id=\"đưa-càng-nhiều-logic-và-trong-reducer-càng-tốt\"><a href=\"#%C4%91%C6%B0a-c%C3%A0ng-nhi%E1%BB%81u-logic-v%C3%A0-trong-reducer-c%C3%A0ng-t%E1%BB%91t\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đưa càng nhiều logic và trong reducer càng tốt</h3>\n<p>Nếu có thể, cố gắng đưa càng nhiều logic hoặc tính toán để có một state mới vào trong reducer càng tốt, không nên đưa vào chỗ xử lý tiền dữ liệu như các function handler click. Việc này giúp logic dễ test hơn, tránh lỗi.</p>\n<p>Redux không thực sự quan tâm giá trị mới của state được tính toán bên trong reducer hay trong action creation. Ví dụ như Todo App, việc <em>toggle todo</em> sẽ cập nhập lại mảng <code class=\"language-text\">todos</code> trong store. Có thể tính toán mảng <code class=\"language-text\">todos</code> mới ở cả action và reducer</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Click handler:</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onTodoClicked</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">\"todos/toggleTodo\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// tính toán ở Reducer:</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"todos/toggleTodo\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">!==</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">payload</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> todo<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span>todo<span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">payload</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Tính toán ở action creation:</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onTodoClicked</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">id</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newTodos <span class=\"token operator\">=</span> todos<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> todo\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>todo<span class=\"token punctuation\">,</span> id <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'todos/toggleTodo'</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> todos<span class=\"token operator\">:</span> newTodos <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Reducer:</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"todos/toggleTodo\"</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">payload</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">todos</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Khuyến khích làm việc này ở reducer vì những nguyên nhân sau</p>\n<ul>\n<li>Test ở Reducer sẽ dễ hơn vì nó là pure function, chỉ cần gọi <code class=\"language-text\">const result = reducer(testState, action)</code> và đưa vào kết quả bạn expect.</li>\n<li>Thay đổi giá trị state luôn tuân theo quy định, không chỉnh sửa-chỉ thay thế. Rõ ràng là việc này sẽ trực quan hơn trong reducer, những nếu ngoài reducer, chúng ta dễ vô tình chỉnh sửa ngoài ý muốn</li>\n<li>Time-travel debug cho phép chúng ta <strong>undo</strong> một dispatch action, rồi <strong>redo</strong> thậm chí thay thế bằng một action khác. Debug sẽ dễ hơn nếu chúng ta đưa logic đó vào reducer</li>\n<li>Khi áp dụng nguyên tắc này, chúng biết được khi cần thay đổi, và nơi state bị thay đổi chắc chắn là trong reducer chứ không đâu khác.</li>\n</ul>\n<p>Có những ngoại lệ có thể tính toán trước, như khởi tạo một ID, nhưng nên tránh là tốt nhất.</p>\n<h3 id=\"reducer-cần-nắm-rõ-cấu-trúc-của-state\"><a href=\"#reducer-c%E1%BA%A7n-n%E1%BA%AFm-r%C3%B5-c%E1%BA%A5u-tr%C3%BAc-c%E1%BB%A7a-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reducer cần nắm rõ cấu trúc của state</h3>\n<p>Các reducer do bạn viết, khi trả về một giá trị đã tính toán của state, phải viết cụ thể là trả về giá trị gì, tránh sử dụng <em>spread/blind return</em> như sau <code class=\"language-text\">return action.payload</code> (blind return), <code class=\"language-text\">return {...state, ...action.payload}</code> (spread return). Vì như vậy, nó sẽ phụ thuộc giá trị truyền vào lúc dispatch action phải đúng với cấu trúc ban đầu. Nếu vô tình dữ liệu này không đúng cấu trúc sẽ có bug.</p>\n<h3 id=\"đặt-tên-state-dựa-trên-dữ-liệu-sẽ-lưu\"><a href=\"#%C4%91%E1%BA%B7t-t%C3%AAn-state-d%E1%BB%B1a-tr%C3%AAn-d%E1%BB%AF-li%E1%BB%87u-s%E1%BA%BD-l%C6%B0u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đặt tên state dựa trên dữ liệu sẽ lưu</h3>\n<p>Object truyền vào cho <code class=\"language-text\">combineReducers</code> sẽ là tên key trả về trong state. Tránh sử dụng từ <code class=\"language-text\">reducer</code> ,</p>\n<p>Ko nên có một object state như thế này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>usersReducer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> postsReducer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n<p>Nên</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>users<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> posts<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"xem-reducer-như-một-cỗ-máy-chứa-và-vận-hành-state\"><a href=\"#xem-reducer-nh%C6%B0-m%E1%BB%99t-c%E1%BB%97-m%C3%A1y-ch%E1%BB%A9a-v%C3%A0-v%E1%BA%ADn-h%C3%A0nh-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xem reducer như một cỗ máy chứa và vận hành state</h3>\n<p>Rất nhiều reducer của redux được viết một cách không ràng buộc như thế này, kiểm tra action, tính toán giá trị state mới mà không hề phụ thuộc tới state hiện tại. Có những trường hợp giá trị của một state phụ thuộc vào giá trị state khác, nếu không kiểm tra trước khi cập nhập, có thể dẫn đến bug</p>\n<h3 id=\"đơn-giản-hóa-các-state-chồng-chéocó-quan-hệ-với-nhau\"><a href=\"#%C4%91%C6%A1n-gi%E1%BA%A3n-h%C3%B3a-c%C3%A1c-state-ch%E1%BB%93ng-ch%C3%A9oc%C3%B3-quan-h%E1%BB%87-v%E1%BB%9Bi-nhau\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đơn giản hóa các state chồng chéo/có quan hệ với nhau</h3>\n<p>Rất nhiều ứng dụng cần cache các dữ liệu phức tạp trong store, dữ liệu thường có quan hệ chồng chéo trong API và phụ thuộc vào nhiều entities khác nhau (như quan hệ giữa dữ liệu Users, Posts, Comments)</p>\n<p>Khuyến khích nên lưu dữ liệu trong store ở dạng <a href=\"https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">căn bản nhất</a>. Như vậy khi nhìn vào có thể dễ dàng biết được dựa vào ID của chúng</p>\n<h3 id=\"các-action-nên-tổ-chức-như-event-không-phải-setter\"><a href=\"#c%C3%A1c-action-n%C3%AAn-t%E1%BB%95-ch%E1%BB%A9c-nh%C6%B0-event-kh%C3%B4ng-ph%E1%BA%A3i-setter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các action nên tổ chức như event, không phải setter</h3>\n<p>Chúng ta có thể truyền bất cứ giá trị gì cho <code class=\"language-text\">action.type</code>, thí dụ như <code class=\"language-text\">&quot;users/update&quot;</code>, <code class=\"language-text\">&quot;users/updated&quot;</code>, <code class=\"language-text\">&quot;upload/progress&quot;</code>, <code class=\"language-text\">&quot;users/setUserName&quot;</code>. Không sai nhưng khuyến khích nên diễn tả các <code class=\"language-text\">action.type</code> này như một event, hơn là các <code class=\"language-text\">setter</code> như vậy. Nếu diễn đạt theo kiểu setter như vậy thường dẫn tới quá nhiều action type, quá nhiều dispatcher</p>\n<h3 id=\"viết-tên-action-có-nghĩa\"><a href=\"#vi%E1%BA%BFt-t%C3%AAn-action-c%C3%B3-ngh%C4%A9a\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Viết tên action có nghĩa</h3>\n<p><code class=\"language-text\">action.type</code> phục vụ 2 mục đích</p>\n<ul>\n<li>reducer sẽ kiểm tra giá trị type để tính toán</li>\n<li>hiển thị trên công cụ redux devtool để chúng ta theo dõi</li>\n</ul>\n<p>Tiếp cận action như cơ chế <strong>event</strong>, tên này này không cần ràng buộc với một trường cụ thể nào trong store, đặt tên sao để khi đọc vào chúng ta có thể hiểu được chuyện gì đang diễn ra trên ứng dụng (thông qua công cụ redux devtool). Tránh những cái tên quá chung chung như <code class=\"language-text\">SET_DATA</code> hay <code class=\"language-text\">UPDATE_STORE</code>.</p>\n<h3 id=\"tránh-dispatch-các-action-một-cách-tuần-tự\"><a href=\"#tr%C3%A1nh-dispatch-c%C3%A1c-action-m%E1%BB%99t-c%C3%A1ch-tu%E1%BA%A7n-t%E1%BB%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tránh dispatch các action một cách tuần tự</h3>\n<p>Tránh <code class=\"language-text\">dispatch</code> nhiều action cùng lúc để thực hiện một tác vụ nào đó. Không sai, nhưng kết quả là việc update UI rất tiêu tốn công sức của trình duyệt, đôi khi có những state không truy xuất được ở một vài logic.</p>\n<h3 id=\"kết-nối-càng-nhiều-component-để-đọc-dữ-liệu-trong-store\"><a href=\"#k%E1%BA%BFt-n%E1%BB%91i-c%C3%A0ng-nhi%E1%BB%81u-component-%C4%91%E1%BB%83-%C4%91%E1%BB%8Dc-d%E1%BB%AF-li%E1%BB%87u-trong-store\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết nối càng nhiều component để đọc dữ liệu trong store</h3>\n<p>Càng nhiều component kết nối vào store sẽ giúp hiệu năng update UI cải thiện, do biết được component nào cần và không cần update.</p>\n<p>Có thể kết nối bằng <code class=\"language-text\">connect</code> hoặc <code class=\"language-text\">useSelector</code></p>\n<h3 id=\"sử-dụng-cách-viết-tắt-cho-mapdispatch-khi-dùng-connect\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1ch-vi%E1%BA%BFt-t%E1%BA%AFt-cho-mapdispatch-khi-d%C3%B9ng-connect\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng cách viết tắt cho <code class=\"language-text\">mapDispatch</code> khi dùng <code class=\"language-text\">connect</code></h3>\n<p><a href=\"https://react-redux.js.org/using-react-redux/connect-mapdispatch#defining-mapdispatchtoprops-as-an-object\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sử dụng cách viết tắt cho <code class=\"language-text\">mapDispatch</code> khi dùng <code class=\"language-text\">connect</code></a> nhằm đơn giản hóa code. Gần như chưa bao giờ cần phải viết <code class=\"language-text\">mapDispatch</code> như một function.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">,</span> decrement<span class=\"token punctuation\">,</span> reset<span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./counterActions\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Redux tự động dùng dispatch</span>\n<span class=\"token comment\">// khi bạn truyền vào là một object</span>\n<span class=\"token keyword\">const</span> actionCreators <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  increment<span class=\"token punctuation\">,</span>\n  decrement<span class=\"token punctuation\">,</span>\n  reset\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapState<span class=\"token punctuation\">,</span> actionCreators<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Counter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// or</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  mapState<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> increment<span class=\"token punctuation\">,</span> decrement<span class=\"token punctuation\">,</span> reset <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Counter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"gọi-useselector-nhiều-lần-trong-function-component\"><a href=\"#g%E1%BB%8Di-useselector-nhi%E1%BB%81u-l%E1%BA%A7n-trong-function-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gọi <code class=\"language-text\">useSelector</code> nhiều lần trong function component</h3>\n<p>Khi sử dụng hook <code class=\"language-text\">useSelector</code>, khuyến khích dùng nhiều lần để lấy nhiều phần dữ liệu khác nhau, thay vì lấy một cục dữ liệu lớn đã bao gồm các dữ liệu nhỏ hơn bên trong. Không giống với <code class=\"language-text\">mapState</code>, <code class=\"language-text\">useSelector</code> không yêu cầu trả về object, sử dụng selector để lấy những đơn vị dữ liệu nhỏ hơn bên trong store sẽ giúp ít cho việc render nhiều lần.</p>\n<h3 id=\"sử-dụng-redux-devtools\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-redux-devtools\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Redux DevTools</h3>\n<p>Học cách cài đặt và sử dụng thuần thục <a href=\"https://github.com/zalmoxisus/redux-devtools-extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redux DevTool</a>, nó sẽ cho phép chúng ta</p>\n<ul>\n<li>Xem lịch sử dispatch action</li>\n<li>Nội dung của từng action</li>\n<li>State cuối cùng sau khi action được dispatch</li>\n<li>Sự khác nhau của state trước và sau một action</li>\n<li>Action đã được dispatch từ đâu</li>\n</ul>\n<h2 id=\"khuyến-khích\"><a href=\"#khuy%E1%BA%BFn-kh%C3%ADch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khuyến khích</h2>\n<h3 id=\"giá-trị-type-của-action-nên-là-domaineventname\"><a href=\"#gi%C3%A1-tr%E1%BB%8B-type-c%E1%BB%A7a-action-n%C3%AAn-l%C3%A0-domaineventname\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giá trị type của action nên là <code class=\"language-text\">domain/eventName</code></h3>\n<p>Trước đây tài liệu Redux có đề cập và sử dụng tên như thế này <code class=\"language-text\">SCREAMING_SNAKE_CASE</code> để khai báo action type, ví dụ như <code class=\"language-text\">ADD_TODO</code> và <code class=\"language-text\">INCREMENT</code>, cách này sẽ khớp với cách đặt biến hằng số trong đa số các ngôn ngữ lập trình. Tuy nhiên viết hoa hết như vậy hơi khó đọc.</p>\n<p>Cộng đồng lập trình viên áp dụng một cách đặt tên khác, bắt đầu là <code class=\"language-text\">feature</code> hoặc <code class=\"language-text\">domain</code> nơi action này thuộc về và theo sau là tên của kiểu action. Ngoài ra còn có nhiều cách khác như <code class=\"language-text\">&quot;[Domain] Action Type&quot;</code> hay <code class=\"language-text\">&quot;[Login Page] Login&quot;</code>, <code class=\"language-text\">&quot;domain:action&quot;</code></p>\n<p>Hàm <code class=\"language-text\">createSlice</code> trong Redux Toolkit tạo ra một action type như sau <code class=\"language-text\">&quot;domain/action&quot;</code>, ví dụ <code class=\"language-text\">todos/addTodo</code>. Chúng tôi khuyến khích sử dụng <code class=\"language-text\">domain/action</code> cho dễ đọc.</p>\n<h3 id=\"viết-action-sử-dụng-cách-đặt-tên-chuẩn-của-flux\"><a href=\"#vi%E1%BA%BFt-action-s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1ch-%C4%91%E1%BA%B7t-t%C3%AAn-chu%E1%BA%A9n-c%E1%BB%A7a-flux\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Viết action sử dụng cách đặt tên chuẩn của Flux</h3>\n<p><em>Flux Architechure</em> chỉ yêu cầu mỗi action object phải có trường <code class=\"language-text\">type</code> và không có bất cứ ràng buộc nào khác, từ cách đặt tên cũng như trường nào nên đưa vào. Để đảm bảo nhất quán, Andrew Clark viết ra một bộ <a href=\"https://github.com/redux-utilities/flux-standard-action\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flux Standard Actions</a> để chuẩn hóa. Tóm tắt lại bộ nội dung này, action nên là</p>\n<ul>\n<li>Luôn đặt dữ liệu trong trường <code class=\"language-text\">payload</code></li>\n<li>Thêm trường <code class=\"language-text\">meta</code> cho các thông tin khác</li>\n<li>Thêm trường <code class=\"language-text\">error</code> cho các action báo lỗi</li>\n</ul>\n<h3 id=\"sử-dụng-action-creator\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-action-creator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng action creator</h3>\n<p>Thuật ngữ <strong>Action creator</strong> có nguồn gốc từ cách tiếp cận của <em>Flux Architechure</em>, action creator <strong>không bắt buộc</strong>, các component và logic có thể gọi trực tiếp <code class=\"language-text\">dispatch({ type: &quot;some/action&quot;})</code> (action object được truyền dạng inline).</p>\n<p>Tuy nhiên, sử dụng action creator đảm bảo tính nhất quán, đặc biệt phù hợp khi cần chuẩn bị một dữ liệu hoặc logic cho action (thí dụ như khởi tạo một giá trị ID không trùng lặp).</p>\n<p><strong>Khuyến khích sử dụng action creator</strong>. Tuy nhiên, thay vì viết tay, bạn nên sử dụng hàm <code class=\"language-text\">createSlice</code> trong bộ Redux Toolkit, nó sẽ giúp tạo một action creator và action type tự động</p>\n<h3 id=\"sử-dụng-thunk-cho-các-logic-async\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-thunk-cho-c%C3%A1c-logic-async\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Thunk cho các logic async</h3>\n<p>Redux được thiết kế để có thể mở rộng và middleware API được tạo ra cho phép các dạng async logic khác khau có thể cài cắm vào trong Redux store. Bằng cách đó, bạn không cần bắt buộc phải học các thư viện cụ thể nào đó như RxJS nếu không phù hợp với nhu cầu thực tế.</p>\n<p>Kết quả cả khá nhiều middleware addon được tạo ra cho Redux và tạo ra không ít bối rối cũng như câu hỏi về nên sử dụng middleware nào.</p>\n<p>Chúng tôi thực sự khuyến khích sử dụng <a href=\"https://github.com/reduxjs/redux-thunk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redux Thunk</a> như mặc định, nó có thể giải quyết hầu hết các trường hợp. Đồng thời sử dụng cú pháp <code class=\"language-text\">async/await</code> trong thunk rất dễ đọc.</p>\n<p>Nếu bạn có như cầu sử dụng một workflow async thực sự phức tạp như cancel, debouncing, chạy logic khau khi action được dispatch, <strong>thread chạy ngầm</strong> có thể cân nhắc sử dụng các middleware như Redux-Saga và Redux-Observable</p>\n<h3 id=\"tách-các-logic-phức-tạp-ra-khỏi-component\"><a href=\"#t%C3%A1ch-c%C3%A1c-logic-ph%E1%BB%A9c-t%E1%BA%A1p-ra-kh%E1%BB%8Fi-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tách các logic phức tạp ra khỏi component</h3>\n<p>Chúng tôi khuyến nghị nên đưa các logic phức tạp ra khỏi component, theo tư tưởng của cách làm <em>container/presentational</em>, càng nhiều component chỉ nhận prop và hiển thị UI càng tốt, đồng thời khi phải làm việc với các logic bất tuần tự (async) bên trong component rất khó để bảo trì sau này.</p>\n<p>Tuy nhiên, sử dụng React hook có vẻ như dễ dàng hơn trong việc quản lý các logic kiểu như fetch dữ liệu trực tiếp trong component và có thể thay thế bằng thunk trong vài trường hợp</p>\n<h3 id=\"sử-dụng-selector-function-để-đọc-dữ-liệu-trong-store\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-selector-function-%C4%91%E1%BB%83-%C4%91%E1%BB%8Dc-d%E1%BB%AF-li%E1%BB%87u-trong-store\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng selector function để đọc dữ liệu trong store</h3>\n<p>Selector function là công cụ mạnh mẽ đề đọc các giá trị trong store. Những thư viện như Reselect cho tạo và lưu trữ các selector function, chỉ tính toán lại kết quả nếu cần thiết, là một đặc tính quan trọng để cải thiện hiệu năng.</p>\n<p>Khuyến khích sử dụng các selector function và lưu lại kết quả đọc được từ store bất cứ khi nào có thể, tạo các selector function này bằng Reselect</p>\n<p>Tuy nhiên, cũng không nhất thiết <strong>bắt buộc phải</strong> viết selector function cho tất cả các giá trị trong state. Cân nhắc các trường hay cần truy xuất và cập nhập cũng như lợi ích mang lại khi sử dụng các selector function</p>\n<h3 id=\"tránh-đưa-state-của-form-vào-trong-redux\"><a href=\"#tr%C3%A1nh-%C4%91%C6%B0a-state-c%E1%BB%A7a-form-v%C3%A0o-trong-redux\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tránh đưa state của form vào trong redux</h3>\n<p>Hầu như như state của form ko nên nằm trong Redux. Dữ liệu này không thực sự phải <em>global</em>, ko cần được cache, không được sử dụng bởi nhiều component cùng lúc. Connect form vào redux cũng dẫn đến chuyện dispatch action trên tất cả các sự kiện thay đổi trong form, nó sẽ làm hiệu năng giảm trầm trọng và không mang lại nhiều hiệu quả.</p>\n<p>Chỉ nên dữ state của form trong component và đưa toàn bộ giá trị lên store sau khi user submit form.</p>\n<p>Chỉ duy nhất trường hợp đưa form state vào redux là hợp lý khi viết component như WYSIWYG với tính năng live preview trên các thuộc tính. Còn lại đa phần không cần thiết.</p>\n<p><a href=\"https://redux.js.org/style-guide/style-guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://redux.js.org/style-guide/style-guide/</a></p>\n"}},{"node":{"title":"9 câu hỏi lắc léo về Promise","path":"/9-cau-hoi-lac-leo-ve-promise/","date":"23. December 2019","timeToRead":3,"desc":"Vài câu hỏi Promise, ôn tập kiến thức cho bạn cần đi phỏng vấn","content":"<h2 id=\"1\"><a href=\"#1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The Fails!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Kết quả output</p>\n<ol>\n<li>Kết quả lỗi log ra 1 lần</li>\n<li>Kết quả lỗi log ra 2 lần</li>\n<li>UnhandledPromiseRejectionWarning</li>\n</ol>\n<p><code class=\"language-text\">.catch</code> sẽ làm việc giống như <code class=\"language-text\">.addEventListener(event, callback)</code> hay Event Emitter <code class=\"language-text\">.on(event, callback)</code>. Có thể add thêm bao nhiêu tùy thích, nó sẽ chạy tất cả các callback đã đăng ký</p>\n<p>✅ <em>Đáp án</em></p>\n<ol start=\"2\">\n<li>Kết quả lỗi log ra 2 lần</li>\n</ol>\n<h2 id=\"2\"><a href=\"#2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reject</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The Fails!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<ol>\n<li>Kết quả lỗi log ra 1 lần</li>\n<li>Kết quả lỗi log ra 2 lần</li>\n<li>UnhandledPromiseRejectionWarning</li>\n</ol>\n<p><img src=\"https://danlevy.net/static/question-2-308cbd4ad650e288821fd681a0e745b4-e8b1e.png\"></p>\n<p>Khi khởi tạo một Promise, chúng ta phải gọi một trong hai callback <code class=\"language-text\">resolve()</code> hoặc <code class=\"language-text\">reject()</code>. Nó ko <code class=\"language-text\">return</code> giá trị. Không thể dùng <code class=\"language-text\">Promise.reject()</code> như ở trên.</p>\n<p>✅ <em>Đáp án</em></p>\n<ol start=\"3\">\n<li>UnhandledPromiseRejectionWarning</li>\n</ol>\n<h2 id=\"3\"><a href=\"#3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The Fails!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Kết quả</p>\n<ol>\n<li>In ra lỗi và <code class=\"language-text\">undefined</code></li>\n<li>in ra lỗi 2 lần</li>\n<li>UnhandledPromiseRejectionWarning</li>\n<li>undefined</li>\n</ol>\n<p><img src=\"https://danlevy.net/static/question-3-a5d5c8df7eb262f3bccc7a5319f53ec2-e8b1e.png\" alt=\"annotated-code/question-3.png\"></p>\n<p>Gợi ý thứ nhất <code class=\"language-text\">console.log()</code> luôn trả về <code class=\"language-text\">undefined</code>. Thứ 2, khi đặt <code class=\"language-text\">.catch</code> trước <code class=\"language-text\">.then</code> như thế, nó sẽ không nhận được giá trị từ hàm trước đó, mọi thứ đã dừng lại ở <code class=\"language-text\">catch</code>.</p>\n<p>✅ <em>Đáp án</em></p>\n<ol>\n<li>In ra lỗi và <code class=\"language-text\">undefined</code></li>\n</ol>\n<h2 id=\"4\"><a href=\"#4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The Fails!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<ol>\n<li>In ra lỗi một lần</li>\n<li>In ra lỗi 2 lần</li>\n<li>UnhandledPromiseRejectionWarning</li>\n</ol>\n<p>Giải thích như trên, câu <code class=\"language-text\">catch</code> thứ 2 không được gọi đến, điều đặc biệt là bạn có thể đặt <code class=\"language-text\">.then</code> ở phía sau <code class=\"language-text\">catch</code> nhưng không thể đặt <code class=\"language-text\">catch</code> sau <code class=\"language-text\">catch</code>.</p>\n<p>✅ <em>Đáp án</em></p>\n<ol>\n<li>In ra lỗi một lần</li>\n</ol>\n<h2 id=\"5\"><a href=\"#5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token known-class-name class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Oh noes!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"actually, that worked\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<ol>\n<li>In lỗi 1 lần</li>\n<li>In lỗi 2 lần</li>\n<li>UnhandledPromiseRejectionWarning</li>\n<li>Ko in gì cả</li>\n</ol>\n<p><code class=\"language-text\">catch</code> có thể được sử dụng để bỏ qua hoặc ghi đè lên giá trị lỗi bằng cách cho <code class=\"language-text\">return</code> một giá trị. Trò này <strong>chỉ làm được khi trước đó <code class=\"language-text\">then</code> có trả về giá trị</strong>.</p>\n<p>✅ <em>Đáp án</em></p>\n<ol start=\"4\">\n<li>Ko in gì cả</li>\n</ol>\n<h2 id=\"6\"><a href=\"#6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<ol>\n<li>In ra \"Success!\" và \"SUCCESS!\"</li>\n<li>In ra \"Success!\"</li>\n<li>In ra \"SUCCESS!\"</li>\n<li>Không in ra gì cả</li>\n</ol>\n<p><code class=\"language-text\">.then</code> sẽ truyền dữ liệu theo thứ tự đã viết, khi <code class=\"language-text\">return</code> giá trị, hàm <code class=\"language-text\">then</code> tiếp theo sẽ nhận giá trị <code class=\"language-text\">return</code> này.</p>\n<p>✅ <em>Đáp án</em></p>\n<ol start=\"3\">\n<li>In ra \"SUCCESS!\"</li>\n</ol>\n<h2 id=\"7\"><a href=\"#7\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>7</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">log</span><span class=\"token punctuation\">)</span></code></pre>\n<ol>\n<li>In ra \"SUCCESS!\"</li>\n<li>In ra \"Success!\"</li>\n<li>In ra \"SUCCESS!\" và \"SUCCESS!\"</li>\n<li>Không in ra gì cả</li>\n</ol>\n<p>Giải thích tương tự như trên.</p>\n<p>✅ <em>Đáp án</em></p>\n<ol start=\"3\">\n<li>In ra \"SUCCESS!\" và \"SUCCESS!\"</li>\n</ol>\n<h2 id=\"8\"><a href=\"#8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>8</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    data<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<ol>\n<li>In ra \"SUCCESS!\"</li>\n<li>In ra \"Success!\"</li>\n<li>In ra \"SUCCESS!\" và \"SUCCESS!\"</li>\n<li>In ra \"undefined\"</li>\n</ol>\n<p>Nếu muốn truyền giá trị xuống <code class=\"language-text\">.then</code> bên dưới, trước đó phải <code class=\"language-text\">return</code>.</p>\n<p>✅ <em>Đáp án</em></p>\n<ol start=\"4\">\n<li>In ra \"undefined\"</li>\n</ol>\n<h2 id=\"9\"><a href=\"#9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>9</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token known-class-name class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Oh noes!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'actually, that worked'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token known-class-name class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The fails!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<ol>\n<li>In ra \"Oh noes!\" và \"The fails!\"</li>\n<li>In ra \"Oh noes!\"</li>\n<li>In ra \"The fails!\"</li>\n<li>In ra  \"actually, that worked\"</li>\n<li>Không in ra gì cả</li>\n</ol>\n<p>Tổng hợp những kiến thức ở trên, hy vọng bạn trả lời đúng câu này.  Ở <code class=\"language-text\">then</code> đầu tiên, chúng ta throw một error, <code class=\"language-text\">catch</code> tiếp theo chúng ta <code class=\"language-text\">return</code> coi như bỏ qua error này, <code class=\"language-text\">then</code> thứ 2, nhận data nhưng chúng ta ko làm gì với nó cả, mà throw một error khác, catch cuối cùng sẽ là giá trị error vừa throw ở trên.</p>\n<p>✅ <em>Đáp án</em></p>\n<ol start=\"3\">\n<li>In ra \"The fails!\"</li>\n</ol>\n<p><a href=\"https://danlevy.net/javascript-promises-quiz/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://danlevy.net/javascript-promises-quiz/</a></p>\n"}},{"node":{"title":"Hiểu về prop key trong React","path":"/hieu-ve-prop-key-trong-react/","date":"18. December 2019","timeToRead":3,"desc":"Một chút nhận định về prop key trong React","content":"<blockquote>\n<p><code class=\"language-text\">key</code> là một cơ chế để quản lý các instance của component</p>\n</blockquote>\n<p>Mỗi lần React render 1 component, nó chạy function của chúng ta để nhận về một giá trị mới, giá trị này được dùng để cập nhập DOM. Nếu chúng trả về cùng một giá trị, nó sẽ không gọi update DOM, thậm chí <strong>tất cả prop có thay đổi</strong></p>\n<p>Đọc thêm bài viết <a href=\"https://kentcdodds.com/blog/optimize-react-re-renders\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Thủ thuật cải thiện render</a></p>\n<p><strong>Tất cả prop có thay đổi</strong> nếu kết quả trả về không khác nhau, nó không cập nhập DOM. <strong>Trừ trường hợp là prop <code class=\"language-text\">key</code></strong>, dù cho kết quả cuối cùng không thay đổi, nhưng giá trị <code class=\"language-text\">key</code> khác nhau, React cũng sẽ unmount instance trước đó và mount vào một instance mới.</p>\n<p>Điều đó có nghĩa là toàn bộ <code class=\"language-text\">state</code> trước đó sẽ được khởi tạo lại như lúc ban đầu. React cũng sẽ chạy cleanup trên <code class=\"language-text\">effect</code></p>\n<blockquote>\n<p>Cleanup effect thật ra chạy sau khi một component đã mount, trước khi effect tiếp theo được gọi.</p>\n</blockquote>\n<p>Tưởng tượng chúng ta có một component, với state của riêng nó</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Counter</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Counter called'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Counter useState initializer'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token arrow operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Counter useEffect callback'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Counter useEffect cleanup'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Counter returning react elements'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">CounterParent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// sử  dụng useReducer theo cách này để đảm bảo tất cả những lần gọi setCounterKey</span>\n  <span class=\"token comment\">// `counterKey` được gán cho một object mới</span>\n  <span class=\"token comment\">// đồng nghĩa với việc `key` sẽ khác nhau</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counterKey<span class=\"token punctuation\">,</span> setCounterKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token arrow operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>setCounterKey<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">reset</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>counterKey<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đây là kết quả log ra</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">// bắt đầu mounted\nCounter called\nCounter useState initializer\nCounter returning react elements\n// mounted\nCounter useEffect callback\n// click nút counter\nCounter called\nCounter returning react elements\n// để ý đến callback của effect và các step lúc khởi tạo không được gọi lúc này\n// click nút reset\n// xảy ra trên instance mới\nCounter called\nCounter useState initializer\nCounter returning react elements\n// cleanup instance trước đó\nCounter useEffect cleanup\n// new instance đã được mounted\nCounter useEffect callback</code></pre>\n<p>Một ứng dụng thực tế, sử dụng key để <em>ép</em>  render giá trị <code class=\"language-text\">subject</code> khi <code class=\"language-text\">topic</code> thay đổi</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Contact</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">,</span> setTopic<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'training'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">htmlFor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>topic<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Topic</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>topic<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>topic<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setTopic</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>training<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Training</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>consulting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Consulting</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>question<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Question</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">htmlFor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>subject<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Email Subject</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>subject<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>topic<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">defaultValue</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>defaultValuesByTopic<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">htmlFor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>body<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Email body</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>body<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta có <code class=\"language-text\">&lt;input id=&quot;subject&quot; /&gt;</code>, nếu không truyền <code class=\"language-text\">key=topic</code>, nó sẽ không được khởi tạo lại dù cho giá trị của <code class=\"language-text\">defaultValue={defaultValuesByTopic[topic]}</code> đã thay đổi.</p>\n<p><a href=\"https://kentcdodds.com/blog/understanding-reacts-key-prop\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Understanding React's key prop</a></p>\n"}},{"node":{"title":"Tối ưu component React bằng React.memo, useMemo và useCallback","path":"/toi-uu-component-react-bang-react-memo-use-memo-va-use-callback/","date":"13. December 2019","timeToRead":2,"desc":"Sử dụng những hàm có sẵn của React để viết component ngon hơn","content":"<p>Hầu hết các trường hợp, hiệu năng của các ứng dụng React không phải là vấn đề quá nghiêm trọng. Bản thân thư viện React đã hỗ trợ tận răng các phương để cải thiện lúc render component. Tuy nhiên cũng có vài trường hợp các component của chúng ta render nhiều hơn mức cần thiết và làm ảnh hưởng đến hiệu năng chung.</p>\n<p>Lấy ví dụ</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">ListPage</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> title <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Header</span></span> <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span></span> <span class=\"token attr-name\">listItems</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Trong ví dụ rất rất đơn giản trên, nếu <code class=\"language-text\">data</code> thay đổi, toàn bộ <code class=\"language-text\">&lt;Listpage/&gt;</code> sẽ render, bao gồm cả <code class=\"language-text\">&lt;Header /&gt;</code> vốn không có thay đổi gì nếu giá trị <code class=\"language-text\">data</code> khác đi</p>\n<p>Thời bây giờ chúng ta chuộng kiểu viết functional component hơn, 3 cách để tối ưu cho một functional component là sử dụng: <code class=\"language-text\">React.memo</code>, <code class=\"language-text\">useMemo</code>, <code class=\"language-text\">useCallback</code></p>\n<h2 id=\"reactmemo\"><a href=\"#reactmemo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>React.Memo</h2>\n<p>Là một Higher order component dùng để <strong>ghi nhớ</strong> kết quả của function component, tất nhiên nếu truyền cùng một prop thì kết quả trả về sẽ là không đổi, nên có thể lấy kết quả <strong>đã nhớ</strong> trước đó</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Header</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Header</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Cách viết trên là bắt buộc, vì nếu bạn viết như bên dưới, component của bạn sẽ không xuất hiện trong devtool</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Header</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">Header</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"usememo\"><a href=\"#usememo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useMemo</h2>\n<p>Tên có vẻ giống, nhưng không giống nhau, nếu <code class=\"language-text\">React.memo</code> là một HOC để ghi nhớ một function component, <code class=\"language-text\">useMemo</code> là hàm giống như helper cho phép chỉ định: lưu lại kết quả của hàm nào và những giá trị nào sẽ làm thay đổi kết quả đó.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> widgetList <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n    widgets<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">w</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token spread operator\">...</span>w<span class=\"token punctuation\">,</span>\n      totalPrice<span class=\"token operator\">:</span> <span class=\"token function\">someComplexFunction</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span><span class=\"token property-access\">price</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      estimatedDeliveryDate<span class=\"token operator\">:</span> <span class=\"token function\">someOtherComplexFunction</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span><span class=\"token property-access\">warehouseAddress</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>widgets<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Ở đoạn code trên, chúng ta muốn <strong>ghi nhớ</strong> giá trị của <code class=\"language-text\">totalPrice</code> và <code class=\"language-text\">estimatedDeliveryDate</code> bởi vì việc tính toán các giá trị này vô cùng <em>tốn sức</em>. Chúng ta chỉ định <code class=\"language-text\">widgets</code> nếu không thay đổi thì đừng đi tính lại làm gì, mà lấy kết quả lần trước ra.</p>\n<h2 id=\"usecallback\"><a href=\"#usecallback\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useCallback</h2>\n<p>Được sử dụng để chặn việc render không cần thiết giữa <code class=\"language-text\">parent</code> và <code class=\"language-text\">children</code> component</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Parent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showExtraDetails<span class=\"token punctuation\">,</span> setShowExtraDetails<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">]</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Child</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">showData</span><span class=\"token punctuation\">(</span>showExtraDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Component <code class=\"language-text\">Child</code> sẽ luôn re-render khi <code class=\"language-text\">Parent</code> render, thậm chí <code class=\"language-text\">Child</code> là một <code class=\"language-text\">PureComponent</code> hoặc được bọc trong <code class=\"language-text\">React.memo</code></p>\n<p><code class=\"language-text\">useCallback</code> được dùng như bên dưới</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Parent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showExtraDetails<span class=\"token punctuation\">,</span> setShowExtraDetails<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> handleClick <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">showData</span><span class=\"token punctuation\">(</span>showExtraDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span>showExtraDetails<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">]</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://headway.io/blog/react-optimize-components-memo-usememo-usecallback/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://headway.io/blog/react-optimize-components-memo-usememo-usecallback/</a></p>\n"}},{"node":{"title":"Cách viết React render props","path":"/cach-viet-react-render-props/","date":"27. November 2019","timeToRead":5,"desc":"Một trong những pattern để chúng ta có thể sử dụng lại logic","content":"<p>Có 2 điều quan trọng cần nói trước khi bắt đầu. Một là, chúng ta đang nói đến một <strong>cách làm</strong> (pattern) trong lập trình, ko phải đặc sản của React. Thứ 2, đây không phải là kiến thức bắt buộc để viết một ứng dụng React. Bạn có thể không cần đọc bài này, vẫn có thể vỗ ngực xưng tên là một React developer và viết React như thường. Còn nếu bạn tò mò muốn biết thêm món <em>đồ chơi</em> thì đọc tiếp.</p>\n<p>Những lập trình viên mới vào nghề cũng biết đến câu thần chú \"D.R.Y\" (đừng tự lập lại chính mình). Câu thần chú rất đáng để trong tâm niệm. Cái cách làm Render Props này cũng là để đạt được cái gọi là DRY, giống như Higher-Order-Components.</p>\n<p>Trước khi xem đến giải pháp, chúng ta cần biết vấn đề cần giải quyết là gì. Ví dụ chúng ta muốn làm lại cái dashboard như bên dưới</p>\n<p><img src=\"https://tylermcginnis.com/images/posts/react-fundamentals/tool-tips.gif\"></p>\n<p>Bạn sẽ cần hiển thị một đống cái kiểu tooltip khác nhau khi một element được hover lên</p>\n<p>Có vài cách để tiếp cận vấn đề này, một là bạn kiểm tra một component cụ thể nào đó có đang hover không, rồi hiển thị hoặc ẩn tooltip. Có 3 component bạn cần kiểm tra, bạn đưa hàm kiểm tra vào cả 3 component <code class=\"language-text\">Info</code>, <code class=\"language-text\">TrendChart</code>, <code class=\"language-text\">DailyChart</code></p>\n<p>Component Info</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Info</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span>\n        <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Icon-svg Icon--hoverable-svg<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">height</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 16 16<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>16<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M9 8a1 1 0 0 0-1-1H5.5a1 1 0 1 0 0 2H7v4a1 1 0 0 0 2 0zM4 0h8a4 4 0 0 1 4 4v8a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4zm4 5.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta sẽ sử dụng <code class=\"language-text\">onMouseOver</code> và <code class=\"language-text\">onMouseOut</code>, dùng thêm state <code class=\"language-text\">hovering</code> để chúng ta có thể kêu nó <code class=\"language-text\">re-render</code> khi cần thiết</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Info</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> hovering<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">mouseOver</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hovering<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function-variable function\">mouseOut</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hovering<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">hovering</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span>\n          <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tooltip</span></span> <span class=\"token attr-name\">id</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n          <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span>\n          <span class=\"token attr-name\">onMouseOver</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mouseOver</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">onMouseOut</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mouseOut</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Icon-svg Icon--hoverable-svg<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">height</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 16 16<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>16<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M9 8a1 1 0 0 0-1-1H5.5a1 1 0 1 0 0 2H7v4a1 1 0 0 0 2 0zM4 0h8a4 4 0 0 1 4 4v8a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4zm4 5.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Giờ chúng ta cần <em>copy</em> tính năng này cho 2 component còn lại. Việc <em>copy</em> này vi phạm nghiêm trọng câu thần chú DRY. Chúng ta phải làm sao để sử dụng lại những logic giống nhau mà ko phải copy-paste</p>\n<p>Trong hầu hết các trường hợp khi chúng ta dựng một component trong React, kết quả output cuối cùng là một cái UI gì đó</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token maybe-class-name\">View</span> <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span></code></pre>\n<p>Tuy nhiên chỉ là hầu hết, chứ ko phải toàn bộ, có nhưng component như là <em>wrapper</em> của một component khác, nó chỉ mang nhiệm vụ quản lý logic.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Users</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    users<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">users</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> users <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Grid</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">users</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Như component <code class=\"language-text\">Users</code> ở trên, không chịu trách nhiệm quản lý UI, chuyện đó là việc của <code class=\"language-text\">Grid</code></p>\n<p>Trong React, chúng ta có thể truyền function vào như prop cho component</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">User</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">id</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// vuilaptrinh.com</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span></span> <span class=\"token attr-name\">id</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isAuthed</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> isAuthed <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">?</span> <span class=\"token string\">'vuilaptrinh.com'</span> <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p>Với ý tưởng này, chúng ta giải quyết vấn đề trên như thế nào?</p>\n<p>Trước tiên chúng ta tạo ra một component <em>wrapper</em> chịu trách nhiệm quản lý logic của hover</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hover</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> hovering<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">mouseOver</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hovering<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function-variable function\">mouseOut</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hovering<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onMouseOver</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mouseOver</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseOut</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mouseOut</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Câu hỏi tiếp theo, component <code class=\"language-text\">Hover</code> thì render cái gì. Vận dụng ý tưởng truyền prop là một function, chúng ta cho <code class=\"language-text\">Hover</code> nhận vào một prop function có tên <code class=\"language-text\">render</code>, chúng ta sẽ nhét vào trong cái function <code class=\"language-text\">render</code> giá trị <code class=\"language-text\">hovering</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hover</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hovering</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    Is hovering? </span><span class=\"token punctuation\">{</span>hovering <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">?</span> <span class=\"token string\">'Yes'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'No'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p>Việc còn lại là cập nhập lại component <code class=\"language-text\">Hover</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hover</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> hovering<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">mouseOver</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hovering<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function-variable function\">mouseOut</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hovering<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onMouseOver</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mouseOver</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseOut</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mouseOut</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">hovering</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Vấn đề đã được giải quyết. Bất kể khi nào cần dùng logic <code class=\"language-text\">hover</code> chúng ta sẽ gọi lại component <code class=\"language-text\">Hover</code>. Cách làm này được gọi với cái tên đúng như những gì đã diễn ra (truyền prop render là một function) <strong>Render Props</strong></p>\n<p>Một cách viết khác không dùng prop tên <code class=\"language-text\">render</code>, xài luôn prop tên <code class=\"language-text\">children</code> có sẵn, chúng ta sẽ viết một cách gọn hơn</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">User</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token maybe-class-name\">This</span> is props<span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">User</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>So với cách làm của Higher-Order-Component, Render Props sẽ không vướng phải vấn đề đụng tên props, không mất quyền kiểm soát vào <em>tay</em> component được wrap lại, và wrapper hell.</p>\n<p><a href=\"https://tylermcginnis.com/react-render-props/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://tylermcginnis.com/react-render-props/</a></p>\n"}},{"node":{"title":"Lựa chọn framework frontend nào trong thời điểm hiện tại","path":"/lua-chon-framework-frontend-nao-trong-thoi-diem-hien-tai/","date":"24. November 2019","timeToRead":9,"desc":"Đây không phải là một bài so sánh đâu mới là framework chạy nhanh nhất","content":"<p>Thời điểm hiện tại nếu bạn đang làm Frontend thì chắc hẳn đang sử dụng một framework nào đó trong 3 thằng này, Vue, React, và Angular. Nếu trước đây trên cả tá framework, và cả tá ví dụ về làm một ứng dụng web ToDoMVC trên github, thì cuộc chơi giờ đây đã đỡ hơn rất nhiều, khi chúng ta chỉ còn 3 lựa chọn sáng giá.</p>\n<p>Để viết một ứng dụng phức tạp, chúng ta bắt buộc phải sử dụng framework, vì nếu không có những framework như vậy, chúng ta sẽ tốn không biết bao nhiêu thời gian để đạt được kết quả cuối cùng.</p>\n<p>Chắc các bạn cũng như mình đã quá mệt mỏi với những bài viết so sánh 3 framework trên, ai ngon hơn ai, các bạn cũng nên dừng tìm kiếm câu trả lời cho câu hỏi \"Top 10 framework nên xài trong năm 2019\". Tại sao? Vì những bài viết này đa phần sẽ tập trung vào  đếm số lượng <em>sao</em> trên Github, số lượng tải về từ NPM, số câu hỏi liên quan trên Stack Overflow. Những con số thống kê vô hồn này chỉ có tác dụng trong những trường hợp cụ thể, như đi quảng bá về mức độ phủ rộng của những framework này. Nếu bạn là dân kỹ thuật và nhìn nhận ở góc độ kỹ thuật, phán xét những framework này ở góc độ kỹ thuật chứ không thể căn cứ trên số lượt <em>view</em> và <em>download</em></p>\n<blockquote>\n<p>Kỹ thuật quyết định bên trong của từng framework là gì, đâu là sự khác nhau thực sự của từng framework</p>\n</blockquote>\n<p>Mục tiêu cuối cùng của các framework đều là để giúp chúng ta viết ứng dụng web hiệu quả nhất có thể, việc cạnh tranh giữa các framework với nhau là ý tưởng tốt hay không? Mỗi framework sẽ có một số lượng người sử dụng nhất định, như React-Angular-Vue hiện tại có khoản hơn nửa triệu developer đang <em>ăn nằm</em> với nó hằng ngày.</p>\n<p>Không có khái niệm \"điểm tốt\" và \"điểm chưa tốt\" cho các framework. Người ta thường hay hỏi mấy câu, framework nào xài ngon nhất. Một dạng câu hỏi bạn nên ngừng làm khó nhau vì không thể nào so sánh như toán học 3 > 2 > 1</p>\n<p>Việc thiết kế phần mềm luôn đòi hỏi một sự đánh đổi, đặc biệt là với web, chắc có lẽ vì có quá nhiều thứ người ta muốn làm thông qua web, từ một trang web đơn giản chỉ là HTML tĩnh đến cả một hệ thống phức tạp nhất bạn có thể nghĩ ra, để đáp ứng toàn bộ những nhu cầu khác nhau đó, các framework phải chấp nhận đánh đổi một số thứ, chứ ko thể đáp ứng toàn bộ với một giải pháp toàn diện được</p>\n<h2 id=\"scope\"><a href=\"#scope\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Scope</h2>\n<blockquote>\n<p>Framework cung cấp bao nhiêu đồ chơi cho bạn</p>\n</blockquote>\n<p>Một trong những ví dụ kinh điển giữa <strong>thư viện</strong> và <strong>framework</strong> là React và Angular. React được xem là thư viện trong khi Angular sẽ là framework</p>\n<p>Là một thư viện, React chỉ muốn tập trung cung cấp mô hình để phát triển UI. Để hình dung dễ hơn, liên tưởng tới các nhà máy sản xuất bún, scope rất cụ thể, tôi sẽ tập trung vào việc sản xuất ra bún, việc các bạn đem bún này về nấu thành món gì là do bạn, lý do tại sao ecosystem của React luôn luôn sôi động, rất nhiều dev đã chế biến thành các món khác nhau, như với món bún chúng ta có bún riêu, canh bún, bún đậu mắm tôm, bún cá châu đốc, bún mắm, vâng vâng.</p>\n<p>Trong khi đó, Angular với tư cách là một framework thực thụ, nó sẽ tiếp cận vấn đề theo hướng từ trên xuống. Hình dung như mì gói nuôi nhân tài ở Việt Nam, với mọi thứ đóng gói đầy đủ để bạn có một món cứu đói tạm thời, bột nêm, dầu, hành. Angular cung cấp hệ thống form validation, animation,... rất nhiều tính năng khác mà chúng ta rất cần thiết để dựng nên một ứng dụng hoàn chỉnh. Với scope lớn như vậy, mọi tính năng khi thiết kế đã được nghĩ đến làm thế nào để chúng <em>sống chung</em> với nhau một cách mượt mà</p>\n<p><strong>Lợi ích khi có scope nhỏ và cụ thể</strong></p>\n<ul>\n<li>Ít khái niệm, dễ tiếp cận ngay từ đầu. Trong React bạn sẽ có mô hình làm component, prop, state, virtual DOM, hook, bao nhiêu kiến thức thôi là bạn đã có thể bắt đầu làm quen React.</li>\n<li>Linh động, món bún có thể kết hợp với rất nhiều thứ gia vị, cách nấu khác nhau để cho ra các món ăn khác nhau.</li>\n<li>Team duy trì React <em>rảnh</em> hơn, những chuyện khác đã có cộng đồng gánh vác, như đi làm React Router, React Redux, React Form, họ sẽ có thời gian nhiều hơn để tập trung vào các ý tưởng mới cho bản thân React</li>\n</ul>\n<p><strong>Hạn chế khi scope nhỏ và cụ thể</strong></p>\n<ul>\n<li>Khi bạn phải xây dựng một ứng dụng phức tạp, một vài concept cơ bản là không đủ xài, bạn phải tự viết khá nhiều. Giống như bắt bạn diễn tả tất cả những câu nói hằng ngày bằng cách chỉ sử dụng 10 từ, thì bạn diễn đạt ý như thế nào?</li>\n<li>Cách làm (<em>pattern</em>) mới ngày càng nhiều. Nói học React rất dễ là bạn thực sự chưa biết đến ngoài React ra, bạn có phải học vô số các cách làm (pattern) khác, như Redux, mặc dù không có trong tài liệu chính thức trên React, nhưng lại là thứ bạn không thể bỏ qua nếu muốn dùng React như một React Developer chân chính. Nào là Higher Other Component, Render Props, React hook, rồi quá trời cách để sử dụng CSS trong JS, tài liệu chính thức của React sẽ không nói bạn nên dùng gì, bạn phải tự tìm hiểu và chọn cái nào mình thích. Những kiến thức này bạn phải nạp từ từ như là một kiến thức chính quy để bạn có thể vỗ ngực xưng tên <em>tao là React Developer</em>.</li>\n<li>Ecosystem phát triển quá nhanh không đồng nghĩa với chất lượng các thư viện dành cho React cái nào cũng ngon, rất nhiều thư viện nổi lên một thời rồi ra đi mãi mãi, như Flux, rồi bao nhiêu là cách viết CSS trong JS. Trong ta luôn trong cảm giác lo sợ <strong>lỡ mất không xài thằng ngon nhất rồi</strong></li>\n</ul>\n<p><strong>Lợi ích khi có scope bao la bát ngát</strong></p>\n<ul>\n<li>Các vấn đề thường gặp đã được giải quyết hết, bạn có ngay tô mì để ăn trong 5 phút mà không cần suy nghĩ nhiều, cứ lên trang chủ, đọc tài liệu, học cái framework xong là xài, để nghiên cứu giây mơ rễ má có thể để sau. Đâu ai cấm bạn ăn mì gói bỏ thêm thịt bò, trứng hay tôm càng.</li>\n<li>Các tính năng bên trong được thiết kế để làm việc mượt mà đảm bảo tính thống nhất của toàn bộ hệ thống, không cần chạy đi đâu để kiếm giải pháp cho một vấn đề quá căn bản, bạn cứ lên trang chính thức của nó xem người ta giải quyết vấn đề đó như thế nào, không còn phải suy nghĩ lựa chọn đâu là cách tốt nhất trong hơn chục cái giải pháp được đưa ra.</li>\n</ul>\n<p><strong>Hạn chế của scope bao quát bát ngát hết vườn hoa</strong></p>\n<ul>\n<li>Học là một quá trình dài, nhiều khi để tới được bước có một cái gì đó hiển thị trên màn hình, bạn phải trải qua cả khóa học bài bảng. Những người không có kiến thức về một ngôn ngữ Backend nào cả, chỉ biết HTML, CSS, javascript mà đọc tài liệu của Angular thì phải nói là một trãi nghiệm vô cùng đau thương</li>\n<li>Đôi khi một giải pháp được cung cấp sẵn lại không phù hợp với tính huống gặp phải, chúng ta ước gì có thể làm cách khác, nhưng điều đó là không thể.</li>\n<li>Hệ thống lớn đòi hỏi chi phí rất lớn để duy trì cũng như đưa ra các ý tưởng mới, rất nhiều thành phần phải tích hợp để cả hệ thống có thể kết nối hoạt động trơn tru</li>\n</ul>\n<h2 id=\"cơ-chế-render\"><a href=\"#c%C6%A1-ch%E1%BA%BF-render\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cơ chế render</h2>\n<blockquote>\n<p>Cách structure, cách quản lý code của framework</p>\n</blockquote>\n<p>Để đơn giản chúng ta so sánh JSX và Templates</p>\n<p><strong>Điểm cộng của JSX/Virtual DOM</strong></p>\n<ul>\n<li>Tất cả điều là javascript, ai cũng thích, bạn không cần biết những syntax mới được định nghĩa bởi framework, những kiến thức bạn nạp vào là kiến thức nền tảng của javascript, một khi bạn đã cứng tay, bạn có thể thiên biến vạn hóa theo sở thích.</li>\n<li>Xem <em>view</em> như một dạng <em>data </em>, một component sẽ return một thứ gì đó dựa vào những giá trị input khác nhau, bạn có thể làm những thứ như chụp một cái snapshot dựa trên virtual DOM, render nó trên những target khác như terminal, PDF, Canvas, WebGL</li>\n</ul>\n<p><strong>Điểm trừ của JSX/Virtual DOM</strong></p>\n<ul>\n<li>Vốn dĩ sẽ tiêu tốn tài nguyên. Khi React mới ra đời, họ cũng đã trả lời cho câu hỏi <em>làm như vậy có chậm không?</em>, <em>vâng nó chậm nhưng vẫn nhanh đủ để dùng</em>. Nếu nhìn nhận về mặc kỹ thuật, phải làm rất nhiều thao tác xử lý trên virtual DOM. Kích thước của một VDom chuẩn sẽ liên quan tới kích thước của view chứ không phải số lượng node sẽ thay đổi.</li>\n<li>Hàm render cơ bản rất linh động, vì linh động nên nó cũng rất khó optimize, linh động ở đây muốn nói đến một hàm render như thế này</li>\n</ul>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        children<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'text'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">===</span> <span class=\"token number\">2</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuilaptrinh.com\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'content'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta có thể tạo parent node trước, rồi sau đó nhét thêm các node con, hoặc bất cứ thứ gì bạn có thể nghĩ ra được, javascript rất linh động, có nhiều tình huống đặc biệt chúng ta khó có thể đảm bảo optimize được cho tất cả.</p>\n<ul>\n<li>Giải pháp của React cho tình huống này không tập trung vào việc làm cho virtual DOM nhanh hơn, mà làm cho chúng ta <em>cảm giác</em> performance tốt hơn (giống như việc gửi tin nhắn trên facebook luôn cảm giác như gửi được liền chứ không cần đợi), việc đó được thực hiện bằng các kỹ thuật runtime scheduling, concurrent mode, time slicing. Những giải pháp này buộc họ phải tự tạo và quản lý một <em>stack</em> riêng, một công việc rất tốn kém</li>\n</ul>\n<p><strong>Điểm cộng của Template</strong></p>\n<ul>\n<li>Với cách tiếp cận trực tiếp hơn cho việc render, performance đương nhiên sẽ <em>gần</em> hơn render performance của trình duyệt, với cách viết template như thế này sẽ không thể nào thay đổi được thứ tứ của những element đã khai báo</li>\n</ul>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Lorem ipsum<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Lorem ipsum<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{ message }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Lorem ipsum<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Việc đoán trước được những gì có thể thay đổi, giúp việc cải thiện hiệu năng cũng sẽ dễ tiếp cận hơn </p>\n<ul>\n<li>Tùy vào tình huống, có thể giá trị baseline runtime sẽ thấp hơn</li>\n</ul>\n<p><strong>Điểm trừ của Template</strong></p>\n<ul>\n<li>Dính chặt vào cú pháp của Template, bạn sẽ mất đi một ít tự do bay nhảy bằng javascript thông thường. Sự sáng tạo của chúng ta bị giới hạn trong những thứ mà framework cung cấp. Lỡ đâu bạn đã là một master javascript và bạn thấy cách làm của framework này <em>chuối</em> cả nải và muốn làm khác hơn.</li>\n<li>Cái giá phải trả cho giá trị baseline runtime thấp sẽ là kết quả trả về của mỗi template sẽ dài dòng hơn. Đôi khi để code chạy nhanh nhất có thể, chúng ta phải nhét cứng một số thông tin bên trong output</li>\n</ul>\n<h2 id=\"cơ-chế-state\"><a href=\"#c%C6%A1-ch%E1%BA%BF-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cơ chế State</h2>\n<blockquote>\n<p>mutable vs immutable, dirty checking vs dependency tracking, reactivity vs simulated reactivity</p>\n</blockquote>\n<p>Rất tiếc, Evan You không có thời gian trình bài phần này trong bài thuyết trình của mình.</p>\n<h2 id=\"tổng-kết\"><a href=\"#t%E1%BB%95ng-k%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tổng kết</h2>\n<p>Nếu bạn đang muốn chọn một framework một cách hợp lý, bạn phải hiểu được những gì mà framework đó đang đánh đổi, biết hướng đi của framework đó có khớp với những gì bạn ưu tiên hàng đầu cho dự án mình làm.</p>\n<p>Các bạn có thể xem Video bài thuyết trình của Evan You <a href=\"https://www.youtube.com/watch?v=ANtSWq-zI0s\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ở đây</a></p>\n"}},{"node":{"title":"Làm sao để fetch dữ liệu bằng React Hook","path":"/lam-sao-de-fetch-du-lieu-bang-react-hook/","date":"18. November 2019","timeToRead":11,"desc":"Trong bài này chúng ta sẽ sử dụng React.useState, React.useEffect, React.useReducer để fetch dữ liệu từ API, đồng thời cũng viết một custom hook để có thể sử dụng ở bất kỳ đâu","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#g%e1%bb%8di-hook-th%e1%bb%a7-c%c3%b4ngb%e1%ba%b1ng-code\">Gọi hook thủ công/bằng code</a></li>\n<li><a href=\"#loading-indicator\">Loading indicator</a></li>\n<li><a href=\"#handle-error\">Handle Error</a></li>\n<li><a href=\"#fetch-data-v%e1%bb%9bi-form\">Fetch data với Form</a></li>\n<li><a href=\"#custom-hook-%c4%91%e1%bb%83-fetch-data\">Custom hook để Fetch data</a></li>\n<li><a href=\"#reducer-hook\">Reducer hook</a></li>\n<li><a href=\"#b%e1%bb%8f-qua-vi%e1%bb%87c-fetch-data\">Bỏ qua việc fetch data</a></li>\n</ul>\n<!-- /TOC -->\n<p>Chúng ta có một component, dữ liệu của component này sẽ được lấy từ API</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hits<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span><span class=\"token property-access\">hits</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span><span class=\"token property-access\">objectID</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">App</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chúng ta sẽ sử dụng axios để fetch dữ liệu, bạn thích xài cái khác thì cứ vô tư</p>\n<pre class=\"language-jsx{7-12}\"><code class=\"language-jsx{7-12}\">import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [data, setData] = useState({ hits: [] });\n  \n  useEffect(async () => {\n    const result = await axios(\n      'https://hn.algolia.com/api/v1/search?query=redux',\n    );\n    setData(result.data);\n  });\n\n  return (\n    <ul>\n      {data.hits.map(item => (\n        <li key={item.objectID}>\n          <a href={item.url}>{item.title}</a>\n        </li>\n      ))}\n    </ul>\n  );\n}\nexport default App;</code></pre>\n<p>Bên trong <code class=\"language-text\">React.useEffect</code> chúng ta sẽ thực hiện việc fetch data từ API, sau khi nhận được dữ liệu gán giá trị nhận được cho giá trị của state <code class=\"language-text\">data</code></p>\n<p>Nếu dừng ở đây, khi chạy bạn sẽ thấy một vòng lặp vô tận của việc gọi fetch data. Effect sẽ chạy không chỉ ở lúc component mount mà còn ở các lần update tiếp theo. Bởi vì chúng ta gán giá trị state trên mỗi lần fetch, component lại được update và effect lại được gọi lại để chạy. Chúng ta chỉ muốn <strong>fetch data khi component mount lần đầu tiên</strong>. Đó là lý do chúng ta phải thêm một mảng rỗng vào tham số thứ hai của effect, như vậy các lần update tiếp theo nó sẽ không được gọi.</p>\n<pre class=\"language-js{12}\"><code class=\"language-js{12}\">import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [data, setData] = useState({ hits: [] });\n  \n  useEffect(async () => {\n    const result = await axios(\n      'https://hn.algolia.com/api/v1/search?query=redux',\n    );\n    setData(result.data);\n  }, []);\n  \n  return (\n    <ul>\n      {data.hits.map(item => (\n        <li key={item.objectID}>\n          <a href={item.url}>{item.title}</a>\n        </li>\n      ))}\n    </ul>\n  );\n}\nexport default App;</code></pre>\n<p>Tham số thứ 2 truyền vào cho effect này là danh sách những giá trị nào mà hook phụ thuộc, tức nếu các giá trị này thay đổi thì effect được gọi lại. Bỏ array trống sẽ không còn chuyện chạy ở lần update.</p>\n<p>Trong đoạn code trên vẫn còn một chỗ phải chỉnh sửa, chúng ta sử dụng <code class=\"language-text\">async/await</code>, <em>theo như định nghĩa</em>, tất cả những hàm nào là <code class=\"language-text\">async</code> sẽ được ngầm hiểu là trả về một <code class=\"language-text\">Promise</code>. Tuy nhiên, cũng <em>theo như định nghĩa</em> effect hook không được trả về gì cả, hoặc một function để clean up (xem lại bài nói về Hook Effect, có giải thích 2 loại Effect Hook).</p>\n<p>Nên bạn mà copy đoạn trên mà chạy thì sẽ nhận thông báo bên dưới console. Không thể sử dụng async function bên trong <code class=\"language-text\">React.useEffect</code>, chúng ta sửa lại</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'https://hn.algolia.com/api/v1/search?query=redux'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Để fetch dữ liệu bằng <code class=\"language-text\">React.useEffect</code> có thể tóm gọn như ở trên. Chúng ta sẽ tiếp tục xem cách handle error, loading indicator, gọi fetch từ form và làm thế nào tái sử dụng hook để fetch</p>\n<h2 id=\"gọi-hook-thủ-côngbằng-code\"><a href=\"#g%E1%BB%8Di-hook-th%E1%BB%A7-c%C3%B4ngb%E1%BA%B1ng-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gọi hook thủ công/bằng code</h2>\n<p>Chúng ta đã xong phần fetch dữ liệu một lần lúc component mount. Nhưng làm thế nào để fetch dữ liệu khi có sự kiện từ user, ví dụ ô search, khi user nhập lấy danh sách kết quả tìm kiếm. Ví dụ bên dưới mặc định sẽ hiển thị kết quả cho từ khóa <code class=\"language-text\">redux</code>, nếu user nhập vào một giá trị khác, chúng ta cần làm sao để chạy <code class=\"language-text\">useEffect</code> một lần nữa</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Fragment</span><span class=\"token punctuation\">,</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> axios <span class=\"token keyword module\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hits<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>query<span class=\"token punctuation\">,</span> setQuery<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'redux'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'https://hn.algolia.com/api/v1/search?query=redux'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>query<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">event</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setQuery</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span><span class=\"token property-access\">hits</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span><span class=\"token property-access\">objectID</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">App</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Với nhu cầu như trên, chúng ta cần cập nhập lại <code class=\"language-text\">useEffect</code></p>\n<pre class=\"language-js{4}\"><code class=\"language-js{4}\">useEffect(() => {\n  const fetchData = async () => {\n    const result = await axios(\n      `http://hn.algolia.com/api/v1/search?query=${query}`,\n    );\n    setData(result.data);\n  };\n  fetchData();\n}, []);</code></pre>\n<p>Tuy nhiên, nếu chỉ như vậy, hàm <code class=\"language-text\">fetchData</code> sẽ không được gọi khi user input một giá trị mới vào ô tìm kiếm. Vì chúng ta đã truyền vào một mảng rỗng vào cho giá trị <code class=\"language-text\">depend</code> của effect, nên nó chỉ chạy lần đầu mount</p>\n<pre class=\"language-js{9}\"><code class=\"language-js{9}\">useEffect(() => {\n  const fetchData = async () => {\n    const result = await axios(\n      `http://hn.algolia.com/api/v1/search?query=${query}`,\n    );\n    setData(result.data);\n  };\n  fetchData();\n}, [query]);</code></pre>\n<p>Có một vấn đề khác, user cứ nhập một ký tự, câu <code class=\"language-text\">fetchData</code> lại được gọi, gọi liên tục như vậy không hay, thêm vào một nút để user click vào mới thực hiện search thì sao</p>\n<pre class=\"language-jsx{4,23,24,25}\"><code class=\"language-jsx{4,23,24,25}\">function App() {\n  const [data, setData] = useState({ hits: [] });\n  const [query, setQuery] = useState('redux');\n  const [search, setSearch] = useState('');\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(\n        `http://hn.algolia.com/api/v1/search?query=${query}`,\n      );\n      setData(result.data);\n    };\n    fetchData();\n  }, [query]);\n  \n  return (\n    <Fragment>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={event => setQuery(event.target.value)}\n      />\n      <button type=\"button\" onClick={() => setSearch(query)}>\n        Search\n      </button>\n      <ul>\n        {data.hits.map(item => (\n          <li key={item.objectID}>\n            <a href={item.url}>{item.title}</a>\n          </li>\n        ))}\n      </ul>\n    </Fragment>\n  );\n}</code></pre>\n<p>Giờ effect phải phụ thuộc vào <code class=\"language-text\">search</code>, không chạy khi user nhập vào input</p>\n<pre class=\"language-js{4,9,14}\"><code class=\"language-js{4,9,14}\">function App() {\n  const [data, setData] = useState({ hits: [] });\n  const [query, setQuery] = useState('redux');\n  const [search, setSearch] = useState('redux');\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(\n        `http://hn.algolia.com/api/v1/search?query=${search}`,\n      );\n      setData(result.data);\n    };\n    fetchData();\n  }, [search]);\n  \n  return (\n    ...\n  );\n}</code></pre>\n<p>Nhưng nếu sửa như vậy, trường hợp component được mount lần đầu, nó sẽ không có hiển thị kết quả cho từ khóa <code class=\"language-text\">redux</code> nữa. Nếu dùng thềm một <code class=\"language-text\">useEffect</code> khác cho trường hợp chạy lúc đầu sẽ gây nhầm lẫn, không rõ ràng, thay vào đó nếu chúng ta xem search state là nguyên cái <code class=\"language-text\">url</code> sẽ đơn giản hơn</p>\n<pre class=\"language-jsx{4,5,6,10,16,28}\"><code class=\"language-jsx{4,5,6,10,16,28}\">function App() {\n  const [data, setData] = useState({ hits: [] });\n  const [query, setQuery] = useState('redux');\n  const [url, setUrl] = useState(\n    'https://hn.algolia.com/api/v1/search?query=redux',\n  );\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(url);\n      \n      setData(result.data);\n    };\n    \n    fetchData();\n  }, [url]);\n  \n  return (\n    <Fragment>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={event => setQuery(event.target.value)}\n      />\n      <button\n        type=\"button\"\n        onClick={() =>\n          setUrl(`http://hn.algolia.com/api/v1/search?query=${query}`)\n        }\n      >\n        Search\n      </button>\n      <ul>\n        {data.hits.map(item => (\n          <li key={item.objectID}>\n            <a href={item.url}>{item.title}</a>\n          </li>\n        ))}\n      </ul>\n    </Fragment>\n  );\n}</code></pre>\n<h2 id=\"loading-indicator\"><a href=\"#loading-indicator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Loading indicator</h2>\n<p>Một nhu cầu khác cũng hay gặp là trong lúc fetch data từ API, chúng ta cần biết trạng thái loading tới đâu rồi, chúng ta sẽ bổ sung thêm state <code class=\"language-text\">isLoading</code></p>\n<pre class=\"language-jsx{7,11,16}\"><code class=\"language-jsx{7,11,16}\">function App() {\n  const [data, setData] = useState({ hits: [] });\n  const [query, setQuery] = useState('redux');\n  const [url, setUrl] = useState(\n    'https://hn.algolia.com/api/v1/search?query=redux',\n  );\n  const [isLoading, setIsLoading] = useState(false);\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      \n      const result = await axios(url);\n      \n      setData(result.data);\n      setIsLoading(false);\n    };\n    fetchData();\n  }, [url]);\n  \n  return (\n    <Fragment>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={event => setQuery(event.target.value)}\n      />\n      <button\n        type=\"button\"\n        onClick={() =>\n          setUrl(`http://hn.algolia.com/api/v1/search?query=${query}`)\n        }\n      >\n        Search\n      </button>\n      {isLoading ? (\n        <div>Loading ...</div>\n      ) : (\n        <ul>\n          {data.hits.map(item => (\n            <li key={item.objectID}>\n              <a href={item.url}>{item.title}</a>\n            </li>\n          ))}\n        </ul>\n      )}\n    </Fragment>\n  );\n}\nexport default App;</code></pre>\n<h2 id=\"handle-error\"><a href=\"#handle-error\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Handle Error</h2>\n<p>Cũng tương tự như loading, chúng ta sẽ bổ sung thêm state <code class=\"language-text\">isError</code> để xác định việc fetch dữ liệu có bị lỗi không</p>\n<pre class=\"language-jsx{8,12,20}\"><code class=\"language-jsx{8,12,20}\">function App() {\n  const [data, setData] = useState({ hits: [] });\n  const [query, setQuery] = useState('redux');\n  const [url, setUrl] = useState(\n    'https://hn.algolia.com/api/v1/search?query=redux',\n  );\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n      \n      try {\n        const result = await axios(url);\n        \n        setData(result.data);\n      } catch (error) {\n        setIsError(true);\n      }\n      \n      setIsLoading(false);\n    };\n    fetchData();\n  }, [url]);\n  return (\n    <Fragment>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={event => setQuery(event.target.value)}\n      />\n      <button\n        type=\"button\"\n        onClick={() =>\n          setUrl(`http://hn.algolia.com/api/v1/search?query=${query}`)\n        }\n      >\n        Search\n      </button>\n      {isError && <div>Something went wrong ...</div>}\n      {isLoading ? (\n        <div>Loading ...</div>\n      ) : (\n        <ul>\n          {data.hits.map(item => (\n            <li key={item.objectID}>\n              <a href={item.url}>{item.title}</a>\n            </li>\n          ))}\n        </ul>\n      )}\n    </Fragment>\n  );\n}</code></pre>\n<h2 id=\"fetch-data-với-form\"><a href=\"#fetch-data-v%E1%BB%9Bi-form\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Fetch data với Form</h2>\n<p>Nãy giờ chúng ta chỉ fetch data với bằng input và button. Khi có nhiều element hơn, chúng ta sẽ đưa nó vào <code class=\"language-text\">form</code> để có thể trigger form submit bằng cách nhấn Enter</p>\n<pre class=\"language-jsx{5,6,7,8,9,10,16,17}\"><code class=\"language-jsx{5,6,7,8,9,10,16,17}\">function App() {\n  ...\n  return (\n    <Fragment>\n      <form\n        onSubmit={event =>\n          setUrl(`http://hn.algolia.com/api/v1/search?query=${query}`)\n          event.preventDefault();\n        }\n      >\n        <input\n          type=\"text\"\n          value={query}\n          onChange={event => setQuery(event.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {isError && <div>Something went wrong ...</div>}\n      ...\n    </Fragment>\n  );\n}</code></pre>\n<h2 id=\"custom-hook-để-fetch-data\"><a href=\"#custom-hook-%C4%91%E1%BB%83-fetch-data\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Custom hook để Fetch data</h2>\n<p>Để tái sử dụng được các đoạn code liên quan đến việc fetch data, chúng ta sẽ đưa nó ra thành một custom hook, các giá trị liên quan trực tiếp đến việc fetch data, cụ thể là loading, error chúng ta cũng đưa vào trong custom hook</p>\n<pre class=\"language-js{1,24}\"><code class=\"language-js{1,24}\">const useHackerNewsApi = () => {\n  const [data, setData] = useState({ hits: [] });\n  const [url, setUrl] = useState(\n    'https://hn.algolia.com/api/v1/search?query=redux',\n  );\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n      try {\n        const result = await axios(url);\n        setData(result.data);\n      } catch (error) {\n        setIsError(true);\n      }\n      setIsLoading(false);\n    };\n    \n    fetchData();\n  }, [url]);\n  \n  return [{ data, isLoading, isError }, setUrl];\n}</code></pre>\n<p>Sử dụng bên trong App Component</p>\n<pre class=\"language-jsx{3,8}\"><code class=\"language-jsx{3,8}\">function App() {\n  const [query, setQuery] = useState('redux');\n  const [{ data, isLoading, isError }, doFetch] = useHackerNewsApi();\n  \n  return (\n    <Fragment>\n      <form onSubmit={event => {\n        doFetch(`http://hn.algolia.com/api/v1/search?query=${query}`);\n        event.preventDefault();\n      }}>\n        <input\n          type=\"text\"\n          value={query}\n          onChange={event => setQuery(event.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      ...\n    </Fragment>\n  );\n}</code></pre>\n<p>Giá trị state lúc khởi tạo của thể đưa vào như một tham số truyền vào cho custom hook luôn</p>\n<pre class=\"language-jsx{5,6}\"><code class=\"language-jsx{5,6}\">import React, { Fragment, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useDataApi = (initialUrl, initialData) => {\n  const [data, setData] = useState(initialData);\n  const [url, setUrl] = useState(initialUrl);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n      try {\n        const result = await axios(url);\n        setData(result.data);\n      } catch (error) {\n        setIsError(true);\n      }\n      setIsLoading(false);\n    };\n    \n    fetchData();\n  }, [url]);\n  \n  return [{ data, isLoading, isError }, setUrl];\n};\n\nfunction App() {\n  const [query, setQuery] = useState('redux');\n  const [{ data, isLoading, isError }, doFetch] = useDataApi(\n    'https://hn.algolia.com/api/v1/search?query=redux',\n    { hits: [] },\n  );\n  \n  return (\n    <Fragment>\n      <form\n        onSubmit={event => {\n          doFetch(\n            `http://hn.algolia.com/api/v1/search?query=${query}`,\n          );\n          event.preventDefault();\n        }}\n      >\n        <input\n          type=\"text\"\n          value={query}\n          onChange={event => setQuery(event.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {isError && <div>Something went wrong ...</div>}\n      {isLoading ? (\n        <div>Loading ...</div>\n      ) : (\n        <ul>\n          {data.hits.map(item => (\n            <li key={item.objectID}>\n              <a href={item.url}>{item.title}</a>\n            </li>\n          ))}\n        </ul>\n      )}\n    </Fragment>\n  );\n}\nexport default App;</code></pre>\n<h2 id=\"reducer-hook\"><a href=\"#reducer-hook\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reducer hook</h2>\n<p>Với cái custom hook để fetch data như ở trên, chúng ta thấy có 2 state <code class=\"language-text\">isLoading</code>, <code class=\"language-text\">isError</code> quan hệ khá <em>mật thiết</em> với nhau, có thể hợp nhất 2 đứa nó lại bằng <code class=\"language-text\">React.useReducer</code></p>\n<pre class=\"language-jsx{5,9,10,11,16,17,18,19}\"><code class=\"language-jsx{5,9,10,11,16,17,18,19}\">import React, {\n  Fragment,\n  useState,\n  useEffect,\n  useReducer,\n} from 'react';\nimport axios from 'axios';\n\nconst dataFetchReducer = (state, action) => {\n  ...\n};\n\nconst useDataApi = (initialUrl, initialData) => {\n  const [url, setUrl] = useState(initialUrl);\n  \n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialData,\n  });\n  ...\n};</code></pre>\n<p><code class=\"language-text\">React.useReducer</code> sẽ nhận vào một hàm reducer (công dụng tương tự như hàm reducer của redux ấy) và các giá trị khởi tạo của state, trong trường hợp của chúng ta là <code class=\"language-text\">isLoading</code> và <code class=\"language-text\">isError</code>. Việc này chẳng qua là gom tất cả state liên quan vào một object cho nó <em>tinh tế</em> thôi, thay vì từng state riêng biệt như sử dụng <code class=\"language-text\">useState</code></p>\n<pre class=\"language-js{16,19,21}\"><code class=\"language-js{16,19,21}\">const dataFetchReducer = (state, action) => {\n  ...\n};\n\nconst useDataApi = (initialUrl, initialData) => {\n  const [url, setUrl] = useState(initialUrl);\n  \n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialData,\n  });\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      dispatch({ type: 'FETCH_INIT' });\n      try {\n        const result = await axios(url);\n        dispatch({ type: 'FETCH_SUCCESS', payload: result.data });\n      } catch (error) {\n        dispatch({ type: 'FETCH_FAILURE' });\n      }\n    };\n    fetchData();\n  }, [url]);\n  \n  ...\n};</code></pre>\n<p>Mình đã bảo rồi, nó sẽ giống như cái reducer trong redux thôi, chúng ta <code class=\"language-text\">dispatch</code> một object gồm <code class=\"language-text\">type</code> và <code class=\"language-text\">payload</code>, căn cứ vào payload mà chúng ta xử lý, cập nhập state</p>\n<p>Cuối cùng chúng ta cập nhập lại giá trị trả về của custom hook nữa</p>\n<pre class=\"language-jsx{12}\"><code class=\"language-jsx{12}\">const useDataApi = (initialUrl, initialData) => {\n  const [url, setUrl] = useState(initialUrl);\n  \n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialData,\n  });\n  \n  ...\n  \n  return [state, setUrl];\n};</code></pre>\n<p>Cuối cùng, không kém phần quan trọng, phần code thực hiện bên trong <code class=\"language-text\">dataFetchReducer</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dataFetchReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'FETCH_INIT'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token spread operator\">...</span>state<span class=\"token punctuation\">,</span>\n        isLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        isError<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'FETCH_SUCCESS'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token spread operator\">...</span>state<span class=\"token punctuation\">,</span>\n        isLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        isError<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">payload</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'FETCH_FAILURE'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token spread operator\">...</span>state<span class=\"token punctuation\">,</span>\n        isLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        isError<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"bỏ-qua-việc-fetch-data\"><a href=\"#b%E1%BB%8F-qua-vi%E1%BB%87c-fetch-data\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bỏ qua việc fetch data</h2>\n<p>Tình huống là khi user chuyển qua một route khác, khi đang fetch data, việc gọi fetch ko cần thiết và có thể bỏ qua</p>\n<pre class=\"language-jsx{11,17,21,29}\"><code class=\"language-jsx{11,17,21,29}\">const useDataApi = (initialUrl, initialData) => {\n  const [url, setUrl] = useState(initialUrl);\n  \n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialData,\n  });\n  \n  useEffect(() => {\n    let didCancel = false;\n    \n    const fetchData = async () => {\n      dispatch({ type: 'FETCH_INIT' });\n      try {\n        const result = await axios(url);\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_SUCCESS', payload: result.data });\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_FAILURE' });\n        }\n      }\n    };\n    \n    fetchData();\n    \n    return () => {\n      didCancel = true;\n    };\n    \n  }, [url]);\n  \n  return [state, setUrl];\n};</code></pre>\n<p>Với việc return một function ở cuối của <code class=\"language-text\">React.useEffect</code>, tên gọi các bạn React đặt là clean up function, nằm trong kiểu effect cần clean up - nói thật mình phát mệt với việc các bạn trong team React cứ thích <em>chế</em> thêm liên tục như vậy.</p>\n<blockquote>\n<p>Nói theo cách của mình đi, nếu bạn return một function ở cuối của <code class=\"language-text\">React.useEffect</code> nó sẽ chạy khi component bị unmount.</p>\n</blockquote>\n<p>Source code có thể tham khảo đầy đủ <a href=\"https://github.com/the-road-to-learn-react/use-data-api/blob/master/src/index.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ở đây</a></p>\n<p><a href=\"https://www.robinwieruch.de/react-hooks-fetch-data\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.robinwieruch.de/react-hooks-fetch-data</a></p>\n"}},{"node":{"title":"Tại sao lại sinh ra React hook","path":"/tai-sao-lai-sinh-ra-react-hook/","date":"17. November 2019","timeToRead":9,"desc":"Tại sao và lợi ích mà react hook đem lại là gì, mà thiên hạ cứ rần rần lên vậy?","content":"<!-- TOC -->\n<ul>\n<li>\n<p><a href=\"#l%e1%bb%8bch-s%e1%bb%ad\">Lịch sử</a></p>\n<ul>\n<li><a href=\"#th%c3%a1ng-5-2013\">Tháng 5, 2013</a></li>\n<li><a href=\"#th%c3%a1ng-gi%c3%aang-2015\">Tháng giêng, 2015</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#v%e1%ba%a5n-%c4%91%e1%bb%81-t%e1%bb%93n-%c4%91%e1%bb%8dng\">Vấn đề tồn đọng</a></p>\n<ul>\n<li><a href=\"#logic-tr%c3%b9ng-l%e1%ba%b7p\">Logic trùng lặp</a></li>\n<li><a href=\"#chia-s%e1%ba%bd-logic\">Chia sẽ logic</a></li>\n</ul>\n</li>\n<li><a href=\"#gi%e1%ba%a3i-quy%e1%ba%bft\">Giải quyết</a></li>\n</ul>\n<!-- /TOC -->\n<p>Qua bài viết này chúng ta sẽ cùng trả lời 2 câu hỏi bạn cần đặt ra khi tiếp cận một <strong>đồ chơi mới</strong> như React Hook</p>\n<ol>\n<li>Tại sao nó lại tồn tại trên trái đất này?</li>\n<li>Nó tồn tại trên trái đất này có lợi ích gì không?</li>\n</ol>\n<h2 id=\"lịch-sử\"><a href=\"#l%E1%BB%8Bch-s%E1%BB%AD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lịch sử</h2>\n<h3 id=\"tháng-5-2013\"><a href=\"#th%C3%A1ng-5-2013\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tháng 5, 2013</h3>\n<p>Nếu bạn còn nhớ về cách viết một component trong React bằng <code class=\"language-text\">React.createClass</code>, chứng tỏ bạn đã là già làng trong React, ngày mới ra đời khi javascript không hề có khai báo <code class=\"language-text\">class</code>, chúng ta sẽ khai báo component như thế này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">ReposGrid</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getInitialState</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>      \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">componentDidMount</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">componentDidUpdate</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"tháng-giêng-2015\"><a href=\"#th%C3%A1ng-gi%C3%AAng-2015\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tháng giêng, 2015</h3>\n<p>Tổ chức <em>Ác ma</em> thế giới công bố chuẩn EcmaScript 2015, còn gọi với tên thân thương ES6. <strong>class</strong> chính thức có mặt trong javascript. Đội ngũ phát triển của React lúc đó kết luận, chúng ta <em>không cần phát minh lại cái bánh xe</em> (don't reinvent the wheel), cứ xài theo chuẩn đã có. Thế là từ đó chúng ta khai báo component bằng <code class=\"language-text\">class extends</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ReposGrid</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      repos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">updateRepos</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updateRepos</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidMount</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidUpdate</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Khi khai báo component bằng <code class=\"language-text\">class</code>, chúng ta khởi tạo giá trị của <code class=\"language-text\">state</code> bên trong phương thức <code class=\"language-text\">constructor</code> và nó sẽ được nhét vào trong <code class=\"language-text\">this</code>. Tuy nhiên, với cách khai báo đã <em>quốc tế hóa</em> của <code class=\"language-text\">class</code>, nếu chúng ta <code class=\"language-text\">extends</code> từ một <code class=\"language-text\">class</code>, chúng ta phải gọi <code class=\"language-text\">super()</code> trước khi có thể sử dụng <code class=\"language-text\">this</code>. Và riêng với React, chúng ta còn phải truyền thêm <code class=\"language-text\">props</code> vào trong <code class=\"language-text\">super</code>. Các bạn lập trình viên <em>phát bệnh</em> vì cách viết chướng mắt này.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 🤮</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Ngày xưa khi dùng <code class=\"language-text\">createClass</code> của React, bên trong hàm đó nó sẽ làm luôn chuyện binding toàn bộ <code class=\"language-text\">this</code> vào các phương thức cho một instance của component. Tuy nhiên khi viết <code class=\"language-text\">extends React.Component</code> chuyện đó ko còn tự động xảy ra <em>như phép màu</em> nữa, chúng ta phải đi <code class=\"language-text\">.bind</code> từng phương thức một trong <code class=\"language-text\">constructor</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">updateRepos</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updateRepos</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 😭</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu nhìn vào các bạn sẽ nói, ồ cái này chả to tác gì đâu, chỉ là phải viết thêm mấy dòng ấy mà. Cũng vì lầm đường lạc lối theo class <em>Ác ma</em> mà React bị ko biết bao nhiều lời phàn nàn từ những lập trình viên khắp mọi nơi.</p>\n<p>Hên sao, không lâu sau đó Class Field được thêm vào trong <code class=\"language-text\">class</code>, chúng ta có thể khai báo một biến bên trong <code class=\"language-text\">class</code> mà không cần dùng <code class=\"language-text\">constructor</code>, thay vì <code class=\"language-text\">.bind</code> chúng ta dùng arrow function</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ReposGrid</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n  <span class=\"token function-variable function\">updateRepos</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"vấn-đề-tồn-đọng\"><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81-t%E1%BB%93n-%C4%91%E1%BB%8Dng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vấn đề tồn đọng</h2>\n<p>Vấn đề đã được giải quyết tương đối ổn thỏa? Tuy nhiên vẫn còn vấn đề khác React team cảm thấy chưa hài lòng lắm phiên bản hiện tại.</p>\n<p>Ý tưởng chính của React là để chúng ta có thể quản lý những ứng dụng phức tạp bằng cách chia ra thành từng component nhỏ rồi <em>kết hợp</em> (compose) lại với nhau. Đây là cách làm tạo ra <em>thương hiệu</em> sáng ngời của React. Cách tiếp cận theo kiểu component chả có vấn đề gì, cách <strong>hiện thực</strong> những component hiện tại đang có vấn đề.</p>\n<h3 id=\"logic-trùng-lặp\"><a href=\"#logic-tr%C3%B9ng-l%E1%BA%B7p\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Logic trùng lặp</h3>\n<p>Trước đây chúng ta thiết kế component dựa rất nhiều vào component lifecycle. Chúng ta đặt để logic vào trong các từng lifecycle này, thí dụ như chúng ta cần phải gọi cùng một hàm bên trong cả 2 phương thức lifecycle <code class=\"language-text\">componentDidMount</code>, <code class=\"language-text\">componentDidUpdate</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentDidMount</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updateRepos</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">componentDidUpdate</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updateRepos</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function-variable function\">updateRepos</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">fetchRepos</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">repos</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      repos<span class=\"token punctuation\">,</span>\n      loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Để giải quyết vấn đề side effect (hàm <code class=\"language-text\">fetchRepos</code> làm cái quần gì ở ngoài đường ai mà biết, rõ ràng nó không thuộc phạm vi quản lý của component). Chúng ta <strong>cần một cách tiếp cận khác không thể sử dụng lifecycle nữa</strong></p>\n<h3 id=\"chia-sẽ-logic\"><a href=\"#chia-s%E1%BA%BD-logic\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chia sẽ logic</h3>\n<p>Khi nghĩ về sự kết hợp giữa các component trong React, chúng ta sẽ nghĩ về cách các đối tượng UI kết hợp với nhau.</p>\n<pre class=\"language-js\"><code class=\"language-js\">view <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span></code></pre>\n<p>Trong thực tế, viết một ứng dụng không phải chỉ bao gồm tầng UI, rất nhiều trường hợp chúng ta cần <strong>tái sử dụng logic, kết hợp các logic lại với nhau</strong>. Trước đây React chưa hề có cách nào đáp ứng được nhu cầu này.</p>\n<p>Ví dụ nếu có một component khác, nó cũng cần xài biến state <code class=\"language-text\">repos</code> và tất cả những logic liên quan, mà những cái đó nó đang nằm bên trong component <code class=\"language-text\">ReposGrid</code>. Làm sao chúng ta lấy ra xài lại? Cách bình thường là chúng ta copy-paste toàn bộ code bên trong qua một component mới. Cũng nhiều người làm vậy, ai có kinh nghiệm hơn thì dùng Higher-Order Component</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">withRepos</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WithRepos</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      repos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">componentDidMount</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updateRepos</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">componentDidUpdate</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updateRepos</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function-variable function\">updateRepos</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token function\">fetchRepos</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">repos</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          repos<span class=\"token punctuation\">,</span>\n          loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span>\n          <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">this</span><span class=\"token punctuation\">.</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">this</span><span class=\"token punctuation\">.</span><span class=\"token attr-value\">state</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Rồi giờ có bất kỳ component nào muốn dùng <code class=\"language-text\">repos</code> thì cứ mẹ-bồng-con thế này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ReposGrid.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ReposGrid</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> repos <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\">withRepos</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">ReposGrid</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Profile.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Profile</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> repos <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\">withRepos</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Profile</span><span class=\"token punctuation\">)</span></code></pre>\n<p><em>Hồi xưa</em> chúng ta hay làm vậy, hoặc là dùng Render Props để chia sẻ những logic dùng tới dùng lui. Tuy nhiên, đây là cách tiếp cận không dành cho dân nghiệp dư, vì không phải dễ mà hiểu được cách tụi HOC nó chạy, thứ 2 nếu bạn cho chục mẹ bồng một đứa con thì sẽ sinh ra chuyện <code class=\"language-text\">wrapper hell</code> giống như callback hell</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\">withHover</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">withTheme</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">withAuth</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">withRepos</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Profile</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Vận động não để hiểu đoạn này chạy kết quả thể nào</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WithHover</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WithTheme</span> <span class=\"token attr-name\">hovering</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{false}</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WithAuth</span> <span class=\"token attr-name\">hovering</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{false}</span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>dark<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WithRepos</span> <span class=\"token attr-name\">hovering</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{false}</span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>dark<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">authed</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{true}</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Profile</span> \n          <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>JavaScript<span class=\"token punctuation\">'</span></span>\n          <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{true}</span> \n          <span class=\"token attr-name\">repos</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{[]}</span>\n          <span class=\"token attr-name\">authed</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{true}</span>\n          <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>dark<span class=\"token punctuation\">'</span></span>\n          <span class=\"token attr-name\">hovering</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{false}</span>\n        <span class=\"token punctuation\">/></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>WithRepos</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>WithAuth</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WithTheme</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>WithHover</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Tóm lại những vấn đề trước mặt cần giải quyết là gì</p>\n<ul>\n<li>gọi <code class=\"language-text\">super(props)</code> là quá xàm xí đú</li>\n<li><code class=\"language-text\">this</code> là thứ mơ hồ mà không dễ biết cách nó hoạt động, bạn có thể là chuyên gia và biết đấy, nhưng chúng ta tuân thủ nguyên tắc khi code <strong>KISS</strong>, ngu ngốc nhất có thể, đừng tỏ ra thông minh</li>\n<li>Tổ chức logic theo các phương thức lifecycle không còn hợp lý hợp tình</li>\n<li>React chưa có câu trả lời chính thức nào cho việc chia sẻ logic (HOC là từ pattern của javascript, không phải đặc sản nhà React, nên không tính)</li>\n</ul>\n<h2 id=\"giải-quyết\"><a href=\"#gi%E1%BA%A3i-quy%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giải quyết</h2>\n<p>Từ React 0.14 chúng ta có 2 cách tạo component, dùng class hoặc dùng function. Nếu cần state và các lifecycle thì dùng class, nếu chỉ nhận props rồi trả về UI thì dùng function. Đó là cách chúng ta được dạy.</p>\n<p>Bác CTO John Carmack nói, em xin lỗi sửa câu văn của bác chút</p>\n<blockquote>\n<p>Tụi bây dẹp phương thức, class, framework hết dùm tao cái, Dùng hết function đi</p>\n</blockquote>\n<p>React team, chân lý đây rồi, chúng ta tìm cách biến function component đáp ứng được những gì class component làm được đi.</p>\n<p>Với function component, chúng ta chả cần quan tâm tới <code class=\"language-text\">super(props)</code>, <code class=\"language-text\">this</code> chạy thế nào. Chúng ta sẽ bổ sung state, giải quyết lifecycle, chia sẻ logic nữa là xong.</p>\n<p>Và thế là các hook của React ra đời: <code class=\"language-text\">useState</code>, <code class=\"language-text\">useEffect</code>, custom hook</p>\n<p>Để sử dụng state, chúng ta dùng hook là <code class=\"language-text\">React.useState</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ReposGrid</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> repos<span class=\"token punctuation\">,</span> setRepos <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> loading<span class=\"token punctuation\">,</span> setLoading <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Lifecycle thì có thể bạn sẽ buồn (hoặc vui) khi nghe tin này. Nếu bắt đầu sử dụng React hook, function component, dẹp hết những gì bạn đã từng biết về lifecycle của component đi, quên đi những việc cần làm ở giai đoạn này, giai đoạn kia của component. Bạn hay tiếp cận <em>cách tư duy khác</em> hoàn toàn <strong>Đồng bộ hóa</strong></p>\n<p>Thử nghĩ những gì bạn làm ở một sự kiện của lifecycle, có thể là đổi state, fetch dữ liệu, cập nhập DOM, tất cả đều gom về một mục đích duy nhất <strong>Đồng bộ hóa</strong>. Những gì chúng ta cần đồng bộ thường là những thứ nằm ngoài React (gọi API, DOM, đại loại như thế) với những thứ bên trong React (state) hoặc ngược lại</p>\n<p>Khi tiếp cận theo hướng đồng bộ hóa thay vì lifecycle event, nó cho phép chúng ta gom các logic liên quan lại với nhau. Để làm việc đó React cho chúng ta một Hook gọi là <code class=\"language-text\">React.useEffect</code></p>\n<p>Theo định nghĩa, <code class=\"language-text\">useEffect</code> cho phép chúng ta thực hiện side effect bên trong function component. Hàm này sẽ dùng để <strong>re-sync</strong> (thực hiện đồng bộ hóa các giá trị)</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>username<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>username<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Đoạn code trên sẽ chạy lại bất cứ khi nào giá trị state <code class=\"language-text\">username</code> có thay đổi</p>\n<p>Để gọi lại <code class=\"language-text\">fetchRepos</code> khi có thay đổi từ state <code class=\"language-text\">repos</code> ở ví dụ trên</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ReposGrid</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> repos<span class=\"token punctuation\">,</span> setRepos <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> loading<span class=\"token punctuation\">,</span> setLoading <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">fetchRepos</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">repos</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setRepos</span><span class=\"token punctuation\">(</span>repos<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Loading</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Như vậy, chúng ta đã có thể nói lời chia tay mãi mãi với <code class=\"language-text\">React.Component</code>, <code class=\"language-text\">constructor</code>, <code class=\"language-text\">super</code>, <code class=\"language-text\">this</code>, lifecycle</p>\n<p>Còn lại với cuộc chiến chống Higher-Order Component và Render Props. Để dùng lại logic, chúng ta sẽ vẫn dùng Hook, nhưng không phải do React làm sẵn cho <em>xơi</em>, chúng ta phải tự viết những custom Hook</p>\n<p>Giờ chúng ta sẽ viết một custom hook <code class=\"language-text\">useRepos</code>, nó sẽ nhận một <code class=\"language-text\">id</code> lấy dữ liệu tương ứng.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useRepos</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> repos<span class=\"token punctuation\">,</span> setRepos <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> loading<span class=\"token punctuation\">,</span> setLoading <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">fetchRepos</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">repos</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setRepos</span><span class=\"token punctuation\">(</span>repos<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span> loading<span class=\"token punctuation\">,</span> repos <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Điều ngon lành ở đây là tất cả những gì liên quan đến <code class=\"language-text\">repos</code> điều gói gọn trong hook, ở đây mình muốn nói đến <code class=\"language-text\">loading</code>, <code class=\"language-text\">repos</code></p>\n<p>Sử dụng custom hook này trên các component khác nhau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ReposGrid</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> loading<span class=\"token punctuation\">,</span> repos <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRepos</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n\n  <span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Profile</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> loading<span class=\"token punctuation\">,</span> repos <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRepos</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Thật không thể tin được bạn có thể khai báo và setState bên trong một function bình thường. Chúng ta đã có một React mạnh mẽ với các đặc tính sau</p>\n<ul>\n<li>Đơn giản hóa</li>\n<li>Đóng gói</li>\n<li>Linh động</li>\n<li>Mở rộng</li>\n</ul>\n<p>Không những giải quyết vấn đề đang có, như cách mà các bạn làm marketing cho React tuyên truyền: sử dụng Hook để có <code class=\"language-text\">state</code> bên trong function component. Thật ra nó còn mang tới những giá trị to lớn khác là tăng khả năng tái sử dụng và kết hợp logic.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.youtube.com/watch?v=eX_L39UvZes\">📜 Why React Hooks?</a></p>\n"}},{"node":{"title":"Gắn video làm background toàn màn hình","path":"/gan-video-lam-background-toan-man-hinh/","date":"12. November 2019","timeToRead":3,"desc":"Chia sẽ kỹ thuật làm background video để chạy full màn hình","content":"<p>Kết quả các bạn có thể xem trên trang mình mới làm\n<a href=\"http://chat-production.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://chat-production.com/</a></p>\n<p>Để có một cái video chạy toàn màn hình, chúng ta sẽ nghĩ ngay đến việc dùng thẻ <code class=\"language-text\">&lt;video /&gt;</code> của HTML5, đặt nó trong một cái <code class=\"language-text\">&lt;div/&gt;</code> có kích thước <code class=\"language-text\">width: 100%</code>, buồn thay nó không đúng như chúng ta mong đợi.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- HTML --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>videoContainer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">loop</span> <span class=\"token attr-name\">autoplay</span> <span class=\"token attr-name\">muted</span> <span class=\"token attr-name\">playsinline</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/show-reel.mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<blockquote>\n<p>Thêm <code class=\"language-text\">playsinline</code> để có thể chạy trên IOS như iPhone</p>\n</blockquote>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token id\">#container</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span><span class=\"token unit\">vw</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token selector\">video</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token unit\">%</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token unit\">%</span><span class=\"token punctuation\">;</span>   \n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Thứ nhất là nó sẽ không tự scale ra 100% của màn hình, thứ 2 khi chúng ta kéo to thu nhỏ cửa sổ trình duyệt, tỷ lệ khung hình (ngang và đứng) cũng sẽ không đạt đúng tỉ lệ thật của video.</p>\n<p>Để video có thể thay đổi kích thước theo từng giá trị màn hình khác nhau, chúng ta phải dùng đến javascript và css</p>\n<pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">#videoContainer </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token unit\">vh</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">780</span><span class=\"token unit\">px</span><span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span><span class=\"token unit\">vw</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">video </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token unit\">vw</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* canh video ngay giữa */</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token unit\">%</span><span class=\"token punctuation\">;</span> <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token unit\">%</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span><span class=\"token number\">-50</span><span class=\"token unit\">%</span><span class=\"token punctuation\">,</span> <span class=\"token number\">-50</span><span class=\"token unit\">%</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Source này được lấy từ <a href=\"https://codetheory.in/html5-fullscreen-background-video/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codetheory.in/html5-fullscreen-background-video/</a>, mình sử dụng chung với React</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// JS</span>\n  <span class=\"token keyword\">var</span> video <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"video\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    container <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#videoContainer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">setVideoDimensions</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> w <span class=\"token operator\">=</span> video<span class=\"token punctuation\">.</span><span class=\"token property-access\">videoWidth</span><span class=\"token punctuation\">,</span>\n      h <span class=\"token operator\">=</span> video<span class=\"token punctuation\">.</span><span class=\"token property-access\">videoHeight</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Intrinsic Ratio</span>\n    <span class=\"token comment\">// Will be more than 1 if W > H and less if W &lt; H</span>\n    <span class=\"token keyword\">var</span> videoRatio <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">/</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Get the container's computed styles</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// Also calculate the min dimensions required (this will be</span>\n    <span class=\"token comment\">// the container dimensions)</span>\n    <span class=\"token keyword\">var</span> containerStyles <span class=\"token operator\">=</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getComputedStyle</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      minW <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>containerStyles<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getPropertyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      minH <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>containerStyles<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getPropertyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// What's the min:intrinsic dimensions</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// The idea is to get which of the container dimension</span>\n    <span class=\"token comment\">// has a higher value when compared with the equivalents</span>\n    <span class=\"token comment\">// of the video. Imagine a 1200x700 container and</span>\n    <span class=\"token comment\">// 1000x500 video. Then in order to find the right balance</span>\n    <span class=\"token comment\">// and do minimum scaling, we have to find the dimension</span>\n    <span class=\"token comment\">// with higher ratio.</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// Ex: 1200/1000 = 1.2 and 700/500 = 1.4 - So it is best to</span>\n    <span class=\"token comment\">// scale 500 to 700 and then calculate what should be the</span>\n    <span class=\"token comment\">// right width. If we scale 1000 to 1200 then the height</span>\n    <span class=\"token comment\">// will become 600 proportionately.</span>\n    <span class=\"token keyword\">var</span> widthRatio <span class=\"token operator\">=</span> minW <span class=\"token operator\">/</span> w<span class=\"token punctuation\">,</span>\n      heightRatio <span class=\"token operator\">=</span> minH <span class=\"token operator\">/</span> h<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Whichever ratio is more, the scaling</span>\n    <span class=\"token comment\">// has to be done over that dimension</span>\n    <span class=\"token keyword\">let</span> newWidth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> newHeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>widthRatio <span class=\"token operator\">></span> heightRatio<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      newWidth <span class=\"token operator\">=</span> minW<span class=\"token punctuation\">;</span>\n      newHeight <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">ceil</span><span class=\"token punctuation\">(</span>newWidth <span class=\"token operator\">/</span> videoRatio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      newHeight <span class=\"token operator\">=</span> minH<span class=\"token punctuation\">;</span>\n      newWidth <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">ceil</span><span class=\"token punctuation\">(</span>newHeight <span class=\"token operator\">*</span> videoRatio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    video<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">width</span> <span class=\"token operator\">=</span> newWidth <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span>\n    video<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">height</span> <span class=\"token operator\">=</span> newHeight <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  video<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loadedmetadata\"</span><span class=\"token punctuation\">,</span> setVideoDimensions<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resize\"</span><span class=\"token punctuation\">,</span> setVideoDimensions<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đoạn js trên để đảm bảo kích thước của video được scale ra hết khung hình và thay đổi cho phù hợp khi trình duyệt thay đổi kích thước</p>\n<blockquote>\n<p>Dùng 2 listener <code class=\"language-text\">loadedmetadata</code> trên video và <code class=\"language-text\">resize</code> trên window để chỉnh lại kích thước thẻ video</p>\n</blockquote>\n"}},{"node":{"title":"Tại sao lại viết Super(props)","path":"/tai-sao-lai-viet-super-props/","date":"10. November 2019","timeToRead":5,"desc":"Bài cũ, dịch cũng lâu rồi, giờ mới đăng lên trang cá nhân của mình","content":"<p>Nghe nói <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hook</a> đang là trend. Trớ trêu thay, tôi muốn viết bài đầu tiên cho blog này để nói về điều thú vị của <em>class</em> component.</p>\n<p><strong>Vấn đề này <em>không</em> liên quan tới việc sử dụng React một cách hiệu quả. Nhưng bạn sẽ cảm thấy chúng thú vị nếu như bạn muốn tìm hiểu sâu hơn về cách hoạt động.</strong></p>\n<p>Đây là bài đầu tiên.</p>\n<hr>\n<p>Chúng ta đã viết <code class=\"language-text\">super(props)</code> không biết bao nhiêu lần trong đời:</p>\n<pre class=\"language-jsx{3}\"><code class=\"language-jsx{3}\">class Checkbox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isOn: true };\n  }\n  // ...\n}</code></pre>\n<p>Dĩ nhiên, nếu áp dụng <a href=\"https://github.com/tc39/proposal-class-fields\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">class field proposal</a> thì có thể bỏ qua <em>nghi thức</em> này:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Cú pháp này <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#es7-property-initializers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">đã  được hoạch định</a> khi React 0.13 đã hỗ trợ cho plain class năm 2015. KHai báo <code class=\"language-text\">constructor</code> và gọi <code class=\"language-text\">super(props)</code> luôn là kế hoạch tạm thời cho đến khi có một cách khác tốt hơn.</p>\n<p>Quay về ví dụ,  chỉ sử dụng các tính năng của ES2015:</p>\n<pre class=\"language-jsx{3}\"><code class=\"language-jsx{3}\">class Checkbox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isOn: true };\n  }\n  // ...\n}</code></pre>\n<p><strong>Tại sao chúng ta lại gọi <code class=\"language-text\">super</code>? Chúng ta có thể <em>không</em> gọi chúng được không? Nếu chúng ta gọi chúng, thì chuyện gì sẽ xảy ra nếu chúng ta không truyền <code class=\"language-text\">props</code>? Truyền thêm các tham số khác được không?</strong> Cùng tìm hiểu nào.</p>\n<hr>\n<p>Trong JavaScript, <code class=\"language-text\">super</code> để gọi lại constructor của class cha. (Trong ví dụ của chúng ta, nó trỏ về <code class=\"language-text\">React.Component</code>.)</p>\n<p>Điều quan trọng, bạn <strong>không thể sử dụng <code class=\"language-text\">this</code></strong> trong constructor nếu chưa gọi đến constructor của class cha. JavaScript sẽ không để bạn làm việc này:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 🔴  Không thể dùng `this` được</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ✅  Giờ thì dùng được rồi</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Có một lý do chính đáng giải thích vì sao JavaScript phải thực hiện constructor của lớp cha trước khi đụng vào <code class=\"language-text\">this</code>. Hãy xem xét trường hợp sau:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PolitePerson</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🔴  Điều này không cho phép, đọc lý do ở bên dưới</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Chào buổi sáng!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Hãy tưởng tượng, khi bạn có thể dùng <code class=\"language-text\">this</code> trước <code class=\"language-text\">super</code>. Một tháng sau, chúng ta đổi <code class=\"language-text\">greetColleagues</code>, thêm <code class=\"language-text\">this.name</code> khi alert:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Chào buổi sáng!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tên tôi là '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">+</span> <span class=\"token string\">', rất vui được gặp bạn!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>Nhưng chúng ta quên rằng <code class=\"language-text\">this.greetColleagues()</code> được gọi trước <code class=\"language-text\">super()</code>, giá trị <code class=\"language-text\">this.name</code> <strong>chỉ có sau khi gọi <code class=\"language-text\">super()</code></strong>! Lúc này bạn có thể thấy, code như thế này khó để biết được lỗi ở đâu.</p>\n<p>Để tránh những điều như vậy, <strong>JavaScript chỉ định rằng nếu bạn muốn sử dụng <code class=\"language-text\">this</code> bên trong constructor, bạn <em>phải</em> gọi <code class=\"language-text\">super</code> trước.</strong> Để cho thằng cha làm việc của nó! Và điều này cũng áp dụng với các lớp React components:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ✅  Okay, dùng `this` được rồi</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta cùng đến với câu hỏi khác: phải sao phải truyền vào <code class=\"language-text\">props</code>?</p>\n<hr>\n<p>Bạn hãy nghĩ đơn giản rằng khi truyền <code class=\"language-text\">props</code> vào <code class=\"language-text\">super</code> là cần thiết để <code class=\"language-text\">React.Component</code> constructor có thể thiết lập <code class=\"language-text\">this.props</code>:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Bên trong React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nó thật sự là <a href=\"https://github.com/facebook/react/blob/1d25aa5787d4e19704c049c3cfa985d3b5190e0d/packages/react/src/ReactBaseClasses.js#L22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cách mà chúng tôi thực hiện bên trong React.Component</a>.</p>\n<p>Bằng cách nào đó, nếu bạn gọi <code class=\"language-text\">super()</code> mà không có tham số <code class=\"language-text\">props</code>, bạn vẫn có thể sử dụng <code class=\"language-text\">this.props</code> trong phương thức <code class=\"language-text\">render</code> và các phương thức khác. (Nếu không tin, hãy tự kiểm tra xem!)</p>\n<p>Vậy <em>nó</em> hoạt động như thế nào? Hóa ra <strong>React đã gán <code class=\"language-text\">props</code> cho một instance ngay sau constructor:</strong></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token comment\">// Bên trong React</span>\n  <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  instance<span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></code></pre>\n<p>Thế nên khi bạn quên bỏ thằng <code class=\"language-text\">props</code> vào <code class=\"language-text\">super()</code>, thì trong React bạn vẫn có thể gọi nó sau đó. Có một lý do cho việc này.</p>\n<p>Khi React hỗ trợ thêm class, nó không chỉ hỗ trợ class cho mỗi phiên bản ES6. Mà mục tiêu chính là hỗ trợ nhiều class abstract nhất có thể. <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#other-languages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Không rõ</a> làm thế nào ClojureScript, CoffeeScript, ES6, Fable, Scala.js, TypeScript, hoặc các giải pháp khác định nghĩa component. Vì vậy, React sử dụng <code class=\"language-text\">super()</code> không hề là quan điểm cá nhân.</p>\n<p>Vậy có nghĩa là bạn có thể gọi <code class=\"language-text\">super()</code> thay vì <code class=\"language-text\">super(props)</code>?</p>\n<p><strong>Không. Như vậy rất khó hiểu.</strong> Chắc chắn, React sẽ gán <code class=\"language-text\">this.props</code> <em>sau khi</em>  constructor chạy. Nhưng <code class=\"language-text\">this.props</code> vẫn  là <code class=\"language-text\">undefined</code> <em>giữa</em> lúc gọi <code class=\"language-text\">super</code> và kết thúc constructor:</p>\n<pre class=\"language-jsx{14}\"><code class=\"language-jsx{14}\">// Bên trong React\nclass Component {\n  constructor(props) {\n    this.props = props;\n    // ...\n  }\n}\n\n// Bên trong code của bạn\nclass Button extends React.Component {\n  constructor(props) {\n    super(); // 😬 Chúng ta không truyền vào props\n    console.log(props);      // ✅ {}\n    console.log(this.props); // 😬 undefined - chưa định nghĩa \n  }\n  // ...\n}</code></pre>\n<p>Việc debug sẽ trở nên khó khăn nếu như một vài phương thức được gọi <em>từ</em> constructor. <strong>Đó là lý do vì sao luôn khuyến khích bạn sử dụng <code class=\"language-text\">super(props)</code>, mặc dù nó không phải quy định bắt buộc:</strong></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Chúng ta truyền props vào </span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ✅ {}</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ {}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Điều này đảm bảo <code class=\"language-text\">this.props</code> sẽ được thiết lập trong constructor.</p>\n<hr>\n<p>Có một điều cuối mà khiến cho các fan lâu năm của React tò mò.</p>\n<p>Bạn có thể thấy rằng khi sử dụng Context API bên trong class (hoặc với <code class=\"language-text\">contextTypes</code> cũ hoặc với <code class=\"language-text\">contextType</code> API được thêm vào ở React 16.6), <code class=\"language-text\">context</code> được đẩy vào tham số thứ hai trong constructor.</p>\n<p>Vậy tại sao chúng ta không viết là <code class=\"language-text\">super(props, context)</code>? Có thể chứ, nhưng context ít khi sử dụng nên việc phát sinh lỗi cũng ít xuất hiện.</p>\n<p><strong>Với <a href=\"https://github.com/tc39/proposal-class-fields\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">class fields proposal</a> thì những vấn đề này hầu như biến mất.</strong> Không có constructor, tất cả các tham số đều được truyền vào một cách tự động. Đây là những lý do cho phép một biểu thức <code class=\"language-text\">state = {}</code> bao gồm cả các tham chiếu <code class=\"language-text\">this.props</code> hoặc <code class=\"language-text\">this.context</code> nếu cần thiết.</p>\n<p>Với Hooks, chúng ta thậm chí không có <code class=\"language-text\">super</code> hoặc <code class=\"language-text\">this</code>. Nhưng chủ đề đó sẽ giành cho một ngày khác.</p>\n<p><strong>Bài viết được dịch từ</strong> <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://overreacted.io/why-do-we-write-super-props/\">Why Do We Write super(props)?</a></p>\n"}},{"node":{"title":"Sử dụng React Hook Effect","path":"/su-dung-react-hook-effect/","date":"3. July 2019","timeToRead":16,"desc":"Bài này mình contribute cho http://vi.reactjs.org về cách sử dụng React Hook Effect","content":"<!-- TOC -->\n<ul>\n<li>\n<p><a href=\"#Effect-kh%C3%B4ng-c%E1%BA%A7n-Cleanup-effects-without-cleanup\">Effect không cần Cleanup {#effects-without-cleanup}</a></p>\n<ul>\n<li><a href=\"#V%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-Classes-example-using-classes\">Ví dụ sử dụng Classes {#example-using-classes}</a></li>\n<li><a href=\"#V%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-Hook-example-using-hooks\">Ví dụ sử dụng Hook {#example-using-hooks}</a></li>\n<li><a href=\"#Gi%E1%BA%A3i-th%C3%ADch-c%E1%BB%A5-th%E1%BB%83-detailed-explanation\">Giải thích cụ thể {#detailed-explanation}</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#Effect-c%E1%BA%A7n-Cleanup-effects-with-cleanup\">Effect cần Cleanup {#effects-with-cleanup}</a></p>\n<ul>\n<li><a href=\"#V%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-Class-example-using-classes-1\">Ví dụ sử dụng Class {#example-using-classes-1}</a></li>\n<li><a href=\"#V%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-Hooks-example-using-hooks-1\">Ví dụ sử dụng Hooks {#example-using-hooks-1}</a></li>\n</ul>\n</li>\n<li><a href=\"#T%E1%BB%95ng-h%E1%BB%A3p-recap\">Tổng hợp {#recap}</a></li>\n<li>\n<p><a href=\"#Tip-s%E1%BB%AD-d%E1%BB%A5ng-Effect-tips-for-using-effects\">Tip sử dụng Effect {#tips-for-using-effects}</a></p>\n<ul>\n<li><a href=\"#Tip-S%E1%BB%AD-d%E1%BB%A5ng-nhi%E1%BB%81u-Effect-t%C3%A1ch-bi%E1%BB%87ttip-use-multiple-effects-to-separate-concerns\">Tip: Sử dụng nhiều Effect tách biệt{#tip-use-multiple-effects-to-separate-concerns}</a></li>\n<li><a href=\"#Gi%E1%BA%A3i-th%C3%ADch-T%E1%BA%A1i-sao-Effect-ch%E1%BA%A1y-tr%C3%AAn-m%E1%BB%97i-update-explanation-why-effects-run-on-each-update\">Giải thích: Tại sao Effect chạy trên mỗi update {#explanation-why-effects-run-on-each-update}</a></li>\n<li><a href=\"#Tip-T%E1%BB%91i-%C6%B0u-Performance-b%E1%BA%B1ng-c%C3%A1ch-b%E1%BB%8F-qua-Effect-tip-optimizing-performance-by-skipping-effects\">Tip: Tối ưu Performance bằng cách bỏ qua Effect {#tip-optimizing-performance-by-skipping-effects}</a></li>\n</ul>\n</li>\n<li><a href=\"#B%C6%B0%E1%BB%9Bc-ti%E1%BA%BFp-theo-next-steps\">Bước tiếp theo {#next-steps}</a></li>\n</ul>\n<!-- /TOC -->\n<p><em>Hook</em> là một tính năng mới từ React 16.8. Nó cho phép sử dụng state và các tính năng khác của React mà không cần viết dạng class</p>\n<p><em>Effect Hook</em> cho phép thực hiện side effect bên trong các function component:</p>\n<pre class=\"language-js{1,6-10}\"><code class=\"language-js{1,6-10}\">import React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  // Tương tự như componentDidMount và componentDidUpdate:\n  useEffect(() => {\n    // Cập nhập document title sử dụng browser API\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}</code></pre>\n<p>Đoạn snippet này dựa trên <a href=\"http://vi.reactjs.org/docs/hooks-state.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ví dụ về counter ở trang trước</a>, chúng ta có thêm tính năng mới: đặt giá trị document title tương ứng với số lần click.</p>\n<p>Fetching data, thiết lập các subscription, và tự ý thay đổi DOM trong React component, những hành động như vậy được là \"side effect\" (hoặc \"effect\").</p>\n<blockquote>\n<p>Tip</p>\n<p>Nếu bạn quen với các phương thức lifecycle của React class, bạn có thể hình dung <code class=\"language-text\">useEffect</code> Hook như sự kết hợp của <code class=\"language-text\">componentDidMount</code>, <code class=\"language-text\">componentDidUpdate</code>, và <code class=\"language-text\">componentWillUnmount</code>.</p>\n</blockquote>\n<p>Có 2 loại side effect phổ biến trong React component: loại không cần cleanup, và loại cần. Cùng phân biệt 2 loại này kỹ hơn.</p>\n<h2 id=\"effect-không-cần-cleanup-effects-without-cleanup\"><a href=\"#effect-kh%C3%B4ng-c%E1%BA%A7n-cleanup-effects-without-cleanup\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Effect không cần Cleanup {#effects-without-cleanup}</h2>\n<p>Đôi lúc, chúng ta muốn <strong>chạy một vài đoạn code sau khi React đã cập nhập DOM.</strong> Network request, tự ý thay đổi DOM, và logging là những ví dụ điển hình của effect không cần cleanup. Chúng ta gọi như vậy vì có thể chạy chúng và quên ngay lập tức. Hãy so sánh class và Hook cho phép thực hiện side effect như thế ra sao.</p>\n<h3 id=\"ví-dụ-sử-dụng-classes-example-using-classes\"><a href=\"#v%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-classes-example-using-classes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ví dụ sử dụng Classes {#example-using-classes}</h3>\n<p>Trong React class components, phương thức <code class=\"language-text\">render</code> không được phép tạo ra side effect. Nó sẽ là quá sớm -- chúng ta thường chỉ muốn chạy effect <em>sau khi</em> React đã cập nhập DOM.</p>\n<p>Đó là lý do tại sao trong React class, chúng ta đặt side effect bên trong <code class=\"language-text\">componentDidMount</code> và <code class=\"language-text\">componentDidUpdate</code>. Quay lại ví dụ, đây là React counter class component sẽ cập nhập document title ngay sau khi React thay đổi DOM:</p>\n<pre class=\"language-js{9-15}\"><code class=\"language-js{9-15}\">class Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  componentDidMount() {\n    document.title = `You clicked ${this.state.count} times`;\n  }\n\n  componentDidUpdate() {\n    document.title = `You clicked ${this.state.count} times`;\n  }\n\n  render() {\n    return (\n      <div>\n        <p>You clicked {this.state.count} times</p>\n        <button onClick={() => this.setState({ count: this.state.count + 1 })}>\n          Click me\n        </button>\n      </div>\n    );\n  }\n}</code></pre>\n<p>Để ý cách <strong>chúng ta đã lập lại 2 thao tác tương tự nhau bên trong 2 phương thức lifecycle</strong></p>\n<p>Đó là bởi vì trong đa phần các trường hợp, chúng ta muốn thực hiện cùng một side effect khi component đã mount hoặc đã update. Một cách tổng quát, chúng ta muốn thực hiện sau mỗi lần render -- nhưng React class component không có phương thức như vậy. Chúng ta có thể tách nó ra thành một hàm riêng, nhưng vẫn phải gọi nó ở 2 nơi khác nhau.</p>\n<p>Bây giờ chúng ta xem cách làm tương tự với <code class=\"language-text\">useEffect</code> Hook.</p>\n<h3 id=\"ví-dụ-sử-dụng-hook-example-using-hooks\"><a href=\"#v%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-hook-example-using-hooks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ví dụ sử dụng Hook {#example-using-hooks}</h3>\n<p>Chúng ta đã xem ví dụ ở trên, giờ xem kỹ hơn một lần nữa:</p>\n<pre class=\"language-js{1,6-8}\"><code class=\"language-js{1,6-8}\">import React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}</code></pre>\n<p><strong><code class=\"language-text\">useEffect</code> đã làm gì?</strong> Bằng cách sử dụng Hook này, chúng ta nói với React rằng component của chúng ta cần thực hiện một việc gì đó sau khi render. React sẽ ghi nhớ hàm bạn truyền vào (chúng tôi thích gọi nó là \"effect\"), và sau đó gọi lại hàm này sau khi DOM đã update. Trong effect này, chúng ta đổi document title, chúng ta cũng có thể  fetch data hoặc gọi một số API khác.</p>\n<p><strong>Tại sao <code class=\"language-text\">useEffect</code> được gọi bên trong component?</strong> Đặt <code class=\"language-text\">useEffect</code> bên trong component cho phép chúng ta truy xuất đến state <code class=\"language-text\">count</code> (hoặc bất kỳ prop nào) bên trong effect. Chúng ta không cần một API đặc biệt để đọc nó -- nó đã nằm trong scope của function. Hook tận dụng JavaScript closures và tránh cung cấp thêm các APIs mà bản thân JavaScript đã có sẵn giải pháp.</p>\n<p><strong><code class=\"language-text\">useEffect</code> chạy sau tất cả những lần render?</strong> Đúng! Theo mặc định, nó chạy sau lần render đầu tiên <em>và</em> mỗi lần update. (Chúng ta sẽ nói về <a href=\"#tip-optimizing-performance-by-skipping-effects\">làm cách nào để tùy biến lại</a>.) Thay vì nghĩ theo hướng \"mounting\" và \"updating\", bạn sẽ thấy dễ hiểu hơn nếu nghĩ theo kiểu \"sau khi render\". React đảm bảo DOM đã được update trước khi chạy effect.</p>\n<h3 id=\"giải-thích-cụ-thể-detailed-explanation\"><a href=\"#gi%E1%BA%A3i-th%C3%ADch-c%E1%BB%A5-th%E1%BB%83-detailed-explanation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giải thích cụ thể {#detailed-explanation}</h3>\n<p>Giờ chúng ta đã hiểu về effect, đoạn code này sẽ rất dễ hiểu:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Example</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chúng ta khai báo state <code class=\"language-text\">count</code>, và sau đó nói với React chúng ta cần sử dụng. Chúng ta truyền cho <code class=\"language-text\">useEffect</code> Hook một hàm. Hàm truyền vào này <em>là</em> effect. Bên trong effect, chúng ta đặt document title sử dụng API <code class=\"language-text\">document.title</code>. Chúng ta có thể đọc giá trị sau cùng của <code class=\"language-text\">count</code> bên trong effect bởi vì nó nằm chung scope với function. Khi React render component, nó sẽ nhớ lại effect chúng ta đã gửi, và chạy effect sau khi cập nhập DOM. Nó xảy ra ở tất cả các lần render, kể cả lần đầu.</p>\n<p>Lập trình viên JavaScript có kinh nghiệm sẽ để ý thấy function truyền vào cho <code class=\"language-text\">useEffect</code> sẽ khác nhau cho tất cả các lần render. Đây là điều cố ý. Thật ra, nó sẽ cho chúng ta đọc giá trị <code class=\"language-text\">count</code> bên trong effect mà không cần lo lắng về việc lấy state. Mỗi lần chúng ta re-render, chúng ta gọi một effect <strong>khác</strong>, thay thế cái trước đó. Bằng cách này, nó làm cho effect như một phần của việc render -- mỗi effect \"thuộc vào\" một render cụ thể. Chúng ta sẽ hiểu tại sao cách này lại hiệu quả <a href=\"#explanation-why-effects-run-on-each-update\">ở phần sau của bài này</a>.</p>\n<blockquote>\n<p>Tip</p>\n<p>Không giống <code class=\"language-text\">componentDidMount</code> hoặc <code class=\"language-text\">componentDidUpdate</code>, effect chạy với <code class=\"language-text\">useEffect</code> không block trình duyệt cập nhập màn hình. Các effect chủ yếu không cần xảy ra tuần tự. Trong vài tình huống không mấy phổ biến (ví dụ như đo layout), chúng ta có  <a href=\"http://vi.reactjs.org/docs/hooks-reference.html#uselayouteffect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useLayoutEffect</code></a> Hook với API tính năng tương tự như <code class=\"language-text\">useEffect</code>.</p>\n</blockquote>\n<h2 id=\"effect-cần-cleanup-effects-with-cleanup\"><a href=\"#effect-c%E1%BA%A7n-cleanup-effects-with-cleanup\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Effect cần Cleanup {#effects-with-cleanup}</h2>\n<p>Ở trên, chúng ta đã bàn về những side effect không cần cleanup. Tuy nhiên, một vài effect cần có. Ví dụ, <strong>chúng ta muốn thiết lập các subscription</strong> cho vài data source bên ngoài. Tình huống đó, clean up là rất quan trọng để không xảy ra memory leak! Cùng so sánh cách làm giữa class và Hook</p>\n<h3 id=\"ví-dụ-sử-dụng-class-example-using-classes-1\"><a href=\"#v%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-class-example-using-classes-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ví dụ sử dụng Class {#example-using-classes-1}</h3>\n<p>Trong React class, chúng ta thường cài đặt một subscription trong <code class=\"language-text\">componentDidMount</code>, và clean it up trong <code class=\"language-text\">componentWillUnmount</code>. Lấy ví dụ, chúng ta có <code class=\"language-text\">ChatAPI</code> module cho phép chúng ta subscribe vào tình trạng online của 1 danh sách friend. Cách chúng ta làm với class</p>\n<pre class=\"language-js{8-26}\"><code class=\"language-js{8-26}\">class FriendStatus extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isOnline: null };\n    this.handleStatusChange = this.handleStatusChange.bind(this);\n  }\n\n  componentDidMount() {\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n\n  componentWillUnmount() {\n    ChatAPI.unsubscribeFromFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n\n  handleStatusChange(status) {\n    this.setState({\n      isOnline: status.isOnline\n    });\n  }\n\n  render() {\n    if (this.state.isOnline === null) {\n      return 'Loading...';\n    }\n    return this.state.isOnline ? 'Online' : 'Offline';\n  }\n}</code></pre>\n<p>Để ý <code class=\"language-text\">componentDidMount</code> và <code class=\"language-text\">componentWillUnmount</code>. Phương thức Lifecycle buộc chúng ta tách logic này ra thậm chí cả 2 đoạn code trên điều liên quan đến cùng một effect.</p>\n<blockquote>\n<p>Lưu ý</p>\n<p>Nếu để ý kỹ hơn, bạn sẽ thấy chúng ta còn cần thêm <code class=\"language-text\">componentDidUpdate</code> để thực sự chuẩn xác. Tạm thời cứ bỏ qua phần đó vì chúng ta sẽ đề cập lại <a href=\"#explanation-why-effects-run-on-each-update\">ở phần sau</a> of this page.</p>\n</blockquote>\n<h3 id=\"ví-dụ-sử-dụng-hooks-example-using-hooks-1\"><a href=\"#v%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-hooks-example-using-hooks-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ví dụ sử dụng Hooks {#example-using-hooks-1}</h3>\n<p>Cùng xem cách chúng ta làm với Hook.</p>\n<p>Bạn có thể sẽ nghĩ chúng ta cần 2 effect khác nhau để thực hiện cleanup. Code khởi tạo và xóa subscription luôn luôn đứng kề nhau, <code class=\"language-text\">useEffect</code> được thiết kế để dữ chúng cùng một chỗ. Nếu effect trả về function, React sẽ chạy  function đó, chúng ta đưa clean up vào bên trong function trả về:</p>\n<pre class=\"language-js{6-16}\"><code class=\"language-js{6-16}\">import React, { useState, useEffect } from 'react';\n\nfunction FriendStatus(props) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    // Chỉ định clean up sau khi gọi effect:\n    return function cleanup() {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}</code></pre>\n<p><strong>Tại sao chúng ta trả về function bên trong effect?</strong> Đây là một tùy chọn để chạy cơ chế cleanup cho effect. Nó cho phép chúng ta đưa tạo và xóa subscription trong cùng một effect.</p>\n<p><strong>Khi nào React clean up một effect?</strong> React thực hiện cleanup khi  component unmount. Tuy nhiên, như đã học trước đó, effect trên tất cả những lần render, không phải chỉ một. Đó là tại sao React <em>đồng thời</em> cleans up effect từ những lần render trước. Chúng ta sẽ thảo luận thêm <a href=\"#explanation-why-effects-run-on-each-update\">việc này giúp tránh bug</a> và <a href=\"#tip-optimizing-performance-by-skipping-effects\">làm cách nào tùy biến đặc tính này để cái thiện performance </a> ở bên dưới.</p>\n<blockquote>\n<p>Ghi chú</p>\n<p>Chúng ta không cần trả về một function có tên trong effect. Chúng ta gọi nó là <code class=\"language-text\">cleanup</code> để chỉ rõ mục đích, bạn có thể dùng arrow function trong thực tế.</p>\n</blockquote>\n<h2 id=\"tổng-hợp-recap\"><a href=\"#t%E1%BB%95ng-h%E1%BB%A3p-recap\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tổng hợp {#recap}</h2>\n<p>Chúng ta đã học <code class=\"language-text\">useEffect</code> cho phép chúng ta thực hiện nhiều kiểu side effect sau khi component được render. Một vài effect cần cleanup nó sẽ return một function:</p>\n<pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span><span class=\"token property-access\">isOnline</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">friend</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">friend</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Một vài effect khác có thể không cần cleanup, thì không cần return gì cả.</p>\n<pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Effect Hook được sử dụng trong cả 2 trường hợp.</p>\n<hr>\n<p><strong>Nếu bạn đã nắm bắt được cách làm việc của Effect Hook, hoặc nếu bạn cảm thấy hơi ngợp, có thể nhảy xuống <a href=\"http://vi.reactjs.org/docs/hooks-rules.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">phần Nguyên tắc sử dụng Hook</a> bây giờ.</strong></p>\n<hr>\n<h2 id=\"tip-sử-dụng-effect-tips-for-using-effects\"><a href=\"#tip-s%E1%BB%AD-d%E1%BB%A5ng-effect-tips-for-using-effects\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tip sử dụng Effect {#tips-for-using-effects}</h2>\n<p>Chúng ta sẽ cùng đi sâu một số khía cạnh của <code class=\"language-text\">useEffect</code> mà các lập trình viên React có kinh nghiệm sẽ thắc mắc. Không cần quá cưỡng ép bản thân, bạn có thể dừng ở đây, và quay lại để tìm hiểu Effect Hook bất cứ lúc nào.</p>\n<h3 id=\"tip-sử-dụng-nhiều-effect-tách-biệttip-use-multiple-effects-to-separate-concerns\"><a href=\"#tip-s%E1%BB%AD-d%E1%BB%A5ng-nhi%E1%BB%81u-effect-t%C3%A1ch-bi%E1%BB%87ttip-use-multiple-effects-to-separate-concerns\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tip: Sử dụng nhiều Effect tách biệt{#tip-use-multiple-effects-to-separate-concerns}</h3>\n<p>Một trong những vấn đề đã liệt kê ở  <a href=\"http://vi.reactjs.org/docs/hooks-intro.html#complex-components-become-hard-to-understand\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">động lực</a> tạo ra Hooks là các phương thức lifecycle của class thường chứa những logic không liên quan với nhau, còn những logic đáng lý phải nằm gần nhau lại nằm ở các phương thức khác nhau. Đây là component kết hợp counter và friend status từ ví dụ ở trên</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FriendStatusWithCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> isOnline<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleStatusChange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">handleStatusChange</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">friend</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleStatusChange</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">friend</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleStatusChange</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      isOnline<span class=\"token operator\">:</span> status<span class=\"token punctuation\">.</span><span class=\"token property-access\">isOnline</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span></code></pre>\n<p>Để ý cái logic của <code class=\"language-text\">document.title</code> đang nằm ở <code class=\"language-text\">componentDidMount</code> và <code class=\"language-text\">componentDidUpdate</code>. Logic của subscription thì cũng nằm ở  <code class=\"language-text\">componentDidMount</code> và <code class=\"language-text\">componentWillUnmount</code>. Và <code class=\"language-text\">componentDidMount</code> chứa code cả hai.</p>\n<p>Như vậy hook đã giải quyết vấn đề này như thế nào? Nếu như <a href=\"http://vi.reactjs.org/docs/hooks-state.html#tip-using-multiple-state-variables\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bạn có thể sử dụng <em>State</em> Hook nhiều lần</a>, bạn cũng có thể sử dụng nhiều effect. Nó cho phép tách những logic không liên quan ra thành những effect khác nhau:</p>\n<pre class=\"language-js{3,8}\"><code class=\"language-js{3,8}\">function FriendStatusWithCounter(props) {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  const [isOnline, setIsOnline] = useState(null);\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n  // ...\n}</code></pre>\n<p><strong>Hook cho phép tách code dựa trên cái nó đang làm</strong> chứ không đi theo phương thức lifecycle. React sẽ apply <em>từng</em> effect được sử dụng trong component, theo thứ tự đã khai báo.</p>\n<h3 id=\"giải-thích-tại-sao-effect-chạy-trên-mỗi-update-explanation-why-effects-run-on-each-update\"><a href=\"#gi%E1%BA%A3i-th%C3%ADch-t%E1%BA%A1i-sao-effect-ch%E1%BA%A1y-tr%C3%AAn-m%E1%BB%97i-update-explanation-why-effects-run-on-each-update\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giải thích: Tại sao Effect chạy trên mỗi update {#explanation-why-effects-run-on-each-update}</h3>\n<p>Nếu đã từng sử dụng class, bạn sẽ thắc mắc tại sao bước cleanup effect lại chạy trên mỗi lần re-render, mà không phải khi unmounting. Xét một ví dụ thực tế để thấy tại sao thiết kế này giúp chúng ta có những component ít bug hơn</p>\n<p><a href=\"#example-using-classes-1\">Ở phần trước</a>, chúng ta có đề cập ví dụ <code class=\"language-text\">FriendStatus</code> để hiển thị trạng thái online của Friend. Class đọc <code class=\"language-text\">friend.id</code> từ <code class=\"language-text\">this.props</code>, subscribe sau khi component mount, và unsubscribe trong lúc unmounting:</p>\n<pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">friend</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleStatusChange</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">friend</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleStatusChange</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p><strong>Chuyện gì sẽ xảy ra nếu prop <code class=\"language-text\">friend</code> thay đổi</strong> trong khi component đang hiển thị trên màn hình (chưa unmount)? Chắc chắn có bug với danh sách status. Chúng ta cũng có thể gây ra memory leak hoặc crash khi đang unmounting và gọi unsubscribe nếu có một Friend ID không đúng.</p>\n<p>Trong class component, chúng ta cần thêm <code class=\"language-text\">componentDidUpdate</code> để xử lý tình huống này:</p>\n<pre class=\"language-js{8-19}\"><code class=\"language-js{8-19}\">  componentDidMount() {\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n\n  componentDidUpdate(prevProps) {\n    // Unsubscribe friend.id trước đó\n    ChatAPI.unsubscribeFromFriendStatus(\n      prevProps.friend.id,\n      this.handleStatusChange\n    );\n    // Subscribe friend.id mới\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n\n  componentWillUnmount() {\n    ChatAPI.unsubscribeFromFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }</code></pre>\n<p>Quên handle <code class=\"language-text\">componentDidUpdate</code> là điều dễ dẫn tới có bug trong React.</p>\n<p>Đây là phiên bản sử dụng Hook</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">FriendStatus</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">friend</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">friend</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Không còn bị dính bug như ở trên</p>\n<p>Sẽ không có một đoạn code nào đặc biệt để xử lý lúc update vì theo cách chạy <em>mặc định</em> của <code class=\"language-text\">useEffect</code> nó đã xóa effect trước khi apply effect mới. Để hình dung hóa, đây là các bước gọi subscribe và unsubscribe mà component đã chạy qua:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Mount với prop { friend: { id: 100 } }</span>\n<span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Chạy effect đầu tiên</span>\n\n<span class=\"token comment\">// Cập nhập prop { friend: { id: 200 } }</span>\n<span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Clean effect trước đó</span>\n<span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Chạy effect tiếp theo</span>\n\n<span class=\"token comment\">// Cập nhập với { friend: { id: 300 } }</span>\n<span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Clean effect trước đó</span>\n<span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Chạy effect tiếp theo</span>\n\n<span class=\"token comment\">// Unmount</span>\n<span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Clean effect lần cuối</span></code></pre>\n<p>Đặc tính này đảm bảo thống nhất và ngăn bug thường xuất hiện do không cập nhập login với class component</p>\n<h3 id=\"tip-tối-ưu-performance-bằng-cách-bỏ-qua-effect-tip-optimizing-performance-by-skipping-effects\"><a href=\"#tip-t%E1%BB%91i-%C6%B0u-performance-b%E1%BA%B1ng-c%C3%A1ch-b%E1%BB%8F-qua-effect-tip-optimizing-performance-by-skipping-effects\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tip: Tối ưu Performance bằng cách bỏ qua Effect {#tip-optimizing-performance-by-skipping-effects}</h3>\n<p>Trong một số trường hợp, clean và apply effect sau khi render có thể dẫn đến ảnh hưởng performance. Trong class component, chúng ta giải quyết bằng viết một hàm so sánh giữa <code class=\"language-text\">prevProps</code> hoặc <code class=\"language-text\">prevState</code> bên trong <code class=\"language-text\">componentDidUpdate</code>:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đây là yêu cầu rất cần thiết, nên đã được có đưa sẵn trong <code class=\"language-text\">useEffect</code> Hook API. Bạn có thể bảo React <em>bỏ qua</em> việc apply effect nếu một số giá trị không thay đổi giữa các lần render. Để làm như vậy, truyền vào một array (không bắt buộc) vào <code class=\"language-text\">useEffect</code>:</p>\n<pre class=\"language-js{3}\"><code class=\"language-js{3}\">useEffect(() => {\n  document.title = `You clicked ${count} times`;\n}, [count]); // Chỉ re-run effect nếu giá trị count thay đổi</code></pre>\n<p>Trong ví dụ ở trên, chúng ta truyền vào <code class=\"language-text\">[count]</code> như một tham số thứ 2. Nó nghĩa là gì? Nếu <code class=\"language-text\">count</code> là <code class=\"language-text\">5</code>, rồi sau đó component re-render với <code class=\"language-text\">count</code> vẫn bằng <code class=\"language-text\">5</code>, React sẽ so sánh <code class=\"language-text\">[5]</code> từ lần render trước và <code class=\"language-text\">[5]</code> với lần render hiện tại. Vì tất cả giá trị trong mảng bằng nhau (<code class=\"language-text\">5 === 5</code>), React sẽ bỏ qua  effect. Đó là cách chúng ta tối ưu</p>\n<p>Khi chúng ta render với <code class=\"language-text\">count</code> thành <code class=\"language-text\">6</code>, React sẽ so sánh các giá trị trong <code class=\"language-text\">[5]</code> từ lần render trước với các giá trị trong <code class=\"language-text\">[6]</code> lần render hiện tại. Ở lần này, React sẽ gọi lại effect vì <code class=\"language-text\">5 !== 6</code>. Nếu có nhiều giá trị bên trong array, React sẽl re-run effect nếu một trong các giá trị đó khác với lần trước.</p>\n<p>Effect cũng làm việc tương tự với quá trình cleanup:</p>\n<pre class=\"language-js{10}\"><code class=\"language-js{10}\">useEffect(() => {\n  function handleStatusChange(status) {\n    setIsOnline(status.isOnline);\n  }\n\n  ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n  return () => {\n    ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n  };\n}, [props.friend.id]); // Chỉ re-subscribe nếu props.friend.id bị thay đổi</code></pre>\n<p>Trong tương lai, tham số thứ 2 sẽ được tự động thêm vào trong lúc  build-transform.</p>\n<blockquote>\n<p>Lưu ý</p>\n<p>Nếu sử dụng cách tối ưu này, phải chắc chắn array chứa <strong>tất cả giá trị bên trong của component scope (như prop và state) nếu thay đổi theo các lần render và effect có sử dụng</strong>. Nếu không, nếu không nó sẽ tham chiếu tới giá trị trước đó. Đọc thêm <a href=\"http://vi.reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">làm việc với function</a> và <a href=\"http://vi.reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">làm gì khi array thay đổi thường xuyên</a>.</p>\n<p>Nếu muốn chạy 1 effect và clean nó 1 lần duy nhất (lúc mount và unmount), bạn có thể truyền vào array rỗng (<code class=\"language-text\">[]</code>). Đồng nghĩa với việc bạn báo với React, effect này không phụ thuộc <em>bất kỳ</em> giá trị nào của prop hoặc state, do đó không bao giờ cần re-run. Nó không phải là một trường hợp  được xử lý đặc biệt -- nó đúng với cách so sánh array hiện tại</p>\n<p>Nếu truyền vào array rỗng (<code class=\"language-text\">[]</code>), prop và state bên trong effect sẽ luôn mang giá trị khởi tạo. Trong khi truyền vào <code class=\"language-text\">[]</code> nó gần giống với <code class=\"language-text\">componentDidMount</code> và <code class=\"language-text\">componentWillUnmount</code>, nó thường là <a href=\"http://vi.reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">giải pháp</a> <a href=\"http://vi.reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tốt hơn</a> để tránh re-run effect quá thường xuyên. Tuy nhiên, đừng quên React sẽ chỉ chạy <code class=\"language-text\">useEffect</code> sau khi trình duyệt paint.</p>\n<p>Chúng tôi khuyến khích sử dụng <a href=\"https://github.com/facebook/react/issues/14920\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">đưa tất cả dependency</code></a>, sử dụng  <a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">eslint-plugin-react-hooks</code></a> package để ràng buộc, và thông báo nếu khai báo dependency không hợp lệ.</p>\n</blockquote>\n<h2 id=\"bước-tiếp-theo-next-steps\"><a href=\"#b%C6%B0%E1%BB%9Bc-ti%E1%BA%BFp-theo-next-steps\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bước tiếp theo {#next-steps}</h2>\n<p>Xin chúc mừng! Trang này không hề ngắn, nhưng bạn đã đọc được đến đây. Hy vọng các thắc mắc của bạn về effect đã được phúc đáp. Bạn đã học được State Hook và Effect Hook, và có <em>rất</em> nhiều thứ bạn có thể làm khi sử dụng kết hợp chúng.  Nó gần như giải quyết các vấn đề mà chỉ có class mới làm được -- còn nếu không bạn có thể tìm thấy <a href=\"http://vi.reactjs.org/docs/hooks-reference.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">các Hook mở rộng</a>.</p>\n<p>Chúng ta đã trình bài động lực tạo ra Hook <a href=\"http://vi.reactjs.org/docs/hooks-intro.html#motivation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ở đây</a>. Chúng ta cũng thấy được cách  effect cleanup và tránh trùng lặp trong <code class=\"language-text\">componentDidUpdate</code> và <code class=\"language-text\">componentWillUnmount</code>, mang những đoạn code có liên quan lại gần nhau hơn, và giúp chúng ta tránh bug. Chúng ta cũng thấy được cách chúng ta tách effect theo mục đích, cái mà chúng ta không làm được với class.</p>\n<p>Đến đây, bạn có thể thắc mắc Hook làm việc như thế nào. Làm cách nào <code class=\"language-text\">useState</code> lấy được đúng giá trị giữa các lần render khác nhau? Làm cách nào React \"match\" được effect trước và lần đang update? <strong>Ở trang tiếp theo bạn sẽ học được <a href=\"http://vi.reactjs.org/docs/hooks-rules.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Quy luật của Hook</a> -- mấu chốt làm việc của Hook.</strong></p>\n"}},{"node":{"title":"Cách sử dụng ref trong React","path":"/cach-su-dung-ref-trong-react/","date":"22. June 2019","timeToRead":4,"desc":"Công dụng của ref là để truy cập đến DOM thật trong React, một vài tính huống sử dụng và dùng ref","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#V%E1%BA%A5n-%C4%91%E1%BB%81-c%E1%BB%A7a-Refs\">Vấn đề của Refs</a></li>\n<li><a href=\"#L%E1%BB%B1a-ch%E1%BB%8Dn-gi%E1%BB%AFa-callback-refs-v%C3%A0-createRef\">Lựa chọn giữa callback refs và <code class=\"language-text\">createRef</code></a></li>\n<li><a href=\"#Truy%E1%BB%81n-Ref-t%E1%BB%AB-cha-xu%E1%BB%91ng-con\">Truyền Ref từ cha xuống con</a></li>\n<li><a href=\"#useRef-hook\">useRef hook</a></li>\n<li><a href=\"#T%E1%BB%95ng-k%E1%BA%BFt-l%E1%BA%A1i\">Tổng kết lại</a></li>\n</ul>\n<!-- /TOC -->\n<p>Là viết tắt cho <code class=\"language-text\">reference</code> nếu bạn có thắc mắc, nó là cách mà React sẽ truy cập tới DOM (DOM thực, không phải DOM ảo). Có nhiều lý do mà chúng ta muốn truy cập tới DOM, thí dụ như set focus vào input, hay tính toán kích thước của một element khi render.</p>\n<h2 id=\"vấn-đề-của-ref\"><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81-c%E1%BB%A7a-ref\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vấn đề của <code class=\"language-text\">ref</code></h2>\n<p>Xử lý DOM là kỹ thuật căn bản mà mọi lập trình viên frontend điều biết, tuy nhiên khi làm theo hướng React, chúng ta sẽ ít gặp tình huống đụng đến DOM thật hơn.</p>\n<p>Thời điểm hiện tại, chúng ta có đến tận 4 cách để dùng ref !!!!</p>\n<p><img src=\"https://www.rd.com/wp-content/uploads/2012/05/sourbaby-760x506.jpg\" alt=\"Thời điểm hiện tại, chúng ta có đến tận 4 cách để dùng refs \"></p>\n<ul>\n<li>Dùng string (không được khuyến khích) (<code class=\"language-text\">&lt;div ref=&quot;stringGiday&quot; /&gt;</code>)</li>\n<li>Dùng callback ref (<code class=\"language-text\">&lt;div ref={ref =&gt; {this.inputRef = ref }} /&gt;</code>)</li>\n<li>Dùng API <code class=\"language-text\">createRef</code></li>\n<li>Dùng hook <code class=\"language-text\">useRef</code></li>\n</ul>\n<h2 id=\"lựa-chọn-giữa-callback-ref-và-createref\"><a href=\"#l%E1%BB%B1a-ch%E1%BB%8Dn-gi%E1%BB%AFa-callback-ref-v%C3%A0-createref\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lựa chọn giữa callback ref và <code class=\"language-text\">createRef</code></h2>\n<p>Sử dụng string cho ref đã được team React cho vào bảo tàng, câu hỏi còn lại là dùng callback ref hay <code class=\"language-text\">createRef</code> đây</p>\n<blockquote>\n<p>Câu trả lời ngắn gọn: dùng <code class=\"language-text\">createRef</code> là an toàn cho mọi trường hợp.</p>\n</blockquote>\n<p>Lấy ví dụ cho tình huống phổ biến: tự động đặt set focus cho input</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleRef</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 1 - Định nghĩa ref</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputRef</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 3 - gọi hàm focus trên ref</span>\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputRef</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputRef</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> gắn cái ref mới định nghĩa cho element <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onClick</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token maybe-class-name\">Click</span> để focus<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu sử dụng callback ref thì đây là cách làm</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleCallbackRef</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputRef</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">ref</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputRef</span> <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onClick</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token maybe-class-name\">Click</span> để focus<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Có ý kiến thấy viết <code class=\"language-text\">ref =&gt;</code> <em>nó hơi kỳ</em>, không minh bạch, cái ref này ở quỷ quái nào sinh ra?</p>\n<p>Khai báo ref bằng inline function như ở trên, nó sẽ gọi 2 lần trong quá trình update: lần đầu tiên với giá trị <code class=\"language-text\">null</code>, lần thứ hai là khi có DOM element.</p>\n<p>Bởi vì mỗi lần render là một inline function khác nhau, React sẽ phải xóa giá trị ref cũ rồi setup ref mới</p>\n<p>Nghĩa là viết như sau sẽ bị bug, ref lúc đầu đang null nên không có gọi focus được</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">ref</span> <span class=\"token arrow operator\">=></span> ref<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre>\n<p>Chắc tới đây anh em đã thấy không còn muốn dùng callback ref.</p>\n<p>Tuy nhiên không có nghĩa là callback ref không còn đất dụng võ, với <code class=\"language-text\">createRef</code> anh em luôn phải tạo-rồi-gán. Nếu tình huống chúng ta phải tạo một danh sách element động</p>\n<p>Như ví dụ này, sẽ làm như thế này phải không</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DynamicRefs</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          tasks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Task 1\"</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">\"red\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Task 2\"</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">\"green\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Task 3\"</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">\"yellow\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Task 4\"</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">\"gray\"</span> <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">refsArray</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n                <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">tasks</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n                    <span class=\"token operator\">&lt;</span>div\n                        key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span>\n                        ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">ref</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">refArray</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n                    <span class=\"token operator\">></span>\n                        <span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">}</span>\n                    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"truyền-ref-từ-cha-xuống-con\"><a href=\"#truy%E1%BB%81n-ref-t%E1%BB%AB-cha-xu%E1%BB%91ng-con\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Truyền Ref từ cha xuống con</h2>\n<p>Với function component, xét đoạn code sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">CustomInput</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>input <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Rồi chúng ta có 1 component khác, dùng ref cho cái <code class=\"language-text\">CustomInput</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleRef</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textInput</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">CustomInput</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textInput</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đoạn code trên hổng chạy được. Chúng ta cần dùng đến <code class=\"language-text\">forwardRef</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// BẮT BUỘC phải là function component</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">CustomInput</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleRefForwarding</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputRef</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputRef</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// lưu ý cách chúng ta gàn một ref vào custom component</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">CustomInput</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputRef</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onClick</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token maybe-class-name\">Click</span> to <span class=\"token maybe-class-name\">Focus</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"useref-hook\"><a href=\"#useref-hook\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useRef hook</h2>\n<p>Nếu là function component, như đã biết, nếu chúng ta dùng <code class=\"language-text\">createRef</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">FunctionComponentWithRef</span></span>  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> textInput <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> textInput<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            Click to Focus\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>MỖi lần return là mỗi lần tạo ref mới, như vậy <em>không cool</em>, sử dụng hook <code class=\"language-text\">useRef</code> chúng ta sẽ có một cái ref xài đời này qua đời kia dù bao nhiều lần update, cho đến khi nó ra đi (Unmount)</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">FunctionComponentWithRef</span></span>  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> textInput <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> textInput<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            Click to Focus\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"tổng-kết-lại\"><a href=\"#t%E1%BB%95ng-k%E1%BA%BFt-l%E1%BA%A1i\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tổng kết lại</h2>\n<ul>\n<li>Đừng xài ref nhiều quá</li>\n<li>Đừng bao giờ đụng vô string ref</li>\n<li>Dùng callback ref khi anh em đụng đến vấn đề tạo element động</li>\n<li>Nếu là class component, dùng <code class=\"language-text\">createRef</code> an toàn nhất</li>\n<li>Là function component, dùng <code class=\"language-text\">useRef</code> cho hợp xu thế</li>\n<li>Dùng <code class=\"language-text\">forwardRef</code> khi component cha cần truy cập đến component con</li>\n</ul>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://rafaelquintanilha.com/the-complete-guide-to-react-refs\">The Complete Guide to React Refs</a></p>\n"}},{"node":{"title":"3 bước tối ưu hiệu năng React App bằng các API mới của React","path":"/3-buoc-toi-uu-hieu-nang-react-app-bang-cac-api-moi-cua-react/","date":"17. June 2019","timeToRead":3,"desc":"Bài viết hướng dẫn tối ưu hiệu năng bằng memo, useMemo, useCallback","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#Reactmemo\">React.memo</a></li>\n<li><a href=\"#useMemo\">useMemo</a></li>\n<li><a href=\"#useCallback\">useCallback</a></li>\n</ul>\n<!-- /TOC -->\n<p>Khi sử dụng function component, React cung cấp 3 phương thức để tối ưu: <code class=\"language-text\">React.memo</code>, <code class=\"language-text\">useMemo</code>, và <code class=\"language-text\">useCallback</code>, chúng ta cùng điểm qua 3 thằng này</p>\n<p>Xét ví dụ</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">ListPage</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> title <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Header</span> title<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">List</span> listItems<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Component như trên (<code class=\"language-text\">&lt;ListPage /&gt;</code>), khi nhận một <code class=\"language-text\">data</code> mới, tất cả component con bên trong là <code class=\"language-text\">Header</code> và <code class=\"language-text\">List</code> sẽ re-render, mặc dù cái <code class=\"language-text\">title</code> không hề thay đổi. Nếu <code class=\"language-text\">Header</code> không tốn quá nhiều thời gian để render thì ko có vấn đề. Ngược lại dĩ nhiên là nếu render <code class=\"language-text\">Header</code> tốn rất nhiều thời gian, chúng ta phải <strong>xây lại</strong> để tối ưu hơn.</p>\n<h2 id=\"reactmemo\"><a href=\"#reactmemo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>React.memo</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">MyComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* render using props */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code class=\"language-text\">React.memo</code> là một HOC, <a href=\"https://luubinhan.github.io/blog/2018-11-04-gioi-thieu-react-memo-moi-trong-react-16\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">đọc lại bài này</a>, nó sẽ <strong>nhớ</strong> kết quả render của component. Nếu component trả về một output giống hệt cho cùng một prop, đưa nó vào <code class=\"language-text\">React.memo</code> sẽ tiết kiệm tí thời gian.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Header</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">Header</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Wrap lại trong <code class=\"language-text\">React.memo</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Header</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Header</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"usememo\"><a href=\"#usememo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useMemo</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> memoizedValue <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">computeExpensiveValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Cũng tương tự nó sẽ nhớ kết quả trả về, tuy nhiên nó sẽ có thêm phần gọi là <code class=\"language-text\">array dependencies</code>, là một danh sách các <strong>thằng</strong> mà nó phụ thuộc, nếu giá trị phụ thuộc thay đổi nó mới rọi render lại, không thể trả thẳng kết quả lần trước</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> widgetList <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> \n        widgets<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">w</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token spread operator\">...</span>w<span class=\"token punctuation\">,</span>\n        totalPrice<span class=\"token operator\">:</span> <span class=\"token function\">someComplexFunction</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span><span class=\"token property-access\">price</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        estimatedDeliveryDate<span class=\"token operator\">:</span> <span class=\"token function\">someOtherComplexFunction</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span><span class=\"token property-access\">warehouse</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>widgets<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Trong ví dụ trên, 1 component nhận một danh sách các widget, các widget này trước khi truyền vào sẽ được thêm vào 2 giá trị là <em>total price</em> và <em>delivery date</em>. Nếu giá trị các widget không thay đổi khi render lại component, thì không cần thiết phải chạy qua các hàm <code class=\"language-text\">someComplexFunction</code>, <code class=\"language-text\">someOtherComplexFunction</code>. Sử dụng <code class=\"language-text\">useMemo</code> để ghi nhớ kết quả và bỏ qua trong trường hợp đó.</p>\n<h2 id=\"usecallback\"><a href=\"#usecallback\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useCallback</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> memoizedCallback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Mục đích để chặn các lần render không cần thiết giữa component cha và con</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Parent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showExtraDetails<span class=\"token punctuation\">,</span> setShowExtraDetails<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Child</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">showData</span><span class=\"token punctuation\">(</span>showExtraDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>1 component như vậy sẽ re-render cả cha và con cùng lúc, thậm chí component con có là <code class=\"language-text\">PureComponent</code> được wrap bên trong <code class=\"language-text\">React.memo</code> đi nữa, bởi vì <code class=\"language-text\">onClick</code> sẽ khác nhau trên mỗi lần render. Sử dụng <code class=\"language-text\">useCallback</code> chúng ta viết lại như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Parent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showExtraDetails<span class=\"token punctuation\">,</span> setShowExtraDetails<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> handleClick <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">showData</span><span class=\"token punctuation\">(</span>showExtraDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span>showExtraDetails<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Child</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Như vậy hàm <code class=\"language-text\">handleClick</code> sẽ giống nhau cho các lần render khác nhau, nó chỉ khác khi <code class=\"language-text\">showExtraDetails</code> thay đổi.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://headway.io/blog/react-optimize-components-memo-usememo-usecallback\">React: Optimize Components with React.memo, useMemo, and useCallback</a></p>\n"}},{"node":{"title":"Giải thích Flux Pattern theo phong cách John Wick","path":"/giai-thich-flux-pattern-theo-phong-cach-john-wick/","date":"28. May 2019","timeToRead":4,"desc":"Điểm lại các khái niệm trong Flux action, dispatch, store, điều kiện tiên quyết đề đọc bài này là nên xem lại John Wick","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81\">Vấn đề</a></li>\n<li><a href=\"#gi%E1%BA%A3i-ph%C3%A1p-c%E1%BB%A7a-facebook-lu%E1%BB%93ng-d%E1%BB%AF-li%E1%BB%87u-m%E1%BB%99t-chi%E1%BB%81u\">Giải pháp của Facebook: luồng dữ liệu một chiều</a></li>\n<li>\n<p><a href=\"#gi%E1%BB%9Bi-thi%E1%BB%87u-c%C3%A1c-vai-ch%C3%ADnh\">Giới thiệu các vai chính</a></p>\n<ul>\n<li><a href=\"#b%E1%BB%8Dn-action-creator\">Bọn action creator</a></li>\n<li><a href=\"#b%E1%BB%8Dn-dispatcher\">Bọn dispatcher</a></li>\n<li><a href=\"#b%E1%BB%8Dn-%C4%91%E1%BA%A7u-c%E1%BA%A7u-store\">Bọn đầu cầu Store</a></li>\n<li><a href=\"#b%E1%BB%8Dn-view\">Bọn View</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"vấn-đề\"><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vấn đề</h2>\n<p>Trước tiên chúng ta cần biết Flux giải quyết vấn đề gì. Flux là một pattern để xử lý luồng dữ liệu trong ứng dụng. Flux và React được sinh ra và lớn lên dưới ngôi nhà Facebook. 2 đứa chúng nó <strong>thường</strong> đi cùng nhau, chứ không phải <strong>dính</strong> vào nhau như hình với bóng</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*EfeNEshl8-uwZSuUw275Ag.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Một trong những ví dụ phổ biến khi nói đến Flux là vòng lặp của tính năng notification. Khi đăng nhập vào Facebook, bạn thấy một thông báo mới trên icon cái chuông huyền diệu, một khi click vào cái chuông này, toàn bộ thông báo sẽ ko còn nằm trong <strong>new message</strong> nữa. Một vài phút sau, khi nhận được thông báo mới, cái chuông lại <strong>rung lên</strong>, báo bạn biết có thông báo mới, và cứ thế, vòng lặp cứ tiếp tục.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*4xc1FzIHWiyAvb1iAQKSqQ.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Với kiểu thiết kế Model-View</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*OcTeAqv8AU_z-O2HuucmeA.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Các model sẽ <em>nắm giữ</em> dữ liệu và truyền dữ liệu này xuống các cục view -> nơi sẽ render, hiển thị dữ liệu này.</p>\n<p>User tương tác thông qua view, view đôi lúc sẽ cập nhập lại dữ liệu của model, và đôi khi model này cần thay đổi dữ liệu trên model khác. Hơn nữa, nhiều khi một thay đổi của user kéo theo một chuỗi các thay đổi khác, có khi nó là một async. Tưởng tượng như đánh trái banh bàn, bạn ko thể biết được trái banh nó sẽ đập vào đâu hết.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/400/1*7myoHOaUyFEmPC-dj61CKw.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Khi ấy bạn sẽ không biết được dữ liệu bị <strong>rơi rớt</strong> ở đâu.</p>\n<h2 id=\"giải-pháp-của-facebook-luồng-dữ-liệu-một-chiều\"><a href=\"#gi%E1%BA%A3i-ph%C3%A1p-c%E1%BB%A7a-facebook-lu%E1%BB%93ng-d%E1%BB%AF-li%E1%BB%87u-m%E1%BB%99t-chi%E1%BB%81u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giải pháp của Facebook: luồng dữ liệu một chiều</h2>\n<p>Đội ngũ Facebook giải quyết bằng một kiến trúc khác, <strong>luồng dữ liệu sẽ đi một chiều duy nhất</strong>, một khi cần thêm dữ liệu mới, luồng lại đi từ điểm xuất phát. Và họ gọi kiến trúc đó là <strong>Flux</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*lZM0yU9ExEMd7DggVxXkxA.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Nhìn vào cái hình trên, bạn sẽ không thể cảm được của kiến trúc này ngay và luôn, không đọc tài liệu về Flux, có thể bạn sẽ chẳng hứng thú vì với nó.</p>\n<p>Cùng đi chi tiết từng khái niệm một. Hình dung tổ chức <strong>hội bàn đào</strong> trong John Wick, với những nhóm nhân vật khác nhau, nắm giữ những vai trò khác nhau.</p>\n<h2 id=\"giới-thiệu-các-vai-chính\"><a href=\"#gi%E1%BB%9Bi-thi%E1%BB%87u-c%C3%A1c-vai-ch%C3%ADnh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giới thiệu các vai chính</h2>\n<h3 id=\"bọn-action-creator\"><a href=\"#b%E1%BB%8Dn-action-creator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bọn action creator</h3>\n<p><img src=\"https://i.imgur.com/e2UBmM4.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Nhiệm vụ của bọn này là tạo ra action, tất cả những thay đổi, tương tác phải tới gặp bọn này. Nó giống như bọn ngồi điều hành điện thoại trong phim John Wick, những đứa khác tới đây, phát đi 1 thông điệp, action creator sẽ \"định dạng\" lại thông điệp đó bằng một mật mã mà tất các những đứa khác nằm trong hệ thống hiểu được.</p>\n<p><img src=\"https://i.imgur.com/lsLrRSV.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Thông điệp được gửi đi bao gồm: kiểu thông điệp (type) và nội dung chính của thông điệp (payload). Trong đó kiểu thông điệp là một hằng số đã được định nghĩa trước đó.</p>\n<p><strong>Tác dụng phụ</strong> của một hệ thống mà toàn bộ kiểu thông điệp đã được định nghĩa sẵn, <strong>lính mới</strong> vào chỉ cần mở file này ra là biết được ứng dụng đang làm, sẽ có những tình huống nào sẽ làm thay đổi trạng thái dữ liệu.</p>\n<h3 id=\"bọn-dispatcher\"><a href=\"#b%E1%BB%8Dn-dispatcher\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bọn dispatcher</h3>\n<p><img src=\"https://i.imgur.com/nnQAAj6.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Trong John Wick, nói chung các bạn nên xem John Wick trước khi đọc bài này đó, bạn trực điện thoại nhận tin nhắn, format tin nhắn xong, bạn sẽ <strong>hét</strong> lên cho các bạn đứng trực chổ tổng đài điện thoại. Bạn <strong>trực điện thoại</strong> này biết danh sách các <strong>đầu cầu</strong> (store) cần gửi thông báo đến.</p>\n<p>Quá trình này được thực hiện một cách <strong>tuần tự</strong>, không chen lấn, không xen ngang, nếu mỗi đầu cầu cần ràng buộc về thứ tự nhận thông tin, chúng ta có để anh dispatcher này quản lý.</p>\n<p>Anh Dispatcher trong Flux sẽ khác với dispatcher trong các kiến trúc khác. Thông tin luôn được gửi đến hết các đầu cầu bất kể nó là thông tin gì. Nghĩa là mỗi đầu cầu không chỉ đăng ký một kênh thông tin nhất định, nó lắng nghe toàn bộ thông tin được gửi đi, chuyện nó quan tâm và xử lý trên từng thông tin nào là nó tự quyết định, giống như chú Bowery King nhận được yêu cầu truy sát John Wick, nhưng anh nhận tin rồi ko làm gì cả.</p>\n<h3 id=\"bọn-đầu-cầu-store\"><a href=\"#b%E1%BB%8Dn-%C4%91%E1%BA%A7u-c%E1%BA%A7u-store\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bọn đầu cầu Store</h3>\n<p>Gọi là đầu cầu thì cũng chưa đầy đủ, ngoài là nơi tiếp nhận và thực thông tin, nó còn là nơi chứa toàn bộ dữ liệu của ứng dụng, nguồn tiền của 1 tổ chức, mọi luật lệ, logic của dữ liệu sẽ nằm ở đây.</p>\n<p><img src=\"https://media.comicbook.com/2019/05/john-wick-bowery-king-1171365-1280x0.jpeg\" alt=\"Giải thích Flux pattern\"></p>\n<p>Anh Store này như chú <a href=\"https://www.imdb.com/title/tt6146586/characters/nm0000401?ref_=tt_cl_t4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bowery King</a>, khi muốn anh ấy làm gì đó, chuyển tiền, nhận tiền, đóng tiền thì bạn buộc phải làm đúng quy trình từ trên xuống dưới action creator -> dispatcher</p>\n<h3 id=\"bọn-view\"><a href=\"#b%E1%BB%8Dn-view\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bọn View</h3>\n<p><img src=\"https://m.media-amazon.com/images/M/MV5BNTQ2MWYyYTMtOTg3NC00MjA1LWFmMTUtOWRjMWViMWIxZTBmXkEyXkFqcGdeQXVyNTc5OTMwOTQ@._V1_SY1000_CR0,0,1499,1000_AL_.jpg\" alt=\"Giải thích Flux pattern\"></p>\n<p>Nhận dữ liệu, thay đổi thông tin hiển thị, tiếp nhận dữ liệu từ user, đưa ngược lên lại tổ chức là công dụng toàn bộ của bọn này.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*MY5xNk_JeKvGsGdywYD4EA.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Tổng hợp lại chúng ta có sơ đồ vận hành của tổ chức này như sau</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*GHrusKRFhQ0Y6rrwjqI6QQ.png\" alt=\"Giải thích Flux pattern\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*66hoDpUhczSXrgH2cUUasw.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Trong hình minh họa trên, còn một đứa nữa đứng giữa View và Store, được gọi là controller view, một dạng của <strong>người đưa tin</strong>, nó sẽ nhận thông báo từ đầu cầu store khi có dữ liệu thay đổi, rồi mới đưa xuống view</p>\n<p>Khi user gửi đi một thông báo đến View</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*SusQ7Aip2fSWg6raQtPSnA.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Thông tin được gửi lại action creator</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*dkm9qsWuD9DtXzH-u-DjJQ.png\" alt=\"Giải thích Flux pattern\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*RLrImTDeArSMoA4kZsajLQ.png\" alt=\"Giải thích Flux pattern\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*fWBaUg9-_1-V5M2YQBWhWg.png\" alt=\"Giải thích Flux pattern\"></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207\">A cartoon guide to Flux\n</a></p>\n"}},{"node":{"title":"8 thủ thuật khi làm việc với Object sử dụng resting và spreading","path":"/8-thu-thuat-khi-lam-viec-voi-object-su-dung-resting-va-spreading/","date":"23. March 2019","timeToRead":3,"desc":"Những đoạn code bỏ túi hay xài nhất khi đụng tới object","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#merge-object\">Merge object</a></li>\n<li><a href=\"#th%C3%AAm-property\">Thêm property</a></li>\n<li><a href=\"#th%C3%AAm-property-khi-th%C3%B5a-%C4%91i%E1%BB%81u-ki%E1%BB%87n\">Thêm property khi thõa điều kiện</a></li>\n<li><a href=\"#x%C3%B3a-property-kh%E1%BB%8Fi-object\">Xóa property khỏi object</a></li>\n<li><a href=\"#x%C3%B3a-property-v%E1%BB%9Bi-key-ch%E1%BB%89-%C4%91%E1%BB%8Bnh\">Xóa property với key chỉ định</a></li>\n<li><a href=\"#s%E1%BA%AFp-x%E1%BA%BFp-property\">Sắp xếp property</a></li>\n<li><a href=\"#property-m%E1%BA%B7c-%C4%91%E1%BB%8Bnh\">Property mặc định</a></li>\n<li><a href=\"#%C4%91%E1%BB%95i-t%C3%AAn-property\">Đổi tên property</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"merge-object\"><a href=\"#merge-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Merge object</h2>\n<p><code class=\"language-text\">part1</code> và <code class=\"language-text\">part2</code> sẽ được merge vào <code class=\"language-text\">user1</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> part1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'An Luu'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> part2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">:</span> <span class=\"token string\">'Password!'</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>part1<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>part2 <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//=> { id: 100, name: 'An Luu', password: 'Password!' }</span></code></pre>\n<h2 id=\"thêm-property\"><a href=\"#th%C3%AAm-property\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thêm property</h2>\n<p>Clone một object đồng thời thêm một số property mới vào object mới clone</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'An Luu'</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> userWithPass <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>user<span class=\"token punctuation\">,</span> password<span class=\"token operator\">:</span> <span class=\"token string\">'Password!'</span> <span class=\"token punctuation\">}</span>\n\nuser <span class=\"token comment\">//=> { id: 100, name: 'An Luu' }</span>\nuserWithPass <span class=\"token comment\">//=> { id: 100, name: 'An Luu', password: 'Password!' }</span></code></pre>\n<h2 id=\"thêm-property-khi-thõa-điều-kiện\"><a href=\"#th%C3%AAm-property-khi-th%C3%B5a-%C4%91i%E1%BB%81u-ki%E1%BB%87n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thêm property khi thõa điều kiện</h2>\n<p>Trường hợp này hay dùng nhất là lúc chúng ta truyền lên API một object, nếu thõa điều kiện, sẽ thêm một số property vào trong object</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'An Luu'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> <span class=\"token string\">'Password!'</span>\n<span class=\"token keyword\">const</span> userWithPassword <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token spread operator\">...</span>user<span class=\"token punctuation\">,</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span>password <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">{</span> password <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nuserWithPassword <span class=\"token comment\">//=> { id: 100, name: 'An Luu', password: 'Password!' }</span></code></pre>\n<h2 id=\"xóa-property-khỏi-object\"><a href=\"#x%C3%B3a-property-kh%E1%BB%8Fi-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xóa property khỏi object</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// hàm này sẽ trả về object mới ko bao gồm password</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noPassword</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> password<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>rest <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> rest\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'An Luu'</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token operator\">:</span> <span class=\"token string\">'Password!'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">noPassword</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=> { id: 100, name: 'An Luu' }</span></code></pre>\n<h2 id=\"xóa-property-với-key-chỉ-định\"><a href=\"#x%C3%B3a-property-v%E1%BB%9Bi-key-ch%E1%BB%89-%C4%91%E1%BB%8Bnh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xóa property với key chỉ định</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'An Luu'</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token operator\">:</span> <span class=\"token string\">'Password!'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">removeProperty</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">prop</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> _<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>rest <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> rest\n<span class=\"token comment\">//                     ----       ------</span>\n<span class=\"token comment\">//                          \\   /</span>\n<span class=\"token comment\">//                dynamic destructuring</span>\n\n<span class=\"token keyword\">const</span> removePassword <span class=\"token operator\">=</span> <span class=\"token function\">removeProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> removeId <span class=\"token operator\">=</span> <span class=\"token function\">removeProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">removePassword</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=> { id: 100, name: 'An Luu' }</span>\n<span class=\"token function\">removeId</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=> { name: 'An Luu', password: 'Password!' }</span></code></pre>\n<h2 id=\"sắp-xếp-property\"><a href=\"#s%E1%BA%AFp-x%E1%BA%BFp-property\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sắp xếp property</h2>\n<p>Đôi khi chúng ta sẽ muốn thay đổi các property theo một thứ tự nào đó, nếu sắp xếp toàn bộ luôn thì chắc dùng <code class=\"language-text\">Object.keys</code> rồi thay xếp cái mảng key này lại.</p>\n<p>Để di chuyển <code class=\"language-text\">id</code> lên đầu, trước hết gán giá trị <code class=\"language-text\">undefined</code> cho nó trước, sau đó, override lại giá trị này bằng cách resting</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  password<span class=\"token operator\">:</span> <span class=\"token string\">'Password!'</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'An Luu'</span><span class=\"token punctuation\">,</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">300</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">organize</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">object</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>object <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//                            -------------</span>\n<span class=\"token comment\">//                          /</span>\n<span class=\"token comment\">//  dời id lên đầu</span>\n\n<span class=\"token function\">organize</span><span class=\"token punctuation\">(</span>user3<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//=> { id: 300, password: 'Password!', name: 'An Luu' }</span></code></pre>\n<p>Còn di chuyển xuống dưới cùng</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  password<span class=\"token operator\">:</span> <span class=\"token string\">'Password!'</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'An Luu'</span><span class=\"token punctuation\">,</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">300</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">organize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> password<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>object <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>object<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//              --------</span>\n<span class=\"token comment\">//             /</span>\n<span class=\"token comment\">// dời password xuống cuối</span>\n\n<span class=\"token function\">organize</span><span class=\"token punctuation\">(</span>user3<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//=> { name: 'An Luu', id: 300, password: 'Password!' }</span></code></pre>\n<h2 id=\"property-mặc-định\"><a href=\"#property-m%E1%BA%B7c-%C4%91%E1%BB%8Bnh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Property mặc định</h2>\n<p>Ví dụ, <code class=\"language-text\">user2</code> không có chứa <code class=\"language-text\">quotes</code>, hàm <code class=\"language-text\">setDefaults</code> đảm bảo tất cả object đều chứa property là <code class=\"language-text\">quotes</code>, nếu ko nó thêm vào <code class=\"language-text\">[]</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'An Luu'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'You'</span><span class=\"token punctuation\">,</span>\n  quotes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"I've got a good feeling about this...\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setDefaults</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> quotes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>object<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>object<span class=\"token punctuation\">,</span> quotes <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// hoặc nếu muốn dời thằng quotes lên đầu</span>\n<span class=\"token comment\">// const setDefaults = ({ ...object}) => ({ quotes: [], ...object })</span>\n\n<span class=\"token function\">setDefaults</span><span class=\"token punctuation\">(</span>user2<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//=> { id: 200, name: 'An Luu', quotes: [] }</span>\n\n<span class=\"token function\">setDefaults</span><span class=\"token punctuation\">(</span>user4<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//=> {</span>\n<span class=\"token comment\">//=>   id: 400,</span>\n<span class=\"token comment\">//=>   name: 'You',</span>\n<span class=\"token comment\">//=>   quotes: [\"I've got a good feeling about this...\"]</span>\n<span class=\"token comment\">//=> }</span></code></pre>\n<h2 id=\"đổi-tên-property\"><a href=\"#%C4%91%E1%BB%95i-t%C3%AAn-property\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đổi tên property</h2>\n<p>Thí dụ bạn ko muốn trong object chứa property <code class=\"language-text\">ID</code>, nó phải viết thường <code class=\"language-text\">id</code>, đầu tiên chúng ta remove ID ra khỏi object, sau đó add lại bằng tên là <code class=\"language-text\">id</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">renamed</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token constant\">ID</span><span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>object <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token constant\">ID</span><span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>object <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">ID</span><span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"An Luu\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">renamed</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=> { id: 500, name: 'An Luu' }</span></code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://blog.bitsrc.io/6-tricks-with-resting-and-spreading-javascript-objects-68d585bdc83\">7 Tricks with Resting and Spreading JavaScript Objects</a></p>\n"}},{"node":{"title":"Tạo React Boilerplate - Từ a tới z","path":"/tao-react-boilerplate-tu-a-toi-z/","date":"19. March 2019","timeToRead":5,"desc":"Một ngày nào đó bạn ko muốn dùng create-react-app để khởi tạo project nữa, thì đây chính là bài hướng dẫn bạn cần đọc: setup một project từ a tới z mà không dùng create-react-app","content":"<p>Tạo thư mục mới nào</p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">mkdir react<span class=\"token operator\">-</span>bolt</code></pre>\n<p>Vào bên trong thư mục <code class=\"language-text\">react-bolt</code> vừa tạo, chạy lệnh init</p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">npm init <span class=\"token operator\">-</span>y</code></pre>\n<p>Lệnh này sẽ khởi tạo một project npm, trong đó có file <code class=\"language-text\">package.json</code>, nơi chúng ta chứa toàn bộ những dependencies</p>\n<p>Chúng ta tạo thêm một số thư mục cần thiết khác</p>\n<pre class=\"language-text\"><code class=\"language-text\">react-bolt\n    |--config\n    |--src\n    |--tests</code></pre>\n<p>Tiến hành cài đặt <code class=\"language-text\">webpack</code> và một số plugin</p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">npm i <span class=\"token operator\">--</span><span class=\"token function\">save-dev</span> webpack webpack<span class=\"token operator\">-</span><span class=\"token function\">cli</span> webpack<span class=\"token operator\">-</span>dev<span class=\"token operator\">-</span>server webpack<span class=\"token operator\">-</span>merge html<span class=\"token operator\">-</span>webpack<span class=\"token operator\">-</span>plugin clean<span class=\"token operator\">-</span>webpack<span class=\"token operator\">-</span>plugin img<span class=\"token operator\">-</span>loader url<span class=\"token operator\">-</span>loader file<span class=\"token operator\">-</span>loader </code></pre>\n<p>Bên trong thư mục <code class=\"language-text\">config</code>, chúng ta tạo thêm thư mục tên <code class=\"language-text\">webpack</code>, chúng ta tạo lần lượt 5 file bên dưới trong thư mục <code class=\"language-text\">webpack</code></p>\n<p><strong>paths.js</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> path <span class=\"token keyword module\">from</span> <span class=\"token string\">'path'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    root<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    outputPath<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'build'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    entryPath<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'src/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    templatePath<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'src/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    imagesFolder<span class=\"token operator\">:</span> <span class=\"token string\">'images'</span><span class=\"token punctuation\">,</span>\n    fontsFolder<span class=\"token operator\">:</span> <span class=\"token string\">'fonts'</span><span class=\"token punctuation\">,</span>\n    cssFolder<span class=\"token operator\">:</span> <span class=\"token string\">'css'</span><span class=\"token punctuation\">,</span>\n    jsFolder<span class=\"token operator\">:</span> <span class=\"token string\">'js'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>rules.js</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\"><span class=\"token special-escape escape\">\\.</span>js<span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            loader<span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\"><span class=\"token special-escape escape\">\\.</span>eot<span class=\"token group punctuation\">(</span><span class=\"token special-escape escape\">\\?</span>v=<span class=\"token charclass class-name\">\\d</span><span class=\"token quantifier number\">+</span><span class=\"token special-escape escape\">\\.</span><span class=\"token charclass class-name\">\\d</span><span class=\"token quantifier number\">+</span><span class=\"token special-escape escape\">\\.</span><span class=\"token charclass class-name\">\\d</span><span class=\"token quantifier number\">+</span><span class=\"token group punctuation\">)</span><span class=\"token quantifier number\">?</span><span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token operator\">:</span> <span class=\"token string\">'file-loader'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\"><span class=\"token special-escape escape\">\\.</span><span class=\"token group punctuation\">(</span>woff<span class=\"token alternation keyword\">|</span>woff2<span class=\"token group punctuation\">)</span><span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token operator\">:</span> <span class=\"token string\">'url-loader?prefix=font/&amp;limit=5000'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\"><span class=\"token special-escape escape\">\\.</span>ttf<span class=\"token group punctuation\">(</span><span class=\"token special-escape escape\">\\?</span>v=<span class=\"token charclass class-name\">\\d</span><span class=\"token quantifier number\">+</span><span class=\"token special-escape escape\">\\.</span><span class=\"token charclass class-name\">\\d</span><span class=\"token quantifier number\">+</span><span class=\"token special-escape escape\">\\.</span><span class=\"token charclass class-name\">\\d</span><span class=\"token quantifier number\">+</span><span class=\"token group punctuation\">)</span><span class=\"token quantifier number\">?</span><span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token operator\">:</span> <span class=\"token string\">'url-loader?limit=10000&amp;mimetype=application/octet-stream'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token language-regex\"><span class=\"token special-escape escape\">\\.</span><span class=\"token group punctuation\">(</span>jpe<span class=\"token quantifier number\">?</span>g<span class=\"token alternation keyword\">|</span>png<span class=\"token alternation keyword\">|</span>gif<span class=\"token alternation keyword\">|</span>svg<span class=\"token group punctuation\">)</span><span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span>\n        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'url-loader?limit=10000'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'img-loader'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>webpack.common.babel.js</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> webpack <span class=\"token keyword module\">from</span> <span class=\"token string\">'webpack'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">HtmlWebpackPlugin</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> paths <span class=\"token keyword module\">from</span> <span class=\"token string\">'./paths'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> rules <span class=\"token keyword module\">from</span> <span class=\"token string\">'./rules'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    entry<span class=\"token operator\">:</span> paths<span class=\"token punctuation\">.</span><span class=\"token property-access\">entryPath</span><span class=\"token punctuation\">,</span>\n    module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        rules\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        modules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'node_modules'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        extensions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.scss'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.css'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>ProgressPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            template<span class=\"token operator\">:</span> paths<span class=\"token punctuation\">.</span><span class=\"token property-access\">templatePath</span><span class=\"token punctuation\">,</span>\n            minify<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                collapseInlineTagWhitespace<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                collapseWhitespace<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                preserveLineBreaks<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                minifyURLs<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                removeComments<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                removeAttributeQuotes<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>webpack.dev.babel.js</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> webpack <span class=\"token keyword module\">from</span> <span class=\"token string\">'webpack'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> paths <span class=\"token keyword module\">from</span> <span class=\"token string\">'./paths'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> rules <span class=\"token keyword module\">from</span> <span class=\"token string\">'./rules'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    mode<span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        filename<span class=\"token operator\">:</span> <span class=\"token string\">'[name].js'</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token operator\">:</span> paths<span class=\"token punctuation\">.</span><span class=\"token property-access\">outputPath</span><span class=\"token punctuation\">,</span>\n        chunkFilename<span class=\"token operator\">:</span> <span class=\"token string\">'[name].js'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        rules\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token dom variable\">performance</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        hints<span class=\"token operator\">:</span> <span class=\"token string\">'warning'</span><span class=\"token punctuation\">,</span>\n        maxAssetSize<span class=\"token operator\">:</span> <span class=\"token number\">450000</span><span class=\"token punctuation\">,</span>\n        maxEntrypointSize<span class=\"token operator\">:</span> <span class=\"token number\">8500000</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">assetFilter</span><span class=\"token operator\">:</span> <span class=\"token parameter\">assetFilename</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                assetFilename<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.css'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> assetFilename<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    optimization<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        splitChunks<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            chunks<span class=\"token operator\">:</span> <span class=\"token string\">'all'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    devServer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        contentBase<span class=\"token operator\">:</span> paths<span class=\"token punctuation\">.</span><span class=\"token property-access\">outputPath</span><span class=\"token punctuation\">,</span>\n        compress<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        hot<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        historyApiFallback<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>HotModuleReplacementPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>webpack.prod.babel.js</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">CleanWebpackPlugin</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> paths <span class=\"token keyword module\">from</span> <span class=\"token string\">'./paths'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> rules <span class=\"token keyword module\">from</span> <span class=\"token string\">'./rules'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    mode<span class=\"token operator\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        filename<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>paths<span class=\"token punctuation\">.</span><span class=\"token property-access\">jsFolder</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/[name].[hash].js</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        path<span class=\"token operator\">:</span> paths<span class=\"token punctuation\">.</span><span class=\"token property-access\">outputPath</span><span class=\"token punctuation\">,</span>\n        chunkFilename<span class=\"token operator\">:</span> <span class=\"token string\">'[name].[chunkhash].js'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        rules\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>paths<span class=\"token punctuation\">.</span><span class=\"token property-access\">outputPath</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            root<span class=\"token operator\">:</span> paths<span class=\"token punctuation\">.</span><span class=\"token property-access\">root</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    devtool<span class=\"token operator\">:</span> <span class=\"token string\">'source-map'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Bên trong <code class=\"language-text\">webpack.common.babel.js</code> chúng ta sẽ setup entry và output và các plugin. Các thiết đặt để chạy môi trường dev sẽ nằm trong <code class=\"language-text\">webpack.dev.babel.js</code> và môi trường production sẽ nằm trong <code class=\"language-text\">webpack.prod.babel.js</code> </p>\n<p>Sau cùng, bên trong thư mục gốc, tạo thêm file <code class=\"language-text\">webpack.config.js</code> nó sẽ merge 3 file config common, dev, prod lại</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@babel/register'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> webpackMerge <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-merge'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> common <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config/webpack/webpack.common.babel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> envs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    development<span class=\"token operator\">:</span> <span class=\"token string\">'dev'</span><span class=\"token punctuation\">,</span>\n    production<span class=\"token operator\">:</span> <span class=\"token string\">'prod'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* eslint-disable global-require,import/no-dynamic-require */</span>\n<span class=\"token keyword\">const</span> env <span class=\"token operator\">=</span> envs<span class=\"token punctuation\">[</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">||</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> envConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./config/webpack/webpack.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>env<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.babel</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token function\">webpackMerge</span><span class=\"token punctuation\">(</span>common<span class=\"token punctuation\">,</span> envConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"babel\"><a href=\"#babel\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Babel</h2>\n<p>Cái các plugin cần thiết cho babel</p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">npm install <span class=\"token operator\">--</span><span class=\"token function\">save-dev</span> @babel<span class=\"token operator\">/</span>core @babe<span class=\"token operator\">/</span><span class=\"token function\">cli</span> @babel<span class=\"token operator\">/</span>node @babel<span class=\"token operator\">/</span>plugin<span class=\"token operator\">-</span>proposal<span class=\"token operator\">-</span><span class=\"token keyword\">class</span><span class=\"token operator\">-</span>properties @babel<span class=\"token operator\">/</span>plugin<span class=\"token operator\">-</span>proposal<span class=\"token operator\">-</span>object<span class=\"token operator\">-</span>rest<span class=\"token operator\">-</span>spread @babel<span class=\"token operator\">/</span>plugin<span class=\"token operator\">-</span>syntax<span class=\"token operator\">-</span>dynamic<span class=\"token operator\">-</span>import @babel<span class=\"token operator\">/</span>plugin<span class=\"token operator\">-</span>syntax<span class=\"token operator\">-</span><span class=\"token function\">import-meta</span> @babel<span class=\"token operator\">/</span>plugin<span class=\"token operator\">-</span>transform<span class=\"token operator\">-</span>async<span class=\"token operator\">-</span>to<span class=\"token operator\">-</span>generator @babel<span class=\"token operator\">/</span>plugin<span class=\"token operator\">-</span>transform<span class=\"token operator\">-</span>runtime @babel<span class=\"token operator\">/</span>preset<span class=\"token operator\">-</span>env @babel<span class=\"token operator\">/</span>preset<span class=\"token operator\">-</span>react @babel<span class=\"token operator\">/</span>register @babel<span class=\"token operator\">/</span>runtime babel<span class=\"token operator\">-</span>eslint babel<span class=\"token operator\">-</span>jest babel<span class=\"token operator\">-</span>loader babel<span class=\"token operator\">-</span>core@7<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>0<span class=\"token operator\">-</span>bridge<span class=\"token punctuation\">.</span>0</code></pre>\n<p>Tạo file <code class=\"language-text\">.babelrc</code> bên trong thư mục gốc, thiết đặt babel khi chạy</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"@babel/preset-env\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"useBuiltIns\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"entry\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"@babel/preset-react\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"@babel/plugin-proposal-object-rest-spread\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"@babel/plugin-transform-runtime\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"@babel/plugin-transform-async-to-generator\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"@babel/plugin-proposal-class-properties\"</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"eslint\"><a href=\"#eslint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Eslint</h2>\n<p>Cài đặt package </p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">npm install <span class=\"token operator\">--</span><span class=\"token function\">save-dev</span> eslint eslint<span class=\"token operator\">-</span>config<span class=\"token operator\">-</span>airbnb eslint<span class=\"token operator\">-</span>config<span class=\"token operator\">-</span>prettier eslint<span class=\"token operator\">-</span>loader eslint<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>babel eslint<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>import eslint<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>jsx<span class=\"token operator\">-</span>a11y eslint<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>prettier eslint<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>react </code></pre>\n<p>Bên trong thư mục gốc, tạo file <code class=\"language-text\">.eslintrc</code> để cấu hình cho eslint</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel-eslint\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"airbnb\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"prettier\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"prettier/react\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"prettier\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"ecmaVersion\"</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"ecmaFeatures\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"mocha\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"es6\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"jest\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"indent\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"space-before-function-paren\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"react/prefer-stateless-function\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"warn\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"react/jsx-one-expression-per-line\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"import/no-extraneous-dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"react/jsx-filename-extension\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\".js\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".jsx\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"linebreak-style\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"global-require\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"warn\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"arrow-body-style\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"no-multiple-empty-lines\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"warn\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"max\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"no-unused-expressions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"allowTaggedTemplates\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"no-underscore-dangle\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> <span class=\"token property\">\"allow\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"__REDUX_DEVTOOLS_EXTENSION__\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"prettier\"><a href=\"#prettier\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Prettier</h2>\n<p>Cài đặt package</p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">npm install <span class=\"token operator\">--</span><span class=\"token function\">save-dev</span> prettier</code></pre>\n<p>Tạo file <code class=\"language-text\">.prettierrc</code> với nội dung</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"printWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"tabWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"singleQuote\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"bracketSpacing\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"react\"><a href=\"#react\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>React</h2>\n<p>Cuối cùng chúng ta chỉ còn cài React nữa là xong</p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">npm install <span class=\"token operator\">--</span>save react react<span class=\"token operator\">-</span>dom cross<span class=\"token operator\">-</span>env</code></pre>\n<p>Bên trong thư mục <code class=\"language-text\">src</code>, tạo file <code class=\"language-text\">index.html</code></p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ie=edge<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>React Bolt<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>File <code class=\"language-text\">index.js</code> trong thư mục <em>src</em></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">ReactDOM</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">App</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./components/App'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token maybe-class-name\">ReactDOM</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">App</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Mấy cái router, redux thì bạn cứ xem tài liệu của tụi nó nhé.</p>\n<h2 id=\"jest\"><a href=\"#jest\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Jest</h2>\n<p>Bạn có thể dùng cái khác để test, nhưng Jest thì phổ biến nhất rồi</p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">npm install <span class=\"token operator\">--</span><span class=\"token function\">save-dev</span> jest jest<span class=\"token operator\">-</span>dom react<span class=\"token operator\">-</span>testing<span class=\"token operator\">-</span>library</code></pre>\n<p>Bổ sung lệnh để chạy test trong <code class=\"language-text\">package.json</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"jest\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"setupFiles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"&lt;rootDir>/config/tests/jest.config\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"transform\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"^.+\\\\.js$\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel-jest\"</span>\n    <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cross-env NODE_ENV=development webpack-dev-server --open\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cross-env NODE_ENV=production webpack\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint ./src/**/**.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"lint:fix\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint ./src/**/**.js --fix\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"test:watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run test --watch\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"test:cover\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run test --coverage\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>config/tests/jest.config.js</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    automock<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    browser<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    bail<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    collectCoverageFrom<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'src/**/*.{js,jsx}'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'!**/node_modules/**'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'!**/vendor/**'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    coverageDirectory<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;rootDir>/coverage'</span><span class=\"token punctuation\">,</span>\n    globals<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        __DEV__<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    moduleFileExtensions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'node'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    transform<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'^.+\\\\.js?$'</span><span class=\"token operator\">:</span> <span class=\"token string\">'babel-jest'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    verbose<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    setupTestFrameworkScriptFile<span class=\"token operator\">:</span> <span class=\"token string\">'./rtl.setup.js'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>config/tests/rtl.setup.js</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// See https://github.com/kentcdodds/react-testing-library#global-config</span>\n<span class=\"token keyword module\">import</span> <span class=\"token string\">'jest-dom/extend-expect'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token string\">'react-testing-library/cleanup-after-each'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Xong.</p>\n<p><a href=\"https://github.com/leonardomso/react-bolt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code ở đây</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.freecodecamp.org/a-complete-react-boilerplate-tutorial-from-zero-to-hero-20023e086c4a\">Link bài gốc - A Complete React Boilerplate Tutorial — From Zero to Hero</a></p>\n"}},{"node":{"title":"Function Component khác Class component như thế nào trong React","path":"/function-component-khac-class-component-nhu-the-nao-trong-react/","date":"12. March 2019","timeToRead":3,"desc":"Ngày xưa khi chưa có hook, thì rất dễ để trả lời câu này, nhưng từ ngày hook được sử dụng, câu hỏi lại này lại được đặt ra, ủa vậy 2 thằng nó khác nhau ở điểm nào.","content":"<p>Có thể bạn cũng từng nghe nói, một trong 2 thằng đó performance tốt hơn. Xem thêm đánh giá từ <a href=\"https://medium.com/@dan_abramov/this-benchmark-is-indeed-flawed-c3d6b5b6f97f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">This benchmark is indeed flawed.</a>. Nói về performance thì phải xem cái code bên trong nó làm cái gì, chứ ko còn đơn thuần là function hay class nó sẽ performance cao hơn.</p>\n<p>Như vậy, việc bạn chuyển hết các component đang viết sang function component, rồi kết hợp với hook để thay cho class component thực sự phải cân nhắc, vì nhiều khi tốn thời gian mà ko mang nhiều lợi ích lắm.</p>\n<p>Xem xét một function component như thế này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ProfilePage</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Ta có thể viết lại thành class component</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">showMessage</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleClick</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Để thấy sự khác nhau, chúng ta cũng xem một con bug rất hay xảy ra trong React.</p>\n<p>Chạy thử <a href=\"https://codesandbox.io/s/pjqnl16lm7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo</a>,  rồi làm theo các bước sau\n1. Click vào một trong 2 nút follow\n2. Chọn profile name khác với ban đầu, từ cái dropdown, đợi 3 giây để nó chạy\n3. Đọc kết quả của alert</p>\n<p>Nếu dùng <code class=\"language-text\">ProfilePage</code> function, nếu chọn Dan sau đó chuyển sang Sophie, nó sẽ hiện câu alert là <code class=\"language-text\">Followed Dan</code>\nNếu dùng <code class=\"language-text\">ProfilePage</code> class, ta sẽ được alert câu <code class=\"language-text\">Followed Sophie</code></p>\n<p><img src=\"https://overreacted.io/bug-386a449110202d5140d67336a0ade5a0.gif\" alt=\"Để thấy sự khác nhau, chúng ta cũng xem một con bug rất hay xảy ra trong React.\"></p>\n<p>Kết quả chạy của function component là đúng, sau khi chuyển sang người khác chúng ta đâu có gọi lại follow? Rõ ràng class component bị <em>bug</em>.</p>\n<p>Xem xét hàm <code class=\"language-text\">showMessage</code> bên trong class component</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nó đọc giá trị từ <code class=\"language-text\">this.props.user</code>, tuy nhiên, thằng <strong>this</strong> là một một giá trị luôn luôn <strong>mutable</strong>, tức có thể thay đổi, không phải bất biến.</p>\n<p>Nó là mục đích của sử dụng từ khóa <code class=\"language-text\">this</code> bên trong class chứ cũng ko hẳn là bug. React muốn lấy được giá trị mới nhất trong lúc render và trong các phương thức lifecycle</p>\n<blockquote>\n<p>Cho dễ nhớ, <code class=\"language-text\">this.props</code> luôn là giá trị mới nhất khi nó cần render </p>\n</blockquote>\n<p>Giờ nếu mà ko có sự tồn tại của function component, thì chúng ta giải quyết vấn đề này như thế nào ? Chúng ta sẽ lấy giá trị của <code class=\"language-text\">this.props</code> trước khi <code class=\"language-text\">setTimeout</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">showMessage</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleClick</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Tuy nhiên đây cũng chưa phải là cách hoàn hảo để giải quyết triệt để con bug trên. Có thể sử dụng javascript closure để hoàn toàn xử trí vụ này, nhưng thật lòng mà nói, xài closure vô rất rối, khó lòng nhẩm được giá trị hiện tại.</p>\n<p>Một cách khác được nhiều người sử dụng hơn là truy xuất trong hàm render, chúng ta đặt hết niềm tin vào giá trị của <code class=\"language-text\">prop</code> và <code class=\"language-text\">state</code> trong lúc render </p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// lấy giá trị props</span>\n    <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// lưu ý chúng ta đang trong hàm render</span>\n    <span class=\"token comment\">// đây ko phải là một phương thức của class</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Như vậy giá trị của <code class=\"language-text\">user</code> bên trong hàm <code class=\"language-text\">showMessage</code> nó sẽ luôn đồng nhất với lúc render.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://overreacted.io/how-are-function-components-different-from-classes/\">How Are Function Components Different from Classes?</a></p>\n"}},{"node":{"title":"Làm quen với React Hook bằng ví dụ","path":"/lam-quen-voi-react-hook-bang-vi-du/","date":"11. February 2019","timeToRead":2,"desc":"Chúng ta cùng bắt đầu học sử dụng React Hook, nó giải quyết vấn đề gì, sử dụng nó ra sao","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#state-trong-react\">State trong React</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-react-hook\">Sử dụng React Hook</a></li>\n</ul>\n<!-- /TOC -->\n<p>Mấy tháng trước thiên hạ rần rần với React hook khi nó còn đang ở bản proposal (show hàng cho các anh lập trình viên, nếu thích thì họ phát triển tiếp), bây giờ khi <a href=\"https://reactjs.org/blog/2019/02/06/react-v16.8.0.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React chính thức công bố trên trang chủ</a> rồi, chúng ta cùng làm quen với React hook cũng ko có gì muộn.</p>\n<h2 id=\"state-trong-react\"><a href=\"#state-trong-react\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>State trong React</h2>\n<p>Khi khai báo một component trong React bằng <code class=\"language-text\">class</code> (stateful component), không dùng function để khai báo (stateless component), thì trong component đó chúng ta có <code class=\"language-text\">state</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StatefulComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            name<span class=\"token operator\">:</span> <span class=\"token string\">'An Luu'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                Hello </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">StatelessComponent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            Hello </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Vấn đề của hàm <code class=\"language-text\">setState</code> là nó chỉ có khi chúng ta khai báo component bằng class, nó là hàm <code class=\"language-text\">async</code> - nghĩa là nếu chúng ta gọi <code class=\"language-text\">setState</code> nhiều lần, component được render lại với số lần gọi <code class=\"language-text\">setState</code>.</p>\n<p>Nguyên nhân chính đẻ ra cái hook chính là việc ko thể <code class=\"language-text\">setState</code> trong function component (ủa vậy tại sao đẻ ra khái niệm function component chi, stateless component chi?)</p>\n<h2 id=\"sử-dụng-react-hook\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-react-hook\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng React Hook</h2>\n<p>Trước tiên muốn dùng React Hook, phải đảm bảo version React đang dùng thấp nhất là 16.8.0</p>\n<p>Hàm quan trọng cần nhớ là <code class=\"language-text\">useState</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>useState<span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Hàm <code class=\"language-text\">useState</code> nhận tham số initial state, sau đó sẽ <strong>trả về một mảng</strong> 2 phần tử, phần tử đầu tiên là state hiện tại, thứ 2 là hàm để update state (<code class=\"language-text\">setState</code> đó mà)</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Sử dụng trên component thực tế đi nhỉ</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Form</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> addTodo <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSubmit</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Add a todo<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">StatelessComponent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTodo</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">text</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> newTodos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>todos<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> text <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setTodos</span><span class=\"token punctuation\">(</span>newTodos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">deleteTodo</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">index</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> newTodos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">todos</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        newTodos<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setTodos</span><span class=\"token punctuation\">(</span>newTodos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Form</span></span> <span class=\"token attr-name\">addTodo</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>addTodo<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">deleteTodo</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1549453648271/wSbUZbet_.gif\" alt=\"Làm quen với React Hook bằng ví dụ thực tế\"></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://hashnode.com/post/write-your-first-react-hook-cjrt8lfci00aw18s1z8v9s06n\n\">Write your first React Hook!</a></p>\n"}},{"node":{"title":"5 cách viết hay sử dụng trong React","path":"/5-cach-viet-hay-su-dung-trong-react/","date":"30. December 2018","timeToRead":4,"desc":"Điểm qua 6 React Pattern hay gặp trong React","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#render-theo-%C4%91i%E1%BB%81u-ki%E1%BB%87n\">Render theo điều kiện</a></li>\n<li><a href=\"#truy%E1%BB%81n-prop-xu%E1%BB%91ng-c%C3%A1c-component-children\">Truyền prop xuống các component children</a></li>\n<li><a href=\"#higher-order-component\">Higher Order Component</a></li>\n<li><a href=\"#server-side-rendering-%C4%91%E1%BB%83-t%E1%BB%91i-%C6%B0u-seo\">Server-side rendering để tối ưu SEO</a></li>\n<li><a href=\"#inline-style-v%C3%A0-css-import\">Inline style và CSS Import</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"render-theo-điều-kiện\"><a href=\"#render-theo-%C4%91i%E1%BB%81u-ki%E1%BB%87n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Render theo điều kiện</h2>\n<p>Nếu đang viết câu render theo điều kiện như bên dưới.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> condition <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> innerContent <span class=\"token operator\">=</span> condition <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Show me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Always visible</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token punctuation\">{</span> innerContent <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Cách viết ở trên có sẽ dễ rơi vào tình trạng mất kiểm soát khi có nhiều hơn 1 câu điều kiện rút gọn ở trước hàm <code class=\"language-text\">render</code>. Bạn phải mò mẫm lại các hàm bên trong để biết element nào sẽ được render.</p>\n<p>Xem xét cách viết sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> condition <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Always visible</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token punctuation\">{</span>\n\t\t\tcondition <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Show me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Nếu giá trị của <code class=\"language-text\">condition</code> là <code class=\"language-text\">false</code>, đoạn sau <code class=\"language-text\">&amp;&amp;</code>  sẽ ko được đếm xỉa.</p>\n<h2 id=\"truyền-prop-xuống-các-component-children\"><a href=\"#truy%E1%BB%81n-prop-xu%E1%BB%91ng-c%C3%A1c-component-children\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Truyền prop xuống các component children</h2>\n<p>Khi chúng ta cần truyền các prop xuống các component bên dưới, dùng kiểu <strong>destructuring object</strong>, không cần quan tâm đến tên chính xác truyền qua từng prop</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Details</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> <span class=\"token parameter\"><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> language <span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span><span class=\"token plain-text\"> works with </span><span class=\"token punctuation\">{</span> language <span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Layout</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> <span class=\"token parameter\"><span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>props <span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Details</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Layout</span></span>\n\t\t<span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>I<span class=\"token punctuation\">'</span>m here to stay<span class=\"token punctuation\">\"</span></span>\n\t\t<span class=\"token attr-name\">language</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Javascript<span class=\"token punctuation\">\"</span></span>\n\t\t<span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Alex<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"higher-order-component\"><a href=\"#higher-order-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Higher Order Component</h2>\n<p>React đã bỏ <code class=\"language-text\">React.createElement</code> và <em>mixins</em>, HOCs là lựa chọn còn lại duy nhất khi bạn muốn sử dụng cùng 1 component với nhiều version khác nhau.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newProps</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span> <span class=\"token parameter\"><span class=\"token maybe-class-name\">WrappedComponent</span></span> <span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">ModifiedComponent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ownProps</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WrappedComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">ownProps</span><span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">newProps</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token maybe-class-name\">ModifiedComponent</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Details</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> language <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> works with </span><span class=\"token punctuation\">{</span>language<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> newProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"An\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">ModifiedDetails</span> <span class=\"token operator\">=</span> <span class=\"token function\">withProps</span><span class=\"token punctuation\">(</span>newProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Details</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">ModifiedDetails</span>\n\t\ttitle<span class=\"token operator\">=</span><span class=\"token string\">\"I'm here to stay\"</span>\n\t\tlanguage<span class=\"token operator\">=</span>\"<span class=\"token maybe-class-name\">Javascript”</span>\n\t<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Nếu bạn quá thích HOC, có thể tham khảo để dùng thêm thư viện này <a href=\"https://github.com/acdlite/recompose\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/acdlite/recompose</a></p>\n<h2 id=\"server-side-rendering-để-tối-ưu-seo\"><a href=\"#server-side-rendering-%C4%91%E1%BB%83-t%E1%BB%91i-%C6%B0u-seo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Server-side rendering để tối ưu SEO</h2>\n<p>Với các ứng dụng Single Page App, có 2 issue thường được đề cập.</p>\n<ol>\n<li>Load lần đầu, javascript không được cache. Và nếu file javascript ban đầu quá lớn thì sẽ ảnh hưởng tới tốc độ load (lazy load sẽ giải quyết vấn đề này)</li>\n<li>Vì javascript sẽ đảm nhiệm render ở client, các con crawler của search engine sẽ không thể đọc được nội dung trang.</li>\n</ol>\n<p>Chúng ta giải quyết các issue này bằng Server Side Rendering. Tuy nhiên chi phí phát triển sẽ tăng lên bởi chúng ta buộc phải mua server chạy Node/Express.</p>\n<p>Trong trường hợp bạn chỉ quan tâm tới Server Rendering vì SEO, thì google giờ đây đã cập nhập con crawler của nó để đọc được nội dung file javascript, Google đã phát triển nó từ năm 2016 và giờ đây thuật toán đã chạy hết sức trơn tru.</p>\n<p>Trường hợp bạn quan tâm tới một số lợi ích khác của SSR như cache file, thì xài Next.js luôn chứ đừng ngồi mò config thủ công mất thời gian công sức.</p>\n<h2 id=\"inline-style-và-css-import\"><a href=\"#inline-style-v%C3%A0-css-import\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Inline style và CSS Import</h2>\n<p>React khuyến khích chúng ta nhìn ứng dụng trên góc độ các component, stylesheet được khuyến khích \"dính\" chặt với từng component.</p>\n<p>Có rất nhiều cách được giới thiệu để viết CSS chung trong file JS. Kiểu inline style cũng được dùng rộng rãi trong React Native.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> divStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tmargin<span class=\"token operator\">:</span> <span class=\"token string\">'40px'</span><span class=\"token punctuation\">,</span>\n\tborder<span class=\"token operator\">:</span> <span class=\"token string\">'5px solid pink'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> pStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tfontSize<span class=\"token operator\">:</span> <span class=\"token string\">'15px'</span><span class=\"token punctuation\">,</span>\n\ttextAlign<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">TextBox</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>divStyle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>pStyle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Yeah!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Chúng ta không còn phải import CSS, tuy nhiên bạn có bao giờ nghĩ đến chuyện maintain và đọc lại những đoạn code CSS như thế ?. Bạn cũng không có <em>media queries</em> nữa, <em>pseudo class</em> và <em>pseudo element</em> cũng không còn.</p>\n<p>Nếu cảm thấy mệt với kiểu inline style, bạn xem thử cách sau, CSS-in-JS, hay còn gọi <em>styled-component</em>.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Text</span> <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span><span class=\"token property-access\">div</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token css language-css\">\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">white</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token color\">black</span>\n</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">This is CSS-in-JS</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Lúc render thì nó sẽ thành như vầy</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\"><span class=\"token class\">.hash234dd2</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">black</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">white</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hash234dd3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>This is CSS-in-JS<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Khác với kiểu render inline, nó vẫn render thẻ style và CSS</p>\n<p>Các Pattern để viết trong React có thể nói phát triển không ngừng, bạn thấy cái nào tiện và hay thì dùng, không thì tự tạo ra một kiểu riêng của mình cũng là ý hay.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.freecodecamp.org/evolving-patterns-in-react-116140e5fe8f\">Evolving Patterns in React</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://blog.logrocket.com/5-common-practices-that-you-can-stop-doing-in-react-9e866df5d269\">5 common practices that you can stop doing in React</a></p>\n"}},{"node":{"title":"this.setState trong React chạy như thế nào","path":"/this-set-state-trong-react-chay-nhu-the-nao/","date":"12. December 2018","timeToRead":3,"desc":"Giải đáp thắc mắc vì sao this.setState có thể update DOM, chạy được trên mobile, chạy được trên bất kỳ môi trường nào","content":"<p>Update lại DOM nghe có vẻ là công việc của React DOM, tuy nhiên chúng ta gọi <code class=\"language-text\">this.setState()</code> bên trong một React Component,  nó sẽ không liên quan tới React DOM, React.Component sẽ xử lý.</p>\n<p>Vậy làm sao <code class=\"language-text\">setState()</code> bên trong React.Component update được DOM? Bạn có thể nghĩ là bên trong React.Component chứa logic để update DOM. Nhưng tại sao chúng ta vẫn có thể gọi <code class=\"language-text\">this.setState()</code> trên các môi trường khác, ví dụ như sử dụng trên React Native, nó cũng là extends của <code class=\"language-text\">React.Component</code>. Và React Native thì làm việc được trên cả Android iOS, cái View đó thì ko dựng bằng DOM.</p>\n<p>Nếu bạn đã sử dụng qua React Test Renderer hoặc Shallow Renderer. Cả 2 cách test này đều cho phép render một component bình thường và gọi <code class=\"language-text\">this.setState</code> bên trong nó. Và cả 2 thằng đó cũng ko liên quan gì tới DOM.</p>\n<p>Như vậy là <code class=\"language-text\">React.Component</code> được giao nhiệm vụ update state thì nó chạy một đoạn code chỉ định theo từng platform.</p>\n<p>Rất nhiều người lầm tưởng có một React <em>engine</em> bên trong package <code class=\"language-text\">react</code>. Điều này không đúng.</p>\n<p>Thực chất, kể từ phiên bản React 0.14, package <code class=\"language-text\">react</code> đã được tách hẳn ra cung cấp các API để khai báo <em>component</em>. Hầu hết code được thực hiện ở các <strong>renderers</strong></p>\n<p><code class=\"language-text\">react-dom</code>, <code class=\"language-text\">react-dom/server</code>, <code class=\"language-text\">react-native</code>, <code class=\"language-text\">react-test-renderer</code>, <code class=\"language-text\">react-art</code> là những <strong>renderers</strong> như vậy. Và bạn cũng có thể tự build một cái  luôn.</p>\n<p>Đó là lý do tại sao package <code class=\"language-text\">react</code> rất là hữu dụng dù bạn đang sử dụng trên bất kỳ platform nào. Tất cả những gì nó export, như <code class=\"language-text\">React.Component</code>, <code class=\"language-text\">React.createElement</code>, <code class=\"language-text\">React.Children</code> và thậm chí là <em>Hook</em>, độc lập hoàn toàn với platform. Và khi dùng chung với React DOM, React DOM server, React Native, các component của chúng ta vẫn import và sử dụng như nhau.</p>\n<p>Những thằng renderer sẽ có các API như <code class=\"language-text\">ReactDOM.render()</code> cho phép mount cấu trúc React Component vào DOM node. Mỗi thằng renderer sẽ cung cấp các API tương tự như vậy trên platform của nó. Tất cả các component khi được khai báo không cần import bất cứ gì từ renderer, như vậy để nó portable.\nBạn có thể hiểu là tại sao khi cập nhập thì chúng ta cần cập nhập cả 2 package <code class=\"language-text\">react</code> và <code class=\"language-text\">react-dom</code> cùng lúc. Ví dụ khi React 16.3 ra API context, <code class=\"language-text\">React.createContext()</code>, cái này <code class=\"language-text\">react</code> chưa có implement, mà được implement trong renderer như  React DOM, và React DOM Server sẽ có 2 cách implement khác nhau, React DOM có thể track context một chiều, nhưng React DOM Server sẽ track theo kiểu khác.</p>\n<p>Vẫn chưa trả lời được câu hỏi ban đầu, làm sao <code class=\"language-text\">setState()</code> bên trong <code class=\"language-text\">React.Component</code> <strong>nói chuyện</strong> với đúng renderer nó cần.</p>\n<p>Câu trả lời là các renderer set một field đặc biệt trong lúc create class. Field này gọi là <code class=\"language-text\">updater</code>, giá trị này bạn ko phải set, mà là công việc của React DOM, React DOM server, React Native set ngay sau khi tạo 1 instance của class.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Bên trong React DOM</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span><span class=\"token property-access\">updater</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">ReactDOMUpdater</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Bên trong React DOM Server</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span><span class=\"token property-access\">updater</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">ReactDOMServerUpdater</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Bên trong React Native</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span><span class=\"token property-access\">updater</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">ReactNativeUpdater</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Bên trong React, nó chỉ delegate lại công việc cho các renderer</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ví dụ đã được cắt bớt các phần khác.</span>\n<span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">partialState<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Sử dụng field `updater`</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">updater</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">enqueueSetState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> partialState<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Hy vọng bạn đã hiểu tại sao <code class=\"language-text\">this.setState()</code> có thể update được DOM</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://overreacted.io/how-does-setstate-know-what-to-do/\">How does setstate know what to do</a></p>\n"}}]}}},"context":{}}