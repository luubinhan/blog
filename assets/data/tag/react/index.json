{"hash":"a024fab2966897089cf72f0b270a7db411a685ed","data":{"tag":{"title":"react","belongsTo":{"edges":[{"node":{"id":"cf47898b4f8e17bbc7856e26a77f070a","title":"Một vài pattern để viết component của React cần dùng chung state","path":"/mot-vai-pattern-de-viet-component-cua-react-can-dung-chung-state/","date":"2021-03-14","timeToRead":6,"desc":"Câu chuyện chia sẽ state và phương thức giữa các component chưa bao giờ là cũ trong React","content":"<h2 id=\"compound-component\"><a href=\"#compound-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>compound component</h2>\n<p>Khi gặp tình huống một component không thể đứng độc lập, mà nó buộc phải kết hợp với một component khác và cùng chia sẻ một bộ state và phương thức. Đó là lúc chúng ta cân nhắc cách viết compound component.</p>\n<p>Một ví dụ rất dễ thấy của compound component là element <code class=\"language-text\">&lt;select /&gt;</code> và <code class=\"language-text\">&lt;option /&gt;</code>, <code class=\"language-text\">&lt;option/&gt;</code> không thể đứng độc lập, nó luôn được đặt trong <code class=\"language-text\">&lt;select/&gt;</code> có thể truy xuất và gọi các phương thức tương tự như <code class=\"language-text\">&lt;select/&gt;</code></p>\n<p><strong>Tại sao lại sử dụng compound component?</strong></p>\n<p>Nếu bạn là người viết component, người khác sử dụng component này, các dev khác sẽ cảm ơn bạn rất nhiều. Bạn đóng gói mọi thứ logic vào bên trong component cha như vậy, người sau sẽ không cần bận tâm nữa.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// parent component</span>\n<span class=\"token comment\">// xử lý event onChange, quản lý state selected value</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm.RadioInput</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm.RadioInput</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm.RadioInput</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">RadioImageForm</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Với child component của <code class=\"language-text\">&lt;RadioImageForm /&gt;</code>, để cho nó rõ ràng minh bạch là chúng ta sẽ sử dụng những giá trị cung cấp từ parent, chúng ta dùng kiểu viết <code class=\"language-text\">&lt;RadioImageForm.RadioInput /&gt;</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RadioImageForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Props</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">State</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token maybe-class-name\">RadioInput</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\tcurrentValue<span class=\"token punctuation\">,</span>\n\t    onChange<span class=\"token punctuation\">,</span>\n\t    label<span class=\"token punctuation\">,</span>\n\t    value<span class=\"token punctuation\">,</span>\n\t    name<span class=\"token punctuation\">,</span>\n\t    imgSrc<span class=\"token punctuation\">,</span>\n\t    key<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">RadioInputProps</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token parameter\"><span class=\"token maybe-class-name\">ReactElement</span></span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token comment\">// ...</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tonChange <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\"><span class=\"token keyword\">void</span></span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t  <span class=\"token comment\">// ...</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    currentValue<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    onChange<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onChange</span><span class=\"token punctuation\">,</span>\n    defaultValue<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">defaultValue</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ReactElement</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageFormWrapper</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* .... */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">RadioImageFormWrapper</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Một nhu cầu rất phổ biến là người khác sẽ muốn control component con <code class=\"language-text\">&lt;RadioInput /&gt;</code> bằng việc truyền thêm <code class=\"language-text\">prop</code>, nhưng thay vì truyền thằng vào component con, chúng ta hãy để họ truyền thông qua component cha <code class=\"language-text\">&lt;RadioImageForm/&gt;</code>, vì một lý do nào đó chúng ta cần truy cập các prop này bên trong component cha thì sao? Chúng ta làm thêm một bước <code class=\"language-text\">pass-through</code> các prop xuống cho component con với <code class=\"language-text\">React.Children.map</code> hoặc <code class=\"language-text\">React.cloneElement</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ReactElement</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> currentValue<span class=\"token punctuation\">,</span> onChange<span class=\"token punctuation\">,</span> defaultValue <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageFormWrapper</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>\n          <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Children</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span><span class=\"token punctuation\">,</span> \n            <span class=\"token punctuation\">(</span><span class=\"token parameter\">child<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ReactElement</span></span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n              <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cloneElement</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n                currentValue<span class=\"token punctuation\">,</span>\n                onChange<span class=\"token punctuation\">,</span>\n                defaultValue<span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">RadioImageFormWrapper</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Quay lại với <code class=\"language-text\">&lt;RadioInput /&gt;</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">static</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">RadioInput</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  currentValue<span class=\"token punctuation\">,</span>\n  onChange<span class=\"token punctuation\">,</span>\n  label<span class=\"token punctuation\">,</span>\n  value<span class=\"token punctuation\">,</span>\n  name<span class=\"token punctuation\">,</span>\n  imgSrc<span class=\"token punctuation\">,</span>\n  key<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">RadioInputProps</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio-button-group<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n      <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">aria-label</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onChange<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">checked</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>currentValue <span class=\"token operator\">===</span> value<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">aria-checked</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>currentValue <span class=\"token operator\">===</span> value<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>imgSrc<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>overlay<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* .... */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Toàn bộ source code: <a href=\"https://codesandbox.io/s/compound-components-radio-image-form-k1h8x\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codesandbox.io/s/compound-components-radio-image-form-k1h8x</a></p>\n<h3 id=\"hạn-chế\"><a href=\"#h%E1%BA%A1n-ch%E1%BA%BF\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hạn chế</h3>\n<p>Với cách viết compound component này, chúng ta bị một hạn chế là bắt buộc phai viết component theo kiểu</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm.RadioInput</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm.RadioInput</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm.RadioInput</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">RadioImageForm</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Chúng ta không được phép chèn thêm một số thẻ <code class=\"language-text\">&lt;div /&gt;</code> ở giữa nếu có nhu cầu tùy biến giao diện chẳng hạn</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm.RadioInput</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm.RadioInput</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm.RadioInput</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">RadioImageForm</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p><a href=\"https://codesandbox.io/s/compound-components-radio-image-form-k1h8x\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Compound component</a>\n<a href=\"https://codesandbox.io/s/functional-compound-components-w-hooks-radio-image-form-2zbhs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Compound component với React Hook</a></p>\n<h2 id=\"flexible-compound-component\"><a href=\"#flexible-compound-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Flexible compound component</h2>\n<p>Flexible compound component ra đời để giải quyết hạn chế của compound component, chúng ta sẽ sử dụng React Context API.</p>\n<p>Chúng ta sẽ tạo ra một <code class=\"language-text\">context</code> mà ở đó cả component con và cha điều có thể truy xuất được, đúng như mục đích ra đời của Context API</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">RadioImageFormContext</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  currentValue<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  defaultValue<span class=\"token operator\">:</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">onChange</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token maybe-class-name\">RadioImageFormContext</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">displayName</span> <span class=\"token operator\">=</span> <span class=\"token string\">'RadioImageForm'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chúng ta sẽ refactor lại <code class=\"language-text\">&lt;RadioImageForm/&gt;</code>, bỏ đi đoạn <code class=\"language-text\">React.Children.map</code>, thay bằng <code class=\"language-text\">&lt;Provider /&gt;</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ReactElement</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageFormWrapper</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageFormContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">RadioImageFormContext.Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">RadioImageFormWrapper</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<blockquote>\n<p>Sử dụng Provider có một lưu ý sống còn là đừng bao giờ truyền <code class=\"language-text\">value={{ some bla bla}}</code>, như vậy nó sẽ khác nhau trên tất cả những lần render, hãy nhớ truyền một thứ gì đó cache được và chỉ bị thay đổi khi cần thiết như this.state</p>\n</blockquote>\n<p>Trong component con <code class=\"language-text\">&lt;RadioInput /&gt;</code> chúng ta có thể truy xuất tất cả dữ liệu nội bộ thông qua <em>consumer</em>, bởi vì <code class=\"language-text\">&lt;RadioInput /&gt;</code> đang nằm trong <code class=\"language-text\">&lt;RadioImageForm /&gt;</code> luôn theo cách viết của chúng ta, nên có thể khai báo một static property <code class=\"language-text\">Consumer</code> bên trong <code class=\"language-text\">RadioImageForm</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RadioImageForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Props</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">State</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token maybe-class-name\">Consumer</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">RadioImageFormContext</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Consumer</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//...</span></code></pre>\n<p><a href=\"https://codesandbox.io/s/flexible-compound-components-radio-image-form-393y7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code ví dụ</a>\n<a href=\"https://codesandbox.io/s/functional-flexible-compound-components-w-hooks-radio-image-form-2u3sf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code Flexible compound component bằng functional component</a></p>\n<h2 id=\"provider-pattern\"><a href=\"#provider-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Provider Pattern</h2>\n<p>Provider pattern là kỹ thuật kết hợp giữa React Context API và render props pattern, vẫn là để giải quyết câu chuyện chia sẻ state giữa các component trong cây.</p>\n<p>Nếu bạn có thắc mắc, ủa vậy sao không dùng Redux, Mobx, Recoil, React Sweet State, Rematch, Unstated,... cho khỏe người ơi? Thì câu trả lời của mình là, ừ các bạn nên xài những thư viện quản lý state như vậy cho khỏe người, khỏe cho cả người maintain code bạn. Còn đây là cách làm nếu bạn muốn tham khảo, nếu không dùng gì hết, tôi dư giả thời gian để code từ đầu thì bạn có thể go-ahead với cách này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/components/DogDataProvider.tsx</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">IDog</span><span class=\"token punctuation\">;</span>\n  status<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Status</span><span class=\"token punctuation\">;</span>\n  error<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Error</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> initState<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">State</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Status</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">loading</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> error<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">DogDataProviderContext</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token maybe-class-name\">DogDataProviderContext</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">displayName</span> <span class=\"token operator\">=</span> <span class=\"token string\">'DogDataProvider'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">DogDataProvider</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token parameter\"><span class=\"token maybe-class-name\">ReactElement</span></span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">useState</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">State</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(initState);\n\n  React.useEffect(() => </span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>initState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>void</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> => </span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// MOCK API CALL</span>\n        <span class=\"token keyword\">const</span> asyncMockApiFn <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IDog</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> =>\n          await new Promise(resolve => setTimeout(() => resolve(DATA), 1000));\n        const data = await asyncMockApiFn();\n\n        setState(</span><span class=\"token punctuation\">{</span>\n          data<span class=\"token punctuation\">,</span>\n          status<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Status</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">loaded</span><span class=\"token punctuation\">,</span>\n          error<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span>\n        <span class=\"token punctuation\">}</span><span class=\"token plain-text\">);\n      } catch (error) </span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          error<span class=\"token punctuation\">,</span>\n          status<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Status</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">error</span><span class=\"token punctuation\">,</span>\n          data<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    })();\n  }, []);\n\n  return (\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DogDataProviderContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">DogDataProviderContext.Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  );\n};</span></code></pre>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/components/DogDataProvider.tsx</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useDogProviderState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useContext</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">DogDataProviderContext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'useDogProviderState phải được sử dụng bên trong DogDataProvider.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword control-flow\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/index.tsx</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* DataProvider phải nằm trên cùng của cây.*/</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DogDataProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Nav</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>py-5 md:py-20 max-w-screen-xl mx-auto text-center text-white w-full<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Banner</span></span>\n              <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'React Component Patterns:'</span><span class=\"token punctuation\">}</span></span>\n              <span class=\"token attr-name\">subtitle</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'Provider Pattern'</span><span class=\"token punctuation\">}</span></span>\n            <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">exact</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Component con sử dụng dữ liệu qua Consumer */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profile</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/friends<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Component con sử dụng dữ liệu qua Consumer */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DogFriends</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">DogDataProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Profile</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// custom hook nhận \"subscribes\" khi có state thay đổi</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useDogProviderState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>//...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Profile</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mt-10<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">       \n        </span><span class=\"token punctuation\">{</span>error <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Error</span></span> <span class=\"token attr-name\">errorMessage</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> status <span class=\"token operator\">===</span> <span class=\"token maybe-class-name\">Status</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">loading</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Loader</span></span> <span class=\"token attr-name\">isInherit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ProfileCard</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><a href=\"https://codesandbox.io/s/provider-pattern-with-react-custom-hooks-llirx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source Code Provider Pattern</a></p>\n<p><a href=\"https://dev.to/alexi_be3/react-component-patterns-49ho\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Component Patterns</a></p>\n","cover_image":""}},{"node":{"id":"f92db246b489ea2b34cf82e11e30aea6","title":"Làm tính năng Theme trong React?","path":"/lam-tinh-nang-theme-trong-react/","date":"2021-02-21","timeToRead":3,"desc":"Sẽ có nhiều tiếp cận để làm theme cho trang web, mổ xẻ 2 cách phổ biến hiện nay trong React, chọn cách nào cho nó đơn giản nhưng mang lại hiệu quả cao","content":"<p>Để hỗ trợ tính năng <em>Theme</em>, cho phép người dùng lựa chọn kiểu giao diện mà họ thích, trong React, bạn sẽ có thể tiếp cận 1 trong 2 cách dùng CSS-in-JS hoặc dùng CSS variable (tất nhiên không có hỗ trợ với IE)</p>\n<p>Nếu dùng CSS-in-JS bạn sẽ có thể làm được nhiều <em>thứ</em> hơn, bạn có một bộ công cụ đủ các <strong>đạo cụ</strong> để mua mai trong JS. Bài viết này sẽ chỉ ra tại sao bạn nên dùng CSS variable cho nhu cầu làm theme</p>\n<p>Nếu dùng CSS-in-JS, trong React bạn sẽ tổ chức một <code class=\"language-text\">ThemeProvider</code> bằng React Context, dùng hook <code class=\"language-text\">useTheme</code>  để lấy giá trị trong <code class=\"language-text\">ThemeProvider</code>, sẽ như thế này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">styled</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'@emotion/styled'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">ThemeProvider</span><span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'emotion-theming'</span>\n\n<span class=\"token keyword\">const</span> themes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  light<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    colors<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      primary<span class=\"token operator\">:</span> <span class=\"token string\">'deeppink'</span><span class=\"token punctuation\">,</span>\n      background<span class=\"token operator\">:</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  dark<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    colors<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      primary<span class=\"token operator\">:</span> <span class=\"token string\">'lightpink'</span><span class=\"token punctuation\">,</span>\n      background<span class=\"token operator\">:</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">PrimaryText</span> <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">div</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  padding<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n  color<span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span><span class=\"token property-access\">colors</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">primary</span><span class=\"token punctuation\">,</span>\n  backgroundColor<span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span><span class=\"token property-access\">colors</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">background</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ThemeToggler</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">,</span> onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> nextTheme <span class=\"token operator\">=</span> theme <span class=\"token operator\">===</span> <span class=\"token string\">'light'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'dark'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'light'</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>nextTheme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Change to </span><span class=\"token punctuation\">{</span>nextTheme<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> mode\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">,</span> setTheme<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeProvider</span></span> <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>themes<span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PrimaryText</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">This text is the primary color</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">PrimaryText</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeToggler</span></span>\n        <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextTheme</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setTheme</span><span class=\"token punctuation\">(</span>nextTheme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeProvider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">App</span></code></pre>\n<p>Nếu dùng CSS variable, chúng ta khai bao một bộ các biến cần dùng, rồi chèn thêm <code class=\"language-text\">data-theme</code> cho thẻ <code class=\"language-text\">body</code></p>\n<p>CSS</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body<span class=\"token attribute\"><span class=\"token punctuation\">[</span><span class=\"token attr-name\">data-theme</span><span class=\"token operator\">=</span><span class=\"token attr-value\">'light'</span><span class=\"token punctuation\">]</span></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token variable\">--colors-primary</span><span class=\"token punctuation\">:</span> <span class=\"token color\">deeppink</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">--colors-background</span><span class=\"token punctuation\">:</span> <span class=\"token color\">white</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">body<span class=\"token attribute\"><span class=\"token punctuation\">[</span><span class=\"token attr-name\">data-theme</span><span class=\"token operator\">=</span><span class=\"token attr-value\">'dark'</span><span class=\"token punctuation\">]</span></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token variable\">--colors-primary</span><span class=\"token punctuation\">:</span> <span class=\"token color\">lightpink</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">--colors-background</span><span class=\"token punctuation\">:</span> <span class=\"token color\">black</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Phần implement của React component lúc này sửa lại</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token string\">'./css-vars.css'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">styled</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'@emotion/styled'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">PrimaryText</span> <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">div</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  padding<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n  color<span class=\"token operator\">:</span> <span class=\"token string\">'var(--colors-primary)'</span><span class=\"token punctuation\">,</span>\n  backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'var(--colors-background)'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ThemeToggler</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">,</span> setTheme<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> nextTheme <span class=\"token operator\">=</span> theme <span class=\"token operator\">===</span> <span class=\"token string\">'light'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'dark'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'light'</span>\n  <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">dataset</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">theme</span> <span class=\"token operator\">=</span> theme\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setTheme</span><span class=\"token punctuation\">(</span>nextTheme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Change to </span><span class=\"token punctuation\">{</span>nextTheme<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> mode\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PrimaryText</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">This text is the primary color</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">PrimaryText</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeToggler</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">App</span></code></pre>\n<p>Thẳng thắn mà nói, cả 2 cách làm này đều cho kết quả như nhau về mặt trãi nghiệm sử dụng, dùng CSS-in-JS sẽ có chút cảm giác hơi quá đà kỹ thuật, từ chuyên ngành là over-engineering.</p>\n<iframe src=\"https://codesandbox.io/embed/css-variables-vs-themeprovider-df90h?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"CSS Variables vs ThemeProvider\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n<p>Về hiệu năng thì sao?</p>\n<p>ThemeProvider</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/b903d3908c2f09f6139573d3da3ce48d0e831885/2cc29/static/e25d5f73f3fffe0fed8586eea95892df/e7448/theme-provider.png\" alt=\"Profiling session showing everything rendered\"></p>\n<p>CSS variable</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/e737a004afce33b75c4c0b07e42c58a3ff1aaeec/21d3b/static/47d22cd6f96a31f50329ff658f18af39/e7448/css-vars.png\" alt=\"Profiling session showing only one component rendered\"></p>\n<p>Cũng không nhất thiết phải nhìn vào con số mili giây phải tốn cho việc render, vì simple này khá là bé. Bạn cứ hình dùng nếu một cây React Component với hàng trăm component con lồng ghép nhau, khi thay đổi giá trị trong ThemeProvider, tất cả những component đều bị render lại thì sẽ như thế nào? Việc dùng CSS variable sẽ mang lại hiệu quả hơn nhiều vì trình duyệt không phải làm quá nhiều thứ như cách 1.</p>\n<p>Có một lý do mà mình cho là hơi ngụy biện khi khăng khăng đòi dùng JS-in-CSS theo mình đoán là các bạn thật sự chưa đủ tự tin cũng như \"trình\" để viết CSS hiện đại, bạn chuyên tâm nâng tầm JS của mình mà quên mất việc nâng tầm CSS, vón đã phát triển rất xa từ cái thời bạn dùng <code class=\"language-text\">float</code></p>\n<p><a href=\"https://epicreact.dev/css-variables/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Use CSS Variables instead of React Context</a></p>\n","cover_image":""}},{"node":{"id":"6b324ce351918a6b8b007a9763267d64","title":"Redux selector và vấn đề sử dụng sao cho hiệu quả","path":"/redux-selector-va-van-de-su-dung-sao-cho-hieu-qua/","date":"2020-12-10","timeToRead":4,"desc":"Nếu đang sử dụng redux, và bạn có thắc mắc, viết selector sao cho hiệu quả về tốc độ và dễ maintain thì đây là bài viết bạn nên đọc","content":"<h2 id=\"selector\"><a href=\"#selector\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Selector</h2>\n<blockquote>\n<p>Selector là một hàm với input là 'state' của store và trả về một giá trị mong muốn</p>\n</blockquote>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">selectEntities</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token arrow operator\">=></span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">entities</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">selectItemIds</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">items</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token arrow operator\">=></span> item<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">selectSomeSpecificField</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token arrow operator\">=></span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">some</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">deeply</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">nested</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">field</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">selectItemsWhoseNamesStartWith</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items<span class=\"token punctuation\">,</span> namePrefix</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">const</span> filteredItems <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token arrow operator\">=></span> item<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">startsWith</span><span class=\"token punctuation\">(</span>namePrefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword control-flow\">return</span> filteredItems<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Về cách đặt tên, không bắt buộc, nhưng đa phần sẽ đặt với <em>prefix</em> <code class=\"language-text\">select</code> hoặc <code class=\"language-text\">get</code></p>\n<h2 id=\"khác-nhau-giữa-useselector-và-mapstate\"><a href=\"#kh%C3%A1c-nhau-gi%E1%BB%AFa-useselector-v%C3%A0-mapstate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khác nhau giữa <code class=\"language-text\">useSelector</code> và <code class=\"language-text\">mapState</code></h2>\n<ul>\n<li>Khi một <em>action</em> được <em>dispatch</em>, <code class=\"language-text\">useSelector</code> sẽ thực hiện so sánh giữa kết quả trước đó và kết quả hiện tại, <em>nếu khác</em>, component bị force để re-render.</li>\n<li><code class=\"language-text\">useSelector</code> sử dụng so sánh <code class=\"language-text\">===</code> chứ không dùng phương pháp so sánh <strong>shallow</strong> (dịch vui là so sánh \"nhẹ\")</li>\n</ul>\n<h2 id=\"lý-do-sử-dụng-selector\"><a href=\"#l%C3%BD-do-s%E1%BB%AD-d%E1%BB%A5ng-selector\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lý do sử dụng selector</h2>\n<ul>\n<li>Sử dụng lại, một selector có thể sử dụng ở nhiều nơi, nhiều component khác nhau</li>\n<li>Tinh gọn, ví dụ chúng ta có <em>entity</em> <code class=\"language-text\">user</code>  chứa <code class=\"language-text\">lastname</code>, <code class=\"language-text\">fullname</code>, <code class=\"language-text\">email</code>, nhưng chúng ta chỉ muốn lấy <code class=\"language-text\">email</code>, một selector <code class=\"language-text\">getUserEmail</code> sẽ rất rõ ràng tinh gọn</li>\n<li>Lý tưởng nhất, chỉ có <em>reducer</em> và <em>selector</em> mới biết được structure của redux store, như vậy một khi structure này có thay đổi, chúng ta chỉ việc cập nhập lại ở 2 chỗ này.</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> createSelector <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'reselect'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getVisibilityFilter</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token arrow operator\">=></span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">visibilityFilter</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getTodos</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token arrow operator\">=></span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">todos</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> getVisibleTodos <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">[</span>getVisibilityFilter<span class=\"token punctuation\">,</span> getTodos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">visibilityFilter<span class=\"token punctuation\">,</span> todos</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>visibilityFilter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'SHOW_ALL'</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword control-flow\">return</span> todos\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'SHOW_COMPLETED'</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword control-flow\">return</span> todos<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span> <span class=\"token arrow operator\">=></span> t<span class=\"token punctuation\">.</span><span class=\"token property-access\">completed</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'SHOW_ACTIVE'</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword control-flow\">return</span> todos<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span> <span class=\"token arrow operator\">=></span> <span class=\"token operator\">!</span>t<span class=\"token punctuation\">.</span><span class=\"token property-access\">completed</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token spread operator\">...</span>\n<span class=\"token keyword\">const</span> visibleTodos <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span>getVisibleTodos<span class=\"token punctuation\">)</span>\n<span class=\"token spread operator\">...</span></code></pre>\n<h2 id=\"sử-dụng-sao-cho-tối-ưu\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-sao-cho-t%E1%BB%91i-%C6%B0u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng sao cho tối ưu?</h2>\n<p>Vì <code class=\"language-text\">useSelector</code> dùng phép so sánh <code class=\"language-text\">===</code> nên nếu hàm selector trả về mảng (dùng <code class=\"language-text\">.map</code>, <code class=\"language-text\">.filter</code>, destructuring <code class=\"language-text\">...</code>), component sẽ bị trigger re-render.</p>\n<p>Để ý, khi function dùng làm <em>selector</em> có thể có nhiều tính toán, transform phức tạp. Với mỗi lần re-render, sẽ tốn thời gian để thực thi hàm selector.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">selectData</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> filteredData <span class=\"token operator\">=</span> <span class=\"token function\">expensiveFiltering</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> sortedData <span class=\"token operator\">=</span> <span class=\"token function\">expensiveSorting</span><span class=\"token punctuation\">(</span>filteredData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> transformedData <span class=\"token operator\">=</span> <span class=\"token function\">expensiveTransformation</span><span class=\"token punctuation\">(</span>sortedData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> transformedData<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token spread operator\">...</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span>selectData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Trong lúc re-render,  dù cho <code class=\"language-text\">data</code> không thay đổi, hàm <code class=\"language-text\">selectData</code> vẫn được gọi.</p>\n<p>Giải quyết bằng cách sử dụng thư viện <a href=\"https://github.com/reduxjs/reselect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reselect</a>, nó sẽ cho phép trả về kết quả trước đó, nếu input là giống nhau.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useSelector <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> createSelector <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'reselect'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">selectUsers</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token arrow operator\">=></span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">users</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> selectData <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">state</span> <span class=\"token arrow operator\">=></span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">,</span>\n    <span class=\"token parameter\">data</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> filteredData <span class=\"token operator\">=</span> <span class=\"token function\">expensiveFiltering</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> sortedData <span class=\"token operator\">=</span> <span class=\"token function\">expensiveSorting</span><span class=\"token punctuation\">(</span>filteredData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> transformedData <span class=\"token operator\">=</span> <span class=\"token function\">expensiveTransformation</span><span class=\"token punctuation\">(</span>sortedData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> transformedData<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">UsersCounter</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token spread operator\">...</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span>selectData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"selector-phụ-thuộc-vào-giá-trị-prop-của-component\"><a href=\"#selector-ph%E1%BB%A5-thu%E1%BB%99c-v%C3%A0o-gi%C3%A1-tr%E1%BB%8B-prop-c%E1%BB%A7a-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Selector phụ thuộc vào giá trị prop của component</h3>\n<p>Trong trường hợp một hàm selector có nhận input là prop của component, phải đảm bảo hàm selector được khai bao bên ngoài component.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useSelector <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> createSelector <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'reselect'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">selectUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> userId</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> users<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token arrow operator\">=></span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">===</span> userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> selectUserById <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">[</span>selectUser<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token parameter\">user</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">expensiveTransformation</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">UserDetails</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> userId <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">selectUserById</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">User Details:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserDetails</span></span> <span class=\"token attr-name\">userId</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"nhiều-instance-của-một-component\"><a href=\"#nhi%E1%BB%81u-instance-c%E1%BB%A7a-m%E1%BB%99t-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nhiều instance của một component</h3>\n<p>Khi một hàm selector được dùng trong nhiều <em>instance</em> của một component và cũng phụ thuộc vào <code class=\"language-text\">prop</code>, như 2 <em>instance</em> của <code class=\"language-text\">UserDetails</code> ở trên</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserDetails</span></span> <span class=\"token attr-name\">userId</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserDetails</span></span> <span class=\"token attr-name\">userId</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p>Chúng ta cần chắc chắn, <strong>mỗi <code class=\"language-text\">instance</code> của <code class=\"language-text\">UserDetails</code> sẽ ứng với một instance của hàm selector,</strong> nếu chỉ viết như ví dụ ở trên là không được, cả 2 instance của <code class=\"language-text\">UserDetails</code> chỉ trỏ về một selector.</p>\n<p>Sử dụng kết hợp với <code class=\"language-text\">useMemo</code> của React để đạt được kết quả mong muốn</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useMemo <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useSelector <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> createSelector <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'reselect'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">selectUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> userId</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> users<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token arrow operator\">=></span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">===</span> userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeSelectUserById</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> \n  <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span>selectUser<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token parameter\">user</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">expensiveTransformation</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">UserDetails</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> userId <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> selectUserMemo <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span>makeSelectUserById<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">selectUserMemo</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">User Details:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserDetails</span></span> <span class=\"token attr-name\">userId</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserDetails</span></span> <span class=\"token attr-name\">userId</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Với cách này <code class=\"language-text\">const selectUserMemo = useMemo(makeSelectUserById, []);</code> chúng ta tạo một instance của hàm selector trên từng instance của component.</p>\n<p><strong>Tài liệu tham khảo</strong></p>\n<p><a href=\"https://programmerden.com/2020/04/06/optimize-your-redux-selectors-with-useselector-hook-and-memoize-them-with-reselect/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://programmerden.com/2020/04/06/optimize-your-redux-selectors-with-useselector-hook-and-memoize-them-with-reselect/</a></p>\n<p><a href=\"https://blog.isquaredsoftware.com/2017/12/idiomatic-redux-using-reselect-selectors/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.isquaredsoftware.com/2017/12/idiomatic-redux-using-reselect-selectors/</a></p>\n","cover_image":""}},{"node":{"id":"c4165c753ae81ff286e7ea6b27b8e2a3","title":"Vài lưu ý trong React để tránh các vấn đề với bảo mật","path":"/vai-luu-y-trong-react-de-tranh-cac-van-de-voi-bao-mat/","date":"2020-11-23","timeToRead":2,"desc":"Một vài điểm nhắc nhẹ các bạn khi đang viết React, để tránh bị dính injection","content":"<h2 id=\"dùng-data-binding-mặc-định-để-có-xss-protection\"><a href=\"#d%C3%B9ng-data-binding-m%E1%BA%B7c-%C4%91%E1%BB%8Bnh-%C4%91%E1%BB%83-c%C3%B3-xss-protection\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dùng data binding mặc định để có XSS protection</h2>\n<p>Khi render một nội dung dạng <code class=\"language-text\">text</code> bằng kiểu <strong>data binding mặc định</strong> (đặt trong dấu <code class=\"language-text\">{}</code>), React sẽ <strong>mặc định</strong> xử lý để tránh các vấn đề về XSS. Lưu ý một điều là nếu truyền vào cho <code class=\"language-text\">attribute</code> của element thì sẽ không có được tính năng này.</p>\n<p>Mặc định có XSS protection</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>textContent<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Không có XSS protection, nhớ validate thủ công trước</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<h2 id=\"validate-urls-trước-khi-sử-dụng\"><a href=\"#validate-urls-tr%C6%B0%E1%BB%9Bc-khi-s%E1%BB%AD-d%E1%BB%A5ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Validate URLs trước khi sử dụng</h2>\n<p>URLs có thể bị <em>inject</em> một code js bằng <code class=\"language-text\">javascript:</code>. Để <strong>validate</strong> một URL chỉ được phép là một trong 2 dạng <code class=\"language-text\">http:</code> <code class=\"language-text\">https:</code>:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">validateURL</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> parsed <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'https:'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http:'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>parsed<span class=\"token punctuation\">.</span><span class=\"token property-access\">protocol</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">validateURL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> url <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Click here!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"render-html\"><a href=\"#render-html\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Render HTML</h2>\n<p>Việc render HTML như trên trang chính thức của React cũng đã đề cập, <em>hết sức nguy hiểm</em>, nên luôn phải <strong>sanitized</strong> trước khi render, dùng thư viện <a href=\"https://www.npmjs.com/package/dompurify\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.npmjs.com/package/dompurify</a></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">purify</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"dompurify\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">dangerouslySetInnerHTML</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> __html<span class=\"token operator\">:</span>purify<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sanitize</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<h2 id=\"truy-cập-trực-tiếp-đến-dom\"><a href=\"#truy-c%E1%BA%ADp-tr%E1%BB%B1c-ti%E1%BA%BFp-%C4%91%E1%BA%BFn-dom\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Truy cập trực tiếp đến DOM</h2>\n<p>Không được truy cập trực tiếp đến DOM rồi <em>inject</em> thêm vào element nào đó, luôn sử dụng cặp đôi <code class=\"language-text\">dangerouslySetInnerHTML</code> và <code class=\"language-text\">dompurify</code> như ở trên nếu cần chèn nội dung</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">purify</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"dompurify\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">dangerouslySetInnerHTML</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>__html<span class=\"token operator\">:</span>purify<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sanitize</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p>Đừng có làm vậy nghe, dùng <code class=\"language-text\">findDomNode()</code>, rồi <code class=\"language-text\">innerHTML</code> như thời đi học</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">myRef</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHTML</span> <span class=\"token operator\">=</span> attackerControlledValue<span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"kiểm-tra-thư-viện-dependency\"><a href=\"#ki%E1%BB%83m-tra-th%C6%B0-vi%E1%BB%87n-dependency\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kiểm tra thư viện dependency</h2>\n<p>Các thư viện dependency đôi khi cũng rất nguy hiểm, một cách vô tình hay cố ý, dùng những công cụ như là <a href=\"https://www.npmjs.com/package/snyk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">snyk</a> tích hợp với công cụ quản lý code (Github, Gitlab, Bitbucket) để kiểm tra một cách tự động.</p>\n<h2 id=\"json\"><a href=\"#json\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JSON</h2>\n<p>Việc gửi đi một JSON lên phía server cũng không phải là ít gặp, luôn escape ký tự <code class=\"language-text\">&lt;</code> để tránh bị <em>inject</em></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">__PRELOADED_STATE__</span> <span class=\"token operator\">=</span>   $<span class=\"token punctuation\">{</span><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>preloadedState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&lt;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\u003c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://snyk.io/blog/10-react-security-best-practices/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">10 React security best practices</a></p>\n","cover_image":""}},{"node":{"id":"8958a2113badc0e460e80f2970e78e79","title":"Hướng dẫn kỹ thuật FLIP animation với React","path":"/huong-dan-ky-thuat-flip-animation-voi-react/","date":"2020-11-18","timeToRead":2,"desc":"Nếu bạn là người làm animation có tâm, bạn không muốn animation làm ảnh hưởng đến tốc độ của ứng dụng, bạn cần biết đến FLIP animation","content":"<p>Trước đây mình đã có một bài về FLIP animation, các bạn có thể đọc lại <a href=\"https://vuilaptrinh.com/2018-07-25-huong-dan-tao-animate-voi-flip-technique/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ở đây</a> để biết kỹ thuật này là gì và tại sao nó lại giúp tối ưu tốc độ.</p>\n<p>Có thể tóm tắt kỹ thuật FLIP bằng hình minh họa bên dưới</p>\n<p><img src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/06/JakPwnSa.png?w=398&#x26;ssl=1\"></p>\n<p>Những gì trong ô màu tím, cần diễn ra trước sự kiện <em>paint</em> của trình duyệt.</p>\n<p>Để đạt mục đích <strong><em>transform</em> trước khi trình duyệt thực hiện <code class=\"language-text\">paint</code></strong>, chúng ta sẽ sử dụng <code class=\"language-text\">useLayoutEffect</code>, những gì diễn ra ở đây sẽ xảy ra <strong>sau khi DOM cập nhập</strong>, <strong>trước khi paint</strong></p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"React FLIP animations\" src=\"https://codepen.io/jlkiri/embed/oNjaMrK?height=265&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/jlkiri/pen/oNjaMrK'>React FLIP animations</a> by Kirill Vasiltsov\n  (<a href='https://codepen.io/jlkiri'>@jlkiri</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>Với lần render đầu tiên, chúng ta cần <em>cache</em> lại vị trí cuối cùng của animation</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">const</span> rects <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">const</span> squares <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.square'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> square <span class=\"token keyword\">of</span> squares<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        rects<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> square<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> squares <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.square'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> square <span class=\"token keyword\">of</span> squares<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> cachedRect <span class=\"token operator\">=</span> rects<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>cachedRect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> nextRect <span class=\"token operator\">=</span> square<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// invert</span>\n            <span class=\"token keyword\">const</span> translateX <span class=\"token operator\">=</span> cachedRect<span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span> <span class=\"token operator\">-</span> nextRect<span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// cache position và size</span>\n            rects<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> nextRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// play animation</span>\n            square<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span> transform<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translateX(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>translateX<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            \t<span class=\"token punctuation\">{</span> transform<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translateX(0px)</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> ids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Tóm tắt những gì đã thực hiện bằng hình minh họa sau</p>\n<p><img src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/06/kTkr-F7_.png?fit=1024%2C1024&#x26;ssl=1\" alt=\"Diagram. Cache the size and position, retrieve previous size and position from cache, get new size and position, calculate the difference, and play the animation.\"></p>\n<p><strong>Một vài lưu ý</strong></p>\n<ul>\n<li>Đảm bảo các tính toán không vượt quá 100ms, điều này nhằm đảm bảo user không cảm nhận có một độ trễ trên giao diện, có thể kiểm tra bằng DevTools\n<img src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/06/6LqLR8Jc.png?fit=1024%2C275&#x26;ssl=1\" alt=\"img\"></li>\n<li>Để tránh re-render không cần thiết, chúng ta ko được dùng <code class=\"language-text\">useState</code>, thay vào đó chúng ta phải dùng <code class=\"language-text\">useRef</code> một object cố định chúng ta có thể thay đổi giá trị mà không gây ra re-render</li>\n<li>Không thực hiện đọc vị trí -> chạy animate ngay và luôn trên element đó, luôn thực hiện theo dạng đọc hàng loạt, sau đó animate một loạt</li>\n<li>Nếu không muốn tự viết, có thể tham khảo 2 thư viện dùng với React: <a href=\"https://github.com/aholachek/react-flip-toolkit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">react-flip-toolkit</code></a> và <a href=\"https://github.com/jlkiri/react-easy-flip\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">react-easy-flip</code></a>.</li>\n</ul>\n<p><a href=\"https://css-tricks.com/everything-you-need-to-know-about-flip-animations-in-react/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Everything You Need to Know About FLIP Animations in React</a></p>\n","cover_image":""}},{"node":{"id":"2bda1aea7bf5ac181ed1d3a656b277f5","title":"Hướng dẫn sử dụng useMemo trong React","path":"/huong-dan-su-dung-use-memo-trong-react/","date":"2020-10-26","timeToRead":2,"desc":"Nếu bạn thấy app của mình bắt đầu chậm, đó là lúc bạn nên bắt đầu cân nhắc các phương pháp để tối ưu tốc độ và đọc bài viết này.","content":"<p>Thường React khá nhanh, chúng ta cũng không cần quá bận tâm đến việc tối ưu, nhiều bạn cũng sẽ không đồng ý với quan điểm này: những <strong>tiện ích</strong> để tối ưu mà React cung cấp, chưa đủ <strong>trưởng thành</strong> (premature - theo quan điểm của tác giả).</p>\n<p>Chúng ta sẽ cùng xem qua cách sử dụng một <strong>tiện ích</strong> như vậy trong React để tối ưu tốc độ: <code class=\"language-text\">useMemo</code></p>\n<h2 id=\"khi-nào-sử-dụng-usememo\"><a href=\"#khi-n%C3%A0o-s%E1%BB%AD-d%E1%BB%A5ng-usememo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khi nào sử dụng <code class=\"language-text\">useMemo</code></h2>\n<blockquote>\n<p>Khi có những tính toán để lấy giá trị khá mất công, chúng ta lưu kết quả tính lại cho tiết kiệm thời gian tính toán.</p>\n</blockquote>\n<p>Đừng dùng lộn với <code class=\"language-text\">React.memo</code> và <code class=\"language-text\">useCallback</code>, chúng nó được dùng vào những mục đích rất khác nhau.</p>\n<h2 id=\"ví-dụ\"><a href=\"#v%C3%AD-d%E1%BB%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ví dụ</h2>\n<p>Ví dụ chúng ta có ứng dụng hiển thị danh sách user, với tính năng cho phép filter theo user name.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Robin'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Dennis'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>text<span class=\"token punctuation\">,</span> setText<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>search<span class=\"token punctuation\">,</span> setSearch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleText</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSearch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setSearch</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n  <span class=\"token keyword\">const</span> filteredUsers <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Filter function is running ...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>search<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleText<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSearch<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Search\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n \n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span></span> <span class=\"token attr-name\">list</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>filteredUsers<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">List</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> list <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>list<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListItem</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">item</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">ListItem</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> item <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">App</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chỉ khi điền giá trị vào input, sau đó click <code class=\"language-text\">handleSearch</code> thì lúc giá trị của <code class=\"language-text\">filteredUsers</code> mới có sự thay đổi, tuy nhiên vì <code class=\"language-text\">filteredUsers</code> là một hàm nó sẽ luôn được rồi khi render, mỗi lần gõ một ký tự vào input, nó đã bị gọi lại, với giá trị trả về y như nhau.</p>\n<p>Tất nhiên ứng dụng nhỏ thì vấn đề ở đây ko quá nghiêm trọng. Còn nếu muốn tối ưu hơn, chúng ta lưu lại kết quả, và chỉ chạy lại hàm tính toán kết quả khi có một sự thay đổi nào đó.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> filteredUsers <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useMemo</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n    users<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Filter function is running ...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>search<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>search<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Hàm này chỉ <em>execute</em> khi giá trị <code class=\"language-text\">search</code> thay đổi so với lần chạy trước đó.</p>\n<p>Bản chất bên trong React thực hiện một phép so sánh trên giá trị <code class=\"language-text\">search</code> trước khi thực thi. Điều này có nghĩa là nếu chi phí cho việc so sánh này trong một số tình huống, đôi khi còn tốn nhiều thời gian hơn là việc gọi luôn mà ko cần so sánh. Nên các bạn có sử dụng cũng nên linh động, không nên quá cứng nhắc.</p>\n<p><a href=\"https://www.robinwieruch.de/react-usememo-hook?ck_subscriber_id=887772023\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to useMemo in React</a></p>\n","cover_image":""}},{"node":{"id":"0110ab408cc3a3c13502073c84dc3f2d","title":"Hiểu về hook useRef của React như thế nào cho đúng","path":"/hieu-ve-hook-use-ref-cua-react-nhu-the-nao-cho-dung/","date":"2020-09-27","timeToRead":3,"desc":"Nếu nghe useRef bạn nghĩ ngay trong đầu là để dùng với việc truy xuất DOM thật, bạn cần đọc bài này.","content":"<p>Câu nói chào hàng của <code class=\"language-text\">useState</code> vẫn thường được nghe: thêm state vào trong function component.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Giả dụ tình huống là thế này, bạn làm gì đó mà nó ko liên quan đến UI, <strong>không cần re-render</strong>, nhưng vẫn muốn giá trị này cố định giữa các lần render? <code class=\"language-text\">useState</code> có thể cố định giá trị, nhưng ngặt nỗi nó sẽ trigger re-render nếu bị thay đổi</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">usePersistentValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    current<span class=\"token operator\">:</span> initialValue<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Vì chúng ta không muốn trigger re-render, nên chỉ trả về giá trị của state (phần tử đầu tiên trong mảng), không trả về hàm để cập nhập nó.</p>\n<p>Vẫn còn chưa rõ ràng lắm nhỉ, thí dụ trong trong ứng dụng chúng ta muốn có một giá trị counter tăng lên 1 từng giây, một button đế stop việc đó.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Counter</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">clear</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    id <span class=\"token operator\">=</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> clear<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>clear<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Stop</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Code này chạy không? <em>Không</em>, lý do? bạn có để ý biến <code class=\"language-text\">id</code> giữa các lần chạy (render) là khác nhau, nói cách khác bạn không clear được cái interval đã setup.</p>\n<p>Bạn sẽ phải viết lại sử dụng cách <code class=\"language-text\">usePersistentValue</code> ở trên</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">usePersistentValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    current<span class=\"token operator\">:</span> initialValue<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Counter</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">usePersistentValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">clearInterval</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span> <span class=\"token operator\">=</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> clearInterval<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>clearInterval<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Stop</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nói có cảm giác hơi <em>sai trái</em> khi hack như vậy, nhưng nó chạy được.</p>\n<p>Tuy nhiên không khuyến khích bạn tự viết như vậy, vì việc cố định giá trị giữa các lần render là nhu cầu khá <em>bình thường</em> nên bạn sẽ được team React làm sẵn cho một API mà xài: <strong>useRef</strong></p>\n<p>Vẫn là đoạn ứng dụng trên nhưng giờ chúng ta viết lại nó bằng <code class=\"language-text\">useRef</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Counter</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">clearInterval</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span> <span class=\"token operator\">=</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> clearInterval<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>clearInterval<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Stop</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Công dụng của <code class=\"language-text\">useRef</code> như đã đề cập, cố định dữ liệu giữa các lần re-render, truy xuất giá trị đó qua thuộc tính <code class=\"language-text\">current</code></p>\n<p>Một ứng dụng rất phổ biến của <code class=\"language-text\">useRef</code> là truy xuất đến DOM node. Thí dụ để set focus của input</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Form</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> nameRef <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> emailRef <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> passwordRef <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> nameRef<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> email <span class=\"token operator\">=</span> emailRef<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> passwordRef<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Name:\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>nameRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Email:\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>emailRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Password:\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>passwordRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> nameRef<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Focus Name Input</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> emailRef<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Focus Email Input\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> passwordRef<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Focus Password Input\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Submit</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://ui.dev/useref/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Understanding React's useRef Hook</a></p>\n<p>Happy coding 🎉🙌</p>\n","cover_image":""}},{"node":{"id":"aafc1da63cc5a7bac0fcc50c38145cb5","title":"5 sai làm thường thấy khi viết react component","path":"/5-sai-lam-thuong-thay-khi-viet-react-component/","date":"2020-08-03","timeToRead":5,"desc":"Tổng hợp những lỗi thường thấy khi bạn viết react component, và làm sao để khắc phục","content":"<p>Đây cũng chẳng phải là những lỗi <em>bắt buộc</em> phải sửa, thoạt nhìn bạn cũng sẽ ko biết được nó có bị sai gì không, cũng không ảnh hưởng đến performance hay gì. Tuy nhiên mỗi người sẽ có ý kiến khác nhau trên một vấn đề, có người sẽ bắt fix, người thì cho là ko cần thiết, rất mong các bạn bổ sung cho quan điểm của mình.</p>\n<h2 id=\"sử-dụng-usestate-khi-không-thực-sự-cần-thiết\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-usestate-khi-kh%C3%B4ng-th%E1%BB%B1c-s%E1%BB%B1-c%E1%BA%A7n-thi%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng <code class=\"language-text\">useState</code> khi không thực sự cần thiết</h2>\n<p>Đôi khi chúng ta sử dụng <code class=\"language-text\">useState</code> trong nhiều trường hợp không cần thiết, đưa những giá trị vào <code class=\"language-text\">state</code> không thực sự ảnh hưởng đến việc cập nhập component.</p>\n<p>Ví dụ, trong ta có 2 cái nút: Counter và Submit, nút counter tăng giá trị count, nút submit sẽ gửi giá trị count lên API. <strong>Lưu ý là không có hiển thị giá trị count trên giao diện</strong></p>\n<p>❌</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ClickButton</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClickCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClickRequest</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">apiCall</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClickCount<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Counter</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClickRequest<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Submit</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nhìn chung code này cũng sẽ ko có lỗi gì đâu, chỉ là nếu để ý bạn sẽ thấy khi state thay đổi, component <em>re-render</em>, nhưng rõ ràng việc <em>re-render</em> cũng chẳng thay đổi gì, vì chúng ta không hiển thị giá trị <code class=\"language-text\">count</code> ra giao diện</p>\n<p>✅ Cách làm đề nghị như sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ClickButton</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClickCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClickRequest</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">apiCall</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClickCount<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Counter</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClickRequest<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Submit</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Ở đây chúng ta dùng <code class=\"language-text\">useRef</code>, giá trị của <code class=\"language-text\">useRef</code> dù có thay đổi cũng không ảnh hưởng đến việc <em>re-render</em>.</p>\n<h2 id=\"sử-dụng-routerpush-thay-vì-link\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-routerpush-thay-v%C3%AC-link\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng <code class=\"language-text\">router.push</code> thay vì link</h2>\n<p>Ví dụ nếu chúng ta muốn <em>navigate</em> đến một trang nào đó khi user click vào</p>\n<p>❌</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ClickButton</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> history <span class=\"token operator\">=</span> <span class=\"token function\">useHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    history<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/next-page'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Go to next page</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Vấn đề là nếu làm như vậy, làm sau user có thể mở ra một tab mới?, các trình screen reader cũng sẽ ko hiểu được nó là một link (accessibility không tốt).</p>\n<p>✅ Cách làm đề nghị như sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ClickButton</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/next-page<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Go to next page</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"handle-action-bằng-useeffect\"><a href=\"#handle-action-b%E1%BA%B1ng-useeffect\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Handle action bằng useEffect</h2>\n<p><code class=\"language-text\">useEffect</code> là một trong những hook tốt nhất, và tốn nhiều giấy mực nhất của react. Mặc dù cũng hữu ích đấy nhưng cũng không ít lúc phải mệt mỏi với nó.</p>\n<p>Thí dụ có một cái component <code class=\"language-text\">fetch</code> một danh sách dữ liệu, rồi render ra</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">DataList</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onSuccess <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>loading <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>error <span class=\"token operator\">&amp;&amp;</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> onSuccess<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Data: </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Ở đây chúng ta setup 2 hook <code class=\"language-text\">useEffect</code>, cái đầu để load dữ liệu lần đầu tiên, cái thứ 2 để gọi <code class=\"language-text\">onSuccess</code> khi có thay đổi về dữ liệu.</p>\n<p>Vấn đề là nó làm mất quan hệ 1-1 giữa action và function cần gọi. Nói một cách dễ hiểu hơn là việc <code class=\"language-text\">onSuccess</code> không <strong>đảm bảo chỉ</strong> được gọi khi get dữ liệu thành công, đâu đó trong code bạn vẫn có thể có những cách khác để gọi <code class=\"language-text\">onSuccess</code>.</p>\n<p>✅ Cách làm đề nghị như sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">DataList</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onSuccess <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fetchedData</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>fetchedData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"mỗi-component-một-nhiệm-vụ\"><a href=\"#m%E1%BB%97i-component-m%E1%BB%99t-nhi%E1%BB%87m-v%E1%BB%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mỗi component một nhiệm vụ</h2>\n<p>Compose nhiều component nói chúng là khó, khó ở chỗ khi nào tách thì hợp lý. Lấy ví dụ như cái header sẽ xuất hiện một nút burger trên mobile và tab trên desktop</p>\n<p>❌</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Header</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> menuItems <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HeaderInner</span></span> <span class=\"token attr-name\">menuItems</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>menuItems<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">HeaderInner</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> menuItems <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">isMobile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BurgerButton</span></span> <span class=\"token attr-name\">menuItems</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>menuItems<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tabs</span></span> <span class=\"token attr-name\">tabData</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>menuItems<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Vấn để ở đây là với logic <code class=\"language-text\">isMobile</code> như vậy, chúng ta có thực sự cần thiết tách <code class=\"language-text\">HeaderInner</code> ra không?</p>\n<p>✅ Cách làm đề nghị như sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Header</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token function\">isMobile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BurgerButton</span></span> <span class=\"token attr-name\">menuItems</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>menuItems<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tabs</span></span> <span class=\"token attr-name\">tabData</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>menuItems<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"chỉ-một-công-việc-thực-hiện-trong-useeffect\"><a href=\"#ch%E1%BB%89-m%E1%BB%99t-c%C3%B4ng-vi%E1%BB%87c-th%E1%BB%B1c-hi%E1%BB%87n-trong-useeffect\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chỉ một công việc thực hiện trong <code class=\"language-text\">useEffect</code></h2>\n<p>Nếu không cẩn thận việc sử dụng <code class=\"language-text\">useEffect</code> lắm lúc cũng giống như cơn ác mộng với <code class=\"language-text\">componentWillReceivedProps</code> và <code class=\"language-text\">componentDidUpdate</code> một thời. Tưởng tượng chúng ta có một component fetch dữ liệu từ backend, hiển thị breadcrumb tùy theo vị trí hiện tại</p>\n<p>❌</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Example</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token dom variable\">location</span> <span class=\"token operator\">=</span> <span class=\"token function\">useLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/*  Calling the api */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateBreadcrumbs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Updating the breadcrumbs*/</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">updateBreadcrumbs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token dom variable\">location</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pathname</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BreadCrumbs</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta đang chạy 2 effect khác nhau: 1 là fetch dữ liệu, 2 là update breadcrumb trên giá trị location (nếu có thay đổi). Rõ ràng là đôi khi location có change thật nhưng chúng ta đâu cần <code class=\"language-text\">fetchData</code> chạy</p>\n<p>Nên tách ra mỗi effect chỉ làm 1 việc thôi.</p>\n<p>✅ Cách làm đề nghị như sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Example</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token dom variable\">location</span> <span class=\"token operator\">=</span> <span class=\"token function\">useLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateBreadcrumbs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Updating the breadcrumbs*/</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">updateBreadcrumbs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token dom variable\">location</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pathname</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/*  Calling the api */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BreadCrumbs</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Không biết còn trường hợp nào chúng ta vẫn hay mắc phải không, các bạn có thể chia sẻ thêm.</p>\n<p><a href=\"https://www.lorenzweiss.de/common_mistakes_react_hooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Five common mistakes writing react components (with hooks) in 2020</a></p>\n","cover_image":""}},{"node":{"id":"074c34554b8d4f2e49f0c6d408afcb09","title":"Mental model trong React","path":"/mental-model-trong-react/","date":"2020-05-17","timeToRead":5,"desc":"Nếu lập trình đủ lâu, bạn sẽ ít nhiều nghe đến khái niệm mental model, và nếu bạn đã và đang viết React, bạn càng thấy thuật ngữ này xuất hiện rất nhiều. Đây là một khái niệm không chỉ trong hữu dụng trong React, mà nó còn là chìa khóa để bạn tự tin khi làm việc với những thư viện như React.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#mental-model-l%C3%A0-g%C3%AC\">Mental model là gì</a></li>\n<li>\n<p><a href=\"#h%C3%ACnh-dung-c%C3%A1ch-react-v%E1%BA%ADn-h%C3%A0nh-nh%C6%B0-th%E1%BA%BF-n%C3%A0o\">Hình dung cách React vận hành như thế nào</a></p>\n<ul>\n<li><a href=\"#t%E1%BA%A5t-c%E1%BA%A3-%C4%91%E1%BB%81u-l%C3%A0-function\">Tất cả đều là function</a></li>\n<li><a href=\"#component-m%E1%BB%99t-function-tr%E1%BA%A3-v%E1%BB%81-jsx\">Component: một function trả về JSX</a></li>\n<li><a href=\"#prop-tham-s%E1%BB%91-c%E1%BB%A7a-function\">Prop: tham số của function</a></li>\n<li><a href=\"#h%C3%ACnh-dung-v%E1%BB%81-m%E1%BB%99t-function\">Hình dung về một function</a></li>\n</ul>\n</li>\n<li><a href=\"#h%C3%ACnh-dung-c%C3%A1ch-react-render\">Hình dung cách React render</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"mental-model-là-gì\"><a href=\"#mental-model-l%C3%A0-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mental model là gì</h2>\n<p>Một chữ rất khó tìm được một từ tiếng việt gói gọn để mô tả nó. Một cách dài dòng thì nó <strong>là cách mà chúng ta hình dung một vấn đề trong đầu</strong>, một bước <strong>mapping</strong> một hệ thống ở bên ngoài vào trong đầu trong ta, hình dung nó cách vận hành.</p>\n<p><img src=\"https://obedparla.com/static/d3c5f4f4adcb11d610da2a9dd9b38ce5/601b1/mental-models-representation.webp\" alt=\"Mental model trong React\"></p>\n<p>Một ví dụ điển hình của mental model là <em>internet</em>: một hệ thống phức tạp gồm nhiều phần kết nối lại với nhau, nhưng hãy nghĩ đến cái mà bạn hình dung về nó. Tôi sẽ nghĩ nó là một hệ thống các máy tính kết nối lẫn nhau thông qua rất nhiều server, một vài <em>điều hướng viên</em> giúp định hướng đường đi của thông tin.</p>\n<p>Nó không phải là một hệ thống mô tả đầy đủ chi tiết về internet, nhưng ít nhất với cái hình dung này, tôi có thể xử lý nhiều thứ liên quan, thí dụ như nếu tôi cần mạng thì tôi cần có máy tính thiết bị đầu cuối và nối vào một đường truyền của nhà mạng.</p>\n<p><strong>Tại sao quan trọng?</strong></p>\n<p>Nếu chúng ta hình dung được mọi thứ sẽ vận hành ra làm sao, nếu gặp một vấn đề, chúng ta có thể làm việc với nó trơn tru hơn.</p>\n<h2 id=\"hình-dung-cách-react-vận-hành-như-thế-nào\"><a href=\"#h%C3%ACnh-dung-c%C3%A1ch-react-v%E1%BA%ADn-h%C3%A0nh-nh%C6%B0-th%E1%BA%BF-n%C3%A0o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hình dung cách React vận hành như thế nào</h2>\n<p>React giúp chúng ta xây dựng nhưng hệ thống UI phức tạp, với tùm lum thứ tương tác qua lại với nhau dễ dàng hơn trước đây rất nhiều. Nó cũng định hướng chúng ta viết code theo một cách rất cụ thể, giống như nó thể thơ \"lục bát\", khi bạn viết thì phải tuân thủ những nguyên tắc nhất định.</p>\n<p>Ý tưởng chính của React: <strong>đóng gói</strong> những logic và UI giống nhau của ứng dụng thành <strong>một khối</strong>, React đảm bảo phần đóng gói này luôn cập nhập.</p>\n<h3 id=\"tất-cả-đều-là-function\"><a href=\"#t%E1%BA%A5t-c%E1%BA%A3-%C4%91%E1%BB%81u-l%C3%A0-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tất cả đều là function</h3>\n<ol>\n<li>React component: là một function</li>\n<li>Một component chứa một component khác: một function gọi đến một function khác</li>\n<li>Prop: tham số của một function</li>\n</ol>\n<p>Khi viết bằng JSX, bạn có thể tưởng nhầm component, prop là gì đó cao siêu. Nếu bỏ hết những gì của JSX đi, React là những function gọi qua gọi lại.</p>\n<h3 id=\"component-một-function-trả-về-jsx\"><a href=\"#component-m%E1%BB%99t-function-tr%E1%BA%A3-v%E1%BB%81-jsx\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Component: một function trả về JSX</h3>\n<p>React sử dụng JSX - Javascript XML - một cách viết <em>nhét</em> HTML vào trong javascript.</p>\n<p>Hãy bỏ qua class component và chỉ tập trung vào functional component đang trở nên phổ biến hơn. Một function component sẽ hoạt động y như một javascript function thông thường. React component luôn trả về JSX -> sau đó sẽ được thực thi và trả về kết quả cuối cùng là HTML</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Li</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">RickRoll</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Li</span></span> <span class=\"token attr-name\">color</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Never give you up</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Li</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Sẽ được đưa về Javascript như sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Li</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">RickRoll</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        className<span class=\"token operator\">:</span> <span class=\"token string\">\"wrapper\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"ul\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span>\n          <span class=\"token maybe-class-name\">Li</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            color<span class=\"token operator\">:</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"Never give you up\"</span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Trong React, cũng như trong HTML và đời sống, con thì chỉ có một mẹ, không đứa con nào của thể do 2 người mẹ sinh ra, mỗi component cũng chỉ có một <em>mẹ</em>, component <em>mẹ</em> thì có thể có nhiều con.</p>\n<h3 id=\"prop-tham-số-của-function\"><a href=\"#prop-tham-s%E1%BB%91-c%E1%BB%A7a-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Prop: tham số của function</h3>\n<p>Prop (properties) chẳng qua là <em>một cách gọi khác</em> cho tham số truyền vào trong function, còn về mọi thứ còn lại nó hoàn toàn giống nhau, React có <em>nhét</em> thêm một số tham số của riêng nó như <code class=\"language-text\">children</code>.</p>\n<h3 id=\"hình-dung-về-một-function\"><a href=\"#h%C3%ACnh-dung-v%E1%BB%81-m%E1%BB%99t-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hình dung về một function</h3>\n<p>Bạn có thể hình dung function/component như những chiếc hộp, thằng này bọc thằng kia</p>\n<p><img src=\"https://obedparla.com/static/cf7892f6a3db2815d6c502fe74538e4a/1f85e/box-inside-box.webp\" alt=\"Mental model trong React\"></p>\n<p><strong>Những chiếc hộp này tương tác với nhau như thế nào?</strong></p>\n<p>Bạn có thể hình dung trong đời sống thực ông bà có câu nói <strong>tài sản của cha/mẹ là của con, tài sản của con là của con</strong>, Javascript người ta đặt tên cho kiểu kế thừa đó gọi là <strong>closure</strong>.</p>\n<p>Đây là cách mà các function cha-con tương tác với nhau, bạn sử dụng function, bạn đã sử dụng closure.</p>\n<p><img src=\"https://obedparla.com/static/96f403cd585425c1057214447165bbbe/ffce4/data-flow.webp\" alt=\"Mental model trong React\"></p>\n<p>Nghĩa là trong React, là cha mẹ chúng ta có thể truyền prop xuống cho con, nhưng <em>tài sản</em> của con thì chúng ta không đụng vào được</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Parent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      The count is </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildButtons</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>setCount<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">count</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">ChildButtons</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> props<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onClick</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Increase count\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> props<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onClick</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Decrease count\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"hình-dung-cách-react-render\"><a href=\"#h%C3%ACnh-dung-c%C3%A1ch-react-render\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hình dung cách React render</h2>\n<p>Render có thể xem là phần gây <em>khó dễ</em> nhất của React để mà hình dung. Có những thứ nhìn vào code chúng ta sẽ không thấy được cơ chế khi render chuyện gì xảy ra và không xảy ra.</p>\n<p>Tưởng tượng nó như một cái hộp có thể <em>tái chế</em>, lần render đầu tiền là lúc sản xuất ra chiếc hộp này, các lần re-render tiếp theo, hay <em>tái chế</em>, phần lớn mọi thứ sẽ được đập đi làm lại, nhưng những phần như <code class=\"language-text\">state</code> sẽ được <em>tái sử dụng</em></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Thumbnail</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">withIcon</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AmazingIcon</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">imgUrl</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">alt</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">alt</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><img src=\"https://obedparla.com/static/78de62863da9bd4c40c588c294167031/ffce4/react-rendering-mental-model.webp\" alt=\"Mental model trong React\"></p>\n<p>Việc của React phải làm với <code class=\"language-text\">state</code> là đảm bảo nó consistent giữa các lần render.</p>\n<p>Khi một chiếc hộp được tái chế, toàn bộ các hộp con bên trong cũng được tái chế - re-render bởi các <code class=\"language-text\">state</code> và <code class=\"language-text\">prop</code> lúc này đã thay đổi.</p>\n<p><img src=\"https://obedparla.com/static/267768646d810a0032728d222c3f13a5/ffce4/react-rendering-mental-model-full.webp\" alt=\"Mental model trong React\"></p>\n<p>Hy vọng qua bài viết kiểu này các bạn đã có thể làm việc với React Component một cách <em>nhẹ nhàng</em> không cay cú.</p>\n<p><a href=\"https://obedparla.com/code/a-visual-guide-to-react-mental-models/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://obedparla.com/code/a-visual-guide-to-react-mental-models/</a></p>\n","cover_image":""}},{"node":{"id":"86b4bdaecfd311e0ba6c74a0259cacf8","title":"Hướng dẫn viết unit test trong React","path":"/huong-dan-viet-unit-test-trong-react/","date":"2020-05-05","timeToRead":12,"desc":"Một bài viết tổng hợp, sẽ cố gắng đề cập càng nhiều càng tốt các vấn đề có thể gặp khi đụng đến unit test với React.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#t%E1%BA%A1i-sao-ph%E1%BA%A3i-test\">Tại sao phải test?</a></li>\n<li><a href=\"#test-c%C3%A1i-g%C3%AC\">Test cái gì?</a></li>\n<li><a href=\"#kh%C3%B4ng-test-c%C3%A1i-g%C3%AC\">Không test cái gì</a></li>\n<li><a href=\"#m%E1%BB%99t-v%C3%A0i-tri%E1%BA%BFt-l%C3%BD-c%C3%A1-nh%C3%A2n-khi-test\">Một vài triết lý cá nhân khi test</a></li>\n<li><a href=\"#shallow-vs-mount\">Shallow vs mount</a></li>\n<li>\n<p><a href=\"#enzyme\">Enzyme</a></p>\n<ul>\n<li><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t\">Cài đặt</a></li>\n</ul>\n</li>\n<li><a href=\"#th%E1%BB%B1c-hi%E1%BB%87n-test-chi-ti%E1%BA%BFt-v%E1%BB%9Bi-enzyme\">Thực hiện test chi tiết với Enzyme</a></li>\n<li>\n<p><a href=\"#react-testing-library\">React-testing-library</a></p>\n<ul>\n<li><a href=\"#usestate\">useState</a></li>\n<li><a href=\"#usereducer\">useReducer</a></li>\n<li><a href=\"#usecontext\">useContext</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<p><a href=\"https://github.com/iqbal125/react-hooks-testing-complete\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Toàn bộ project để bạn tham khảo</a></p>\n<h2 id=\"tại-sao-phải-test\"><a href=\"#t%E1%BA%A1i-sao-ph%E1%BA%A3i-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao phải test?</h2>\n<p>Rất hiển nhiên là chúng ta viết test nhằm mục đích hạn chế được càng nhiều lõi càng tốt, đảm bảo những gì chúng ta viết ra chạy đúng như chúng ta mong muốn. Một vài <em>điểm trừ</em> khi chúng ta <em>phải</em> viết test</p>\n<ol>\n<li>Là nó tốn thời gian và tương đối khó khăn (dù là lập trình viên kinh nghiệm cũng gặp không ít vất vả khi mới bắt đầu viết test)</li>\n<li>Test pass không có nghĩa ứng dụng, function của chúng ta chạy đúng 100%</li>\n<li>Cũng đôi khi, test fail, nhưng ứng dụng, function vẫn chạy hoàn toàn bình thường</li>\n<li>Trong vài trường hợp đặc biệt, chạy test trong CI có thể tốn tiền</li>\n</ol>\n<h2 id=\"test-cái-gì\"><a href=\"#test-c%C3%A1i-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Test cái gì?</h2>\n<p>Test các chức năng, function của ứng dụng, những cái mà user sẽ sử dụng. Nó giúp chúng ta tự tin vỗ ngực, ứng dụng đáp ứng đúng nhu cầu sử dụng</p>\n<h2 id=\"không-test-cái-gì\"><a href=\"#kh%C3%B4ng-test-c%C3%A1i-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Không test cái gì</h2>\n<p>Thích quan điểm của Kent C về việc không nên đi quá chi tiết việc hiện thực. Việc mà code nó hiện thực như thế nào chúng ta không quan tâm, user không quan tâm, chúng ta chỉ quan tâm đầu vào-đầu ra của một function.</p>\n<p>Các thư viện của người khác viết cũng là thứ không cần thiết phải test, nó là trách nhiệm của người viết thư viện. Nếu không tin thì đừng dùng nó. Còn nếu thật sự có tâm bạn hãy hỗ trợ cho thư viện đó trên github bằng cách bổ sung test cho nó.</p>\n<h2 id=\"một-vài-triết-lý-cá-nhân-khi-test\"><a href=\"#m%E1%BB%99t-v%C3%A0i-tri%E1%BA%BFt-l%C3%BD-c%C3%A1-nh%C3%A2n-khi-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một vài triết lý cá nhân khi test</h2>\n<blockquote>\n<p>Nhiều integration test, không dùng snapshot test, vài unit test, vài e-to-e test.</p>\n</blockquote>\n<p>Hãy viết thật nhiều integration test, unit test thì tốt nhưng nó không thật sự là cách mà người dùng sử dụng ứng dụng. Việc test chi tiết code hiện thực ra sao với unit test rất dễ.</p>\n<p>Integration test nên dùng mock (dữ liệu giả lập) ít nhất có thể</p>\n<p>Không nên test những cái tiểu tiết như <em>tên hàm, tên biến, cách khai báo biến số, hằng số</em> có hợp lý.</p>\n<p>Lấy ví dụ, nếu chúng ta test một button và thay đổi tên function xử lý <code class=\"language-text\">onClick</code> từ <code class=\"language-text\">increment</code> sang <code class=\"language-text\">handleClick</code>, test sẽ fail nhưng mọi thứ vẫn hoạt động bình thường.</p>\n<h2 id=\"shallow-vs-mount\"><a href=\"#shallow-vs-mount\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Shallow vs mount</h2>\n<p>Mount là phần html, css, js thật sự khi chạy, như cách mà browser sẽ <em>thấy</em>, nhưng theo cách <strong>giả lập</strong>. Nó không có render, paint bất cứ thứ gì lên UI, nhưng làm <em>như thể</em> nó là browser thật sự và chạy code ngầm bên dưới.</p>\n<p>Không bỏ thời gian ra để paint ra UI giúp test chạy nhanh hơn. Tuy nhiên nó vẫn chưa nhanh bằng shallow render</p>\n<p>Đó là lý do bạn phải <code class=\"language-text\">unmount</code> và <code class=\"language-text\">cleanup</code> sau mỗi test, nếu không test này sẽ gây side-effect lên test kia.</p>\n<p>Mount/render thường được sử dụng cho integration test và shallow sử dụng cho unit test.</p>\n<p>Kiểu shallow render sẽ chỉ render ra một component đang test mà không bao gồm các component con, như vậy để tách biệt việc test trên từng component độc lập.</p>\n<p>Lấy ví dụ như component cha, con như sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildComponent</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">ChildComponent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Child component</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu chúng ta dùng shallow render component <code class=\"language-text\">App</code>, chúng ta sẽ nhận được DOM như sau, phần <code class=\"language-text\">ChildComponent</code> sẽ không bao gồm bộ \"ruột\" bên trong</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>App</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ChildComponent</span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>App</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Với mount, thì chúng ta có</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>App</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ChildComponent</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Child components<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ChildComponent</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>App</span><span class=\"token punctuation\">></span></span></code></pre>\n<p><strong>react-testing-library</strong> là một thư viện khá ổn cho việc viết unit test react, tuy nhiên <strong>Enzyme</strong> là nền tảng cần nắm chắc, chúng ta sẽ đề cập nó trước</p>\n<h2 id=\"enzyme\"><a href=\"#enzyme\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enzyme</h2>\n<h3 id=\"cài-đặt\"><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cài đặt</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> enzyme enzyme-to-json enzyme-adapter-react-16</code></pre>\n<p>Sơ qua những gì chúng ta sẽ import</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ReactDOM</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Basic</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../basic_test\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Enzyme</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> shallow<span class=\"token punctuation\">,</span> render<span class=\"token punctuation\">,</span> mount <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"enzyme\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">toJson</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"enzyme-to-json\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Adapter</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"enzyme-adapter-react-16\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token maybe-class-name\">Enzyme</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> adapter<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>3 cái import đầu tiên là cho React và component đang test, sau đó đến phần của Enzyme, <code class=\"language-text\">toJson</code> là để chuyển shallow component của chúng ta ra thành JSON để lưu thành snapshot</p>\n<p>Cuối cùng là Adapter để làm việc được với react 16</p>\n<h2 id=\"thực-hiện-test-chi-tiết-với-enzyme\"><a href=\"#th%E1%BB%B1c-hi%E1%BB%87n-test-chi-ti%E1%BA%BFt-v%E1%BB%9Bi-enzyme\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thực hiện test chi tiết với Enzyme</h2>\n<p>Chúng ta sẽ lấy một ví dụ tại sao ko nên test việc hiện thực chi tiết, với một component <code class=\"language-text\">&lt;Counter /&gt;</code> như thế này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// đoạn code này mặc dù ko đúng, nhưng khi test vẫn cho kết quả pass</span>\n  <span class=\"token comment\">// &lt;button onClick={this.incremen}></span>\n  <span class=\"token comment\">//   Clicked: {this.state.count}</span>\n  <span class=\"token comment\">// &lt;/button></span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>counter-button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">incremen</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Clicked: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">Counter</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Trong component trên, chúng ta cố tình gõ sai chữ <code class=\"language-text\">incremen</code>, ứng dụng sẽ không chạy, nhưng khi chạy test thì vẫn pass</p>\n<p>File test</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ReactDOM</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Counter</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../counter'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Enzyme</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> shallow<span class=\"token punctuation\">,</span> render<span class=\"token punctuation\">,</span> mount <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'enzyme'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">toJson</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'enzyme-to-json'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Adapter</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'enzyme-adapter-react-16'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token maybe-class-name\">Enzyme</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> adapter<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment method increments count'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Counter</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    wrapper<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Thứ nhất là cách viết test như vậy có vấn đề, chúng <strong>ko mô phỏng</strong> cách mà user sẽ sử dụng, chúng ta gọi thẳng <code class=\"language-text\">increment()</code>.</p>\n<p>Nếu bạn simulate việc click nút button <code class=\"language-text\">wrapper.find(&#39;button.counter-button&#39;).simulate(&#39;click&#39;)</code> thay vì gọi <code class=\"language-text\">increment()</code>, test sẻ pass, nhưng <em>lỡ đâu</em>, một lần cập nhập nào đó bạn thay đổi <code class=\"language-text\">className</code> cho button, mà ko cập nhập lại test thì cũng <em>toang</em>.</p>\n<p><strong>Vậy người nông dân biết phải làm sao?</strong></p>\n<h2 id=\"react-testing-library\"><a href=\"#react-testing-library\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>React-testing-library</h2>\n<p>Từ thư viện <code class=\"language-text\">react-testing-library</code>, nó đưa ra một nguyên lý chung như sau</p>\n<blockquote>\n<p>Test càng gần với thực tế sử dụng của ứng dụng, test càng đem đến sự tự tin cho chúng ta</p>\n</blockquote>\n<p>Hãy tâm niệm nguyên lý này trong đầu, chúng ta sẽ còn bàn tiếp về nó</p>\n<h3 id=\"usestate\"><a href=\"#usestate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useState</h3>\n<p>Hay bắt đầu test React hook, chúng ta đã và đang sử dụng nó nhiều hơn là class component</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">TestHook</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Initial State\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Initial State Changed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeNameToSteve</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">changeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>changeState<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">State Change Button</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>changeNameToSteve<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Change Name</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">TestHook</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Prop sẽ được nhận từ component cha là <code class=\"language-text\">App</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some Text\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Moe\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token spread operator\">...</span>\n      <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Steve\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n         </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Basic</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> Counter </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n         </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> Basic Hook useState </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n         </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TestHook</span></span> <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">changeName</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>changeName<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    ...</span></code></pre>\n<p>Với nguyên lý như đã nói, chúng ta sẽ thực hiện test như thế nào</p>\n<p>Cách mà user sử dụng ứng dụng sẽ là: họ thấy một đoạn text trên UI Button, click vào, rồi thấy một kết quả sau khi click đó, một text mới xuất hiện chẳng hạn</p>\n<p>Chúng ta cài đặt thư viện <code class=\"language-text\">@testing-library/react</code> (không phải <code class=\"language-text\">react-testing-library</code> nhé)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @testing-library/react</code></pre>\n<p>Thực hiện việc test</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ReactDOM</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-dom'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">TestHook</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../test_hook.js'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> fireEvent<span class=\"token punctuation\">,</span> cleanup <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'@testing-library/react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'..al/App'</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span>cleanup<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text in state is changed when button clicked'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">TestHook</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">Initial</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Init State\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    fireEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">click</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"State change Button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">Initial</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Initial State Changed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button click changes props'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">App</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">TestHook</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">App</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">Moe</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Moe\"</span><span class=\"token punctuation\">)</span>\n\n    fireEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">click</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Change Name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">Steve</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Steve\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Vì không sử dụng shallow render, nên chúng ta phải gọi <code class=\"language-text\">afterEach(cleanup)</code> để dọn dẹp sau mỗi lực thực hiện test</p>\n<p><code class=\"language-text\">getByText</code> là phương thức nằm trong hàm <code class=\"language-text\">render</code>, còn vài kiểu query khác nữa, nhưng đây là kiểu mà chúng ta dùng nó nhiều nhất, có thể nói là đủ dùng.</p>\n<p>Để test giá trị của state, chúng ta không sử dụng bất cứ tên hàm, tên biến state nào cả. Vẫn là nguyên lý \"Không đi sâu vào việc thực hiện chi tiết\". Vì user sẽ thấy một đoạn text trên UI, chúng ta query nó trên DOM, chúng ta cũng query button bằng cách này và bắn ra sự kiện (<code class=\"language-text\">fireEvent.click</code>). Cuối cùng chúng ta kiểm tra kết quả cuối cùng nhận được, đoạn text bị thay đổi, chứ ko kiểm tra giá trị state (mặc dù nó là tương đương)</p>\n<h3 id=\"usereducer\"><a href=\"#usereducer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useReducer</h3>\n<p>Reducer chúng ta sẽ test</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token constant\">ACTIONS</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./actions\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  stateprop1<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Reducer1</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"SUCCESS\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token spread operator\">...</span>state<span class=\"token punctuation\">,</span>\n        stateprop1<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"FAILURE\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token spread operator\">...</span>state<span class=\"token punctuation\">,</span>\n        stateprop1<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Action</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SUCCESS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"SUCCESS\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">FAILURE</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"FAILURE\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Cuối cùng là component sử dụng action và reducer đã định nghĩa</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useReducer <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token constant\">ACTIONS</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../store/actions\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">Reducer</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../store/reducer\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">TestHookReducer</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>reducerState<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>\n    <span class=\"token maybe-class-name\">Reducer</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Reducer1</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token maybe-class-name\">Reducer</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">initialState</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dispatchActionSuccess</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ACTIONS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUCCESS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dispatchActionFailure</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ACTIONS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FAILURE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>reducerState<span class=\"token punctuation\">.</span><span class=\"token property-access\">stateprop1</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">stateprop1 is true</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">stateprop1 is false</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>dispatchActionSuccess<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Dispatch Success</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">TestHookReducer</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Component này sẽ đổi giá trị của <code class=\"language-text\">stateprop</code> từ <code class=\"language-text\">false</code> sang <code class=\"language-text\">true</code> bằng việc dispatch một <code class=\"language-text\">SUCCESS</code> action</p>\n<p>Thực hiện test</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ReactDOM</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">TestHookReducer</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../test_hook_reducer.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> fireEvent<span class=\"token punctuation\">,</span> cleanup <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"@testing-library/react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">Reducer</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../../store/reducer\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token constant\">ACTIONS</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../../store/actions\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span>cleanup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test the reducer and action\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> render <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"ejs\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return the initial state\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Reducer</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">initialState</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> stateprop1<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should change stateprop1 from false to true\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Reducer</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\"><span class=\"token maybe-class-name\">Reducer1</span></span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Reducer</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">initialState</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ACTIONS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUCCESS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      stateprop1<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reducer changes stateprop1 from fals to true\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> container<span class=\"token punctuation\">,</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">TestHookReducer</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">stateprop1 is</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stateprop1 is false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  fireEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">click</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dispatch success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">stateprop1 is</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stateprop1 is true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Trước tiên chúng ta test cái reducer bên trong khối <code class=\"language-text\">describe</code>, thực hiện một test đơn giản với giá trị initial state và sau khi có action success.</p>\n<p>Với ví dụ trên, reducer và action rất chi là đơn giản, bạn có thể nói không cần thực hiện unit test cho nó làm gì, nhưng trong thực tế sử dụng reducer sẽ không hề đơn giản thế, và việc test reducer là thực sự cần thiết, không những vậy, chúng ta còn phải test theo hướng chi tiết hiện thực bên trong.</p>\n<p>Tiếp theo chúng ta có một test cho component, chúng ta vẫn sử dụng cách làm trước đó đã đề cập với <code class=\"language-text\">useState</code>, lấy DOM bằng cách query text và kiểm tra giá trị text sau khi có event click.</p>\n<h3 id=\"usecontext\"><a href=\"#usecontext\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useContext</h3>\n<p>Giờ chúng ta đi đến việc test một component con có thể cập nhập context state trong component cha.</p>\n<p>Thường thì context sẽ được khởi tạo trong một file riêng</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Context</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">Context</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chúng ta sẽ cần một component cha, nắm giữ Context provider. Giá trị truyền vào cho provider sẽ là giá trị <code class=\"language-text\">state</code> và hàm <code class=\"language-text\">setState</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">TestHookContext</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./components/react-testing-lib/test_hook_context\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Context</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./components/store/context\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some Text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeText</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some Other Text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span> <span class=\"token maybe-class-name\">Basic</span> <span class=\"token maybe-class-name\">Hook</span> useContext<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Context</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Provider</span></span>\n        value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> changeTextProp<span class=\"token operator\">:</span> changeText<span class=\"token punctuation\">,</span> stateProp<span class=\"token operator\">:</span> state <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">TestHookContext</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">Context</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Provider</span></span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">App</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Component con, đây là component chúng ta muốn test</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useContext <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Context</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../store/context\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">TestHookContext</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>context<span class=\"token punctuation\">.</span><span class=\"token property-access\">changeTextProp</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token maybe-class-name\">Change</span> <span class=\"token maybe-class-name\">Text</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>context<span class=\"token punctuation\">.</span><span class=\"token property-access\">stateProp</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">TestHookContext</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Lưu ý: các giá trị của <code class=\"language-text\">state</code>, khởi tạo, cập nhập điều nằm trong <code class=\"language-text\">App.js</code>, chúng ta chỉ truyền giá trị này xuống các component con thông qua context, mọi thứ điều thực hiện ở <code class=\"language-text\">App</code>, cái này quan trọng cần nhớ để hiểu lúc test</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ReactDOM</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">TestHookContext</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../test_hook_context.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> act<span class=\"token punctuation\">,</span> render<span class=\"token punctuation\">,</span> fireEvent<span class=\"token punctuation\">,</span> cleanup <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"@testing-library/react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../../../App\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Context</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../../store/context\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span>cleanup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"context value is updated by child component\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> container<span class=\"token punctuation\">,</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">App</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Context</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Provider</span></span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">TestHookContext</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">Context</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Provider</span></span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">App</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">Some</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  fireEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">click</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Change text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">Some</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some other text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Với context chúng ta cũng không hề thay đổi cách làm như với <code class=\"language-text\">useState</code>, vẫn là tìm và đặt expect thông qua kết quả nhận được cuối cùng.</p>\n<p>Bên trong render function, chúng ta có include <code class=\"language-text\">&lt;Context.Provider/&gt;</code> và <code class=\"language-text\">&lt;TestHookContext/&gt;</code> để code dễ đọc hơn, chứ thật sự chúng ta không cần chúng. Test sẽ vẫn chạy nếu truyền vào <code class=\"language-text\">&lt;App /&gt;</code> bên trong render function</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> container<span class=\"token punctuation\">,</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Tại sao lại như vậy?</p>\n<p>Hãy nghĩ lại một chút về context, tất cả những state của context được handle bên trong <code class=\"language-text\">App.js</code>, vì lý do đó, đây là component chính chúng ta test, mặc dù trông thì có vẻ chúng ta test một child component sử dụng <code class=\"language-text\">useContext</code> hook. Chúng ta lại không thực hiện shallow render, mà render luôn các component con, nên dĩ nhiên <code class=\"language-text\">&lt;Context.Provider /&gt;</code> và <code class=\"language-text\">&lt;TestHookContext /&gt;</code> đều được render vì nó là con của <code class=\"language-text\">&lt;App /&gt;</code></p>\n<p><a href=\"https://www.freecodecamp.org/news/testing-react-hooks/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to Test React Components: the Complete Guide</a></p>\n","cover_image":""}},{"node":{"id":"605c2b52b6247097140c1f26a6ff0b47","title":"Làm animate siêu đơn giản với hook khi react component mount và unmount","path":"/lam-animate-sieu-don-gian-voi-hook-khi-react-component-mount-va-unmount/","date":"2020-05-01","timeToRead":2,"desc":"","content":"<p>Có rất nhiều lúc chúng ta muốn thêm/xóa một element trên trình duyệt, nó rất chi là trực quan dễ dàng với jQuery, tuy nhiên vì không còn đụng chạm trực tiếp vào DOM, việc đơn giản đó lại hơi <em>kỳ công</em></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// những ngày xa xưa ấy còn đâu</span>\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#my-element\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fadeIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Tại sao lại khó khăn ấy nhỉ? Hãy mường tượng nó qua một ví dụ</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* styles.css */</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> fadeIn</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">0%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">100%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// index.js</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> show <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  show <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> animation<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">fadeIn 1s</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">HELLO</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Đó là tất cả những gì chúng ta cần làm để animate lúc component đang mount với <code class=\"language-text\">fadeIn</code>, tuy nhiên lại không có cách nào để animate <em>unmount</em>, vì chúng ta đã xóa cái DOM ngay khi <code class=\"language-text\">show</code> chuyển thành <code class=\"language-text\">false</code>. Element đã ra đi ngay lập tức.</p>\n<p>Vậy chúng ta cần làm gì</p>\n<ol>\n<li><code class=\"language-text\">show</code> thay đổi, báo react khoan hãy unmount, delay nó lại một chút</li>\n<li>Chạy animate</li>\n<li>Animate vừa chạy xong, unmount</li>\n</ol>\n<p>Đây là cách làm đơn giản nhất chỉ bằng CSS và hook, tất nhiên nếu đụng tới những tính huống phức tạp hơn, khuyến khích bạn sử dụng <a href=\"https://www.react-spring.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-spring</a></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// index.js</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ReactDOM</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token string\">\"./styles.css\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Fade</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./Fade\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>show<span class=\"token punctuation\">,</span> setShow<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setShow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">show</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token operator\">!</span>show<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>show <span class=\"token operator\">?</span> <span class=\"token string\">\"hide\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"show\"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fade</span></span> <span class=\"token attr-name\">show</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>show<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> HELLO </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Fade</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rootElement <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token maybe-class-name\">ReactDOM</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Fade.js</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Fade</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> show<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>shouldRender<span class=\"token punctuation\">,</span> setRender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>show<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>show<span class=\"token punctuation\">)</span> <span class=\"token function\">setRender</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>show<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onAnimationEnd</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>show<span class=\"token punctuation\">)</span> <span class=\"token function\">setRender</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    shouldRender <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n        <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> animation<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>show <span class=\"token operator\">?</span> <span class=\"token string\">\"fadeIn\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"fadeOut\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 1s</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onAnimationEnd</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onAnimationEnd<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">Fade</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* styles.css */</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> fadeIn</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">0%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">100%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> fadeOut</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">0%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">100%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Bạn có thể xem <a href=\"https://codesandbox.io/s/react-easy-animation-b658i\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo ở đây</a></p>\n<p><a href=\"https://czaplinski.io/blog/super-easy-animation-with-react-hooks/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Super easy react mount/unmount animations with hooks</a></p>\n","cover_image":""}},{"node":{"id":"e50caffffbea9c79e5698cd929baa00a","title":"useEffect từ a tới z","path":"/use-effect-tu-a-toi-z/","date":"2020-03-23","timeToRead":11,"desc":"Đây là một bài viết tương đối dài dòng về useEffect, bạn cần biết và đã đọc qua tài liệu về useEffect trên trang chính thức của React trước, và nếu chỉ thực sự cần biết sử dụng useEffect ra sao, bạn không cần đọc bài viết phân tách mổ xẻ sâu kiểu này.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#m%E1%BB%97i-l%E1%BA%A7n-render-l%C3%A0-m%E1%BB%99t-gi%C3%A1-tr%E1%BB%8B-prop-v%C3%A0-state-%C4%91%E1%BB%99c-l%E1%BA%ADp\">Mỗi lần render là một giá trị Prop và State độc lập</a></li>\n<li><a href=\"#m%E1%BB%99t-l%C3%A0-kh%C3%B4ng-n%C3%B3i-l%C3%A1o-2-l%C3%A0-kh%C3%B4ng-n%C3%B3i-l%C3%A1o-nhi%E1%BB%81u-l%E1%BA%A7n\">Một là không nói láo, 2 là không nói láo nhiều lần</a></li>\n<li><a href=\"#h%E1%BA%ADu-qu%E1%BA%A3-c%E1%BB%A7a-vi%E1%BB%87c-d%E1%BB%91i-tr%C3%A1\">Hậu quả của việc dối trá</a></li>\n<li><a href=\"#2-c%C3%A1ch-%C4%91%E1%BB%83-th%C3%BA-th%E1%BA%ADt-v%E1%BB%9Bi-react-v%E1%BB%81-dependency\">2 cách để thú thật với React về dependency</a></li>\n<li><a href=\"#t%C3%ADnh-n%C4%83ng-update-c%E1%BB%A7a-google-docs\">Tính năng update của Google Docs</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"mỗi-lần-render-là-một-giá-trị-prop-và-state-độc-lập\"><a href=\"#m%E1%BB%97i-l%E1%BA%A7n-render-l%C3%A0-m%E1%BB%99t-gi%C3%A1-tr%E1%BB%8B-prop-v%C3%A0-state-%C4%91%E1%BB%99c-l%E1%BA%ADp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mỗi lần render là một giá trị Prop và State độc lập</h2>\n<p>Trước khi bắt đầu nói về <code class=\"language-text\">useEffect</code> chúng ta cần nhắc lại quá trình render</p>\n<pre class=\"language-jsx{6}\"><code class=\"language-jsx{6}\">function Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p> ...\n      <button onClick={() => setCount(count + 1)}></button>\n    </div>\n  );\n}</code></pre>\n<p>Khác với Vue, nó không phải là một dạng <em>data binding</em>, <em>watcher</em>, <em>proxy</em>, nó chỉ là một giá trị thông thường.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span></code></pre>\n<p>Đầu tiên giá trị khởi tạo của <code class=\"language-text\">count</code> sẽ =0. Khi chúng ta gọi <code class=\"language-text\">setCount(1)</code>, React sẽ gọi lại component một lần nữa, với giá trị <code class=\"language-text\">count</code> lúc này là <code class=\"language-text\">1</code>. Cứ vậy</p>\n<pre class=\"language-jsx{3,10,17}\"><code class=\"language-jsx{3,10,17}\">// Lần đầu render\nfunction Counter() {\n  const count = 0; // trả về bởi useState()  // ...\n  <p>You clicked {count} times</p>;\n  // ...\n}\n\n// sau khi click, function này được gọi lại lần nữa\nfunction Counter() {\n  const count = 1; // trả về bởi `useState()  // ...\n  <p>You clicked {count} times</p>;\n  // ...\n}\n\n// sau khi click, function được gọi lại lần nữa\nfunction Counter() {\n  const count = 2; // trả về bởi useState()  // ...\n  <p>You clicked {count} times</p>;\n  // ...\n}</code></pre>\n<p>Khi update một state, React gọi lại component, mỗi lần render như vậy, nó sẽ <strong>thấy</strong> một giá trị <code class=\"language-text\">count</code> mới. Sau đó React sẽ update lại DOM tương ứng.</p>\n<p>Vấn đề mấu chốt cần nắm là giá trị <code class=\"language-text\">count</code> <strong>trong các lần render khác nhau là khác nhau.</strong></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Counter</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleAlertClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked on: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Click me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleAlertClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Show alert</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      ...\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta thực hiện các bước sau</p>\n<ul>\n<li>Bấm counter lên 3</li>\n<li>Bấm \"Show alert\"</li>\n<li>Bấm tiếp <code class=\"language-text\">Click me</code> cho counter lên 5 trước khi bị gọi timeout</li>\n</ul>\n<p><img src=\"https://overreacted.io/46c55d5f1f749462b7a173f1e748e41e/counter.gif\" alt=\"Counter demo\"></p>\n<p>Câu hỏi ở đây là nó sẽ alert ra 5 - giá trị cuối cùng, hay là 3 giá trị lúc chúng ta click</p>\n<p><a href=\"https://codesandbox.io/s/w2wxl3yo0l\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chạy thử</a></p>\n<p><em>Bạn có thấy kết quả quá vô lý?</em></p>\n<p>Như đã nói ở trên, giá trị <code class=\"language-text\">count</code> là hằng số trên mỗi lần render. <strong>Function của chúng ta được gọi nhiều lần, mỗi lần gọi như vậy giá trị <code class=\"language-text\">count</code> bên trong là một số độc lập hoàn toàn với giá trị trước đó</strong></p>\n<p>Không phải <strong>đặc sản</strong> của React, viết dạng function như thế này bạn sẽ dễ hình dung hơn.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> someone <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Dan\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span>someone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsomeone <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Yuzhi\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span>someone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsomeone <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Dominic\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span>someone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Thế còn hàm xử lý event thì sao? cụ thể là hàm <code class=\"language-text\">handleAlertClick</code>? Cũng như trên, hàm này là có các <strong>version</strong> khác nhau ở các lần render khác nhau.</p>\n<p>Bài viết được <strong>quảng cáo</strong> là nói về <code class=\"language-text\">useEffect</code> mà nãy giờ chưa đá động gì!</p>\n<p>Quay lại với ví dụ từ <a href=\"https://reactjs.org/docs/hooks-effect.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">trang chính thức của React</a></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Counter</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Click me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Câu hỏi là <code class=\"language-text\">useEffect</code> đã làm cách nào để lấy được giá trị cuối cùng của <code class=\"language-text\">count</code>?</p>\n<p>Lẽ nào đó có một dạng \"data binding\" hay \"watching\" ở đây để update giá trị <code class=\"language-text\">count</code> bên trong hàm effect? Hoặc giả React <em>chơi chiêu</em> dùng biến mutable bên trong component để luôn có được giá trị cuối?</p>\n<p><em>Không hề!</em></p>\n<p>Chúng ta đã biết: giá trị <code class=\"language-text\">count</code> là hằng số cho các lần render, event handle cũng độc lập trên các lần render khác nhau, effect cũng vậy luôn.</p>\n<p>Không phải giá trị <code class=\"language-text\">count</code> thay đổi bên trong <code class=\"language-text\">useEffect</code> <strong>bất biến</strong>, mà là <code class=\"language-text\">useEffect</code> cũng bị thay đổi trên từng lần render.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// lần render đầu tiên</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Counter</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">0</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// sau khi click</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Counter</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// click thêm lần nữa</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Counter</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">2</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<blockquote>\n<p>Có thể mường tượng effect là một phần của kết quả lúc render</p>\n</blockquote>\n<p>Giờ thử với <code class=\"language-text\">setTimeout</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Counter</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token spread operator\">...</span>\n    <span class=\"token method function property-access\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token spread operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Click me\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu mà click vài lần với một khoảng thời gian <em>bỏ nhỏ</em> thì kết quả log ra là gì?</p>\n<p><a href=\"https://codesandbox.io/s/lyx20m1ol\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Thử ở đây</a></p>\n<p>Bạn không chỉ nhận được 1 mà là một chuỗi các đoạn log ứng với số lần click.</p>\n<p><img src=\"https://overreacted.io/a5727d333c270e05942f508707265378/timeout_counter.gif\" alt=\"Screen recording of 1, 2, 3, 4, 5 logged in order\"></p>\n<p><em>Đương nhiên phải chạy như vậy mới đúng chứ, đâu có gì phải thắc mắc?</em></p>\n<p>Bạn đã thử với <code class=\"language-text\">this.state</code> trong class component chưa?</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"https://overreacted.io/264b329edc111a1973003bdf2bcacd65/timeout_counter_class.gif\" alt=\"Screen recording of 5, 5, 5, 5, 5 logged in order\"></p>\n<p><em>Lý do?</em> Giá trị <code class=\"language-text\">this.state</code> bên trong class component là một mutation (có thể thay đổi).</p>\n<p>Nếu luôn muốn lấy giá trị sau cùng bên trong effect, cách dễ nhất là dùng <code class=\"language-text\">refs</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Example</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token spread operator\">...</span>\n    <span class=\"token keyword\">const</span> latestCount <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token spread operator\">...</span>\n\n    <span class=\"token method function property-access\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token spread operator\">...</span>\n        latestCount<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span> <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n        <span class=\"token spread operator\">...</span>\n        <span class=\"token method function property-access\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token spread operator\">...</span>\n                <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>latestCount<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token spread operator\">...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"https://overreacted.io/timeout_counter_refs-78f7948263dd13b023498b23cb99f4fc.gif\"></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Greeting</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu chúng ta render <code class=\"language-text\">&lt;Greeting name=&quot;Dan&quot; /&gt;</code>, sau đó render <code class=\"language-text\">&lt;Greeting name=&quot;Luu&quot; /&gt;</code>. Cuối cùng chúng ta luôn nhận được <em>Hello, Luu</em></p>\n<p>React luôn đồng bộ cục DOM với giá trị hiện tại của <code class=\"language-text\">prop</code> và <code class=\"language-text\">state</code>. Không cần phân biệt giữa <code class=\"language-text\">mount</code> và <code class=\"language-text\">update</code> khi render. Có thể hình dung effect cũng tương tự như vậy, <strong><code class=\"language-text\">useEffect</code> cho phép đồng bộ những phần không nằm trong React tree với giá trị của <code class=\"language-text\">prop</code> và <code class=\"language-text\">state</code></strong></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Greeting</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Câu thần chú cho việc này là: <strong>Quan trọng là đích đến, không phải quá trình</strong></p>\n<p>Chạy effect trên tất cả lúc chạy render sẽ không hay lắm, đôi khi có trường hợp lặp vô tận.</p>\n<p>Trong quá trình re-render, React chỉ cập nhập đúng phần DOM đã thay đổi.</p>\n<p>Ví dụ như</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, Dan</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Sang</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, Luu</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>React sẽ thấy 2 object</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> oldProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> className<span class=\"token operator\">:</span> <span class=\"token string\">\"Greeting\"</span><span class=\"token punctuation\">,</span> children<span class=\"token operator\">:</span> <span class=\"token string\">\"Hello, Dan\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> className<span class=\"token operator\">:</span> <span class=\"token string\">\"Greeting\"</span><span class=\"token punctuation\">,</span> children<span class=\"token operator\">:</span> <span class=\"token string\">\"Hello, Yuzhi\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nó sẽ xác định được <code class=\"language-text\">children</code> bị thay đổi và cần update, còn <code class=\"language-text\">className</code> thì không, nó sẽ làm như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\">domNode<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerText</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, Luu\"</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chúng ta cũng muốn effect làm điều tương tự, khi re-render chỉ apply những update cần thiết</p>\n<p>Ví dụ với component này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Greeting</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> setCounter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">useEffect</code> không hề liên quan tới giá trị state <code class=\"language-text\">counter</code>, gọi <code class=\"language-text\">document.title</code> khi giá trị <code class=\"language-text\">counter</code> thay đổi không phải là ý hay.</p>\n<p>Đó là lý do tại sao chúng ta có thêm tham số <code class=\"language-text\">dependency</code> (một mảng) khi dùng <code class=\"language-text\">useEffect</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// deps</span></code></pre>\n<p>Dịch ra ngôn ngữ con người là thế này: \"Tao biết React mày không phân biệt được sự khác nhau bên trong function, nên tao hứa là tao chỉ dùng đến <code class=\"language-text\">name</code> bên trong function này thôi, và chỉ giá trị <code class=\"language-text\">name</code> này update thì mày hả gọi nó\"</p>\n<h2 id=\"một-là-không-nói-láo-2-là-không-nói-láo-nhiều-lần\"><a href=\"#m%E1%BB%99t-l%C3%A0-kh%C3%B4ng-n%C3%B3i-l%C3%A1o-2-l%C3%A0-kh%C3%B4ng-n%C3%B3i-l%C3%A1o-nhi%E1%BB%81u-l%E1%BA%A7n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một là không nói láo, 2 là không nói láo nhiều lần</h2>\n<p>Đừng bao giờ lừa gạt React bằng cách đưa dependency không đúng cho nó, hậu quả nhãn tiền. Hợp lý, nhưng nhiều lập trình viên quen sử dụng <code class=\"language-text\">class</code> sẽ cố tình qua mặt</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">SearchResults</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// việc ntn được hôn? không phải lúc nào cũng đúng</span>\n  <span class=\"token comment\">// có cách viết tốt hơn</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Bạn sẽ nghĩ là \"Tao chỉ muốn chạy nó lúc mount thôi\". Nếu chúng ta chỉ định một dependency, <strong>tất cả giá trị bên trong component sử dụng bởi effect phải được khai báo cụ thể</strong>. Bao gồm prop, state, function</p>\n<p>Đôi khi mà làm như vậy nó phát sinh lỗi. Thí dụ như gọi fetch data liên tục hoặc socket được tạo không cần thiết. Cách giải quyets là <strong>không xóa chúng khỏi dependency</strong></p>\n<p>Trước khi nói về cách giải quyết, chúng ta xem vấn đề ở đây là gì khi so sánh Dependency</p>\n<h2 id=\"hậu-quả-của-việc-dối-trá\"><a href=\"#h%E1%BA%ADu-qu%E1%BA%A3-c%E1%BB%A7a-vi%E1%BB%87c-d%E1%BB%91i-tr%C3%A1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hậu quả của việc dối trá</h2>\n<p>Nếu mảng dependency chứa tất cả giá trị sử dụng trong <code class=\"language-text\">useEffect</code>, React biết được khi nào thì re-run nó</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><img src=\"https://overreacted.io/fae247cd068eedbd4b62ba50592d2b3d/deps-compare-correct.gif\" alt=\"Diagram of effects replacing one another\"></p>\n<p>Nhưng nếu chúng ta chỉ định <code class=\"language-text\">[]</code>, nó không re-run sau lần đầu tiên</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// thiếu name</span></code></pre>\n<p><img src=\"https://overreacted.io/25f75db3f9f57ffe1426912093577445/deps-compare-wrong.gif\" alt=\"Diagram of effects replacing one another\">,</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Sai: không được phép bỏ qua thằng name</span></code></pre>\n<p>Rõ ràng là 2 thằng dependency không khác nhau, nên nó sẽ không chạy effect</p>\n<p>Trong tình huống này, vấn đề khá là hiển nhiên, nhưng trực giác có thể đánh lừa bạn trong các tình huống khác, lấy ví dụ, chúng ta muốn giá trị <code class=\"language-text\">counter</code> tăng đều sau mỗi giây. Với một class, trực giác sẽ mách bảo: \"Set up cái interval một lần, rồi dứt tình vứt áo một lần\", kiểu như <a href=\"https://codesandbox.io/s/n5mjzjy9kl\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">thế này</a>, khi chuyển qua dùng <code class=\"language-text\">useEffect</code> bạn sẽ nghĩ đến dùng <code class=\"language-text\">[]</code> cho mảng phụ thuộc \"Tao chỉ muốn tình một đêm\", đúng không?</p>\n<pre class=\"language-jsx{9}\"><code class=\"language-jsx{9}\">function Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      setCount(count + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}</code></pre>\n<p>Theo như lập luận rất hay gặp \"danh sách phụ thuộc cho phép chúng ta chỉ định việc re-render effect khi nào\", và ở đây ta chỉ muốn trigger nó một lần vì nó là interval, <em>nhưng tại sao lại có vấn đề ở đây?</em></p>\n<p>Chúng ta đang muốn effect này chỉ chạy lần đầu tiên mà thôi, đưa vào dependencies là <code class=\"language-text\">[]</code> có vẻ hợp lý, React sẽ bỏ qua hết những lần sau, nhưng chúng ta đang lừa dối React, vì bên trong chúng ta có sử dụng giá trị <code class=\"language-text\">count</code>, chúng ta có giá trị phụ thuộc mà không khai báo. Thực tế <code class=\"language-text\">setCount()</code> sẽ gọi liên tục sau 1 giây, chứ không dừng lại sau lần gọi đầu tiên.</p>\n<p>Ở lần render đầu tiên, <code class=\"language-text\">count</code> = 0, vì thế <code class=\"language-text\">setCount(count + 1)</code> ở lần render đầu tiên nghĩa là <code class=\"language-text\">setCount(0+1)</code>, nhưng vì không re-run effect thêm lần nào nữa, chúng ta cứ gọi mãi <code class=\"language-text\">setCount(0+1)</code> ở những lần tiếp theo</p>\n<pre class=\"language-jsx{8,11}\"><code class=\"language-jsx{8,11}\">// state = 0\nfunction Counter() {\n  // ...\n  useEffect(\n    // lần đầu\n    () => {\n      const id = setInterval(() => {\n        setCount(0 + 1); // luôn là setCount(1)      }, 1000);\n      return () => clearInterval(id);\n    },\n    [] // không re-run  );\n  // ...\n}\n\n// state = 1\nfunction Counter() {\n  // ...\n  useEffect(\n    // không bao giờ chạy    () => {\n      const id = setInterval(() => {\n        setCount(1 + 1);\n      }, 1000);\n      return () => clearInterval(id);\n    },\n    []\n  );\n  // ...\n}</code></pre>\n<p>Những con bug như thế này sẽ rất rất khó để mò ra được, vì thế hãy luôn thành thật với React, khai báo hết dependency đang có.</p>\n<p><img src=\"https://overreacted.io/29e53bd0c9b7d2ac70d3cd924886b030/interval-wrong.gif\" alt=\"Diagram of stale interval closure\"></p>\n<h2 id=\"2-cách-để-thú-thật-với-react-về-dependency\"><a href=\"#2-c%C3%A1ch-%C4%91%E1%BB%83-th%C3%BA-th%E1%BA%ADt-v%E1%BB%9Bi-react-v%E1%BB%81-dependency\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2 cách để thú thật với React về dependency</h2>\n<p><em>Nên chọn cách một, cách 2 chỉ áp dụng khi cần thiết</em></p>\n<p><strong>Cách 1: luôn là người trung thực, chính trực đạo đức hết mực, luôn khai báo đầy đủ thông tin bạn trai, bạn gái, ba má, chú bác nào bạn đang phụ thuộc cho cơ quan thuế</strong></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">etCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Tuy nhiên thế này, khi giá trị <code class=\"language-text\">count</code> thay đổi, cái interval của chúng ta sẽ bị xóa và đặt lại lần nữa sau những lần render, nó không phải là cái chúng ta mong muốn nó hoạt động như vậy</p>\n<p><img src=\"https://overreacted.io/5734271ddfa94d2d65ac6160515e0069/interval-rightish.gif\" alt=\"Diagram of interval that re-subscribes\"></p>\n<p><strong>Cách 2 là thay đổi tư duy, giảm bớt anh trai nuôi, em gái nuôi không cần thiết</strong></p>\n<p>Chúng ta không nói xạo, chúng ta giảm bớt số lượng những thứ phụ thuộc cho việc re-run effect</p>\n<p>Để làm được việc này, chúng ta phải hỏi bản thân: <strong>chúng ta dùng count để làm gì?</strong> Có vẻ như chúng ta chỉ dùng nó cho việc gọi hàm <code class=\"language-text\">setCount</code>, chúng ta không thực sự cần giá trị <code class=\"language-text\">count</code> nếu chúng ta biết được giá trị trước đó, trường hợp trên, chúng ta có thể không cần dùng đến giá trị <code class=\"language-text\">count</code> mà dùng <em>previous state</em></p>\n<pre class=\"language-jsx{3}\"><code class=\"language-jsx{3}\">useEffect(() => {\n  const id = setInterval(() => {\n    setCount(c => c + 1);\n  }, 1000);\n  return () => clearInterval(id);\n}, []);</code></pre>\n<p><img src=\"https://overreacted.io/f128ad20c28317ed27a3cb68197fc906/interval-right.gif\" alt=\"Diagram of interval that works\"></p>\n<p><a href=\"https://codesandbox.io/s/q3181xz1pj\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chạy thử</a></p>\n<h2 id=\"tính-năng-update-của-google-docs\"><a href=\"#t%C3%ADnh-n%C4%83ng-update-c%E1%BB%A7a-google-docs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tính năng update của Google Docs</h2>\n<p>Khi nói về effect, định hướng lập trình chúng ta là <strong>đồng bộ hóa</strong>, có một khái niệm khá thú vị khi thực hiện đồng bộ hóa là chúng ta thường không đồng bộ toàn bộ nội dung. Lấy ví dụ như Google Docs, nó không thực sự truyền tải <strong>cả trang</strong> lên phía server, làm như vậy hiệu năng sẽ rất tệ, cái nó làm là gửi đi một thông tin chứa cái mà user đang muốn thực hiện.</p>\n<p><strong>Tốt nhất truyền đi thật ít thông tin từ effect (chỉ những thông tin cần thiết nhất) vào trong component</strong>. Hàm <code class=\"language-text\">setCount(c =&gt; c + 1)</code> sẽ gửi đi ít thông tin hơn so với hàm <code class=\"language-text\">setCount(count + 1)</code> đứng trên một khía cạnh nào đó vì nó không phụ thuộc giá trị hiện tại, <a href=\"https://reactjs.org/docs/thinking-in-react.html#step-3-identify-the-minimal-but-complete-representation-of-ui-state\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sử dụng ít state nhất có thể</a> để đạt được kết quả là một trong các nguyên lý chính của đợt cập nhập React với effect</p>\n<p>Tuy nhiên không phải lúc nào cuộc sống cũng đơn giản với bạn như vậy, nếu chúng ta muốn tính toán giá trị của state mới dựa trên một prop, 2 giá trị state phụ thuộc lẫn nhau, <code class=\"language-text\">setState</code> là không đủ. Chúng ta có người chị em hàng xóm tên <code class=\"language-text\">useReducer</code></p>\n<pre class=\"language-jsx{6}\"><code class=\"language-jsx{6}\">function Counter({ step }) {\n  const [count, dispatch] = useReducer(reducer, 0);\n\n  function reducer(state, action) {\n    if (action.type === \"tick\") {\n      return state + step;\n    } else {\n      throw new Error();\n    }\n  }\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      dispatch({ type: \"tick\" });\n    }, 1000);\n    return () => clearInterval(id);\n  }, [dispatch]);\n\n  return <h1>{count}</h1>;\n}</code></pre>\n<p>Cách dùng <code class=\"language-text\">useReducer</code> như vậy là một dạng <strong>cheat mode</strong> của hook, cho phép chúng ta bỏ qua các dependency <em>ngầm</em> khỏi effect, và chặn re-run không không cần thiết</p>\n<p><a href=\"https://codesandbox.io/s/7ypm405o8q\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chạy thử</a></p>\n<p>Bài viết này vẫn còn, và nếu bạn vẫn còn muốn đào sâu hơn nữa, có thể tìm đọc bài viết gốc của Dan</p>\n<p><a href=\"https://overreacted.io/a-complete-guide-to-useeffect/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Complete Guide to useEffect</a></p>\n","cover_image":""}},{"node":{"id":"c1f11ca1c9a0c32bafe6c1af3ebe4aad","title":"Vấn đề của React Context trên các xử lý async","path":"/van-de-cua-react-context-tren-cac-xu-ly-async/","date":"2020-03-16","timeToRead":6,"desc":"React Context có phải là viên đạn bạc sẽ giải quyết mọi vấn đề thay cho Redux hay không?","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#ch%C3%BAng-ta-b%E1%BA%AFt-%C4%91%E1%BA%A7u-v%E1%BB%9Bi-m%E1%BB%99t-component-duy-nh%E1%BA%A5t\">Chúng ta bắt đầu với một component duy nhất</a></li>\n<li><a href=\"#l%E1%BA%A5y-d%E1%BB%AF-li%E1%BB%87u-sau-khi-c%C3%B3-t%C6%B0%C6%A1ng-t%C3%A1c\">Lấy dữ liệu sau khi có tương tác</a></li>\n<li><a href=\"#%C4%91%C3%A2u-l%C3%A0-gi%E1%BA%A3i-ph%C3%A1p\">Đâu là giải pháp</a></li>\n</ul>\n<!-- /TOC -->\n<p>Để chia sẻ <code class=\"language-text\">state</code> giữa các component, React cung cấp API Context, <em>với lời hứa ngon ngọt</em> mà bạn có thể dễ dàng đọc được trên mạng \"có thể thay thế redux\". Từ kinh nghiệm thực tế của team Atlassian cũng như của bản thân mình (là tui luckyluu), sử dụng nó trên các module lớn, hoặc trên toàn bộ App (gốc trên cùng của cây React) là một cơn <strong>ác mộng</strong> trường kỳ.</p>\n<h2 id=\"chúng-ta-bắt-đầu-với-một-component-duy-nhất\"><a href=\"#ch%C3%BAng-ta-b%E1%BA%AFt-%C4%91%E1%BA%A7u-v%E1%BB%9Bi-m%E1%BB%99t-component-duy-nh%E1%BA%A5t\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chúng ta bắt đầu với một component duy nhất</h2>\n<p>Lấy ví dụ, chúng tạo ra một component Dropdown hiển thị danh sách categories</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CategoriesQuery</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> error<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/categories'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">,</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">children</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// sử dụng</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">CategoriesDropdown</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoriesQuery</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    ({ data, loading, error }) => </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CategoriesQuery</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Khá sạch đẹp, đúng không? Lúc component được <em>mount</em> vào DOM chúng ta <em>fetch</em> dữ liệu, đặt giá trị cho state loading.</p>\n<p>Tình huống hay gặp là chúng ta có nhu cầu sử dụng danh sách categories này trên một component nào đó khác. Việc cứ phải <em>wrap</em> component lại dạng cha con, rồi truyền danh sách categories thông qua <code class=\"language-text\">props</code> không phải là <em>lựa chọn khôn ngoan</em>, chúng ta cần lưu nó ở một nơi tập trung (store) và truy xuất ở bất kỳ đâu, chúng ta có thể sử dụng <code class=\"language-text\">createContext</code>. Việc chuyển qua dùng <code class=\"language-text\">createContext</code> dễ như ăn bún</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Provider</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Consumer</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CategoriesConsumer</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CategoriesProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> error<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/categories'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">,</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// sử dụng</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">CategoriesDropdown</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoriesConsumer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    ({ data, loading, error }) => </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CategoriesConsumer</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Chúng ta <strong>\"chỉ\"</strong> còn lại 2 vấn đề: đặt <code class=\"language-text\">&lt;CategoriesProvider/&gt;</code> ở đâu và chuyện gì sẽ xảy ra nếu Provider vì lý do nào đó không thể là <em>cha chú</em> của một component consumer?</p>\n<p>Xử lý các vấn đề phức tạp xung quanh việc viết context thế nào cho hợp lý, fallback ra làm sao sẽ cần đến một bài viết dài dòng khắc, giờ cứ tưởng tượng bạn luôn cần Provider render \"ở đâu đó\" (nhiều khi là cùng với cả tá provider khác nữa khi bạn cứ wrap thằng này trong thằng kia liên tục).</p>\n<h2 id=\"lấy-dữ-liệu-sau-khi-có-tương-tác\"><a href=\"#l%E1%BA%A5y-d%E1%BB%AF-li%E1%BB%87u-sau-khi-c%C3%B3-t%C6%B0%C6%A1ng-t%C3%A1c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lấy dữ liệu sau khi có tương tác</h2>\n<p>Đoạn code fetch dữ liệu lúc mount component ở trên trông rất hợp lý, nhưng sẽ có tình huống bạn cần trigger <code class=\"language-text\">fetch</code> không phải lúc mount.</p>\n<pre class=\"language-text\"><code class=\"language-text\">Node A\n    - Node B\n        - Node C</code></pre>\n<p>Nếu đặt tình huống bạn fetch dữ liệu categories ở <code class=\"language-text\">&lt;Node A /&gt;</code>, được <code class=\"language-text\">&lt;Node C/&gt;</code> hiển thị, nhưng user lúc sử dụng đôi khi chả bao giờ thấy đến <code class=\"language-text\">&lt;Node C/&gt;</code>, họ có thể dừng lại ở màn hình <code class=\"language-text\">&lt;Node A /&gt;</code>, việc bắt trình duyệt đi lấy dữ liệu quá sớm <em>không phải là một chuyện nên làm</em>. Do đó chúng ta sẽ có nhu cầu trả về hàm lấy dữ liệu trực tiếp xuống <code class=\"language-text\">context</code>:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">,</span> fetch<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">fetch</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>ĐỪNG BAO GIỜ LÀM NHƯ VẬY</strong>. Bạn có thấy được con bug <strong>\"ngầm\"</strong> trong cách viết trên không? Mỗi lần <code class=\"language-text\">CategoriesProvider</code> re-render, chúng ta truyền xuống một giá trị hoàn toàn mới cho <code class=\"language-text\">value</code> - <em>một object được khởi tạo mới tinh</em>. Tạo ra một object rồi truyền xuống thành <code class=\"language-text\">props</code> là <strong>lỗi căn bản</strong> cần tránh, tuy nhiên khi dùng cho Context Provider nó đặc biệt trầm trọng. Khi để ý thấy lỗi này, chúng tôi đã theo sự chỉ dẫn từ tài liệu của <a href=\"https://reactjs.org/docs/context.html#caveats\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Context guidelines</a>, lưu phương thức đó vào state</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CategoriesProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      data<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n      loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      error<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n      fetch<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">fetch</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Sau đó trong component consumer, chúng ta sẽ fetch dữ liệu categories khi thằng component consumer thực sự render</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">CategoriesQuery</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">CategoriesContext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>context<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>context<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">children</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Xong! <strong>Chưa thật sự xong đâu</strong>, khi thêm <code class=\"language-text\">&lt;CategoriesQuery/&gt;</code> ở 2 nơi khác nhau trên cây, nếu 2 component được mount cùng một lúc, <code class=\"language-text\">fetch</code> sẽ chạy <strong>2 lần</strong>.</p>\n<p><em>Bug nhỏ thôi mà đúng không?</em> Chúng ta không kiểm tra state <code class=\"language-text\">loading</code> trước khi gọi <code class=\"language-text\">fetch</code>. Sửa nhanh trong Provider:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// class CategoriesProvider...</span>\n<span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">loading</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Thử refresh lại trang, với 2 <code class=\"language-text\">CategoriesQuery</code> mount và... <strong>BÙM</strong> Vẫn là 2 request network. Kiểm tra lại lần nữa nào, có gì đó lỗi rồi, không lỗi nữa, lại lỗi nữa, ....</p>\n<p>....</p>\n<p>lại lỗi\n....</p>\n<p>còn lỗi\n....</p>\n<p>chưa hết lỗi\n....</p>\n<p>Rồi bỗng dưng chúng ta nhận ra React <code class=\"language-text\">setState</code> là một <code class=\"language-text\">async</code>. Có nghĩa là việc giá trị <code class=\"language-text\">loading</code> vẫn là <code class=\"language-text\">false</code> trong cả 2 lần gọi thậm chí <code class=\"language-text\">setState</code> đã được gọi một lần. \"Shitty React\" (React như c*t)</p>\n<p>Bắt đầu tìm kiếm một cách làm \"less shitty\" (bớt nhảm shit) với chuyện <code class=\"language-text\">setState</code> async trong Context Provider (có 4 năm cách làm tùy theo độ <em>sáng tạo</em>), nhưng có thể đảm bảo rằng không có cách nào <em>thập toàn thập mỹ</em>. Luôn cảm thấy chúng ta đang <strong>chống lại cách làm chính quy từ React</strong>.</p>\n<h2 id=\"đâu-là-giải-pháp\"><a href=\"#%C4%91%C3%A2u-l%C3%A0-gi%E1%BA%A3i-ph%C3%A1p\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đâu là giải pháp</h2>\n<p>Context API có rất nhiều điểm cộng ngay cả khi so sánh với Redux, cái chúng ta cần là một cách vẹn toàn cả cho cả 2.</p>\n<p>Mình cũng gặp vấn đề y chang như vậy với ứng dụng đang làm. Tìm kiếm và cuối cùng chốt hạ dùng <a href=\"https://atlassian.github.io/react-sweet-state/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-sweet-state</a> cho cả team</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> createStore<span class=\"token punctuation\">,</span> createHook <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-sweet-state\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// giá trị khởi tạo</span>\n<span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n  loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  error<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// define the actions that mutate the state</span>\n<span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">fetch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> getState<span class=\"token punctuation\">,</span> setState <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">loading</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/categories\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">,</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// tạo store</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">CategoriesStore</span> <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> initialState<span class=\"token punctuation\">,</span> actions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// tạo components để truy cập dữ liệu từ store</span>\n<span class=\"token keyword\">const</span> useCategories <span class=\"token operator\">=</span> <span class=\"token function\">createHook</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">CategoriesStore</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// sử dụng</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">CategoriesQuery</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> actions<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useCategories</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>state<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">)</span> actions<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> actions<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">children</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Có nhiều điểm cộng cho <a href=\"https://atlassian.github.io/react-sweet-state/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-sweet-state</a> như nó vẫn dùng Context API, nhưng an toàn hơn, các action sẽ dễ test hơn, làm việc được với Redux DevTools, đã xử lý những lỗi vẫn hay gặp với React Context. Và nhiều điều hay ho khác nữa. Các bạn nhớ like cho repo này trên github.</p>\n<p>Một số dẫn chứng khác để bạn tham khảo</p>\n<ul>\n<li><a href=\"https://twitter.com/dan_abramov/status/1109595839347990528\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Context <strong>Không được thiết kế cho dữ liệu thường xuyên cập nhập</strong></a></li>\n<li><a href=\"https://github.com/facebook/react/issues/13739\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>Hạn chế hiệu năng</strong> của React Context</a></li>\n<li><a href=\"https://github.com/facebook/react/issues/14110\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Context <strong>Không hỗ trợ selector</strong></a></li>\n<li><a href=\"https://github.com/facebook/react/issues/15156\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Context <strong>Không thể ngăn chặn việc re-render</strong></a></li>\n</ul>\n<p><a href=\"https://medium.com/@albertogasparin/the-pitfalls-of-async-operations-via-react-context-api-ab987d4290e6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The pitfalls of async operations via React Context API</a></p>\n","cover_image":""}},{"node":{"id":"67335fb1f2a382145c69b99fe4e01d34","title":"Sử dụng React Context như thế nào cho hiệu quả","path":"/su-dung-react-context-nhu-the-nao-cho-hieu-qua/","date":"2020-03-08","timeToRead":9,"desc":"Để có thể quản lý được state của ứng dụng một cách tốt nhất, chúng ta cần sự phân chia phù hợp giữa local state (internal state của component) và state cửa ứng dụng đặt trong React Context. Một vài điều muốn chia sẽ để nâng cao khả năng bảo trì và trải nghiệm nếu sử dụng đến context trong React.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#provider-component\">Provider Component</a></li>\n<li><a href=\"#consumer-hook\">Consumer Hook</a></li>\n<li><a href=\"#typescript--flow\">TypeScript / Flow</a></li>\n<li><a href=\"#v%E1%BA%ADy-c%C3%B2n-dispatch-type\">Vậy còn dispatch <code class=\"language-text\">type</code>?</a></li>\n<li><a href=\"#v%E1%BA%ADy-c%C3%B2n-c%C3%A1c-async-action-th%C3%AC-sao-\">Vậy còn các async action thì sao ?</a></li>\n<li><a href=\"#c%E1%BA%A3m-th%E1%BA%A5y-t%C3%A1ch-state-v%C3%A0-dispatch-r%E1%BA%A5t-kh%C3%B3-ch%E1%BB%8Bu\">Cảm thấy tách state và dispatch rất khó chịu</a></li>\n<li><a href=\"#to%C3%A0n-b%E1%BB%99-source-code\">Toàn bộ source code</a></li>\n</ul>\n<!-- /TOC -->\n<p>Chúng ta có một <em>module</em> (một nhánh trên cây react component cho dể hình dung) muốn sử dụng Context là <code class=\"language-text\">count</code>, chúng ta tạo file <code class=\"language-text\">count-context.js</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/count-context.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">CountStateContext</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">CountDispatchContext</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Điều muốn nói đầu tiên là chúng ta cố tình <strong>không khai báo giá trị khởi tạo</strong> cho <code class=\"language-text\">CountStateContext</code>, nếu muốn bạn có thể gọi <code class=\"language-text\">React.createContext({count: 0})</code>. Khai báo một <code class=\"language-text\">defaultValue</code> chỉ hữu dụng trong trường hợp như bên dưới</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">CountDisplay</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> count <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useContext</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">CountStateContext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Vì không khai báo giá trị khởi tạo, chúng ta sẽ nhận lỗi khi viết destructure giá trị trả về từ <code class=\"language-text\">useContext</code>. Vì giá trị mặc định là <code class=\"language-text\">undefined</code> và chúng ta không thể destructure <code class=\"language-text\">undefined</code></p>\n<p>Không ai trong chúng ta muốn nhận lỗi do không có giá trị khởi tạo. Tuy nhiên, nếu chỉ sử dụng giá trị mặc định được cung cấp, lợi ích sẽ không nhiều bằng việc linh động giá trị này. Kinh nghiệm thực tế cho thấy khi khởi tạo và sử dụng context trong ứng dụng, chúng ta muốn các consumer context (component sử dụng <code class=\"language-text\">useContext</code>) có thể cung cấp thêm các giá trị mới.</p>\n<p><em>Trong tài liệu chính thức của React có đề cập, \"cung cấp giá trị mặc định có thế giúp việc test component độc lập mà không cần bộc chúng lại (component lồng vào nhau)\". Không cùng quan điểm với ý kiến này, cá nhân tác giả (Kent C. Dodds) cho rằng tốt hơn nên bộc component với các context cần thiết khi test. Hãy nhớ là mỗi lần chúng ta làm gì đó bên trong test, chúng ta không làm những việc như vậy trong ứng dụng, chúng ta giảm bớt sự tự tin mà unit test mang lại.</em></p>\n<blockquote>\n<p>Lưu ý: nếu đang sử dụng Flow hay TypeScript, không cung cấp giá trị mặc định sẽ bị nhận ngay thẻ \"cảnh cáo\", rất phiền toái nếu sử dụng <code class=\"language-text\">React.useContext</code>. Đọc tiếp phần dưới sẽ chỉ cách khắc phục</p>\n</blockquote>\n<p>Mục đích của <code class=\"language-text\">CountDispatchContext</code> là để làm gì. Mình đã sử dụng context trong một thời gian, và nói chuyện với một số người đang làm việc với nó, có thể chia sẻ với bạn là đây là <strong>cách đơn giản nhất</strong> để tránh các rắc rối với context (đặc biệt khi bạn bắt đầu sử dụng <code class=\"language-text\">dispatch</code> trong effect) khi bạn bắt đầu tách state và dispatch trong context. <strong>Hãy tin mình!</strong></p>\n<h2 id=\"provider-component\"><a href=\"#provider-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Provider Component</h2>\n<p>Để các component bên dưới có thể sử dụng context module, chúng ta phải <em>bộc</em> các component lại về trong cùng một context, sử dụng với Provider Component, cái này thì ai cũng biết</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountDisplay</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountProvider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">CountProvider</code> được đưa ra để xài như thế nào cho hiệu quả thì lại ích ai quan tâm, đây là cách mà <code class=\"language-text\">CountProvider</code> được đưa ra cho thế giới</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/count-context.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">CountStateContext</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">CountDispatchContext</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">countReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"increment\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"decrement\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Unhandled action type: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">CountProvider</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useReducer</span><span class=\"token punctuation\">(</span>countReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountStateContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountDispatchContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>dispatch<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountDispatchContext.Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountStateContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword module\">export</span> <span class=\"token exports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">CountProvider</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"consumer-hook\"><a href=\"#consumer-hook\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Consumer Hook</h2>\n<p>Các thư viện sử dụng context tìm thấy trên mạng đa phần sẽ dùng cách này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">SomethingContext</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"some-context-package\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">YourComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> something <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useContext</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">SomethingContext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Để nâng cao trải nghiệm khi chúng ta sử dụng, câu lệnh này <code class=\"language-text\">React.useContext(SomethingContext)</code> cần phải thay thế. Nếu có thể viết như thế này, sẽ tuyệt vời hơn rất nhiều</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useSomething <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"some-context-package\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">YourComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> something <span class=\"token operator\">=</span> <span class=\"token function\">useSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Để có thể dùng <code class=\"language-text\">useSomething()</code> như bên trên, chúng ta sẽ cần viết lại context như sau</p>\n<pre class=\"language-jsx{32-38,40-46,48}\"><code class=\"language-jsx{32-38,40-46,48}\">// src/count-context.js\nimport React from \"react\";\n\nconst CountStateContext = React.createContext();\nconst CountDispatchContext = React.createContext();\n\nfunction countReducer(state, action) {\n  switch (action.type) {\n    case \"increment\": {\n      return { count: state.count + 1 };\n    }\n    case \"decrement\": {\n      return { count: state.count - 1 };\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action.type}`);\n    }\n  }\n}\n\nfunction CountProvider({ children }) {\n  const [state, dispatch] = React.useReducer(countReducer, { count: 0 });\n  return (\n    <CountStateContext.Provider value={state}>\n      <CountDispatchContext.Provider value={dispatch}>\n        {children}\n      </CountDispatchContext.Provider>\n    </CountStateContext.Provider>\n  );\n}\n\nfunction useCountState() {\n  const context = React.useContext(CountStateContext);\n  if (context === undefined) {\n    throw new Error(\"useCountState must be used within a CountProvider\");\n  }\n  return context;\n}\n\nfunction useCountDispatch() {\n  const context = React.useContext(CountDispatchContext);\n  if (context === undefined) {\n    throw new Error(\"useCountDispatch must be used within a CountProvider\");\n  }\n  return context;\n}\n\nexport { CountProvider, useCountState, useCountDispatch };</code></pre>\n<p>Chúng ta tạo <code class=\"language-text\">useCountState</code> và <code class=\"language-text\">useCountDispatch</code> hook sử dụng <code class=\"language-text\">React.useContext</code> để lấy được giá trị context cung cấp từ <code class=\"language-text\">CountProvider</code>. Tuy nhiên, nếu không có giá trị, chúng ta hiển thị thông báo lỗi để báo hook chỉ được sử dụng trong function component được render bên trong <code class=\"language-text\">CountProvider</code>. Lỗi này rất hay quên, nên nhắc trước cho tốt.</p>\n<p>Nếu cần sử dụng với React &#x3C; 16.8.0, chúng ta dùng render-prop với Consumer Component như sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">CountConsumer</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountStateContext.Consumer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token parameter\">context</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CountConsumer must be used within a CountProvider\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">children</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountStateContext.Consumer</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>Nếu bạn đã dùng React cũ, hoặc là nâng cấp mới nhất, hoặc giữ nguyên tình trạng hiện tại cho an toàn?</strong></p>\n<h2 id=\"typescript--flow\"><a href=\"#typescript--flow\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>TypeScript / Flow</h2>\n<p>Như đã hứa ở trên, với vấn đề <code class=\"language-text\">defaultValue</code> khi sử dụng TypeScript và Flow. Giải quyết như sau</p>\n<pre class=\"language-tsx{9-12,40-44,48-52}\"><code class=\"language-tsx{9-12,40-44,48-52}\">// src/count-context.tsx\nimport * as React from 'react'\n\ntype Action = {type: 'increment'} | {type: 'decrement'}\ntype Dispatch = (action: Action) => void\ntype State = {count: number}\ntype CountProviderProps = {children: React.ReactNode}\n\nconst CountStateContext = React.createContext<State| undefined>(undefined)\nconst CountDispatchContext = React.createContext(<Dispatch | undefined>(\nundefined,\n)\n\nfunction countReducer(state: State, action: Action) {\n  switch (action.type) {\n    case 'increment': {\n      return {count: state.count + 1}\n    }\n    case 'decrement': {\n      return {count: state.count - 1}\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action.type}`)\n    }\n  }\n}\n\nfunction CountProvider({children}: CountProviderProps) {\n  const [state, dispatch] = React.useReducer(countReducer, {count: 0})\n\n  return (\n    <CountStateContext.Provider value={state}>\n      <CountDispatchContext.Provider value={dispatch}>\n        {children}\n      </CountDispatchContext.Provider>\n    </CountStateContext.Provider>\n  )\n}\n\nfunction useCountState() {\n  const context = React.useContext(CountStateContext)\n  if (context === undefined) {\n    throw new Error('useCountState must be used within a CountProvider')\n  }\n  return context\n}\n\nfunction useCountDispatch() {\n  const context = React.useContext(CountDispatchContext)\n  if (context === undefined) {\n    throw new Error('useCountDispatch must be used within a CountProvider')\n  }\n  return context\n}\n\nexport {CountProvider, useCountState, useCountDispatch}</code></pre>\n<p>Với cách viết này, ai cũng có thể sử dụng <code class=\"language-text\">useCountState</code> hoặc <code class=\"language-text\">useCountDispatch</code> mà không cần kiểm tra <code class=\"language-text\">undefined</code></p>\n<p><a href=\"https://codesandbox.io/s/bitter-night-i5mhj\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem CodeSandbox</a></p>\n<h2 id=\"vậy-còn-dispatch-type\"><a href=\"#v%E1%BA%ADy-c%C3%B2n-dispatch-type\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vậy còn dispatch <code class=\"language-text\">type</code>?</h2>\n<p>Nếu bạn từng viết Redux, sẽ thắc mắc \"vậy action creator đâu?\". Nếu <em>thích</em> bạn có thể tự viết nếu muốn. Nhưng mình không phải là <em>fan</em> của action creator (cô thư ký xinh đẹp trong <a href=\"http://vuilaptrinh.com/2019-05-28-giai-thich-pattern-flux-trong-react/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bài giải thích về Flux Pattern của mình</a>. Mình luôn cảm thấy em này khá dư thừa, không cần thiết phải phức tạp thêm một tổ chức đã quá phức tạp như Flux (<strong>hoàn hảo không phải là không còn gì để thêm nữa mà là ko còn gì có thể bỏ đi mà</strong>). Nếu sử dụng TypeScript hoặc Flow, nó sẽ giúp chúng ta tự điền action type có thể điền</p>\n<p><img src=\"https://kentcdodds.com/static/d99d4329b1d7ebd2e63bf76471f540ab/e3189/auto-complete.png\" alt=\"Sử dụng React Context như thế nào cho hiệu quả\"></p>\n<p><img src=\"https://kentcdodds.com/static/0d45ecb53470729181863636bdafc2b9/e3189/type-error.png\" alt=\"Sử dụng React Context như thế nào cho hiệu quả\"></p>\n<p>Mình thích kiểu gọi <code class=\"language-text\">dispatch</code> như thế này, nếu để ý bạn sẽ biết <code class=\"language-text\">dispatch</code> sẽ không thay đổi trong suốt quá trình tồn tại của component, nghĩa là bạn có thể truyền nó vào mảng phụ thuộc của <code class=\"language-text\">useEffect</code> vô tư.</p>\n<h2 id=\"vậy-còn-các-async-action-thì-sao-\"><a href=\"#v%E1%BA%ADy-c%C3%B2n-c%C3%A1c-async-action-th%C3%AC-sao-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vậy còn các async action thì sao ?</h2>\n<p>Một câu hỏi hay, bạn gặp tình huống cần xử lý là một async (thao tác bất đồng bộ như network request) và bạn cần dispatch nhiều action cùng lúc, dispatch một action nào đó phụ thuộc vào kết quả từ dispatch trước đó? Bạn có thể làm điều đó trong component, tuy nhiên <em>xử lý thủ công</em> như thế trên từng component rất là phiền.</p>\n<p>Mình đề nghị tạo một helper function trong context module, nhận <code class=\"language-text\">dispatch</code> và tất cả những dữ liệu bạn cần, helper function (AKA middleware) này sẽ chịu trách nhiệm xử lý tất cả những việc đã nêu trên (theo kiểu state machine)</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// user-context.js</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> updates</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"start update\"</span><span class=\"token punctuation\">,</span> updates <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> updatedUser <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> userClient<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updateUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> updates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"finish update\"</span><span class=\"token punctuation\">,</span> updatedUser <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"fail update\"</span><span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token exports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">UserProvider</span><span class=\"token punctuation\">,</span> useUserDispatch<span class=\"token punctuation\">,</span> useUserState<span class=\"token punctuation\">,</span> updateUser <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">;</span></code></pre>\n<p>Sử dụng nó sẽ như thế này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// user-profile.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useUserState<span class=\"token punctuation\">,</span> useUserDispatch<span class=\"token punctuation\">,</span> updateUser <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./user-context\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">UserSettings</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useUserState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> userDispatch <span class=\"token operator\">=</span> <span class=\"token function\">useUserDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span>userDispatch<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> formState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"cảm-thấy-tách-state-và-dispatch-rất-khó-chịu\"><a href=\"#c%E1%BA%A3m-th%E1%BA%A5y-t%C3%A1ch-state-v%C3%A0-dispatch-r%E1%BA%A5t-kh%C3%B3-ch%E1%BB%8Bu\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cảm thấy tách state và dispatch rất khó chịu</h2>\n<p>Nhiều người phàn nàn tách state và dispatch riêng rất khó chịu</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">useCountState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useCountDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Tại sao không <em>đơn giản</em> là làm thế này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Tất nhiên bạn có thể</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">useCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">[</span><span class=\"token function\">useCountState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">useCountDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Cái này tùy cách nhìn nhận của từng người viết, không có chuyện ai đúng ai sai, chỉ là bạn cảm thấy <em>thoải mái</em>, <em>vui</em> hơn với cách viết nào thôi.</p>\n<h2 id=\"toàn-bộ-source-code\"><a href=\"#to%C3%A0n-b%E1%BB%99-source-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Toàn bộ source code</h2>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/count-context.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">CountStateContext</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">CountDispatchContext</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">countReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"increment\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"decrement\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Unhandled action type: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">CountProvider</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useReducer</span><span class=\"token punctuation\">(</span>countReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountStateContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CountDispatchContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>dispatch<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountDispatchContext.Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CountStateContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useCountState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useContext</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">CountStateContext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"useCountState must be used within a CountProvider\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useCountDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useContext</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">CountDispatchContext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"useCountDispatch must be used within a CountProvider\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token exports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">CountProvider</span><span class=\"token punctuation\">,</span> useCountState<span class=\"token punctuation\">,</span> useCountDispatch <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">;</span></code></pre>\n<p>Ở đây, mình đang cố tính không <code class=\"language-text\">export CountContext</code>, chúng ta chỉ cung cấp một cách để cung cấp giá trị trong context và một cách để lấy về giá trị này. Việc này đảm bảo người sử dụng giá trị context đúng theo cái cách chúng ta muốn, cho phép chúng ta hạn chế một số code không cần thiết khi lúc nào cũng phải khai báo <code class=\"language-text\">useContext</code> nào.</p>\n<p>Hy vọng bài viết mang đến nhiều điều hữu ích cho bạn.</p>\n<p><strong>Tâm niệm rằng:</strong></p>\n<ul>\n<li>Không nên đặt trọn niềm tin 100% vào context có thể giải quyết <strong>tất cả</strong> vấn đề liên quan đến chia sẻ state</li>\n<li>Context không nhất thiết là một global state cho toàn bộ ứng dụng, nó có thể được áp dụng trên một phần của cây component cụ thể nào đó.</li>\n<li>Bạn có thể (và bạn nên) chia các logic khác nhau trên các context khác nhau.</li>\n</ul>\n<p><a href=\"https://codesandbox.io/s/react-codesandbox-je6cc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Code Sandbox cho bạn nào cần vọc vạch</a></p>\n<p><a href=\"https://kentcdodds.com/blog/how-to-use-react-context-effectively\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to use React Context effectively</a></p>\n<p><a href=\"https://kentcdodds.com/blog/application-state-management-with-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Application State Management with React</a></p>\n<p><a href=\"https://kentcdodds.com/blog/how-to-optimize-your-context-value\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to optimize your context value</a></p>\n","cover_image":""}},{"node":{"id":"f1e7e7301a64eaa87386851839352f42","title":"Chỉ dẫn thiết đặt ESLint trong nhiều tình huống sử dụng Javascript, Typescript, React","path":"/chi-dan-thiet-dat-es-lint-trong-nhieu-tinh-huong-su-dung-javascript-typescript-react/","date":"2020-02-03","timeToRead":7,"desc":"Chúng ta bắt đầu với Javascript trước, sau đó sẽ là TypeScript, và React. Mục tiêu là làm đúng, tránh trường hợp cài package không cần thiết hoặc copy/paste các config tới khi nó chạy được thì thôi.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#t%E1%BA%A1i-sao-d%C3%B9ng-eslint\">Tại sao dùng ESLint</a></li>\n<li><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-eslint\">Cài đặt ESLint</a></li>\n<li><a href=\"#file-c%C3%A0i-%C4%91%E1%BA%B7t-c%E1%BB%A7a-eslint\">File cài đặt của ESLint</a></li>\n<li><a href=\"#javascript-thu%E1%BA%A7n\">Javascript thuần</a></li>\n<li><a href=\"#thi%E1%BA%BFt-%C4%91%E1%BA%B7t-typescript\">Thiết đặt TypeScript</a></li>\n<li>\n<p><a href=\"#thi%E1%BA%BFt-%C4%91%E1%BA%B7t-cho-react\">Thiết đặt cho React</a></p>\n<ul>\n<li><a href=\"#react-javascript\">React Javascript</a></li>\n<li><a href=\"#react-typescript\">React TypeScript</a></li>\n</ul>\n</li>\n<li><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-cho-vscode\">Cài đặt cho VSCode</a></li>\n</ul>\n<!-- /TOC -->\n<p>Nếu chưa rành, bạn cần đọc từ đầu tới cuối, nếu đã thành thạo, chỉ việc nhảy tới phần cuối rồi copy config về xài.</p>\n<p>Hướng dẫn này sử dụng bộ config của Airbnb, vì nó quá nổi tiếng và được sử dụng gần như là chuẩn. Tất nhiên, bạn có quyền thay đổi sao cho hợp <em>gu</em></p>\n<p>Nếu chưa bao giờ <em>nghe</em> đến hướng dẫn viết <em>code sao cho chuẩn</em> của Airbnb, tham khảo các bài viết sau</p>\n<ul>\n<li><a href=\"https://github.com/airbnb/javascript/blob/master/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb JavaScript style guide</a></li>\n<li><a href=\"https://github.com/airbnb/javascript/tree/master/react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb React style guide</a></li>\n<li><a href=\"https://github.com/airbnb/javascript/tree/master/css-in-javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb CSS in JavaScript style guide</a></li>\n<li><a href=\"https://github.com/airbnb/css\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb Sass style guide</a></li>\n</ul>\n<h2 id=\"tại-sao-dùng-eslint\"><a href=\"#t%E1%BA%A1i-sao-d%C3%B9ng-eslint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao dùng ESLint</h2>\n<p>Hiện tại không có bất cứ một đối thủ nào <em>xứng tầm</em> với ESLint, nó là dự án đã và đang được bảo trì bởi cộng đồng rất rộng lớn. Hầu hết các chương trình viết code đều hỗ trợ, chúng ta sẽ không gặp khó khăn trong việc sử dụng nó với VSCode, Vim, Emac, WebStorm, Sublime, Atom,...</p>\n<p>Túm lại, ESLint là <strong>nền tảng</strong> xịn sò nhất, bạn không cần lăng tăng tìm <em>người khác</em>.</p>\n<h2 id=\"cài-đặt-eslint\"><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-eslint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cài đặt ESLint</h2>\n<p>Giống như bất kỳ package nào khác, ESLint có thể được cài đặt ở 2 mức</p>\n<ul>\n<li><em>global</em>, cài luôn vào máy <code class=\"language-text\">npm -g</code></li>\n<li>đi theo từng project</li>\n</ul>\n<p>Việc cài đặt ESLint ở mức <em>global</em> khá là hợp lý vì chúng ta muốn dùng nó ở mọi project. Tuy nhiên cũng <em>hợp lý</em> nếu cài riêng trên từng project nếu bạn đang cần</p>\n<ul>\n<li>Các phiên bản ESLint khác nhau trên từng dự án</li>\n<li>Công khai bạn phụ thuộc vào ESLint cho project đó</li>\n<li>Đồng nghiệp và các công cụ tự động (như mấy thằng CI) có thể cài đặt ESlint như những package khác.</li>\n</ul>\n<p>Cài đặt ESLint trong thư mục project</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i eslint --save-dev</code></pre>\n<p>Chạy ESLint trong project</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npx eslint</code></pre>\n<p>Để tạo một <em>shortcut</em> cho câu lệnh chạy eslint. Bên trong file <code class=\"language-text\">package.json</code> thêm dòng sau</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint .\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Tham số <code class=\"language-text\">.</code> cho phép chạy ESLint bên trong thư mục hiện tại, chúng ta chạy lệnh thông qua shortcut</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run lint</code></pre>\n<h2 id=\"file-cài-đặt-của-eslint\"><a href=\"#file-c%C3%A0i-%C4%91%E1%BA%B7t-c%E1%BB%A7a-eslint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>File cài đặt của ESLint</h2>\n<p>Có thể đặt file cài đặt ESLint ở <a href=\"https://eslint.org/docs/user-guide/configuring#configuration-cascading-and-hierarchy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nhiều vị trí</a>. Nếu không có nhu cầu quá đặt biệt, 1 file duy nhất ở thư mục ngoài cùng ( <code class=\"language-text\">root</code> ) là đủ.</p>\n<p>ESLint cho phép sử dụng nhiều kiểu file</p>\n<ul>\n<li>Javascript</li>\n<li>JSON</li>\n<li>YAML</li>\n</ul>\n<p>Xài YAML trong ví dụ này. Tạo file tên <code class=\"language-text\">.eslintrc.yaml</code>, cái này nếu bạn chạy <code class=\"language-text\">eslint init</code> trong thư mục <code class=\"language-text\">src/</code> của dự án nó sẽ hỏi bạn có muốn tạo không, nó tạo dùm cho.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">eslint --init</code></pre>\n<blockquote>\n<p>Nếu muốn thêm <em>logic</em> bằng code, bạn cần dùng kiểu javascript</p>\n</blockquote>\n<p>Điều cần quan tâm trước hết là thông báo cho ESLint chúng ta đang viết ngôn ngữ gì, phiên bản nào, môi trường mà code sẽ chạy. Nếu không có các thông tin, ESLint sẽ không chạy được.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">parserOptions:\n  ecmaVersion: <span class=\"token number\">6</span>\nenv:\n  node: <span class=\"token boolean\">true</span></code></pre>\n<h2 id=\"javascript-thuần\"><a href=\"#javascript-thu%E1%BA%A7n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Javascript thuần</h2>\n<p>Với project là javascript thuần, toàn bộ file là <code class=\"language-text\">.js</code>, có thể tự định nghĩa từ đầu hết, nhưng như vậy khá mất thời gian, khó bảo trì, chưa chắc chuẩn vì nó phụ thuộc vào sự hiểu biết của bạn về javascript</p>\n<p>Rất nhiều các công ty lớn như <a href=\"https://github.com/google/eslint-config-google\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google</a>, <a href=\"https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb</a>, <a href=\"https://github.com/facebook/fbjs/tree/master/packages/eslint-config-fbjs-opensource\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Facebook</a> bỏ ra cả tỉ tỉ thời gian để bảo trì và cập nhập mấy cài đặt này</p>\n<p>Sử dụng cài đặt vạn người yêu thích, Airbnb</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npx install-peerdeps --dev eslint-config-airbnb-base</code></pre>\n<p>Các bài viết trên mạng sẽ kêu bạn cài <code class=\"language-text\">eslint-config-airbnb</code>, nó có bao gồm luôn phần cài đặt cho React, React Hooks, ... . Không cần thiết trong trường hợp project chỉ là javascript thông thường.</p>\n<p>Để ý chúng ta <strong>KHÔNG</strong> dùng <code class=\"language-text\">npm</code> để cài đặt, mà dùng <code class=\"language-text\">npx install-peerdeps</code>. Nó sẽ cài luôn mấy package nào mà <code class=\"language-text\">eslint-config-airbnb-base</code> phụ thuộc. Trường hợp sử dụng ESLint chúng ta sẽ gặp hoài, vì hầu như nó đều phụ thuộc một vài package khác.</p>\n<p>Cài xong, khai báo sẽ kế thừa bộ cài đặt của Airbnb</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>base</code></pre>\n<p>Những thiết đặt của airbnb có thể nói là rất phổ biến và được tin dùng bởi nhiều dự án lớn nhỏ khác nhau. Chúng ta có thể yên tâm sử dụng nó mà không cần thay đổi gì nhiều.</p>\n<p>Tổng kết</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-config-airbnb-base\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^14.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-import\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.20.0\"</span> (peer dependency)\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parserOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ecmaVersion</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">node</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> eslint<span class=\"token punctuation\">:</span>recommended\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>base</code></pre>\n<h2 id=\"thiết-đặt-typescript\"><a href=\"#thi%E1%BA%BFt-%C4%91%E1%BA%B7t-typescript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thiết đặt TypeScript</h2>\n<p>Vấn đề chính của TypeScript là ESLint không thể tự động mà <code class=\"language-text\">parse</code> được, chúng ta phải thêm một parser <a href=\"https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/parser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@typescript-eslint/parser</a>.</p>\n<p>Cài đặt</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @typescript-eslint/parser --save-dev</code></pre>\n<blockquote>\n<p>Parse làm nhiệm vụ đọc cài file input và tạo ra một <em>phiên bản</em> mà ESLint hiểu được.</p>\n</blockquote>\n<p>Khai báo dùng parser này</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parser</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span></code></pre>\n<p>Đồng thời cập nhập luôn <code class=\"language-text\">package.json</code> và báo với ESLint đừng kiểm tra file <code class=\"language-text\">.js</code> mà kiểm tra file <code class=\"language-text\">.ts</code></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint . --ext .ts\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Tương tự như javascript, chúng ta dùng bộ thiết đặt của Airbnb</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npx install-peerdeps --dev eslint-config-airbnb-typescript\n<span class=\"token function\">npm</span> i eslint-plugin-import --save-dev</code></pre>\n<p><code class=\"language-text\">eslint-plugin-import</code> phải được cài đặt riêng, thủ công, không rõ lý do tại sao luôn.</p>\n<p>Cập nhập lại file config ESLint</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>typescript/base\n  <span class=\"token punctuation\">-</span> plugin<span class=\"token punctuation\">:</span>@typescript<span class=\"token punctuation\">-</span>eslint/recommended</code></pre>\n<p>Bạn có thể thắc mắc, tại sao chưa cài <code class=\"language-text\">@typescript-eslint</code> mà có thể sử dụng, thật ra lúc cài <code class=\"language-text\">eslint-config-airbnb-typescript</code> chúng ta đã cài luôn nó bằng <code class=\"language-text\">npx install-peerdeps</code></p>\n<p>Có thể rule khác nữa có thể tham khảo <a href=\"https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">trực tiếp từ tài liệu trên github</a></p>\n<p>Cuối cùng, bạn sẽ thấy có rất nhiều bài viết trên mạng, chỉ bạn thiết đặt</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token string\">\"@typescript-eslint\"</span></code></pre>\n<p>Nếu không sử dụng các thiết ESLint được đề nghị, cái này không cần thiết. Lý do là Airbnb đã bật luôn các rule như vậy.</p>\n<p>Tổng kết</p>\n<p><strong>package.json</strong></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"@typescript-eslint/eslint-plugin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.17.0\"</span><span class=\"token punctuation\">,</span> (peer dependency)\n  <span class=\"token property\">\"@typescript-eslint/parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.17.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.8.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-config-airbnb-typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.3.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-import\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.20.0\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>.eslintrc.yaml</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parserOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ecmaVersion</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">node</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>typescript/base\n  <span class=\"token punctuation\">-</span> plugin<span class=\"token punctuation\">:</span>@typescript<span class=\"token punctuation\">-</span>eslint/recommended</code></pre>\n<h2 id=\"thiết-đặt-cho-react\"><a href=\"#thi%E1%BA%BFt-%C4%91%E1%BA%B7t-cho-react\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thiết đặt cho React</h2>\n<p>Thêm các thiết đặt ESLint cho React vô cùng đơn giản, mọi thứ đã có Airbnb lo.</p>\n<p>Một trong những sai lầm phổ biến là cho rằng viết như bên dưới sẽ bật hỗ trợ React</p>\n<p><strong>.eslintrc.yaml</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parserOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ecmaFeatures</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">jsx</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre>\n<p>React sử dụng JSX, nhưng theo cách mà ESLint không thể <strong>hiểu nổi</strong>. Để React và ESLint <em>nói chuyện</em> được với nhau, chúng ta phải sử dụng <code class=\"language-text\">eslint-plugin-react</code></p>\n<h3 id=\"react-javascript\"><a href=\"#react-javascript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>React Javascript</h3>\n<p>Cài đặt package</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npx install-peerdeps --dev eslint-config-airbnb</code></pre>\n<p><strong>.eslintrc.yaml</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">browser</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre>\n<p><strong>package.json</strong></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint . --ext .js,.jsx\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu có sử dụng React Hook, bạn nên thêm phần cài đặt sau (có bỏ qua việc kiểm tra accessibility)</p>\n<p><strong>.eslintrc.yaml</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>base\n  <span class=\"token punctuation\">-</span> airbnb/rules/react\n  <span class=\"token punctuation\">-</span> airbnb/hooks</code></pre>\n<p>Tổng kết</p>\n<p><strong>package.json</strong></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-config-airbnb\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^18.0.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-import\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.20.0\"</span><span class=\"token punctuation\">,</span> (peer dependency)\n  <span class=\"token property\">\"eslint-plugin-jsx-a11y\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.2.3\"</span><span class=\"token punctuation\">,</span> (peer dependency)\n  <span class=\"token property\">\"eslint-plugin-react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.18.0\"</span><span class=\"token punctuation\">,</span> (peer dependency)\n  <span class=\"token property\">\"eslint-plugin-react-hooks\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.7.0\"</span> (peer dependency)\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>.eslintrc.yaml</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parserOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ecmaVersion</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">browser</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb\n  <span class=\"token punctuation\">-</span> airbnb/hooks\n\n<span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">react/react-in-jsx-scope</span><span class=\"token punctuation\">:</span> off</code></pre>\n<p><a href=\"https://github.com/yannickcr/eslint-plugin-react#list-of-supported-rules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rảnh ngồi xem toàn bộ thiết đặt</a></p>\n<h3 id=\"react-typescript\"><a href=\"#react-typescript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>React TypeScript</h3>\n<p>Nếu dùng TypeScript, chúng ta không thể cài theo kiểu <code class=\"language-text\">npx install-peerdeps</code>, mà phải cài độc lập</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint-config-airbnb-typescript <span class=\"token punctuation\">\\</span>\n            eslint-plugin-import <span class=\"token punctuation\">\\</span>\n            eslint-plugin-jsx-a11y <span class=\"token punctuation\">\\</span>\n            eslint-plugin-react <span class=\"token punctuation\">\\</span>\n            eslint-plugin-react-hooks <span class=\"token punctuation\">\\</span>\n            @typescript-eslint/eslint-plugin <span class=\"token punctuation\">\\</span>\n            --save-dev</code></pre>\n<p><strong>.eslintrc.yaml</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parserOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ecmaVersion</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">browser</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>typescript\n  <span class=\"token punctuation\">-</span> airbnb/hooks\n  <span class=\"token punctuation\">-</span> plugin<span class=\"token punctuation\">:</span>@typescript<span class=\"token punctuation\">-</span>eslint/recommended\n\n<span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">react/react-in-jsx-scope</span><span class=\"token punctuation\">:</span> off</code></pre>\n<p><strong>package.json</strong></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.8.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"@typescript-eslint/eslint-plugin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.17.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-config-airbnb-typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.3.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-import\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.20.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-jsx-a11y\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.2.3\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.18.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-react-hooks\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.3.0\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint . --ext .ts,.tsx\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"cài-đặt-cho-vscode\"><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-cho-vscode\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cài đặt cho VSCode</h2>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VSCode đã có plugin</a> khá thần thánh để hỗ trợ ESLint. Các thiết đặt yêu thích của mình</p>\n<p>Tự động chạy lint khi save</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"eslint.run\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"onSave\"</span></code></pre>\n<p>VSCode sẽ kiểm tra trên JS, JSX, TS, TSX</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"eslint.validate\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"javascript\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"javascriptreact\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"typescript\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"typescriptreact\"</span>\n<span class=\"token punctuation\">]</span></code></pre>\n<p>Chọn kiểu nháy đơn</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"javascript.preferences.quoteStyle\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"single\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"typescript.preferences.quoteStyle\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"single\"</span><span class=\"token punctuation\">,</span></code></pre>\n<p>Tự động cập nhập vị trí file</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"javascript.updateImportsOnFileMove.enabled\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"typescript.updateImportsOnFileMove.enabled\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span></code></pre>\n<p><a href=\"https://blog.geographer.fr/eslint-guide\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ESLint configuration and best practices</a></p>\n","cover_image":""}},{"node":{"id":"2f989fd0a23550e73b2ace01c0db24ad","title":"Bắt sự kiện click bên ngoài Component React","path":"/bat-su-kien-click-ben-ngoai-component-react/","date":"2020-01-30","timeToRead":1,"desc":"Thủ thuật nhỏ để bắt sự kiện click có nằm ngoài component không","content":"<p>Nếu bạn tự làm một react component như <em>dropdown</em>, <em>modal</em>, <em>popover</em>, không sớm thì muộn bạn sẽ rơi vào tình huống sao \"Bắt sự kiện click bên ngoài component để đóng nó (modal, popover, dropdown) lại\"</p>\n<p><img src=\"https://miro.medium.com/max/546/1*7dmOCdkoDLfnWz6hBF0fYA.png\"></p>\n<p>Đây là những gì bạn cần làm</p>\n<ol>\n<li>Để biết sự kiện nằm trong hay ngoài component, chúng ta phải lấy được DOM của element, dùng <code class=\"language-text\">ref</code> để lấy tham chiếu đến DOM <em>thực</em> của component</li>\n</ol>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token spread operator\">...</span>\n\n<span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        ...\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<ol start=\"2\">\n<li>Thêm một event listener cho sự kiện click ( <em>mousedown</em> )</li>\n</ol>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//  thêm khi đã mount</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mousedown\"</span><span class=\"token punctuation\">,</span> handleClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// dọn dẹp</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mousedown\"</span><span class=\"token punctuation\">,</span> handleClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<ol start=\"3\">\n<li>Bên trong <code class=\"language-text\">handleClick</code> <strong>node.current.contains(e.target)</strong> sẽ trả về <code class=\"language-text\">true</code> nếu click xuất phát bên trong ref <code class=\"language-text\">node</code></li>\n</ol>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">contains</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// outside</span>\n    <span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><a href=\"https://codesandbox.io/s/w62xl39907\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Code</a>\n<a href=\"https://medium.com/@pitipatdop/little-neat-trick-to-capture-click-outside-react-component-5604830beb7f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Little Neat trick to capture click outside with React Hook</a></p>\n","cover_image":""}},{"node":{"id":"1c7b17cad2209ba0e4e9538f8e2a3fac","title":"Viết React Higher-Order Component bằng TypeScript","path":"/viet-react-higher-order-component-bang-type-script/","date":"2020-01-19","timeToRead":6,"desc":"Cuộc sống đưa đẩy bạn phải viết TypeScript, thì bài này sẽ giúp bạn chút ít khi viết type với HOC","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#enhancer\">Enhancer</a></li>\n<li><a href=\"#injector\">Injector</a></li>\n<li><a href=\"#enhance--inject\">Enhance + Inject</a></li>\n</ul>\n<!-- /TOC -->\n<blockquote>\n<p>Từ React 16.8.0, chúng ta có React Hook, nó giải quyết toàn bộ những trường hợp chúng ta phải sử dụng higher-order component và giảm đáng kể độ phức tạp của việc set type so với HOC. Bạn sử dụng hook trong mọi tình huống có thể. Nếu gơi cảnh <em>ngặt nghèo</em>, anh lead của bạn <em>ko rõ lý do gì</em> bắt xài HOC với TypeScript. Thì bài viết này để giúp biết biết cách set type cho HOC.</p>\n</blockquote>\n<p>HOC trong React là <em>công cụ</em> để chúng ta sử dụng nhiều đoạn code giống nhau trên các component khác nhau. Tuy nhiên khi dùng chung với TypeScript thì <strong>triệu triệu</strong> developer gặp không ít khó khăn khi set type cho nó. Bao gồm luôn mình trong đó.</p>\n<p>Trong phạm vi bài viết này, chúng ta sẽ chi ra 2 loại HOC, 2 cách làm HOC phổ biến hiện nay, tạm gọi là <strong>enhancer</strong> và <strong>injector</strong></p>\n<ul>\n<li><strong>Enhancer</strong>: bọc một component, bổ sung thêm các hàm hoặc prop</li>\n<li><strong>Injector</strong>: <em>bơm/chích</em> thêm prop vào một component</li>\n</ul>\n<p>Để phân biệt rõ hơn, bạn xem tiếp ví dụ bên dưới.</p>\n<h2 id=\"enhancer\"><a href=\"#enhancer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enhancer</h2>\n<p>Chúng ta bắt đầu với Enhancer vì nó dễ viết <code class=\"language-text\">type</code> nhất. Ví dụ cơ bản nhất, bổ sung thêm prop <code class=\"language-text\">loading</code> vào component.</p>\n<p>Không bao gồm <code class=\"language-text\">type</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withLoading</span> <span class=\"token operator\">=</span> <span class=\"token parameter\"><span class=\"token maybe-class-name\">Component</span></span> <span class=\"token arrow operator\">=></span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">WithLoading</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">return</span> loading <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadingSpinner</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>... và với <code class=\"language-text\">type</code></p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">WithLoadingProps</span> <span class=\"token punctuation\">{</span>\n  loading<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> withLoading <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">object</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(Component: React.ComponentType&lt;P>) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">WithLoading</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token operator\">&amp;</span> <span class=\"token maybe-class-name\">WithLoadingProps</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> loading <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadingSpinner</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span>props <span class=\"token keyword\">as</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">;</span></code></pre>\n<p>Có vài thứ cần giải thích ở đoạn trên, từng bước một nhé</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">WithLoadingProps</span> <span class=\"token punctuation\">{</span>\n  loading<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đây là <code class=\"language-text\">interface</code> khai báo các prop và <code class=\"language-text\">type</code> sẽ được thêm vào (<strong>enhance</strong>)</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">object</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(Component: React.ComponentType&lt;P>)</span></code></pre>\n<p>Chúng ta đang sử dụng một <a href=\"https://www.typescriptlang.org/docs/handbook/generics.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">generic</code></a>, <code class=\"language-text\">P</code> là ký tự dùng để đại diện cho toàn bộ prop của component khi truyền cho HOC. <code class=\"language-text\">React.ComponentType&lt;P&gt;</code> là một type viết tắt cho cả hai <code class=\"language-text\">React.FC&lt;P&gt;</code> và <code class=\"language-text\">React.ClassComponent&lt;P&gt;</code>, nghĩa là một component truyền vào cho HOC này có thể là function cũng được, class component cũng được.</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">WithLoading</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token operator\">&amp;</span> <span class=\"token maybe-class-name\">WithLoadingProps</span><span class=\"token operator\">></span></code></pre>\n<p>Đây là đoạn chúng ta component sẽ <code class=\"language-text\">return</code> từ HOC, nó chỉ định là component này sẽ bao gồm toàn bộ prop từ component (<code class=\"language-text\">P</code>) và prop của chính thằng HOC (<code class=\"language-text\">WithLoadingProps</code>), nó được <em>cộng dồn</em> bằng toán tử <code class=\"language-text\">&amp;</code></p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span></code></pre>\n<blockquote>\n<p>Với phiên bản cũ của TypeScript, có thể chúng ta phải <em>ép kiểu</em> <code class=\"language-text\">this.props</code> như thế này <code class=\"language-text\">this.props as WithLoadingProps</code></p>\n</blockquote>\n<p>Cuối cùng chúng ta sử dụng prop <code class=\"language-text\">loading</code> để đặt điều kiện hiển thị cái <em>Spinner</em></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword control-flow\">return</span> loading <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadingSpinner</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span>props <span class=\"token keyword module\">as</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre>\n<blockquote>\n<p>ép kiểu <code class=\"language-text\">props as P</code> là bắt buộc từ TypeScript 3.2, đây là bug của TypeScript</p>\n</blockquote>\n<p>Với HOC <code class=\"language-text\">withLoading</code> cũng có thể được viết để return một function component thay vì class</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> withLoading <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">object</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(\n  Component: React.ComponentType&lt;P>\n): React.FC&lt;P &amp; WithLoadingProps> => ({\n  loading,\n  ...props\n}: WithLoadingProps) =>\n  loading ? </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadingSpinner</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"> : &lt;Component </span><span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span>props <span class=\"token keyword\">as</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> />;</span></code></pre>\n<p>Chúng ta gặp vấn đề tương tự khi sử dụng rest/spread object, chúng ta chỉ định kiểu return là <code class=\"language-text\">React.FC&lt;P &amp; WithLoadingProps&gt;</code>, nhưng chỉ sử dụng <code class=\"language-text\">WithLoadingProps</code> bên trong function component</p>\n<h2 id=\"injector\"><a href=\"#injector\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Injector</h2>\n<p>Kiểu <em>injector</em> HOC sẽ hay gặp hơn, nhưng cũng khó set type hơn, bên cạnh việc <em>chích</em> thêm một số prop vào cho component, trong đa số các trường hợp nó còn xóa những prop đã <em>chích</em> vào khi nó bọc lại, như vậy những thằng từ bên ngoài không thể ghi đè lên. <code class=\"language-text\">connect</code> của react-redux là một ví dụ cho injector HOC. Chúng ta không sử dụng nó, vì quá phức tạp, dùng một ví dụ đơn giản hơn, HOC chích thêm giá trị <code class=\"language-text\">counter</code> và <code class=\"language-text\">callback</code> để tăng giảm giá trị.</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Subtract</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"utility-types\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InjectedCounterProps</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onDecrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MakeCounterState</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> makeCounter <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">InjectedCounterProps</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(\n  Component: React.ComponentType&lt;P>\n) =>\n  class MakeCounter extends React.Component&lt;\n    Subtract&lt;P, InjectedCounterProps>,\n    MakeCounterState\n  > </span><span class=\"token punctuation\">{</span>\n    state<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">MakeCounterState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Component</span>\n          <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">}</span>\n          onIncrement<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">increment</span><span class=\"token punctuation\">}</span>\n          onDecrement<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">decrement</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token plain-text\">;</span></code></pre>\n<p>Một vài điểm khác nhau</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InjectedCounterProps</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onDecrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Khai báo một interface để chỉ định những prop nào sẽ được <em>chích</em>, đồng thời export luôn để component nào dùng HOC có thể lấy xài.</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token imports\">makeCounter<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">InjectedCounterProps</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./makeCounter\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CounterProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">InjectedCounterProps</span> <span class=\"token punctuation\">{</span>\n  style<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">CSSProperties</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CounterProps</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">onDecrement</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> - </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">onIncrement</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> + </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">makeCounter</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Counter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">InjectedCounterProps</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(Component: React.ComponentType&lt;P>)</span></code></pre>\n<p>Một lần nữa chúng ta dùng một <code class=\"language-text\">generic</code>, nhưng lần này để đảm bảo component sử dụng HOC có bao gồm các prop đã được chích, nếu không thì báo lỗi.</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MakeCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token operator\">&lt;</span>\n  <span class=\"token maybe-class-name\">Subtract</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">InjectedCounterProps</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">MakeCounterState</span>\n<span class=\"token operator\">></span></code></pre>\n<p>Component được trả về từ HOC sẽ sử dụng <a href=\"https://github.com/piotrwitek/utility-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Subtract</code></a>, nó sẽ tách hết những prop đã chích thêm, nghĩa là nếu ai đó set lại từ kết quả trả về từ HOC, nó sẽ lỗi</p>\n<p><img src=\"https://miro.medium.com/max/451/1*xTKe3DWJdC7nAVQnM4bvbg.png\"></p>\n<h2 id=\"enhance--inject\"><a href=\"#enhance--inject\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enhance + Inject</h2>\n<p>Kết hợp cả 2 cách làm này lại, chúng ta sẽ có một component counter cho phép đưa giá trị minimum và maximum</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InjectedCounterProps</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onDecrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MakeCounterProps</span> <span class=\"token punctuation\">{</span>\n  minValue<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  maxValue<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MakeCounterState</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> makeCounter <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">InjectedCounterProps</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(\n  Component: React.ComponentType&lt;P>\n) =>\n  class MakeCounter extends React.Component&lt;\n    Subtract&lt;P, InjectedCounterProps> &amp; MakeCounterProps,\n    MakeCounterState\n  > </span><span class=\"token punctuation\">{</span>\n    state<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">MakeCounterState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span>\n          prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">maxValue</span>\n            <span class=\"token operator\">?</span> prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span>\n            <span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span>\n          prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">minValue</span>\n            <span class=\"token operator\">?</span> prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span>\n            <span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> minValue<span class=\"token punctuation\">,</span> maxValue<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Component</span>\n          <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span>props <span class=\"token keyword\">as</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">}</span>\n          onIncrement<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">increment</span><span class=\"token punctuation\">}</span>\n          onDecrement<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">decrement</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token plain-text\">;</span></code></pre>\n<p><code class=\"language-text\">Subtract</code> được sử dụng để kết hợp cả những prop của chính component và prop của HOC</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token maybe-class-name\">Subtract</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">InjectedCounterProps</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token maybe-class-name\">MakeCounterProps</span></code></pre>\n<p>Ngoài ra không còn gì thật sự khác nhau giữa 2 cách làm này cần phải nói thêm.</p>\n<p><a href=\"https://medium.com/@jrwebdev/react-higher-order-component-patterns-in-typescript-42278f7590fb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@jrwebdev/react-higher-order-component-patterns-in-typescript-42278f7590fb</a></p>\n","cover_image":""}},{"node":{"id":"a1364f5619accd5fccc571ac43e797e6","title":"Phương pháp test React Component","path":"/phuong-phap-test-react-component/","date":"2020-01-09","timeToRead":11,"desc":"Bài viết được dịch từ tài liệu chính thức của React","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-c%E1%BB%A5-th%E1%BB%83-setup--teardown\">Cài đặt cụ thể {#setup--teardown}</a></li>\n<li><a href=\"#act-act\"><code class=\"language-text\">act()</code> {#act}</a></li>\n<li><a href=\"#rendering-rendering\">Rendering {#rendering}</a></li>\n<li><a href=\"#fetch-d%E1%BB%AF-li%E1%BB%87u-data-fetching\">Fetch dữ liệu {#data-fetching}</a></li>\n<li><a href=\"#gi%E1%BA%A3-l%E1%BA%ADp-c%C3%A1c-module-mocking-modules\">Giả lập các module {#mocking-modules}</a></li>\n<li><a href=\"#event-events\">Event {#events}</a></li>\n<li><a href=\"#timer-timers\">Timer {#timers}</a></li>\n<li><a href=\"#snapshot-test-snapshot-testing\">Snapshot Test {#snapshot-testing}</a></li>\n<li><a href=\"#multiple-renderer-multiple-renderers\">Multiple Renderer {#multiple-renderers}</a></li>\n<li><a href=\"#c%C3%B2n-thi%E1%BA%BFu-g%C3%AC-%C4%91%C3%B3-something-missing\">Còn thiếu gì đó? {#something-missing}</a></li>\n</ul>\n<!-- /TOC -->\n<p>Một vài cách viết test phổ biến cho component React.</p>\n<blockquote>\n<p>Lưu ý:</p>\n<p>Trang này mặc định bạn đang dùng <a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jest</a> làm test runner. Nếu dùng một test runner khác, bạn cần thay đổi API cho phù hợp, giải pháp sẽ gần như nhau. Đọc thêm chi tiết cách cài đặt môi trường test ở <a href=\"/docs/testing-environments.html\">Môi trường Test</a>.</p>\n</blockquote>\n<p>Trên trang này, chúng tôi sẽ tập chung vào function component. Tuy nhiên, cách để tiếp cận test không phụ thuộc vào phần hiện thực cụ thể, nó cũng sẽ làm việc tốt với class component.</p>\n<ul>\n<li><a href=\"#setup--teardown\">Cài đặt cụ thể</a></li>\n<li><a href=\"#act\"><code class=\"language-text\">act()</code></a></li>\n<li><a href=\"#rendering\">Rendering</a></li>\n<li><a href=\"#data-fetching\">Data Fetching</a></li>\n<li><a href=\"#mocking-modules\">Mocking Modules</a></li>\n<li><a href=\"#events\">Events</a></li>\n<li><a href=\"#timers\">Timers</a></li>\n<li><a href=\"#snapshot-testing\">Snapshot Testing</a></li>\n<li><a href=\"#multiple-renderers\">Multiple Renderers</a></li>\n<li><a href=\"#something-missing\">Something Missing?</a></li>\n</ul>\n<hr>\n<h3 id=\"cài-đặt-cụ-thể-setup--teardown\"><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-c%E1%BB%A5-th%E1%BB%83-setup--teardown\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cài đặt cụ thể {#setup--teardown}</h3>\n<p>Trên mỗi test, chúng ta thường muốn render React tree của chúng ta thành DOM element và chèn nó vào <code class=\"language-text\">document</code>. Chỉ như thế chúng ta mới nhận được các sự kiện trên DOM. Khi kết thúc một test, chúng ta muốn \"dọn dẹp\" và <em>gỡ bỏ</em> cây này khỏi DOM.</p>\n<p>Một cách phổ biến để làm nó là sử dụng bộ đôi <code class=\"language-text\">beforeEach</code> và <code class=\"language-text\">afterEach</code>, để chúng luôn chạy một cách độc lập và không ảnh hưởng đến test khác:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> unmountComponentAtNode <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// cài đặt một DOM element như là target cho render</span>\n  container <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// dọn dẹp lúc thoát</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Bạn có thể sử dụng một cách khác, nhưng hãy nhớ chúng ta muốn chạy việc dọn dẹp ngay cả khi test <em>fail</em>. Nếu không, test có thể trở nên \"bất ổn\", và một test có thể ảnh hưởng đến hoạt động của test khác. Như vậy sẽ rất khó để debug.</p>\n<hr>\n<h3 id=\"act-act\"><a href=\"#act-act\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">act()</code> {#act}</h3>\n<p>Khi viết UI test, công việc như render, sự kiện từ user, hoặc fetch dữ liệu có thể được xem như một \"đơn vị\" tương tác với giao diện người dùng. React cung cấp một hàm trợ giúp <code class=\"language-text\">act()</code> để đảm bảo tất cả mọi cập nhập liên quan đến \"đơn vị\" đã được thực thi và áp dụng đến DOM trước khi chúng ta xác nhận kết quả:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// render component</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// xác nhận kết quả</span></code></pre>\n<p>Nó giúp test chạy giống nhất với những gì user nhận được khi sử dụng ứng dụng. Tất cả những ví dụ bên dưới sử dụng <code class=\"language-text\">act()</code> để đảm bảo điều này.</p>\n<p>Bạn có thể thấy sử dụng <code class=\"language-text\">act()</code> trực tiếp rất rườm rà. Để tránh rườm rà, bạn có thể sử dụng một thư viện như <a href=\"https://testing-library.com/react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Testing Library</a>, các hàm hỗ trợ đã được wrap lại sẵn trong <code class=\"language-text\">act()</code>.</p>\n<blockquote>\n<p>Lưu ý:</p>\n<p>Tên <code class=\"language-text\">act</code> có nguồn gốc từ cách làm <a href=\"http://wiki.c2.com/?ArrangeActAssert\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Arrange-Act-Assert</a>.</p>\n</blockquote>\n<hr>\n<h3 id=\"rendering-rendering\"><a href=\"#rendering-rendering\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Rendering {#rendering}</h3>\n<p>Thường thì, chúng ta muốn test xem một component render đúng hay không với các prop nhận được. Xem xét một component đơn giản sẽ render một thông tin dựa vào prop:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// hello.js</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Hello</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hey, stranger</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta có thể viết test cho component:</p>\n<pre class=\"language-jsx{24-27}\"><code class=\"language-jsx{24-27}\">// hello.test.js\n\nimport React from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { act } from \"react-dom/test-utils\";\n\nimport Hello from \"./hello\";\n\nlet container = null;\nbeforeEach(() => {\n  // cài đặt một DOM element như là target cho render\n  container = document.createElement(\"div\");\n  document.body.appendChild(container);\n});\n\nafterEach(() => {\n  // dọn dẹp lúc thoát\n  unmountComponentAtNode(container);\n  container.remove();\n  container = null;\n});\n\nit(\"renders with or without a name\", () => {\n  act(() => {\n    render(<Hello />, container);\n  });\n  expect(container.textContent).toBe(\"Hey, stranger\");\n\n  act(() => {\n    render(<Hello name=\"Jenny\" />, container);\n  });\n  expect(container.textContent).toBe(\"Hello, Jenny!\");\n\n  act(() => {\n    render(<Hello name=\"Margaret\" />, container);\n  });\n  expect(container.textContent).toBe(\"Hello, Margaret!\");\n});</code></pre>\n<hr>\n<h3 id=\"fetch-dữ-liệu-data-fetching\"><a href=\"#fetch-d%E1%BB%AF-li%E1%BB%87u-data-fetching\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Fetch dữ liệu {#data-fetching}</h3>\n<p>Thay vì gọi APIs thật trong test, chúng ta có thể giả lập các request này bằng dữ liệu giả. Giả lập dữ liệu với dữ liệu \"fake\" để tránh ảnh hưởng đến test khi backend không sử dụng được, và để nó chạy nhanh hơn. Lưu ý: bạn có thể muốn nó chạy danh sách các test con sử dụng framework <a href=\"/docs/testing-environments.html#end-to-end-tests-aka-e2e-tests\">\"end-to-end\"</a> để xem toàn bộ ứng dụng có làm việc với nhau không.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// user.js</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">User</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">,</span> setUser<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchUserData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchUserData</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\"loading...\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>details</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>summary</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>summary</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">age</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> years old\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      lives in </span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">address</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>details</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Bạn có thể viết test cho nó:</p>\n<pre class=\"language-jsx{23-33,44-45}\"><code class=\"language-jsx{23-33,44-45}\">// user.test.js\n\nimport React from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { act } from \"react-dom/test-utils\";\nimport User from \"./user\";\n\nlet container = null;\nbeforeEach(() => {\n  // cài đặt một DOM element như là target cho render\n  container = document.createElement(\"div\");\n  document.body.appendChild(container);\n});\n\nafterEach(() => {\n  // dọn dẹp lúc thoát\n  unmountComponentAtNode(container);\n  container.remove();\n  container = null;\n});\n\nit(\"renders user data\", async () => {\n  const fakeUser = {\n    name: \"Joni Baez\",\n    age: \"32\",\n    address: \"123, Charming Avenue\"\n  };\n\n  jest.spyOn(global, \"fetch\").mockImplementation(() =>\n    Promise.resolve({\n      json: () => Promise.resolve(fakeUser)\n    })\n  );\n\n  // sử dụng một phiên bản async để áp dụng resolved promise\n  await act(async () => {\n    render(<User id=\"123\" />, container);\n  });\n\n  expect(container.querySelector(\"summary\").textContent).toBe(fakeUser.name);\n  expect(container.querySelector(\"strong\").textContent).toBe(fakeUser.age);\n  expect(container.textContent).toContain(fakeUser.address);\n\n  // xóa giả lập để đảm bảo test chạy tách biệt\n  global.fetch.mockRestore();\n});</code></pre>\n<hr>\n<h3 id=\"giả-lập-các-module-mocking-modules\"><a href=\"#gi%E1%BA%A3-l%E1%BA%ADp-c%C3%A1c-module-mocking-modules\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giả lập các module {#mocking-modules}</h3>\n<p>Một vài module không làm việc tốt trong môi trường test, hoặc không cần thiết cho test đó. Giả lập các module này bằng dummy để dễ dàng test hơn phần code của chúng ta.</p>\n<p>Component <code class=\"language-text\">Contact</code> có nhúng một component third-party <code class=\"language-text\">GoogleMap</code>:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// map.js</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">LoadScript</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">GoogleMap</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-google-maps\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token known-class-name class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadScript</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script-loader<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">googleMapsApiKey</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>YOUR_API_KEY<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GoogleMap</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example-map<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">center</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">center</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">LoadScript</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// contact.js</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token known-class-name class-name\">Map</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./map\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Contact</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>address</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Contact </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> via</span><span class=\"token punctuation\">{</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"mailto:\"</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span><span class=\"token property-access\">email</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          email\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        or on their </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>site<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">site</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          website\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">.\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>address</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span></span> <span class=\"token attr-name\">center</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">center</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu không muốn load component <code class=\"language-text\">GoogleMap</code> trong test của chúng ta, giả lập bằng một dummy component và chạy test:</p>\n<pre class=\"language-jsx{10-18}\"><code class=\"language-jsx{10-18}\">// contact.test.js\n\nimport React from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { act } from \"react-dom/test-utils\";\n\nimport Contact from \"./contact\";\nimport MockedMap from \"./map\";\n\njest.mock(\"./map\", () => {\n  return function DummyMap(props) {\n    return (\n      <div data-testid=\"map\">\n        {props.center.lat}:{props.center.long}\n      </div>\n    );\n  };\n});\n\nlet container = null;\nbeforeEach(() => {\n  // cài đặt một DOM element như là target cho render\n  container = document.createElement(\"div\");\n  document.body.appendChild(container);\n});\n\nafterEach(() => {\n  // dọn dẹp lúc thoát\n  unmountComponentAtNode(container);\n  container.remove();\n  container = null;\n});\n\nit(\"should render contact information\", () => {\n  const center = { lat: 0, long: 0 };\n  act(() => {\n    render(\n      <Contact\n        name=\"Joni Baez\"\n        email=\"test@example.com\"\n        site=\"http://test.com\"\n        center={center}\n      />,\n      container\n    );\n  });\n\n  expect(\n    container.querySelector(\"[data-testid='email']\").getAttribute(\"href\")\n  ).toEqual(\"mailto:test@example.com\");\n\n  expect(\n    container.querySelector('[data-testid=\"site\"]').getAttribute(\"href\")\n  ).toEqual(\"http://test.com\");\n\n  expect(container.querySelector('[data-testid=\"map\"]').textContent).toEqual(\n    \"0:0\"\n  );\n});</code></pre>\n<hr>\n<h3 id=\"event-events\"><a href=\"#event-events\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Event {#events}</h3>\n<p>Chúng tôi khuyến nghị dispatch một event DOM thật trên DOM element, và đặt phần xác nhận kết quả. Xem một component <code class=\"language-text\">Toggle</code>:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// toggle.js</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Toggle</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousState</span> <span class=\"token arrow operator\">=></span> <span class=\"token operator\">!</span>previousState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        props<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>state <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"Turn off\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Turn on\"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta có thể viết test cho nó:</p>\n<pre class=\"language-jsx{13-14,35,43}\"><code class=\"language-jsx{13-14,35,43}\">// toggle.test.js\n\nimport React from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { act } from \"react-dom/test-utils\";\n\nimport Toggle from \"./toggle\";\n\nlet container = null;\nbeforeEach(() => {\n  // cài đặt một DOM element như là target cho render\n  container = document.createElement(\"div\");\n  // container *phải* được chèn vào document để event chạy đúng.\n  document.body.appendChild(container);\n});\n\nafterEach(() => {\n  // dọn dẹp lúc thoát\n  unmountComponentAtNode(container);\n  container.remove();\n  container = null;\n});\n\nit(\"changes value when clicked\", () => {\n  const onChange = jest.fn();\n  act(() => {\n    render(<Toggle onChange={onChange} />, container);\n  });\n\n  // lấy toàn bộ các element, và trigger một vài sự kiện click\n  const button = document.querySelector(\"[data-testid=toggle]\");\n  expect(button.innerHTML).toBe(\"Turn on\");\n\n  act(() => {\n    button.dispatchEvent(new MouseEvent(\"click\", { bubbles: true }));\n  });\n\n  expect(onChange).toHaveBeenCalledTimes(1);\n  expect(button.innerHTML).toBe(\"Turn off\");\n\n  act(() => {\n    for (let i = 0; i < 5; i++) {\n      button.dispatchEvent(new MouseEvent(\"click\", { bubbles: true }));\n    }\n  });\n\n  expect(onChange).toHaveBeenCalledTimes(6);\n  expect(button.innerHTML).toBe(\"Turn on\");\n});</code></pre>\n<p>Các event DOM và thuộc tính được mô tả trong <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a>. Lưu ý bạn phải truyền vào <code class=\"language-text\">{ bubbles: true }</code> trên từng event bạn tạo cho nó để đến React listener vì React tự động truyền các event này đến document.</p>\n<blockquote>\n<p>Lưu ý:</p>\n<p>React Testing Library cung cấp <a href=\"https://testing-library.com/docs/dom-testing-library/api-events\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">một số hàm hỗ trợ</a> cho việc bắn sự kiện.</p>\n</blockquote>\n<hr>\n<h3 id=\"timer-timers\"><a href=\"#timer-timers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Timer {#timers}</h3>\n<p>Code có thể sử dụng hàm liên quan thời gian như <code class=\"language-text\">setTimeout</code> để lên lịch các công việc sẽ thực hiện trong tương lai. Trong ví dụ, một cửa sổ nhiều lựa chọn đợi cho đến khi có lựa chọn, nếu sau 5 giây sẽ không thể chọn:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// card.js</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Card</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> timeoutID <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      props<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onSelect</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeoutID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">onSelect</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">choice</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n      <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>choice<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">data-testid</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>choice<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> props<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onSelect</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>choice<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta có thể viết test cho component bằng cách dùng <a href=\"https://jestjs.io/docs/en/timer-mocks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jest's timer mocks</a> và test sự khác nhau của state.</p>\n<pre class=\"language-jsx{7,31,37,49,59}\"><code class=\"language-jsx{7,31,37,49,59}\">// card.test.js\n\nimport React from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { act } from \"react-dom/test-utils\";\n\njest.useFakeTimers();\n\nlet container = null;\nbeforeEach(() => {\n  // cài đặt một DOM element như là target cho render\n  container = document.createElement(\"div\");\n  document.body.appendChild(container);\n});\n\nafterEach(() => {\n  // dọn dẹp lúc thoát\n  unmountComponentAtNode(container);\n  container.remove();\n  container = null;\n});\n\nit(\"should select null after timing out\", () => {\n  const onSelect = jest.fn();\n  act(() => {\n    render(<Card onSelect={onSelect} />, container);\n  });\n\n  // chạy đến lúc 100ms\n  act(() => {\n    jest.advanceTimersByTime(100);\n  });\n  expect(onSelect).not.toHaveBeenCalled();\n\n  // và chạy đến lúc 5 giây\n  act(() => {\n    jest.advanceTimersByTime(5000);\n  });\n  expect(onSelect).toHaveBeenCalledWith(null);\n});\n\nit(\"should cleanup on being removed\", () => {\n  const onSelect = jest.fn();\n  act(() => {\n    render(<Card onSelect={onSelect} />, container);\n  });\n\n  act(() => {\n    jest.advanceTimersByTime(100);\n  });\n  expect(onSelect).not.toHaveBeenCalled();\n\n  // unmount app\n  act(() => {\n    render(null, container);\n  });\n\n  act(() => {\n    jest.advanceTimersByTime(5000);\n  });\n  expect(onSelect).not.toHaveBeenCalled();\n});\n\nit(\"should accept selections\", () => {\n  const onSelect = jest.fn();\n  act(() => {\n    render(<Card onSelect={onSelect} />, container);\n  });\n\n  act(() => {\n    container\n      .querySelector(\"[data-testid='2']\")\n      .dispatchEvent(new MouseEvent(\"click\", { bubbles: true }));\n  });\n\n  expect(onSelect).toHaveBeenCalledWith(2);\n});</code></pre>\n<p>Bạn có thể giả lập thời gian trong một test. Ở trên, chúng ta bật lên bằng cách gọi <code class=\"language-text\">jest.useFakeTimers()</code>. Ưu điểm chính của chúng cho ta là test không cần thực sự đợi đến 5 giây để chạy, và bạn cũng không cần thay đổi component để phục vụ việc test.</p>\n<hr>\n<h3 id=\"snapshot-test-snapshot-testing\"><a href=\"#snapshot-test-snapshot-testing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Snapshot Test {#snapshot-testing}</h3>\n<p>Framework như Jest cho chúng ta lưu \"ảnh\" với <a href=\"https://jestjs.io/docs/en/snapshot-testing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">toMatchSnapshot</code> / <code class=\"language-text\">toMatchInlineSnapshot</code></a>. Với chúng, bạn có thể \"lưu\" một kết quả render và đảm bảo một thay đổi có thể làm thay đổi của kết quả snapshot.</p>\n<p>Trong ví dụ, chúng ta render một component và định dạng HTML đã render với thư viện <a href=\"https://www.npmjs.com/package/pretty\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">pretty</code></a>, trước khi lưu nó như một snapshot inline:</p>\n<pre class=\"language-jsx{29-31}\"><code class=\"language-jsx{29-31}\">// hello.test.js, again\n\nimport React from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { act } from \"react-dom/test-utils\";\nimport pretty from \"pretty\";\n\nimport Hello from \"./hello\";\n\nlet container = null;\nbeforeEach(() => {\n  // cài đặt một DOM element như là target cho render\n  container = document.createElement(\"div\");\n  document.body.appendChild(container);\n});\n\nafterEach(() => {\n  // dọn dẹp lúc thoát\n  unmountComponentAtNode(container);\n  container.remove();\n  container = null;\n});\n\nit(\"should render a greeting\", () => {\n  act(() => {\n    render(<Hello />, container);\n  });\n\n  expect(\n    pretty(container.innerHTML)\n  ).toMatchInlineSnapshot(); /* ... được tự động điền bởi jest ... */\n\n  act(() => {\n    render(<Hello name=\"Jenny\" />, container);\n  });\n\n  expect(\n    pretty(container.innerHTML)\n  ).toMatchInlineSnapshot(); /* ... được tự động điền bởi jest ... */\n\n  act(() => {\n    render(<Hello name=\"Margaret\" />, container);\n  });\n\n  expect(\n    pretty(container.innerHTML)\n  ).toMatchInlineSnapshot(); /* ... được tự động điền bởi jest ... */\n});</code></pre>\n<p>Thường sẽ tốt hơn nếu chỉ rõ kết quả muốn nhận được thay vì snapshot. Những kiểu test này bao gồm phần hiện thực chi tiết để chúng dễ dàng bị fail. Chọn <a href=\"#mocking-modules\">giả lập một vài component con</a> có thể giúp giảm kích thước snapshot và giữ chúng dễ độc lúc review code.</p>\n<hr>\n<h3 id=\"multiple-renderer-multiple-renderers\"><a href=\"#multiple-renderer-multiple-renderers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Multiple Renderer {#multiple-renderers}</h3>\n<p>Trong những tình huống hiếm, bạn có thể chạy một test trên một component sử dụng multiple renderer. Lấy ví dụ, bạn có thể chạy snapshot test trên một component với <code class=\"language-text\">react-test-renderer</code>, bên trong đó nó dùng <code class=\"language-text\">ReactDOM.render</code>trong một child component để render một vài nội dung. Tình huống đó, bạn có thể wrap phần cập nhập với <code class=\"language-text\">act()</code> ứng với từng renderer</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> act <span class=\"token keyword module\">as</span> domAct <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> act <span class=\"token keyword module\">as</span> testAct<span class=\"token punctuation\">,</span> create <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-test-renderer\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">let</span> root<span class=\"token punctuation\">;</span>\n<span class=\"token function\">domAct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">testAct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    root <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<hr>\n<h3 id=\"còn-thiếu-gì-đó-something-missing\"><a href=\"#c%C3%B2n-thi%E1%BA%BFu-g%C3%AC-%C4%91%C3%B3-something-missing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Còn thiếu gì đó? {#something-missing}</h3>\n<p>Nếu các tình huống hay gặp không được đề cập ở đây, có thể liên hệ với chúng tôi qua <a href=\"https://github.com/reactjs/reactjs.org/issues\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">issue tracker</a> cho toàn bộ tài liệu của website</p>\n","cover_image":""}},{"node":{"id":"349aadd0da40a81b9f8c94db06172ce3","title":"Sử dụng useReducer và useContext để làm global state","path":"/su-dung-use-reducer-va-use-context-de-lam-global-state/","date":"2020-01-08","timeToRead":3,"desc":"","content":"<p>Thông thường chúng ta sẽ dùng một <em>nhà kho</em> để chứa dữ liệu <code class=\"language-text\">state</code> như <em>Redux</em>, một component container bọc ở nút đầu tiên trong app, các component con bên trong có thể truy xuất và cập nhập các dữ liệu một cách dễ dàng</p>\n<p>Với các API mới được React bổ sung là <code class=\"language-text\">useState</code>, <code class=\"language-text\">createContext</code>, <code class=\"language-text\">useContext</code> chúng ta có <em>thêm một lựa chọn</em> để làm <em>nhà kho</em> mà ko cần dùng đến Redux</p>\n<p>Ví dụ chúng ta có 3 dữ liệu như bên dưới</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> teamMembersNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mary\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jason\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"David\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>sharing<span class=\"token punctuation\">,</span> setSharing<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>help<span class=\"token punctuation\">,</span> setHelp<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>pairing<span class=\"token punctuation\">,</span> setPairing<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span>teamMembersNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Câu hỏi là làm sao chúng ta đưa dữ liệu vào <em>nhà kho</em>. Chúng ta sẽ dùng API <code class=\"language-text\">createContext</code> (tạo em cái kho)</p>\n<p>Khi sử dụng <code class=\"language-text\">React.createContext</code> chúng ta sẽ nhận về 2 component là <code class=\"language-text\">Provider</code> (anh tung) và <code class=\"language-text\">Consumer</code> (em hứng).</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./src/utils/store.js</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">StoreContext</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// các em đã vào nhà kho</span>\n  <span class=\"token keyword\">const</span> teamMembersNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mary\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jason\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"David\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>sharing<span class=\"token punctuation\">,</span> setSharing<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>help<span class=\"token punctuation\">,</span> setHelp<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>pairing<span class=\"token punctuation\">,</span> setPairing<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span>teamMembersNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    sharing<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>sharing<span class=\"token punctuation\">,</span> setSharing<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    help<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>help<span class=\"token punctuation\">,</span> setHelp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    pairing<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>pairing<span class=\"token punctuation\">,</span> setPairing<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StoreContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StoreContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Để các component bên trong <code class=\"language-text\">&lt;App/&gt;</code> đều dùng được <code class=\"language-text\">&lt;Consumer /&gt;</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ./index.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ReactDOM</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./App\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">StoreProvider</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./utils/store\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token maybe-class-name\">ReactDOM</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StoreProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StoreProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Với bất kỳ component nào muốn sử dụng, để lấy được dữ liệu trong store, chúng ta sử dụng <code class=\"language-text\">useContext</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">StoreContext</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../utils/store\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">SomeComponent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// dữ liệu dùng chung</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> sharing <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useContext</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">StoreContext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Hoặc nếu thích dùng cách viết render props, có thể dùng luôn component <code class=\"language-text\">&lt;Consumer/&gt;</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StoreContext.Consumer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">InputComponent</span></span> <span class=\"token attr-name\">store</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StoreContext.Consumer</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"ứng-dụng-làm-useauth\"><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng-l%C3%A0m-useauth\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ứng dụng làm <code class=\"language-text\">useAuth</code></h2>\n<p>Một trong những ví dụ dễ thấy, phần dữ liệu nên đưa vào <em>nhà kho chung</em> là phần thông tin user đang đăng nhập</p>\n<p>Chúng ta sẽ cần 3 phần</p>\n<ol>\n<li>Khai báo một nhà kho bằng <code class=\"language-text\">createContext</code></li>\n<li>Bộ <code class=\"language-text\">reducer</code> làm nhiệm vụ cập nhập xử lý <code class=\"language-text\">state</code></li>\n<li>Một hook tùy biến <code class=\"language-text\">useAuth</code> cung cấp các API cần thiết để tương tác với <em>nhà kho chung</em> đã khai báo</li>\n</ol>\n<p>1) <strong>AuthProvider.js</strong> Khai báo nhà kho (bản rút gọn)</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// AuthProvider.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">authReducer</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"authReducer\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">AuthContext</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">AuthProvider</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// khởi tạo</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>authReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AuthContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AuthContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<ol start=\"2\">\n<li><strong>authReducer.js</strong> (bản rút gọn)</li>\n</ol>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// authReducer.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">authReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"login\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> authResult<span class=\"token punctuation\">,</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> expiresAt <span class=\"token operator\">=</span> authResult<span class=\"token punctuation\">.</span><span class=\"token property-access\">expiresIn</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"expires_at\"</span><span class=\"token punctuation\">,</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>expiresAt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">,</span> expiresAt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"logout\"</span><span class=\"token operator\">:</span>\n      <span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"expires_at\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> expiresAt<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ol start=\"3\">\n<li>Một hook tùy biến <strong><code class=\"language-text\">useAuth</code></strong></li>\n</ol>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// useAuth.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">AuthProvider</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"AuthProvider\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useAuth</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">,</span> dispatch <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">userContext</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">AuthContext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">login</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// làm gì đó ở đây</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// làm gì đó ở đây</span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"logout\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...  còn một số thức khác</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isAuthenticated</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">expiresAt</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">expiresAt</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...  còn một số thức khác</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n        isAuthenticated<span class=\"token punctuation\">,</span>\n        user<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span><span class=\"token punctuation\">,</span>\n        userId<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span> <span class=\"token operator\">?</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span> <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n        login<span class=\"token punctuation\">,</span>\n        logout<span class=\"token punctuation\">,</span>\n        handleAuthentication\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Với cách làm này, bất kỳ component nào sử dụng <code class=\"language-text\">useAuth</code> đều sẽ truy xuất đến một kho dữ liệu <em>chung</em></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">useAuth</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"useAuth\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">MyCom</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* quá trời thứ linh tinh trả về */</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useAuth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><a href=\"https://swizec.com/blog/usereducer-usecontext-for-easy-global-state-without-libraries/swizec/9182\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">useReducer + useContext for easy global state without libraries</a></p>\n<p><a href=\"https://dev.to/nazmifeeroz/using-usecontext-and-usestate-hooks-as-a-store-mnm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using useContext and useState hooks as a store</a></p>\n","cover_image":""}},{"node":{"id":"e48f241d053eb1fd1df12d270dc6c371","title":"Khi nào nên sử dụng useLayoutEffect thay vì useEffect","path":"/khi-nao-nen-su-dung-use-layout-effect-thay-vi-use-effect/","date":"2020-01-02","timeToRead":2,"desc":"2 React Hook làm nhiệm vụ khá giống nhau là useEffect và useLayoutEffect bạn đã biết cách sử dụng thế nào cho đúng","content":"<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// thực hiện side effect</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token comment\">/* dọn rác */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>khai báo các giá trị mà nó phụ thuộc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// thực hiện side effect</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token comment\">/* dọn rác */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>thực hiện side effect<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu ko có khác nhau thì React team sẽ không tạo ra 2 thằng, hiển nhiên?. (Hầu như có thể dụng <code class=\"language-text\">useEffect</code> trong mọi tình huống)</p>\n<p>Khác nhau là ở <strong>THỜI GIAN THỰC HIỆN</strong></p>\n<p><code class=\"language-text\">useEffect</code> chạy <strong>bất tuần tự</strong> và đợi <strong>sau</strong> khi việc component đã xuất hiện trên màn hình (sau khi trình duyệt <em>paint</em>)</p>\n<p>Quá trình cụ thế là thế này</p>\n<ol>\n<li>Component gọi đến <code class=\"language-text\">render</code></li>\n<li>Màn hình cập nhập lại UI mới</li>\n<li><strong>SAU ĐÓ</strong> chạy <code class=\"language-text\">useEffect</code></li>\n</ol>\n<p><code class=\"language-text\">useLayoutEffect</code>, ngược lại, chạy <strong>tuần tự</strong> sau khi render nhưng là <strong>trước</strong> khi UI cập nhập</p>\n<p>Quá trình</p>\n<ol>\n<li>Component gọi đến <code class=\"language-text\">render</code></li>\n<li><code class=\"language-text\">useLayoutEffect</code> được gọi, đợi chạy xong mới đi tiếp</li>\n<li>Màn hình cập nhập lại UI mới</li>\n</ol>\n<p>Trong 99% các trường hợp, sử dụng <code class=\"language-text\">useEffect</code>  sẽ là cách tốt nhất, vì những effect của chúng ta sẽ cần đồng bộ với prop, state, không cần xảy ra <strong>NGAY LẬP TỨC</strong> và không ảnh hưởng đến kết quả cuối cùng của UI.</p>\n<p>Ví dụ như fetch dữ liệu sẽ không cần có kết quả ngay lập tức, hay đặt để các event handler</p>\n<p>Nếu thấy UI bị <code class=\"language-text\">flickering</code> (giống như xuất hiện sọc sọc trên màn hình tivi) khi cập nhập, nguyên nhân do nó đã render khi <em>vừa có</em> state, sau đó lại re-render lại với state nhận được sau cùng. Đó là lúc bạn dùng <code class=\"language-text\">useLayoutEffect</code></p>\n<p>Ví dụ nhé, bạn cho user click để thay đổi state <code class=\"language-text\">value</code>, nó sẽ re-render component, sau đó effect chạy, nó lại set giá trị <code class=\"language-text\">value</code> thành một con số ngẫu nhiên => lại re-render component.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  useState<span class=\"token punctuation\">,</span>\n  useLayoutEffect\n<span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ReactDOM</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">BlinkyRender</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'render'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      value: </span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span> <span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token maybe-class-name\">ReactDOM</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BlinkyRender</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Với cách dùng <code class=\"language-text\">useLayoutEffect</code> chúng ta chỉ cập nhập UI đúng <strong>1</strong> lần, trong khi component gọi render <strong>2</strong> lần.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://daveceddia.com/useeffect-vs-uselayouteffect/\">📜 When to useLayoutEffect Instead of useEffect</a></p>\n","cover_image":""}},{"node":{"id":"c3b0c1585f2bb1dbf4887da537c56854","title":"Chỉ dẫn viết Redux sao cho chuẩn","path":"/chi-dan-viet-redux-sao-cho-chuan/","date":"2020-01-01","timeToRead":12,"desc":"Đây không phải là quan điểm cá nhân, bài viết được dịch thuật từ tài liệu chính thức của Redux","content":"<!-- TOC -->\n<ul>\n<li>\n<p><a href=\"#a-b%E1%BA%AFt-bu%E1%BB%99c\">A. Bắt buộc</a></p>\n<ul>\n<li><a href=\"#ko-mutate-state\">Ko mutate state</a></li>\n<li><a href=\"#reducer-ko-%C4%91%C6%B0%E1%BB%A3c-c%C3%B3-side-effect\">Reducer ko được có side effect</a></li>\n<li><a href=\"#kh%C3%B4ng-%C4%91%C6%B0a-c%C3%A1c-gi%C3%A1-tr%E1%BB%8B-non-serialize-v%C3%A0o-trong-action-v%C3%A0-state\">Không đưa các giá trị Non-Serialize vào trong action và state</a></li>\n<li><a href=\"#ch%E1%BB%89-m%E1%BB%99t-redux-store-cho-app\">Chỉ một Redux store cho app</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#b-c%E1%BB%B1c-k%E1%BB%B3-khuy%E1%BA%BFn-kh%C3%ADch\">B. Cực kỳ khuyến khích</a></p>\n<ul>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-redux-toolkit-%C4%91%E1%BB%83-vi%E1%BA%BFt-redux-logic\">Sử dụng Redux Toolkit để viết Redux logic</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-immer-%C4%91%E1%BB%83-c%E1%BA%ADp-nh%E1%BA%ADp-gi%C3%A1-tr%E1%BB%8B-store\">Sử dụng Immer để cập nhập giá trị store</a></li>\n<li><a href=\"#c%E1%BA%A5u-tr%C3%BAc-file-v%C3%A0-th%C6%B0-m%E1%BB%A5c\">Cấu trúc file và thư mục</a></li>\n<li><a href=\"#%C4%91%C6%B0a-c%C3%A0ng-nhi%E1%BB%81u-logic-v%C3%A0-trong-reducer-c%C3%A0ng-t%E1%BB%91t\">Đưa càng nhiều logic và trong reducer càng tốt</a></li>\n<li><a href=\"#reducer-c%E1%BA%A7n-n%E1%BA%AFm-r%C3%B5-c%E1%BA%A5u-tr%C3%BAc-c%E1%BB%A7a-state\">Reducer cần nắm rõ cấu trúc của state</a></li>\n<li><a href=\"#%C4%91%E1%BA%B7t-t%C3%AAn-state-d%E1%BB%B1a-tr%C3%AAn-d%E1%BB%AF-li%E1%BB%87u-s%E1%BA%BD-l%C6%B0u\">Đặt tên state dựa trên dữ liệu sẽ lưu</a></li>\n<li><a href=\"#xem-reducer-nh%C6%B0-m%E1%BB%99t-c%E1%BB%97-m%C3%A1y-ch%E1%BB%A9a-v%C3%A0-v%E1%BA%ADn-h%C3%A0nh-state\">Xem reducer như một cỗ máy chứa và vận hành state</a></li>\n<li><a href=\"#%C4%91%C6%A1n-gi%E1%BA%A3n-h%C3%B3a-c%C3%A1c-state-ch%E1%BB%93ng-ch%C3%A9oc%C3%B3-quan-h%E1%BB%87-v%E1%BB%9Bi-nhau\">Đơn giản hóa các state chồng chéo/có quan hệ với nhau</a></li>\n<li><a href=\"#c%C3%A1c-action-n%C3%AAn-t%E1%BB%95-ch%E1%BB%A9c-nh%C6%B0-event-kh%C3%B4ng-ph%E1%BA%A3i-setter\">Các action nên tổ chức như event, không phải setter</a></li>\n<li><a href=\"#vi%E1%BA%BFt-t%C3%AAn-action-c%C3%B3-ngh%C4%A9a\">Viết tên action có nghĩa</a></li>\n<li><a href=\"#tr%C3%A1nh-dispatch-c%C3%A1c-action-m%E1%BB%99t-c%C3%A1ch-tu%E1%BA%A7n-t%E1%BB%B1\">Tránh dispatch các action một cách tuần tự</a></li>\n<li><a href=\"#k%E1%BA%BFt-n%E1%BB%91i-c%C3%A0ng-nhi%E1%BB%81u-component-%C4%91%E1%BB%83-%C4%91%E1%BB%8Dc-d%E1%BB%AF-li%E1%BB%87u-trong-store\">Kết nối càng nhiều component để đọc dữ liệu trong store</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1ch-vi%E1%BA%BFt-t%E1%BA%AFt-cho-mapdispatch-khi-d%C3%B9ng-connect\">Sử dụng cách viết tắt cho <code class=\"language-text\">mapDispatch</code> khi dùng <code class=\"language-text\">connect</code></a></li>\n<li><a href=\"#g%E1%BB%8Di-useselector-nhi%E1%BB%81u-l%E1%BA%A7n-trong-function-component\">Gọi <code class=\"language-text\">useSelector</code> nhiều lần trong function component</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-redux-devtools\">Sử dụng Redux DevTools</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#khuy%E1%BA%BFn-kh%C3%ADch\">Khuyến khích</a></p>\n<ul>\n<li><a href=\"#gi%C3%A1-tr%E1%BB%8B-type-c%E1%BB%A7a-action-n%C3%AAn-l%C3%A0-domaineventname\">Giá trị type của action nên là <code class=\"language-text\">domain/eventName</code></a></li>\n<li><a href=\"#vi%E1%BA%BFt-action-s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1ch-%C4%91%E1%BA%B7t-t%C3%AAn-chu%E1%BA%A9n-c%E1%BB%A7a-flux\">Viết action sử dụng cách đặt tên chuẩn của Flux</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-action-creator\">Sử dụng action creator</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-thunk-cho-c%C3%A1c-logic-async\">Sử dụng Thunk cho các logic async</a></li>\n<li><a href=\"#t%C3%A1ch-c%C3%A1c-logic-ph%E1%BB%A9c-t%E1%BA%A1p-ra-kh%E1%BB%8Fi-component\">Tách các logic phức tạp ra khỏi component</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-selector-function-%C4%91%E1%BB%83-%C4%91%E1%BB%8Dc-d%E1%BB%AF-li%E1%BB%87u-trong-store\">Sử dụng selector function để đọc dữ liệu trong store</a></li>\n<li><a href=\"#tr%C3%A1nh-%C4%91%C6%B0a-state-c%E1%BB%A7a-form-v%C3%A0o-trong-redux\">Tránh đưa state của form vào trong redux</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<p>Tài liệu chính thức hướng dẫn viết redux sao cho ngon-sạch, bao gồm những cách làm được đề nghị, kinh nghiệm thực tế và những cách tiếp cận được khuyến khích.</p>\n<p>Cả phần core của Redux và các tài liệu của Redux không hề là chuẩn mực bắt buộc mọi người tuân thủ, có rất nhiều cách để sử dụng Redux, cũng như có rất nhiều cách làm <em>đúng</em> để giải quyết một vấn đề.</p>\n<h2 id=\"a-bắt-buộc\"><a href=\"#a-b%E1%BA%AFt-bu%E1%BB%99c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A. Bắt buộc</h2>\n<h3 id=\"ko-mutate-state\"><a href=\"#ko-mutate-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ko mutate state</h3>\n<p>Chỉnh sửa state là nguyên nhân gây bug thường thấy trong Redux, như không re-render, time-travel trong Redux DevTools ko hoạt động. Tuyệt đối <strong>KO tự chỉnh sửa giá trị của state</strong>, bao gồm cả trong reducer và bất kỳ chỗ nào trong source code, chỉ được phép <strong>thay thế giá trị của state</strong></p>\n<p>Có thể sử dụng những công cụ như <a href=\"https://github.com/leoasis/redux-immutable-state-invariant\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">redux-immutable-state-invariant</a>, <a href=\"https://immerjs.github.io/immer/docs/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">immer</a> để tránh việc vô tình chỉnh sửa state ngoài ý muốn.</p>\n<h3 id=\"reducer-ko-được-có-side-effect\"><a href=\"#reducer-ko-%C4%91%C6%B0%E1%BB%A3c-c%C3%B3-side-effect\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reducer ko được có side effect</h3>\n<p>Các hàm Reducer chỉ phụ thuộc vào <code class=\"language-text\">state</code> và <code class=\"language-text\">action</code>, chỉ tính toán và trả về giá trị mới dựa vào những tham số này. <strong>Không chạy bất kỳ logic bất đồng bộ nào (AJAX, timeout, promise), các giá trị khởi tạo một cách ngẫu nhiên Date.now, Math.random, thay đổi những giá trị bên ngoài reducer</strong></p>\n<h3 id=\"không-đưa-các-giá-trị-non-serialize-vào-trong-action-và-state\"><a href=\"#kh%C3%B4ng-%C4%91%C6%B0a-c%C3%A1c-gi%C3%A1-tr%E1%BB%8B-non-serialize-v%C3%A0o-trong-action-v%C3%A0-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Không đưa các giá trị Non-Serialize vào trong action và state</h3>\n<p><strong>Tránh dùng các giá trị non-serialize như Promise, Symbol, function, class instance vào trong state hoặc dispatch action.</strong> Điều này còn nhằm đảm bảo các công như Redux DevTool chạy đúng</p>\n<h3 id=\"chỉ-một-redux-store-cho-app\"><a href=\"#ch%E1%BB%89-m%E1%BB%99t-redux-store-cho-app\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chỉ một Redux store cho app</h3>\n<p>Với một ứng dụng, <strong>chỉ được sử dụng một Redux store, sử dụng bởi toàn bộ ứng dụng</strong>, khai báo trong file <code class=\"language-text\">store.js</code></p>\n<p>Cũng không có một chỗ nào trong source được import store trực tiếp. Nó phải được truyền vào <code class=\"language-text\">&lt;Provider/&gt;</code>, hoặc tham chiếu thông qua middleware như Thunk.</p>\n<h2 id=\"b-cực-kỳ-khuyến-khích\"><a href=\"#b-c%E1%BB%B1c-k%E1%BB%B3-khuy%E1%BA%BFn-kh%C3%ADch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>B. Cực kỳ khuyến khích</h2>\n<h3 id=\"sử-dụng-redux-toolkit-để-viết-redux-logic\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-redux-toolkit-%C4%91%E1%BB%83-vi%E1%BA%BFt-redux-logic\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Redux Toolkit để viết Redux logic</h3>\n<p><a href=\"https://redux.js.org/redux-toolkit/overview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redux Toolkit</a> là bộ công cụ chính thức của chúng tôi (Redux team) để phát triển redux một cách hiệu quả, chuẩn để viết logic redux của chúng tôi.</p>\n<p>Nó bao gồm các hàm để làm việc với các trường hợp phổ biến nhất của Redux, bao gồm cài đặt store, khai báo reducer, các thư viện được sử dụng rộng rãi trong Redux như Redux Thunk, Reselect để viết các selector function.</p>\n<h3 id=\"sử-dụng-immer-để-cập-nhập-giá-trị-store\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-immer-%C4%91%E1%BB%83-c%E1%BA%ADp-nh%E1%BA%ADp-gi%C3%A1-tr%E1%BB%8B-store\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Immer để cập nhập giá trị store</h3>\n<p>Viết update cho store đôi khi rất mệt mỏi, có thể sử dụng thêm công cụ hỗ trợ <a href=\"https://immerjs.github.io/immer/docs/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">immerjs</a>.</p>\n<h3 id=\"cấu-trúc-file-và-thư-mục\"><a href=\"#c%E1%BA%A5u-tr%C3%BAc-file-v%C3%A0-th%C6%B0-m%E1%BB%A5c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cấu trúc file và thư mục</h3>\n<p>Về cơ bản Redux <em>không quan tâm cách bạn tổ chức file và thư mục</em>. Tuy nhiên, trong thực tế việc đặt các logic gần nhau giúp việc cập nhập code nhanh hơn.</p>\n<p>Khuyến khích sử dụng cách tiếp cận \"feature folder\" hoặc <a href=\"https://github.com/erikras/ducks-modular-redux\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cách làm ducks</a> (tất cả những logic cho feature nằm trong một file duy nhất)</p>\n<p>Một cấu trúc thư mục cơ bản sẽ gồm</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">-/src\n--/index.tsx\n--/app\n---/store.ts\n---/rootReducer.ts\n---/App.tsx\n--/common\n--/features\n---/todos\n----/todosSlice.ts\n----/Todos.tsx</code></pre>\n<h3 id=\"đưa-càng-nhiều-logic-và-trong-reducer-càng-tốt\"><a href=\"#%C4%91%C6%B0a-c%C3%A0ng-nhi%E1%BB%81u-logic-v%C3%A0-trong-reducer-c%C3%A0ng-t%E1%BB%91t\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đưa càng nhiều logic và trong reducer càng tốt</h3>\n<p>Nếu có thể, cố gắng đưa càng nhiều logic hoặc tính toán để có một state mới vào trong reducer càng tốt, không nên đưa vào chỗ xử lý tiền dữ liệu như các function handler click. Việc này giúp logic dễ test hơn, tránh lỗi.</p>\n<p>Redux không thực sự quan tâm giá trị mới của state được tính toán bên trong reducer hay trong action creation. Ví dụ như Todo App, việc <em>toggle todo</em> sẽ cập nhập lại mảng <code class=\"language-text\">todos</code> trong store. Có thể tính toán mảng <code class=\"language-text\">todos</code> mới ở cả action và reducer</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Click handler:</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onTodoClicked</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">\"todos/toggleTodo\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// tính toán ở Reducer:</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"todos/toggleTodo\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">!==</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">payload</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> todo<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span>todo<span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">payload</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Tính toán ở action creation:</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onTodoClicked</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">id</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newTodos <span class=\"token operator\">=</span> todos<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> todo\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>todo<span class=\"token punctuation\">,</span> id <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'todos/toggleTodo'</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> todos<span class=\"token operator\">:</span> newTodos <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Reducer:</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"todos/toggleTodo\"</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword control-flow\">return</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">payload</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">todos</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Khuyến khích làm việc này ở reducer vì những nguyên nhân sau</p>\n<ul>\n<li>Test ở Reducer sẽ dễ hơn vì nó là pure function, chỉ cần gọi <code class=\"language-text\">const result = reducer(testState, action)</code> và đưa vào kết quả bạn expect.</li>\n<li>Thay đổi giá trị state luôn tuân theo quy định, không chỉnh sửa-chỉ thay thế. Rõ ràng là việc này sẽ trực quan hơn trong reducer, những nếu ngoài reducer, chúng ta dễ vô tình chỉnh sửa ngoài ý muốn</li>\n<li>Time-travel debug cho phép chúng ta <strong>undo</strong> một dispatch action, rồi <strong>redo</strong> thậm chí thay thế bằng một action khác. Debug sẽ dễ hơn nếu chúng ta đưa logic đó vào reducer</li>\n<li>Khi áp dụng nguyên tắc này, chúng biết được khi cần thay đổi, và nơi state bị thay đổi chắc chắn là trong reducer chứ không đâu khác.</li>\n</ul>\n<p>Có những ngoại lệ có thể tính toán trước, như khởi tạo một ID, nhưng nên tránh là tốt nhất.</p>\n<h3 id=\"reducer-cần-nắm-rõ-cấu-trúc-của-state\"><a href=\"#reducer-c%E1%BA%A7n-n%E1%BA%AFm-r%C3%B5-c%E1%BA%A5u-tr%C3%BAc-c%E1%BB%A7a-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reducer cần nắm rõ cấu trúc của state</h3>\n<p>Các reducer do bạn viết, khi trả về một giá trị đã tính toán của state, phải viết cụ thể là trả về giá trị gì, tránh sử dụng <em>spread/blind return</em> như sau <code class=\"language-text\">return action.payload</code> (blind return), <code class=\"language-text\">return {...state, ...action.payload}</code> (spread return). Vì như vậy, nó sẽ phụ thuộc giá trị truyền vào lúc dispatch action phải đúng với cấu trúc ban đầu. Nếu vô tình dữ liệu này không đúng cấu trúc sẽ có bug.</p>\n<h3 id=\"đặt-tên-state-dựa-trên-dữ-liệu-sẽ-lưu\"><a href=\"#%C4%91%E1%BA%B7t-t%C3%AAn-state-d%E1%BB%B1a-tr%C3%AAn-d%E1%BB%AF-li%E1%BB%87u-s%E1%BA%BD-l%C6%B0u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đặt tên state dựa trên dữ liệu sẽ lưu</h3>\n<p>Object truyền vào cho <code class=\"language-text\">combineReducers</code> sẽ là tên key trả về trong state. Tránh sử dụng từ <code class=\"language-text\">reducer</code> ,</p>\n<p>Ko nên có một object state như thế này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>usersReducer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> postsReducer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n<p>Nên</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>users<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> posts<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"xem-reducer-như-một-cỗ-máy-chứa-và-vận-hành-state\"><a href=\"#xem-reducer-nh%C6%B0-m%E1%BB%99t-c%E1%BB%97-m%C3%A1y-ch%E1%BB%A9a-v%C3%A0-v%E1%BA%ADn-h%C3%A0nh-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xem reducer như một cỗ máy chứa và vận hành state</h3>\n<p>Rất nhiều reducer của redux được viết một cách không ràng buộc như thế này, kiểm tra action, tính toán giá trị state mới mà không hề phụ thuộc tới state hiện tại. Có những trường hợp giá trị của một state phụ thuộc vào giá trị state khác, nếu không kiểm tra trước khi cập nhập, có thể dẫn đến bug</p>\n<h3 id=\"đơn-giản-hóa-các-state-chồng-chéocó-quan-hệ-với-nhau\"><a href=\"#%C4%91%C6%A1n-gi%E1%BA%A3n-h%C3%B3a-c%C3%A1c-state-ch%E1%BB%93ng-ch%C3%A9oc%C3%B3-quan-h%E1%BB%87-v%E1%BB%9Bi-nhau\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đơn giản hóa các state chồng chéo/có quan hệ với nhau</h3>\n<p>Rất nhiều ứng dụng cần cache các dữ liệu phức tạp trong store, dữ liệu thường có quan hệ chồng chéo trong API và phụ thuộc vào nhiều entities khác nhau (như quan hệ giữa dữ liệu Users, Posts, Comments)</p>\n<p>Khuyến khích nên lưu dữ liệu trong store ở dạng <a href=\"https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">căn bản nhất</a>. Như vậy khi nhìn vào có thể dễ dàng biết được dựa vào ID của chúng</p>\n<h3 id=\"các-action-nên-tổ-chức-như-event-không-phải-setter\"><a href=\"#c%C3%A1c-action-n%C3%AAn-t%E1%BB%95-ch%E1%BB%A9c-nh%C6%B0-event-kh%C3%B4ng-ph%E1%BA%A3i-setter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các action nên tổ chức như event, không phải setter</h3>\n<p>Chúng ta có thể truyền bất cứ giá trị gì cho <code class=\"language-text\">action.type</code>, thí dụ như <code class=\"language-text\">&quot;users/update&quot;</code>, <code class=\"language-text\">&quot;users/updated&quot;</code>, <code class=\"language-text\">&quot;upload/progress&quot;</code>, <code class=\"language-text\">&quot;users/setUserName&quot;</code>. Không sai nhưng khuyến khích nên diễn tả các <code class=\"language-text\">action.type</code> này như một event, hơn là các <code class=\"language-text\">setter</code> như vậy. Nếu diễn đạt theo kiểu setter như vậy thường dẫn tới quá nhiều action type, quá nhiều dispatcher</p>\n<h3 id=\"viết-tên-action-có-nghĩa\"><a href=\"#vi%E1%BA%BFt-t%C3%AAn-action-c%C3%B3-ngh%C4%A9a\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Viết tên action có nghĩa</h3>\n<p><code class=\"language-text\">action.type</code> phục vụ 2 mục đích</p>\n<ul>\n<li>reducer sẽ kiểm tra giá trị type để tính toán</li>\n<li>hiển thị trên công cụ redux devtool để chúng ta theo dõi</li>\n</ul>\n<p>Tiếp cận action như cơ chế <strong>event</strong>, tên này này không cần ràng buộc với một trường cụ thể nào trong store, đặt tên sao để khi đọc vào chúng ta có thể hiểu được chuyện gì đang diễn ra trên ứng dụng (thông qua công cụ redux devtool). Tránh những cái tên quá chung chung như <code class=\"language-text\">SET_DATA</code> hay <code class=\"language-text\">UPDATE_STORE</code>.</p>\n<h3 id=\"tránh-dispatch-các-action-một-cách-tuần-tự\"><a href=\"#tr%C3%A1nh-dispatch-c%C3%A1c-action-m%E1%BB%99t-c%C3%A1ch-tu%E1%BA%A7n-t%E1%BB%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tránh dispatch các action một cách tuần tự</h3>\n<p>Tránh <code class=\"language-text\">dispatch</code> nhiều action cùng lúc để thực hiện một tác vụ nào đó. Không sai, nhưng kết quả là việc update UI rất tiêu tốn công sức của trình duyệt, đôi khi có những state không truy xuất được ở một vài logic.</p>\n<h3 id=\"kết-nối-càng-nhiều-component-để-đọc-dữ-liệu-trong-store\"><a href=\"#k%E1%BA%BFt-n%E1%BB%91i-c%C3%A0ng-nhi%E1%BB%81u-component-%C4%91%E1%BB%83-%C4%91%E1%BB%8Dc-d%E1%BB%AF-li%E1%BB%87u-trong-store\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết nối càng nhiều component để đọc dữ liệu trong store</h3>\n<p>Càng nhiều component kết nối vào store sẽ giúp hiệu năng update UI cải thiện, do biết được component nào cần và không cần update.</p>\n<p>Có thể kết nối bằng <code class=\"language-text\">connect</code> hoặc <code class=\"language-text\">useSelector</code></p>\n<h3 id=\"sử-dụng-cách-viết-tắt-cho-mapdispatch-khi-dùng-connect\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1ch-vi%E1%BA%BFt-t%E1%BA%AFt-cho-mapdispatch-khi-d%C3%B9ng-connect\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng cách viết tắt cho <code class=\"language-text\">mapDispatch</code> khi dùng <code class=\"language-text\">connect</code></h3>\n<p><a href=\"https://react-redux.js.org/using-react-redux/connect-mapdispatch#defining-mapdispatchtoprops-as-an-object\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sử dụng cách viết tắt cho <code class=\"language-text\">mapDispatch</code> khi dùng <code class=\"language-text\">connect</code></a> nhằm đơn giản hóa code. Gần như chưa bao giờ cần phải viết <code class=\"language-text\">mapDispatch</code> như một function.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">,</span> decrement<span class=\"token punctuation\">,</span> reset<span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./counterActions\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Redux tự động dùng dispatch</span>\n<span class=\"token comment\">// khi bạn truyền vào là một object</span>\n<span class=\"token keyword\">const</span> actionCreators <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  increment<span class=\"token punctuation\">,</span>\n  decrement<span class=\"token punctuation\">,</span>\n  reset\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapState<span class=\"token punctuation\">,</span> actionCreators<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Counter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// or</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  mapState<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> increment<span class=\"token punctuation\">,</span> decrement<span class=\"token punctuation\">,</span> reset <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Counter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"gọi-useselector-nhiều-lần-trong-function-component\"><a href=\"#g%E1%BB%8Di-useselector-nhi%E1%BB%81u-l%E1%BA%A7n-trong-function-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gọi <code class=\"language-text\">useSelector</code> nhiều lần trong function component</h3>\n<p>Khi sử dụng hook <code class=\"language-text\">useSelector</code>, khuyến khích dùng nhiều lần để lấy nhiều phần dữ liệu khác nhau, thay vì lấy một cục dữ liệu lớn đã bao gồm các dữ liệu nhỏ hơn bên trong. Không giống với <code class=\"language-text\">mapState</code>, <code class=\"language-text\">useSelector</code> không yêu cầu trả về object, sử dụng selector để lấy những đơn vị dữ liệu nhỏ hơn bên trong store sẽ giúp ít cho việc render nhiều lần.</p>\n<h3 id=\"sử-dụng-redux-devtools\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-redux-devtools\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Redux DevTools</h3>\n<p>Học cách cài đặt và sử dụng thuần thục <a href=\"https://github.com/zalmoxisus/redux-devtools-extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redux DevTool</a>, nó sẽ cho phép chúng ta</p>\n<ul>\n<li>Xem lịch sử dispatch action</li>\n<li>Nội dung của từng action</li>\n<li>State cuối cùng sau khi action được dispatch</li>\n<li>Sự khác nhau của state trước và sau một action</li>\n<li>Action đã được dispatch từ đâu</li>\n</ul>\n<h2 id=\"khuyến-khích\"><a href=\"#khuy%E1%BA%BFn-kh%C3%ADch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khuyến khích</h2>\n<h3 id=\"giá-trị-type-của-action-nên-là-domaineventname\"><a href=\"#gi%C3%A1-tr%E1%BB%8B-type-c%E1%BB%A7a-action-n%C3%AAn-l%C3%A0-domaineventname\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giá trị type của action nên là <code class=\"language-text\">domain/eventName</code></h3>\n<p>Trước đây tài liệu Redux có đề cập và sử dụng tên như thế này <code class=\"language-text\">SCREAMING_SNAKE_CASE</code> để khai báo action type, ví dụ như <code class=\"language-text\">ADD_TODO</code> và <code class=\"language-text\">INCREMENT</code>, cách này sẽ khớp với cách đặt biến hằng số trong đa số các ngôn ngữ lập trình. Tuy nhiên viết hoa hết như vậy hơi khó đọc.</p>\n<p>Cộng đồng lập trình viên áp dụng một cách đặt tên khác, bắt đầu là <code class=\"language-text\">feature</code> hoặc <code class=\"language-text\">domain</code> nơi action này thuộc về và theo sau là tên của kiểu action. Ngoài ra còn có nhiều cách khác như <code class=\"language-text\">&quot;[Domain] Action Type&quot;</code> hay <code class=\"language-text\">&quot;[Login Page] Login&quot;</code>, <code class=\"language-text\">&quot;domain:action&quot;</code></p>\n<p>Hàm <code class=\"language-text\">createSlice</code> trong Redux Toolkit tạo ra một action type như sau <code class=\"language-text\">&quot;domain/action&quot;</code>, ví dụ <code class=\"language-text\">todos/addTodo</code>. Chúng tôi khuyến khích sử dụng <code class=\"language-text\">domain/action</code> cho dễ đọc.</p>\n<h3 id=\"viết-action-sử-dụng-cách-đặt-tên-chuẩn-của-flux\"><a href=\"#vi%E1%BA%BFt-action-s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1ch-%C4%91%E1%BA%B7t-t%C3%AAn-chu%E1%BA%A9n-c%E1%BB%A7a-flux\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Viết action sử dụng cách đặt tên chuẩn của Flux</h3>\n<p><em>Flux Architechure</em> chỉ yêu cầu mỗi action object phải có trường <code class=\"language-text\">type</code> và không có bất cứ ràng buộc nào khác, từ cách đặt tên cũng như trường nào nên đưa vào. Để đảm bảo nhất quán, Andrew Clark viết ra một bộ <a href=\"https://github.com/redux-utilities/flux-standard-action\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flux Standard Actions</a> để chuẩn hóa. Tóm tắt lại bộ nội dung này, action nên là</p>\n<ul>\n<li>Luôn đặt dữ liệu trong trường <code class=\"language-text\">payload</code></li>\n<li>Thêm trường <code class=\"language-text\">meta</code> cho các thông tin khác</li>\n<li>Thêm trường <code class=\"language-text\">error</code> cho các action báo lỗi</li>\n</ul>\n<h3 id=\"sử-dụng-action-creator\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-action-creator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng action creator</h3>\n<p>Thuật ngữ <strong>Action creator</strong> có nguồn gốc từ cách tiếp cận của <em>Flux Architechure</em>, action creator <strong>không bắt buộc</strong>, các component và logic có thể gọi trực tiếp <code class=\"language-text\">dispatch({ type: &quot;some/action&quot;})</code> (action object được truyền dạng inline).</p>\n<p>Tuy nhiên, sử dụng action creator đảm bảo tính nhất quán, đặc biệt phù hợp khi cần chuẩn bị một dữ liệu hoặc logic cho action (thí dụ như khởi tạo một giá trị ID không trùng lặp).</p>\n<p><strong>Khuyến khích sử dụng action creator</strong>. Tuy nhiên, thay vì viết tay, bạn nên sử dụng hàm <code class=\"language-text\">createSlice</code> trong bộ Redux Toolkit, nó sẽ giúp tạo một action creator và action type tự động</p>\n<h3 id=\"sử-dụng-thunk-cho-các-logic-async\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-thunk-cho-c%C3%A1c-logic-async\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Thunk cho các logic async</h3>\n<p>Redux được thiết kế để có thể mở rộng và middleware API được tạo ra cho phép các dạng async logic khác khau có thể cài cắm vào trong Redux store. Bằng cách đó, bạn không cần bắt buộc phải học các thư viện cụ thể nào đó như RxJS nếu không phù hợp với nhu cầu thực tế.</p>\n<p>Kết quả cả khá nhiều middleware addon được tạo ra cho Redux và tạo ra không ít bối rối cũng như câu hỏi về nên sử dụng middleware nào.</p>\n<p>Chúng tôi thực sự khuyến khích sử dụng <a href=\"https://github.com/reduxjs/redux-thunk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redux Thunk</a> như mặc định, nó có thể giải quyết hầu hết các trường hợp. Đồng thời sử dụng cú pháp <code class=\"language-text\">async/await</code> trong thunk rất dễ đọc.</p>\n<p>Nếu bạn có như cầu sử dụng một workflow async thực sự phức tạp như cancel, debouncing, chạy logic khau khi action được dispatch, <strong>thread chạy ngầm</strong> có thể cân nhắc sử dụng các middleware như Redux-Saga và Redux-Observable</p>\n<h3 id=\"tách-các-logic-phức-tạp-ra-khỏi-component\"><a href=\"#t%C3%A1ch-c%C3%A1c-logic-ph%E1%BB%A9c-t%E1%BA%A1p-ra-kh%E1%BB%8Fi-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tách các logic phức tạp ra khỏi component</h3>\n<p>Chúng tôi khuyến nghị nên đưa các logic phức tạp ra khỏi component, theo tư tưởng của cách làm <em>container/presentational</em>, càng nhiều component chỉ nhận prop và hiển thị UI càng tốt, đồng thời khi phải làm việc với các logic bất tuần tự (async) bên trong component rất khó để bảo trì sau này.</p>\n<p>Tuy nhiên, sử dụng React hook có vẻ như dễ dàng hơn trong việc quản lý các logic kiểu như fetch dữ liệu trực tiếp trong component và có thể thay thế bằng thunk trong vài trường hợp</p>\n<h3 id=\"sử-dụng-selector-function-để-đọc-dữ-liệu-trong-store\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-selector-function-%C4%91%E1%BB%83-%C4%91%E1%BB%8Dc-d%E1%BB%AF-li%E1%BB%87u-trong-store\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng selector function để đọc dữ liệu trong store</h3>\n<p>Selector function là công cụ mạnh mẽ đề đọc các giá trị trong store. Những thư viện như Reselect cho tạo và lưu trữ các selector function, chỉ tính toán lại kết quả nếu cần thiết, là một đặc tính quan trọng để cải thiện hiệu năng.</p>\n<p>Khuyến khích sử dụng các selector function và lưu lại kết quả đọc được từ store bất cứ khi nào có thể, tạo các selector function này bằng Reselect</p>\n<p>Tuy nhiên, cũng không nhất thiết <strong>bắt buộc phải</strong> viết selector function cho tất cả các giá trị trong state. Cân nhắc các trường hay cần truy xuất và cập nhập cũng như lợi ích mang lại khi sử dụng các selector function</p>\n<h3 id=\"tránh-đưa-state-của-form-vào-trong-redux\"><a href=\"#tr%C3%A1nh-%C4%91%C6%B0a-state-c%E1%BB%A7a-form-v%C3%A0o-trong-redux\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tránh đưa state của form vào trong redux</h3>\n<p>Hầu như như state của form ko nên nằm trong Redux. Dữ liệu này không thực sự phải <em>global</em>, ko cần được cache, không được sử dụng bởi nhiều component cùng lúc. Connect form vào redux cũng dẫn đến chuyện dispatch action trên tất cả các sự kiện thay đổi trong form, nó sẽ làm hiệu năng giảm trầm trọng và không mang lại nhiều hiệu quả.</p>\n<p>Chỉ nên dữ state của form trong component và đưa toàn bộ giá trị lên store sau khi user submit form.</p>\n<p>Chỉ duy nhất trường hợp đưa form state vào redux là hợp lý khi viết component như WYSIWYG với tính năng live preview trên các thuộc tính. Còn lại đa phần không cần thiết.</p>\n<p><a href=\"https://redux.js.org/style-guide/style-guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://redux.js.org/style-guide/style-guide/</a></p>\n","cover_image":""}},{"node":{"id":"cc966bcacf4a3f8f4a9f2abf03463e59","title":"9 câu hỏi lắc léo về Promise","path":"/9-cau-hoi-lac-leo-ve-promise/","date":"2019-12-23","timeToRead":3,"desc":"Vài câu hỏi Promise, ôn tập kiến thức cho bạn cần đi phỏng vấn","content":"<h2 id=\"1\"><a href=\"#1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The Fails!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Kết quả output</p>\n<ol>\n<li>Kết quả lỗi log ra 1 lần</li>\n<li>Kết quả lỗi log ra 2 lần</li>\n<li>UnhandledPromiseRejectionWarning</li>\n</ol>\n<p><code class=\"language-text\">.catch</code> sẽ làm việc giống như <code class=\"language-text\">.addEventListener(event, callback)</code> hay Event Emitter <code class=\"language-text\">.on(event, callback)</code>. Có thể add thêm bao nhiêu tùy thích, nó sẽ chạy tất cả các callback đã đăng ký</p>\n<p>✅ <em>Đáp án</em></p>\n<ol start=\"2\">\n<li>Kết quả lỗi log ra 2 lần</li>\n</ol>\n<h2 id=\"2\"><a href=\"#2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reject</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The Fails!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<ol>\n<li>Kết quả lỗi log ra 1 lần</li>\n<li>Kết quả lỗi log ra 2 lần</li>\n<li>UnhandledPromiseRejectionWarning</li>\n</ol>\n<p><img src=\"https://danlevy.net/static/question-2-308cbd4ad650e288821fd681a0e745b4-e8b1e.png\"></p>\n<p>Khi khởi tạo một Promise, chúng ta phải gọi một trong hai callback <code class=\"language-text\">resolve()</code> hoặc <code class=\"language-text\">reject()</code>. Nó ko <code class=\"language-text\">return</code> giá trị. Không thể dùng <code class=\"language-text\">Promise.reject()</code> như ở trên.</p>\n<p>✅ <em>Đáp án</em></p>\n<ol start=\"3\">\n<li>UnhandledPromiseRejectionWarning</li>\n</ol>\n<h2 id=\"3\"><a href=\"#3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The Fails!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Kết quả</p>\n<ol>\n<li>In ra lỗi và <code class=\"language-text\">undefined</code></li>\n<li>in ra lỗi 2 lần</li>\n<li>UnhandledPromiseRejectionWarning</li>\n<li>undefined</li>\n</ol>\n<p><img src=\"https://danlevy.net/static/question-3-a5d5c8df7eb262f3bccc7a5319f53ec2-e8b1e.png\" alt=\"annotated-code/question-3.png\"></p>\n<p>Gợi ý thứ nhất <code class=\"language-text\">console.log()</code> luôn trả về <code class=\"language-text\">undefined</code>. Thứ 2, khi đặt <code class=\"language-text\">.catch</code> trước <code class=\"language-text\">.then</code> như thế, nó sẽ không nhận được giá trị từ hàm trước đó, mọi thứ đã dừng lại ở <code class=\"language-text\">catch</code>.</p>\n<p>✅ <em>Đáp án</em></p>\n<ol>\n<li>In ra lỗi và <code class=\"language-text\">undefined</code></li>\n</ol>\n<h2 id=\"4\"><a href=\"#4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The Fails!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<ol>\n<li>In ra lỗi một lần</li>\n<li>In ra lỗi 2 lần</li>\n<li>UnhandledPromiseRejectionWarning</li>\n</ol>\n<p>Giải thích như trên, câu <code class=\"language-text\">catch</code> thứ 2 không được gọi đến, điều đặc biệt là bạn có thể đặt <code class=\"language-text\">.then</code> ở phía sau <code class=\"language-text\">catch</code> nhưng không thể đặt <code class=\"language-text\">catch</code> sau <code class=\"language-text\">catch</code>.</p>\n<p>✅ <em>Đáp án</em></p>\n<ol>\n<li>In ra lỗi một lần</li>\n</ol>\n<h2 id=\"5\"><a href=\"#5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">throw</span> <span class=\"token known-class-name class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Oh noes!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\"actually, that worked\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<ol>\n<li>In lỗi 1 lần</li>\n<li>In lỗi 2 lần</li>\n<li>UnhandledPromiseRejectionWarning</li>\n<li>Ko in gì cả</li>\n</ol>\n<p><code class=\"language-text\">catch</code> có thể được sử dụng để bỏ qua hoặc ghi đè lên giá trị lỗi bằng cách cho <code class=\"language-text\">return</code> một giá trị. Trò này <strong>chỉ làm được khi trước đó <code class=\"language-text\">then</code> có trả về giá trị</strong>.</p>\n<p>✅ <em>Đáp án</em></p>\n<ol start=\"4\">\n<li>Ko in gì cả</li>\n</ol>\n<h2 id=\"6\"><a href=\"#6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> data<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<ol>\n<li>In ra \"Success!\" và \"SUCCESS!\"</li>\n<li>In ra \"Success!\"</li>\n<li>In ra \"SUCCESS!\"</li>\n<li>Không in ra gì cả</li>\n</ol>\n<p><code class=\"language-text\">.then</code> sẽ truyền dữ liệu theo thứ tự đã viết, khi <code class=\"language-text\">return</code> giá trị, hàm <code class=\"language-text\">then</code> tiếp theo sẽ nhận giá trị <code class=\"language-text\">return</code> này.</p>\n<p>✅ <em>Đáp án</em></p>\n<ol start=\"3\">\n<li>In ra \"SUCCESS!\"</li>\n</ol>\n<h2 id=\"7\"><a href=\"#7\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>7</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> data<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">return</span> data\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">log</span><span class=\"token punctuation\">)</span></code></pre>\n<ol>\n<li>In ra \"SUCCESS!\"</li>\n<li>In ra \"Success!\"</li>\n<li>In ra \"SUCCESS!\" và \"SUCCESS!\"</li>\n<li>Không in ra gì cả</li>\n</ol>\n<p>Giải thích tương tự như trên.</p>\n<p>✅ <em>Đáp án</em></p>\n<ol start=\"3\">\n<li>In ra \"SUCCESS!\" và \"SUCCESS!\"</li>\n</ol>\n<h2 id=\"8\"><a href=\"#8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>8</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    data<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<ol>\n<li>In ra \"SUCCESS!\"</li>\n<li>In ra \"Success!\"</li>\n<li>In ra \"SUCCESS!\" và \"SUCCESS!\"</li>\n<li>In ra \"undefined\"</li>\n</ol>\n<p>Nếu muốn truyền giá trị xuống <code class=\"language-text\">.then</code> bên dưới, trước đó phải <code class=\"language-text\">return</code>.</p>\n<p>✅ <em>Đáp án</em></p>\n<ol start=\"4\">\n<li>In ra \"undefined\"</li>\n</ol>\n<h2 id=\"9\"><a href=\"#9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>9</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">throw</span> <span class=\"token known-class-name class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Oh noes!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">'actually, that worked'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">throw</span> <span class=\"token known-class-name class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The fails!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<ol>\n<li>In ra \"Oh noes!\" và \"The fails!\"</li>\n<li>In ra \"Oh noes!\"</li>\n<li>In ra \"The fails!\"</li>\n<li>In ra  \"actually, that worked\"</li>\n<li>Không in ra gì cả</li>\n</ol>\n<p>Tổng hợp những kiến thức ở trên, hy vọng bạn trả lời đúng câu này.  Ở <code class=\"language-text\">then</code> đầu tiên, chúng ta throw một error, <code class=\"language-text\">catch</code> tiếp theo chúng ta <code class=\"language-text\">return</code> coi như bỏ qua error này, <code class=\"language-text\">then</code> thứ 2, nhận data nhưng chúng ta ko làm gì với nó cả, mà throw một error khác, catch cuối cùng sẽ là giá trị error vừa throw ở trên.</p>\n<p>✅ <em>Đáp án</em></p>\n<ol start=\"3\">\n<li>In ra \"The fails!\"</li>\n</ol>\n<p><a href=\"https://danlevy.net/javascript-promises-quiz/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://danlevy.net/javascript-promises-quiz/</a></p>\n","cover_image":""}},{"node":{"id":"e332aaf4a81a8ba996249d8fb727b606","title":"Hiểu về prop key trong React","path":"/hieu-ve-prop-key-trong-react/","date":"2019-12-18","timeToRead":3,"desc":"Một chút nhận định về prop key trong React","content":"<blockquote>\n<p><code class=\"language-text\">key</code> là một cơ chế để quản lý các instance của component</p>\n</blockquote>\n<p>Mỗi lần React render 1 component, nó chạy function của chúng ta để nhận về một giá trị mới, giá trị này được dùng để cập nhập DOM. Nếu chúng trả về cùng một giá trị, nó sẽ không gọi update DOM, thậm chí <strong>tất cả prop có thay đổi</strong></p>\n<p>Đọc thêm bài viết <a href=\"https://kentcdodds.com/blog/optimize-react-re-renders\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Thủ thuật cải thiện render</a></p>\n<p><strong>Tất cả prop có thay đổi</strong> nếu kết quả trả về không khác nhau, nó không cập nhập DOM. <strong>Trừ trường hợp là prop <code class=\"language-text\">key</code></strong>, dù cho kết quả cuối cùng không thay đổi, nhưng giá trị <code class=\"language-text\">key</code> khác nhau, React cũng sẽ unmount instance trước đó và mount vào một instance mới.</p>\n<p>Điều đó có nghĩa là toàn bộ <code class=\"language-text\">state</code> trước đó sẽ được khởi tạo lại như lúc ban đầu. React cũng sẽ chạy cleanup trên <code class=\"language-text\">effect</code></p>\n<blockquote>\n<p>Cleanup effect thật ra chạy sau khi một component đã mount, trước khi effect tiếp theo được gọi.</p>\n</blockquote>\n<p>Tưởng tượng chúng ta có một component, với state của riêng nó</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Counter</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Counter called'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Counter useState initializer'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token arrow operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Counter useEffect callback'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Counter useEffect cleanup'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Counter returning react elements'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">CounterParent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// sử  dụng useReducer theo cách này để đảm bảo tất cả những lần gọi setCounterKey</span>\n  <span class=\"token comment\">// `counterKey` được gán cho một object mới</span>\n  <span class=\"token comment\">// đồng nghĩa với việc `key` sẽ khác nhau</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counterKey<span class=\"token punctuation\">,</span> setCounterKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token arrow operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>setCounterKey<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">reset</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>counterKey<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đây là kết quả log ra</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">// bắt đầu mounted\nCounter called\nCounter useState initializer\nCounter returning react elements\n// mounted\nCounter useEffect callback\n// click nút counter\nCounter called\nCounter returning react elements\n// để ý đến callback của effect và các step lúc khởi tạo không được gọi lúc này\n// click nút reset\n// xảy ra trên instance mới\nCounter called\nCounter useState initializer\nCounter returning react elements\n// cleanup instance trước đó\nCounter useEffect cleanup\n// new instance đã được mounted\nCounter useEffect callback</code></pre>\n<p>Một ứng dụng thực tế, sử dụng key để <em>ép</em>  render giá trị <code class=\"language-text\">subject</code> khi <code class=\"language-text\">topic</code> thay đổi</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Contact</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">,</span> setTopic<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'training'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">htmlFor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>topic<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Topic</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>topic<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>topic<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setTopic</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>training<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Training</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>consulting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Consulting</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>question<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Question</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">htmlFor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>subject<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Email Subject</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>subject<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>topic<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">defaultValue</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>defaultValuesByTopic<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">htmlFor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>body<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Email body</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>body<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta có <code class=\"language-text\">&lt;input id=&quot;subject&quot; /&gt;</code>, nếu không truyền <code class=\"language-text\">key=topic</code>, nó sẽ không được khởi tạo lại dù cho giá trị của <code class=\"language-text\">defaultValue={defaultValuesByTopic[topic]}</code> đã thay đổi.</p>\n<p><a href=\"https://kentcdodds.com/blog/understanding-reacts-key-prop\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Understanding React's key prop</a></p>\n","cover_image":""}},{"node":{"id":"aef50f5a2dd43730cf89e8a944b6adec","title":"Tối ưu component React bằng React.memo, useMemo và useCallback","path":"/toi-uu-component-react-bang-react-memo-use-memo-va-use-callback/","date":"2019-12-13","timeToRead":2,"desc":"Sử dụng những hàm có sẵn của React để viết component ngon hơn","content":"<p>Hầu hết các trường hợp, hiệu năng của các ứng dụng React không phải là vấn đề quá nghiêm trọng. Bản thân thư viện React đã hỗ trợ tận răng các phương để cải thiện lúc render component. Tuy nhiên cũng có vài trường hợp các component của chúng ta render nhiều hơn mức cần thiết và làm ảnh hưởng đến hiệu năng chung.</p>\n<p>Lấy ví dụ</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">ListPage</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> title <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Header</span></span> <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span></span> <span class=\"token attr-name\">listItems</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Trong ví dụ rất rất đơn giản trên, nếu <code class=\"language-text\">data</code> thay đổi, toàn bộ <code class=\"language-text\">&lt;Listpage/&gt;</code> sẽ render, bao gồm cả <code class=\"language-text\">&lt;Header /&gt;</code> vốn không có thay đổi gì nếu giá trị <code class=\"language-text\">data</code> khác đi</p>\n<p>Thời bây giờ chúng ta chuộng kiểu viết functional component hơn, 3 cách để tối ưu cho một functional component là sử dụng: <code class=\"language-text\">React.memo</code>, <code class=\"language-text\">useMemo</code>, <code class=\"language-text\">useCallback</code></p>\n<h2 id=\"reactmemo\"><a href=\"#reactmemo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>React.Memo</h2>\n<p>Là một Higher order component dùng để <strong>ghi nhớ</strong> kết quả của function component, tất nhiên nếu truyền cùng một prop thì kết quả trả về sẽ là không đổi, nên có thể lấy kết quả <strong>đã nhớ</strong> trước đó</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Header</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Header</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Cách viết trên là bắt buộc, vì nếu bạn viết như bên dưới, component của bạn sẽ không xuất hiện trong devtool</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Header</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">Header</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"usememo\"><a href=\"#usememo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useMemo</h2>\n<p>Tên có vẻ giống, nhưng không giống nhau, nếu <code class=\"language-text\">React.memo</code> là một HOC để ghi nhớ một function component, <code class=\"language-text\">useMemo</code> là hàm giống như helper cho phép chỉ định: lưu lại kết quả của hàm nào và những giá trị nào sẽ làm thay đổi kết quả đó.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> widgetList <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n    widgets<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">w</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token spread operator\">...</span>w<span class=\"token punctuation\">,</span>\n      totalPrice<span class=\"token operator\">:</span> <span class=\"token function\">someComplexFunction</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span><span class=\"token property-access\">price</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      estimatedDeliveryDate<span class=\"token operator\">:</span> <span class=\"token function\">someOtherComplexFunction</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span><span class=\"token property-access\">warehouseAddress</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>widgets<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Ở đoạn code trên, chúng ta muốn <strong>ghi nhớ</strong> giá trị của <code class=\"language-text\">totalPrice</code> và <code class=\"language-text\">estimatedDeliveryDate</code> bởi vì việc tính toán các giá trị này vô cùng <em>tốn sức</em>. Chúng ta chỉ định <code class=\"language-text\">widgets</code> nếu không thay đổi thì đừng đi tính lại làm gì, mà lấy kết quả lần trước ra.</p>\n<h2 id=\"usecallback\"><a href=\"#usecallback\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useCallback</h2>\n<p>Được sử dụng để chặn việc render không cần thiết giữa <code class=\"language-text\">parent</code> và <code class=\"language-text\">children</code> component</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Parent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showExtraDetails<span class=\"token punctuation\">,</span> setShowExtraDetails<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">]</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Child</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">showData</span><span class=\"token punctuation\">(</span>showExtraDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Component <code class=\"language-text\">Child</code> sẽ luôn re-render khi <code class=\"language-text\">Parent</code> render, thậm chí <code class=\"language-text\">Child</code> là một <code class=\"language-text\">PureComponent</code> hoặc được bọc trong <code class=\"language-text\">React.memo</code></p>\n<p><code class=\"language-text\">useCallback</code> được dùng như bên dưới</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Parent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showExtraDetails<span class=\"token punctuation\">,</span> setShowExtraDetails<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> handleClick <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">showData</span><span class=\"token punctuation\">(</span>showExtraDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span>showExtraDetails<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">]</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://headway.io/blog/react-optimize-components-memo-usememo-usecallback/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://headway.io/blog/react-optimize-components-memo-usememo-usecallback/</a></p>\n","cover_image":""}},{"node":{"id":"8cd9d8c2dba06fb83a1f7d2ff11853f6","title":"Cách viết React render props","path":"/cach-viet-react-render-props/","date":"2019-11-27","timeToRead":5,"desc":"Một trong những pattern để chúng ta có thể sử dụng lại logic","content":"<p>Có 2 điều quan trọng cần nói trước khi bắt đầu. Một là, chúng ta đang nói đến một <strong>cách làm</strong> (pattern) trong lập trình, ko phải đặc sản của React. Thứ 2, đây không phải là kiến thức bắt buộc để viết một ứng dụng React. Bạn có thể không cần đọc bài này, vẫn có thể vỗ ngực xưng tên là một React developer và viết React như thường. Còn nếu bạn tò mò muốn biết thêm món <em>đồ chơi</em> thì đọc tiếp.</p>\n<p>Những lập trình viên mới vào nghề cũng biết đến câu thần chú \"D.R.Y\" (đừng tự lập lại chính mình). Câu thần chú rất đáng để trong tâm niệm. Cái cách làm Render Props này cũng là để đạt được cái gọi là DRY, giống như Higher-Order-Components.</p>\n<p>Trước khi xem đến giải pháp, chúng ta cần biết vấn đề cần giải quyết là gì. Ví dụ chúng ta muốn làm lại cái dashboard như bên dưới</p>\n<p><img src=\"https://tylermcginnis.com/images/posts/react-fundamentals/tool-tips.gif\"></p>\n<p>Bạn sẽ cần hiển thị một đống cái kiểu tooltip khác nhau khi một element được hover lên</p>\n<p>Có vài cách để tiếp cận vấn đề này, một là bạn kiểm tra một component cụ thể nào đó có đang hover không, rồi hiển thị hoặc ẩn tooltip. Có 3 component bạn cần kiểm tra, bạn đưa hàm kiểm tra vào cả 3 component <code class=\"language-text\">Info</code>, <code class=\"language-text\">TrendChart</code>, <code class=\"language-text\">DailyChart</code></p>\n<p>Component Info</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Info</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span>\n        <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Icon-svg Icon--hoverable-svg<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">height</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 16 16<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>16<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M9 8a1 1 0 0 0-1-1H5.5a1 1 0 1 0 0 2H7v4a1 1 0 0 0 2 0zM4 0h8a4 4 0 0 1 4 4v8a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4zm4 5.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta sẽ sử dụng <code class=\"language-text\">onMouseOver</code> và <code class=\"language-text\">onMouseOut</code>, dùng thêm state <code class=\"language-text\">hovering</code> để chúng ta có thể kêu nó <code class=\"language-text\">re-render</code> khi cần thiết</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Info</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> hovering<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">mouseOver</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hovering<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function-variable function\">mouseOut</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hovering<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">hovering</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span>\n          <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tooltip</span></span> <span class=\"token attr-name\">id</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n          <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span>\n          <span class=\"token attr-name\">onMouseOver</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mouseOver</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">onMouseOut</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mouseOut</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Icon-svg Icon--hoverable-svg<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">height</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 16 16<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>16<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M9 8a1 1 0 0 0-1-1H5.5a1 1 0 1 0 0 2H7v4a1 1 0 0 0 2 0zM4 0h8a4 4 0 0 1 4 4v8a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4zm4 5.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Giờ chúng ta cần <em>copy</em> tính năng này cho 2 component còn lại. Việc <em>copy</em> này vi phạm nghiêm trọng câu thần chú DRY. Chúng ta phải làm sao để sử dụng lại những logic giống nhau mà ko phải copy-paste</p>\n<p>Trong hầu hết các trường hợp khi chúng ta dựng một component trong React, kết quả output cuối cùng là một cái UI gì đó</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token maybe-class-name\">View</span> <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span></code></pre>\n<p>Tuy nhiên chỉ là hầu hết, chứ ko phải toàn bộ, có nhưng component như là <em>wrapper</em> của một component khác, nó chỉ mang nhiệm vụ quản lý logic.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Users</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    users<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">users</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> users <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Grid</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">users</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Như component <code class=\"language-text\">Users</code> ở trên, không chịu trách nhiệm quản lý UI, chuyện đó là việc của <code class=\"language-text\">Grid</code></p>\n<p>Trong React, chúng ta có thể truyền function vào như prop cho component</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">User</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">id</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// vuilaptrinh.com</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span></span> <span class=\"token attr-name\">id</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isAuthed</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> isAuthed <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">?</span> <span class=\"token string\">'vuilaptrinh.com'</span> <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p>Với ý tưởng này, chúng ta giải quyết vấn đề trên như thế nào?</p>\n<p>Trước tiên chúng ta tạo ra một component <em>wrapper</em> chịu trách nhiệm quản lý logic của hover</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hover</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> hovering<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">mouseOver</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hovering<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function-variable function\">mouseOut</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hovering<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onMouseOver</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mouseOver</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseOut</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mouseOut</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Câu hỏi tiếp theo, component <code class=\"language-text\">Hover</code> thì render cái gì. Vận dụng ý tưởng truyền prop là một function, chúng ta cho <code class=\"language-text\">Hover</code> nhận vào một prop function có tên <code class=\"language-text\">render</code>, chúng ta sẽ nhét vào trong cái function <code class=\"language-text\">render</code> giá trị <code class=\"language-text\">hovering</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hover</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hovering</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    Is hovering? </span><span class=\"token punctuation\">{</span>hovering <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">?</span> <span class=\"token string\">'Yes'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'No'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p>Việc còn lại là cập nhập lại component <code class=\"language-text\">Hover</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hover</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> hovering<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">mouseOver</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hovering<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function-variable function\">mouseOut</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hovering<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onMouseOver</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mouseOver</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseOut</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mouseOut</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">hovering</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Vấn đề đã được giải quyết. Bất kể khi nào cần dùng logic <code class=\"language-text\">hover</code> chúng ta sẽ gọi lại component <code class=\"language-text\">Hover</code>. Cách làm này được gọi với cái tên đúng như những gì đã diễn ra (truyền prop render là một function) <strong>Render Props</strong></p>\n<p>Một cách viết khác không dùng prop tên <code class=\"language-text\">render</code>, xài luôn prop tên <code class=\"language-text\">children</code> có sẵn, chúng ta sẽ viết một cách gọn hơn</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">User</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token maybe-class-name\">This</span> is props<span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">User</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>So với cách làm của Higher-Order-Component, Render Props sẽ không vướng phải vấn đề đụng tên props, không mất quyền kiểm soát vào <em>tay</em> component được wrap lại, và wrapper hell.</p>\n<p><a href=\"https://tylermcginnis.com/react-render-props/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://tylermcginnis.com/react-render-props/</a></p>\n","cover_image":""}},{"node":{"id":"89de1c757498a4b9f6dfef7a689dd2a6","title":"Lựa chọn framework frontend nào trong thời điểm hiện tại","path":"/lua-chon-framework-frontend-nao-trong-thoi-diem-hien-tai/","date":"2019-11-24","timeToRead":9,"desc":"Đây không phải là một bài so sánh đâu mới là framework chạy nhanh nhất","content":"<p>Thời điểm hiện tại nếu bạn đang làm Frontend thì chắc hẳn đang sử dụng một framework nào đó trong 3 thằng này, Vue, React, và Angular. Nếu trước đây trên cả tá framework, và cả tá ví dụ về làm một ứng dụng web ToDoMVC trên github, thì cuộc chơi giờ đây đã đỡ hơn rất nhiều, khi chúng ta chỉ còn 3 lựa chọn sáng giá.</p>\n<p>Để viết một ứng dụng phức tạp, chúng ta bắt buộc phải sử dụng framework, vì nếu không có những framework như vậy, chúng ta sẽ tốn không biết bao nhiêu thời gian để đạt được kết quả cuối cùng.</p>\n<p>Chắc các bạn cũng như mình đã quá mệt mỏi với những bài viết so sánh 3 framework trên, ai ngon hơn ai, các bạn cũng nên dừng tìm kiếm câu trả lời cho câu hỏi \"Top 10 framework nên xài trong năm 2019\". Tại sao? Vì những bài viết này đa phần sẽ tập trung vào  đếm số lượng <em>sao</em> trên Github, số lượng tải về từ NPM, số câu hỏi liên quan trên Stack Overflow. Những con số thống kê vô hồn này chỉ có tác dụng trong những trường hợp cụ thể, như đi quảng bá về mức độ phủ rộng của những framework này. Nếu bạn là dân kỹ thuật và nhìn nhận ở góc độ kỹ thuật, phán xét những framework này ở góc độ kỹ thuật chứ không thể căn cứ trên số lượt <em>view</em> và <em>download</em></p>\n<blockquote>\n<p>Kỹ thuật quyết định bên trong của từng framework là gì, đâu là sự khác nhau thực sự của từng framework</p>\n</blockquote>\n<p>Mục tiêu cuối cùng của các framework đều là để giúp chúng ta viết ứng dụng web hiệu quả nhất có thể, việc cạnh tranh giữa các framework với nhau là ý tưởng tốt hay không? Mỗi framework sẽ có một số lượng người sử dụng nhất định, như React-Angular-Vue hiện tại có khoản hơn nửa triệu developer đang <em>ăn nằm</em> với nó hằng ngày.</p>\n<p>Không có khái niệm \"điểm tốt\" và \"điểm chưa tốt\" cho các framework. Người ta thường hay hỏi mấy câu, framework nào xài ngon nhất. Một dạng câu hỏi bạn nên ngừng làm khó nhau vì không thể nào so sánh như toán học 3 > 2 > 1</p>\n<p>Việc thiết kế phần mềm luôn đòi hỏi một sự đánh đổi, đặc biệt là với web, chắc có lẽ vì có quá nhiều thứ người ta muốn làm thông qua web, từ một trang web đơn giản chỉ là HTML tĩnh đến cả một hệ thống phức tạp nhất bạn có thể nghĩ ra, để đáp ứng toàn bộ những nhu cầu khác nhau đó, các framework phải chấp nhận đánh đổi một số thứ, chứ ko thể đáp ứng toàn bộ với một giải pháp toàn diện được</p>\n<h2 id=\"scope\"><a href=\"#scope\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Scope</h2>\n<blockquote>\n<p>Framework cung cấp bao nhiêu đồ chơi cho bạn</p>\n</blockquote>\n<p>Một trong những ví dụ kinh điển giữa <strong>thư viện</strong> và <strong>framework</strong> là React và Angular. React được xem là thư viện trong khi Angular sẽ là framework</p>\n<p>Là một thư viện, React chỉ muốn tập trung cung cấp mô hình để phát triển UI. Để hình dung dễ hơn, liên tưởng tới các nhà máy sản xuất bún, scope rất cụ thể, tôi sẽ tập trung vào việc sản xuất ra bún, việc các bạn đem bún này về nấu thành món gì là do bạn, lý do tại sao ecosystem của React luôn luôn sôi động, rất nhiều dev đã chế biến thành các món khác nhau, như với món bún chúng ta có bún riêu, canh bún, bún đậu mắm tôm, bún cá châu đốc, bún mắm, vâng vâng.</p>\n<p>Trong khi đó, Angular với tư cách là một framework thực thụ, nó sẽ tiếp cận vấn đề theo hướng từ trên xuống. Hình dung như mì gói nuôi nhân tài ở Việt Nam, với mọi thứ đóng gói đầy đủ để bạn có một món cứu đói tạm thời, bột nêm, dầu, hành. Angular cung cấp hệ thống form validation, animation,... rất nhiều tính năng khác mà chúng ta rất cần thiết để dựng nên một ứng dụng hoàn chỉnh. Với scope lớn như vậy, mọi tính năng khi thiết kế đã được nghĩ đến làm thế nào để chúng <em>sống chung</em> với nhau một cách mượt mà</p>\n<p><strong>Lợi ích khi có scope nhỏ và cụ thể</strong></p>\n<ul>\n<li>Ít khái niệm, dễ tiếp cận ngay từ đầu. Trong React bạn sẽ có mô hình làm component, prop, state, virtual DOM, hook, bao nhiêu kiến thức thôi là bạn đã có thể bắt đầu làm quen React.</li>\n<li>Linh động, món bún có thể kết hợp với rất nhiều thứ gia vị, cách nấu khác nhau để cho ra các món ăn khác nhau.</li>\n<li>Team duy trì React <em>rảnh</em> hơn, những chuyện khác đã có cộng đồng gánh vác, như đi làm React Router, React Redux, React Form, họ sẽ có thời gian nhiều hơn để tập trung vào các ý tưởng mới cho bản thân React</li>\n</ul>\n<p><strong>Hạn chế khi scope nhỏ và cụ thể</strong></p>\n<ul>\n<li>Khi bạn phải xây dựng một ứng dụng phức tạp, một vài concept cơ bản là không đủ xài, bạn phải tự viết khá nhiều. Giống như bắt bạn diễn tả tất cả những câu nói hằng ngày bằng cách chỉ sử dụng 10 từ, thì bạn diễn đạt ý như thế nào?</li>\n<li>Cách làm (<em>pattern</em>) mới ngày càng nhiều. Nói học React rất dễ là bạn thực sự chưa biết đến ngoài React ra, bạn có phải học vô số các cách làm (pattern) khác, như Redux, mặc dù không có trong tài liệu chính thức trên React, nhưng lại là thứ bạn không thể bỏ qua nếu muốn dùng React như một React Developer chân chính. Nào là Higher Other Component, Render Props, React hook, rồi quá trời cách để sử dụng CSS trong JS, tài liệu chính thức của React sẽ không nói bạn nên dùng gì, bạn phải tự tìm hiểu và chọn cái nào mình thích. Những kiến thức này bạn phải nạp từ từ như là một kiến thức chính quy để bạn có thể vỗ ngực xưng tên <em>tao là React Developer</em>.</li>\n<li>Ecosystem phát triển quá nhanh không đồng nghĩa với chất lượng các thư viện dành cho React cái nào cũng ngon, rất nhiều thư viện nổi lên một thời rồi ra đi mãi mãi, như Flux, rồi bao nhiêu là cách viết CSS trong JS. Trong ta luôn trong cảm giác lo sợ <strong>lỡ mất không xài thằng ngon nhất rồi</strong></li>\n</ul>\n<p><strong>Lợi ích khi có scope bao la bát ngát</strong></p>\n<ul>\n<li>Các vấn đề thường gặp đã được giải quyết hết, bạn có ngay tô mì để ăn trong 5 phút mà không cần suy nghĩ nhiều, cứ lên trang chủ, đọc tài liệu, học cái framework xong là xài, để nghiên cứu giây mơ rễ má có thể để sau. Đâu ai cấm bạn ăn mì gói bỏ thêm thịt bò, trứng hay tôm càng.</li>\n<li>Các tính năng bên trong được thiết kế để làm việc mượt mà đảm bảo tính thống nhất của toàn bộ hệ thống, không cần chạy đi đâu để kiếm giải pháp cho một vấn đề quá căn bản, bạn cứ lên trang chính thức của nó xem người ta giải quyết vấn đề đó như thế nào, không còn phải suy nghĩ lựa chọn đâu là cách tốt nhất trong hơn chục cái giải pháp được đưa ra.</li>\n</ul>\n<p><strong>Hạn chế của scope bao quát bát ngát hết vườn hoa</strong></p>\n<ul>\n<li>Học là một quá trình dài, nhiều khi để tới được bước có một cái gì đó hiển thị trên màn hình, bạn phải trải qua cả khóa học bài bảng. Những người không có kiến thức về một ngôn ngữ Backend nào cả, chỉ biết HTML, CSS, javascript mà đọc tài liệu của Angular thì phải nói là một trãi nghiệm vô cùng đau thương</li>\n<li>Đôi khi một giải pháp được cung cấp sẵn lại không phù hợp với tính huống gặp phải, chúng ta ước gì có thể làm cách khác, nhưng điều đó là không thể.</li>\n<li>Hệ thống lớn đòi hỏi chi phí rất lớn để duy trì cũng như đưa ra các ý tưởng mới, rất nhiều thành phần phải tích hợp để cả hệ thống có thể kết nối hoạt động trơn tru</li>\n</ul>\n<h2 id=\"cơ-chế-render\"><a href=\"#c%C6%A1-ch%E1%BA%BF-render\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cơ chế render</h2>\n<blockquote>\n<p>Cách structure, cách quản lý code của framework</p>\n</blockquote>\n<p>Để đơn giản chúng ta so sánh JSX và Templates</p>\n<p><strong>Điểm cộng của JSX/Virtual DOM</strong></p>\n<ul>\n<li>Tất cả điều là javascript, ai cũng thích, bạn không cần biết những syntax mới được định nghĩa bởi framework, những kiến thức bạn nạp vào là kiến thức nền tảng của javascript, một khi bạn đã cứng tay, bạn có thể thiên biến vạn hóa theo sở thích.</li>\n<li>Xem <em>view</em> như một dạng <em>data </em>, một component sẽ return một thứ gì đó dựa vào những giá trị input khác nhau, bạn có thể làm những thứ như chụp một cái snapshot dựa trên virtual DOM, render nó trên những target khác như terminal, PDF, Canvas, WebGL</li>\n</ul>\n<p><strong>Điểm trừ của JSX/Virtual DOM</strong></p>\n<ul>\n<li>Vốn dĩ sẽ tiêu tốn tài nguyên. Khi React mới ra đời, họ cũng đã trả lời cho câu hỏi <em>làm như vậy có chậm không?</em>, <em>vâng nó chậm nhưng vẫn nhanh đủ để dùng</em>. Nếu nhìn nhận về mặc kỹ thuật, phải làm rất nhiều thao tác xử lý trên virtual DOM. Kích thước của một VDom chuẩn sẽ liên quan tới kích thước của view chứ không phải số lượng node sẽ thay đổi.</li>\n<li>Hàm render cơ bản rất linh động, vì linh động nên nó cũng rất khó optimize, linh động ở đây muốn nói đến một hàm render như thế này</li>\n</ul>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        children<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'text'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">===</span> <span class=\"token number\">2</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuilaptrinh.com\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'content'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta có thể tạo parent node trước, rồi sau đó nhét thêm các node con, hoặc bất cứ thứ gì bạn có thể nghĩ ra được, javascript rất linh động, có nhiều tình huống đặc biệt chúng ta khó có thể đảm bảo optimize được cho tất cả.</p>\n<ul>\n<li>Giải pháp của React cho tình huống này không tập trung vào việc làm cho virtual DOM nhanh hơn, mà làm cho chúng ta <em>cảm giác</em> performance tốt hơn (giống như việc gửi tin nhắn trên facebook luôn cảm giác như gửi được liền chứ không cần đợi), việc đó được thực hiện bằng các kỹ thuật runtime scheduling, concurrent mode, time slicing. Những giải pháp này buộc họ phải tự tạo và quản lý một <em>stack</em> riêng, một công việc rất tốn kém</li>\n</ul>\n<p><strong>Điểm cộng của Template</strong></p>\n<ul>\n<li>Với cách tiếp cận trực tiếp hơn cho việc render, performance đương nhiên sẽ <em>gần</em> hơn render performance của trình duyệt, với cách viết template như thế này sẽ không thể nào thay đổi được thứ tứ của những element đã khai báo</li>\n</ul>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Lorem ipsum<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Lorem ipsum<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{ message }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Lorem ipsum<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Việc đoán trước được những gì có thể thay đổi, giúp việc cải thiện hiệu năng cũng sẽ dễ tiếp cận hơn </p>\n<ul>\n<li>Tùy vào tình huống, có thể giá trị baseline runtime sẽ thấp hơn</li>\n</ul>\n<p><strong>Điểm trừ của Template</strong></p>\n<ul>\n<li>Dính chặt vào cú pháp của Template, bạn sẽ mất đi một ít tự do bay nhảy bằng javascript thông thường. Sự sáng tạo của chúng ta bị giới hạn trong những thứ mà framework cung cấp. Lỡ đâu bạn đã là một master javascript và bạn thấy cách làm của framework này <em>chuối</em> cả nải và muốn làm khác hơn.</li>\n<li>Cái giá phải trả cho giá trị baseline runtime thấp sẽ là kết quả trả về của mỗi template sẽ dài dòng hơn. Đôi khi để code chạy nhanh nhất có thể, chúng ta phải nhét cứng một số thông tin bên trong output</li>\n</ul>\n<h2 id=\"cơ-chế-state\"><a href=\"#c%C6%A1-ch%E1%BA%BF-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cơ chế State</h2>\n<blockquote>\n<p>mutable vs immutable, dirty checking vs dependency tracking, reactivity vs simulated reactivity</p>\n</blockquote>\n<p>Rất tiếc, Evan You không có thời gian trình bài phần này trong bài thuyết trình của mình.</p>\n<h2 id=\"tổng-kết\"><a href=\"#t%E1%BB%95ng-k%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tổng kết</h2>\n<p>Nếu bạn đang muốn chọn một framework một cách hợp lý, bạn phải hiểu được những gì mà framework đó đang đánh đổi, biết hướng đi của framework đó có khớp với những gì bạn ưu tiên hàng đầu cho dự án mình làm.</p>\n<p>Các bạn có thể xem Video bài thuyết trình của Evan You <a href=\"https://www.youtube.com/watch?v=ANtSWq-zI0s\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ở đây</a></p>\n","cover_image":""}},{"node":{"id":"77a81e0c87ac4c028e3855b09ed9acca","title":"Làm sao để fetch dữ liệu bằng React Hook","path":"/lam-sao-de-fetch-du-lieu-bang-react-hook/","date":"2019-11-18","timeToRead":11,"desc":"Trong bài này chúng ta sẽ sử dụng React.useState, React.useEffect, React.useReducer để fetch dữ liệu từ API, đồng thời cũng viết một custom hook để có thể sử dụng ở bất kỳ đâu","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#g%e1%bb%8di-hook-th%e1%bb%a7-c%c3%b4ngb%e1%ba%b1ng-code\">Gọi hook thủ công/bằng code</a></li>\n<li><a href=\"#loading-indicator\">Loading indicator</a></li>\n<li><a href=\"#handle-error\">Handle Error</a></li>\n<li><a href=\"#fetch-data-v%e1%bb%9bi-form\">Fetch data với Form</a></li>\n<li><a href=\"#custom-hook-%c4%91%e1%bb%83-fetch-data\">Custom hook để Fetch data</a></li>\n<li><a href=\"#reducer-hook\">Reducer hook</a></li>\n<li><a href=\"#b%e1%bb%8f-qua-vi%e1%bb%87c-fetch-data\">Bỏ qua việc fetch data</a></li>\n</ul>\n<!-- /TOC -->\n<p>Chúng ta có một component, dữ liệu của component này sẽ được lấy từ API</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hits<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span><span class=\"token property-access\">hits</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span><span class=\"token property-access\">objectID</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">App</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chúng ta sẽ sử dụng axios để fetch dữ liệu, bạn thích xài cái khác thì cứ vô tư</p>\n<pre class=\"language-jsx{7-12}\"><code class=\"language-jsx{7-12}\">import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [data, setData] = useState({ hits: [] });\n  \n  useEffect(async () => {\n    const result = await axios(\n      'https://hn.algolia.com/api/v1/search?query=redux',\n    );\n    setData(result.data);\n  });\n\n  return (\n    <ul>\n      {data.hits.map(item => (\n        <li key={item.objectID}>\n          <a href={item.url}>{item.title}</a>\n        </li>\n      ))}\n    </ul>\n  );\n}\nexport default App;</code></pre>\n<p>Bên trong <code class=\"language-text\">React.useEffect</code> chúng ta sẽ thực hiện việc fetch data từ API, sau khi nhận được dữ liệu gán giá trị nhận được cho giá trị của state <code class=\"language-text\">data</code></p>\n<p>Nếu dừng ở đây, khi chạy bạn sẽ thấy một vòng lặp vô tận của việc gọi fetch data. Effect sẽ chạy không chỉ ở lúc component mount mà còn ở các lần update tiếp theo. Bởi vì chúng ta gán giá trị state trên mỗi lần fetch, component lại được update và effect lại được gọi lại để chạy. Chúng ta chỉ muốn <strong>fetch data khi component mount lần đầu tiên</strong>. Đó là lý do chúng ta phải thêm một mảng rỗng vào tham số thứ hai của effect, như vậy các lần update tiếp theo nó sẽ không được gọi.</p>\n<pre class=\"language-js{12}\"><code class=\"language-js{12}\">import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [data, setData] = useState({ hits: [] });\n  \n  useEffect(async () => {\n    const result = await axios(\n      'https://hn.algolia.com/api/v1/search?query=redux',\n    );\n    setData(result.data);\n  }, []);\n  \n  return (\n    <ul>\n      {data.hits.map(item => (\n        <li key={item.objectID}>\n          <a href={item.url}>{item.title}</a>\n        </li>\n      ))}\n    </ul>\n  );\n}\nexport default App;</code></pre>\n<p>Tham số thứ 2 truyền vào cho effect này là danh sách những giá trị nào mà hook phụ thuộc, tức nếu các giá trị này thay đổi thì effect được gọi lại. Bỏ array trống sẽ không còn chuyện chạy ở lần update.</p>\n<p>Trong đoạn code trên vẫn còn một chỗ phải chỉnh sửa, chúng ta sử dụng <code class=\"language-text\">async/await</code>, <em>theo như định nghĩa</em>, tất cả những hàm nào là <code class=\"language-text\">async</code> sẽ được ngầm hiểu là trả về một <code class=\"language-text\">Promise</code>. Tuy nhiên, cũng <em>theo như định nghĩa</em> effect hook không được trả về gì cả, hoặc một function để clean up (xem lại bài nói về Hook Effect, có giải thích 2 loại Effect Hook).</p>\n<p>Nên bạn mà copy đoạn trên mà chạy thì sẽ nhận thông báo bên dưới console. Không thể sử dụng async function bên trong <code class=\"language-text\">React.useEffect</code>, chúng ta sửa lại</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'https://hn.algolia.com/api/v1/search?query=redux'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Để fetch dữ liệu bằng <code class=\"language-text\">React.useEffect</code> có thể tóm gọn như ở trên. Chúng ta sẽ tiếp tục xem cách handle error, loading indicator, gọi fetch từ form và làm thế nào tái sử dụng hook để fetch</p>\n<h2 id=\"gọi-hook-thủ-côngbằng-code\"><a href=\"#g%E1%BB%8Di-hook-th%E1%BB%A7-c%C3%B4ngb%E1%BA%B1ng-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gọi hook thủ công/bằng code</h2>\n<p>Chúng ta đã xong phần fetch dữ liệu một lần lúc component mount. Nhưng làm thế nào để fetch dữ liệu khi có sự kiện từ user, ví dụ ô search, khi user nhập lấy danh sách kết quả tìm kiếm. Ví dụ bên dưới mặc định sẽ hiển thị kết quả cho từ khóa <code class=\"language-text\">redux</code>, nếu user nhập vào một giá trị khác, chúng ta cần làm sao để chạy <code class=\"language-text\">useEffect</code> một lần nữa</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Fragment</span><span class=\"token punctuation\">,</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">axios</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hits<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>query<span class=\"token punctuation\">,</span> setQuery<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'redux'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'https://hn.algolia.com/api/v1/search?query=redux'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>query<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">event</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setQuery</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span><span class=\"token property-access\">hits</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span><span class=\"token property-access\">objectID</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">App</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Với nhu cầu như trên, chúng ta cần cập nhập lại <code class=\"language-text\">useEffect</code></p>\n<pre class=\"language-js{4}\"><code class=\"language-js{4}\">useEffect(() => {\n  const fetchData = async () => {\n    const result = await axios(\n      `http://hn.algolia.com/api/v1/search?query=${query}`,\n    );\n    setData(result.data);\n  };\n  fetchData();\n}, []);</code></pre>\n<p>Tuy nhiên, nếu chỉ như vậy, hàm <code class=\"language-text\">fetchData</code> sẽ không được gọi khi user input một giá trị mới vào ô tìm kiếm. Vì chúng ta đã truyền vào một mảng rỗng vào cho giá trị <code class=\"language-text\">depend</code> của effect, nên nó chỉ chạy lần đầu mount</p>\n<pre class=\"language-js{9}\"><code class=\"language-js{9}\">useEffect(() => {\n  const fetchData = async () => {\n    const result = await axios(\n      `http://hn.algolia.com/api/v1/search?query=${query}`,\n    );\n    setData(result.data);\n  };\n  fetchData();\n}, [query]);</code></pre>\n<p>Có một vấn đề khác, user cứ nhập một ký tự, câu <code class=\"language-text\">fetchData</code> lại được gọi, gọi liên tục như vậy không hay, thêm vào một nút để user click vào mới thực hiện search thì sao</p>\n<pre class=\"language-jsx{4,23,24,25}\"><code class=\"language-jsx{4,23,24,25}\">function App() {\n  const [data, setData] = useState({ hits: [] });\n  const [query, setQuery] = useState('redux');\n  const [search, setSearch] = useState('');\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(\n        `http://hn.algolia.com/api/v1/search?query=${query}`,\n      );\n      setData(result.data);\n    };\n    fetchData();\n  }, [query]);\n  \n  return (\n    <Fragment>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={event => setQuery(event.target.value)}\n      />\n      <button type=\"button\" onClick={() => setSearch(query)}>\n        Search\n      </button>\n      <ul>\n        {data.hits.map(item => (\n          <li key={item.objectID}>\n            <a href={item.url}>{item.title}</a>\n          </li>\n        ))}\n      </ul>\n    </Fragment>\n  );\n}</code></pre>\n<p>Giờ effect phải phụ thuộc vào <code class=\"language-text\">search</code>, không chạy khi user nhập vào input</p>\n<pre class=\"language-js{4,9,14}\"><code class=\"language-js{4,9,14}\">function App() {\n  const [data, setData] = useState({ hits: [] });\n  const [query, setQuery] = useState('redux');\n  const [search, setSearch] = useState('redux');\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(\n        `http://hn.algolia.com/api/v1/search?query=${search}`,\n      );\n      setData(result.data);\n    };\n    fetchData();\n  }, [search]);\n  \n  return (\n    ...\n  );\n}</code></pre>\n<p>Nhưng nếu sửa như vậy, trường hợp component được mount lần đầu, nó sẽ không có hiển thị kết quả cho từ khóa <code class=\"language-text\">redux</code> nữa. Nếu dùng thềm một <code class=\"language-text\">useEffect</code> khác cho trường hợp chạy lúc đầu sẽ gây nhầm lẫn, không rõ ràng, thay vào đó nếu chúng ta xem search state là nguyên cái <code class=\"language-text\">url</code> sẽ đơn giản hơn</p>\n<pre class=\"language-jsx{4,5,6,10,16,28}\"><code class=\"language-jsx{4,5,6,10,16,28}\">function App() {\n  const [data, setData] = useState({ hits: [] });\n  const [query, setQuery] = useState('redux');\n  const [url, setUrl] = useState(\n    'https://hn.algolia.com/api/v1/search?query=redux',\n  );\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(url);\n      \n      setData(result.data);\n    };\n    \n    fetchData();\n  }, [url]);\n  \n  return (\n    <Fragment>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={event => setQuery(event.target.value)}\n      />\n      <button\n        type=\"button\"\n        onClick={() =>\n          setUrl(`http://hn.algolia.com/api/v1/search?query=${query}`)\n        }\n      >\n        Search\n      </button>\n      <ul>\n        {data.hits.map(item => (\n          <li key={item.objectID}>\n            <a href={item.url}>{item.title}</a>\n          </li>\n        ))}\n      </ul>\n    </Fragment>\n  );\n}</code></pre>\n<h2 id=\"loading-indicator\"><a href=\"#loading-indicator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Loading indicator</h2>\n<p>Một nhu cầu khác cũng hay gặp là trong lúc fetch data từ API, chúng ta cần biết trạng thái loading tới đâu rồi, chúng ta sẽ bổ sung thêm state <code class=\"language-text\">isLoading</code></p>\n<pre class=\"language-jsx{7,11,16}\"><code class=\"language-jsx{7,11,16}\">function App() {\n  const [data, setData] = useState({ hits: [] });\n  const [query, setQuery] = useState('redux');\n  const [url, setUrl] = useState(\n    'https://hn.algolia.com/api/v1/search?query=redux',\n  );\n  const [isLoading, setIsLoading] = useState(false);\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      \n      const result = await axios(url);\n      \n      setData(result.data);\n      setIsLoading(false);\n    };\n    fetchData();\n  }, [url]);\n  \n  return (\n    <Fragment>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={event => setQuery(event.target.value)}\n      />\n      <button\n        type=\"button\"\n        onClick={() =>\n          setUrl(`http://hn.algolia.com/api/v1/search?query=${query}`)\n        }\n      >\n        Search\n      </button>\n      {isLoading ? (\n        <div>Loading ...</div>\n      ) : (\n        <ul>\n          {data.hits.map(item => (\n            <li key={item.objectID}>\n              <a href={item.url}>{item.title}</a>\n            </li>\n          ))}\n        </ul>\n      )}\n    </Fragment>\n  );\n}\nexport default App;</code></pre>\n<h2 id=\"handle-error\"><a href=\"#handle-error\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Handle Error</h2>\n<p>Cũng tương tự như loading, chúng ta sẽ bổ sung thêm state <code class=\"language-text\">isError</code> để xác định việc fetch dữ liệu có bị lỗi không</p>\n<pre class=\"language-jsx{8,12,20}\"><code class=\"language-jsx{8,12,20}\">function App() {\n  const [data, setData] = useState({ hits: [] });\n  const [query, setQuery] = useState('redux');\n  const [url, setUrl] = useState(\n    'https://hn.algolia.com/api/v1/search?query=redux',\n  );\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n      \n      try {\n        const result = await axios(url);\n        \n        setData(result.data);\n      } catch (error) {\n        setIsError(true);\n      }\n      \n      setIsLoading(false);\n    };\n    fetchData();\n  }, [url]);\n  return (\n    <Fragment>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={event => setQuery(event.target.value)}\n      />\n      <button\n        type=\"button\"\n        onClick={() =>\n          setUrl(`http://hn.algolia.com/api/v1/search?query=${query}`)\n        }\n      >\n        Search\n      </button>\n      {isError && <div>Something went wrong ...</div>}\n      {isLoading ? (\n        <div>Loading ...</div>\n      ) : (\n        <ul>\n          {data.hits.map(item => (\n            <li key={item.objectID}>\n              <a href={item.url}>{item.title}</a>\n            </li>\n          ))}\n        </ul>\n      )}\n    </Fragment>\n  );\n}</code></pre>\n<h2 id=\"fetch-data-với-form\"><a href=\"#fetch-data-v%E1%BB%9Bi-form\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Fetch data với Form</h2>\n<p>Nãy giờ chúng ta chỉ fetch data với bằng input và button. Khi có nhiều element hơn, chúng ta sẽ đưa nó vào <code class=\"language-text\">form</code> để có thể trigger form submit bằng cách nhấn Enter</p>\n<pre class=\"language-jsx{5,6,7,8,9,10,16,17}\"><code class=\"language-jsx{5,6,7,8,9,10,16,17}\">function App() {\n  ...\n  return (\n    <Fragment>\n      <form\n        onSubmit={event =>\n          setUrl(`http://hn.algolia.com/api/v1/search?query=${query}`)\n          event.preventDefault();\n        }\n      >\n        <input\n          type=\"text\"\n          value={query}\n          onChange={event => setQuery(event.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {isError && <div>Something went wrong ...</div>}\n      ...\n    </Fragment>\n  );\n}</code></pre>\n<h2 id=\"custom-hook-để-fetch-data\"><a href=\"#custom-hook-%C4%91%E1%BB%83-fetch-data\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Custom hook để Fetch data</h2>\n<p>Để tái sử dụng được các đoạn code liên quan đến việc fetch data, chúng ta sẽ đưa nó ra thành một custom hook, các giá trị liên quan trực tiếp đến việc fetch data, cụ thể là loading, error chúng ta cũng đưa vào trong custom hook</p>\n<pre class=\"language-js{1,24}\"><code class=\"language-js{1,24}\">const useHackerNewsApi = () => {\n  const [data, setData] = useState({ hits: [] });\n  const [url, setUrl] = useState(\n    'https://hn.algolia.com/api/v1/search?query=redux',\n  );\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n      try {\n        const result = await axios(url);\n        setData(result.data);\n      } catch (error) {\n        setIsError(true);\n      }\n      setIsLoading(false);\n    };\n    \n    fetchData();\n  }, [url]);\n  \n  return [{ data, isLoading, isError }, setUrl];\n}</code></pre>\n<p>Sử dụng bên trong App Component</p>\n<pre class=\"language-jsx{3,8}\"><code class=\"language-jsx{3,8}\">function App() {\n  const [query, setQuery] = useState('redux');\n  const [{ data, isLoading, isError }, doFetch] = useHackerNewsApi();\n  \n  return (\n    <Fragment>\n      <form onSubmit={event => {\n        doFetch(`http://hn.algolia.com/api/v1/search?query=${query}`);\n        event.preventDefault();\n      }}>\n        <input\n          type=\"text\"\n          value={query}\n          onChange={event => setQuery(event.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      ...\n    </Fragment>\n  );\n}</code></pre>\n<p>Giá trị state lúc khởi tạo của thể đưa vào như một tham số truyền vào cho custom hook luôn</p>\n<pre class=\"language-jsx{5,6}\"><code class=\"language-jsx{5,6}\">import React, { Fragment, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useDataApi = (initialUrl, initialData) => {\n  const [data, setData] = useState(initialData);\n  const [url, setUrl] = useState(initialUrl);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n      try {\n        const result = await axios(url);\n        setData(result.data);\n      } catch (error) {\n        setIsError(true);\n      }\n      setIsLoading(false);\n    };\n    \n    fetchData();\n  }, [url]);\n  \n  return [{ data, isLoading, isError }, setUrl];\n};\n\nfunction App() {\n  const [query, setQuery] = useState('redux');\n  const [{ data, isLoading, isError }, doFetch] = useDataApi(\n    'https://hn.algolia.com/api/v1/search?query=redux',\n    { hits: [] },\n  );\n  \n  return (\n    <Fragment>\n      <form\n        onSubmit={event => {\n          doFetch(\n            `http://hn.algolia.com/api/v1/search?query=${query}`,\n          );\n          event.preventDefault();\n        }}\n      >\n        <input\n          type=\"text\"\n          value={query}\n          onChange={event => setQuery(event.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {isError && <div>Something went wrong ...</div>}\n      {isLoading ? (\n        <div>Loading ...</div>\n      ) : (\n        <ul>\n          {data.hits.map(item => (\n            <li key={item.objectID}>\n              <a href={item.url}>{item.title}</a>\n            </li>\n          ))}\n        </ul>\n      )}\n    </Fragment>\n  );\n}\nexport default App;</code></pre>\n<h2 id=\"reducer-hook\"><a href=\"#reducer-hook\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reducer hook</h2>\n<p>Với cái custom hook để fetch data như ở trên, chúng ta thấy có 2 state <code class=\"language-text\">isLoading</code>, <code class=\"language-text\">isError</code> quan hệ khá <em>mật thiết</em> với nhau, có thể hợp nhất 2 đứa nó lại bằng <code class=\"language-text\">React.useReducer</code></p>\n<pre class=\"language-jsx{5,9,10,11,16,17,18,19}\"><code class=\"language-jsx{5,9,10,11,16,17,18,19}\">import React, {\n  Fragment,\n  useState,\n  useEffect,\n  useReducer,\n} from 'react';\nimport axios from 'axios';\n\nconst dataFetchReducer = (state, action) => {\n  ...\n};\n\nconst useDataApi = (initialUrl, initialData) => {\n  const [url, setUrl] = useState(initialUrl);\n  \n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialData,\n  });\n  ...\n};</code></pre>\n<p><code class=\"language-text\">React.useReducer</code> sẽ nhận vào một hàm reducer (công dụng tương tự như hàm reducer của redux ấy) và các giá trị khởi tạo của state, trong trường hợp của chúng ta là <code class=\"language-text\">isLoading</code> và <code class=\"language-text\">isError</code>. Việc này chẳng qua là gom tất cả state liên quan vào một object cho nó <em>tinh tế</em> thôi, thay vì từng state riêng biệt như sử dụng <code class=\"language-text\">useState</code></p>\n<pre class=\"language-js{16,19,21}\"><code class=\"language-js{16,19,21}\">const dataFetchReducer = (state, action) => {\n  ...\n};\n\nconst useDataApi = (initialUrl, initialData) => {\n  const [url, setUrl] = useState(initialUrl);\n  \n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialData,\n  });\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      dispatch({ type: 'FETCH_INIT' });\n      try {\n        const result = await axios(url);\n        dispatch({ type: 'FETCH_SUCCESS', payload: result.data });\n      } catch (error) {\n        dispatch({ type: 'FETCH_FAILURE' });\n      }\n    };\n    fetchData();\n  }, [url]);\n  \n  ...\n};</code></pre>\n<p>Mình đã bảo rồi, nó sẽ giống như cái reducer trong redux thôi, chúng ta <code class=\"language-text\">dispatch</code> một object gồm <code class=\"language-text\">type</code> và <code class=\"language-text\">payload</code>, căn cứ vào payload mà chúng ta xử lý, cập nhập state</p>\n<p>Cuối cùng chúng ta cập nhập lại giá trị trả về của custom hook nữa</p>\n<pre class=\"language-jsx{12}\"><code class=\"language-jsx{12}\">const useDataApi = (initialUrl, initialData) => {\n  const [url, setUrl] = useState(initialUrl);\n  \n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialData,\n  });\n  \n  ...\n  \n  return [state, setUrl];\n};</code></pre>\n<p>Cuối cùng, không kém phần quan trọng, phần code thực hiện bên trong <code class=\"language-text\">dataFetchReducer</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dataFetchReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'FETCH_INIT'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token spread operator\">...</span>state<span class=\"token punctuation\">,</span>\n        isLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        isError<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'FETCH_SUCCESS'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token spread operator\">...</span>state<span class=\"token punctuation\">,</span>\n        isLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        isError<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">payload</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'FETCH_FAILURE'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token spread operator\">...</span>state<span class=\"token punctuation\">,</span>\n        isLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        isError<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"bỏ-qua-việc-fetch-data\"><a href=\"#b%E1%BB%8F-qua-vi%E1%BB%87c-fetch-data\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bỏ qua việc fetch data</h2>\n<p>Tình huống là khi user chuyển qua một route khác, khi đang fetch data, việc gọi fetch ko cần thiết và có thể bỏ qua</p>\n<pre class=\"language-jsx{11,17,21,29}\"><code class=\"language-jsx{11,17,21,29}\">const useDataApi = (initialUrl, initialData) => {\n  const [url, setUrl] = useState(initialUrl);\n  \n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialData,\n  });\n  \n  useEffect(() => {\n    let didCancel = false;\n    \n    const fetchData = async () => {\n      dispatch({ type: 'FETCH_INIT' });\n      try {\n        const result = await axios(url);\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_SUCCESS', payload: result.data });\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_FAILURE' });\n        }\n      }\n    };\n    \n    fetchData();\n    \n    return () => {\n      didCancel = true;\n    };\n    \n  }, [url]);\n  \n  return [state, setUrl];\n};</code></pre>\n<p>Với việc return một function ở cuối của <code class=\"language-text\">React.useEffect</code>, tên gọi các bạn React đặt là clean up function, nằm trong kiểu effect cần clean up - nói thật mình phát mệt với việc các bạn trong team React cứ thích <em>chế</em> thêm liên tục như vậy.</p>\n<blockquote>\n<p>Nói theo cách của mình đi, nếu bạn return một function ở cuối của <code class=\"language-text\">React.useEffect</code> nó sẽ chạy khi component bị unmount.</p>\n</blockquote>\n<p>Source code có thể tham khảo đầy đủ <a href=\"https://github.com/the-road-to-learn-react/use-data-api/blob/master/src/index.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ở đây</a></p>\n<p><a href=\"https://www.robinwieruch.de/react-hooks-fetch-data\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.robinwieruch.de/react-hooks-fetch-data</a></p>\n","cover_image":""}},{"node":{"id":"60f676e05ffae4b7f782d83aa26725a8","title":"Tại sao lại sinh ra React hook","path":"/tai-sao-lai-sinh-ra-react-hook/","date":"2019-11-17","timeToRead":9,"desc":"Tại sao và lợi ích mà react hook đem lại là gì, mà thiên hạ cứ rần rần lên vậy?","content":"<!-- TOC -->\n<ul>\n<li>\n<p><a href=\"#l%e1%bb%8bch-s%e1%bb%ad\">Lịch sử</a></p>\n<ul>\n<li><a href=\"#th%c3%a1ng-5-2013\">Tháng 5, 2013</a></li>\n<li><a href=\"#th%c3%a1ng-gi%c3%aang-2015\">Tháng giêng, 2015</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#v%e1%ba%a5n-%c4%91%e1%bb%81-t%e1%bb%93n-%c4%91%e1%bb%8dng\">Vấn đề tồn đọng</a></p>\n<ul>\n<li><a href=\"#logic-tr%c3%b9ng-l%e1%ba%b7p\">Logic trùng lặp</a></li>\n<li><a href=\"#chia-s%e1%ba%bd-logic\">Chia sẽ logic</a></li>\n</ul>\n</li>\n<li><a href=\"#gi%e1%ba%a3i-quy%e1%ba%bft\">Giải quyết</a></li>\n</ul>\n<!-- /TOC -->\n<p>Qua bài viết này chúng ta sẽ cùng trả lời 2 câu hỏi bạn cần đặt ra khi tiếp cận một <strong>đồ chơi mới</strong> như React Hook</p>\n<ol>\n<li>Tại sao nó lại tồn tại trên trái đất này?</li>\n<li>Nó tồn tại trên trái đất này có lợi ích gì không?</li>\n</ol>\n<h2 id=\"lịch-sử\"><a href=\"#l%E1%BB%8Bch-s%E1%BB%AD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lịch sử</h2>\n<h3 id=\"tháng-5-2013\"><a href=\"#th%C3%A1ng-5-2013\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tháng 5, 2013</h3>\n<p>Nếu bạn còn nhớ về cách viết một component trong React bằng <code class=\"language-text\">React.createClass</code>, chứng tỏ bạn đã là già làng trong React, ngày mới ra đời khi javascript không hề có khai báo <code class=\"language-text\">class</code>, chúng ta sẽ khai báo component như thế này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">ReposGrid</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getInitialState</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>      \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">componentDidMount</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">componentDidUpdate</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"tháng-giêng-2015\"><a href=\"#th%C3%A1ng-gi%C3%AAng-2015\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tháng giêng, 2015</h3>\n<p>Tổ chức <em>Ác ma</em> thế giới công bố chuẩn EcmaScript 2015, còn gọi với tên thân thương ES6. <strong>class</strong> chính thức có mặt trong javascript. Đội ngũ phát triển của React lúc đó kết luận, chúng ta <em>không cần phát minh lại cái bánh xe</em> (don't reinvent the wheel), cứ xài theo chuẩn đã có. Thế là từ đó chúng ta khai báo component bằng <code class=\"language-text\">class extends</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ReposGrid</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      repos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">updateRepos</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updateRepos</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidMount</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidUpdate</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Khi khai báo component bằng <code class=\"language-text\">class</code>, chúng ta khởi tạo giá trị của <code class=\"language-text\">state</code> bên trong phương thức <code class=\"language-text\">constructor</code> và nó sẽ được nhét vào trong <code class=\"language-text\">this</code>. Tuy nhiên, với cách khai báo đã <em>quốc tế hóa</em> của <code class=\"language-text\">class</code>, nếu chúng ta <code class=\"language-text\">extends</code> từ một <code class=\"language-text\">class</code>, chúng ta phải gọi <code class=\"language-text\">super()</code> trước khi có thể sử dụng <code class=\"language-text\">this</code>. Và riêng với React, chúng ta còn phải truyền thêm <code class=\"language-text\">props</code> vào trong <code class=\"language-text\">super</code>. Các bạn lập trình viên <em>phát bệnh</em> vì cách viết chướng mắt này.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 🤮</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Ngày xưa khi dùng <code class=\"language-text\">createClass</code> của React, bên trong hàm đó nó sẽ làm luôn chuyện binding toàn bộ <code class=\"language-text\">this</code> vào các phương thức cho một instance của component. Tuy nhiên khi viết <code class=\"language-text\">extends React.Component</code> chuyện đó ko còn tự động xảy ra <em>như phép màu</em> nữa, chúng ta phải đi <code class=\"language-text\">.bind</code> từng phương thức một trong <code class=\"language-text\">constructor</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">updateRepos</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updateRepos</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 😭</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu nhìn vào các bạn sẽ nói, ồ cái này chả to tác gì đâu, chỉ là phải viết thêm mấy dòng ấy mà. Cũng vì lầm đường lạc lối theo class <em>Ác ma</em> mà React bị ko biết bao nhiều lời phàn nàn từ những lập trình viên khắp mọi nơi.</p>\n<p>Hên sao, không lâu sau đó Class Field được thêm vào trong <code class=\"language-text\">class</code>, chúng ta có thể khai báo một biến bên trong <code class=\"language-text\">class</code> mà không cần dùng <code class=\"language-text\">constructor</code>, thay vì <code class=\"language-text\">.bind</code> chúng ta dùng arrow function</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ReposGrid</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n  <span class=\"token function-variable function\">updateRepos</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"vấn-đề-tồn-đọng\"><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81-t%E1%BB%93n-%C4%91%E1%BB%8Dng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vấn đề tồn đọng</h2>\n<p>Vấn đề đã được giải quyết tương đối ổn thỏa? Tuy nhiên vẫn còn vấn đề khác React team cảm thấy chưa hài lòng lắm phiên bản hiện tại.</p>\n<p>Ý tưởng chính của React là để chúng ta có thể quản lý những ứng dụng phức tạp bằng cách chia ra thành từng component nhỏ rồi <em>kết hợp</em> (compose) lại với nhau. Đây là cách làm tạo ra <em>thương hiệu</em> sáng ngời của React. Cách tiếp cận theo kiểu component chả có vấn đề gì, cách <strong>hiện thực</strong> những component hiện tại đang có vấn đề.</p>\n<h3 id=\"logic-trùng-lặp\"><a href=\"#logic-tr%C3%B9ng-l%E1%BA%B7p\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Logic trùng lặp</h3>\n<p>Trước đây chúng ta thiết kế component dựa rất nhiều vào component lifecycle. Chúng ta đặt để logic vào trong các từng lifecycle này, thí dụ như chúng ta cần phải gọi cùng một hàm bên trong cả 2 phương thức lifecycle <code class=\"language-text\">componentDidMount</code>, <code class=\"language-text\">componentDidUpdate</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentDidMount</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updateRepos</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">componentDidUpdate</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updateRepos</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function-variable function\">updateRepos</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">fetchRepos</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">repos</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      repos<span class=\"token punctuation\">,</span>\n      loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Để giải quyết vấn đề side effect (hàm <code class=\"language-text\">fetchRepos</code> làm cái quần gì ở ngoài đường ai mà biết, rõ ràng nó không thuộc phạm vi quản lý của component). Chúng ta <strong>cần một cách tiếp cận khác không thể sử dụng lifecycle nữa</strong></p>\n<h3 id=\"chia-sẽ-logic\"><a href=\"#chia-s%E1%BA%BD-logic\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chia sẽ logic</h3>\n<p>Khi nghĩ về sự kết hợp giữa các component trong React, chúng ta sẽ nghĩ về cách các đối tượng UI kết hợp với nhau.</p>\n<pre class=\"language-js\"><code class=\"language-js\">view <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span></code></pre>\n<p>Trong thực tế, viết một ứng dụng không phải chỉ bao gồm tầng UI, rất nhiều trường hợp chúng ta cần <strong>tái sử dụng logic, kết hợp các logic lại với nhau</strong>. Trước đây React chưa hề có cách nào đáp ứng được nhu cầu này.</p>\n<p>Ví dụ nếu có một component khác, nó cũng cần xài biến state <code class=\"language-text\">repos</code> và tất cả những logic liên quan, mà những cái đó nó đang nằm bên trong component <code class=\"language-text\">ReposGrid</code>. Làm sao chúng ta lấy ra xài lại? Cách bình thường là chúng ta copy-paste toàn bộ code bên trong qua một component mới. Cũng nhiều người làm vậy, ai có kinh nghiệm hơn thì dùng Higher-Order Component</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">withRepos</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WithRepos</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      repos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">componentDidMount</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updateRepos</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">componentDidUpdate</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updateRepos</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function-variable function\">updateRepos</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token function\">fetchRepos</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">repos</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          repos<span class=\"token punctuation\">,</span>\n          loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span>\n          <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">this</span><span class=\"token punctuation\">.</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">this</span><span class=\"token punctuation\">.</span><span class=\"token attr-value\">state</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Rồi giờ có bất kỳ component nào muốn dùng <code class=\"language-text\">repos</code> thì cứ mẹ-bồng-con thế này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ReposGrid.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ReposGrid</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> repos <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\">withRepos</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">ReposGrid</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Profile.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Profile</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> repos <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\">withRepos</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Profile</span><span class=\"token punctuation\">)</span></code></pre>\n<p><em>Hồi xưa</em> chúng ta hay làm vậy, hoặc là dùng Render Props để chia sẻ những logic dùng tới dùng lui. Tuy nhiên, đây là cách tiếp cận không dành cho dân nghiệp dư, vì không phải dễ mà hiểu được cách tụi HOC nó chạy, thứ 2 nếu bạn cho chục mẹ bồng một đứa con thì sẽ sinh ra chuyện <code class=\"language-text\">wrapper hell</code> giống như callback hell</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\">withHover</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">withTheme</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">withAuth</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">withRepos</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Profile</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Vận động não để hiểu đoạn này chạy kết quả thể nào</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WithHover</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WithTheme</span> <span class=\"token attr-name\">hovering</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{false}</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WithAuth</span> <span class=\"token attr-name\">hovering</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{false}</span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>dark<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WithRepos</span> <span class=\"token attr-name\">hovering</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{false}</span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>dark<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">authed</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{true}</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Profile</span> \n          <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>JavaScript<span class=\"token punctuation\">'</span></span>\n          <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{true}</span> \n          <span class=\"token attr-name\">repos</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{[]}</span>\n          <span class=\"token attr-name\">authed</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{true}</span>\n          <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>dark<span class=\"token punctuation\">'</span></span>\n          <span class=\"token attr-name\">hovering</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{false}</span>\n        <span class=\"token punctuation\">/></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>WithRepos</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>WithAuth</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WithTheme</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>WithHover</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Tóm lại những vấn đề trước mặt cần giải quyết là gì</p>\n<ul>\n<li>gọi <code class=\"language-text\">super(props)</code> là quá xàm xí đú</li>\n<li><code class=\"language-text\">this</code> là thứ mơ hồ mà không dễ biết cách nó hoạt động, bạn có thể là chuyên gia và biết đấy, nhưng chúng ta tuân thủ nguyên tắc khi code <strong>KISS</strong>, ngu ngốc nhất có thể, đừng tỏ ra thông minh</li>\n<li>Tổ chức logic theo các phương thức lifecycle không còn hợp lý hợp tình</li>\n<li>React chưa có câu trả lời chính thức nào cho việc chia sẻ logic (HOC là từ pattern của javascript, không phải đặc sản nhà React, nên không tính)</li>\n</ul>\n<h2 id=\"giải-quyết\"><a href=\"#gi%E1%BA%A3i-quy%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giải quyết</h2>\n<p>Từ React 0.14 chúng ta có 2 cách tạo component, dùng class hoặc dùng function. Nếu cần state và các lifecycle thì dùng class, nếu chỉ nhận props rồi trả về UI thì dùng function. Đó là cách chúng ta được dạy.</p>\n<p>Bác CTO John Carmack nói, em xin lỗi sửa câu văn của bác chút</p>\n<blockquote>\n<p>Tụi bây dẹp phương thức, class, framework hết dùm tao cái, Dùng hết function đi</p>\n</blockquote>\n<p>React team, chân lý đây rồi, chúng ta tìm cách biến function component đáp ứng được những gì class component làm được đi.</p>\n<p>Với function component, chúng ta chả cần quan tâm tới <code class=\"language-text\">super(props)</code>, <code class=\"language-text\">this</code> chạy thế nào. Chúng ta sẽ bổ sung state, giải quyết lifecycle, chia sẻ logic nữa là xong.</p>\n<p>Và thế là các hook của React ra đời: <code class=\"language-text\">useState</code>, <code class=\"language-text\">useEffect</code>, custom hook</p>\n<p>Để sử dụng state, chúng ta dùng hook là <code class=\"language-text\">React.useState</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ReposGrid</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> repos<span class=\"token punctuation\">,</span> setRepos <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> loading<span class=\"token punctuation\">,</span> setLoading <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Lifecycle thì có thể bạn sẽ buồn (hoặc vui) khi nghe tin này. Nếu bắt đầu sử dụng React hook, function component, dẹp hết những gì bạn đã từng biết về lifecycle của component đi, quên đi những việc cần làm ở giai đoạn này, giai đoạn kia của component. Bạn hay tiếp cận <em>cách tư duy khác</em> hoàn toàn <strong>Đồng bộ hóa</strong></p>\n<p>Thử nghĩ những gì bạn làm ở một sự kiện của lifecycle, có thể là đổi state, fetch dữ liệu, cập nhập DOM, tất cả đều gom về một mục đích duy nhất <strong>Đồng bộ hóa</strong>. Những gì chúng ta cần đồng bộ thường là những thứ nằm ngoài React (gọi API, DOM, đại loại như thế) với những thứ bên trong React (state) hoặc ngược lại</p>\n<p>Khi tiếp cận theo hướng đồng bộ hóa thay vì lifecycle event, nó cho phép chúng ta gom các logic liên quan lại với nhau. Để làm việc đó React cho chúng ta một Hook gọi là <code class=\"language-text\">React.useEffect</code></p>\n<p>Theo định nghĩa, <code class=\"language-text\">useEffect</code> cho phép chúng ta thực hiện side effect bên trong function component. Hàm này sẽ dùng để <strong>re-sync</strong> (thực hiện đồng bộ hóa các giá trị)</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>username<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>username<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Đoạn code trên sẽ chạy lại bất cứ khi nào giá trị state <code class=\"language-text\">username</code> có thay đổi</p>\n<p>Để gọi lại <code class=\"language-text\">fetchRepos</code> khi có thay đổi từ state <code class=\"language-text\">repos</code> ở ví dụ trên</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ReposGrid</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> repos<span class=\"token punctuation\">,</span> setRepos <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> loading<span class=\"token punctuation\">,</span> setLoading <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">fetchRepos</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">repos</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setRepos</span><span class=\"token punctuation\">(</span>repos<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>loading <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Loading</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Như vậy, chúng ta đã có thể nói lời chia tay mãi mãi với <code class=\"language-text\">React.Component</code>, <code class=\"language-text\">constructor</code>, <code class=\"language-text\">super</code>, <code class=\"language-text\">this</code>, lifecycle</p>\n<p>Còn lại với cuộc chiến chống Higher-Order Component và Render Props. Để dùng lại logic, chúng ta sẽ vẫn dùng Hook, nhưng không phải do React làm sẵn cho <em>xơi</em>, chúng ta phải tự viết những custom Hook</p>\n<p>Giờ chúng ta sẽ viết một custom hook <code class=\"language-text\">useRepos</code>, nó sẽ nhận một <code class=\"language-text\">id</code> lấy dữ liệu tương ứng.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useRepos</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> repos<span class=\"token punctuation\">,</span> setRepos <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> loading<span class=\"token punctuation\">,</span> setLoading <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">fetchRepos</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">repos</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setRepos</span><span class=\"token punctuation\">(</span>repos<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">[</span> loading<span class=\"token punctuation\">,</span> repos <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Điều ngon lành ở đây là tất cả những gì liên quan đến <code class=\"language-text\">repos</code> điều gói gọn trong hook, ở đây mình muốn nói đến <code class=\"language-text\">loading</code>, <code class=\"language-text\">repos</code></p>\n<p>Sử dụng custom hook này trên các component khác nhau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ReposGrid</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> loading<span class=\"token punctuation\">,</span> repos <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRepos</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n\n  <span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Profile</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> loading<span class=\"token punctuation\">,</span> repos <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRepos</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Thật không thể tin được bạn có thể khai báo và setState bên trong một function bình thường. Chúng ta đã có một React mạnh mẽ với các đặc tính sau</p>\n<ul>\n<li>Đơn giản hóa</li>\n<li>Đóng gói</li>\n<li>Linh động</li>\n<li>Mở rộng</li>\n</ul>\n<p>Không những giải quyết vấn đề đang có, như cách mà các bạn làm marketing cho React tuyên truyền: sử dụng Hook để có <code class=\"language-text\">state</code> bên trong function component. Thật ra nó còn mang tới những giá trị to lớn khác là tăng khả năng tái sử dụng và kết hợp logic.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.youtube.com/watch?v=eX_L39UvZes\">📜 Why React Hooks?</a></p>\n","cover_image":""}},{"node":{"id":"fc1ff3b7528e0a068b87722fc19b5e40","title":"Gắn video làm background toàn màn hình","path":"/gan-video-lam-background-toan-man-hinh/","date":"2019-11-12","timeToRead":3,"desc":"Chia sẽ kỹ thuật làm background video để chạy full màn hình","content":"<p>Kết quả các bạn có thể xem trên trang mình mới làm\n<a href=\"http://chat-production.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://chat-production.com/</a></p>\n<p>Để có một cái video chạy toàn màn hình, chúng ta sẽ nghĩ ngay đến việc dùng thẻ <code class=\"language-text\">&lt;video /&gt;</code> của HTML5, đặt nó trong một cái <code class=\"language-text\">&lt;div/&gt;</code> có kích thước <code class=\"language-text\">width: 100%</code>, buồn thay nó không đúng như chúng ta mong đợi.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- HTML --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>videoContainer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">loop</span> <span class=\"token attr-name\">autoplay</span> <span class=\"token attr-name\">muted</span> <span class=\"token attr-name\">playsinline</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/show-reel.mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<blockquote>\n<p>Thêm <code class=\"language-text\">playsinline</code> để có thể chạy trên IOS như iPhone</p>\n</blockquote>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token id\">#container</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span><span class=\"token unit\">vw</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token selector\">video</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token unit\">%</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token unit\">%</span><span class=\"token punctuation\">;</span>   \n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Thứ nhất là nó sẽ không tự scale ra 100% của màn hình, thứ 2 khi chúng ta kéo to thu nhỏ cửa sổ trình duyệt, tỷ lệ khung hình (ngang và đứng) cũng sẽ không đạt đúng tỉ lệ thật của video.</p>\n<p>Để video có thể thay đổi kích thước theo từng giá trị màn hình khác nhau, chúng ta phải dùng đến javascript và css</p>\n<pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">#videoContainer </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token unit\">vh</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">780</span><span class=\"token unit\">px</span><span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span><span class=\"token unit\">vw</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">video </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token unit\">vw</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* canh video ngay giữa */</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token unit\">%</span><span class=\"token punctuation\">;</span> <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token unit\">%</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span><span class=\"token number\">-50</span><span class=\"token unit\">%</span><span class=\"token punctuation\">,</span> <span class=\"token number\">-50</span><span class=\"token unit\">%</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Source này được lấy từ <a href=\"https://codetheory.in/html5-fullscreen-background-video/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codetheory.in/html5-fullscreen-background-video/</a>, mình sử dụng chung với React</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// JS</span>\n  <span class=\"token keyword\">var</span> video <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"video\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    container <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#videoContainer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">setVideoDimensions</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> w <span class=\"token operator\">=</span> video<span class=\"token punctuation\">.</span><span class=\"token property-access\">videoWidth</span><span class=\"token punctuation\">,</span>\n      h <span class=\"token operator\">=</span> video<span class=\"token punctuation\">.</span><span class=\"token property-access\">videoHeight</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Intrinsic Ratio</span>\n    <span class=\"token comment\">// Will be more than 1 if W > H and less if W &lt; H</span>\n    <span class=\"token keyword\">var</span> videoRatio <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">/</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Get the container's computed styles</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// Also calculate the min dimensions required (this will be</span>\n    <span class=\"token comment\">// the container dimensions)</span>\n    <span class=\"token keyword\">var</span> containerStyles <span class=\"token operator\">=</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getComputedStyle</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      minW <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>containerStyles<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getPropertyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      minH <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>containerStyles<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getPropertyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// What's the min:intrinsic dimensions</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// The idea is to get which of the container dimension</span>\n    <span class=\"token comment\">// has a higher value when compared with the equivalents</span>\n    <span class=\"token comment\">// of the video. Imagine a 1200x700 container and</span>\n    <span class=\"token comment\">// 1000x500 video. Then in order to find the right balance</span>\n    <span class=\"token comment\">// and do minimum scaling, we have to find the dimension</span>\n    <span class=\"token comment\">// with higher ratio.</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// Ex: 1200/1000 = 1.2 and 700/500 = 1.4 - So it is best to</span>\n    <span class=\"token comment\">// scale 500 to 700 and then calculate what should be the</span>\n    <span class=\"token comment\">// right width. If we scale 1000 to 1200 then the height</span>\n    <span class=\"token comment\">// will become 600 proportionately.</span>\n    <span class=\"token keyword\">var</span> widthRatio <span class=\"token operator\">=</span> minW <span class=\"token operator\">/</span> w<span class=\"token punctuation\">,</span>\n      heightRatio <span class=\"token operator\">=</span> minH <span class=\"token operator\">/</span> h<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Whichever ratio is more, the scaling</span>\n    <span class=\"token comment\">// has to be done over that dimension</span>\n    <span class=\"token keyword\">let</span> newWidth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> newHeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>widthRatio <span class=\"token operator\">></span> heightRatio<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      newWidth <span class=\"token operator\">=</span> minW<span class=\"token punctuation\">;</span>\n      newHeight <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">ceil</span><span class=\"token punctuation\">(</span>newWidth <span class=\"token operator\">/</span> videoRatio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n      newHeight <span class=\"token operator\">=</span> minH<span class=\"token punctuation\">;</span>\n      newWidth <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">ceil</span><span class=\"token punctuation\">(</span>newHeight <span class=\"token operator\">*</span> videoRatio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    video<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">width</span> <span class=\"token operator\">=</span> newWidth <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span>\n    video<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">height</span> <span class=\"token operator\">=</span> newHeight <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  video<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loadedmetadata\"</span><span class=\"token punctuation\">,</span> setVideoDimensions<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resize\"</span><span class=\"token punctuation\">,</span> setVideoDimensions<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đoạn js trên để đảm bảo kích thước của video được scale ra hết khung hình và thay đổi cho phù hợp khi trình duyệt thay đổi kích thước</p>\n<blockquote>\n<p>Dùng 2 listener <code class=\"language-text\">loadedmetadata</code> trên video và <code class=\"language-text\">resize</code> trên window để chỉnh lại kích thước thẻ video</p>\n</blockquote>\n","cover_image":""}},{"node":{"id":"64a39baff3128120749dac420db892d8","title":"Tại sao lại viết Super(props)","path":"/tai-sao-lai-viet-super-props/","date":"2019-11-10","timeToRead":5,"desc":"Bài cũ, dịch cũng lâu rồi, giờ mới đăng lên trang cá nhân của mình","content":"<p>Nghe nói <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hook</a> đang là trend. Trớ trêu thay, tôi muốn viết bài đầu tiên cho blog này để nói về điều thú vị của <em>class</em> component.</p>\n<p><strong>Vấn đề này <em>không</em> liên quan tới việc sử dụng React một cách hiệu quả. Nhưng bạn sẽ cảm thấy chúng thú vị nếu như bạn muốn tìm hiểu sâu hơn về cách hoạt động.</strong></p>\n<p>Đây là bài đầu tiên.</p>\n<hr>\n<p>Chúng ta đã viết <code class=\"language-text\">super(props)</code> không biết bao nhiêu lần trong đời:</p>\n<pre class=\"language-jsx{3}\"><code class=\"language-jsx{3}\">class Checkbox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isOn: true };\n  }\n  // ...\n}</code></pre>\n<p>Dĩ nhiên, nếu áp dụng <a href=\"https://github.com/tc39/proposal-class-fields\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">class field proposal</a> thì có thể bỏ qua <em>nghi thức</em> này:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Cú pháp này <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#es7-property-initializers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">đã  được hoạch định</a> khi React 0.13 đã hỗ trợ cho plain class năm 2015. KHai báo <code class=\"language-text\">constructor</code> và gọi <code class=\"language-text\">super(props)</code> luôn là kế hoạch tạm thời cho đến khi có một cách khác tốt hơn.</p>\n<p>Quay về ví dụ,  chỉ sử dụng các tính năng của ES2015:</p>\n<pre class=\"language-jsx{3}\"><code class=\"language-jsx{3}\">class Checkbox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isOn: true };\n  }\n  // ...\n}</code></pre>\n<p><strong>Tại sao chúng ta lại gọi <code class=\"language-text\">super</code>? Chúng ta có thể <em>không</em> gọi chúng được không? Nếu chúng ta gọi chúng, thì chuyện gì sẽ xảy ra nếu chúng ta không truyền <code class=\"language-text\">props</code>? Truyền thêm các tham số khác được không?</strong> Cùng tìm hiểu nào.</p>\n<hr>\n<p>Trong JavaScript, <code class=\"language-text\">super</code> để gọi lại constructor của class cha. (Trong ví dụ của chúng ta, nó trỏ về <code class=\"language-text\">React.Component</code>.)</p>\n<p>Điều quan trọng, bạn <strong>không thể sử dụng <code class=\"language-text\">this</code></strong> trong constructor nếu chưa gọi đến constructor của class cha. JavaScript sẽ không để bạn làm việc này:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 🔴  Không thể dùng `this` được</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ✅  Giờ thì dùng được rồi</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Có một lý do chính đáng giải thích vì sao JavaScript phải thực hiện constructor của lớp cha trước khi đụng vào <code class=\"language-text\">this</code>. Hãy xem xét trường hợp sau:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PolitePerson</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🔴  Điều này không cho phép, đọc lý do ở bên dưới</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Chào buổi sáng!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Hãy tưởng tượng, khi bạn có thể dùng <code class=\"language-text\">this</code> trước <code class=\"language-text\">super</code>. Một tháng sau, chúng ta đổi <code class=\"language-text\">greetColleagues</code>, thêm <code class=\"language-text\">this.name</code> khi alert:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Chào buổi sáng!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tên tôi là '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">+</span> <span class=\"token string\">', rất vui được gặp bạn!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>Nhưng chúng ta quên rằng <code class=\"language-text\">this.greetColleagues()</code> được gọi trước <code class=\"language-text\">super()</code>, giá trị <code class=\"language-text\">this.name</code> <strong>chỉ có sau khi gọi <code class=\"language-text\">super()</code></strong>! Lúc này bạn có thể thấy, code như thế này khó để biết được lỗi ở đâu.</p>\n<p>Để tránh những điều như vậy, <strong>JavaScript chỉ định rằng nếu bạn muốn sử dụng <code class=\"language-text\">this</code> bên trong constructor, bạn <em>phải</em> gọi <code class=\"language-text\">super</code> trước.</strong> Để cho thằng cha làm việc của nó! Và điều này cũng áp dụng với các lớp React components:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ✅  Okay, dùng `this` được rồi</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta cùng đến với câu hỏi khác: phải sao phải truyền vào <code class=\"language-text\">props</code>?</p>\n<hr>\n<p>Bạn hãy nghĩ đơn giản rằng khi truyền <code class=\"language-text\">props</code> vào <code class=\"language-text\">super</code> là cần thiết để <code class=\"language-text\">React.Component</code> constructor có thể thiết lập <code class=\"language-text\">this.props</code>:</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Bên trong React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nó thật sự là <a href=\"https://github.com/facebook/react/blob/1d25aa5787d4e19704c049c3cfa985d3b5190e0d/packages/react/src/ReactBaseClasses.js#L22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cách mà chúng tôi thực hiện bên trong React.Component</a>.</p>\n<p>Bằng cách nào đó, nếu bạn gọi <code class=\"language-text\">super()</code> mà không có tham số <code class=\"language-text\">props</code>, bạn vẫn có thể sử dụng <code class=\"language-text\">this.props</code> trong phương thức <code class=\"language-text\">render</code> và các phương thức khác. (Nếu không tin, hãy tự kiểm tra xem!)</p>\n<p>Vậy <em>nó</em> hoạt động như thế nào? Hóa ra <strong>React đã gán <code class=\"language-text\">props</code> cho một instance ngay sau constructor:</strong></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token comment\">// Bên trong React</span>\n  <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  instance<span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></code></pre>\n<p>Thế nên khi bạn quên bỏ thằng <code class=\"language-text\">props</code> vào <code class=\"language-text\">super()</code>, thì trong React bạn vẫn có thể gọi nó sau đó. Có một lý do cho việc này.</p>\n<p>Khi React hỗ trợ thêm class, nó không chỉ hỗ trợ class cho mỗi phiên bản ES6. Mà mục tiêu chính là hỗ trợ nhiều class abstract nhất có thể. <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#other-languages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Không rõ</a> làm thế nào ClojureScript, CoffeeScript, ES6, Fable, Scala.js, TypeScript, hoặc các giải pháp khác định nghĩa component. Vì vậy, React sử dụng <code class=\"language-text\">super()</code> không hề là quan điểm cá nhân.</p>\n<p>Vậy có nghĩa là bạn có thể gọi <code class=\"language-text\">super()</code> thay vì <code class=\"language-text\">super(props)</code>?</p>\n<p><strong>Không. Như vậy rất khó hiểu.</strong> Chắc chắn, React sẽ gán <code class=\"language-text\">this.props</code> <em>sau khi</em>  constructor chạy. Nhưng <code class=\"language-text\">this.props</code> vẫn  là <code class=\"language-text\">undefined</code> <em>giữa</em> lúc gọi <code class=\"language-text\">super</code> và kết thúc constructor:</p>\n<pre class=\"language-jsx{14}\"><code class=\"language-jsx{14}\">// Bên trong React\nclass Component {\n  constructor(props) {\n    this.props = props;\n    // ...\n  }\n}\n\n// Bên trong code của bạn\nclass Button extends React.Component {\n  constructor(props) {\n    super(); // 😬 Chúng ta không truyền vào props\n    console.log(props);      // ✅ {}\n    console.log(this.props); // 😬 undefined - chưa định nghĩa \n  }\n  // ...\n}</code></pre>\n<p>Việc debug sẽ trở nên khó khăn nếu như một vài phương thức được gọi <em>từ</em> constructor. <strong>Đó là lý do vì sao luôn khuyến khích bạn sử dụng <code class=\"language-text\">super(props)</code>, mặc dù nó không phải quy định bắt buộc:</strong></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Chúng ta truyền props vào </span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ✅ {}</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ {}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Điều này đảm bảo <code class=\"language-text\">this.props</code> sẽ được thiết lập trong constructor.</p>\n<hr>\n<p>Có một điều cuối mà khiến cho các fan lâu năm của React tò mò.</p>\n<p>Bạn có thể thấy rằng khi sử dụng Context API bên trong class (hoặc với <code class=\"language-text\">contextTypes</code> cũ hoặc với <code class=\"language-text\">contextType</code> API được thêm vào ở React 16.6), <code class=\"language-text\">context</code> được đẩy vào tham số thứ hai trong constructor.</p>\n<p>Vậy tại sao chúng ta không viết là <code class=\"language-text\">super(props, context)</code>? Có thể chứ, nhưng context ít khi sử dụng nên việc phát sinh lỗi cũng ít xuất hiện.</p>\n<p><strong>Với <a href=\"https://github.com/tc39/proposal-class-fields\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">class fields proposal</a> thì những vấn đề này hầu như biến mất.</strong> Không có constructor, tất cả các tham số đều được truyền vào một cách tự động. Đây là những lý do cho phép một biểu thức <code class=\"language-text\">state = {}</code> bao gồm cả các tham chiếu <code class=\"language-text\">this.props</code> hoặc <code class=\"language-text\">this.context</code> nếu cần thiết.</p>\n<p>Với Hooks, chúng ta thậm chí không có <code class=\"language-text\">super</code> hoặc <code class=\"language-text\">this</code>. Nhưng chủ đề đó sẽ giành cho một ngày khác.</p>\n<p><strong>Bài viết được dịch từ</strong> <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://overreacted.io/why-do-we-write-super-props/\">Why Do We Write super(props)?</a></p>\n","cover_image":""}},{"node":{"id":"b1851cc1980bb093ae4f97c8d1a1d08d","title":"Sử dụng React Hook Effect","path":"/su-dung-react-hook-effect/","date":"2019-07-03","timeToRead":16,"desc":"Bài này mình contribute cho http://vi.reactjs.org về cách sử dụng React Hook Effect","content":"<!-- TOC -->\n<ul>\n<li>\n<p><a href=\"#Effect-kh%C3%B4ng-c%E1%BA%A7n-Cleanup-effects-without-cleanup\">Effect không cần Cleanup {#effects-without-cleanup}</a></p>\n<ul>\n<li><a href=\"#V%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-Classes-example-using-classes\">Ví dụ sử dụng Classes {#example-using-classes}</a></li>\n<li><a href=\"#V%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-Hook-example-using-hooks\">Ví dụ sử dụng Hook {#example-using-hooks}</a></li>\n<li><a href=\"#Gi%E1%BA%A3i-th%C3%ADch-c%E1%BB%A5-th%E1%BB%83-detailed-explanation\">Giải thích cụ thể {#detailed-explanation}</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#Effect-c%E1%BA%A7n-Cleanup-effects-with-cleanup\">Effect cần Cleanup {#effects-with-cleanup}</a></p>\n<ul>\n<li><a href=\"#V%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-Class-example-using-classes-1\">Ví dụ sử dụng Class {#example-using-classes-1}</a></li>\n<li><a href=\"#V%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-Hooks-example-using-hooks-1\">Ví dụ sử dụng Hooks {#example-using-hooks-1}</a></li>\n</ul>\n</li>\n<li><a href=\"#T%E1%BB%95ng-h%E1%BB%A3p-recap\">Tổng hợp {#recap}</a></li>\n<li>\n<p><a href=\"#Tip-s%E1%BB%AD-d%E1%BB%A5ng-Effect-tips-for-using-effects\">Tip sử dụng Effect {#tips-for-using-effects}</a></p>\n<ul>\n<li><a href=\"#Tip-S%E1%BB%AD-d%E1%BB%A5ng-nhi%E1%BB%81u-Effect-t%C3%A1ch-bi%E1%BB%87ttip-use-multiple-effects-to-separate-concerns\">Tip: Sử dụng nhiều Effect tách biệt{#tip-use-multiple-effects-to-separate-concerns}</a></li>\n<li><a href=\"#Gi%E1%BA%A3i-th%C3%ADch-T%E1%BA%A1i-sao-Effect-ch%E1%BA%A1y-tr%C3%AAn-m%E1%BB%97i-update-explanation-why-effects-run-on-each-update\">Giải thích: Tại sao Effect chạy trên mỗi update {#explanation-why-effects-run-on-each-update}</a></li>\n<li><a href=\"#Tip-T%E1%BB%91i-%C6%B0u-Performance-b%E1%BA%B1ng-c%C3%A1ch-b%E1%BB%8F-qua-Effect-tip-optimizing-performance-by-skipping-effects\">Tip: Tối ưu Performance bằng cách bỏ qua Effect {#tip-optimizing-performance-by-skipping-effects}</a></li>\n</ul>\n</li>\n<li><a href=\"#B%C6%B0%E1%BB%9Bc-ti%E1%BA%BFp-theo-next-steps\">Bước tiếp theo {#next-steps}</a></li>\n</ul>\n<!-- /TOC -->\n<p><em>Hook</em> là một tính năng mới từ React 16.8. Nó cho phép sử dụng state và các tính năng khác của React mà không cần viết dạng class</p>\n<p><em>Effect Hook</em> cho phép thực hiện side effect bên trong các function component:</p>\n<pre class=\"language-js{1,6-10}\"><code class=\"language-js{1,6-10}\">import React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  // Tương tự như componentDidMount và componentDidUpdate:\n  useEffect(() => {\n    // Cập nhập document title sử dụng browser API\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}</code></pre>\n<p>Đoạn snippet này dựa trên <a href=\"http://vi.reactjs.org/docs/hooks-state.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ví dụ về counter ở trang trước</a>, chúng ta có thêm tính năng mới: đặt giá trị document title tương ứng với số lần click.</p>\n<p>Fetching data, thiết lập các subscription, và tự ý thay đổi DOM trong React component, những hành động như vậy được là \"side effect\" (hoặc \"effect\").</p>\n<blockquote>\n<p>Tip</p>\n<p>Nếu bạn quen với các phương thức lifecycle của React class, bạn có thể hình dung <code class=\"language-text\">useEffect</code> Hook như sự kết hợp của <code class=\"language-text\">componentDidMount</code>, <code class=\"language-text\">componentDidUpdate</code>, và <code class=\"language-text\">componentWillUnmount</code>.</p>\n</blockquote>\n<p>Có 2 loại side effect phổ biến trong React component: loại không cần cleanup, và loại cần. Cùng phân biệt 2 loại này kỹ hơn.</p>\n<h2 id=\"effect-không-cần-cleanup-effects-without-cleanup\"><a href=\"#effect-kh%C3%B4ng-c%E1%BA%A7n-cleanup-effects-without-cleanup\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Effect không cần Cleanup {#effects-without-cleanup}</h2>\n<p>Đôi lúc, chúng ta muốn <strong>chạy một vài đoạn code sau khi React đã cập nhập DOM.</strong> Network request, tự ý thay đổi DOM, và logging là những ví dụ điển hình của effect không cần cleanup. Chúng ta gọi như vậy vì có thể chạy chúng và quên ngay lập tức. Hãy so sánh class và Hook cho phép thực hiện side effect như thế ra sao.</p>\n<h3 id=\"ví-dụ-sử-dụng-classes-example-using-classes\"><a href=\"#v%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-classes-example-using-classes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ví dụ sử dụng Classes {#example-using-classes}</h3>\n<p>Trong React class components, phương thức <code class=\"language-text\">render</code> không được phép tạo ra side effect. Nó sẽ là quá sớm -- chúng ta thường chỉ muốn chạy effect <em>sau khi</em> React đã cập nhập DOM.</p>\n<p>Đó là lý do tại sao trong React class, chúng ta đặt side effect bên trong <code class=\"language-text\">componentDidMount</code> và <code class=\"language-text\">componentDidUpdate</code>. Quay lại ví dụ, đây là React counter class component sẽ cập nhập document title ngay sau khi React thay đổi DOM:</p>\n<pre class=\"language-js{9-15}\"><code class=\"language-js{9-15}\">class Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  componentDidMount() {\n    document.title = `You clicked ${this.state.count} times`;\n  }\n\n  componentDidUpdate() {\n    document.title = `You clicked ${this.state.count} times`;\n  }\n\n  render() {\n    return (\n      <div>\n        <p>You clicked {this.state.count} times</p>\n        <button onClick={() => this.setState({ count: this.state.count + 1 })}>\n          Click me\n        </button>\n      </div>\n    );\n  }\n}</code></pre>\n<p>Để ý cách <strong>chúng ta đã lập lại 2 thao tác tương tự nhau bên trong 2 phương thức lifecycle</strong></p>\n<p>Đó là bởi vì trong đa phần các trường hợp, chúng ta muốn thực hiện cùng một side effect khi component đã mount hoặc đã update. Một cách tổng quát, chúng ta muốn thực hiện sau mỗi lần render -- nhưng React class component không có phương thức như vậy. Chúng ta có thể tách nó ra thành một hàm riêng, nhưng vẫn phải gọi nó ở 2 nơi khác nhau.</p>\n<p>Bây giờ chúng ta xem cách làm tương tự với <code class=\"language-text\">useEffect</code> Hook.</p>\n<h3 id=\"ví-dụ-sử-dụng-hook-example-using-hooks\"><a href=\"#v%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-hook-example-using-hooks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ví dụ sử dụng Hook {#example-using-hooks}</h3>\n<p>Chúng ta đã xem ví dụ ở trên, giờ xem kỹ hơn một lần nữa:</p>\n<pre class=\"language-js{1,6-8}\"><code class=\"language-js{1,6-8}\">import React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}</code></pre>\n<p><strong><code class=\"language-text\">useEffect</code> đã làm gì?</strong> Bằng cách sử dụng Hook này, chúng ta nói với React rằng component của chúng ta cần thực hiện một việc gì đó sau khi render. React sẽ ghi nhớ hàm bạn truyền vào (chúng tôi thích gọi nó là \"effect\"), và sau đó gọi lại hàm này sau khi DOM đã update. Trong effect này, chúng ta đổi document title, chúng ta cũng có thể  fetch data hoặc gọi một số API khác.</p>\n<p><strong>Tại sao <code class=\"language-text\">useEffect</code> được gọi bên trong component?</strong> Đặt <code class=\"language-text\">useEffect</code> bên trong component cho phép chúng ta truy xuất đến state <code class=\"language-text\">count</code> (hoặc bất kỳ prop nào) bên trong effect. Chúng ta không cần một API đặc biệt để đọc nó -- nó đã nằm trong scope của function. Hook tận dụng JavaScript closures và tránh cung cấp thêm các APIs mà bản thân JavaScript đã có sẵn giải pháp.</p>\n<p><strong><code class=\"language-text\">useEffect</code> chạy sau tất cả những lần render?</strong> Đúng! Theo mặc định, nó chạy sau lần render đầu tiên <em>và</em> mỗi lần update. (Chúng ta sẽ nói về <a href=\"#tip-optimizing-performance-by-skipping-effects\">làm cách nào để tùy biến lại</a>.) Thay vì nghĩ theo hướng \"mounting\" và \"updating\", bạn sẽ thấy dễ hiểu hơn nếu nghĩ theo kiểu \"sau khi render\". React đảm bảo DOM đã được update trước khi chạy effect.</p>\n<h3 id=\"giải-thích-cụ-thể-detailed-explanation\"><a href=\"#gi%E1%BA%A3i-th%C3%ADch-c%E1%BB%A5-th%E1%BB%83-detailed-explanation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giải thích cụ thể {#detailed-explanation}</h3>\n<p>Giờ chúng ta đã hiểu về effect, đoạn code này sẽ rất dễ hiểu:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Example</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chúng ta khai báo state <code class=\"language-text\">count</code>, và sau đó nói với React chúng ta cần sử dụng. Chúng ta truyền cho <code class=\"language-text\">useEffect</code> Hook một hàm. Hàm truyền vào này <em>là</em> effect. Bên trong effect, chúng ta đặt document title sử dụng API <code class=\"language-text\">document.title</code>. Chúng ta có thể đọc giá trị sau cùng của <code class=\"language-text\">count</code> bên trong effect bởi vì nó nằm chung scope với function. Khi React render component, nó sẽ nhớ lại effect chúng ta đã gửi, và chạy effect sau khi cập nhập DOM. Nó xảy ra ở tất cả các lần render, kể cả lần đầu.</p>\n<p>Lập trình viên JavaScript có kinh nghiệm sẽ để ý thấy function truyền vào cho <code class=\"language-text\">useEffect</code> sẽ khác nhau cho tất cả các lần render. Đây là điều cố ý. Thật ra, nó sẽ cho chúng ta đọc giá trị <code class=\"language-text\">count</code> bên trong effect mà không cần lo lắng về việc lấy state. Mỗi lần chúng ta re-render, chúng ta gọi một effect <strong>khác</strong>, thay thế cái trước đó. Bằng cách này, nó làm cho effect như một phần của việc render -- mỗi effect \"thuộc vào\" một render cụ thể. Chúng ta sẽ hiểu tại sao cách này lại hiệu quả <a href=\"#explanation-why-effects-run-on-each-update\">ở phần sau của bài này</a>.</p>\n<blockquote>\n<p>Tip</p>\n<p>Không giống <code class=\"language-text\">componentDidMount</code> hoặc <code class=\"language-text\">componentDidUpdate</code>, effect chạy với <code class=\"language-text\">useEffect</code> không block trình duyệt cập nhập màn hình. Các effect chủ yếu không cần xảy ra tuần tự. Trong vài tình huống không mấy phổ biến (ví dụ như đo layout), chúng ta có  <a href=\"http://vi.reactjs.org/docs/hooks-reference.html#uselayouteffect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useLayoutEffect</code></a> Hook với API tính năng tương tự như <code class=\"language-text\">useEffect</code>.</p>\n</blockquote>\n<h2 id=\"effect-cần-cleanup-effects-with-cleanup\"><a href=\"#effect-c%E1%BA%A7n-cleanup-effects-with-cleanup\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Effect cần Cleanup {#effects-with-cleanup}</h2>\n<p>Ở trên, chúng ta đã bàn về những side effect không cần cleanup. Tuy nhiên, một vài effect cần có. Ví dụ, <strong>chúng ta muốn thiết lập các subscription</strong> cho vài data source bên ngoài. Tình huống đó, clean up là rất quan trọng để không xảy ra memory leak! Cùng so sánh cách làm giữa class và Hook</p>\n<h3 id=\"ví-dụ-sử-dụng-class-example-using-classes-1\"><a href=\"#v%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-class-example-using-classes-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ví dụ sử dụng Class {#example-using-classes-1}</h3>\n<p>Trong React class, chúng ta thường cài đặt một subscription trong <code class=\"language-text\">componentDidMount</code>, và clean it up trong <code class=\"language-text\">componentWillUnmount</code>. Lấy ví dụ, chúng ta có <code class=\"language-text\">ChatAPI</code> module cho phép chúng ta subscribe vào tình trạng online của 1 danh sách friend. Cách chúng ta làm với class</p>\n<pre class=\"language-js{8-26}\"><code class=\"language-js{8-26}\">class FriendStatus extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isOnline: null };\n    this.handleStatusChange = this.handleStatusChange.bind(this);\n  }\n\n  componentDidMount() {\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n\n  componentWillUnmount() {\n    ChatAPI.unsubscribeFromFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n\n  handleStatusChange(status) {\n    this.setState({\n      isOnline: status.isOnline\n    });\n  }\n\n  render() {\n    if (this.state.isOnline === null) {\n      return 'Loading...';\n    }\n    return this.state.isOnline ? 'Online' : 'Offline';\n  }\n}</code></pre>\n<p>Để ý <code class=\"language-text\">componentDidMount</code> và <code class=\"language-text\">componentWillUnmount</code>. Phương thức Lifecycle buộc chúng ta tách logic này ra thậm chí cả 2 đoạn code trên điều liên quan đến cùng một effect.</p>\n<blockquote>\n<p>Lưu ý</p>\n<p>Nếu để ý kỹ hơn, bạn sẽ thấy chúng ta còn cần thêm <code class=\"language-text\">componentDidUpdate</code> để thực sự chuẩn xác. Tạm thời cứ bỏ qua phần đó vì chúng ta sẽ đề cập lại <a href=\"#explanation-why-effects-run-on-each-update\">ở phần sau</a> of this page.</p>\n</blockquote>\n<h3 id=\"ví-dụ-sử-dụng-hooks-example-using-hooks-1\"><a href=\"#v%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-hooks-example-using-hooks-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ví dụ sử dụng Hooks {#example-using-hooks-1}</h3>\n<p>Cùng xem cách chúng ta làm với Hook.</p>\n<p>Bạn có thể sẽ nghĩ chúng ta cần 2 effect khác nhau để thực hiện cleanup. Code khởi tạo và xóa subscription luôn luôn đứng kề nhau, <code class=\"language-text\">useEffect</code> được thiết kế để dữ chúng cùng một chỗ. Nếu effect trả về function, React sẽ chạy  function đó, chúng ta đưa clean up vào bên trong function trả về:</p>\n<pre class=\"language-js{6-16}\"><code class=\"language-js{6-16}\">import React, { useState, useEffect } from 'react';\n\nfunction FriendStatus(props) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    // Chỉ định clean up sau khi gọi effect:\n    return function cleanup() {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}</code></pre>\n<p><strong>Tại sao chúng ta trả về function bên trong effect?</strong> Đây là một tùy chọn để chạy cơ chế cleanup cho effect. Nó cho phép chúng ta đưa tạo và xóa subscription trong cùng một effect.</p>\n<p><strong>Khi nào React clean up một effect?</strong> React thực hiện cleanup khi  component unmount. Tuy nhiên, như đã học trước đó, effect trên tất cả những lần render, không phải chỉ một. Đó là tại sao React <em>đồng thời</em> cleans up effect từ những lần render trước. Chúng ta sẽ thảo luận thêm <a href=\"#explanation-why-effects-run-on-each-update\">việc này giúp tránh bug</a> và <a href=\"#tip-optimizing-performance-by-skipping-effects\">làm cách nào tùy biến đặc tính này để cái thiện performance </a> ở bên dưới.</p>\n<blockquote>\n<p>Ghi chú</p>\n<p>Chúng ta không cần trả về một function có tên trong effect. Chúng ta gọi nó là <code class=\"language-text\">cleanup</code> để chỉ rõ mục đích, bạn có thể dùng arrow function trong thực tế.</p>\n</blockquote>\n<h2 id=\"tổng-hợp-recap\"><a href=\"#t%E1%BB%95ng-h%E1%BB%A3p-recap\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tổng hợp {#recap}</h2>\n<p>Chúng ta đã học <code class=\"language-text\">useEffect</code> cho phép chúng ta thực hiện nhiều kiểu side effect sau khi component được render. Một vài effect cần cleanup nó sẽ return một function:</p>\n<pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span><span class=\"token property-access\">isOnline</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">friend</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">friend</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Một vài effect khác có thể không cần cleanup, thì không cần return gì cả.</p>\n<pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Effect Hook được sử dụng trong cả 2 trường hợp.</p>\n<hr>\n<p><strong>Nếu bạn đã nắm bắt được cách làm việc của Effect Hook, hoặc nếu bạn cảm thấy hơi ngợp, có thể nhảy xuống <a href=\"http://vi.reactjs.org/docs/hooks-rules.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">phần Nguyên tắc sử dụng Hook</a> bây giờ.</strong></p>\n<hr>\n<h2 id=\"tip-sử-dụng-effect-tips-for-using-effects\"><a href=\"#tip-s%E1%BB%AD-d%E1%BB%A5ng-effect-tips-for-using-effects\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tip sử dụng Effect {#tips-for-using-effects}</h2>\n<p>Chúng ta sẽ cùng đi sâu một số khía cạnh của <code class=\"language-text\">useEffect</code> mà các lập trình viên React có kinh nghiệm sẽ thắc mắc. Không cần quá cưỡng ép bản thân, bạn có thể dừng ở đây, và quay lại để tìm hiểu Effect Hook bất cứ lúc nào.</p>\n<h3 id=\"tip-sử-dụng-nhiều-effect-tách-biệttip-use-multiple-effects-to-separate-concerns\"><a href=\"#tip-s%E1%BB%AD-d%E1%BB%A5ng-nhi%E1%BB%81u-effect-t%C3%A1ch-bi%E1%BB%87ttip-use-multiple-effects-to-separate-concerns\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tip: Sử dụng nhiều Effect tách biệt{#tip-use-multiple-effects-to-separate-concerns}</h3>\n<p>Một trong những vấn đề đã liệt kê ở  <a href=\"http://vi.reactjs.org/docs/hooks-intro.html#complex-components-become-hard-to-understand\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">động lực</a> tạo ra Hooks là các phương thức lifecycle của class thường chứa những logic không liên quan với nhau, còn những logic đáng lý phải nằm gần nhau lại nằm ở các phương thức khác nhau. Đây là component kết hợp counter và friend status từ ví dụ ở trên</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FriendStatusWithCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> isOnline<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleStatusChange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">handleStatusChange</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">friend</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleStatusChange</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">friend</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleStatusChange</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      isOnline<span class=\"token operator\">:</span> status<span class=\"token punctuation\">.</span><span class=\"token property-access\">isOnline</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span></code></pre>\n<p>Để ý cái logic của <code class=\"language-text\">document.title</code> đang nằm ở <code class=\"language-text\">componentDidMount</code> và <code class=\"language-text\">componentDidUpdate</code>. Logic của subscription thì cũng nằm ở  <code class=\"language-text\">componentDidMount</code> và <code class=\"language-text\">componentWillUnmount</code>. Và <code class=\"language-text\">componentDidMount</code> chứa code cả hai.</p>\n<p>Như vậy hook đã giải quyết vấn đề này như thế nào? Nếu như <a href=\"http://vi.reactjs.org/docs/hooks-state.html#tip-using-multiple-state-variables\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bạn có thể sử dụng <em>State</em> Hook nhiều lần</a>, bạn cũng có thể sử dụng nhiều effect. Nó cho phép tách những logic không liên quan ra thành những effect khác nhau:</p>\n<pre class=\"language-js{3,8}\"><code class=\"language-js{3,8}\">function FriendStatusWithCounter(props) {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  const [isOnline, setIsOnline] = useState(null);\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n  // ...\n}</code></pre>\n<p><strong>Hook cho phép tách code dựa trên cái nó đang làm</strong> chứ không đi theo phương thức lifecycle. React sẽ apply <em>từng</em> effect được sử dụng trong component, theo thứ tự đã khai báo.</p>\n<h3 id=\"giải-thích-tại-sao-effect-chạy-trên-mỗi-update-explanation-why-effects-run-on-each-update\"><a href=\"#gi%E1%BA%A3i-th%C3%ADch-t%E1%BA%A1i-sao-effect-ch%E1%BA%A1y-tr%C3%AAn-m%E1%BB%97i-update-explanation-why-effects-run-on-each-update\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giải thích: Tại sao Effect chạy trên mỗi update {#explanation-why-effects-run-on-each-update}</h3>\n<p>Nếu đã từng sử dụng class, bạn sẽ thắc mắc tại sao bước cleanup effect lại chạy trên mỗi lần re-render, mà không phải khi unmounting. Xét một ví dụ thực tế để thấy tại sao thiết kế này giúp chúng ta có những component ít bug hơn</p>\n<p><a href=\"#example-using-classes-1\">Ở phần trước</a>, chúng ta có đề cập ví dụ <code class=\"language-text\">FriendStatus</code> để hiển thị trạng thái online của Friend. Class đọc <code class=\"language-text\">friend.id</code> từ <code class=\"language-text\">this.props</code>, subscribe sau khi component mount, và unsubscribe trong lúc unmounting:</p>\n<pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">friend</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleStatusChange</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">friend</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleStatusChange</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p><strong>Chuyện gì sẽ xảy ra nếu prop <code class=\"language-text\">friend</code> thay đổi</strong> trong khi component đang hiển thị trên màn hình (chưa unmount)? Chắc chắn có bug với danh sách status. Chúng ta cũng có thể gây ra memory leak hoặc crash khi đang unmounting và gọi unsubscribe nếu có một Friend ID không đúng.</p>\n<p>Trong class component, chúng ta cần thêm <code class=\"language-text\">componentDidUpdate</code> để xử lý tình huống này:</p>\n<pre class=\"language-js{8-19}\"><code class=\"language-js{8-19}\">  componentDidMount() {\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n\n  componentDidUpdate(prevProps) {\n    // Unsubscribe friend.id trước đó\n    ChatAPI.unsubscribeFromFriendStatus(\n      prevProps.friend.id,\n      this.handleStatusChange\n    );\n    // Subscribe friend.id mới\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n\n  componentWillUnmount() {\n    ChatAPI.unsubscribeFromFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }</code></pre>\n<p>Quên handle <code class=\"language-text\">componentDidUpdate</code> là điều dễ dẫn tới có bug trong React.</p>\n<p>Đây là phiên bản sử dụng Hook</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">FriendStatus</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">friend</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">friend</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Không còn bị dính bug như ở trên</p>\n<p>Sẽ không có một đoạn code nào đặc biệt để xử lý lúc update vì theo cách chạy <em>mặc định</em> của <code class=\"language-text\">useEffect</code> nó đã xóa effect trước khi apply effect mới. Để hình dung hóa, đây là các bước gọi subscribe và unsubscribe mà component đã chạy qua:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Mount với prop { friend: { id: 100 } }</span>\n<span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Chạy effect đầu tiên</span>\n\n<span class=\"token comment\">// Cập nhập prop { friend: { id: 200 } }</span>\n<span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Clean effect trước đó</span>\n<span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Chạy effect tiếp theo</span>\n\n<span class=\"token comment\">// Cập nhập với { friend: { id: 300 } }</span>\n<span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Clean effect trước đó</span>\n<span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Chạy effect tiếp theo</span>\n\n<span class=\"token comment\">// Unmount</span>\n<span class=\"token maybe-class-name\">ChatAPI</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Clean effect lần cuối</span></code></pre>\n<p>Đặc tính này đảm bảo thống nhất và ngăn bug thường xuất hiện do không cập nhập login với class component</p>\n<h3 id=\"tip-tối-ưu-performance-bằng-cách-bỏ-qua-effect-tip-optimizing-performance-by-skipping-effects\"><a href=\"#tip-t%E1%BB%91i-%C6%B0u-performance-b%E1%BA%B1ng-c%C3%A1ch-b%E1%BB%8F-qua-effect-tip-optimizing-performance-by-skipping-effects\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tip: Tối ưu Performance bằng cách bỏ qua Effect {#tip-optimizing-performance-by-skipping-effects}</h3>\n<p>Trong một số trường hợp, clean và apply effect sau khi render có thể dẫn đến ảnh hưởng performance. Trong class component, chúng ta giải quyết bằng viết một hàm so sánh giữa <code class=\"language-text\">prevProps</code> hoặc <code class=\"language-text\">prevState</code> bên trong <code class=\"language-text\">componentDidUpdate</code>:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đây là yêu cầu rất cần thiết, nên đã được có đưa sẵn trong <code class=\"language-text\">useEffect</code> Hook API. Bạn có thể bảo React <em>bỏ qua</em> việc apply effect nếu một số giá trị không thay đổi giữa các lần render. Để làm như vậy, truyền vào một array (không bắt buộc) vào <code class=\"language-text\">useEffect</code>:</p>\n<pre class=\"language-js{3}\"><code class=\"language-js{3}\">useEffect(() => {\n  document.title = `You clicked ${count} times`;\n}, [count]); // Chỉ re-run effect nếu giá trị count thay đổi</code></pre>\n<p>Trong ví dụ ở trên, chúng ta truyền vào <code class=\"language-text\">[count]</code> như một tham số thứ 2. Nó nghĩa là gì? Nếu <code class=\"language-text\">count</code> là <code class=\"language-text\">5</code>, rồi sau đó component re-render với <code class=\"language-text\">count</code> vẫn bằng <code class=\"language-text\">5</code>, React sẽ so sánh <code class=\"language-text\">[5]</code> từ lần render trước và <code class=\"language-text\">[5]</code> với lần render hiện tại. Vì tất cả giá trị trong mảng bằng nhau (<code class=\"language-text\">5 === 5</code>), React sẽ bỏ qua  effect. Đó là cách chúng ta tối ưu</p>\n<p>Khi chúng ta render với <code class=\"language-text\">count</code> thành <code class=\"language-text\">6</code>, React sẽ so sánh các giá trị trong <code class=\"language-text\">[5]</code> từ lần render trước với các giá trị trong <code class=\"language-text\">[6]</code> lần render hiện tại. Ở lần này, React sẽ gọi lại effect vì <code class=\"language-text\">5 !== 6</code>. Nếu có nhiều giá trị bên trong array, React sẽl re-run effect nếu một trong các giá trị đó khác với lần trước.</p>\n<p>Effect cũng làm việc tương tự với quá trình cleanup:</p>\n<pre class=\"language-js{10}\"><code class=\"language-js{10}\">useEffect(() => {\n  function handleStatusChange(status) {\n    setIsOnline(status.isOnline);\n  }\n\n  ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n  return () => {\n    ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n  };\n}, [props.friend.id]); // Chỉ re-subscribe nếu props.friend.id bị thay đổi</code></pre>\n<p>Trong tương lai, tham số thứ 2 sẽ được tự động thêm vào trong lúc  build-transform.</p>\n<blockquote>\n<p>Lưu ý</p>\n<p>Nếu sử dụng cách tối ưu này, phải chắc chắn array chứa <strong>tất cả giá trị bên trong của component scope (như prop và state) nếu thay đổi theo các lần render và effect có sử dụng</strong>. Nếu không, nếu không nó sẽ tham chiếu tới giá trị trước đó. Đọc thêm <a href=\"http://vi.reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">làm việc với function</a> và <a href=\"http://vi.reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">làm gì khi array thay đổi thường xuyên</a>.</p>\n<p>Nếu muốn chạy 1 effect và clean nó 1 lần duy nhất (lúc mount và unmount), bạn có thể truyền vào array rỗng (<code class=\"language-text\">[]</code>). Đồng nghĩa với việc bạn báo với React, effect này không phụ thuộc <em>bất kỳ</em> giá trị nào của prop hoặc state, do đó không bao giờ cần re-run. Nó không phải là một trường hợp  được xử lý đặc biệt -- nó đúng với cách so sánh array hiện tại</p>\n<p>Nếu truyền vào array rỗng (<code class=\"language-text\">[]</code>), prop và state bên trong effect sẽ luôn mang giá trị khởi tạo. Trong khi truyền vào <code class=\"language-text\">[]</code> nó gần giống với <code class=\"language-text\">componentDidMount</code> và <code class=\"language-text\">componentWillUnmount</code>, nó thường là <a href=\"http://vi.reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">giải pháp</a> <a href=\"http://vi.reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tốt hơn</a> để tránh re-run effect quá thường xuyên. Tuy nhiên, đừng quên React sẽ chỉ chạy <code class=\"language-text\">useEffect</code> sau khi trình duyệt paint.</p>\n<p>Chúng tôi khuyến khích sử dụng <a href=\"https://github.com/facebook/react/issues/14920\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">đưa tất cả dependency</code></a>, sử dụng  <a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">eslint-plugin-react-hooks</code></a> package để ràng buộc, và thông báo nếu khai báo dependency không hợp lệ.</p>\n</blockquote>\n<h2 id=\"bước-tiếp-theo-next-steps\"><a href=\"#b%C6%B0%E1%BB%9Bc-ti%E1%BA%BFp-theo-next-steps\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bước tiếp theo {#next-steps}</h2>\n<p>Xin chúc mừng! Trang này không hề ngắn, nhưng bạn đã đọc được đến đây. Hy vọng các thắc mắc của bạn về effect đã được phúc đáp. Bạn đã học được State Hook và Effect Hook, và có <em>rất</em> nhiều thứ bạn có thể làm khi sử dụng kết hợp chúng.  Nó gần như giải quyết các vấn đề mà chỉ có class mới làm được -- còn nếu không bạn có thể tìm thấy <a href=\"http://vi.reactjs.org/docs/hooks-reference.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">các Hook mở rộng</a>.</p>\n<p>Chúng ta đã trình bài động lực tạo ra Hook <a href=\"http://vi.reactjs.org/docs/hooks-intro.html#motivation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ở đây</a>. Chúng ta cũng thấy được cách  effect cleanup và tránh trùng lặp trong <code class=\"language-text\">componentDidUpdate</code> và <code class=\"language-text\">componentWillUnmount</code>, mang những đoạn code có liên quan lại gần nhau hơn, và giúp chúng ta tránh bug. Chúng ta cũng thấy được cách chúng ta tách effect theo mục đích, cái mà chúng ta không làm được với class.</p>\n<p>Đến đây, bạn có thể thắc mắc Hook làm việc như thế nào. Làm cách nào <code class=\"language-text\">useState</code> lấy được đúng giá trị giữa các lần render khác nhau? Làm cách nào React \"match\" được effect trước và lần đang update? <strong>Ở trang tiếp theo bạn sẽ học được <a href=\"http://vi.reactjs.org/docs/hooks-rules.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Quy luật của Hook</a> -- mấu chốt làm việc của Hook.</strong></p>\n","cover_image":""}},{"node":{"id":"431b04c69be9d0d7ae9bcf9c672a6d4f","title":"Cách sử dụng ref trong React","path":"/cach-su-dung-ref-trong-react/","date":"2019-06-22","timeToRead":4,"desc":"Công dụng của ref là để truy cập đến DOM thật trong React, một vài tính huống sử dụng và dùng ref","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#V%E1%BA%A5n-%C4%91%E1%BB%81-c%E1%BB%A7a-Refs\">Vấn đề của Refs</a></li>\n<li><a href=\"#L%E1%BB%B1a-ch%E1%BB%8Dn-gi%E1%BB%AFa-callback-refs-v%C3%A0-createRef\">Lựa chọn giữa callback refs và <code class=\"language-text\">createRef</code></a></li>\n<li><a href=\"#Truy%E1%BB%81n-Ref-t%E1%BB%AB-cha-xu%E1%BB%91ng-con\">Truyền Ref từ cha xuống con</a></li>\n<li><a href=\"#useRef-hook\">useRef hook</a></li>\n<li><a href=\"#T%E1%BB%95ng-k%E1%BA%BFt-l%E1%BA%A1i\">Tổng kết lại</a></li>\n</ul>\n<!-- /TOC -->\n<p>Là viết tắt cho <code class=\"language-text\">reference</code> nếu bạn có thắc mắc, nó là cách mà React sẽ truy cập tới DOM (DOM thực, không phải DOM ảo). Có nhiều lý do mà chúng ta muốn truy cập tới DOM, thí dụ như set focus vào input, hay tính toán kích thước của một element khi render.</p>\n<h2 id=\"vấn-đề-của-ref\"><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81-c%E1%BB%A7a-ref\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vấn đề của <code class=\"language-text\">ref</code></h2>\n<p>Xử lý DOM là kỹ thuật căn bản mà mọi lập trình viên frontend điều biết, tuy nhiên khi làm theo hướng React, chúng ta sẽ ít gặp tình huống đụng đến DOM thật hơn.</p>\n<p>Thời điểm hiện tại, chúng ta có đến tận 4 cách để dùng ref !!!!</p>\n<p><img src=\"https://www.rd.com/wp-content/uploads/2012/05/sourbaby-760x506.jpg\" alt=\"Thời điểm hiện tại, chúng ta có đến tận 4 cách để dùng refs \"></p>\n<ul>\n<li>Dùng string (không được khuyến khích) (<code class=\"language-text\">&lt;div ref=&quot;stringGiday&quot; /&gt;</code>)</li>\n<li>Dùng callback ref (<code class=\"language-text\">&lt;div ref={ref =&gt; {this.inputRef = ref }} /&gt;</code>)</li>\n<li>Dùng API <code class=\"language-text\">createRef</code></li>\n<li>Dùng hook <code class=\"language-text\">useRef</code></li>\n</ul>\n<h2 id=\"lựa-chọn-giữa-callback-ref-và-createref\"><a href=\"#l%E1%BB%B1a-ch%E1%BB%8Dn-gi%E1%BB%AFa-callback-ref-v%C3%A0-createref\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lựa chọn giữa callback ref và <code class=\"language-text\">createRef</code></h2>\n<p>Sử dụng string cho ref đã được team React cho vào bảo tàng, câu hỏi còn lại là dùng callback ref hay <code class=\"language-text\">createRef</code> đây</p>\n<blockquote>\n<p>Câu trả lời ngắn gọn: dùng <code class=\"language-text\">createRef</code> là an toàn cho mọi trường hợp.</p>\n</blockquote>\n<p>Lấy ví dụ cho tình huống phổ biến: tự động đặt set focus cho input</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleRef</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 1 - Định nghĩa ref</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputRef</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 3 - gọi hàm focus trên ref</span>\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputRef</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputRef</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> gắn cái ref mới định nghĩa cho element <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onClick</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token maybe-class-name\">Click</span> để focus<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu sử dụng callback ref thì đây là cách làm</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleCallbackRef</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputRef</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">ref</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputRef</span> <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onClick</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token maybe-class-name\">Click</span> để focus<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Có ý kiến thấy viết <code class=\"language-text\">ref =&gt;</code> <em>nó hơi kỳ</em>, không minh bạch, cái ref này ở quỷ quái nào sinh ra?</p>\n<p>Khai báo ref bằng inline function như ở trên, nó sẽ gọi 2 lần trong quá trình update: lần đầu tiên với giá trị <code class=\"language-text\">null</code>, lần thứ hai là khi có DOM element.</p>\n<p>Bởi vì mỗi lần render là một inline function khác nhau, React sẽ phải xóa giá trị ref cũ rồi setup ref mới</p>\n<p>Nghĩa là viết như sau sẽ bị bug, ref lúc đầu đang null nên không có gọi focus được</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">ref</span> <span class=\"token arrow operator\">=></span> ref<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre>\n<p>Chắc tới đây anh em đã thấy không còn muốn dùng callback ref.</p>\n<p>Tuy nhiên không có nghĩa là callback ref không còn đất dụng võ, với <code class=\"language-text\">createRef</code> anh em luôn phải tạo-rồi-gán. Nếu tình huống chúng ta phải tạo một danh sách element động</p>\n<p>Như ví dụ này, sẽ làm như thế này phải không</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DynamicRefs</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          tasks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Task 1\"</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">\"red\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Task 2\"</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">\"green\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Task 3\"</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">\"yellow\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Task 4\"</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">\"gray\"</span> <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">refsArray</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n                <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">tasks</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n                    <span class=\"token operator\">&lt;</span>div\n                        key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span>\n                        ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">ref</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">refArray</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n                    <span class=\"token operator\">></span>\n                        <span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">}</span>\n                    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"truyền-ref-từ-cha-xuống-con\"><a href=\"#truy%E1%BB%81n-ref-t%E1%BB%AB-cha-xu%E1%BB%91ng-con\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Truyền Ref từ cha xuống con</h2>\n<p>Với function component, xét đoạn code sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">CustomInput</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token operator\">&lt;</span>input <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Rồi chúng ta có 1 component khác, dùng ref cho cái <code class=\"language-text\">CustomInput</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleRef</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textInput</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">CustomInput</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">textInput</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đoạn code trên hổng chạy được. Chúng ta cần dùng đến <code class=\"language-text\">forwardRef</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// BẮT BUỘC phải là function component</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">CustomInput</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleRefForwarding</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputRef</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputRef</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// lưu ý cách chúng ta gàn một ref vào custom component</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">CustomInput</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputRef</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onClick</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token maybe-class-name\">Click</span> to <span class=\"token maybe-class-name\">Focus</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"useref-hook\"><a href=\"#useref-hook\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useRef hook</h2>\n<p>Nếu là function component, như đã biết, nếu chúng ta dùng <code class=\"language-text\">createRef</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">FunctionComponentWithRef</span></span>  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> textInput <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> textInput<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            Click to Focus\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>MỖi lần return là mỗi lần tạo ref mới, như vậy <em>không cool</em>, sử dụng hook <code class=\"language-text\">useRef</code> chúng ta sẽ có một cái ref xài đời này qua đời kia dù bao nhiều lần update, cho đến khi nó ra đi (Unmount)</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">FunctionComponentWithRef</span></span>  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> textInput <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> textInput<span class=\"token punctuation\">.</span><span class=\"token property-access\">current</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            Click to Focus\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"tổng-kết-lại\"><a href=\"#t%E1%BB%95ng-k%E1%BA%BFt-l%E1%BA%A1i\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tổng kết lại</h2>\n<ul>\n<li>Đừng xài ref nhiều quá</li>\n<li>Đừng bao giờ đụng vô string ref</li>\n<li>Dùng callback ref khi anh em đụng đến vấn đề tạo element động</li>\n<li>Nếu là class component, dùng <code class=\"language-text\">createRef</code> an toàn nhất</li>\n<li>Là function component, dùng <code class=\"language-text\">useRef</code> cho hợp xu thế</li>\n<li>Dùng <code class=\"language-text\">forwardRef</code> khi component cha cần truy cập đến component con</li>\n</ul>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://rafaelquintanilha.com/the-complete-guide-to-react-refs\">The Complete Guide to React Refs</a></p>\n","cover_image":""}},{"node":{"id":"1231bcbf637198f90c7b6d52a56a2518","title":"3 bước tối ưu hiệu năng React App bằng các API mới của React","path":"/3-buoc-toi-uu-hieu-nang-react-app-bang-cac-api-moi-cua-react/","date":"2019-06-17","timeToRead":3,"desc":"Bài viết hướng dẫn tối ưu hiệu năng bằng memo, useMemo, useCallback","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#Reactmemo\">React.memo</a></li>\n<li><a href=\"#useMemo\">useMemo</a></li>\n<li><a href=\"#useCallback\">useCallback</a></li>\n</ul>\n<!-- /TOC -->\n<p>Khi sử dụng function component, React cung cấp 3 phương thức để tối ưu: <code class=\"language-text\">React.memo</code>, <code class=\"language-text\">useMemo</code>, và <code class=\"language-text\">useCallback</code>, chúng ta cùng điểm qua 3 thằng này</p>\n<p>Xét ví dụ</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">ListPage</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> title <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Header</span> title<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">List</span> listItems<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Component như trên (<code class=\"language-text\">&lt;ListPage /&gt;</code>), khi nhận một <code class=\"language-text\">data</code> mới, tất cả component con bên trong là <code class=\"language-text\">Header</code> và <code class=\"language-text\">List</code> sẽ re-render, mặc dù cái <code class=\"language-text\">title</code> không hề thay đổi. Nếu <code class=\"language-text\">Header</code> không tốn quá nhiều thời gian để render thì ko có vấn đề. Ngược lại dĩ nhiên là nếu render <code class=\"language-text\">Header</code> tốn rất nhiều thời gian, chúng ta phải <strong>xây lại</strong> để tối ưu hơn.</p>\n<h2 id=\"reactmemo\"><a href=\"#reactmemo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>React.memo</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">MyComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* render using props */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code class=\"language-text\">React.memo</code> là một HOC, <a href=\"https://luubinhan.github.io/blog/2018-11-04-gioi-thieu-react-memo-moi-trong-react-16\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">đọc lại bài này</a>, nó sẽ <strong>nhớ</strong> kết quả render của component. Nếu component trả về một output giống hệt cho cùng một prop, đưa nó vào <code class=\"language-text\">React.memo</code> sẽ tiết kiệm tí thời gian.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Header</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">Header</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Wrap lại trong <code class=\"language-text\">React.memo</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Header</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Header</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"usememo\"><a href=\"#usememo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useMemo</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> memoizedValue <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">computeExpensiveValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Cũng tương tự nó sẽ nhớ kết quả trả về, tuy nhiên nó sẽ có thêm phần gọi là <code class=\"language-text\">array dependencies</code>, là một danh sách các <strong>thằng</strong> mà nó phụ thuộc, nếu giá trị phụ thuộc thay đổi nó mới rọi render lại, không thể trả thẳng kết quả lần trước</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> widgetList <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> \n        widgets<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">w</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token spread operator\">...</span>w<span class=\"token punctuation\">,</span>\n        totalPrice<span class=\"token operator\">:</span> <span class=\"token function\">someComplexFunction</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span><span class=\"token property-access\">price</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        estimatedDeliveryDate<span class=\"token operator\">:</span> <span class=\"token function\">someOtherComplexFunction</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span><span class=\"token property-access\">warehouse</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>widgets<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Trong ví dụ trên, 1 component nhận một danh sách các widget, các widget này trước khi truyền vào sẽ được thêm vào 2 giá trị là <em>total price</em> và <em>delivery date</em>. Nếu giá trị các widget không thay đổi khi render lại component, thì không cần thiết phải chạy qua các hàm <code class=\"language-text\">someComplexFunction</code>, <code class=\"language-text\">someOtherComplexFunction</code>. Sử dụng <code class=\"language-text\">useMemo</code> để ghi nhớ kết quả và bỏ qua trong trường hợp đó.</p>\n<h2 id=\"usecallback\"><a href=\"#usecallback\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useCallback</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> memoizedCallback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Mục đích để chặn các lần render không cần thiết giữa component cha và con</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Parent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showExtraDetails<span class=\"token punctuation\">,</span> setShowExtraDetails<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Child</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">showData</span><span class=\"token punctuation\">(</span>showExtraDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>1 component như vậy sẽ re-render cả cha và con cùng lúc, thậm chí component con có là <code class=\"language-text\">PureComponent</code> được wrap bên trong <code class=\"language-text\">React.memo</code> đi nữa, bởi vì <code class=\"language-text\">onClick</code> sẽ khác nhau trên mỗi lần render. Sử dụng <code class=\"language-text\">useCallback</code> chúng ta viết lại như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Parent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showExtraDetails<span class=\"token punctuation\">,</span> setShowExtraDetails<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> handleClick <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">showData</span><span class=\"token punctuation\">(</span>showExtraDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span>showExtraDetails<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Child</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Như vậy hàm <code class=\"language-text\">handleClick</code> sẽ giống nhau cho các lần render khác nhau, nó chỉ khác khi <code class=\"language-text\">showExtraDetails</code> thay đổi.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://headway.io/blog/react-optimize-components-memo-usememo-usecallback\">React: Optimize Components with React.memo, useMemo, and useCallback</a></p>\n","cover_image":""}},{"node":{"id":"3a6380cc71f067cbeb40825b4adb02e4","title":"Giải thích Flux Pattern theo phong cách John Wick","path":"/giai-thich-flux-pattern-theo-phong-cach-john-wick/","date":"2019-05-28","timeToRead":4,"desc":"Điểm lại các khái niệm trong Flux action, dispatch, store, điều kiện tiên quyết đề đọc bài này là nên xem lại John Wick","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81\">Vấn đề</a></li>\n<li><a href=\"#gi%E1%BA%A3i-ph%C3%A1p-c%E1%BB%A7a-facebook-lu%E1%BB%93ng-d%E1%BB%AF-li%E1%BB%87u-m%E1%BB%99t-chi%E1%BB%81u\">Giải pháp của Facebook: luồng dữ liệu một chiều</a></li>\n<li>\n<p><a href=\"#gi%E1%BB%9Bi-thi%E1%BB%87u-c%C3%A1c-vai-ch%C3%ADnh\">Giới thiệu các vai chính</a></p>\n<ul>\n<li><a href=\"#b%E1%BB%8Dn-action-creator\">Bọn action creator</a></li>\n<li><a href=\"#b%E1%BB%8Dn-dispatcher\">Bọn dispatcher</a></li>\n<li><a href=\"#b%E1%BB%8Dn-%C4%91%E1%BA%A7u-c%E1%BA%A7u-store\">Bọn đầu cầu Store</a></li>\n<li><a href=\"#b%E1%BB%8Dn-view\">Bọn View</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"vấn-đề\"><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vấn đề</h2>\n<p>Trước tiên chúng ta cần biết Flux giải quyết vấn đề gì. Flux là một pattern để xử lý luồng dữ liệu trong ứng dụng. Flux và React được sinh ra và lớn lên dưới ngôi nhà Facebook. 2 đứa chúng nó <strong>thường</strong> đi cùng nhau, chứ không phải <strong>dính</strong> vào nhau như hình với bóng</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*EfeNEshl8-uwZSuUw275Ag.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Một trong những ví dụ phổ biến khi nói đến Flux là vòng lặp của tính năng notification. Khi đăng nhập vào Facebook, bạn thấy một thông báo mới trên icon cái chuông huyền diệu, một khi click vào cái chuông này, toàn bộ thông báo sẽ ko còn nằm trong <strong>new message</strong> nữa. Một vài phút sau, khi nhận được thông báo mới, cái chuông lại <strong>rung lên</strong>, báo bạn biết có thông báo mới, và cứ thế, vòng lặp cứ tiếp tục.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*4xc1FzIHWiyAvb1iAQKSqQ.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Với kiểu thiết kế Model-View</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*OcTeAqv8AU_z-O2HuucmeA.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Các model sẽ <em>nắm giữ</em> dữ liệu và truyền dữ liệu này xuống các cục view -> nơi sẽ render, hiển thị dữ liệu này.</p>\n<p>User tương tác thông qua view, view đôi lúc sẽ cập nhập lại dữ liệu của model, và đôi khi model này cần thay đổi dữ liệu trên model khác. Hơn nữa, nhiều khi một thay đổi của user kéo theo một chuỗi các thay đổi khác, có khi nó là một async. Tưởng tượng như đánh trái banh bàn, bạn ko thể biết được trái banh nó sẽ đập vào đâu hết.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/400/1*7myoHOaUyFEmPC-dj61CKw.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Khi ấy bạn sẽ không biết được dữ liệu bị <strong>rơi rớt</strong> ở đâu.</p>\n<h2 id=\"giải-pháp-của-facebook-luồng-dữ-liệu-một-chiều\"><a href=\"#gi%E1%BA%A3i-ph%C3%A1p-c%E1%BB%A7a-facebook-lu%E1%BB%93ng-d%E1%BB%AF-li%E1%BB%87u-m%E1%BB%99t-chi%E1%BB%81u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giải pháp của Facebook: luồng dữ liệu một chiều</h2>\n<p>Đội ngũ Facebook giải quyết bằng một kiến trúc khác, <strong>luồng dữ liệu sẽ đi một chiều duy nhất</strong>, một khi cần thêm dữ liệu mới, luồng lại đi từ điểm xuất phát. Và họ gọi kiến trúc đó là <strong>Flux</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*lZM0yU9ExEMd7DggVxXkxA.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Nhìn vào cái hình trên, bạn sẽ không thể cảm được của kiến trúc này ngay và luôn, không đọc tài liệu về Flux, có thể bạn sẽ chẳng hứng thú vì với nó.</p>\n<p>Cùng đi chi tiết từng khái niệm một. Hình dung tổ chức <strong>hội bàn đào</strong> trong John Wick, với những nhóm nhân vật khác nhau, nắm giữ những vai trò khác nhau.</p>\n<h2 id=\"giới-thiệu-các-vai-chính\"><a href=\"#gi%E1%BB%9Bi-thi%E1%BB%87u-c%C3%A1c-vai-ch%C3%ADnh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giới thiệu các vai chính</h2>\n<h3 id=\"bọn-action-creator\"><a href=\"#b%E1%BB%8Dn-action-creator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bọn action creator</h3>\n<p><img src=\"https://i.imgur.com/e2UBmM4.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Nhiệm vụ của bọn này là tạo ra action, tất cả những thay đổi, tương tác phải tới gặp bọn này. Nó giống như bọn ngồi điều hành điện thoại trong phim John Wick, những đứa khác tới đây, phát đi 1 thông điệp, action creator sẽ \"định dạng\" lại thông điệp đó bằng một mật mã mà tất các những đứa khác nằm trong hệ thống hiểu được.</p>\n<p><img src=\"https://i.imgur.com/lsLrRSV.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Thông điệp được gửi đi bao gồm: kiểu thông điệp (type) và nội dung chính của thông điệp (payload). Trong đó kiểu thông điệp là một hằng số đã được định nghĩa trước đó.</p>\n<p><strong>Tác dụng phụ</strong> của một hệ thống mà toàn bộ kiểu thông điệp đã được định nghĩa sẵn, <strong>lính mới</strong> vào chỉ cần mở file này ra là biết được ứng dụng đang làm, sẽ có những tình huống nào sẽ làm thay đổi trạng thái dữ liệu.</p>\n<h3 id=\"bọn-dispatcher\"><a href=\"#b%E1%BB%8Dn-dispatcher\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bọn dispatcher</h3>\n<p><img src=\"https://i.imgur.com/nnQAAj6.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Trong John Wick, nói chung các bạn nên xem John Wick trước khi đọc bài này đó, bạn trực điện thoại nhận tin nhắn, format tin nhắn xong, bạn sẽ <strong>hét</strong> lên cho các bạn đứng trực chổ tổng đài điện thoại. Bạn <strong>trực điện thoại</strong> này biết danh sách các <strong>đầu cầu</strong> (store) cần gửi thông báo đến.</p>\n<p>Quá trình này được thực hiện một cách <strong>tuần tự</strong>, không chen lấn, không xen ngang, nếu mỗi đầu cầu cần ràng buộc về thứ tự nhận thông tin, chúng ta có để anh dispatcher này quản lý.</p>\n<p>Anh Dispatcher trong Flux sẽ khác với dispatcher trong các kiến trúc khác. Thông tin luôn được gửi đến hết các đầu cầu bất kể nó là thông tin gì. Nghĩa là mỗi đầu cầu không chỉ đăng ký một kênh thông tin nhất định, nó lắng nghe toàn bộ thông tin được gửi đi, chuyện nó quan tâm và xử lý trên từng thông tin nào là nó tự quyết định, giống như chú Bowery King nhận được yêu cầu truy sát John Wick, nhưng anh nhận tin rồi ko làm gì cả.</p>\n<h3 id=\"bọn-đầu-cầu-store\"><a href=\"#b%E1%BB%8Dn-%C4%91%E1%BA%A7u-c%E1%BA%A7u-store\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bọn đầu cầu Store</h3>\n<p>Gọi là đầu cầu thì cũng chưa đầy đủ, ngoài là nơi tiếp nhận và thực thông tin, nó còn là nơi chứa toàn bộ dữ liệu của ứng dụng, nguồn tiền của 1 tổ chức, mọi luật lệ, logic của dữ liệu sẽ nằm ở đây.</p>\n<p><img src=\"https://media.comicbook.com/2019/05/john-wick-bowery-king-1171365-1280x0.jpeg\" alt=\"Giải thích Flux pattern\"></p>\n<p>Anh Store này như chú <a href=\"https://www.imdb.com/title/tt6146586/characters/nm0000401?ref_=tt_cl_t4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bowery King</a>, khi muốn anh ấy làm gì đó, chuyển tiền, nhận tiền, đóng tiền thì bạn buộc phải làm đúng quy trình từ trên xuống dưới action creator -> dispatcher</p>\n<h3 id=\"bọn-view\"><a href=\"#b%E1%BB%8Dn-view\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bọn View</h3>\n<p><img src=\"https://m.media-amazon.com/images/M/MV5BNTQ2MWYyYTMtOTg3NC00MjA1LWFmMTUtOWRjMWViMWIxZTBmXkEyXkFqcGdeQXVyNTc5OTMwOTQ@._V1_SY1000_CR0,0,1499,1000_AL_.jpg\" alt=\"Giải thích Flux pattern\"></p>\n<p>Nhận dữ liệu, thay đổi thông tin hiển thị, tiếp nhận dữ liệu từ user, đưa ngược lên lại tổ chức là công dụng toàn bộ của bọn này.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*MY5xNk_JeKvGsGdywYD4EA.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Tổng hợp lại chúng ta có sơ đồ vận hành của tổ chức này như sau</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*GHrusKRFhQ0Y6rrwjqI6QQ.png\" alt=\"Giải thích Flux pattern\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*66hoDpUhczSXrgH2cUUasw.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Trong hình minh họa trên, còn một đứa nữa đứng giữa View và Store, được gọi là controller view, một dạng của <strong>người đưa tin</strong>, nó sẽ nhận thông báo từ đầu cầu store khi có dữ liệu thay đổi, rồi mới đưa xuống view</p>\n<p>Khi user gửi đi một thông báo đến View</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*SusQ7Aip2fSWg6raQtPSnA.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Thông tin được gửi lại action creator</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*dkm9qsWuD9DtXzH-u-DjJQ.png\" alt=\"Giải thích Flux pattern\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*RLrImTDeArSMoA4kZsajLQ.png\" alt=\"Giải thích Flux pattern\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*fWBaUg9-_1-V5M2YQBWhWg.png\" alt=\"Giải thích Flux pattern\"></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207\">A cartoon guide to Flux\n</a></p>\n","cover_image":""}},{"node":{"id":"8a96e1bde836a981c3694b7c5bb64b27","title":"8 thủ thuật khi làm việc với Object sử dụng resting và spreading","path":"/8-thu-thuat-khi-lam-viec-voi-object-su-dung-resting-va-spreading/","date":"2019-03-23","timeToRead":3,"desc":"Những đoạn code bỏ túi hay xài nhất khi đụng tới object","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#merge-object\">Merge object</a></li>\n<li><a href=\"#th%C3%AAm-property\">Thêm property</a></li>\n<li><a href=\"#th%C3%AAm-property-khi-th%C3%B5a-%C4%91i%E1%BB%81u-ki%E1%BB%87n\">Thêm property khi thõa điều kiện</a></li>\n<li><a href=\"#x%C3%B3a-property-kh%E1%BB%8Fi-object\">Xóa property khỏi object</a></li>\n<li><a href=\"#x%C3%B3a-property-v%E1%BB%9Bi-key-ch%E1%BB%89-%C4%91%E1%BB%8Bnh\">Xóa property với key chỉ định</a></li>\n<li><a href=\"#s%E1%BA%AFp-x%E1%BA%BFp-property\">Sắp xếp property</a></li>\n<li><a href=\"#property-m%E1%BA%B7c-%C4%91%E1%BB%8Bnh\">Property mặc định</a></li>\n<li><a href=\"#%C4%91%E1%BB%95i-t%C3%AAn-property\">Đổi tên property</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"merge-object\"><a href=\"#merge-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Merge object</h2>\n<p><code class=\"language-text\">part1</code> và <code class=\"language-text\">part2</code> sẽ được merge vào <code class=\"language-text\">user1</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> part1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'An Luu'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> part2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">:</span> <span class=\"token string\">'Password!'</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>part1<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>part2 <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//=> { id: 100, name: 'An Luu', password: 'Password!' }</span></code></pre>\n<h2 id=\"thêm-property\"><a href=\"#th%C3%AAm-property\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thêm property</h2>\n<p>Clone một object đồng thời thêm một số property mới vào object mới clone</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'An Luu'</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> userWithPass <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>user<span class=\"token punctuation\">,</span> password<span class=\"token operator\">:</span> <span class=\"token string\">'Password!'</span> <span class=\"token punctuation\">}</span>\n\nuser <span class=\"token comment\">//=> { id: 100, name: 'An Luu' }</span>\nuserWithPass <span class=\"token comment\">//=> { id: 100, name: 'An Luu', password: 'Password!' }</span></code></pre>\n<h2 id=\"thêm-property-khi-thõa-điều-kiện\"><a href=\"#th%C3%AAm-property-khi-th%C3%B5a-%C4%91i%E1%BB%81u-ki%E1%BB%87n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thêm property khi thõa điều kiện</h2>\n<p>Trường hợp này hay dùng nhất là lúc chúng ta truyền lên API một object, nếu thõa điều kiện, sẽ thêm một số property vào trong object</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'An Luu'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> <span class=\"token string\">'Password!'</span>\n<span class=\"token keyword\">const</span> userWithPassword <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token spread operator\">...</span>user<span class=\"token punctuation\">,</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span>password <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">{</span> password <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nuserWithPassword <span class=\"token comment\">//=> { id: 100, name: 'An Luu', password: 'Password!' }</span></code></pre>\n<h2 id=\"xóa-property-khỏi-object\"><a href=\"#x%C3%B3a-property-kh%E1%BB%8Fi-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xóa property khỏi object</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// hàm này sẽ trả về object mới ko bao gồm password</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noPassword</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> password<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>rest <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> rest\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'An Luu'</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token operator\">:</span> <span class=\"token string\">'Password!'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">noPassword</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=> { id: 100, name: 'An Luu' }</span></code></pre>\n<h2 id=\"xóa-property-với-key-chỉ-định\"><a href=\"#x%C3%B3a-property-v%E1%BB%9Bi-key-ch%E1%BB%89-%C4%91%E1%BB%8Bnh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xóa property với key chỉ định</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'An Luu'</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token operator\">:</span> <span class=\"token string\">'Password!'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">removeProperty</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">prop</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> _<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>rest <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> rest\n<span class=\"token comment\">//                     ----       ------</span>\n<span class=\"token comment\">//                          \\   /</span>\n<span class=\"token comment\">//                dynamic destructuring</span>\n\n<span class=\"token keyword\">const</span> removePassword <span class=\"token operator\">=</span> <span class=\"token function\">removeProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> removeId <span class=\"token operator\">=</span> <span class=\"token function\">removeProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">removePassword</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=> { id: 100, name: 'An Luu' }</span>\n<span class=\"token function\">removeId</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=> { name: 'An Luu', password: 'Password!' }</span></code></pre>\n<h2 id=\"sắp-xếp-property\"><a href=\"#s%E1%BA%AFp-x%E1%BA%BFp-property\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sắp xếp property</h2>\n<p>Đôi khi chúng ta sẽ muốn thay đổi các property theo một thứ tự nào đó, nếu sắp xếp toàn bộ luôn thì chắc dùng <code class=\"language-text\">Object.keys</code> rồi thay xếp cái mảng key này lại.</p>\n<p>Để di chuyển <code class=\"language-text\">id</code> lên đầu, trước hết gán giá trị <code class=\"language-text\">undefined</code> cho nó trước, sau đó, override lại giá trị này bằng cách resting</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  password<span class=\"token operator\">:</span> <span class=\"token string\">'Password!'</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'An Luu'</span><span class=\"token punctuation\">,</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">300</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">organize</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">object</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>object <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//                            -------------</span>\n<span class=\"token comment\">//                          /</span>\n<span class=\"token comment\">//  dời id lên đầu</span>\n\n<span class=\"token function\">organize</span><span class=\"token punctuation\">(</span>user3<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//=> { id: 300, password: 'Password!', name: 'An Luu' }</span></code></pre>\n<p>Còn di chuyển xuống dưới cùng</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  password<span class=\"token operator\">:</span> <span class=\"token string\">'Password!'</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'An Luu'</span><span class=\"token punctuation\">,</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">300</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">organize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> password<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>object <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>object<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//              --------</span>\n<span class=\"token comment\">//             /</span>\n<span class=\"token comment\">// dời password xuống cuối</span>\n\n<span class=\"token function\">organize</span><span class=\"token punctuation\">(</span>user3<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//=> { name: 'An Luu', id: 300, password: 'Password!' }</span></code></pre>\n<h2 id=\"property-mặc-định\"><a href=\"#property-m%E1%BA%B7c-%C4%91%E1%BB%8Bnh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Property mặc định</h2>\n<p>Ví dụ, <code class=\"language-text\">user2</code> không có chứa <code class=\"language-text\">quotes</code>, hàm <code class=\"language-text\">setDefaults</code> đảm bảo tất cả object đều chứa property là <code class=\"language-text\">quotes</code>, nếu ko nó thêm vào <code class=\"language-text\">[]</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'An Luu'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'You'</span><span class=\"token punctuation\">,</span>\n  quotes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"I've got a good feeling about this...\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setDefaults</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> quotes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>object<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>object<span class=\"token punctuation\">,</span> quotes <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// hoặc nếu muốn dời thằng quotes lên đầu</span>\n<span class=\"token comment\">// const setDefaults = ({ ...object}) => ({ quotes: [], ...object })</span>\n\n<span class=\"token function\">setDefaults</span><span class=\"token punctuation\">(</span>user2<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//=> { id: 200, name: 'An Luu', quotes: [] }</span>\n\n<span class=\"token function\">setDefaults</span><span class=\"token punctuation\">(</span>user4<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//=> {</span>\n<span class=\"token comment\">//=>   id: 400,</span>\n<span class=\"token comment\">//=>   name: 'You',</span>\n<span class=\"token comment\">//=>   quotes: [\"I've got a good feeling about this...\"]</span>\n<span class=\"token comment\">//=> }</span></code></pre>\n<h2 id=\"đổi-tên-property\"><a href=\"#%C4%91%E1%BB%95i-t%C3%AAn-property\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đổi tên property</h2>\n<p>Thí dụ bạn ko muốn trong object chứa property <code class=\"language-text\">ID</code>, nó phải viết thường <code class=\"language-text\">id</code>, đầu tiên chúng ta remove ID ra khỏi object, sau đó add lại bằng tên là <code class=\"language-text\">id</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">renamed</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token constant\">ID</span><span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>object <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token constant\">ID</span><span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>object <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">ID</span><span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"An Luu\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">renamed</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=> { id: 500, name: 'An Luu' }</span></code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://blog.bitsrc.io/6-tricks-with-resting-and-spreading-javascript-objects-68d585bdc83\">7 Tricks with Resting and Spreading JavaScript Objects</a></p>\n","cover_image":""}},{"node":{"id":"9e12fec8adcd2cd25617bb60a650fc1f","title":"Tạo React Boilerplate - Từ a tới z","path":"/tao-react-boilerplate-tu-a-toi-z/","date":"2019-03-19","timeToRead":5,"desc":"Một ngày nào đó bạn ko muốn dùng create-react-app để khởi tạo project nữa, thì đây chính là bài hướng dẫn bạn cần đọc: setup một project từ a tới z mà không dùng create-react-app","content":"<p>Tạo thư mục mới nào</p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">mkdir react<span class=\"token operator\">-</span>bolt</code></pre>\n<p>Vào bên trong thư mục <code class=\"language-text\">react-bolt</code> vừa tạo, chạy lệnh init</p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">npm init <span class=\"token operator\">-</span>y</code></pre>\n<p>Lệnh này sẽ khởi tạo một project npm, trong đó có file <code class=\"language-text\">package.json</code>, nơi chúng ta chứa toàn bộ những dependencies</p>\n<p>Chúng ta tạo thêm một số thư mục cần thiết khác</p>\n<pre class=\"language-text\"><code class=\"language-text\">react-bolt\n    |--config\n    |--src\n    |--tests</code></pre>\n<p>Tiến hành cài đặt <code class=\"language-text\">webpack</code> và một số plugin</p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">npm i <span class=\"token operator\">--</span><span class=\"token function\">save-dev</span> webpack webpack<span class=\"token operator\">-</span><span class=\"token function\">cli</span> webpack<span class=\"token operator\">-</span>dev<span class=\"token operator\">-</span>server webpack<span class=\"token operator\">-</span>merge html<span class=\"token operator\">-</span>webpack<span class=\"token operator\">-</span>plugin clean<span class=\"token operator\">-</span>webpack<span class=\"token operator\">-</span>plugin img<span class=\"token operator\">-</span>loader url<span class=\"token operator\">-</span>loader file<span class=\"token operator\">-</span>loader </code></pre>\n<p>Bên trong thư mục <code class=\"language-text\">config</code>, chúng ta tạo thêm thư mục tên <code class=\"language-text\">webpack</code>, chúng ta tạo lần lượt 5 file bên dưới trong thư mục <code class=\"language-text\">webpack</code></p>\n<p><strong>paths.js</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">path</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'path'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    root<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    outputPath<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'build'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    entryPath<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'src/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    templatePath<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'src/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    imagesFolder<span class=\"token operator\">:</span> <span class=\"token string\">'images'</span><span class=\"token punctuation\">,</span>\n    fontsFolder<span class=\"token operator\">:</span> <span class=\"token string\">'fonts'</span><span class=\"token punctuation\">,</span>\n    cssFolder<span class=\"token operator\">:</span> <span class=\"token string\">'css'</span><span class=\"token punctuation\">,</span>\n    jsFolder<span class=\"token operator\">:</span> <span class=\"token string\">'js'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>rules.js</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\.</span>js<span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            loader<span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\.</span>eot<span class=\"token group punctuation\">(</span><span class=\"token special-escape escape\">\\?</span>v=<span class=\"token charclass class-name\">\\d</span><span class=\"token quantifier number\">+</span><span class=\"token special-escape escape\">\\.</span><span class=\"token charclass class-name\">\\d</span><span class=\"token quantifier number\">+</span><span class=\"token special-escape escape\">\\.</span><span class=\"token charclass class-name\">\\d</span><span class=\"token quantifier number\">+</span><span class=\"token group punctuation\">)</span><span class=\"token quantifier number\">?</span><span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token operator\">:</span> <span class=\"token string\">'file-loader'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\.</span><span class=\"token group punctuation\">(</span>woff<span class=\"token alternation keyword\">|</span>woff2<span class=\"token group punctuation\">)</span><span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token operator\">:</span> <span class=\"token string\">'url-loader?prefix=font/&amp;limit=5000'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\.</span>ttf<span class=\"token group punctuation\">(</span><span class=\"token special-escape escape\">\\?</span>v=<span class=\"token charclass class-name\">\\d</span><span class=\"token quantifier number\">+</span><span class=\"token special-escape escape\">\\.</span><span class=\"token charclass class-name\">\\d</span><span class=\"token quantifier number\">+</span><span class=\"token special-escape escape\">\\.</span><span class=\"token charclass class-name\">\\d</span><span class=\"token quantifier number\">+</span><span class=\"token group punctuation\">)</span><span class=\"token quantifier number\">?</span><span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token operator\">:</span> <span class=\"token string\">'url-loader?limit=10000&amp;mimetype=application/octet-stream'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\.</span><span class=\"token group punctuation\">(</span>jpe<span class=\"token quantifier number\">?</span>g<span class=\"token alternation keyword\">|</span>png<span class=\"token alternation keyword\">|</span>gif<span class=\"token alternation keyword\">|</span>svg<span class=\"token group punctuation\">)</span><span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span>\n        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'url-loader?limit=10000'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'img-loader'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>webpack.common.babel.js</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">webpack</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'webpack'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">HtmlWebpackPlugin</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">paths</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./paths'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">rules</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./rules'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    entry<span class=\"token operator\">:</span> paths<span class=\"token punctuation\">.</span><span class=\"token property-access\">entryPath</span><span class=\"token punctuation\">,</span>\n    module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        rules\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        modules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'node_modules'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        extensions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.scss'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.css'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>ProgressPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            template<span class=\"token operator\">:</span> paths<span class=\"token punctuation\">.</span><span class=\"token property-access\">templatePath</span><span class=\"token punctuation\">,</span>\n            minify<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                collapseInlineTagWhitespace<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                collapseWhitespace<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                preserveLineBreaks<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                minifyURLs<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                removeComments<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                removeAttributeQuotes<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>webpack.dev.babel.js</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">webpack</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'webpack'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">paths</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./paths'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">rules</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./rules'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    mode<span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        filename<span class=\"token operator\">:</span> <span class=\"token string\">'[name].js'</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token operator\">:</span> paths<span class=\"token punctuation\">.</span><span class=\"token property-access\">outputPath</span><span class=\"token punctuation\">,</span>\n        chunkFilename<span class=\"token operator\">:</span> <span class=\"token string\">'[name].js'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        rules\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token dom variable\">performance</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        hints<span class=\"token operator\">:</span> <span class=\"token string\">'warning'</span><span class=\"token punctuation\">,</span>\n        maxAssetSize<span class=\"token operator\">:</span> <span class=\"token number\">450000</span><span class=\"token punctuation\">,</span>\n        maxEntrypointSize<span class=\"token operator\">:</span> <span class=\"token number\">8500000</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">assetFilter</span><span class=\"token operator\">:</span> <span class=\"token parameter\">assetFilename</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n                assetFilename<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.css'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> assetFilename<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    optimization<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        splitChunks<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            chunks<span class=\"token operator\">:</span> <span class=\"token string\">'all'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    devServer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        contentBase<span class=\"token operator\">:</span> paths<span class=\"token punctuation\">.</span><span class=\"token property-access\">outputPath</span><span class=\"token punctuation\">,</span>\n        compress<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        hot<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        historyApiFallback<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>HotModuleReplacementPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>webpack.prod.babel.js</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">CleanWebpackPlugin</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">paths</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./paths'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">rules</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./rules'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    mode<span class=\"token operator\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        filename<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>paths<span class=\"token punctuation\">.</span><span class=\"token property-access\">jsFolder</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/[name].[hash].js</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        path<span class=\"token operator\">:</span> paths<span class=\"token punctuation\">.</span><span class=\"token property-access\">outputPath</span><span class=\"token punctuation\">,</span>\n        chunkFilename<span class=\"token operator\">:</span> <span class=\"token string\">'[name].[chunkhash].js'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        rules\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>paths<span class=\"token punctuation\">.</span><span class=\"token property-access\">outputPath</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            root<span class=\"token operator\">:</span> paths<span class=\"token punctuation\">.</span><span class=\"token property-access\">root</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    devtool<span class=\"token operator\">:</span> <span class=\"token string\">'source-map'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Bên trong <code class=\"language-text\">webpack.common.babel.js</code> chúng ta sẽ setup entry và output và các plugin. Các thiết đặt để chạy môi trường dev sẽ nằm trong <code class=\"language-text\">webpack.dev.babel.js</code> và môi trường production sẽ nằm trong <code class=\"language-text\">webpack.prod.babel.js</code> </p>\n<p>Sau cùng, bên trong thư mục gốc, tạo thêm file <code class=\"language-text\">webpack.config.js</code> nó sẽ merge 3 file config common, dev, prod lại</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@babel/register'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> webpackMerge <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-merge'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> common <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config/webpack/webpack.common.babel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> envs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    development<span class=\"token operator\">:</span> <span class=\"token string\">'dev'</span><span class=\"token punctuation\">,</span>\n    production<span class=\"token operator\">:</span> <span class=\"token string\">'prod'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* eslint-disable global-require,import/no-dynamic-require */</span>\n<span class=\"token keyword\">const</span> env <span class=\"token operator\">=</span> envs<span class=\"token punctuation\">[</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">||</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> envConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./config/webpack/webpack.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>env<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.babel</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token function\">webpackMerge</span><span class=\"token punctuation\">(</span>common<span class=\"token punctuation\">,</span> envConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"babel\"><a href=\"#babel\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Babel</h2>\n<p>Cái các plugin cần thiết cho babel</p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">npm install <span class=\"token operator\">--</span><span class=\"token function\">save-dev</span> @babel<span class=\"token operator\">/</span>core @babe<span class=\"token operator\">/</span><span class=\"token function\">cli</span> @babel<span class=\"token operator\">/</span>node @babel<span class=\"token operator\">/</span>plugin<span class=\"token operator\">-</span>proposal<span class=\"token operator\">-</span><span class=\"token keyword\">class</span><span class=\"token operator\">-</span>properties @babel<span class=\"token operator\">/</span>plugin<span class=\"token operator\">-</span>proposal<span class=\"token operator\">-</span>object<span class=\"token operator\">-</span>rest<span class=\"token operator\">-</span>spread @babel<span class=\"token operator\">/</span>plugin<span class=\"token operator\">-</span>syntax<span class=\"token operator\">-</span>dynamic<span class=\"token operator\">-</span>import @babel<span class=\"token operator\">/</span>plugin<span class=\"token operator\">-</span>syntax<span class=\"token operator\">-</span><span class=\"token function\">import-meta</span> @babel<span class=\"token operator\">/</span>plugin<span class=\"token operator\">-</span>transform<span class=\"token operator\">-</span>async<span class=\"token operator\">-</span>to<span class=\"token operator\">-</span>generator @babel<span class=\"token operator\">/</span>plugin<span class=\"token operator\">-</span>transform<span class=\"token operator\">-</span>runtime @babel<span class=\"token operator\">/</span>preset<span class=\"token operator\">-</span>env @babel<span class=\"token operator\">/</span>preset<span class=\"token operator\">-</span>react @babel<span class=\"token operator\">/</span>register @babel<span class=\"token operator\">/</span>runtime babel<span class=\"token operator\">-</span>eslint babel<span class=\"token operator\">-</span>jest babel<span class=\"token operator\">-</span>loader babel<span class=\"token operator\">-</span>core@7<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>0<span class=\"token operator\">-</span>bridge<span class=\"token punctuation\">.</span>0</code></pre>\n<p>Tạo file <code class=\"language-text\">.babelrc</code> bên trong thư mục gốc, thiết đặt babel khi chạy</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"@babel/preset-env\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"useBuiltIns\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"entry\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"@babel/preset-react\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"@babel/plugin-proposal-object-rest-spread\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"@babel/plugin-transform-runtime\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"@babel/plugin-transform-async-to-generator\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"@babel/plugin-proposal-class-properties\"</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"eslint\"><a href=\"#eslint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Eslint</h2>\n<p>Cài đặt package </p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">npm install <span class=\"token operator\">--</span><span class=\"token function\">save-dev</span> eslint eslint<span class=\"token operator\">-</span>config<span class=\"token operator\">-</span>airbnb eslint<span class=\"token operator\">-</span>config<span class=\"token operator\">-</span>prettier eslint<span class=\"token operator\">-</span>loader eslint<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>babel eslint<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>import eslint<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>jsx<span class=\"token operator\">-</span>a11y eslint<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>prettier eslint<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>react </code></pre>\n<p>Bên trong thư mục gốc, tạo file <code class=\"language-text\">.eslintrc</code> để cấu hình cho eslint</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel-eslint\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"airbnb\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"prettier\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"prettier/react\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"prettier\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"ecmaVersion\"</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"ecmaFeatures\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"mocha\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"es6\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"jest\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"indent\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"space-before-function-paren\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"react/prefer-stateless-function\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"warn\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"react/jsx-one-expression-per-line\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"import/no-extraneous-dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"react/jsx-filename-extension\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\".js\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".jsx\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"linebreak-style\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"global-require\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"warn\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"arrow-body-style\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"no-multiple-empty-lines\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"warn\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"max\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"no-unused-expressions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"allowTaggedTemplates\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"no-underscore-dangle\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> <span class=\"token property\">\"allow\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"__REDUX_DEVTOOLS_EXTENSION__\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"prettier\"><a href=\"#prettier\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Prettier</h2>\n<p>Cài đặt package</p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">npm install <span class=\"token operator\">--</span><span class=\"token function\">save-dev</span> prettier</code></pre>\n<p>Tạo file <code class=\"language-text\">.prettierrc</code> với nội dung</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"printWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"tabWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"singleQuote\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"bracketSpacing\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"react\"><a href=\"#react\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>React</h2>\n<p>Cuối cùng chúng ta chỉ còn cài React nữa là xong</p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">npm install <span class=\"token operator\">--</span>save react react<span class=\"token operator\">-</span>dom cross<span class=\"token operator\">-</span>env</code></pre>\n<p>Bên trong thư mục <code class=\"language-text\">src</code>, tạo file <code class=\"language-text\">index.html</code></p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ie=edge<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>React Bolt<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>File <code class=\"language-text\">index.js</code> trong thư mục <em>src</em></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ReactDOM</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./components/App'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token maybe-class-name\">ReactDOM</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">App</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Mấy cái router, redux thì bạn cứ xem tài liệu của tụi nó nhé.</p>\n<h2 id=\"jest\"><a href=\"#jest\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Jest</h2>\n<p>Bạn có thể dùng cái khác để test, nhưng Jest thì phổ biến nhất rồi</p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">npm install <span class=\"token operator\">--</span><span class=\"token function\">save-dev</span> jest jest<span class=\"token operator\">-</span>dom react<span class=\"token operator\">-</span>testing<span class=\"token operator\">-</span>library</code></pre>\n<p>Bổ sung lệnh để chạy test trong <code class=\"language-text\">package.json</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"jest\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"setupFiles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"&lt;rootDir>/config/tests/jest.config\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"transform\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"^.+\\\\.js$\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel-jest\"</span>\n    <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cross-env NODE_ENV=development webpack-dev-server --open\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cross-env NODE_ENV=production webpack\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint ./src/**/**.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"lint:fix\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint ./src/**/**.js --fix\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"test:watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run test --watch\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"test:cover\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run test --coverage\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>config/tests/jest.config.js</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    automock<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    browser<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    bail<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    collectCoverageFrom<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'src/**/*.{js,jsx}'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'!**/node_modules/**'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'!**/vendor/**'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    coverageDirectory<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;rootDir>/coverage'</span><span class=\"token punctuation\">,</span>\n    globals<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        __DEV__<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    moduleFileExtensions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'node'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    transform<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'^.+\\\\.js?$'</span><span class=\"token operator\">:</span> <span class=\"token string\">'babel-jest'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    verbose<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    setupTestFrameworkScriptFile<span class=\"token operator\">:</span> <span class=\"token string\">'./rtl.setup.js'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>config/tests/rtl.setup.js</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// See https://github.com/kentcdodds/react-testing-library#global-config</span>\n<span class=\"token keyword module\">import</span> <span class=\"token string\">'jest-dom/extend-expect'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token string\">'react-testing-library/cleanup-after-each'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Xong.</p>\n<p><a href=\"https://github.com/leonardomso/react-bolt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code ở đây</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.freecodecamp.org/a-complete-react-boilerplate-tutorial-from-zero-to-hero-20023e086c4a\">Link bài gốc - A Complete React Boilerplate Tutorial — From Zero to Hero</a></p>\n","cover_image":""}},{"node":{"id":"5eadb4fb31a8a53f91d7af473359e9f1","title":"Function Component khác Class component như thế nào trong React","path":"/function-component-khac-class-component-nhu-the-nao-trong-react/","date":"2019-03-12","timeToRead":3,"desc":"Ngày xưa khi chưa có hook, thì rất dễ để trả lời câu này, nhưng từ ngày hook được sử dụng, câu hỏi lại này lại được đặt ra, ủa vậy 2 thằng nó khác nhau ở điểm nào.","content":"<p>Có thể bạn cũng từng nghe nói, một trong 2 thằng đó performance tốt hơn. Xem thêm đánh giá từ <a href=\"https://medium.com/@dan_abramov/this-benchmark-is-indeed-flawed-c3d6b5b6f97f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">This benchmark is indeed flawed.</a>. Nói về performance thì phải xem cái code bên trong nó làm cái gì, chứ ko còn đơn thuần là function hay class nó sẽ performance cao hơn.</p>\n<p>Như vậy, việc bạn chuyển hết các component đang viết sang function component, rồi kết hợp với hook để thay cho class component thực sự phải cân nhắc, vì nhiều khi tốn thời gian mà ko mang nhiều lợi ích lắm.</p>\n<p>Xem xét một function component như thế này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ProfilePage</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Ta có thể viết lại thành class component</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">showMessage</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleClick</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Để thấy sự khác nhau, chúng ta cũng xem một con bug rất hay xảy ra trong React.</p>\n<p>Chạy thử <a href=\"https://codesandbox.io/s/pjqnl16lm7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo</a>,  rồi làm theo các bước sau\n1. Click vào một trong 2 nút follow\n2. Chọn profile name khác với ban đầu, từ cái dropdown, đợi 3 giây để nó chạy\n3. Đọc kết quả của alert</p>\n<p>Nếu dùng <code class=\"language-text\">ProfilePage</code> function, nếu chọn Dan sau đó chuyển sang Sophie, nó sẽ hiện câu alert là <code class=\"language-text\">Followed Dan</code>\nNếu dùng <code class=\"language-text\">ProfilePage</code> class, ta sẽ được alert câu <code class=\"language-text\">Followed Sophie</code></p>\n<p><img src=\"https://overreacted.io/bug-386a449110202d5140d67336a0ade5a0.gif\" alt=\"Để thấy sự khác nhau, chúng ta cũng xem một con bug rất hay xảy ra trong React.\"></p>\n<p>Kết quả chạy của function component là đúng, sau khi chuyển sang người khác chúng ta đâu có gọi lại follow? Rõ ràng class component bị <em>bug</em>.</p>\n<p>Xem xét hàm <code class=\"language-text\">showMessage</code> bên trong class component</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nó đọc giá trị từ <code class=\"language-text\">this.props.user</code>, tuy nhiên, thằng <strong>this</strong> là một một giá trị luôn luôn <strong>mutable</strong>, tức có thể thay đổi, không phải bất biến.</p>\n<p>Nó là mục đích của sử dụng từ khóa <code class=\"language-text\">this</code> bên trong class chứ cũng ko hẳn là bug. React muốn lấy được giá trị mới nhất trong lúc render và trong các phương thức lifecycle</p>\n<blockquote>\n<p>Cho dễ nhớ, <code class=\"language-text\">this.props</code> luôn là giá trị mới nhất khi nó cần render </p>\n</blockquote>\n<p>Giờ nếu mà ko có sự tồn tại của function component, thì chúng ta giải quyết vấn đề này như thế nào ? Chúng ta sẽ lấy giá trị của <code class=\"language-text\">this.props</code> trước khi <code class=\"language-text\">setTimeout</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">showMessage</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleClick</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Tuy nhiên đây cũng chưa phải là cách hoàn hảo để giải quyết triệt để con bug trên. Có thể sử dụng javascript closure để hoàn toàn xử trí vụ này, nhưng thật lòng mà nói, xài closure vô rất rối, khó lòng nhẩm được giá trị hiện tại.</p>\n<p>Một cách khác được nhiều người sử dụng hơn là truy xuất trong hàm render, chúng ta đặt hết niềm tin vào giá trị của <code class=\"language-text\">prop</code> và <code class=\"language-text\">state</code> trong lúc render </p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// lấy giá trị props</span>\n    <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// lưu ý chúng ta đang trong hàm render</span>\n    <span class=\"token comment\">// đây ko phải là một phương thức của class</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Như vậy giá trị của <code class=\"language-text\">user</code> bên trong hàm <code class=\"language-text\">showMessage</code> nó sẽ luôn đồng nhất với lúc render.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://overreacted.io/how-are-function-components-different-from-classes/\">How Are Function Components Different from Classes?</a></p>\n","cover_image":""}},{"node":{"id":"9358bcb7257ba0e35f104945857aa41f","title":"Làm quen với React Hook bằng ví dụ","path":"/lam-quen-voi-react-hook-bang-vi-du/","date":"2019-02-11","timeToRead":2,"desc":"Chúng ta cùng bắt đầu học sử dụng React Hook, nó giải quyết vấn đề gì, sử dụng nó ra sao","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#state-trong-react\">State trong React</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-react-hook\">Sử dụng React Hook</a></li>\n</ul>\n<!-- /TOC -->\n<p>Mấy tháng trước thiên hạ rần rần với React hook khi nó còn đang ở bản proposal (show hàng cho các anh lập trình viên, nếu thích thì họ phát triển tiếp), bây giờ khi <a href=\"https://reactjs.org/blog/2019/02/06/react-v16.8.0.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React chính thức công bố trên trang chủ</a> rồi, chúng ta cùng làm quen với React hook cũng ko có gì muộn.</p>\n<h2 id=\"state-trong-react\"><a href=\"#state-trong-react\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>State trong React</h2>\n<p>Khi khai báo một component trong React bằng <code class=\"language-text\">class</code> (stateful component), không dùng function để khai báo (stateless component), thì trong component đó chúng ta có <code class=\"language-text\">state</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StatefulComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            name<span class=\"token operator\">:</span> <span class=\"token string\">'An Luu'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                Hello </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">StatelessComponent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            Hello </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Vấn đề của hàm <code class=\"language-text\">setState</code> là nó chỉ có khi chúng ta khai báo component bằng class, nó là hàm <code class=\"language-text\">async</code> - nghĩa là nếu chúng ta gọi <code class=\"language-text\">setState</code> nhiều lần, component được render lại với số lần gọi <code class=\"language-text\">setState</code>.</p>\n<p>Nguyên nhân chính đẻ ra cái hook chính là việc ko thể <code class=\"language-text\">setState</code> trong function component (ủa vậy tại sao đẻ ra khái niệm function component chi, stateless component chi?)</p>\n<h2 id=\"sử-dụng-react-hook\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-react-hook\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng React Hook</h2>\n<p>Trước tiên muốn dùng React Hook, phải đảm bảo version React đang dùng thấp nhất là 16.8.0</p>\n<p>Hàm quan trọng cần nhớ là <code class=\"language-text\">useState</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>useState<span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Hàm <code class=\"language-text\">useState</code> nhận tham số initial state, sau đó sẽ <strong>trả về một mảng</strong> 2 phần tử, phần tử đầu tiên là state hiện tại, thứ 2 là hàm để update state (<code class=\"language-text\">setState</code> đó mà)</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Sử dụng trên component thực tế đi nhỉ</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Form</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> addTodo <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSubmit</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>value<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Add a todo<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">StatelessComponent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTodo</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">text</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> newTodos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>todos<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> text <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setTodos</span><span class=\"token punctuation\">(</span>newTodos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">deleteTodo</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">index</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> newTodos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">todos</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        newTodos<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setTodos</span><span class=\"token punctuation\">(</span>newTodos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Form</span></span> <span class=\"token attr-name\">addTodo</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>addTodo<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">deleteTodo</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1549453648271/wSbUZbet_.gif\" alt=\"Làm quen với React Hook bằng ví dụ thực tế\"></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://hashnode.com/post/write-your-first-react-hook-cjrt8lfci00aw18s1z8v9s06n\n\">Write your first React Hook!</a></p>\n","cover_image":""}},{"node":{"id":"83955bb941ea7b4b3979e074ed210fcf","title":"5 cách viết hay sử dụng trong React","path":"/5-cach-viet-hay-su-dung-trong-react/","date":"2018-12-30","timeToRead":4,"desc":"Điểm qua 6 React Pattern hay gặp trong React","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#render-theo-%C4%91i%E1%BB%81u-ki%E1%BB%87n\">Render theo điều kiện</a></li>\n<li><a href=\"#truy%E1%BB%81n-prop-xu%E1%BB%91ng-c%C3%A1c-component-children\">Truyền prop xuống các component children</a></li>\n<li><a href=\"#higher-order-component\">Higher Order Component</a></li>\n<li><a href=\"#server-side-rendering-%C4%91%E1%BB%83-t%E1%BB%91i-%C6%B0u-seo\">Server-side rendering để tối ưu SEO</a></li>\n<li><a href=\"#inline-style-v%C3%A0-css-import\">Inline style và CSS Import</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"render-theo-điều-kiện\"><a href=\"#render-theo-%C4%91i%E1%BB%81u-ki%E1%BB%87n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Render theo điều kiện</h2>\n<p>Nếu đang viết câu render theo điều kiện như bên dưới.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> condition <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> innerContent <span class=\"token operator\">=</span> condition <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Show me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Always visible</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token punctuation\">{</span> innerContent <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Cách viết ở trên có sẽ dễ rơi vào tình trạng mất kiểm soát khi có nhiều hơn 1 câu điều kiện rút gọn ở trước hàm <code class=\"language-text\">render</code>. Bạn phải mò mẫm lại các hàm bên trong để biết element nào sẽ được render.</p>\n<p>Xem xét cách viết sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> condition <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Always visible</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token punctuation\">{</span>\n\t\t\tcondition <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Show me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Nếu giá trị của <code class=\"language-text\">condition</code> là <code class=\"language-text\">false</code>, đoạn sau <code class=\"language-text\">&amp;&amp;</code>  sẽ ko được đếm xỉa.</p>\n<h2 id=\"truyền-prop-xuống-các-component-children\"><a href=\"#truy%E1%BB%81n-prop-xu%E1%BB%91ng-c%C3%A1c-component-children\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Truyền prop xuống các component children</h2>\n<p>Khi chúng ta cần truyền các prop xuống các component bên dưới, dùng kiểu <strong>destructuring object</strong>, không cần quan tâm đến tên chính xác truyền qua từng prop</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Details</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> <span class=\"token parameter\"><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> language <span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span><span class=\"token plain-text\"> works with </span><span class=\"token punctuation\">{</span> language <span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Layout</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> <span class=\"token parameter\"><span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>props <span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Details</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Layout</span></span>\n\t\t<span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>I<span class=\"token punctuation\">'</span>m here to stay<span class=\"token punctuation\">\"</span></span>\n\t\t<span class=\"token attr-name\">language</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Javascript<span class=\"token punctuation\">\"</span></span>\n\t\t<span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Alex<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"higher-order-component\"><a href=\"#higher-order-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Higher Order Component</h2>\n<p>React đã bỏ <code class=\"language-text\">React.createElement</code> và <em>mixins</em>, HOCs là lựa chọn còn lại duy nhất khi bạn muốn sử dụng cùng 1 component với nhiều version khác nhau.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newProps</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span> <span class=\"token parameter\"><span class=\"token maybe-class-name\">WrappedComponent</span></span> <span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">ModifiedComponent</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ownProps</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WrappedComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">ownProps</span><span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">newProps</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword control-flow\">return</span> <span class=\"token maybe-class-name\">ModifiedComponent</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Details</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> language <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> works with </span><span class=\"token punctuation\">{</span>language<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> newProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"An\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">ModifiedDetails</span> <span class=\"token operator\">=</span> <span class=\"token function\">withProps</span><span class=\"token punctuation\">(</span>newProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Details</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">ModifiedDetails</span>\n\t\ttitle<span class=\"token operator\">=</span><span class=\"token string\">\"I'm here to stay\"</span>\n\t\tlanguage<span class=\"token operator\">=</span>\"<span class=\"token maybe-class-name\">Javascript”</span>\n\t<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Nếu bạn quá thích HOC, có thể tham khảo để dùng thêm thư viện này <a href=\"https://github.com/acdlite/recompose\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/acdlite/recompose</a></p>\n<h2 id=\"server-side-rendering-để-tối-ưu-seo\"><a href=\"#server-side-rendering-%C4%91%E1%BB%83-t%E1%BB%91i-%C6%B0u-seo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Server-side rendering để tối ưu SEO</h2>\n<p>Với các ứng dụng Single Page App, có 2 issue thường được đề cập.</p>\n<ol>\n<li>Load lần đầu, javascript không được cache. Và nếu file javascript ban đầu quá lớn thì sẽ ảnh hưởng tới tốc độ load (lazy load sẽ giải quyết vấn đề này)</li>\n<li>Vì javascript sẽ đảm nhiệm render ở client, các con crawler của search engine sẽ không thể đọc được nội dung trang.</li>\n</ol>\n<p>Chúng ta giải quyết các issue này bằng Server Side Rendering. Tuy nhiên chi phí phát triển sẽ tăng lên bởi chúng ta buộc phải mua server chạy Node/Express.</p>\n<p>Trong trường hợp bạn chỉ quan tâm tới Server Rendering vì SEO, thì google giờ đây đã cập nhập con crawler của nó để đọc được nội dung file javascript, Google đã phát triển nó từ năm 2016 và giờ đây thuật toán đã chạy hết sức trơn tru.</p>\n<p>Trường hợp bạn quan tâm tới một số lợi ích khác của SSR như cache file, thì xài Next.js luôn chứ đừng ngồi mò config thủ công mất thời gian công sức.</p>\n<h2 id=\"inline-style-và-css-import\"><a href=\"#inline-style-v%C3%A0-css-import\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Inline style và CSS Import</h2>\n<p>React khuyến khích chúng ta nhìn ứng dụng trên góc độ các component, stylesheet được khuyến khích \"dính\" chặt với từng component.</p>\n<p>Có rất nhiều cách được giới thiệu để viết CSS chung trong file JS. Kiểu inline style cũng được dùng rộng rãi trong React Native.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> divStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tmargin<span class=\"token operator\">:</span> <span class=\"token string\">'40px'</span><span class=\"token punctuation\">,</span>\n\tborder<span class=\"token operator\">:</span> <span class=\"token string\">'5px solid pink'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> pStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tfontSize<span class=\"token operator\">:</span> <span class=\"token string\">'15px'</span><span class=\"token punctuation\">,</span>\n\ttextAlign<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">TextBox</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>divStyle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>pStyle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Yeah!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Chúng ta không còn phải import CSS, tuy nhiên bạn có bao giờ nghĩ đến chuyện maintain và đọc lại những đoạn code CSS như thế ?. Bạn cũng không có <em>media queries</em> nữa, <em>pseudo class</em> và <em>pseudo element</em> cũng không còn.</p>\n<p>Nếu cảm thấy mệt với kiểu inline style, bạn xem thử cách sau, CSS-in-JS, hay còn gọi <em>styled-component</em>.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Text</span> <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span><span class=\"token property-access\">div</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token css language-css\">\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">white</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token color\">black</span>\n</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">This is CSS-in-JS</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Lúc render thì nó sẽ thành như vầy</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\"><span class=\"token class\">.hash234dd2</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">black</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">white</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hash234dd3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>This is CSS-in-JS<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Khác với kiểu render inline, nó vẫn render thẻ style và CSS</p>\n<p>Các Pattern để viết trong React có thể nói phát triển không ngừng, bạn thấy cái nào tiện và hay thì dùng, không thì tự tạo ra một kiểu riêng của mình cũng là ý hay.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.freecodecamp.org/evolving-patterns-in-react-116140e5fe8f\">Evolving Patterns in React</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://blog.logrocket.com/5-common-practices-that-you-can-stop-doing-in-react-9e866df5d269\">5 common practices that you can stop doing in React</a></p>\n","cover_image":""}},{"node":{"id":"82815509b42f03b7df5ff8ab1af616b8","title":"this.setState trong React chạy như thế nào","path":"/this-set-state-trong-react-chay-nhu-the-nao/","date":"2018-12-12","timeToRead":3,"desc":"Giải đáp thắc mắc vì sao this.setState có thể update DOM, chạy được trên mobile, chạy được trên bất kỳ môi trường nào","content":"<p>Update lại DOM nghe có vẻ là công việc của React DOM, tuy nhiên chúng ta gọi <code class=\"language-text\">this.setState()</code> bên trong một React Component,  nó sẽ không liên quan tới React DOM, React.Component sẽ xử lý.</p>\n<p>Vậy làm sao <code class=\"language-text\">setState()</code> bên trong React.Component update được DOM? Bạn có thể nghĩ là bên trong React.Component chứa logic để update DOM. Nhưng tại sao chúng ta vẫn có thể gọi <code class=\"language-text\">this.setState()</code> trên các môi trường khác, ví dụ như sử dụng trên React Native, nó cũng là extends của <code class=\"language-text\">React.Component</code>. Và React Native thì làm việc được trên cả Android iOS, cái View đó thì ko dựng bằng DOM.</p>\n<p>Nếu bạn đã sử dụng qua React Test Renderer hoặc Shallow Renderer. Cả 2 cách test này đều cho phép render một component bình thường và gọi <code class=\"language-text\">this.setState</code> bên trong nó. Và cả 2 thằng đó cũng ko liên quan gì tới DOM.</p>\n<p>Như vậy là <code class=\"language-text\">React.Component</code> được giao nhiệm vụ update state thì nó chạy một đoạn code chỉ định theo từng platform.</p>\n<p>Rất nhiều người lầm tưởng có một React <em>engine</em> bên trong package <code class=\"language-text\">react</code>. Điều này không đúng.</p>\n<p>Thực chất, kể từ phiên bản React 0.14, package <code class=\"language-text\">react</code> đã được tách hẳn ra cung cấp các API để khai báo <em>component</em>. Hầu hết code được thực hiện ở các <strong>renderers</strong></p>\n<p><code class=\"language-text\">react-dom</code>, <code class=\"language-text\">react-dom/server</code>, <code class=\"language-text\">react-native</code>, <code class=\"language-text\">react-test-renderer</code>, <code class=\"language-text\">react-art</code> là những <strong>renderers</strong> như vậy. Và bạn cũng có thể tự build một cái  luôn.</p>\n<p>Đó là lý do tại sao package <code class=\"language-text\">react</code> rất là hữu dụng dù bạn đang sử dụng trên bất kỳ platform nào. Tất cả những gì nó export, như <code class=\"language-text\">React.Component</code>, <code class=\"language-text\">React.createElement</code>, <code class=\"language-text\">React.Children</code> và thậm chí là <em>Hook</em>, độc lập hoàn toàn với platform. Và khi dùng chung với React DOM, React DOM server, React Native, các component của chúng ta vẫn import và sử dụng như nhau.</p>\n<p>Những thằng renderer sẽ có các API như <code class=\"language-text\">ReactDOM.render()</code> cho phép mount cấu trúc React Component vào DOM node. Mỗi thằng renderer sẽ cung cấp các API tương tự như vậy trên platform của nó. Tất cả các component khi được khai báo không cần import bất cứ gì từ renderer, như vậy để nó portable.\nBạn có thể hiểu là tại sao khi cập nhập thì chúng ta cần cập nhập cả 2 package <code class=\"language-text\">react</code> và <code class=\"language-text\">react-dom</code> cùng lúc. Ví dụ khi React 16.3 ra API context, <code class=\"language-text\">React.createContext()</code>, cái này <code class=\"language-text\">react</code> chưa có implement, mà được implement trong renderer như  React DOM, và React DOM Server sẽ có 2 cách implement khác nhau, React DOM có thể track context một chiều, nhưng React DOM Server sẽ track theo kiểu khác.</p>\n<p>Vẫn chưa trả lời được câu hỏi ban đầu, làm sao <code class=\"language-text\">setState()</code> bên trong <code class=\"language-text\">React.Component</code> <strong>nói chuyện</strong> với đúng renderer nó cần.</p>\n<p>Câu trả lời là các renderer set một field đặc biệt trong lúc create class. Field này gọi là <code class=\"language-text\">updater</code>, giá trị này bạn ko phải set, mà là công việc của React DOM, React DOM server, React Native set ngay sau khi tạo 1 instance của class.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Bên trong React DOM</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span><span class=\"token property-access\">updater</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">ReactDOMUpdater</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Bên trong React DOM Server</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span><span class=\"token property-access\">updater</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">ReactDOMServerUpdater</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Bên trong React Native</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span><span class=\"token property-access\">updater</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">ReactNativeUpdater</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Bên trong React, nó chỉ delegate lại công việc cho các renderer</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ví dụ đã được cắt bớt các phần khác.</span>\n<span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">partialState<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Sử dụng field `updater`</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">updater</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">enqueueSetState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> partialState<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Hy vọng bạn đã hiểu tại sao <code class=\"language-text\">this.setState()</code> có thể update được DOM</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://overreacted.io/how-does-setstate-know-what-to-do/\">How does setstate know what to do</a></p>\n","cover_image":""}},{"node":{"id":"5d93819d1a5c10be427112a7e0bf625b","title":"Giới thiệu React.memo","path":"/gioi-thieu-react-memo/","date":"2018-11-04","timeToRead":1,"desc":"Api mới của React 16.6","content":"<p>Functional Component, hoặc Class Component return <code class=\"language-text\">false</code> trong <code class=\"language-text\">shouldComponentUpdate</code>, component đó sẽ không bị re-render khi <strong>tree</strong> thay đổi, nó chỉ thay đổi khi <code class=\"language-text\">prop</code> truyền vào thay đổi</p>\n<p><code class=\"language-text\">React.memo()</code> hoạt động y chang như <code class=\"language-text\">React.PureComponent()</code>, nhưng nó là function component thay vì class như <code class=\"language-text\">PureComponent</code>.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">MyComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* chỉ render khi prop thay đổi */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// khai báo bằng arrow function</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>my memoized component<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ngắn hơn nữa</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>implicit memoized component<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Vì <code class=\"language-text\">React.memo()</code> là HOC, chúng ta cũng có thể dùng như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">RocketComponent</span></span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token arrow operator\">=></span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>my rocket component<span class=\"token punctuation\">.</span> <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">fuel</span><span class=\"token punctuation\">}</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// một version chỉ render khi prop thay đổi</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">MemoizedRocketComponent</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">RocketComponent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Tại sao đặt tên là <code class=\"language-text\">memo</code> nghe có vẻ chướng tai? <strong>Memoization</strong> là một kỹ thuật lập trình để optimize tốc độ, thực hiện bằng việc lưu kết quả của một function vào cache để nếu có gọi và truyền vào cùng input thì return cache thay vì thực thi các câu lệnh trong function.</p>\n","cover_image":""}},{"node":{"id":"12b2cd38bed043dbfa473bf29abfdeb6","title":"Sử dụng React.lazy ra làm sao?","path":"/su-dung-react-lazy-ra-lam-sao/","date":"2018-10-31","timeToRead":1,"desc":"Api mới của React 16.6","content":"<p>React 16.6 giới thiệu api mới, <a href=\"https://reactjs.org/docs/code-splitting.html#reactlazy\" target=\"_blank\" rel=\"noopener noreferrer\">React.lazy</a>, function này sẽ cho phép chúng ta render 1 component được import kiểu <a href=\"/blog/2018-10-07-huong-dan-lazy-load-component-react\">lazy load</a></p>\n<p>Như trước đây chúng ta thường phải tự viết phần kiểm tra khi nào nên load, kết hợp với <code class=\"language-text\">componentDidUpdate</code>. Chúng ta không cần làm những công việc như vậy nữa, với api mới này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">LazyComponent</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword module\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Component'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Wrap component này lại bên trong <code class=\"language-text\">Suspense</code>, trả fallback khi ko load được</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Loading Component...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LazyComponent</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Sử dụng <code class=\"language-text\">React.lazy</code> để làm ví dụ sau</p>\n<p><a href=\"http://vigneshm.com/react-lazy-example/\" target=\"_blank\" rel=\"noopener noreferrer\">Demo</a></p>\n<p><a href=\"https://github.com/vigzmv/react-lazy-example\" target=\"_blank\" rel=\"noopener noreferrer\">Source Github</a></p>\n<p>Phần code sử dụng <code class=\"language-text\">React.lazy</code> không có gì cao siêu, thay vì import bình thường, chúng ta <em>import</em> bằng <code class=\"language-text\">React.lazy</code>.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">User</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword module\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./User'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//...</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Loading Component...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>user <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>loading <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Loading User...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">!</span>user <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">loadUser</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Press Me!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Suspense</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Chưa tìm được tài liệu chính thức về <code class=\"language-text\">React.Suspense</code>, mình chỉ giải thích nhanh</p>\n<p>Suspense là một tính năng mới của React, có thể hiểu nó như là một <strong>Placeholder</strong> component, mà theo định nghĩa chính xác đầy đủ nhất</p>\n<blockquote>\n<p>Suspense allows you to defer rendering part of your application tree until some condition is met (for example, data from an endpoint or a resource is loaded).</p>\n</blockquote>\n<p>Tạm dịch: Suspense cho phép chúng ta defer render (render không đồng thời) một phần của <strong>tree</strong> đến khi thõa điều kiện ( thí dụ load xong data và resource )</p>\n<p><a href=\"https://codesandbox.io/s/8nq4w3jj39\" target=\"_blank\" rel=\"noopener noreferrer\">Demo Suspense</a></p>\n<p><a href=\"https://dev.to/vigzmv/reactlazy-what-and-how-to-use-in-your-app-p9a\" target=\"_blank\" rel=\"noopener noreferrer\">React.lazy, What and how to use in your app</a></p>\n","cover_image":""}},{"node":{"id":"ca24b2d17059151f239229dbb5d217c5","title":"Em có muốn hỏi câu gì không?","path":"/em-co-muon-hoi-cau-gi-khong/","date":"2018-10-15","timeToRead":9,"desc":"Một câu bạn sẽ được hỏi trong lúc phỏng vấn, một cơ hội để bạn tìm hiểu về công ty, vậy nên hỏi những câu nào?","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#quy-tr%C3%ACnh-n%C6%A1i-l%C3%A0m-vi%E1%BB%87c-team\">Quy trình, nơi làm việc, team</a></li>\n<li><a href=\"#c%C3%A1c-v%E1%BA%A5n-%C4%91%E1%BB%81-li%C3%AAn-quan-%C4%91%E1%BA%BFn-k%E1%BB%B9-thu%E1%BA%ADt\">Các vấn đề liên quan đến kỹ thuật</a></li>\n<li><a href=\"#x%E1%BB%AD-l%C3%BD-c%C3%A1c-t%C3%ACnh-hu%E1%BB%91ng-kh%E1%BA%A9n-c%E1%BA%A5p\">Xử lý các tình huống khẩn cấp</a></li>\n<li><a href=\"#con-%C4%91%C6%B0%E1%BB%9Dng-ph%C3%A1t-tri%E1%BB%83n-cho-t%E1%BB%ABng-nh%C3%A2n-vi%C3%AAn\">Con đường phát triển cho từng nhân viên</a></li>\n<li><a href=\"#ph%C6%B0%C6%A1ng-ph%C3%A1p-qu%E1%BA%A3n-l%C3%BD-d%E1%BB%B1-%C3%A1n-v%C3%A0-x%C3%A9t-%C4%91%E1%BB%99-%C6%B0u-ti%C3%AAn\">Phương pháp quản lý dự án và xét độ ưu tiên</a></li>\n<li><a href=\"#%C4%91%C3%A3-h%E1%BA%BFt-gi%E1%BB%9D-h%E1%BB%8Fi\">Đã hết giờ hỏi!</a></li>\n</ul>\n<!-- /TOC -->\n<h1 id=\"quy-trình-nơi-làm-việc-team\"><a href=\"#quy-tr%C3%ACnh-n%C6%A1i-l%C3%A0m-vi%E1%BB%87c-team\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Quy trình, nơi làm việc, team</h1>\n<p><strong>Một task dài nhất là bao lâu? Fix một lỗi tốn nhiều nhất là bao lâu? Theo anh đánh giá, mất bao lâu để hiểu hết toàn bộ source code hiện tại?</strong></p>\n<p>Một task càng ngắn, chứng tỏ quy trình tốt và kiến trúc dự án tốt, task được phân chia một cách rõ ràng, lỗi được cô lập và kiểm soát tốt.</p>\n<p>Với level junior hoặc mid thì tốn một tháng để thành thạo là bình thường, người quản lý có vấn đề gì với thời gian để thích nghi như thế không, đặc biệt nếu bạn chỉ ở mức junior</p>\n<p>Rất nhiều team sẽ không có 1 người có thể hiểu hết toàn bộ source code, có thể giải thích cho bạn bất cứ chổ nào. Nhưng hy vọng bạn lead có thể nắm sơ và biết ai đang phụ trách phần nào.</p>\n<p><strong>Mình được cấp máy tính gì, công ty có cấp cho mình thiết bị mà mình cần để phục vụ công việc</strong></p>\n<p>Với mấy ngành khác thì không biết sao, chứ là dân dev, cái máy tính rất quan trọng, một ngày làm việc 8 tiếng, một tuần cày đủ 7 ngày, việc một cái máy tính chạy ngon lành không chết nửa chừng, không dính virus, ko tự tắt máy bất thình lình là vô cùng cần thiết.</p>\n<p>Các công ty lớn thường việc mua thêm thiết bị cũng rất lằng nhằn về quy trình mua sắm thiết bị mới.</p>\n<p><strong>Làm sao công ty đánh giá được là em việc tốt, hiệu quả cao?</strong></p>\n<p>Câu này quan trọng nhất nhé, mỗi người quản lý, mỗi công ty sẽ có cách trả lời khác nhau.</p>\n<p>Nó cũng tùy thuộc vị trí bạn đang apply, junior có thể bạn học được nhanh từ những người khác, senior thì bạn giúp đồng nghiệp của mình nâng cao chất lượng công việc.</p>\n<p><strong>Thường thì 2 dev có cùng làm 1 task không? (hoặc nhiều hơn)</strong></p>\n<p>Pair program hoặc mob program có được áp dụng trong công ty không?</p>\n<p>Cách nhìn nhận của người làm chung về vấn đề hỗ trợ giữa các bộ phận, đã áp dụng chưa?</p>\n<p><strong>Có bao nhiêu dev trong công ty chỉ mới làm việc trong khoảng 6 tháng?</strong></p>\n<p>Có 2 nguyên nhân cho vấn đề này: (1) phát triển nhanh cần thêm người, (2) các bạn dev rủ nhau ra đi quá đông.</p>\n<p>Công ty phát triển nhanh không có nghĩa là không có vấn đề, họ sẽ áp dụng những quy trình mới, tập hợp những người chưa từng làm việc chung với nhau thành một team.</p>\n<p>Dev rủ nhau ra đi quá đông là tình huống không ai muốn nghe. Có thể công ty đang gặp khó khăn để cứu vớt dự án sắp chết, chính sách công ty không tốt, hay là lead nghỉ kéo người theo, dù là nguyên nhân gì cũng nên biết chính xác.</p>\n<p>Team size đang là bao nhiêu người, số lượng mong muốn là bao nhiêu cũng là một cách để biết.</p>\n<p><strong>Có bao nhiêu dev làm ở đây 2, 4 năm rồi?</strong></p>\n<p>Một minh chứng cho việc các dev cảm thấy hài lòng với công ty. 1 dev có thể <strong>chịu đựng</strong> công ty trong tối đa một năm, nhưng sẽ hiếm thấy việc nhiều dev có thể cùng chịu đựng được trong nhiều năm.</p>\n<p>Với những công ty startup (thời gian thành lập bé hơn 2 năm) thì chỉ cần biết người đầu tiên gia nhập công ty còn làm không.</p>\n<h1 id=\"các-vấn-đề-liên-quan-đến-kỹ-thuật\"><a href=\"#c%C3%A1c-v%E1%BA%A5n-%C4%91%E1%BB%81-li%C3%AAn-quan-%C4%91%E1%BA%BFn-k%E1%BB%B9-thu%E1%BA%ADt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các vấn đề liên quan đến kỹ thuật</h1>\n<p>Môi trường làm việc là sản phẩm các dev đang tạo và văn hóa quản lý tạo bởi lead, môi trường làm việc tốt là công việc không luôn trong tình trạng chạy đua với deadline.</p>\n<p><strong>Tốn bao lâu để hoàn tất deploy?</strong></p>\n<p>Nếu tốn nhiều thời gian deploy, nghĩa là nó đang được làm thủ công, dễ phát sinh lỗi.</p>\n<p><strong>Thế nào được xem là một pull request lớn, số dòng code, số file</strong></p>\n<p>Nếu task được chia nhỏ sẽ dễ quản lý, ít bị conflict. Pull request nhỏ chứng tỏ merge code thường xuyên, công ty đang theo quy trình quản lý hiện đại. Branche lớn, kéo dài, cho thấy người senior thiếu kinh nghiệm chia công việc. Pull request lớn chỉ khi source code được phân tách rất rõ ràng, độc lập, pull request nhỏ cũng chứng tỏ code được tổ chức rất tốt.</p>\n<p>Với cá nhân mình, một pull request được cho là lớn khi có khoảng 2000 dòng code, 20 file khác nhau.</p>\n<p>Một câu trả lời mình cũng mong muốn nhận được là các team sẽ làm việc trên từng feature branch. Tổ chức gít theo từng feature giúp code dễ maintain hơn, mặc dù cái này không phải lúc nào cũng đúng, đôi khi feature branch cũng rối lắm.</p>\n<p><strong>Phải đụng đến bao nhiêu repository để update một tính năng nào đó?</strong></p>\n<p>Có những project chỉ bao gồm một repository, cả ngàn commit một ngày. Có dự án được tổ chức bởi cả chục cái repository quan hệ chằng chịt với nhau. Câu hỏi này giúp hiểu rõ hơn cấu trúc project và cách phân chia code. </p>\n<p>Với những công ty trẻ, chỉ có một sản phẩm, có quá nhiều repository cũng không tốt. Công ty nhỏ nên tập trung và tiết kiệm thời gian tối đa, xây dựng sản phẩm đưa đến user, việc có nhiều repository khiến tiêu tốn thời gian để quản lý và deploy khá nhiều.</p>\n<p>Mình cũng thường hỏi cách quản lý khi code bị duplicate và các thư viện của riêng công ty.</p>\n<p><strong>Việc phải thay đổi trên nhiều repository có thường xuyên không?</strong></p>\n<p>Nếu các module không được tách biệt tốt, việc thay đổi như thế rất hay xảy ra. Phải deploy cùng lúc nhiều service sẽ khó đoán được lỗi do đâu nếu có xảy ra. Cùng đồng nghĩa với việc service chưa được cấu trúc tốt.</p>\n<h1 id=\"xử-lý-các-tình-huống-khẩn-cấp\"><a href=\"#x%E1%BB%AD-l%C3%BD-c%C3%A1c-t%C3%ACnh-hu%E1%BB%91ng-kh%E1%BA%A9n-c%E1%BA%A5p\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xử lý các tình huống khẩn cấp</h1>\n<p><strong>Có hay xảy ra tình huống phải fix lỗi khẩn cấp? Thế nào được xem là tình huống khẩn cấp?</strong></p>\n<p>Thí dụ như user không thể truy cập vào website, thực hiện thanh toán không được sau khi nâng cấp tính năng mới.</p>\n<p>Nếu những tình huống như vậy xảy ra thường xuyên, chứng tỏ việc thay đổi một phần dù chỉ nhỏ trong code cũng rất khó. Trong source code phụ thuộc lẫn nhau không biết trước được.</p>\n<p><strong>Quá trình xử lý lỗi phát sinh là như thế nào?</strong></p>\n<p>Với các công ty startup, thiếu các quy trình này là điều tốt, code chạy tốt quá đâu cần quy trình :D. Chưa có nhiều lỗi đến mức người ta phải nghĩ ra quy trình cho vấn đề này.</p>\n<p>Với những công ty đã được thành lập lâu thì ngược lại, chắc chắn họ đã gặp nhiều lần vấn đề này, cần có quy trình rõ ràng để giải quyết để tránh lặp lại những lỗi như vậy</p>\n<p><strong>Giữa đêm em có bị nhận cuộc gọi lên để fix bug không?</strong></p>\n<p>Trong trường hợp nào bạn sẽ bị gọi lên sữa lỗi, yêu cầu OT, trong trường hợp OT thì có thêm tiền không</p>\n<p>Thường trường hợp như vậy trong công ty có xảy ra nhiều không, có được request thêm ngày nghỉ phép không trừ lương trong trường hợp đó.</p>\n<p>Thật lòng mà nói mình cũng không thích làm việc trong các công ty yêu cầu nhân viên làm việc ngoài giờ quá nhiều như vậy.</p>\n<h1 id=\"con-đường-phát-triển-cho-từng-nhân-viên\"><a href=\"#con-%C4%91%C6%B0%E1%BB%9Dng-ph%C3%A1t-tri%E1%BB%83n-cho-t%E1%BB%ABng-nh%C3%A2n-vi%C3%AAn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Con đường phát triển cho từng nhân viên</h1>\n<p><strong>Nếu đã hoàn thành công việc được giao, thời gian rảnh thì mình có thể tự nghiên cứu, học tập không?</strong></p>\n<p>Là một Developer, sống trong môi trường công nghệ luôn phát triển không ngừng, chúng ta không ngừng học hỏi cho kịp với lớp trẻ. Các công ty luôn yêu cầu hoàn thành công việc sớm chừng nào tốt chừng ấy, và vẫn đảm bảo chất lượng, để đáp ứng được chuyện đó, developer phải có rất nhiều kiến thức, học hỏi không ngừng từ cộng đồng, áp dụng vào công việc đang làm, cho các dự án mới. Để trở thành dev chất không có cách nào khác là bạn phải dành thời gian nghiên cứu đều đặn.</p>\n<p>Với câu hỏi này, người trả lời tốt nhất chính là các bạn dev đang làm trong công ty, chứ không phải cấp quản lý, vì những người quản lý sẽ luôn nói điều tốt về chính sách. Không phải công ty nào cũng có đồng quan điểm về việc học từ đâu, học như thế nào, học thời gian nào, sẽ có những công ty không cho phép nhân viên truy cập youtube, vốn là nguồn resource học lớn đối với mình, bên cạnh medium. Nếu nói thời gian nghiên cứu của nhân viên là việc nhân viên phải làm ở nhà, công ty chỉ trả tiền 8 tiếng cho bạn để làm việc trong công ty không phải để ngồi nghiên cứu là mình thấy không đồng ý.</p>\n<p><strong>Cách đánh giá một developer chất lượng, có sự phát triển trong công việc?</strong></p>\n<p>Một số công ty đánh giá developer chất bằng việc anh ta hoàn thành toàn bộ deadline, không gây nhiều issue. Một vài công ty có chương trình đào tạo cho nhân viên mới, giúp bạn đạt vị trí cao hơn, hoặc được nghía các dự án khác để học hỏi công nghệ.\nNhưng cơ bản phải biết mình muốn gì trong tương lai, và làm ở công ty đó thì bạn có đạt được mục tiêu của mình ngày qua ngày không.</p>\n<p><strong>Công ty có những hoạt động chia sẻ kiến thức như là semi tổ chức rầm rộ không?</strong></p>\n<p>Chia sẻ kiến thức giữa các developer là một phần rất quan trọng. Nếu có các buổi workshop hàng tháng, hàng quý để đồng nghiệp senior chia sẻ và cùng nhau bàn luận thì tuyệt vời, nếu được trả lời “có, nhưng thật sự chưa đủ” thì quá đỉnh rồi.</p>\n<p><strong>Có được tham gia các hội thảo có tính phí không?</strong></p>\n<p>Các hội thảo chuyên môn, đặc biệt có tính phí tham gia rất tốt cho sự phát triển cá nhân, nếu công ty có chi trả cho nhân viên tham gia những hội thảo như vậy thì quá tuyệt. Nếu được tài trợ tham gia các hội thảo như vậy, bạn cũng nên share lại kiến thức có được với đồng nghiệp trong các buổi meeting nội bộ. Mỗi năm một lần là đủ với mình.</p>\n<h1 id=\"phương-pháp-quản-lý-dự-án-và-xét-độ-ưu-tiên\"><a href=\"#ph%C6%B0%C6%A1ng-ph%C3%A1p-qu%E1%BA%A3n-l%C3%BD-d%E1%BB%B1-%C3%A1n-v%C3%A0-x%C3%A9t-%C4%91%E1%BB%99-%C6%B0u-ti%C3%AAn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phương pháp quản lý dự án và xét độ ưu tiên</h1>\n<p><strong>Cách anh điều phối giữa việc đưa thêm tính năng mới và bảo trì những tính năng cũ</strong></p>\n<p>Theo nhiều kinh nghiệm được chia sẻ từ các nhà quản lý, 1/3 thời gian để bảo trì, ví dụ như refactor code, xóa code thừa, bổ sung unit test, tăng tốc độ, là mức hợp lý để cân bằng giữa bổ sung tính năng mới và bảo trì.</p>\n<p>Hoặc hỏi thêm kinh nghiệm những gì cần làm trong để maintain</p>\n<p><strong>Quy trình phát triển một sản phẩm, tính năng mới, từ lúc lên ý tưởng đến lúc deploy là thế nào?</strong></p>\n<p>Câu hỏi này sẽ phải trả lời rất nhiều, từ lúc lập kế hoạch, trao đổi giữa các bộ phận, đến lúc implement, feedback, deploy. Nó đã gom đủ một vòng.</p>\n<p><strong>Task được kiểm tra như thế nào? Ai là người tạo ra mấy task này?</strong></p>\n<p>Mỗi công ty mỗi khác, tùy người quản lý.</p>\n<p><strong>Làm thế nào để xác định nên build một version?</strong></p>\n<p>Dựa trên tính năng đặt ra, khách hàng yêu cầu, thời gian cố định</p>\n<p><strong>Khi nào task được xem là complete?</strong></p>\n<p>Đúng yêu cầu của PR, QA bảo đóng sau khi test, bên kinh doanh đã thấy được sản phẩm deploy và không nhận thêm bất cứ phàn nàn nào?</p>\n<p><strong>Phần mềm đang sử dụng để quản lý task?</strong></p>\n<p>Nhiều phần mềm dạng này lắm: Pivotal, Asana, Wrike, JIRA, Trello, post-it + tấm bảng, thẻ được in ra, Visual Studio Online, Marvel.</p>\n<p>Cá nhân tác giả bài viết cũng như mình đồng quan điểm: <strong>JIRA là thằng gớm nhất</strong></p>\n<h1 id=\"đã-hết-giờ-hỏi\"><a href=\"#%C4%91%C3%A3-h%E1%BA%BFt-gi%E1%BB%9D-h%E1%BB%8Fi\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đã hết giờ hỏi!</h1>\n<p>Không có con người hoàn hảo, không có công ty hoàn hảo, bạn chấp nhận được những gì, những gì bạn sắp ưu tiên nó thấp hơn. Chúc các bạn tìm được công việc tốt. Mình đã có việc rồi, không muốn đi phỏng vấn nữa đâu các bạn.</p>\n<p><a href=\"https://medium.com/@vcarl/questions-to-ask-your-interviewer-82a26e67ce6c\" target=\"_blank\" rel=\"noopener noreferrer\">Questions to ask your interviewer: onboarding and the workplace</a></p>\n<p><a href=\"https://medium.com/@vcarl/questions-to-ask-your-interviewer-development-and-emergencies-f7fbc4519e5b\" target=\"_blank\" rel=\"noopener noreferrer\">Questions to ask your interviewer: development and emergencies</a></p>\n<p><a href=\"https://medium.com/@cvitullo/questions-to-ask-your-interviewer-growth-c88eed119ce2\" target=\"_blank\" rel=\"noopener noreferrer\">Questions to ask your interviewer: Growth</a></p>\n<p><a href=\"https://medium.com/@vcarl/questions-to-ask-your-interviewer-project-management-and-prioritization-69ac3aad3689\" target=\"_blank\" rel=\"noopener noreferrer\">Questions to ask your interviewer: Project management and prioritization</a></p>\n","cover_image":""}},{"node":{"id":"65c9d6e21303c8c99eff5408a9afcf9c","title":"Góc nhìn của người tuyển dụng một lập trình viên React","path":"/goc-nhin-cua-nguoi-tuyen-dung-mot-lap-trinh-vien-react/","date":"2018-10-14","timeToRead":5,"desc":"Trong một tương lai không xa, khi mình được đặt vào vị trí phỏng vấn các bạn Front-End, mình sẽ hỏi gì đây?","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#m%E1%BB%9Di-b%E1%BA%A1n-t%E1%BB%B1-gi%E1%BB%9Bi-thi%E1%BB%87u\">Mời bạn tự giới thiệu</a></li>\n<li><a href=\"#%C4%91i%E1%BB%81u-g%C3%AC-xui-khi%E1%BA%BFn-b%E1%BA%A1n-h%E1%BB%8Dc-react-hay-1-ng%C3%B4n-ng%E1%BB%AF-n%C3%A0o-%C4%91%C3%B3\">Điều gì xui khiến bạn học React (hay 1 ngôn ngữ nào đó)</a></li>\n<li><a href=\"#%C4%91i-s%C3%A2u-technical-m%E1%BB%99t-ch%C3%BAt\">Đi sâu technical một chút</a></li>\n<li><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81-l%E1%BB%9Bn-nh%E1%BA%A5t-b%E1%BA%A1n-%C4%91%E1%BB%91i-m%E1%BA%B7t-trong-d%E1%BB%B1-%C3%A1n-c%C5%A9-l%C3%A0-g%C3%AC-th%C3%A0nh-c%C3%B4ng-l%E1%BB%9Bn-nh%E1%BA%A5t-b%E1%BA%A1n-%C4%91%E1%BA%A1t-%C4%91%C6%B0%E1%BB%A3c-trong-%C4%91%C3%B3\">Vấn đề lớn nhất bạn đối mặt trong dự án cũ là gì, thành công lớn nhất bạn đạt được trong đó?</a></li>\n<li><a href=\"#n%E1%BA%BFu-ti%E1%BB%81n-kh%C3%B4ng-ph%E1%BA%A3i-v%E1%BA%A5n-%C4%91%E1%BB%81-th%E1%BB%9Di-gian-v%C3%B4-t%C6%B0-b%E1%BA%A1n-s%E1%BA%BD-l%C3%A0m-g%C3%AC-%C4%91%E1%BB%83-n%C3%A2ng-c%E1%BA%A5p-cho-d%E1%BB%B1-%C3%A1n-tr%C6%B0%E1%BB%9Bc-%C4%91%C3%A2y-t%E1%BA%A1i-sao\">Nếu tiền không phải vấn đề, thời gian vô tư, bạn sẽ làm gì để nâng cấp cho dự án trước đây, tại sao?</a></li>\n<li><a href=\"#m%E1%BB%99t-s%E1%BB%91-c%C3%A2u-react-c%C6%A1-b%E1%BA%A3n-c%C3%A1c-b%E1%BA%A1n-c%C5%A9ng-n%C3%AAn-n%E1%BA%AFm\">Một số câu React cơ bản, các bạn cũng nên nắm</a></li>\n<li><a href=\"#feedback\">Feedback</a></li>\n<li><a href=\"#c%C3%A2u-cu%E1%BB%91i-c%C3%B9ng-quan-tr%E1%BB%8Dng-nh%E1%BA%A5t\">Câu cuối cùng, quan trọng nhất</a></li>\n</ul>\n<!-- /TOC -->\n<p>Mình không nói cụ thể các câu để hỏi như <a href=\"/2017-07-17-interview-react-developer-thi-hoi-gi\">bài này</a>, sẽ tập trung hơn vào cách hỏi, cách đánh giá các bạn dựa vào câu trả lời. </p>\n<p>Anh @dan_abramov ảnh có nói trên Twitter</p>\n<blockquote>\n<p>Ở Facebook chúng tôi không hỏi bạn câu hỏi như sự khác nhau giữa <code class=\"language-text\">componentWillMount</code> và <code class=\"language-text\">componentDidMount</code>, chúng tôi tìm người có kiến thức tốt javascript và kỹ năng giải quyết vấn đề. Họ có thể học bất cứ thư viện gì, hoặc tự viết để xài.</p>\n</blockquote>\n<p>Với mình, việc lựa chọn con người không chỉ căn cứ hết vào việc anh ta có thể trả lời hết những câu hỏi đó không, hỏi mấy câu đó bởi vì công việc hàng ngày phải xài nó, hỏng phải hỏi để đánh đố, thử thách.</p>\n<h1 id=\"mời-bạn-tự-giới-thiệu\"><a href=\"#m%E1%BB%9Di-b%E1%BA%A1n-t%E1%BB%B1-gi%E1%BB%9Bi-thi%E1%BB%87u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mời bạn tự giới thiệu</h1>\n<p>Cần biết trước đó anh ấy đã làm gì, kỹ năng gì anh ấy đã có được, team size của anh ấy, có quản lý ai chưa, sản phẩm anh ấy làm thường có bao nhiêu người sử dụng</p>\n<h1 id=\"điều-gì-xui-khiến-bạn-học-react-hay-1-ngôn-ngữ-nào-đó\"><a href=\"#%C4%91i%E1%BB%81u-g%C3%AC-xui-khi%E1%BA%BFn-b%E1%BA%A1n-h%E1%BB%8Dc-react-hay-1-ng%C3%B4n-ng%E1%BB%AF-n%C3%A0o-%C4%91%C3%B3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Điều gì xui khiến bạn học React (hay 1 ngôn ngữ nào đó)</h1>\n<p>Có phải tại thị trường đang đổ xô học React nên bạn học React? hay vì bạn anh nó xúi, React chạy nhanh hơn Angular, Vue? hay công ty anh bắt xài. Bất kỳ lý do đã học React cứ kể ra.</p>\n<p>Mình thấy nhiều người tuyển dụng hay nhầm về việc <strong>sẵn sàng học cái mới</strong>. Bạn phải rõ ràng việc sẵn sàng học cái mới để tốt hơn, chứ không phải sẵn sàng học cái mới dù nó là bất cứ thứ gì nhé.</p>\n<p>Ví dụ, bạn là thầu xây dựng nhà, bạn chủ yếu thầu nhà thổ cư, nhưng nếu có cơ hội bạn sẵn sàng học và đầu tư để xây dựng những công trình bự hơn như chung cư, trung tâm thương mại, cao ốc. Đó là sẵn sàng học cái mới, cái tốt hơn. Còn bạn đâm ngang, sẵn sàng đi học đóng thuyền, làm ruộng, và xem như công việc chính thì cái đó người ta gọi là hữu dũng vô mưu.</p>\n<h1 id=\"đi-sâu-technical-một-chút\"><a href=\"#%C4%91i-s%C3%A2u-technical-m%E1%BB%99t-ch%C3%BAt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đi sâu technical một chút</h1>\n<p>Theo như kinh nghiệm được phỏng vấn của mình, việc hỏi nhanh đáp liền như chương trình nhanh như chớp rất là khó cho ứng viên trả lời rành rọt và trọn vẹn. Cụ thể là ngay cả mình, khi được hỏi sự khác nhau giữa GET/POST/PUT, mình cũng sẽ không thể nói một cách mạch lạc được, kiến thức quá nhiều, bạn cần cho ứng viên tí thời gian để nhớ lại. Một danh sách in sẵn các câu sẽ hỏi, cho anh ấy đọc qua trước 5-10 phút chuẩn bị sẽ tốt hơn.</p>\n<h1 id=\"vấn-đề-lớn-nhất-bạn-đối-mặt-trong-dự-án-cũ-là-gì-thành-công-lớn-nhất-bạn-đạt-được-trong-đó\"><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81-l%E1%BB%9Bn-nh%E1%BA%A5t-b%E1%BA%A1n-%C4%91%E1%BB%91i-m%E1%BA%B7t-trong-d%E1%BB%B1-%C3%A1n-c%C5%A9-l%C3%A0-g%C3%AC-th%C3%A0nh-c%C3%B4ng-l%E1%BB%9Bn-nh%E1%BA%A5t-b%E1%BA%A1n-%C4%91%E1%BA%A1t-%C4%91%C6%B0%E1%BB%A3c-trong-%C4%91%C3%B3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vấn đề lớn nhất bạn đối mặt trong dự án cũ là gì, thành công lớn nhất bạn đạt được trong đó?</h1>\n<p>Có thể là bạn hiểu được một process phức tạp, bạn có thể nâng cao tốc độ ứng dụng lên cả trăm phần trăm, bạn đẩy được tốc độ dự án bằng cách kết hợp nhiều dev với nhau.</p>\n<h1 id=\"nếu-tiền-không-phải-vấn-đề-thời-gian-vô-tư-bạn-sẽ-làm-gì-để-nâng-cấp-cho-dự-án-trước-đây-tại-sao\"><a href=\"#n%E1%BA%BFu-ti%E1%BB%81n-kh%C3%B4ng-ph%E1%BA%A3i-v%E1%BA%A5n-%C4%91%E1%BB%81-th%E1%BB%9Di-gian-v%C3%B4-t%C6%B0-b%E1%BA%A1n-s%E1%BA%BD-l%C3%A0m-g%C3%AC-%C4%91%E1%BB%83-n%C3%A2ng-c%E1%BA%A5p-cho-d%E1%BB%B1-%C3%A1n-tr%C6%B0%E1%BB%9Bc-%C4%91%C3%A2y-t%E1%BA%A1i-sao\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nếu tiền không phải vấn đề, thời gian vô tư, bạn sẽ làm gì để nâng cấp cho dự án trước đây, tại sao?</h1>\n<p>Viết tài liệu tốt hơn, thay MobX bằng Redux, đưa unit test vào</p>\n<h1 id=\"một-số-câu-react-cơ-bản-các-bạn-cũng-nên-nắm\"><a href=\"#m%E1%BB%99t-s%E1%BB%91-c%C3%A2u-react-c%C6%A1-b%E1%BA%A3n-c%C3%A1c-b%E1%BA%A1n-c%C5%A9ng-n%C3%AAn-n%E1%BA%AFm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một số câu React cơ bản, các bạn cũng nên nắm</h1>\n<ol>\n<li>JSX là cái gì, làm sao trình duyệt chạy được?</li>\n<li>Tại sao các component được đặt tên bằng chữ cái đầu viết hoa?</li>\n<li>2 kiểu để khai báo component là gì, và sử dụng trong trường hợp nào?</li>\n<li>Một life cycle của React gồm các phương thức nào, gọi API ở đâu?</li>\n<li>Tại sao gọi API ở componentDidMount không phải trong constructor</li>\n<li>Làm sao để không re-fetch data khi component được re-mount</li>\n<li>Giải thích cái ý tưởng \"đưa state từ dưới lên trên\" (a hi hi, câu này hơi thách đố chút nha)</li>\n<li>Khi có issue thì bạn debug như thế nào? Làm sao để kiểm tra tại sao component không re-render</li>\n<li>Thử thách cũng bước nhảy -  cùng nhau phá code</li>\n</ol>\n<p>Sự khác biệt giữa cách truyền hàm, chuyện gì xảy ra khi click </p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  \n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> <span class=\"token string\">'MyComponent'</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleClick2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">handleClick1</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">handleClick1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function-variable function\">handleClick3</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">handleClick1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">click 1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleClick1</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">click 2</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleClick2</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">click 3</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleClick3</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">click 4</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Tìm và fix lỗi</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> search<span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">handleChange</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">event</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">timeout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">timeout</span> <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          search<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleChange</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">search</span> <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Search for: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">search</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span> <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Xong phần mình, thế bạn có muốn hỏi mình gì không?</p>\n<h1 id=\"feedback\"><a href=\"#feedback\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Feedback</h1>\n<p><em>Cái mà mình thấy rất thiếu trong đa số các buổi mình bị phỏng vấn.</em></p>\n<p>Nếu có điểm nào đó bạn trả lời không tốt, mình sẽ feedback lại cho bạn giải pháp hoặc điểm bạn cần về nhà nghiên cứu.</p>\n<p>Bạn sẽ nhận được hồi âm trong 2-3 ngày, đa phần các trường hợp lâu hơn 4 ngày là bạn nhận được thư cảm ơn. Bạn không cần lên ITViec để check vị trí đó có mới chạy quảng cáo nữa không, mình chắc chắn gửi thư cảm ơn.</p>\n<h1 id=\"câu-cuối-cùng-quan-trọng-nhất\"><a href=\"#c%C3%A2u-cu%E1%BB%91i-c%C3%B9ng-quan-tr%E1%BB%8Dng-nh%E1%BA%A5t\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Câu cuối cùng, quan trọng nhất</h1>\n<p>Câu này là câu mình được hỏi khi phỏng vấn bên Sendo.vn, dừng lại 5 giây, hít thở, mình đã không trả lời được, và mình vẫn đang tìm câu trả lời cho câu hỏi này.</p>\n<blockquote>\n<p>Điều gì khiến bạn khác biệt với những FrontEnd Developer ứng tuyển cho vị trí này, hay lớn hơn là những dev ở ngoài kia?</p>\n</blockquote>\n<p>Hy vọng câu này sẽ giúp bạn thấy rõ hơn con đường mình muốn đi.</p>\n<p><a href=\"https://medium.com/@baphemot/a-react-job-interview-recruiter-perspective-f1096f54dd16\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Câu hỏi tổng hợp và phần trả lời</a></p>\n","cover_image":""}},{"node":{"id":"300f6e18ce1e36e4462d43bbeed7bae2","title":"Hướng dẫn lazy load component trong React","path":"/huong-dan-lazy-load-component-trong-react/","date":"2018-10-07","timeToRead":4,"desc":"Sự là hôm rồi đi phỏng vấn, được hỏi câu này mà mình đó giờ chưa làm nên không biết, nay có thời gian rảnh rỗi tìm hiểu, chia sẻ lại cho các bạn chưa biết.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81\">Vấn đề</a></li>\n<li><a href=\"#gi%E1%BA%A3i-ph%C3%A1p\">Giải pháp</a></li>\n<li><a href=\"#code-v%C3%AD-d%E1%BB%A5\">Code ví dụ</a></li>\n<li><a href=\"#lazy-load-react-router\">Lazy load react-router</a></li>\n<li><a href=\"#t%E1%BB%95ng-k%E1%BA%BFt\">Tổng kết</a></li>\n</ul>\n<!-- /TOC -->\n<h1 id=\"vấn-đề\"><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vấn đề</h1>\n<p>Bạn viết code, chạy thử trên localhost, yeah mọi thứ super nhanh</p>\n<p><img src=\"https://pm1.narvii.com/6456/c88c177b7cee6af26086088dfcfa09cf401b676e_hq.jpg\" alt=\"Hướng dẫn lazy load component trong React\"></p>\n<p>Nhưng khi chạy trên production thì mọi thứ sẽ trở nên như thế này</p>\n<p><img src=\"https://vetstreet-brightspot.s3.amazonaws.com/32/b9e550dfd411e1a02d005056ad4734/file/tortoise-137584694-lc080612.jpg\" alt=\"Hướng dẫn lazy load component trong React\"></p>\n<p>Sẽ có rất nhiều giải pháp để xử lý vấn đề này.</p>\n<p>Tại sao chúng ta phải load một component mà user chưa sử dụng đến, thậm chí có khi trong suốt quá trình làm việc, user sẽ không đụng đến một số màn hình?</p>\n<h1 id=\"giải-pháp\"><a href=\"#gi%E1%BA%A3i-ph%C3%A1p\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giải pháp</h1>\n<p>Nếu bạn làm web nhiều thì chắc có nghe đến lazy load image, để giảm bớt số lượng request gởi đi và dữ liệu trả về cho lần load đầu tiên. Trong React cũng có khái niệm tương tự như vậy.</p>\n<p>Tất cả những việc đó thực hiện được là nhờ sự thần thánh của <strong>webpack</strong></p>\n<p>Thông thường chúng ta import component như sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ScreenComponent</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./ScreenComponent'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Vậy đã bao giờ bạn thử</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ScreenComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Vâng, nó sẽ trả về 1 <strong>Promise</strong>!</p>\n<p>Nếu import như thế, Webpack sẽ split file build ra và thực hiện việc load chỉ khi được gọi</p>\n<h1 id=\"code-ví-dụ\"><a href=\"#code-v%C3%AD-d%E1%BB%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Code ví dụ</h1>\n<p><img src=\"https://i.imgur.com/5zJ4s8b.png\" alt=\"Hướng dẫn lazy load component trong React\"></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Todo</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./Todo'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      todos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App-header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Add todo\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">changeValue</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">submitValue</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Add</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span></span> <span class=\"token attr-name\">todos</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">todos</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu ở màn hình này, user chưa có gì trong <code class=\"language-text\">state.todos</code>, chúng ta không thực sự cần <code class=\"language-text\">import Todo from &#39;./Todo&#39;;</code>, chỉ khi user nhấn add để thêm một item vào trong <code class=\"language-text\">state.todos</code> chúng ta mới cần load component <code class=\"language-text\">&lt;Todo /&gt;</code></p>\n<p>Thêm <code class=\"language-text\">state.LLTodo</code> để kiểm tra việc load component todo chưa, chúng ta đưa việc load này vào <code class=\"language-text\">componentDidUpdate()</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//import Todo from './Todo'; // bỏ component import ở đây</span>\n\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      todos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token maybe-class-name\">LLTodo</span><span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">LLTodo</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">lazyLoadTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function-variable function\">lazyLoadTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> lazyLoad <span class=\"token operator\">=</span> <span class=\"token keyword module\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Todo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">debugger</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// để xem nó trả về gì</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"https://i.imgur.com/EQHSNyp.png\" alt=\"Hướng dẫn lazy load component trong React\"></p>\n<p>Nó đã trả về cho chúng ta một Promise, sửa lại hàm này thành async</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function-variable function\">lazyLoadTodo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span><span class=\"token keyword module\">default</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Todo</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token keyword module\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Todo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">LLTodo</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Todo</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta kiểm tra việc render này theo <code class=\"language-text\">state.LLTodo</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">LLTodo</span><span class=\"token punctuation\">,</span> todos<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> lazyLoadTodo <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">LLTodo</span> <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LLTodo</span></span> <span class=\"token attr-name\">todos</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App-header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Add todo\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">changeValue</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">submitValue</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Add</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>lazyLoadTodo<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Để thực sự thấy được kết quả, chúng ta có thể build, hoặc trên mở tab network, khi nhập giá trị vào trong input, một file <code class=\"language-text\">[tên].chunk.js</code> sẽ được load thêm vào.</p>\n<p><img src=\"https://i.imgur.com/h9LyiS9.png\" alt=\"Hướng dẫn lazy load component trong React\"></p>\n<p>File 1.chunk.js được load khi component được update</p>\n<p><img src=\"https://i.imgur.com/8v6S8QR.png\" alt=\"Hướng dẫn lazy load component trong React\"></p>\n<p>Mở file này ra để check xem sau</p>\n<p><img src=\"https://i.imgur.com/Y9lytUD.png\" alt=\"Hướng dẫn lazy load component trong React\"></p>\n<p>Đúng là file component của chúng ta được được tách ra :D</p>\n<h1 id=\"lazy-load-react-router\"><a href=\"#lazy-load-react-router\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lazy load react-router</h1>\n<p>Giờ xem xét phần chúng ta setup cho cái route, đại khái nó sẽ như thế này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Home</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./Home'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Blog</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./Blog'</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">exact</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">HomeComponent</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/blog<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">BlogComponent</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Áp dụng lazy load component với <em>route</em>, ở đây mình viết thêm một hàm <code class=\"language-text\">asyncComponent</code>, nó sẽ nhận vào hàm <code class=\"language-text\">import(&#39;path/to/file&#39;)</code> và return về component đó.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Component</span><span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">asyncComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">getComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">AsyncComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token comment\">// chổ này hơi tricky, trỏ về chính nó</span>\n      <span class=\"token maybe-class-name\">Component</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">AsyncComponent</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span> \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// không re-load nếu đã có rồi</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">getComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token maybe-class-name\">Component</span></span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token maybe-class-name\">AsyncComponent</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Component</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">this</span><span class=\"token punctuation\">.</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token maybe-class-name\">AsyncComponent</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Hàm <code class=\"language-text\">asyncComponent()</code> này chúng ta sẽ truyền vào cho nó function là <code class=\"language-text\">getComponent()</code> (chính là hàm import)</p>\n<p>Chỉnh lại cách chúng ta import component cho từng route</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Dynamically imported components</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Home</span> <span class=\"token operator\">=</span> <span class=\"token function\">asyncComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  <span class=\"token keyword module\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Home'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span> <span class=\"token arrow operator\">=></span> module<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Blog</span> <span class=\"token operator\">=</span> <span class=\"token function\">asyncComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  <span class=\"token keyword module\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Blog'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span> <span class=\"token arrow operator\">=></span> module<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">exact</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Home</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/blog<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Blog</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p><img src=\"https://i.imgur.com/PN8f7w9.png\" alt=\"Hướng dẫn lazy load component trong React\"></p>\n<h1 id=\"tổng-kết\"><a href=\"#t%E1%BB%95ng-k%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tổng kết</h1>\n<p>Việc lazy load component không quá khó, không cần thêm bất kỳ thư viện, config gì cả nếu bạn đang init project bằng <code class=\"language-text\">create-react-app</code>, nhưng nó sẽ là giải pháp phải làm khi file bundle của bạn đã quá lớn và ngày càng lớn hơn.</p>\n<p>Chúc các bạn có một ngày Happy Interview!</p>\n","cover_image":""}},{"node":{"id":"a488a7f0a330e799deba1b8bc5bb7105","title":"Nâng cao tốc độ Component","path":"/nang-cao-toc-do-component/","date":"2018-10-06","timeToRead":3,"desc":"Bài viết của team làm Facebook Ads chia sẽ, cùng điểm qua các vấn đề căn bản để tối ưu component","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-shouldcomponentupdate-v%C3%A0-reactpurecomponent\">Sử dụng <code class=\"language-text\">shouldComponentUpdate</code> và <code class=\"language-text\">React.PureComponent</code></a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-d%E1%BB%AF-li%E1%BB%87u-immutability-%C4%91%E1%BB%83-so-s%C3%A1nh\">Sử dụng dữ liệu Immutability để so sánh</a></li>\n<li><a href=\"#chuy%C3%AAn-bi%E1%BB%87t-h%C3%B3a-%C4%91%E1%BB%83-maintain-v%C3%A0-c%E1%BA%A3i-thi%E1%BB%87n-hi%E1%BB%87u-n%C4%83ng\">Chuyên biệt hóa để maintain và cải thiện hiệu năng</a></li>\n<li><a href=\"#%C4%91%E1%BB%99c-l%E1%BA%ADp-tr%C3%AAn-t%E1%BB%ABng-children\">Độc lập trên từng <code class=\"language-text\">children</code></a></li>\n</ul>\n<!-- /TOC -->\n<h1 id=\"sử-dụng-shouldcomponentupdate-và-reactpurecomponent\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-shouldcomponentupdate-v%C3%A0-reactpurecomponent\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng <code class=\"language-text\">shouldComponentUpdate</code> và <code class=\"language-text\">React.PureComponent</code></h1>\n<p><strong>re-render</strong> là thứ sẽ tiêu tốn công sức và chúng ta phải hạn chế nó tối đa, bằng hook <code class=\"language-text\">shouldComponentUpdate(nextProps, nextState)</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">!</span><span class=\"token function\">shallowEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">,</span> nextProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n    <span class=\"token operator\">!</span><span class=\"token function\">shallowEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">,</span> nextState<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Pure component là những component chỉ dùng giá trị <code class=\"language-text\">props</code> và <code class=\"language-text\">state</code> để <code class=\"language-text\">render</code>, không cần tính toán logic, nó cũng sẽ không có hook <code class=\"language-text\">shouldComponentUpdate</code>, React sẽ dùng kiểu so sánh <strong>tương đối</strong></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// chỉ phụ thuộc vào props và state khi render</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>width<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">width</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">rows</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Vì vậy phải đảm bảo các <code class=\"language-text\">children</code> của một PureComponent cùng là một PureComponent, nếu không có trường hợp nó sẽ không render đúng.</p>\n<p>Ví dụ như bên dưới, 2 object này React sẽ so sánh được</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  size<span class=\"token operator\">:</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span>\n  color<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// .vs</span>\n<span class=\"token punctuation\">{</span>\n  size<span class=\"token operator\">:</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span>\n  color<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nhưng object thế này thì thua</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  isActive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  balance<span class=\"token operator\">:</span> <span class=\"token string\">'1500000'</span><span class=\"token punctuation\">,</span>\n  picture<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    first<span class=\"token operator\">:</span> <span class=\"token string\">'An'</span><span class=\"token punctuation\">,</span>\n    last<span class=\"token operator\">:</span> <span class=\"token string\">'Luu'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  contact<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">email</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      phone<span class=\"token operator\">:</span> <span class=\"token string\">'123456'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      email<span class=\"token operator\">:</span> <span class=\"token string\">'anluu@gmail'</span><span class=\"token punctuation\">,</span>\n      address<span class=\"token operator\">:</span> <span class=\"token string\">'123 Sai Gon'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"sử-dụng-dữ-liệu-immutability-để-so-sánh\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-d%E1%BB%AF-li%E1%BB%87u-immutability-%C4%91%E1%BB%83-so-s%C3%A1nh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng dữ liệu Immutability để so sánh</h1>\n<p>Cách làm áp dụng ở đây tương tự như việc trả hàng hóa</p>\n<p><img src=\"https://uidesign.gearbest.com/gb_blog/2101-2400/2375/6-tips-about-applying-for-a-product-return-on-GearBest-Z00.jpg\"></p>\n<p>Nếu gói hàng bị trả chưa khui gì cả, người bán hàng chỉ cần kiểm tra xung quanh đảm bảo gói hàng chưa bị khui thì họ sẽ xem như nó còn nguyên vẹn, không cần kiểm tra bên trong.</p>\n<p>Tương tự, nếu chúng ta dùng dữ liệu Immuatable, chúng ta có thể nhanh chóng biết được 2 object hay mảng đó có khác nhau hay không.</p>\n<p>Để biết thêm về Immutable, <a href=\"https://facebook.github.io/immutable-js/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">đọc thêm ở đây</a></p>\n<h1 id=\"chuyên-biệt-hóa-để-maintain-và-cải-thiện-hiệu-năng\"><a href=\"#chuy%C3%AAn-bi%E1%BB%87t-h%C3%B3a-%C4%91%E1%BB%83-maintain-v%C3%A0-c%E1%BA%A3i-thi%E1%BB%87n-hi%E1%BB%87u-n%C4%83ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chuyên biệt hóa để maintain và cải thiện hiệu năng</h1>\n<p>Chuyên biệt hóa là việc tách nhỏ các component ra, mỗi một component đảm nhiệm một công việc cụ thể</p>\n<p>Ví dụ, thay vì viết 1 component là <code class=\"language-text\">ScrollingTable</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ScrollingTable</span></span>\n  <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>123<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token color\">blue</span></span><span class=\"token punctuation\">\"</span></span></span>\n  <span class=\"token attr-name\">scrollTop</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">offsetTop</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre>\n<p>Nên viết thành 2 component</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OuterScroller</span></span> <span class=\"token attr-name\">scrollTop</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">offsetTop</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">InnerTable</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>123<span class=\"token punctuation\">\"</span></span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token color\">blue</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">OuterScroller</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<h1 id=\"độc-lập-trên-từng-children\"><a href=\"#%C4%91%E1%BB%99c-l%E1%BA%ADp-tr%C3%AAn-t%E1%BB%ABng-children\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Độc lập trên từng <code class=\"language-text\">children</code></h1>\n<p>Có thể hình dùng việc lồng ghép các component theo kiểu parent-children giống như một cái cây-thân-nhánh-lá</p>\n<p><img src=\"https://media.istockphoto.com/vectors/tree-background-vector-id518399734?k=6&#x26;m=518399734&#x26;s=612x612&#x26;w=0&#x26;h=qxXFy440iXG-CXB9jlC-TyWPKU0NRWLa3cGYu_-ukQI=\"></p>\n<p>Khi lồng ghép quá nhiều dẫn đến việc để so sánh và biết được sự khác nhau giữa <strong>cây cũ</strong> và <strong>cây mới</strong> là vô cùng tốn sức</p>\n<p>Không những vậy, các component children sẽ thay đổi thường xuyên. Lấy ví dụ</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> <span class=\"token maybe-class-name\">Parent</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span> <span class=\"token operator\">!==</span> nextProps<span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Parent</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">child</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Parent</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Tất nhiên đây là ví dụ để bạn dễ hình dung rằng các component children thường xuyên thay đổi, việc kiểm tra <code class=\"language-text\">shouldComponentUpdate</code> lúc này rất khó nói trước là <code class=\"language-text\">true</code> hay <code class=\"language-text\">false</code></p>\n<p>Khuyến khích sử dụng ContainerComponent để kết nối vào store và Component chỉ đảm nhiệm việc render HTML</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// BudgetWidgetContainer</span>\n<span class=\"token keyword\">var</span> <span class=\"token maybe-class-name\">BudgetWidgetContainer</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\"><span class=\"token maybe-class-name\">PureComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>  \n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BudgetWidget</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">amount</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code class=\"language-text\">&lt;BudgetWidget/&gt;</code> không quan tâm value từ đâu có, nó chỉ việc render HTML, chúng ta có thể sử dụng component như vậy ở nhiều nơi, chúng ta chỉ cần viết lại Container Component</p>\n<p><a href=\"https://www.youtube.com/watch?v=KYzlpRvWZ6c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem video gốc của bài viết</a></p>\n","cover_image":""}},{"node":{"id":"a8c04defa632eb7d8068cb4cac074ce9","title":"Làm việc với Redux trong ứng dụng lớn","path":"/lam-viec-voi-redux-trong-ung-dung-lon/","date":"2018-10-04","timeToRead":8,"desc":"Cùng thảo luận xung quanh vấn đề ứng dụng thiên về dữ liệu lớn, rất lớn","content":"<p>Đây là những chỉ dẫn của <a href=\"https://www.appnexus.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AppNexus</a> để tối ưu redux với lượng dữ liệu khủng. Mức độ bài viết khá chuyên sâu, bạn cần nắm thật vững redux, hoặc xem lại redux để hiểu rõ và nhớ lâu nội dung bài này.</p>\n<h1 id=\"lưu-dữ-liệu-với-chỉ-mục-truy-cập-bằng-selector\"><a href=\"#l%C6%B0u-d%E1%BB%AF-li%E1%BB%87u-v%E1%BB%9Bi-ch%E1%BB%89-m%E1%BB%A5c-truy-c%E1%BA%ADp-b%E1%BA%B1ng-selector\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lưu dữ liệu với chỉ mục. Truy cập bằng selector</h1>\n<p>Cách cấu trúc dữ liệu sẽ ảnh hưởng nhiều đến performance và việc tổ chức ứng dụng. Lưu dữ liệu trả về từ API theo chỉ mục (index) mang lại nhiều lợi ích. Nói nôm na, lưu theo chỉ mục tức là theo dạng object, theo cặp key-value. Tác giả Redux ( Dan Abramov ) có trình bài vấn đề này <a href=\"https://egghead.io/lessons/javascript-redux-persisting-the-state-to-the-local-storage\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ở đây</a></p>\n<p>Tưởng tượng chúng ta có một mảng object, được <code class=\"language-text\">fetch</code> từ REST API. Giả dụ chúng ta quyết định lưu toàn bộ xuống <em>store</em> như nó trả về. Khi chúng ta muốn lấy một object cụ thể nào đó? Phải loop qua toàn bộ, rồi muốn lưu danh sách các user đang được chọn và chưa được chọn?</p>\n<p>Để tránh tình trạng này, lưu nó dạng chỉ mục, viết lại reducer trước khi lưu xuống store, cục dữ liệu mong muốn, (bạn nào sử dụng FireStore, NoSQL database sẽ hiểu liền tại sao)</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"usersById\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">123</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"Jane Doe\"</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token string\">\"jdoe@example.com\"</span><span class=\"token punctuation\">,</span>\n      phone<span class=\"token operator\">:</span> <span class=\"token string\">\"555-555-5555\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token spread operator\">...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token spread operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Dữ liệu được cấu trúc như thế này thì giải quyết vấn đề bằng cách nào? Ví dụ, chúng ta muốn truy cập đến một user object cụ thể</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">usersById</span><span class=\"token punctuation\">[</span>userId<span class=\"token punctuation\">]</span></code></pre>\n<p><strong>Không cần loop, sử dụng key để lấy trực tiếp đến object mong muốn</strong></p>\n<p>Câu hỏi tiếp theo, ủa vậy sao render được danh sách user nếu dữ liệu tổ chức như vậy. Để làm chuyện đó, chúng ta viết một hàm (hàm như vậy gọi là selector) đơn giản bằng <code class=\"language-text\">Object.keys()</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUsers</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>userById<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>usersById<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span> <span class=\"token arrow operator\">=></span> usersById<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Thêm một hàm nữa cho việc lấy ra danh sách user với tham số truyền vào là mảng user id</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getSelectedUsers</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> selectedUserIds<span class=\"token punctuation\">,</span> usersById <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> selectedUserIds<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> usersById<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đừng lo chuyện phải viết quá nhiều hàm, viết như vậy càng dễ cho sau này maintain. Trường hợp cái model user có bị thay đổi đi nữa, chúng ta không cần phải update cả trăm cái view đang sử dụng dữ liệu này, đơn giản là update những hàm selector này lại, re-format dữ liệu một tí là xong.</p>\n<h1 id=\"view-và-edit-nên-có-2-state-khác-nhau\"><a href=\"#view-v%C3%A0-edit-n%C3%AAn-c%C3%B3-2-state-kh%C3%A1c-nhau\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>View và edit nên có 2 state khác nhau</h1>\n<p>Những dữ liệu từ REST API trả về được xem là <strong>state chuẩn</strong>, giống hệt với database. State của ứng dụng chúng ta sẽ lưu thêm một số meta data khác cho từng user, bình thường chúng ta sẽ xử lý hết những dữ liệu trong cùng một reducer, vì nó tiện.</p>\n<p>Nên tách việc xử lý state chuẩn trên reducer khác, <strong>nếu tập trong tất cả xử lý trong một reducer sẽ khó maintain hơn là tách ra thành nhiều reducer riêng biệt</strong>. (dùng <code class=\"language-text\">combineReducers</code> đấy mà)</p>\n<p>Tại sao? Ví dụ chúng ta có 1 danh sách user, lưu dạng chỉ mục như ở trên</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n <span class=\"token string\">\"usersById\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">123</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"Jane Doe\"</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token string\">\"jdoe@example.com\"</span><span class=\"token punctuation\">,</span>\n      phone<span class=\"token operator\">:</span> <span class=\"token string\">\"555-555-5555\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token spread operator\">...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token spread operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta có màn hình để user chỉnh sửa, user click nút <strong>Edit</strong>, chúng ta phải update lại state để render màn hình edit, chúng ta thêm một field mới vào object như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n <span class=\"token string\">\"usersById\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">123</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"Jane Doe\"</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token string\">\"jdoe@example.com\"</span><span class=\"token punctuation\">,</span>\n      phone<span class=\"token operator\">:</span> <span class=\"token string\">\"555-555-5555\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token spread operator\">...</span>\n      isEditing<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token spread operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Submit lên trên API sau khi sửa. API trả về một object mới. Nhưng làm sau chúng ta merge lại vào store? Nếu replace toàn bộ object thì chúng ta mất cái field <code class=\"language-text\">isEditing</code>, tất nhiên là nếu muốn thì vẫn check và chỉ update những field mình muốn, nhưng như vậy rất tốn <em>sức người sức máy</em>. Tốt nhất chúng ta lưu dữ liệu từ API vào một nơi khác trong store bằng một reducer khác, không đụng gì vào nó, action cũng sẽ đơn giản hơn và dễ xử hơn</p>\n<p>Thêm nữa, nếu user có nữa chừng ấn <em>cancel</em> chúng ta dễ dàng reverse lại nếu đưa edit state vào chổ khác</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"usersByIds\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">123</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Jane Doe\"</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">\"jdoe@example.com\"</span><span class=\"token punctuation\">,</span>\n    phone<span class=\"token operator\">:</span> <span class=\"token string\">\"555-555-5555\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token spread operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"editingUsersById\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">123</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Jane Smith\"</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">\"jsmith@example.com\"</span><span class=\"token punctuation\">,</span>\n    phone<span class=\"token operator\">:</span> <span class=\"token string\">\"555-555-5555\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Như vậy chúng ta vẫn có state chuẩn, để reverse, edit state nếu user click edit nữa. Nói chung, tách ra, đừng gọp chung</p>\n<h1 id=\"xài-chung-state-một-cách-khôn-ngoan\"><a href=\"#x%C3%A0i-chung-state-m%E1%BB%99t-c%C3%A1ch-kh%C3%B4n-ngoan\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xài chung state một cách khôn ngoan</h1>\n<p>Một khi ứng dụng phình ra, nhiều tính năng hơn, nên có cái reducer cho từng page, ví dụ trang hiển thị list user, lưu lại trong <code class=\"language-text\">users</code> reducer, một trang khác bao gồm tất cả post của user hiện tại. Tổ chức redux store như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"usersPage\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"usersById\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token spread operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"postsPage\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"postsById\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token spread operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Mỗi trang đảm trách state của chính nó, các file reducer có thể để cùng với các file page luôn.</p>\n<p>Sẽ đến lúc chúng ta cần chia sẻ một vài state giữa 2 view. Cân nhắc các câu hỏi sau</p>\n<ul>\n<li>Có bao nhiêu view hoặc reducer sẽ phụ thuộc vào dữ liệu này?</li>\n<li>Mỗi trang có cần một bản sao dữ liệu không?</li>\n<li>Dữ liệu thay đổi có thường xuyên không?</li>\n</ul>\n<p>Ví dụ, thông tin user đang đăng nhập sẽ được hiển thị trên tất cả các trang. Tất cả trang đều dùng, thì nó sẽ không hợp lý với cách làm mỗi page một reducer. Thông tin user sẽ không đổi trên tất cả các trang (trừ khi nó vô sửa profile), vậy nên mỗi trang không cần phải có một bản sao thông tin này.</p>\n<p>Tất cả các trang nên dùng chung một thông tin user đang login, cho nó một reducer riêng.</p>\n<p>Trường hợp nào chuyện xài chung như vậy là ko hợp lý? Thí dụ trong các bài viết của user, nó có thêm danh sách các bình luận. Một trang hiển thị tất cả bình luận. Trang trang list post có tùy chọn hiển thị bình luận cho post đang chọn. Chúng ta có 2 trang đều phụ thuộc vào dữ liệu của bình luận. Trang list post sẽ bị thay đổi khá thường xuyên: user update, edit, delete, add post, bình luận tè le ở đó. Ở trang bình luận chỉ cho tương tác với API GET, PUT bình luận, có thể phân trang. Trang post thì ngược lại, nó chỉ lấy danh sách bình luận của chính nó. Rõ ràng, việc dùng chung bình luận giữa các view là không hợp lý. Mỗi trang nên lưu riêng một bản sao của bình luận.</p>\n<h1 id=\"tái-sử-dụng-các-hàm-xử-lý-reducer\"><a href=\"#t%C3%A1i-s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1c-h%C3%A0m-x%E1%BB%AD-l%C3%BD-reducer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tái sử dụng các hàm xử lý reducer</h1>\n<p>Sau một thời gian viết reducer, sẽ có lúc mình thấy mấy cái function này xử lý na ná nhau, như vậy thì nên tái sử dụng nó đừng viết mới. Ví dụ nếu logic của việc load dữ liệu bài viết và bình luận là như nhau, khác cái endpoint thôi và object schema, phân trang cũng giống.</p>\n<p>Để dùng chung reducer, cách thứ nhất, truyền vào scope bên trong payload của action. Để dễ hình dung, lấy vị dụ một trang chứa nhiều section khác nhau, tất cả đều load bất tuần tự từ các API endpoint khác nhau, để theo dõi tình trang load này bằng state trong store</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> initialLoadingState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  usersLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  domainsLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  subDomainsLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  settingsLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chúng ta có thể viết 4 reducer cho 4 cái action, thay vì như vậy nếu truyền thêm scope, một action <code class=\"language-text\">SET_LOADING</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// reducer</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loadingReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialLoadingState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> payload <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token constant\">SET_LOADING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// tùy theo scope mà gán cho key tương ứng</span>\n      <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>payload<span class=\"token punctuation\">.</span><span class=\"token property-access\">scope</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">Loading</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> payload<span class=\"token punctuation\">.</span><span class=\"token property-access\">loading</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Action</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setLoading</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">scope<span class=\"token punctuation\">,</span> loading</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token constant\">SET_LOADING</span><span class=\"token punctuation\">,</span>\n    payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      scope<span class=\"token punctuation\">,</span>\n      loading<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ví dụ gọi dispatch</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Làm như vậy chúng ta khử được quá nhiều lần lập lại logic của reducer.</p>\n<p>Còn về vấn đề phân trang, API có thể trả về gần giống như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"users\"</span><span class=\"token operator\">:</span> <span class=\"token spread operator\">...</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"count\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2500</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// tổng số dòng</span>\n  <span class=\"token string\">\"pageSize\"</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// số phần tử mỗi trang</span>\n  <span class=\"token string\">\"startElement\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// giá trị index đầu tiên của phần từ đầu tiên</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Để gọi dữ liệu trang tiếp theo, chúng ta có thể dùng tham số query <code class=\"language-text\">startElement=100</code>. Đây là cách chúng ta hiện thực reducer cho vấn đề phân trang</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> initialPaginationState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  startElement<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  pageSize<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  count<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">paginationReducerFor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prefix</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">paginationReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialPaginationState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> payload <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> prefix <span class=\"token operator\">+</span> types<span class=\"token punctuation\">.</span><span class=\"token constant\">SET_PAGINATION</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n          startElement<span class=\"token punctuation\">,</span>\n          pageSize<span class=\"token punctuation\">,</span>\n          count<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          startElement<span class=\"token punctuation\">,</span>\n          pageSize<span class=\"token punctuation\">,</span>\n          count<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> paginationReducer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Ví dụ</span>\n<span class=\"token keyword\">const</span> postsReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  postsData<span class=\"token operator\">:</span> postsDataReducer<span class=\"token punctuation\">,</span>\n  paginationData<span class=\"token operator\">:</span> <span class=\"token function\">paginationReducerFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POSTS_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> commentsReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  commentsData<span class=\"token operator\">:</span> commentsDataReducer<span class=\"token punctuation\">,</span>\n  paginationData<span class=\"token operator\">:</span> <span class=\"token function\">paginationReducerFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'COMMENTS_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Action creator</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setPaginationFor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prefix</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setPagination</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n      startElement<span class=\"token punctuation\">,</span>\n      pageSize<span class=\"token punctuation\">,</span>\n      count<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> response<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> prefix <span class=\"token operator\">+</span> types<span class=\"token punctuation\">.</span><span class=\"token constant\">SET_PAGINATION</span><span class=\"token punctuation\">,</span>\n      payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        startElement<span class=\"token punctuation\">,</span>\n        pageSize<span class=\"token punctuation\">,</span>\n        count<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> setPagination<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ví dụ sử dụng</span>\n<span class=\"token keyword\">const</span> setPostsPagination <span class=\"token operator\">=</span> <span class=\"token function\">setPaginationFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POSTS_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> setCommentsPagination <span class=\"token operator\">=</span> <span class=\"token function\">setPaginationFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'COMMENTS_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu chúng ta dispatch ra 1 action là <code class=\"language-text\">POSTS_SET_PAGINATION</code> nó sẽ chỉ đụng đến <code class=\"language-text\">postsReducer</code>. Một kiểu viết hơi tricky nếu bạn nào chưa nắm được <a href=\"https://developer.mozilla.org/vi/docs/Web/JavaScript/Closures\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Closure function</a> - mình có dịch trên MDN rồi, các bạn lên đó đọc lại.</p>\n<h1 id=\"tích-hợp-với-react\"><a href=\"#t%C3%ADch-h%E1%BB%A3p-v%E1%BB%9Bi-react\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tích hợp với React</h1>\n<p>Ví dụ sử dụng selector và action creator</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">ConnectedComponent</span> <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      users<span class=\"token operator\">:</span> selectors<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getCurrentUsers</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      editingUser<span class=\"token operator\">:</span> selectors<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getEditingUser</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      setPagination<span class=\"token operator\">:</span> actionCreatorFactories<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setPaginationFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'USERS_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">bindActionCreators</span><span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">UsersComponent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Các component nó không cần quan tâm cái scope nào đang dùng với action và truy cập tới state bằng cách nào. Component giờ không cần quan tâm việc dữ liệu cụ thể bên trong state làm việc thế nào.</p>\n<p>Xem thêm</p>\n<ul>\n<li><a href=\"https://github.com/reactjs/reselect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reselect</a> thư viện tạo selector</li>\n<li><a href=\"https://github.com/paularmstrong/normalizr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Normalizr</a> thư viện chuẩn hóa dữ liệu JSON</li>\n</ul>\n<p><a href=\"https://techblog.appnexus.com/five-tips-for-working-with-redux-in-large-applications-89452af4fdcb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Toàn bộ vài viết</a></p>\n","cover_image":""}},{"node":{"id":"c96e777ca9db4c279c1d03ebd80ea3f8","title":"Xử lý tập dữ liệu lớn trong React","path":"/xu-ly-tap-du-lieu-lon-trong-react/","date":"2018-10-03","timeToRead":2,"desc":"Tình huống: bạn có một table với rất nhiều dữ liệu đổ vào, nếu bạn thấy component đó render chậm trên màn hình, đó là lúc cần tái cấu trúc","content":"<p>Chúng ta có component như sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ParentComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">items</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token arrow operator\">=></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">item</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Khi mà <code class=\"language-text\">ParentComponent</code> nhận được <code class=\"language-text\">props.items</code>, trước hết nó sẽ đổ tất cả dữ liệu vào trong virtual DOM, sau đó kiểm tra xem phần nào của real DOM cần cập nhập, rồi cập nhập toàn bộ trong <strong>một lần</strong>. Đó là lý do chúng ta bị <strong>delay</strong>, nó tốn thời gian cho việc tạo ra một số lượng virtual DOM rất lớn trước khi update real DOM, giả dụ có hơn 40.000 dòng dữ liệu, nó đợi tạo 40.000 cái virtual DOM trước khi đẩy hết xuống real DOM.</p>\n<p>Chúng ta muốn render <code class=\"language-text\">ParentComponent</code> sớm nhất có thể, và sau đó thêm các item từ từ. Chúng ta muốn hiển thị các item vừa có trong virtual DOM, rồi lại render tiếp. </p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    items<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">items</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">items</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">item</span> <span class=\"token arrow operator\">=></span> \n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">item</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Giải pháp ở đây là đưa toàn bộ <code class=\"language-text\">item</code> vào trong <code class=\"language-text\">state</code>, sau đó <code class=\"language-text\">render()</code> theo <code class=\"language-text\">state.items</code>. Việc cần làm là update lại <code class=\"language-text\">state.items</code> và chèn thêm item một cách từ từ. Với cách này, hàm <code class=\"language-text\">render</code> sẽ gọi khá thường xuyên, nhưng được cái nó hiển thị liền</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">recursive</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> hasMore <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">items</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">items</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      items<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span><span class=\"token property-access\">items</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">.</span><span class=\"token property-access\">items</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>hasMore<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">recursive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Hàm đệ quy trên nó sẽ chạy đến khi <strong>length</strong> bằng nhau. Trên mỗi lần lặp lại nó thêm một element vào mảng <code class=\"language-text\">state.items</code>. Dùng <code class=\"language-text\">setTimeout</code> để đưa thứ tự ưu tiên của nó xuống thấp nhất.</p>\n<p>Nếu thắc mắc tại sao lại gọi hàm <code class=\"language-text\">setState()</code> bên trong một hàm đệ quy</p>\n<ul>\n<li>Buộc phải dùng <code class=\"language-text\">setState</code> nếu muốn update real DOM, <code class=\"language-text\">setState</code> nó có cách xử lý riêng khi chúng ta gọi nhiều lần</li>\n<li>Ví dụ trên đang thêm 1 item một lần gọi, tùy theo nhu cầu, số lượng item có thế nhiều hơn.</li>\n<li><code class=\"language-text\">setTimeout</code> có thứ tự ưu tiên chạy cuối cùng, nên, nếu user tương tác với component đã được render, tương tác này sẽ được ưu tiên cao hơn việc render các item còn lại. User có thể bắt đầu tương tác với các item đã render mà không đợi nó show hết</li>\n<li>Nếu đã có sẵn toàn bộ các item thì ok, nếu phải đi <code class=\"language-text\">fetch</code>, dùng cách khác</li>\n<li>Nếu dùng HOC sẽ không hề làm side effect với cách này</li>\n<li>Bạn cứ test performance để kiểm tra thử nó làm nhanh hay chậm app để xác nhận</li>\n</ul>\n<p>Gọi hàm đệ quy trong <code class=\"language-text\">componentDidMount</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">recursive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>Ghi chú</strong></p>\n<p>Cách này đã kiểm tra khi render khoảng 10 đến 1500 element, thời gian tốn khoảng 2 đến 3ms.</p>\n<p>Nếu muốn tìm một giải pháp của người ta build sẵn thì dùng <a href=\"https://github.com/bvaughn/react-virtualized\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-virtualized</a></p>\n<p><a href=\"https://itnext.io/handling-large-lists-and-tables-in-react-238397854625\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài viết gốc</a></p>\n","cover_image":""}},{"node":{"id":"4819e08d90839e2a61d516158dad2f2e","title":"Chỉ dẫn để thiết kế React Component","path":"/chi-dan-de-thiet-ke-react-component/","date":"2018-09-25","timeToRead":3,"desc":"Tốt hơn, tốt nữa, tốt mãi, luôn là điều mình muốn, ngoài chuyện viết cho nó chạy đúng, viết thế nào tốt nhất nên là mục tiêu khi làm việc","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#single-responsibility-principle\">Single Responsibility Principle</a></li>\n<li><a href=\"#export\">Export</a></li>\n<li><a href=\"#type-check\">Type check</a></li>\n<li><a href=\"#consistance\">Consistance</a></li>\n<li><a href=\"#naming\">Naming</a></li>\n</ul>\n<!-- /TOC -->\n<p><strong>Đây là tổng hợp những quan điểm thiết kế component sao cho tốt, chứ không phải là chuẩn mực gì hết, theo quan điểm cá nhân người viết - là mình đây, không hề là chuẩn mực công nghiệp gì cả.</strong></p>\n<p>Thử hình dung, chúng ta có một component với khoảng hơn chục <code class=\"language-text\">prop</code>, dựa trên các <code class=\"language-text\">prop</code> truyền vào, component sẽ cho ra kết quả khác nhau, một nhu cầu tất yếu, tuy nhiên nếu hạn chế được ít chừng nào thì tốt chừng ấy, gần như số lượng <code class=\"language-text\">prop</code> của component quá nhiều thì chúng ta sẽ không nhớ nổi cần những gì cho component đó, lúc nào chúng ta cũng phải mở ra đọc docs, đôi khi mở source ra để check logic bên trong nó.</p>\n<h1 id=\"single-responsibility-principle\"><a href=\"#single-responsibility-principle\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Single Responsibility Principle</h1>\n<p>Nếu 1 component đang có quá nhiều <code class=\"language-text\">prop</code>, nó đang ôm đồm quá nhiều công việc, hãy nhớ đến nguyên tắc <a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Single Responsibility Principle</a> (SRP), tạm dịch là ai làm việc nấy, chia component đó ra thành các component nhỏ hơn, từng component giải quyết từng vấn đề.</p>\n<p><img src=\"https://techmaster.vn/fileman/Uploads/ImageBlog/hoc-lap-trinh-truc-tuyen-online-co-ban-den-nang-cao-20122015-1.jpg\"></p>\n<h1 id=\"export\"><a href=\"#export\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Export</h1>\n<p>Một kiểu viết mình rất thích, thay vì export component <code class=\"language-text\">&lt;TableRow/&gt;</code>, <code class=\"language-text\">&lt;TableCell/&gt;</code>, mình sẽ export  component dạng <code class=\"language-text\">&lt;Table.Row/&gt;</code>, <code class=\"language-text\">&lt;Table.Cell/&gt;</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Table</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./Table'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">TableRow</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./TableRow'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">TableCell</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./TableCell'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token maybe-class-name\">Table</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Cell</span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">TableCell</span><span class=\"token punctuation\">;</span>\n<span class=\"token maybe-class-name\">Table</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Row</span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">TableRow</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token exports\"><span class=\"token punctuation\">{</span>\n  <span class=\"token maybe-class-name\">TableCell</span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">TableRow</span>\n<span class=\"token punctuation\">}</span></span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">Table</span><span class=\"token punctuation\">;</span></code></pre>\n<p><em>Nếu bạn không hiểu vì sao mình có thể gọi <code class=\"language-text\">&lt;Table.Row/&gt;</code>, <code class=\"language-text\">&lt;Table.Cell/&gt;</code>, mình giải thích luôn, lợi dụng đặc điểm biến kiểu reference, tham khảo <a href=\"https://luubinhan.github.io/blog/2017-09-25-10-khai-niem-javascript-can-biet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lại bài này</a>, thằng TableCell và Table.Cell đều tham chiếu đến cùng vùng nhớ</em></p>\n<h1 id=\"type-check\"><a href=\"#type-check\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Type check</h1>\n<p>Luôn dùng type check cho component, thời điểm hiện tại mình khuyến khích <a href=\"https://luubinhan.github.io/blog/2018-09-10-huong-dan-lam-viec-voi-flow-react-type-checking\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dùng Flow</a>, nó đảm bảo rằng component sẽ được truyền đúng giá trị <code class=\"language-text\">prop</code> nó cần, đồng thời lúc gõ ra mình cũng sẽ thấy được danh sách các <code class=\"language-text\">prop</code> của component đó trên editor</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*cT7C0Tk53cilIYNWNo8KfA.gif\" alt=\"Chỉ dẫn để thiết kế React Component\"></p>\n<h1 id=\"consistance\"><a href=\"#consistance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Consistance</h1>\n<p>Luôn thống nhất trong hệ thống component đang build, không thể lúc vui bạn dùng <code class=\"language-text\">prop</code> tên <code class=\"language-text\">disable</code> chổ khác dùng <code class=\"language-text\">enable</code>, nếu được thì chỉ chọn 1 trong 2 thôi.</p>\n<p>Ví dụ khác, nếu component cho phép truyền vào biến màu sắc, chổ này bạn dùng <code class=\"language-text\">variant=&quot;primary|secondary|danger&quot;</code>, chổ kia bạn lại dùng <code class=\"language-text\">color=&quot;blue|grey|red&quot;</code> thì hết sức khó chịu cho người khác.</p>\n<h1 id=\"naming\"><a href=\"#naming\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Naming</h1>\n<p>Về cách đặt tên <code class=\"language-text\">prop</code>, luôn đặt tên cho dễ hình dung được công dụng của component đó làm nhiệm vụ gì, ảnh hưởng gì đến component</p>\n<p>Giờ lấy ví dụ một component rất phổ biến <code class=\"language-text\">&lt;Alert /&gt;</code></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/0*xkEnUeapJT4ut5r1.png\" alt=\"Chỉ dẫn để thiết kế React Component\"></p>\n<p>Thường chúng ta sẽ tạo ra component có các <code class=\"language-text\">prop</code> kiểu này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Alert</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Thông báo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Alert</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Alert</span></span> <span class=\"token attr-name\">success</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Thành công</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Alert</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Alert</span></span> <span class=\"token attr-name\">warning</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Cảnh báo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Alert</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Alert</span></span> <span class=\"token attr-name\">danger</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hư mẹ rồi</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Alert</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Rất rõ ràng sạch sẽ, xúc tích. Tuy nhiên nếu chúng ta dùng theo kiểu sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Alert</span></span> <span class=\"token attr-name\">success</span> <span class=\"token attr-name\">warning</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Thành công</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Alert</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Sẽ có những anh developer ngu ngu ngơ ngơ dùng như vậy thật đấy. Tất nhiên nếu chúng ta là người viết cái <code class=\"language-text\">&lt;Alert/&gt;</code> chúng ta sẽ không đời nào truyền vào kiểu vậy. Nếu truyền vào kiểu như vậy thì nó <code class=\"language-text\">render</code> ra cái gì, đó mà đoán được. Một giải pháp được khuyến khích</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AlertBetter</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Thông báo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AlertBetter</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AlertBetter</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Thành công</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AlertBetter</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AlertBetter</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>warning<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Cảnh báo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AlertBetter</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AlertBetter</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>danger<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hư mẹ rồi</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AlertBetter</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Nguồn tham khảo và tổng hợp</p>\n<ul>\n<li><a href=\"https://blog.kentcdodds.com/make-impossible-states-impossible-cf85b97795c1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.kentcdodds.com/make-impossible-states-impossible-cf85b97795c1</a></li>\n<li><a href=\"https://hackernoon.com/principles-of-component-api-prop-design-bb20cd58da54\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://hackernoon.com/principles-of-component-api-prop-design-bb20cd58da54</a></li>\n</ul>\n","cover_image":""}},{"node":{"id":"18de52b6667fae340629f0c5b1fb3c22","title":"Giới thiệu React Profiler","path":"/gioi-thieu-react-profiler/","date":"2018-09-19","timeToRead":2,"desc":"Từ version React 16.5 bổ sung thêm một plugin DevTool profiler. Plugin này được dùng để thu thập các thông tin về thời gian render một component, xác định nguyên nhân làm trì trệ performance.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#thu-th%E1%BA%ADp\">Thu thập</a></li>\n<li><a href=\"#%C4%91%E1%BB%8Dc-hi%E1%BB%83u-k%E1%BA%BFt-qu%E1%BA%A3\">Đọc hiểu kết quả</a></li>\n<li><a href=\"#l%E1%BB%8Dc-commit\">Lọc commit</a></li>\n<li><a href=\"#flame-chart\">Flame chart</a></li>\n<li><a href=\"#ranked-chart\">Ranked chart</a></li>\n<li><a href=\"#component-chart\">Component Chart</a></li>\n<li><a href=\"#t%C6%B0%C6%A1ng-t%C3%A1c\">Tương tác</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"thu-thập\"><a href=\"#thu-th%E1%BA%ADp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thu thập</h2>\n<p>Trên bộ DevTools sẽ có thêm tab <strong>Profiler</strong></p>\n<p><img src=\"https://reactjs.org/static/devtools-profiler-tab-4da6b55fc3c98de04c261cd902c14dc3-acf85.png\"></p>\n<p>React-dom 16.5+ hỗ trợ thu thập dữ liệu khi chạy DEV, để dùng trong production sử dụng <code class=\"language-text\">react-dom/profiling</code>, Đọc thêm cách sử dụng ở đây <a href=\"https://fb.me/react-profiling\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://fb.me/react-profiling</a></p>\n<p>Trên màn hình vừa mở, click nút record để bắt đầu thu thập dữ liệu</p>\n<p><img src=\"https://reactjs.org/static/start-profiling-bae8d10e17f06eeb8c512c91c0153cff-acf85.png\" alt=\"record để bắt đầu thu thập dữ liệu\"></p>\n<p>Lúc này, khi một component react chạy <code class=\"language-text\">render</code>, thông tin sẽ được thu thập. Sử dụng app như bình thường, khi không muốn thu thập dữ liệu nữa, click nút <strong>stop</strong></p>\n<p><img src=\"https://reactjs.org/static/start-profiling-bae8d10e17f06eeb8c512c91c0153cff-acf85.png\" alt=\"stop record\"></p>\n<h2 id=\"đọc-hiểu-kết-quả\"><a href=\"#%C4%91%E1%BB%8Dc-hi%E1%BB%83u-k%E1%BA%BFt-qu%E1%BA%A3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đọc hiểu kết quả</h2>\n<p>Chúng ta quan tâm đến quá trình <strong>commit</strong> React component - là khi component được <strong>insert</strong>, <strong>update</strong>, hoặc <strong>remove</strong> khỏi DOM.</p>\n<p>Ở trên cùng, bên phải, để ý cái bar chart</p>\n<p><img src=\"https://reactjs.org/static/commit-selector-bd72dec045515d59be51c944e902d263-8ef72.png\"></p>\n<p>Mỗi một cột trong cái chart này đại diện cho một commit, commit đang chọn sẽ được tô đen. Độ cao của cột này tương ứng cho thời gian cần để render.</p>\n<h2 id=\"lọc-commit\"><a href=\"#l%E1%BB%8Dc-commit\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lọc commit</h2>\n<p>Thời gian thu thập dữ liệu càng lâu, ứng dụng render càng nhiều lần, sớm muộn số lượng dữ liệu quá lớn như vậy chúng ta cần phải lọc để xem nhanh kết quả cần tìm. Ví dụ ẩn đi toàn bộ commit có thời gian bé hơn giá trị ms nào đó</p>\n<p><img src=\"https://reactjs.org/filtering-commits-683b9d860ef722e1505e5e629df7ef7e.gif\"></p>\n<h2 id=\"flame-chart\"><a href=\"#flame-chart\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Flame chart</h2>\n<p><strong>Flame chart</strong> đại diện cho trạng thái của ứng trong một thời điểm commit cụ thể. Mỗi cột đại diện cho một component, kích thước và màu sắc thể hiện thời gian render component và các component con bên trong. Màu xanh thì tốn ít thời gian, màu vàng là nhiều thời gian và màu xám là không render</p>\n<p><img src=\"https://reactjs.org/static/flame-chart-3046f500b9bfc052bde8b7b3b3cfc243-acf85.png\" alt=\"Flame chart\"></p>\n<p>Ví dụ trên, commit trên tiêu tốn hết 18.4ms để render. Router tốn nhiều nhất thời gian để render: 18.4ms. Phần lớn là do phải render tất cả các component con, <code class=\"language-text\">Nav</code> (8.4ms), <code class=\"language-text\">Route</code> (7.9ms)</p>\n<p>Click vào từng cột để hiển thị chi tiết các component con</p>\n<p><img src=\"https://reactjs.org/zoom-in-and-out-39ba82394205242af7c37ccb3a631f4d.gif\" alt=\"Click vào từng cột để hiển thị chi tiết các component con\"></p>\n<p>Bên cột phải chúng ta có các thông tin như props, state, tổng số lần render.</p>\n<p><img src=\"https://reactjs.org/props-and-state-1f4d023f1a0f281386625f28df87c78f.gif\"></p>\n<p>Trong một số trường hợp, chọn vào component, chuyển qua lại giữa commit, sẽ có thông tin bổ sung tại sao component được render lại</p>\n<p><img src=\"https://reactjs.org/see-which-props-changed-cc2a8b37bbce52c49a11c2f8e55dccbc.gif\"></p>\n<h2 id=\"ranked-chart\"><a href=\"#ranked-chart\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ranked chart</h2>\n<p><strong>Ranked chart</strong> đại diện cho 1 commit. Mỗi cột trong chart là một component, các cột này được sếp theo thứ tự component nào tốn nhiều thời gian render nhất sẽ lên trên.</p>\n<p><img src=\"https://reactjs.org/static/ranked-chart-0c81347535e28c9cdef0e94fab887b89-acf85.png\"></p>\n<h2 id=\"component-chart\"><a href=\"#component-chart\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Component Chart</h2>\n<p>Để xem đã bao nhiêu lần 1 component được render. Mỗi cột là mỗi lần component được render.</p>\n<p><img src=\"https://reactjs.org/static/component-chart-d71275b42c6109e222fbb0932a0c8c09-acf85.png\"></p>\n<p>Double-click vào component này hoặc chọn component và chọn nút blue bar phải góc phải trên. Để xem thêm các thông tin khác</p>\n<p><img src=\"https://reactjs.org/see-all-commits-for-a-fiber-99cb4321ded8eb0c21ae5fc673878563.gif\"></p>\n<h2 id=\"tương-tác\"><a href=\"#t%C6%B0%C6%A1ng-t%C3%A1c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tương tác</h2>\n<p>Hiện tại đây đang trong quá trình thử nghiệm cho tính năng này, tracking nguyên nhân gây ra update.</p>\n<p><img src=\"https://reactjs.org/static/interactions-a91a39ac076b71aa7a202aaf46f8bd5a-acf85.png\"></p>\n<p>Mỗi dòng là một tương tác đã được track. Nút màu xanh bên cạnh là commit liên quan tới tương tác này.</p>\n<p>Kiểm tra một tương tác trong commit cụ thể từ <strong>flame chart</strong> và <strong>ranked chart</strong></p>\n<p><img src=\"https://reactjs.org/static/interactions-for-commit-9847e78f930cb7cf2b0f9682853a5dbc-acf85.png\"></p>\n<p><a href=\"https://github.com/facebook/react-devtools/tree/master/test/example\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code ví dụ</a></p>\n<p><a href=\"https://react-devtools-profiler-demo.now.sh/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo</a></p>\n<p><a href=\"https://reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài gốc</a></p>\n","cover_image":""}},{"node":{"id":"788d202fd25a809668b62e0786539170","title":"Sử dụng Flow để check type trong React Redux","path":"/su-dung-flow-de-check-type-trong-react-redux/","date":"2018-09-13","timeToRead":4,"desc":"Chúng ta sẽ không nói nhiều cách sử dụng Redux trong bài này, các bạn có thể xem các bài trước, ở đây mình chỉ đi đến vấn đề đưa Flow vào để check type trong Redux","content":"<p><em>Bài viết mang tính chất tham khảo, hiện tại đội ngũ Facebook đã bỏ rơi Flow để theo TypeScript <a href=\"https://github.com/facebook/jest/pull/7554\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/facebook/jest/pull/7554</a></em></p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#constants\">Constants</a></li>\n<li><a href=\"#actions\">Actions</a></li>\n<li><a href=\"#reducer\">Reducer</a></li>\n</ul>\n<!-- /TOC -->\n<h1 id=\"constants\"><a href=\"#constants\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Constants</h1>\n<p>constants/actionTypes.js</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* @flow */</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">PLAY</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'PLAY'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">PAUSE</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'PAUSE'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">STOP</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'STOP'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">BACKWARD</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'BACKWARD'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">FORWARD</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'FORWARD'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">UPDATE_TIME</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'UPDATE_TIME'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SELECT_TRACK</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'SELECT_TRACK'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chuyện này có hơi dư thừa vì chúng ta biết chắc chắn các hằng số này sẽ luôn là <code class=\"language-text\">string</code>, có bao giờ chúng ta lại đi đổi giá trị trong constants</p>\n<p>Flow cho phép chúng ta khai báo các type sau:</p>\n<ul>\n<li><strong>string</strong></li>\n<li><strong>number</strong></li>\n<li><strong>boolean</strong></li>\n<li><strong>Function</strong></li>\n<li><strong>Array</strong></li>\n<li><strong>Object</strong></li>\n<li><strong>any</strong></li>\n<li><strong>mixed</strong></li>\n<li><strong>void</strong></li>\n</ul>\n<p>Nếu biến có thể <code class=\"language-text\">null</code>, tức không bắt buộc thì thêm dấu <strong>?</strong> vào trước, ?string, ?number, ?boolean</p>\n<h1 id=\"actions\"><a href=\"#actions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Actions</h1>\n<p>playerActions.js </p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">PLAY</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">PAUSE</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">STOP</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">BACKWARD</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">FORWARD</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">UPDATE_TIME</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">SELECT_TRACK</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'constants/actionTypes'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">PLAY</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">PAUSE</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">STOP</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">backward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">BACKWARD</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">FORWARD</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">UPDATE_TIME</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">selectTrack</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">track</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">SELECT_TRACK</span><span class=\"token punctuation\">,</span> track <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Với những function thế này, chúng ta phải chỉ định kiểu params truyền vào và kiểu return, mỗi một method chúng ta định nghĩa ra một custom type để sử dụng</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> type <span class=\"token maybe-class-name\">PlayerAction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  track<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Track</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Có thể thấy Track cũng là một custom type khác mà chúng ta định nghĩa ở đâu đó rồi import vào như một module</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> type <span class=\"token maybe-class-name\">Track</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  artistId<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  title<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  key<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  bucket<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta sửa lại cái playerActions.js ở trên với Flow</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* @flow */</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">PLAY</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">PAUSE</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">STOP</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">BACKWARD</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">FORWARD</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">UPDATE_TIME</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">SELECT_TRACK</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'constants/actionTypes'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> type <span class=\"token maybe-class-name\">PlayerAction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  currentTime<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  track<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Track</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Import Track type from player, defines the properties a Track object</span>\n<span class=\"token comment\">// can have.</span>\n<span class=\"token keyword module\">import</span> type <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Track</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'reducers/player'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PlayerAction</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">PLAY</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PlayerAction</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">PAUSE</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PlayerAction</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">STOP</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">backward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PlayerAction</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">BACKWARD</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PlayerAction</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">FORWARD</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PlayerAction</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">UPDATE_TIME</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">selectTrack</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">track<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Track</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PlayerAction</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">SELECT_TRACK</span><span class=\"token punctuation\">,</span> track <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"reducer\"><a href=\"#reducer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reducer</h1>\n<p>Một khi đã quen thuộc với cách định nghĩa type cho hàm như trên thì chúng ta sẽ dễ dàng chỉnh sửa lại reducer thôi, vì nó cũng tương tự.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* @flow */</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">PLAY</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">PAUSE</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">STOP</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">BACKWARD</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">FORWARD</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">UPDATE_TIME</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">SELECT_TRACK</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'constants/actionTypes'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Import the PlayerAction type form the actions/playerActions.js file, much</span>\n<span class=\"token comment\">// like we imported the Track type into our action previously.</span>\n<span class=\"token keyword module\">import</span> type <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">PlayerAction</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'actions/playerActions'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> type <span class=\"token maybe-class-name\">Track</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  artistId<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  title<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  key<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  bucket<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create a type alias called Dictionary. This will allow us to define data</span>\n<span class=\"token comment\">// that follows the model, a bit superfluous for this example, but good to</span>\n<span class=\"token comment\">// understand how it works:</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   key: value</span>\n<span class=\"token comment\">// }</span>\ntype <span class=\"token maybe-class-name\">Dictionary</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span><span class=\"token punctuation\">,</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// In our PlayerState definition we're also going to</span>\n<span class=\"token comment\">// define an instance of the Dictionary type</span>\n<span class=\"token comment\">// where the key int he object is a number, and</span>\n<span class=\"token comment\">// the value is of type Track.</span>\n<span class=\"token keyword module\">export</span> type <span class=\"token maybe-class-name\">PlayerState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  tracks<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Dictonary</span><span class=\"token operator\">&lt;</span>number<span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Track</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  currentTrackId<span class=\"token operator\">:</span> <span class=\"token operator\">?</span>number<span class=\"token punctuation\">;</span>\n  currentTime<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  playing<span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Declare our initial player state which follows our PlayerState type.</span>\n<span class=\"token keyword\">const</span> initialState<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PlayerState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  tracks<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  currentTrackId<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n  currentTime<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  playing<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// This helper method will return the id of the next track</span>\n<span class=\"token comment\">// in our playlist. It receives a track dictionary from</span>\n<span class=\"token comment\">// the state, and the current track id. It maps out the</span>\n<span class=\"token comment\">// data to an array, and finds the next sequential index.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getNextTrackId</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">tracks<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Dictonary</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Track</span><span class=\"token punctuation\">,</span> number<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  currentTrackId<span class=\"token operator\">:</span> number</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> trackIds <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>tracks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> nextTrackIndex <span class=\"token operator\">=</span> trackIds<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span>currentTrackId<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>nextTrackIndex <span class=\"token operator\">>=</span> tracks<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    nextTrackIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword control-flow\">return</span> tracksIds<span class=\"token punctuation\">[</span>nextTrackIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// This helper method will return the id of the</span>\n<span class=\"token comment\">// previous track in our playlist. It works exactly</span>\n<span class=\"token comment\">// like the previous helper function.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getPreviousTrackId</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">tracks<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Dictonary</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Track</span><span class=\"token punctuation\">,</span> number<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  currentTrackId<span class=\"token operator\">:</span> number</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> trackIds <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>tracks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> nextTrackIndex <span class=\"token operator\">=</span> trackIds<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span>currentTrackId<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>nextTrackIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    nextTrackIndex <span class=\"token operator\">=</span> trackIds<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword control-flow\">return</span> trackIds<span class=\"token punctuation\">[</span>nextTrackIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// This is our reducer. There's nothing special to call out</span>\n<span class=\"token comment\">// here except that we are declaring our two input types</span>\n<span class=\"token comment\">// of PlayerState and PlayerAction, and that we must</span>\n<span class=\"token comment\">// return a valid instance of PlayerState.</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">player</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">state<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PlayerState</span> <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span>\n  action<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PlayerAction</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PlayerState</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">PLAY</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token spread operator\">...</span>state<span class=\"token punctuation\">,</span>\n      playing<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">PAUSE</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token spread operator\">...</span>state<span class=\"token punctuation\">,</span>\n      playing<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">STOP</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token spread operator\">...</span>state<span class=\"token punctuation\">,</span>\n      playing<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      currentTime<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">BACKWARD</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token spread operator\">...</span>state<span class=\"token punctuation\">,</span>\n      currentTime<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      currentTrackId<span class=\"token operator\">:</span> <span class=\"token function\">getPreviousTrackId</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span><span class=\"token property-access\">tracks</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">currentTrackId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">FORWARD</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token spread operator\">...</span>state<span class=\"token punctuation\">,</span>\n      currentTime<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      currentTrackId<span class=\"token operator\">:</span> <span class=\"token function\">getNextTrackId</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span><span class=\"token property-access\">tracks</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">currentTrackId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">UPDATE_TIME</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token spread operator\">...</span>state<span class=\"token punctuation\">,</span>\n      currentTime<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">currentTime</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">SELECT_TRACK</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token spread operator\">...</span>state<span class=\"token punctuation\">,</span>\n      currentTime<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      currentTrackId<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">track</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Một lợi ích của việc define type mà mình rất thích là nó sẽ có cái hint trên IDE mỗi khi mình dùng gọi đến hàm hay params đó.</p>\n<p><a href=\"/2018-09-10-huong-dan-lam-viec-voi-flow-react-type-checking\">Đọc thêm: Tại sao sử dụng Flow, và sử dụng Flow như thế nào trong React</a></p>\n<p><a href=\"https://medium.com/@cdebotton/redux-and-flowtype-69ff1dd09036\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tài liệu tham khảo</a></p>\n","cover_image":""}},{"node":{"id":"5e3c368c783a403a32943f42293ddde0","title":"Làm toast notification system trong React/Redux","path":"/lam-toast-notification-system-trong-react-redux/","date":"2018-09-12","timeToRead":2,"desc":"Có lẽ ko có ứng dụng web nào lại ko cần thông báo đến user kết quả của một thao tác nào đó, xây một notification system để sử dụng là hết sức cần thiết","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#actions--reducer\">Actions &#x26; Reducer</a></li>\n<li><a href=\"#components\">Components</a></li>\n</ul>\n<!-- /TOC -->\n<h1 id=\"actions--reducer\"><a href=\"#actions--reducer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Actions &#x26; Reducer</h1>\n<p>Bắt đầu với <em>reducer</em>, mặc định là một mảng rỗng, toàn bộ nội dung thông báo sẽ add vào mảng này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// scr/reducers/toast.js</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">toasts</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>payload<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đừng quên thêm vào trong <code class=\"language-text\">combineReducers</code> nhé</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/reducers/index.js</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> combineReducers <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"redux\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">toasts</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./toasts\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  toasts\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chúng ta sẽ cần 1 function <code class=\"language-text\">createToast</code> nhận vào options và trả về một object với id tự động tăng khi gọi, có sẵn một số default options sẽ merge với giá trị options truyền vào</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/factories/createToast.js</span>\n<span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> defaultOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  color<span class=\"token operator\">:</span> <span class=\"token string\">'#6796e6'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createToast</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token spread operator\">...</span>defaultOptions<span class=\"token punctuation\">,</span>\n    <span class=\"token spread operator\">...</span>options<span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> id<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta sẽ cần thêm 1 action để tạo một toast notification trong store, 1 action để remove khỏi store</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/constants/index.js</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">ADD_TOAST</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ADD_TOAST\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">REMOVE_TOAST</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"REMOVE_TOAST\"</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/actions/index.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">createToast</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../factories/createToast\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">ADD_TOAST</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">REMOVE_TOAST</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../constants\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">addToast</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    payload<span class=\"token operator\">:</span> <span class=\"token function\">creatToast</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token operator\">:</span> <span class=\"token constant\">ADD_TOAST</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">removeToast</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    payload<span class=\"token operator\">:</span> id<span class=\"token punctuation\">,</span>\n    type<span class=\"token operator\">:</span> <span class=\"token constant\">REMOVE_TOAST</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Giờ đến nhiệm vụ của reducer là phải xử lý khi có 2 action trên</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/reducers/toasts.js</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">ADD_TOAST</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">REMOVE_TOAST</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../constants\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">toasts</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> payload<span class=\"token punctuation\">,</span> type <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">ADD_TOAST</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">[</span>payload<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>state<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">REMOVE_TOAST</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">toast</span> <span class=\"token arrow operator\">=></span> toast<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">!==</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Xong việc xử lý trong Redux, giờ đến cái Component</p>\n<h1 id=\"components\"><a href=\"#components\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Components</h1>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">PropTypes</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"prop-types\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> bindActionCreators <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"redux\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react-redux\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Toast</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./Toast\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> removeToast <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../actions\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Toast</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> actions<span class=\"token punctuation\">,</span> toasts <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>removeToast<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>toasts<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>toasts<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">toast</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> toast<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toast</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">toast</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onDismissClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">removeToast</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token maybe-class-name\">Toasts</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">propTypes</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  actions<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PropTypes</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    removeToast<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PropTypes</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">func</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isRequired</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isRequired</span><span class=\"token punctuation\">,</span>\n  toasts<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PropTypes</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">PropTypes</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isRequired</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">dispatch</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  actions<span class=\"token operator\">:</span> <span class=\"token function\">bindActionCreators</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> removeToast <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  toasts<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">toasts</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Toasts</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Ở component <code class=\"language-text\">Toasts</code> này chúng ta render tất cả notification có trong <strong>store</strong>, đưa vào function xử lý nút close trên mỗi component.</p>\n<p>Đến Component <code class=\"language-text\">Toast</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/components/Toast.jsx</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">PropTypes</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"prop-types\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Toast</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> backgroundColor<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">color</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">text</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onDismissClick</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token maybe-class-name\">Toast</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">propTypes</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  color<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PropTypes</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">string</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isRequired</span><span class=\"token punctuation\">,</span>\n  onDismissClick<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PropTypes</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">func</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isRequired</span><span class=\"token punctuation\">,</span>\n  text<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PropTypes</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">string</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isRequired</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">Toast</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Ở đây chúng ta không muốn component này update gì cả, nên ở <code class=\"language-text\">shouldComponentUpdate</code> chúng ta <code class=\"language-text\">return false</code></p>\n<p><a href=\"https://www.natterly.com/blog/toast-notification-system-in-a-react-redux-application\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài gốc</a>;</p>\n","cover_image":""}},{"node":{"id":"cb3f4bb6b7e51df501700726716dff04","title":"Tại sao sử dụng Flow, và sử dụng Flow như thế nào trong React","path":"/tai-sao-su-dung-flow-va-su-dung-flow-nhu-the-nao-trong-react/","date":"2018-09-10","timeToRead":3,"desc":"Tại sao chúng ta cần type checking trong javascript, tại sao Flow lại là lựa chọn của nhiều developer hiện nay","content":"<p><em>Bài viết mang tính chất tham khảo, hiện tại đội ngũ Facebook đã bỏ rơi Flow để theo TypeScript <a href=\"https://github.com/facebook/jest/pull/7554\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/facebook/jest/pull/7554</a></em></p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#static-vs-dynamic-typing\">Static vs Dynamic Typing</a></li>\n<li><a href=\"#t%E1%BA%A1i-sao-ch%E1%BB%8Dn-flow\">Tại sao chọn Flow</a></li>\n<li><a href=\"#setup-flow-v%E1%BB%9Bi-react\">Setup Flow với React</a></li>\n<li><a href=\"#define-type-check-cho-prop-v%C3%A0-state-c%E1%BB%A7a-cho-react-component\">Define type check cho Prop và State của cho React Component</a></li>\n</ul>\n<!-- /TOC -->\n<h1 id=\"static-vs-dynamic-typing\"><a href=\"#static-vs-dynamic-typing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Static vs Dynamic Typing</h1>\n<p>Để bắt đầu chúng ta phải hiểu cách javascript làm việc với <code class=\"language-text\">type</code></p>\n<p>Một cách ngắn gọn nhất, ngôn ngữ <strong>statically-typed</strong> thì <code class=\"language-text\">type</code> của biến có thể xác định lúc <strong>compile</strong> (trước khi chạy), ngôn ngữ <strong>dynamically-typed</strong> thì chỉ biết được type của biến lúc <strong>run time</strong></p>\n<p>Như vậy với ngôn ngữ dạng <em>statically-typed</em>, lỗi sẽ được báo ngay khi build hoặc trên editor khi chúng ta sử dụng type không đúng. Nhưng với những ngôn ngữ kiểu dynamically-typed như Javascript nó sẽ khác chút. Xem xét đoạn code sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  prop1<span class=\"token operator\">:</span> <span class=\"token string\">'Some text here'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>myObject<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">prop1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code class=\"language-text\">prop1</code> được định nghĩ là một <strong>string</strong> nhưng chúng ta lại gọi <code class=\"language-text\">myObject.prop1()</code> như một <strong>function</strong>. Nếu chúng ta chạy đoạn code này chúng ta sẽ nhận được lỗi trên trình duyệt</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">TypeError: myObject.prop1 is not a <span class=\"token keyword\">function</span></code></pre>\n<p>Những trường hợp <strong>quên mất</strong> kiểu của biến như vậy rất dễ gặp trong lúc code. Việc sử dụng static type check sẽ giúp phát hiện lỗi sớm hơn, mà phát hiện lỗi sớm hơn thì sẽ tốt hơn, right?</p>\n<p>Trong javascript chúng ta cũng có thể thay đổi type của biến như vầy</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> myNumber <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> myNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\nmyNumber <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> myNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// boolean</span></code></pre>\n<p>Để ngăn chặn những người khác hoặc chỉnh bản thân làm những chuyện sằn bậy như vậy, chúng ta phải đặt ràng buộc về type cho những biến này</p>\n<h1 id=\"tại-sao-chọn-flow\"><a href=\"#t%E1%BA%A1i-sao-ch%E1%BB%8Dn-flow\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao chọn Flow</h1>\n<p>Để đặt ràng buộc type trong Javascript hay React chúng có những 3 tên tuổi nổi bật Typescript, PropTypes, Flow.</p>\n<p>Flow là thư viện của Facebook, hỗ trợ tốt nhất cho React, đứng trên góc độ của người làm sell, nếu nói chúng ta sử dụng Flow từ Facebook sẽ ngon hơn, Typescript là superset của javascript, việc dùng Typescript cũng thay đổi khá nhiều thứ khác trong project, mình cảm thấy nó tiêu tốn khá nhiều thời gian hơn trong lúc dev, <code class=\"language-text\">PropTypes</code> đã ko còn được quan tâm nhiều như trước nữa từ sau khi có Flow</p>\n<p>Còn theo như phát biểu từ những người tạo ra Flow (những developer trong Facebook)</p>\n<p>\"Chúng tôi built Flow vì thấy TypeScript đang đi theo hướng mà công đồng không mong đợi. Ví dụ, TypeScript cố tình không muốn đi theo hướng tập trung vào vấn đề type checking như một type system, không cung cấp việc generate ra document cho API với type đã định nghĩa. Nếu bạn muốn TypeScript làm cái gì, bạn cũng phải bảo nó hết, ko hoàn toàn tự động. Mặc dù từ TypeScript 2.0 họ bắt đầu để ý chuyện này, tuy nhiên còn phải rất lâu mới bắt kịp Flow nhé\"</p>\n<h1 id=\"setup-flow-với-react\"><a href=\"#setup-flow-v%E1%BB%9Bi-react\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Setup Flow với React</h1>\n<p>Theo hướng dẫn trên tài liệu chính thức <a href=\"https://flow.org/en/docs/react/\" target=\"_blank\" rel=\"noopener noreferrer\">https://flow.org/en/docs/react/</a></p>\n<p>Nếu khởi tạo project bằng create-react-App thì chỉ việc install Flow và tạo file <code class=\"language-text\">.flowconfig</code></p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">npm i flow<span class=\"token operator\">-</span>bin <span class=\"token operator\">--</span><span class=\"token function\">save-dev</span></code></pre>\n<p>Bên trong file <code class=\"language-text\">package.json</code>, add thêm đoạn script để chạy flow</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"flow\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"flow\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Để init file <code class=\"language-text\">.flowconfig</code></p>\n<pre class=\"language-powershell\"><code class=\"language-powershell\">npm run flow init</code></pre>\n<p>Sau khi chạy lệnh này xong chúng ta sẽ có file <code class=\"language-text\">.flowconfig</code> với nội dung sau</p>\n<pre class=\"language-text\"><code class=\"language-text\">[ignore]\n[include]\n[libs]\n[lints]\n[options]\n[strict]</code></pre>\n<p>Để thêm type check của từng component</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//@flow</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Component</span><span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Props</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>app<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu dùng cách viết thêm <code class=\"language-text\">//@flow</code> vào mỗi file như vậy hơi chuối, chúng ta thay đổi config một chút trong file <code class=\"language-text\">.flowconfig</code></p>\n<pre class=\"language-text\"><code class=\"language-text\">[ignore] // file nào ko check bỏ vào đây\n.*/node_modules/.* // bỏ qua file trong thư mục node_modules\n.*/src/registerServiceWWorker\\.js\n.*/src/index\\.js\n.*\\.test\\.js\n\n[options]\nall=true // check tất cả file, gồm cả node_modules</code></pre>\n<h1 id=\"define-type-check-cho-prop-và-state-của-cho-react-component\"><a href=\"#define-type-check-cho-prop-v%C3%A0-state-c%E1%BB%A7a-cho-react-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Define type check cho Prop và State của cho React Component</h1>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\ntype <span class=\"token maybe-class-name\">Props</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  strType<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n  numberType<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Props</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>strType<span class=\"token punctuation\">,</span> numberType<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>app<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">String </span><span class=\"token punctuation\">{</span>strType<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Number </span><span class=\"token punctuation\">{</span>numberType<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"/2018-09-13-huong-dan-su-dung-flow-voi-react-redux\">Đọc thêm: Sử dụng Flow để check type trong React Redux</a></p>\n<p><a href=\"https://www.lullabot.com/articles/flow-for-static-type-checking-javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nguồn tham khảo: Why I Chose to Use Flow for Static Type Checking My JavaScript</a></p>\n","cover_image":""}},{"node":{"id":"8a2282767758a497c6f466d12e5e61e4","title":"Con đường để trở thành React Native developer ( phiên bản 2018)","path":"/con-duong-de-tro-thanh-react-native-developer-phien-ban-2018/","date":"2018-08-13","timeToRead":1,"desc":"Tiếp theo bài trước mình sẽ dịch thêm một bài để các bạn bắt đầu học lập trình React Native","content":"<p>Nếu bạn đã thông thạo hết React, thì không có lý do vì bạn dưừng lại ở React JS mà không tiến lên React Native.</p>\n<h1 id=\"setup-môi-trường\"><a href=\"#setup-m%C3%B4i-tr%C6%B0%E1%BB%9Dng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Setup môi trường</h1>\n<p><a href=\"https://habiletechnologies.com/blog/getting-started-react-native-complete-setup-guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Native Environment setup (iOS and Android) </a></p>\n<h1 id=\"tuts-bắt-đầu-với-react-native\"><a href=\"#tuts-b%E1%BA%AFt-%C4%91%E1%BA%A7u-v%E1%BB%9Bi-react-native\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tuts Bắt đầu với React native</h1>\n<p><a href=\"https://www.raywenderlich.com/165140/react-native-tutorial-building-ios-android-apps-javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Native Tutorial: Building iOS and Android apps with Javascript</a></p>\n<p><a href=\"https://school.shoutem.com/lectures/build-react-native-mobile-app-tutorial/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Shoutem Tutorial on React Native: Build your first Mobile app</a></p>\n<p><a href=\"https://rationalappdev.com/react-native-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Native Cheat Sheet </a></p>\n<h1 id=\"navigation-trong-react-native-bằng-react-navigation\"><a href=\"#navigation-trong-react-native-b%E1%BA%B1ng-react-navigation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Navigation trong React Native bằng React Navigation</h1>\n<p><a href=\"https://hackernoon.com/getting-started-with-react-navigation-the-navigation-solution-for-react-native-ea3f4bd786a4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Getting started with React Navigation </a></p>\n<p><a href=\"https://www.reactnative.guide/10-navigation/10.1-using-react-navigation.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using React Navigation</a></p>\n<h1 id=\"debug\"><a href=\"#debug\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Debug</h1>\n<p>Đơn giản nhất để debug là dùng <a href=\"https://github.com/jhen0409/react-native-debugger\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React native debugger</a></p>\n<p>Đọc thêm cách sử dụng</p>\n<ul>\n<li><a href=\"https://medium.com/research-engineering-at-simply-technologies/react-native-debugging-like-a-god-9610ac2ffd12\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Debug your React Native application like a God </a></li>\n<li><a href=\"https://blog.reactnativecoach.com/debugging-react-native-and-redux-with-react-native-debugger-62f6ceef3033\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Debugging React and Redux with React Native Debugger</a></li>\n<li><a href=\"https://github.com/infinitered/reactotron\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tài liệu chính thức</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=tPBRfxswDjA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video nếu thấy đọc chưa hiểu lắm</a></li>\n</ul>\n<h1 id=\"xây-dựng-một-số-ứng-dụng-react-native-đơn-giản\"><a href=\"#x%C3%A2y-d%E1%BB%B1ng-m%E1%BB%99t-s%E1%BB%91-%E1%BB%A9ng-d%E1%BB%A5ng-react-native-%C4%91%C6%A1n-gi%E1%BA%A3n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xây dựng một số ứng dụng React Native đơn giản</h1>\n<p><a href=\"https://learn.handlebarlabs.com/p/react-native-basics-build-a-currency-converter\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Build a simple Currency convertor in React Native for iOS</a></p>\n<p><a href=\"https://code.tutsplus.com/tutorials/creating-a-dictionary-app-using-react-native-for-android--cms-24969\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Build a dictionary app in React Native for Android</a></p>\n<h1 id=\"cải-thiện-performance\"><a href=\"#c%E1%BA%A3i-thi%E1%BB%87n-performance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cải thiện performance</h1>\n<p>2 điều cần nhớ khi bắt đầu cải thiện performance với React Native</p>\n<ul>\n<li><strong>Bridge optimize</strong>: ở giữa javascript threat và native threat của ứng dụng React native sẽ có một cái <strong>Bridge</strong> ở giữa để chuyển đổi giữa 2 threat này. Phần lớn workload nặng nhất là ở đây, những animation chạy trên single threat của javascript sẽ rất tốn kém. Nếu muốn nghiên cứu sâu hơn về kiến trúc của React Native, ngâm cứu bài <a href=\"https://tadeuzagallo.com/blog/react-native-bridge/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://tadeuzagallo.com/blog/react-native-bridge/</a></li>\n<li><strong>Quản lý view phức tạp</strong> nếu app chỉ có một vài view thì chả có gì phải cải thiện. Nếu với nhiều view phức tạp, navigation lung tung, chuyện để ý tới performance là bất buộc.</li>\n</ul>\n<p>Một tài liệu để đọc</p>\n<p><a href=\"https://facebook.github.io/react-native/docs/performance.html#common-sources-of-performance-problems\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dive into React Native performance</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=9VqVv_sVgv0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">how to optimize the performance of your React Native app</a></p>\n<p><a href=\"https://www.simform.com/react-native-app-performance/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Native performance issues</a></p>\n<h1 id=\"test\"><a href=\"#test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Test</h1>\n<p><a href=\"https://pillow.codes/testing-in-react-native-jest-detox-d7b3b79a166a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Testing in React Native using Jest and Detox</a></p>\n<p><a href=\"https://chase-seibert.github.io/blog/2017/01/06/appium-react-native-quickstart.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Appium + React Native Quickstart</a></p>\n<p><a href=\"https://www.skcript.com/svr/testing-react-native-apps-with-appium-the-ultimate-guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Testing React Native Apps with Appium</a></p>\n<p><a href=\"https://alligator.io/react/roadmap-react-native-developer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài viết gốc tác giả Rakshit Sora</a></p>\n","cover_image":""}},{"node":{"id":"7301bc1e150ab11c88255f912d71934a","title":"Con đường để trở thành React developer ( phiên bản 2018)","path":"/con-duong-de-tro-thanh-react-developer-phien-ban-2018/","date":"2018-08-12","timeToRead":1,"desc":"Hướng dẫn, soi sáng cho các bạn muốn trở thành FrontEnd Developer. Nếu đã chọn FrontEnd làm nghiệp, React làm món ăn mỗi sáng, mà chưa biết cần học cái gì, hy vọng bài viết này sẽ có ích cho các bạn còn đang ko biết học cái gì","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#b%E1%BA%AFt-bu%E1%BB%99c-ph%E1%BA%A3i-h%E1%BB%8Dc\">Bắt buộc phải học</a></li>\n<li><a href=\"#k%E1%BB%B9-n%C4%83ng-development\">Kỹ năng Development</a></li>\n<li>\n<p><a href=\"#react-v%C3%A0-h%E1%BB%87-sinh-th%C3%A1i-nghe-k%C3%AAu-gh%C3%AA-ch%C6%B0a\">React và hệ sinh thái (nghe kêu ghê chưa)</a></p>\n<ul>\n<li><a href=\"#css\">CSS</a></li>\n<li><a href=\"#build-tools\">Build tools</a></li>\n<li><a href=\"#state-management\">State management</a></li>\n<li><a href=\"#type-checkers\">Type Checkers</a></li>\n<li><a href=\"#routing\">Routing</a></li>\n<li><a href=\"#api-clients\">API clients</a></li>\n<li><a href=\"#th%C6%B0-vi%E1%BB%87n-ti%E1%BB%87n-%C3%ADch\">Thư viện tiện ích</a></li>\n<li><a href=\"#testing\">Testing</a></li>\n<li><a href=\"#static-site-generator\">Static Site Generator</a></li>\n<li><a href=\"#i18n\">i18n</a></li>\n<li><a href=\"#server-side-rendering\">Server Side Rendering</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<p>Cái nào <strong>in đậm</strong> là bắt buộc, <em>để nghiêng</em> biết thì tốt, <del>gạch ngang</del> là ko cần học luôn</p>\n<h1 id=\"bắt-buộc-phải-học\"><a href=\"#b%E1%BA%AFt-bu%E1%BB%99c-ph%E1%BA%A3i-h%E1%BB%8Dc\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bắt buộc phải học</h1>\n<ul>\n<li><strong>HTML</strong>: căn bản html, cách viết semantic html, cách structure DOM, tập trung nhiều vào cách structure</li>\n<li><strong>CSS</strong>: học CSS căn bản, Flexbox, Responsive Web Design, Media Queries</li>\n<li>\n<p><strong>JS căn bản</strong>: Hoisting, Event Bubbling, Prototyping, AJAX (XHR), thao tác trên DOM, ECMA 6</p>\n<ul>\n<li><a href=\"http://www.learn-js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">learn-js.org</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla developer Network</a></li>\n<li><a href=\"https://channel9.msdn.com/Series/Javascript-Fundamentals-Development-for-Absolute-Beginners\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Microsoft’s Virtual Academy</a></li>\n</ul>\n</li>\n<li><del>jQuery</del>: có thể bỏ qua không cần học</li>\n</ul>\n<h1 id=\"kỹ-năng-development\"><a href=\"#k%E1%BB%B9-n%C4%83ng-development\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kỹ năng Development</h1>\n<ul>\n<li><strong>GIT, Github, Bitbucket, Gitlab</strong></li>\n<li><strong>HTTP/HTTPS</strong></li>\n<li><strong>Kỹ năng search google</strong></li>\n<li><strong>Dùng terminal</strong></li>\n<li><strong>Data structure và Algorithms</strong></li>\n<li><strong>Design pattern</strong></li>\n</ul>\n<h1 id=\"react-và-hệ-sinh-thái-nghe-kêu-ghê-chưa\"><a href=\"#react-v%C3%A0-h%E1%BB%87-sinh-th%C3%A1i-nghe-k%C3%AAu-gh%C3%AA-ch%C6%B0a\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>React và hệ sinh thái (nghe kêu ghê chưa)</h1>\n<h2 id=\"css\"><a href=\"#css\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CSS</h2>\n<ul>\n<li>\n<p>CSS Preprocessor</p>\n<ul>\n<li><strong>Sass/SCSS, PostCSS</strong></li>\n<li><del>less</del></li>\n<li><del>stylus</del></li>\n</ul>\n</li>\n<li>CSS Framworks: <strong>Bootstrap</strong>, <em>Semantic UI</em></li>\n<li>\n<p>CSS Architecture</p>\n<ul>\n<li><strong>BEM</strong></li>\n<li><em>CSS modules</em></li>\n</ul>\n</li>\n<li>\n<p><strong>CSS in JS</strong></p>\n<ul>\n<li><em>styled components</em></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"build-tools\"><a href=\"#build-tools\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Build tools</h2>\n<ul>\n<li>\n<p>package manager</p>\n<ul>\n<li><strong>npm</strong></li>\n<li><em>yarn</em></li>\n</ul>\n</li>\n<li><strong>webpack</strong></li>\n<li>task runner: chỉ cần nghiên cứu <strong>npm scripts</strong></li>\n</ul>\n<h2 id=\"state-management\"><a href=\"#state-management\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>State management</h2>\n<ul>\n<li><strong>Component state / context</strong></li>\n<li>\n<p><strong>Redux</strong></p>\n<ul>\n<li>async actions: <strong>redux thunk</strong>, <em>redux saga, redux observable</em></li>\n<li>helpers: <em>rematch, reselect</em></li>\n<li>\n<p>Form helpers</p>\n<ul>\n<li><em>redux form</em></li>\n<li><em>formik</em></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><em>Mobx</em></li>\n</ul>\n<h2 id=\"type-checkers\"><a href=\"#type-checkers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Type Checkers</h2>\n<p>Bắt buộc: <strong>PropTypes</strong>, biết thì tốt: <em>TypeScript</em>, <em>Flow</em></p>\n<h2 id=\"routing\"><a href=\"#routing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Routing</h2>\n<p>Chỉ có <strong>React-Router</strong> là bắt buộc</p>\n<h2 id=\"api-clients\"><a href=\"#api-clients\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>API clients</h2>\n<ul>\n<li>\n<p><strong>REST</strong></p>\n<ul>\n<li><strong>fetch</strong> (cái này của browser)</li>\n<li><em>axios</em></li>\n</ul>\n</li>\n<li>GraphQL (có thể trong tương lai sẽ phổ biến hơn, giờ chưa bắt buộc)</li>\n</ul>\n<h2 id=\"thư-viện-tiện-ích\"><a href=\"#th%C6%B0-vi%E1%BB%87n-ti%E1%BB%87n-%C3%ADch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thư viện tiện ích</h2>\n<ul>\n<li><strong>Lodash</strong></li>\n<li><strong>Moment</strong></li>\n<li><strong>Classnames</strong></li>\n<li><em>Numeral</em></li>\n<li><em>RxJS</em></li>\n</ul>\n<h2 id=\"testing\"><a href=\"#testing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Testing</h2>\n<ul>\n<li>\n<p>Unit testing</p>\n<ul>\n<li><strong>Jest</strong></li>\n<li><strong>Enzyme</strong></li>\n<li><strong>Sinon</strong></li>\n<li><em>Macha</em></li>\n<li><em>Chai</em></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"static-site-generator\"><a href=\"#static-site-generator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Static Site Generator</h2>\n<p>Hiện giờ chỉ có <em>Gatsby</em></p>\n<h2 id=\"i18n\"><a href=\"#i18n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>i18n</h2>\n<ul>\n<li><strong>React Intl</strong></li>\n<li><em>React i18next</em></li>\n</ul>\n<h2 id=\"server-side-rendering\"><a href=\"#server-side-rendering\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Server Side Rendering</h2>\n<ul>\n<li><em>Next.js</em></li>\n</ul>\n<p>Đấy chỉ có bấy nhiếu thôi, nếu đã xong hết thì làm tiếp luôn cái React Native và hệ sinh thái của nó nữa là ngon lành. :Đ</p>\n<p><a href=\"https://raw.githubusercontent.com/adam-golab/react-developer-roadmap/master/roadmap.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link file gốc của tác giả Adam Golab</a></p>\n","cover_image":""}},{"node":{"id":"03393afe0d7b5976e9c258595df81919","title":"Tạo một animation cho component trong React","path":"/tao-mot-animation-cho-component-trong-react/","date":"2018-07-20","timeToRead":4,"desc":"Sử dụng React, styled-components, react-flip-toolkit để tạo animation giống như mên trên trang chủ của Stripe","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#ph%C3%A2n-t%C3%ADch\">Phân tích</a></li>\n<li><a href=\"#d%E1%BB%B1ng-component-th%C3%B4-ch%C6%B0a-c%C3%B3-animate\">Dựng component thô chưa có animate</a></li>\n<li><a href=\"#animate-v%E1%BB%9Bi-flip-technique\">Animate với Flip technique</a></li>\n<li><a href=\"#ch%C4%83m-ch%C3%BAc\">Chăm chúc</a></li>\n<li><a href=\"#background-animation\">Background animation</a></li>\n</ul>\n<!-- /TOC -->\n<h1 id=\"phân-tích\"><a href=\"#ph%C3%A2n-t%C3%ADch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phân tích</h1>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"PaYXEZ\" data-default-tab=\"js,result\" data-user=\"aholachek\" data-embed-version=\"2\" data-pen-title=\"React Stripe Menu\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/aholachek/pen/PaYXEZ/\">React Stripe Menu</a> by Alex (<a href=\"https://codepen.io/aholachek\">@aholachek</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>Trước tiên phân tích cái animation này ra thành nhiều phần để dể hình dung. Có thể xem dạng slow motion trên Codepen để xem nhé.</p>\n<ul>\n<li>container dropdown màu trắng sẽ thay đổi kích thước và vị trí</li>\n<li>background màu xám ở phía dưới của dropdown transition độ cao</li>\n<li>Khi di chuyển chuột khỏi dropdown, fade out nội dung trước đó đi và chuyển vị trí nó sang element mới, sau đó đưa nội dung mới lên.</li>\n</ul>\n<p>Một vài lưu ý khi làm animation với React, cứ để browser quản lý layout. Thay vì sử dụng các dropdown khác nhau, chúng ta dùng 1 dropdown và thay đổi vị trí của nó, dùng <a href=\"https://css-tricks.com/animating-layouts-with-the-flip-technique/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flip technique</a> để giả lập như có 3 dropdown khác nhau.</p>\n<h1 id=\"dựng-component-thô-chưa-có-animate\"><a href=\"#d%E1%BB%B1ng-component-th%C3%B4-ch%C6%B0a-c%C3%B3-animate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dựng component thô chưa có animate</h1>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"OELrzN\" data-default-tab=\"js,result\" data-user=\"aholachek\" data-embed-version=\"2\" data-pen-title=\"React Stripe Menu Before Animation\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/aholachek/pen/OELrzN/\">React Stripe Menu Before Animation</a> by Alex (<a href=\"https://codepen.io/aholachek\">@aholachek</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>Để bắt đầu ta dựng một component <code class=\"language-text\">navbar</code> sử dụng <code class=\"language-text\">styled-component</code></p>\n<p>Ở đây thì chưa thêm phần gray background ở dưới dropdown, cái này nó sẽ nằm <code class=\"language-text\">absolute</code></p>\n<h1 id=\"animate-với-flip-technique\"><a href=\"#animate-v%E1%BB%9Bi-flip-technique\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Animate với Flip technique</h1>\n<p>Chúng ta sẽ sử dụng <a href=\"https://github.com/aholachek/react-flip-toolkit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-flip-toolkit</a> để thay đổi kích thước và vị trí dropdown.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Flipper</span></span> <span class=\"token attr-name\">flipKey</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>currentIndex<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Navbar</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>navbar<span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Config</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// render navbar items</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Navbar</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Flipper</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Ở <code class=\"language-text\">DropdownContainer</code> component, đưa các element sẽ animate vào bên trong <code class=\"language-text\">Flipped</code> component, nhớ giá trị <code class=\"language-text\">flipId</code> phải khác nhau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DropdownRoot</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Flipped</span></span> <span class=\"token attr-name\">flipId</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>dropdown-caret<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Caret</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Flipped</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Flipped</span></span> <span class=\"token attr-name\">flipId</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>dropdown<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DropdownBackground</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">DropdownBackground</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Flipped</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">DropdownRoot</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Làm 2 cái animate trên <code class=\"language-text\">&lt;Caret/&gt;</code> và <code class=\"language-text\">&lt;DropdownBackground/&gt;</code> riêng biệt, để thuộc tính <code class=\"language-text\">overflow: hidden</code> set trên <code class=\"language-text\">&lt;DropdownBackground /&gt;</code> không ảnh hưởng tới <code class=\"language-text\">&lt;Caret/&gt;</code></p>\n<p>Giờ có 1 vấn đề nhỏ là nội dung bên trong dropdown lúc xuất hiện bị stretch một cách kỳ cục, lý do là thuộc tính <code class=\"language-text\">transforms: scale</code> nó áp luôn trên children. Xử lý cái này bằng cách đưa nội dung này vào trong <code class=\"language-text\">&lt;Flipped/&gt;</code> kèm giá trị cho props <code class=\"language-text\">inverseFlipId</code>, lúc này children sẽ không bị effect từ thằng cha nữa, đồng thời xác định luôn là ko muốn áp thằng <code class=\"language-text\">scale</code></p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"MXgZxG\" data-default-tab=\"js,result\" data-user=\"aholachek\" data-embed-version=\"2\" data-pen-title=\"React Stripe Menu -- Error #1: no scale adjustment\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/aholachek/pen/MXgZxG/\">React Stripe Menu -- Error #1: no scale adjustment</a> by Alex (<a href=\"https://codepen.io/aholachek\">@aholachek</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DropdownRoot</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Flipped</span></span> <span class=\"token attr-name\">flipId</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dropdown-caret<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Caret</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Flipped</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Flipped</span></span> <span class=\"token attr-name\">flipId</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dropdown<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DropdownBackground</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Flipped</span></span> <span class=\"token attr-name\">inverseFlipId</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dropdown<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scale</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Flipped</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">DropdownBackground</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Flipped</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">DropdownRoot</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<h1 id=\"chăm-chúc\"><a href=\"#ch%C4%83m-ch%C3%BAc\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chăm chúc</h1>\n<p>Cũng gần được rồi, chúng ta cần để ý thêm vào những chi tiết nhỏ nhất để animate nhìn cool hơn</p>\n<p>Styled-components hỗ trợ rất tốt việc <a href=\"https://www.styled-components.com/docs/basics#animations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">thay đổi keyframe animation</a>. Chúng ta sẽ sử dụng tính năng này để làm animation lúc enter và cross-fade nội dung dropdown khi thay đổi ví trí chuột.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFadeContainerKeyFrame</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> animatingOut<span class=\"token punctuation\">,</span> direction <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>direction<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> keyframes<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token css language-css\">\n    <span class=\"token selector\">from</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n        animatingOut <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> direction <span class=\"token operator\">===</span> <span class=\"token string\">'left'</span> <span class=\"token operator\">?</span> <span class=\"token number\">20</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">20</span>\n      <span class=\"token interpolation-punctuation punctuation\">}</span></span>px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token selector\">to</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n        <span class=\"token operator\">!</span>animatingOut <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> direction <span class=\"token operator\">===</span> <span class=\"token string\">'left'</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">20</span> <span class=\"token operator\">:</span> <span class=\"token number\">20</span>\n      <span class=\"token interpolation-punctuation punctuation\">}</span></span>px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> <span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>animatingOut <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">FadeContainer</span> <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span><span class=\"token property-access\">div</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token css language-css\">\n  <span class=\"token property\">animation-name</span><span class=\"token punctuation\">:</span> <span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>getFadeContainerKeyFrame<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation-duration</span><span class=\"token punctuation\">:</span> <span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span> <span class=\"token arrow operator\">=></span> props<span class=\"token punctuation\">.</span><span class=\"token property-access\">duration</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token interpolation-punctuation punctuation\">}</span></span>ms<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation-fill-mode</span><span class=\"token punctuation\">:</span> forwards<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> <span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">animatingOut</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"absolute\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"relative\"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> <span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">direction</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">animatingOut</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation-timing-function</span><span class=\"token punctuation\">:</span> linear<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"NzPpwG\" data-default-tab=\"js,result\" data-user=\"aholachek\" data-embed-version=\"2\" data-pen-title=\"React Stripe Menu -- Simple FLIP\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/aholachek/pen/NzPpwG/\">React Stripe Menu -- Simple FLIP</a> by Alex (<a href=\"https://codepen.io/aholachek\">@aholachek</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>Khi user đưa chuột lên menu mới, chúng ta ko chỉ đưa vào dropdown hiện tại mà con dropdown trước đó như children cho <code class=\"language-text\">DropdownContainer</code>, cùng với những thông tin về hướng di chuột của user. Sau đó <code class=\"language-text\">DropdonwContainer</code> sẽ wrap hết tất cả children của nó trong một component mới, <code class=\"language-text\">FadeContents</code>, thằng này sẽ sử dụng keyframe animation code ở trên để thêm animation tương ứng</p>\n<h1 id=\"background-animation\"><a href=\"#background-animation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Background animation</h1>\n<p>Cuối cùng chúng ta thêm gray background</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateAltBackground</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  altBackground<span class=\"token punctuation\">,</span>\n  prevDropdown<span class=\"token punctuation\">,</span>\n  currentDropdown\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> prevHeight <span class=\"token operator\">=</span> <span class=\"token function\">getFirstDropdownSectionHeight</span><span class=\"token punctuation\">(</span>prevDropdown<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> currentHeight <span class=\"token operator\">=</span> <span class=\"token function\">getFirstDropdownSectionHeight</span><span class=\"token punctuation\">(</span>currentDropdown<span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// we'll use this function when we want a change </span>\n  <span class=\"token comment\">// to happen immediately, without CSS transitions</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">immediateSetTranslateY</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span> translateY</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    el<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">transform</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translateY(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>translateY<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span>\n    el<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">transition</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"transform 0s\"</span>\n    <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">transitionDuration</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>prevHeight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// transition the grey (\"alt\") background from its previous height</span>\n    <span class=\"token comment\">// to its current height</span>\n    <span class=\"token function\">immediateSetTranslateY</span><span class=\"token punctuation\">(</span>altBackground<span class=\"token punctuation\">,</span> prevHeight<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      altBackground<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">transform</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translateY(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currentHeight<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// immediately set the background to the appropriate height</span>\n    <span class=\"token comment\">// since we don't have a stored value</span>\n    <span class=\"token function\">immediateSetTranslateY</span><span class=\"token punctuation\">(</span>altBackground<span class=\"token punctuation\">,</span> currentHeight<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"qKRWBe\" data-default-tab=\"js,result\" data-user=\"aholachek\" data-embed-version=\"2\" data-pen-title=\"React Stripe Menu -- Animated Background\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/aholachek/pen/qKRWBe/\">React Stripe Menu -- Animated Background</a> by Alex (<a href=\"https://codepen.io/aholachek\">@aholachek</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>Source: <a href=\"https://github.com/aholachek/react-stripe-menu\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/aholachek/react-stripe-menu</a></p>\n<p><a href=\"https://css-tricks.com/building-a-complex-ui-animation-in-react-simply/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài gốc của tác giả</a></p>\n","cover_image":""}},{"node":{"id":"a00acdfb9e418ce7cee1220fa57e1213","title":"Giới thiệu RxJS và Redux Observer","path":"/gioi-thieu-rx-js-va-redux-observer/","date":"2018-07-18","timeToRead":3,"desc":"Một middleware mạnh hơn redux-thunk, ít phức tạp hơn redux-saga. Chúng ta sẽ điểm qua những khái niệm chính để bắt đầu với middleware này","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#nh%E1%BB%AFng-kh%C3%A1i-ni%E1%BB%87m-ch%C3%ADnh-c%E1%BA%A7n-hi%E1%BB%83u-khi-l%C3%A0m-vi%E1%BB%87c-v%E1%BB%9Bi-rxjs\">Những khái niệm chính cần hiểu khi làm việc với RxJS</a></li>\n<li>\n<p><a href=\"#kh%E1%BB%9Fi-t%E1%BA%A1o-observable\">Khởi tạo <code class=\"language-text\">Observable</code></a></p>\n<ul>\n<li><a href=\"#m%E1%BB%99t-ho%E1%BA%B7c-nhi%E1%BB%81u-gi%C3%A1-tr%E1%BB%8B\">một hoặc nhiều giá trị</a></li>\n<li><a href=\"#t%E1%BB%AB-m%E1%BB%99t-s%E1%BB%B1-ki%E1%BB%87n\">Từ một sự kiện</a></li>\n<li><a href=\"#t%E1%BB%AB-m%E1%BB%99t-promise\">Từ một promise</a></li>\n</ul>\n</li>\n<li><a href=\"#mergemap--alias-l%C3%A0-flatmap\">mergeMap ( alias là flatMap)</a></li>\n<li><a href=\"#redux-observable\">Redux-Observable</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"những-khái-niệm-chính-cần-hiểu-khi-làm-việc-với-rxjs\"><a href=\"#nh%E1%BB%AFng-kh%C3%A1i-ni%E1%BB%87m-ch%C3%ADnh-c%E1%BA%A7n-hi%E1%BB%83u-khi-l%C3%A0m-vi%E1%BB%87c-v%E1%BB%9Bi-rxjs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Những khái niệm chính cần hiểu khi làm việc với RxJS</h2>\n<ul>\n<li><strong>Observable</strong> một interface sẽ lắng nghe những notification trong <em>một khoản thời gian</em> và push cho những interface khác sẽ làm gì đó khi có notification này.</li>\n<li><strong>Subscription</strong> Khi <em>observable</em> bắt đầu được thực thi, ví dụ như lắng nghe sự kiện, và push</li>\n<li><strong>Observer</strong> một interface sẽ làm gì đó với data được push từ <em>observable</em></li>\n<li><strong>Operators</strong> các phương thức được sử dụng để tương tác với output của <em>Observable</em></li>\n</ul>\n<p>Ví dụ đăng ký listen lên một sự kiện nào đó</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbutton<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Clicked'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Trong RxJS chúng ta viết như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> button <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token maybe-class-name\">Rx</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Observable</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEvent</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Clicked!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"khởi-tạo-observable\"><a href=\"#kh%E1%BB%9Fi-t%E1%BA%A1o-observable\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khởi tạo <code class=\"language-text\">Observable</code></h2>\n<p>Chúng ta có thể tạo observable bằng cách convert từ</p>\n<h3 id=\"một-hoặc-nhiều-giá-trị\"><a href=\"#m%E1%BB%99t-ho%E1%BA%B7c-nhi%E1%BB%81u-gi%C3%A1-tr%E1%BB%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>một hoặc nhiều giá trị</h3>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token maybe-class-name\">Rx</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Observable</span></span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"từ-một-sự-kiện\"><a href=\"#t%E1%BB%AB-m%E1%BB%99t-s%E1%BB%B1-ki%E1%BB%87n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Từ một sự kiện</h3>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token maybe-class-name\">Rx</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Observable</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEvent</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"từ-một-promise\"><a href=\"#t%E1%BB%AB-m%E1%BB%99t-promise\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Từ một promise</h3>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token maybe-class-name\">Rx</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Observable</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromPromise</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chúng ta cũng có thể tạo observable sử dụng <code class=\"language-text\">Observable.create</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Rx</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Observable</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">observer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  observer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  observer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  observer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  observer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfoo<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Để ý là <code class=\"language-text\">observer</code> có phương thức <code class=\"language-text\">next</code> và <code class=\"language-text\">complete</code>.</p>\n<h2 id=\"mergemap--alias-là-flatmap\"><a href=\"#mergemap--alias-l%C3%A0-flatmap\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>mergeMap ( alias là flatMap)</h2>\n<p>Phương thức phổ biến nhất cho phép transform output của observable.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>text<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>input1<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>text<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>input2<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Combined value: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Nếu chúng ta muốn <code class=\"language-text\">subscribe</code> lên sự kiện user input giá trị vô <code class=\"language-text\">&lt;input/&gt;</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> input1 <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#input1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> input2 <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#input2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> span <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> obs1 <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Rx</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Observable</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEvent</span><span class=\"token punctuation\">(</span>input1<span class=\"token punctuation\">,</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span> <span class=\"token arrow operator\">=></span> span<span class=\"token punctuation\">.</span><span class=\"token property-access\">textContext</span> <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> obs2 <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Rx</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Observable</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEvent</span><span class=\"token punctuation\">(</span>input2<span class=\"token punctuation\">,</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span> <span class=\"token arrow operator\">=></span> span<span class=\"token punctuation\">.</span><span class=\"token property-access\">textContext</span> <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Giá trị span sẽ thay đổi khi ta nhập giá trị cho 1 trong 2 input, tuy nhiên nó sẽ override giá trị cũ. Nếu muốn có một kết quả combine từ cả 2 giá trị nhập vào từ input, ta <code class=\"language-text\">mergeMap</code> 2 observable lại.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obs1 <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Rx</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Observable</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEvent</span><span class=\"token punctuation\">(</span>input1<span class=\"token punctuation\">,</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obs2 <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Rx</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Observable</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEvent</span><span class=\"token punctuation\">(</span>input2<span class=\"token punctuation\">,</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobs1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">mergeMap</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">event1</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> obs2<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event2</span> <span class=\"token arrow operator\">=></span> event1<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> event2<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribe</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">combineValue</span> <span class=\"token arrow operator\">=></span> span<span class=\"token punctuation\">.</span><span class=\"token property-access\">textContext</span> <span class=\"token operator\">=</span> combineValue\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"redux-observable\"><a href=\"#redux-observable\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Redux-Observable</h2>\n<p>Redux-Observable cho phép chúng ta đưa các khái niệm của RxJS vào trong Redux. Nó sẽ tạo ra các Observable lắng nghe <code class=\"language-text\">action</code>, xào nấu trước khi <code class=\"language-text\">dispatch</code> một action khác đến <code class=\"language-text\">reducer</code>. Nó được gọi một cái tên chảnh chó là <strong>Epic</strong> (mình gọi nó là chảnh chó vì mình thấy nó méo có gì để được gọi là epic cả)</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> ajax <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'rxjs/observable/dom/ajax'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Action creators</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchUser</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">username</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'FETCH_USER'</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchUserFulfilled</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">payload</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'FETCH_USER_FULFILLED'</span><span class=\"token punctuation\">,</span> payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Epic</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchUserEpic</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">action$</span> <span class=\"token arrow operator\">=></span>\n  action$<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">ofType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FETCH_USER'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">mergeMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span>\n      ajax<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://api.github.com/users/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">payload</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">fetchUserFulfilled</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Dispatch FETCH_USER action</span>\n<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetchUser</span><span class=\"token punctuation\">(</span><span class=\"token string\">'torvalds'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Khi action type <code class=\"language-text\">FETCH_USER</code> được dispatch ra, <code class=\"language-text\">fetchUserEpic</code> lắng nghe tất cả sự kiện, nếu type là <code class=\"language-text\">FETCH_USER</code>, nó không đưa ngay xuống <code class=\"language-text\">reducer</code> của redux mà dừng lại và gọi ajax, sau khi có kết quả ajax, nó lại dispatch ra một sự kiện khác với type là <code class=\"language-text\">FETCH_USER_FULFILLED</code>, rồi trả về cho <code class=\"language-text\">reducer</code></p>\n<p><a href=\"https://medium.com/@johnvoon/understanding-rxjs-and-redux-observable-93d953d436c6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài gốc</a>\n<a href=\"http://www.hay16.com/videob59tcUwfpWU/mergemaprxjs-tutorial-watch.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video giải thích mergeMap</a></p>\n","cover_image":""}},{"node":{"id":"3cbd2588e65e7ca4b1ebac17d5d87485","title":"Một số ứng dụng của middleware","path":"/mot-so-ung-dung-cua-middleware/","date":"2018-06-21","timeToRead":5,"desc":"Tiếp theo bài trước về middleware, ứng dụng với các trường hợp thực tế","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#%C4%91%C3%B3ng-g%C3%B3i-c%C3%A1c-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-g%E1%BB%8Di-api\">Đóng gói các phương thức gọi API</a></li>\n<li><a href=\"#localstorage-v%C3%A0-cookies\">localStorage và Cookies</a></li>\n<li><a href=\"#theo-d%C3%B5i-file\">Theo dõi file</a></li>\n<li><a href=\"#tr%C3%ACnh-nghe-nh%E1%BA%A1c\">Trình nghe nhạc</a></li>\n</ul>\n<!-- /TOC -->\n<p>Tổng hợp lại để nhớ về middleware, nó là 1 function nhận vào</p>\n<p>storeInstance\n=> functionToCallWithAnActionThatWillSendItToTheNextMiddleware\n=> actionThatDispatchWasCalledWith\n=> valueToUseAsTheReturnValueOfTheDispatchCall</p>\n<p>Được viết với dạng syntax</p>\n<pre class=\"language-text\"><code class=\"language-text\">store =&gt; next =&gt; action =&gt; result</code></pre>\n<p>Sau đấy được sử dụng bằng cách truyền vào như một tham số cho hàm <code class=\"language-text\">applyMiddleware</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> middlewares <span class=\"token operator\">=</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>middleware1<span class=\"token punctuation\">,</span> middleware2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">,</span> initState<span class=\"token punctuation\">,</span> middlewares<span class=\"token punctuation\">)</span></code></pre>\n<p>Middleware đơn giản nhất là một function éo làm gì cả, nó chỉ forward cái action đến middleware kế tiếp</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"đóng-gói-các-phương-thức-gọi-api\"><a href=\"#%C4%91%C3%B3ng-g%C3%B3i-c%C3%A1c-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-g%E1%BB%8Di-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đóng gói các phương thức gọi API</h2>\n<p>Nếu API của chúng ta cần authentication token, thay vì trên mỗi action creatỏ chúng ta lấy token (có thể từ <code class=\"language-text\">store.getState</code> hoặc <code class=\"language-text\">sessionStorage</code>), rồi truyền tham số này vào trước khi gọi api, chúng ta dùng middleware để làm chuyện đó sẽ tốt hơn</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'FETCH'</span><span class=\"token punctuation\">,</span>\n    url<span class=\"token punctuation\">,</span>\n    params<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">fetchImplementation</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'FETCH'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">token</span><span class=\"token punctuation\">;</span>\n        _<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> <span class=\"token string\">'headers.token'</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">fetchImplementation</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetchMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">fetch</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// vi du goi action</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUser</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">id</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>dispatch<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://api.website.com/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Thằng middleware <code class=\"language-text\">fetchMiddleware</code> khi túm được <code class=\"language-text\">action.type</code> tên là <strong>FETCH</strong> nó sẽ thực hiện việc gởi một HTTP request và trả về 1 <code class=\"language-text\">promise</code></p>\n<p>Ở đây để làm cho ví dụ đơn giản chúng ta không implement cái <code class=\"language-text\">fetchImplementation</code> mà đang hard code thằng này sử dụng <code class=\"language-text\">window.fetch</code></p>\n<h2 id=\"localstorage-và-cookies\"><a href=\"#localstorage-v%C3%A0-cookies\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>localStorage và Cookies</h2>\n<p>Ứng dụng nào cũng sẽ cần lưu thông tin user, có thể là <em>authentication token</em> hoặc đường dẫn lần trước user truy cập. Chúng ta sẽ sử dụng middleware để lưu trạng thái này xuống <code class=\"language-text\">localStorage</code> hoặc <em>cookies</em>.</p>\n<p>Nếu chúng ta gọi <code class=\"language-text\">getState</code> trước khi gọi <code class=\"language-text\">next(action)</code>, chúng ta sẽ có <strong>before state</strong> trước khi action đến tay <code class=\"language-text\">reducer</code>, nếu chúng ta gọi nó sau <code class=\"language-text\">next(action)</code>, chúng ta có <strong>after state</strong> sau khi reducer xử lý. Dựa vào <strong>before state</strong> và <strong>after state</strong> này chúng ta có thể thay đổi đúng cái đã bị thay đổi</p>\n<p>Ví dụ lưu authentication token xuống <code class=\"language-text\">localStorage</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// lấy before state và after state</span>\n    <span class=\"token keyword\">const</span> previousToken <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">token</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> nextToken <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">token</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// thay đổi</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>nextToken <span class=\"token operator\">!==</span> previousToken<span class=\"token punctuation\">)</span> <span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">,</span> nextToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// lấy init state từ localStorage</span>\n<span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> <span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> initState <span class=\"token operator\">=</span> token\n    <span class=\"token operator\">?</span> _<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>defaultState<span class=\"token punctuation\">,</span> <span class=\"token string\">'token'</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> defaultState<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">,</span> middlewares<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"theo-dõi-file\"><a href=\"#theo-d%C3%B5i-file\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Theo dõi file</h2>\n<p>Ví dụ trong ứng dụng ta có state là <code class=\"language-text\">activeFiles</code>, là một mảng file bạn muốn theo dõi thay đổi. Khi file thay đổi, chúng ta muốn <code class=\"language-text\">dispatch</code> 1 action</p>\n<p>Sử dụng tương tự như trên</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fileWatcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fileWatcher<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file-changed'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">filename</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'FILE_CHANGED'</span><span class=\"token punctuation\">,</span> filename <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Make sure we're watching files that may be included in the store's initial state</span>\n    <span class=\"token keyword\">const</span> initialFiles <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">activeFiles</span><span class=\"token punctuation\">;</span>\n    fileWatcher<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">watchFiles</span><span class=\"token punctuation\">(</span>initialFiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Get the state before and after the action was performed</span>\n        <span class=\"token keyword\">const</span> previousFiles <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">activeFiles</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> nextFiles <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">activeFiles</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// See what changed before and after</span>\n        <span class=\"token keyword\">const</span> filesToUnwatch <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">difference</span><span class=\"token punctuation\">(</span>previousFiles<span class=\"token punctuation\">,</span> nextFiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> filesToWatch <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">difference</span><span class=\"token punctuation\">(</span>nextFiles<span class=\"token punctuation\">,</span> previousFiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Respond to changes</span>\n        fileWatcher<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unwatchFiles</span><span class=\"token punctuation\">(</span>filesToUnwatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        fileWatcher<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">watchFiles</span><span class=\"token punctuation\">(</span>filesToWatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Ở đây thì nó không phụ thuộc action: vô tư tạo vô số action nếu muốn thay đổi giá trị active files, chúng ta không cần thay đổi logic trong middleware.</p>\n<p>Về mặt kỹ thuật, ví vụ trên có thể viết lại bằng cách sử dụng <code class=\"language-text\">store.subscribe</code>. Tuy nhiên tiếp cận vấn đề liên quan tới side-effect của middleware phụ thuộc vào action bằng middleware là tốt nhất</p>\n<h2 id=\"trình-nghe-nhạc\"><a href=\"#tr%C3%ACnh-nghe-nh%E1%BA%A1c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Trình nghe nhạc</h2>\n<p>Rất giống như ví vụ trên. Khác biệt quan trọng là: sự thay đổi của <code class=\"language-text\">state</code> có thể xảy ra từ middleware hoặc từ những nguồn khác.</p>\n<p>Giờ chúng ta có <code class=\"language-text\">state</code> là <code class=\"language-text\">isPlaying</code> và <code class=\"language-text\">currentTime</code>. Chúng ta sẽ giữ đúng khái niệm \"single source of truth\" của redux, middleware sẽ đảm nhiệm việc giữ giá rị state này. Nếu action thay đổi <code class=\"language-text\">isPlaying</code> từ <code class=\"language-text\">false</code> sang <code class=\"language-text\">true</code>, thì ta play nhạc, nếu action thay đổi <code class=\"language-text\">currentTime</code> chúng ta sẽ phát đến đúng thời gian đó.</p>\n<p>Để cho chính xác, trong middleware chúng ta adjust một chút để khi <code class=\"language-text\">isPlaying</code> chuyển sang <code class=\"language-text\">false</code>, chúng ta thay đổi luôn <code class=\"language-text\">currentTime</code>. Cái ngày cực kỳ quan trọng vì chúng ta không muốn cứ mỗi khi <code class=\"language-text\">currentTime</code> mà thay đổi thì chúng ta lại phát đúng đến thời điểm đó. Thêm parameter <code class=\"language-text\">origin</code> trong action để làm đối số kiểm tra</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">musicPlayer</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> playbackOrigin <span class=\"token operator\">=</span> <span class=\"token string\">'playbackOrigin'</span><span class=\"token punctuation\">;</span>\n\n    musicPlayer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'current-time-changed'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">currentTime</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'SET_CURRENT_TIME'</span><span class=\"token punctuation\">,</span> origin<span class=\"token operator\">:</span> playbackOrigin<span class=\"token punctuation\">,</span> currentTime <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    musicPlayer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'playback-finished'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'STOP_PLAYING'</span><span class=\"token punctuation\">,</span> origin<span class=\"token operator\">:</span> playbackOrigin <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> initState <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>initState<span class=\"token punctuation\">.</span><span class=\"token property-access\">isPlaying</span><span class=\"token punctuation\">)</span> musicPlayer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    musicPlayer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">seek</span><span class=\"token punctuation\">(</span>initState<span class=\"token punctuation\">.</span><span class=\"token property-access\">currentTime</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isPlaying<span class=\"token operator\">:</span> wasPlaying<span class=\"token punctuation\">,</span> currentTime<span class=\"token operator\">:</span> previousTime <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isPlaying<span class=\"token operator\">:</span> isPlaying<span class=\"token punctuation\">,</span> currentTime<span class=\"token operator\">:</span> nextTime <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// không dispatch action với các action từ player</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">origin</span> <span class=\"token operator\">===</span> playbackOrigin<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>wasPlaying <span class=\"token operator\">&amp;&amp;</span> isPlaying<span class=\"token punctuation\">)</span> musicPlayer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>wasPlaying <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>isPlaying<span class=\"token punctuation\">)</span> musicPlayer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>previousTime <span class=\"token operator\">!==</span> nextTime<span class=\"token punctuation\">)</span> musicPlayer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">seek</span><span class=\"token punctuation\">(</span>nextTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Miễn là làm đúng cái middleware này, chúng ta sẽ không bao giờ dính mấy con bug kiểu như nút Play thì đang cho thấy ở trạng thái Pause trong khi đang phát rầm rầm.</p>\n<p><a href=\"https://medium.com/@jacobp100/you-arent-using-redux-middleware-enough-94ffe991e6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài gốc của tác giả Jacob Parker</a></p>\n","cover_image":""}},{"node":{"id":"02a5a60cd7a087f460f4ccfd777912ea","title":"Sử dụng Middleware với Redux dành cho người mới bắt đầu","path":"/su-dung-middleware-voi-redux-danh-cho-nguoi-moi-bat-dau/","date":"2018-06-18","timeToRead":4,"desc":"Nếu đã nắm rõ redux, bước tiếp theo phải tìm hiểu là middleware","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#middleware-l%C3%A0-g%C3%AC\">Middleware là gì</a></li>\n<li><a href=\"#t%E1%BA%A1i-sao-v%C3%A0-t%E1%BA%A1i-sao\">Tại sao và tại sao</a></li>\n<li>\n<p><a href=\"#m%E1%BB%99t-s%E1%BB%91-%E1%BB%A9ng-d%E1%BB%A5ng-c%E1%BB%A7a-middleware\">Một số ứng dụng của Middleware</a></p>\n<ul>\n<li><a href=\"#loging\">Loging</a></li>\n<li><a href=\"#%C4%91%E1%BB%A3i-user-confirm\">Đợi user confirm</a></li>\n</ul>\n</li>\n<li><a href=\"#m%E1%BB%99t-s%E1%BB%91-l%E1%BB%B1a-ch%E1%BB%8Dn\">Một số lựa chọn</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"middleware-là-gì\"><a href=\"#middleware-l%C3%A0-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Middleware là gì</h2>\n<p>Nghe tên thì hơi phức tạp nhưng thực sự nó đơn giản lắm, nó là một hàm sẽ modify và được gọi trước khi action được dispatch.</p>\n<p>Mô phỏng quá trình hoạt động không có middleware</p>\n<p><img src=\"https://viblo.asia/uploads/5c72ff3e-859a-457a-ae11-e1392baa90af.gif\"></p>\n<p>và khi áp dụng middleware</p>\n<p><img src=\"https://viblo.asia/uploads/8ff8bd43-308a-47da-b382-891adae237d2.gif\"></p>\n<h2 id=\"tại-sao-và-tại-sao\"><a href=\"#t%E1%BA%A1i-sao-v%C3%A0-t%E1%BA%A1i-sao\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao và tại sao</h2>\n<p>Trong thế giới của Rect, Redux là lựa chọn được ưa chuộng để có một container chứa chỉ chứa state. Ý tưởng chính của redux là tất cả những logic của app thì đưa vào <strong>reducers</strong>, là những function nhận vào 1 <code class=\"language-text\">state</code>, 1 <code class=\"language-text\">action</code> và trả về <code class=\"language-text\">state</code> mới. <strong>Reducers</strong> buộc phải là <em>pure function</em> không phụ thuộc và chỉnh sửa global state, để mà dễ test, dể refactor, performance tốt hơn.</p>\n<p>Thí dụ 1 redux store lưu giá trị counter</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">redux</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'INCREMENT'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword control-flow\">return</span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> redux<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createStore</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu để ý chúng ta có thể thấy redux có 2 ràng buộc</p>\n<ol>\n<li><strong>Reducers</strong> PHẢI là hàm sync, trả về <code class=\"language-text\">state</code> mới</li>\n<li>Do không được thay đổi global state, reducers không được sử dụng những hàm như <code class=\"language-text\">setInterval()</code></li>\n</ol>\n<p>Thí dụ chúng ta làm một cái app để bấm thời gian, sau khi user bấm stop hiển thị giá trị thời gian đã chạy và sau đó lưu lại trên server bằng HTTP request. Chuyện gì sẽ xảy ra khi ta đang muốn quăng một hàm chạy async?</p>\n<p>Reducer của chúng ta cần listen 3 actions:</p>\n<ol>\n<li><code class=\"language-text\">START_TIMER</code>, khi bắt đầu tính thời gian</li>\n<li><code class=\"language-text\">STICK</code>, khi ta thay đổi giá trị hiện tại</li>\n<li><code class=\"language-text\">STOP_TIMER</code> khi chúng ta không nhận được action <code class=\"language-text\">TICK</code> nào nữa</li>\n</ol>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">stopWatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">switch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'START_TIMMER'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>startTime<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">currentTime</span><span class=\"token punctuation\">,</span> elapsed<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'TICK'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>elapsed<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">currentTime</span> <span class=\"token operator\">-</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">startTime</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'STOP_TIMER'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> redux<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createStore</span><span class=\"token punctuation\">(</span>stopWatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Khi user click button start, chúng ta dispatch event <code class=\"language-text\">START_TIMER</code>, khi user click stop, ta dispatch <code class=\"language-text\">STOP_TIMMER</code></p>\n<p>Vấn đề là làm sao dispatch <code class=\"language-text\">TICK</code>, nếu chúng ta gọi <code class=\"language-text\">setInterval()</code> trong <code class=\"language-text\">START_TIMER</code> thì lúc đó chúng ta đã thay đổi global state và vi phạm best practices của redux. Chổ thích hợp nhất để dispatch <code class=\"language-text\">TICK</code> là ở middleware</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">timerMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'START_TIMER'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        action<span class=\"token punctuation\">.</span><span class=\"token property-access\">interval</span> <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'TICK'</span><span class=\"token punctuation\">,</span> currentTime<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Date</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'STOP_TIMER'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">interval</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">stopWatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'START_TIMER'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        startTime<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">currentTime</span><span class=\"token punctuation\">,</span>\n        elapsed<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        interval<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">interval</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'TICK'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> elapsed<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">currentTime</span> <span class=\"token operator\">-</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">startTime</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'STOP_TIMER'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> interval<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> redux<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">applyMiddleware</span><span class=\"token punctuation\">(</span>timerMiddleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> redux<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createStore</span><span class=\"token punctuation\">(</span>stopWatch<span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Syntax của redux middleware là điều cần phải bàn tới: 1 middleware function là 1 function return 1 function return 1 function. Nhất đầu ghê chưa. Thật ra đang dùng currying function trong javascript (<a href=\"https://luubinhan.github.io/blog/2018-03-02-gioi-thieu-higher-order-component-trong-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">đọc cà-ri function ở đây</a>). Function đầu tiên nhận vào <code class=\"language-text\">store</code> làm parameter, function thứ 2 sẽ nhận function <code class=\"language-text\">next</code> làm parameter, và function thứ 3 nhận dispatch <code class=\"language-text\">action</code> làm parameter. <code class=\"language-text\">store</code> và <code class=\"language-text\">action</code> là giá trị store và dispatch action hiện tại. Chiếc đũa thuần kỳ ở đây chính là function <code class=\"language-text\">next</code>, bạn có thể gọi nó là \"sau khi middleware chạy xong, truyền cái cái action này cho middleware kế tiếp\". Nói cách khác, middleware có thể là hàm async.</p>\n<p>Tiếp theo chúng ta sẽ lưu giá trị sau khi user click stop lên server.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">promiseMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// kiểm tra payload nếu là promise thì đợi nó resolve</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">payload</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">payload</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">then</span> <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        action<span class=\"token punctuation\">.</span><span class=\"token property-access\">payload</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>\n            <span class=\"token parameter\">res</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">payload</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">error</span> <span class=\"token operator\">=</span> err<span class=\"token punctuation\">;</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> redux<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">applyMiddleware</span><span class=\"token punctuation\">(</span>timerMiddleware<span class=\"token punctuation\">,</span> promiseMiddleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> redux<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createStore</span><span class=\"token punctuation\">(</span>stopWatch<span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Khi gởi lên một HTTP request, chúng ta sẽ gởi request này ở dạng <code class=\"language-text\">promise</code>, <code class=\"language-text\">promiseMiddelware</code> sẽ đứng đợi promise này có giá trị trả về thì mới gọi <code class=\"language-text\">next(action)</code></p>\n<p>Ta sẽ gởi lên server bằng <code class=\"language-text\">axios</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">axios</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n\nstore<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'SAVE_TIME'</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> axios<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/save'</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Reducer listen <code class=\"language-text\">SAVE_TIME</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">stopwatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'START_TIMER'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        startTime<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">currentTime</span><span class=\"token punctuation\">,</span>\n        elapsed<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        interval<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">interval</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'TICK'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> elapsed<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">currentTime</span> <span class=\"token operator\">-</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">startTime</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'STOP_TIMER'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> interval<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'SAVE_TIME'</span><span class=\"token operator\">:</span>\n      <span class=\"token comment\">// If there was an error, set the error property on the state</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">error</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// Otherwise, clear all the timer state</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> startTime<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> elapsed<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> error<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"một-số-ứng-dụng-của-middleware\"><a href=\"#m%E1%BB%99t-s%E1%BB%91-%E1%BB%A9ng-d%E1%BB%A5ng-c%E1%BB%A7a-middleware\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một số ứng dụng của Middleware</h2>\n<h3 id=\"loging\"><a href=\"#loging\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Loging</h3>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loggerMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"đợi-user-confirm\"><a href=\"#%C4%91%E1%BB%A3i-user-confirm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đợi user confirm</h3>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">confirmationMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">store</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">shouldConfirm</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Are you sure?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"một-số-lựa-chọn\"><a href=\"#m%E1%BB%99t-s%E1%BB%91-l%E1%BB%B1a-ch%E1%BB%8Dn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một số lựa chọn</h2>\n<p>Một số thư viện để làm việc với middleware cho Redux rất phổ biến có thể tham khảo là <code class=\"language-text\">redux-thunk</code>, <code class=\"language-text\">redux-saga</code>, <code class=\"language-text\">redux-observable</code></p>\n<p><a href=\"https://www.codementor.io/vkarpov/beginner-s-guide-to-redux-middleware-du107uyud\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài gốc của tác giả Vkarpov</a></p>\n<p>Tham khảo thêm:</p>\n<ul>\n<li><a href=\"https://github.com/gothinkster/react-redux-realworld-example-app/blob/master/src/middleware.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Realworld example sử dụng redux, middleware</a></li>\n<li><a href=\"https://medium.com/@meagle/understanding-87566abcfb7a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tìm hiểu Middleware của tác giả Mark</a></li>\n<li><a href=\"https://redux.js.org/api-reference/applymiddleware\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">applyMiddleware</a></li>\n</ul>\n","cover_image":""}},{"node":{"id":"0a408624be828657679088cbca8986c7","title":"Tiếp tục luận bàn về cách tổ chức thư mục, đặt tên component trong React","path":"/tiep-tuc-luan-ban-ve-cach-to-chuc-thu-muc-dat-ten-component-trong-react/","date":"2018-06-18","timeToRead":5,"desc":"Hổm đã viết về vấn đề này rồi, giờ lại viết tiếp, vì bản thân React cũng không ra bất cứ rule nào về việc này, bạn tự do tổ chức sao mà mình thấy hợp lý, bài trước là của tác giả đó thấy vậy là hay, bài này thì tác giả thích tổ chức thế này","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#t%E1%BB%95-ch%E1%BB%A9c-th%C6%B0-m%E1%BB%A5c\">Tổ chức thư mục</a></li>\n<li><a href=\"#containers-v%C3%A0-components\">Containers và Components</a></li>\n<li><a href=\"#t%C3%A1c-v%C3%A0-nh%C3%B3m-code-l%E1%BA%A1i-v%E1%BB%9Bi-nhau\">Tác và nhóm code lại với nhau</a></li>\n<li><a href=\"#ui-components\">UI Components</a></li>\n<li><a href=\"#%C4%91%E1%BA%B7t-t%C3%AAn-components\">Đặt tên components</a></li>\n<li><a href=\"#screens\">Screens</a></li>\n<li><a href=\"#k%E1%BA%BFt-lu%E1%BA%ADn\">Kết luận</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"tổ-chức-thư-mục\"><a href=\"#t%E1%BB%95-ch%E1%BB%A9c-th%C6%B0-m%E1%BB%A5c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tổ chức thư mục</h2>\n<p>Nếu init project bằng <strong>create-react-app</strong>, chúng ta sẽ có sẵn những thư mục và file cơ bản nhất: <em>.gitinore</em>, <em>package.json</em>, <em>README.md</em>, <em>yarn.lock</em>, thư mục <strong>public</strong> và <strong>src</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*eXN1LlNnuZmosJ7n7EsJ-Q.png\"></p>\n<p>Chúng ta sẽ chỉ tập trung vào thư mục <strong>src</strong> và khoog quan tâm tới những file và thư mục ở khác.</p>\n<h2 id=\"containers-và-components\"><a href=\"#containers-v%C3%A0-components\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Containers và Components</h2>\n<p>Bên trong thư mục <strong>src</strong> chúng ta sẽ tạo thêm 2 thư mục là <strong>components</strong> và <strong>containers</strong></p>\n<pre class=\"language-text\"><code class=\"language-text\">src\n├─ components // chứa components làm nhiệm vụ render \n└─ containers // các component xử lý logic</code></pre>\n<p>Nếu là theo cách này có một vài chổ không hợp lý</p>\n<ul>\n<li>Rất là khó để phân biệt và tách biệt 100% giữa container và presentational component, chắc chắn trong team sẽ có người là lên \"em thấy cái này là container chứ sao lại là presentational được\", kiểu như vậy.</li>\n<li>Cho phép 2 component có cùng tên với nhau, trong toàn bộ project mỗi component chỉ nên là duy nhất, tránh confuse trách nhiệm của mỗi bên.</li>\n<li>Tốn công, việc tách container ở một thư mục, presentationial ở thư mục khác, rất là phiền nếu muốn bay qua bay lại giữa 2 thư mục.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">src\n└─ User\n  ├─ components\n  └─ containers</code></pre>\n<p>Cách này thì sao? Có thể giải quyết được vấn đề bay qua bay lại ở trên, nhưng nếu có 100 cái components chung ta tiếp tục ngụp lặn trong cả trăm thư mục components containers ở khắp mọi nơi.</p>\n<p>Theo tác giả chúng ta nên dẹp luôn khái niệm container và presentational luôn, tất cả chúng ta cần là 2 thư mục <strong>components</strong> và <strong>screens</strong></p>\n<h2 id=\"tác-và-nhóm-code-lại-với-nhau\"><a href=\"#t%C3%A1c-v%C3%A0-nh%C3%B3m-code-l%E1%BA%A1i-v%E1%BB%9Bi-nhau\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tác và nhóm code lại với nhau</h2>\n<p>Bên trong thư mục <em>components</em> chúng ta group files theo module/tính năng.</p>\n<pre class=\"language-text\"><code class=\"language-text\">src\n└─ components\n  └─ User\n    ├─ Form.jsx\n    └─ List.jsx</code></pre>\n<p>Khi component là kết hợp của nhiều component lại ta gom các file components vào 1 thư mục. Thí dụ nếu có thêm file <code class=\"language-text\">Form.css</code> ta sẽ làm như sau</p>\n<pre class=\"language-text\"><code class=\"language-text\">src\n└─ components\n  └─ User\n    ├─ Form\n    │ ├─ Form.jsx\n    │ └─ Form.css\n    └─ List.jsx</code></pre>\n<h2 id=\"ui-components\"><a href=\"#ui-components\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>UI Components</h2>\n<p>Bên trong thư mục <strong>components</strong> ta có thể có thêm thư mục <strong>UI</strong>, trong đây sẽ chứa các component dạng generic. Thế nào là component generic? là những component dạng giống như những React UI Components của Sematic UI, Office Fabric UI, Reactrap.</p>\n<pre class=\"language-text\"><code class=\"language-text\">src\n└─ components\n  └─ UI</code></pre>\n<h2 id=\"đặt-tên-components\"><a href=\"#%C4%91%E1%BA%B7t-t%C3%AAn-components\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đặt tên components</h2>\n<p>Chúng ta đã bàn về cách sắp xếp thư mục và chia các component ra dạng module. Giờ còn câu hỏi là đặt tên nó sao?</p>\n<p>Như đã nói ở trên tên của mỗi component nên là duy nhất và gợi hình, đọc xong có thể hình dung được component đó dùng để làm gì. Việc này cũng rất có lợi trong lúc debug bằng React Dev Tools.</p>\n<p>Pattern để đặt tên component <strong>đường dẫn-tên file</strong>. Thí dụ component ở file <code class=\"language-text\">components/User/List.jsx</code> thì đặt là <code class=\"language-text\">UserList</code></p>\n<p>Nếu <code class=\"language-text\">components/User/Form/Form.jsx</code> thì không cần đặt là <code class=\"language-text\">UserFormForm</code>, chỉ cần gọi nó là <code class=\"language-text\">UserForm</code> trong trường hợp tên file cùng tên với thư mục chứa nó.</p>\n<p>Lợi ích của việc đặt tên như vậy là giúp chúng ta navigate đến file đó rất nhanh, đa phần các editor 'xịn' đều có thể dùng fuzzy search</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*vZO9Ci9a_lrfi2yTP9OiMA.png\"></p>\n<p>Tránh lặp lại tên, ngày xưa khi mới bắt đầu chúng ta thường đặt tên file rất là đầy đủ chuẩn không cần chỉnh, tuy nhiên việc này làm cho lúc <code class=\"language-text\">import</code> rất dài dòng, đường dẫn dài cả cây số. Trong trường hợp ở trên do <code class=\"language-text\">Form</code> đang nằm trong <code class=\"language-text\">User</code> thì ta biết ngay là <code class=\"language-text\">FormUser</code> rồi, không nên đặt tên file là <code class=\"language-text\">FormUser</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ScreenUserForm</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./screens/User/UserForm'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// đấu với</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ScreenUserForm</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./screens/User/Form'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu ví dụ trên chưa đủ thuyết phục, hãy xem tiếp thêm một ví dụ khách</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">MediaPlanViewChannel</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'/MediaPlan/MediaPlanView/MediaPlanViewChannel.jsx'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">MediaPlanViewChannel</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./MediaPlan/View/Channel'</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"screens\"><a href=\"#screens\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Screens</h2>\n<p>Nãy có nói thư mục <strong>screen</strong> mà chưa giải thích, screens sẽ nơi chứa là những components được map vào cho <code class=\"language-text\">route</code>, như screen để tạo user mới, reset password, đăng nhập. Screen không nên chứa logic gì cả, 1 functional component, chúng ta sẽ đưa screen vào một thư mục hẳn hoi để dễ mapping đúng với structure của <code class=\"language-text\">route</code> chứ chúng ta không theo module</p>\n<pre class=\"language-text\"><code class=\"language-text\">src\n├─ components \n└─ screens\n  └─ User\n    ├─ Form.jsx\n    └─ List.jsx</code></pre>\n<p>Chúng ta có file <code class=\"language-text\">Route.jsx</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Router</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-router'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Redirect</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Route</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Switch</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ScreensUserForm</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./User/Form'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ScreensUserList</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./User/List'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">ScreensRoot</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/user/list<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">ScreensUserList</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/user/create<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">ScreensUserForm</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/user/:id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">ScreensUserForm</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">ScreensRoot</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Bằng cách này chỉ cần nhìn url ta có thể trace được đang dùng component ở thư mục nào</p>\n<p>Về tên gọi của component trong thư mục screen này,\nnếu <code class=\"language-text\">scr/screens/User/List.jsx</code> thì đặt tên là <code class=\"language-text\">ScreensUserList</code>;</p>\n<p>Nếu bạn để ý thì sẽ thấy 2 route <code class=\"language-text\">create</code> và <code class=\"language-text\">edit</code> đang cùng được render cùng 1 component <code class=\"language-text\">ScreensUserForm</code>, cái này implement cũng dể thôi</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">UserForm</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../../components/User/Form/Form'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">ScreensUserForm</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> match<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token operator\">!</span>params<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">?</span> <span class=\"token string\">'Create'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Update'</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> User\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserForm</span></span> <span class=\"token attr-name\">id</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>params<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">ScreensUserForm</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Thư mục cuối cùng có như sau</p>\n<pre class=\"language-text\"><code class=\"language-text\">src\n├─ components \n│  ├─ User\n│  │ ├─ Form\n│  │ │ ├─ Form.jsx\n│  │ │ └─ Form.css\n│  │ └─ List.jsx\n│  └─ UI \n│\n└─ screens\n  ├─ User\n  │ ├─ Form.jsx\n  │ └─ List.jsx\n  └─ Root.jsx</code></pre>\n<h2 id=\"kết-luận\"><a href=\"#k%E1%BA%BFt-lu%E1%BA%ADn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết luận</h2>\n<p>Trong bài này tác giả sẽ chỉ đề tập trung vào project sử dụng React, chưa đề cặp tới Redux, bài sau có.</p>\n<p>Nếu thích thì có thể cảm ơn và follow tác giả để có thêm nhiều bài viết hay ho khác.</p>\n<p><a href=\"https://hackernoon.com/structuring-projects-and-naming-components-in-react-1261b6e18d76\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài gốc của Vinicius Dacal</a></p>\n","cover_image":""}},{"node":{"id":"67122717b0acf53933fa6e376df98e0c","title":"Làm việc với CSS Modules trong React","path":"/lam-viec-voi-css-modules-trong-react/","date":"2018-06-15","timeToRead":2,"desc":"Sau rất nhiều năm kiếm cơm với CSS, và hiện tại vẫn thế, CSS vẫn luôn là niềm hứng thú của cá nhân mình. Ngày nảy ngày nay để làm việc với Component của React, chúng ta sẽ có nhiều lựa chọn hơn khi 'CSS trong JS' đang là lựa chọn hàng đầu. Trong thời đại của component phủ sóng khắp các mặt trận, CSS Modules hứa hiện là món ngon","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#css-modules-l%C3%A0-g%C3%AC\">CSS modules là gì</a></li>\n<li><a href=\"#x%C3%B3a-style-%C4%91%E1%BA%A7y-t%E1%BB%B1-tin\">Xóa style đầy tự tin</a></li>\n<li><a href=\"#m%E1%BB%99t-v%C3%A0i-l%E1%BB%B1a-ch%E1%BB%8Dn-n%C3%A2ng-cao\">Một vài lựa chọn nâng cao</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"css-modules-là-gì\"><a href=\"#css-modules-l%C3%A0-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CSS modules là gì</h2>\n<p>Dựa vào cái tên chắc phần nào cũng đoán được, nó là kiểu viết module hóa stylesheet thành từng file nhỏ, không còn sử dụng một file stylesheet tập trung nữa. Thêm vào đó, tất cả tên class lúc này sẽ được scope lại local, có thế viết bằng vanilla CSS hay SCSS (lựa chọn hàng đầu của các frontend chất).</p>\n<p>file Button.scss</p>\n<pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">.button </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">blue</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>file Button.js</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> styles <span class=\"token keyword module\">from</span> <span class=\"token string\">'./Button.scss'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">button</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">An Luu Blog</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Với cách viết này, class <code class=\"language-text\">.button</code> lúc trả về sẽ là <code class=\"language-text\">button-[hash string ở đây]</code>, nên sẽ không sợ bị trùng tên, chắc chắn không gây side effect lên các component khác vì chả bao giờ trung tên đâu.</p>\n<p>Một lợi ích khác là khi viết ta có thể viết <code class=\"language-text\">.my-class-name</code> kiểu kebab case, nhưng khi viết js chúng ta có lại thích transform thành <code class=\"language-text\">styles.myClassName</code> theo kiểu camel case.</p>\n<p>CSS module thoạt thì thấy không có chi đặc biệt, đơn giản chỉ là thế thôi, nhưng lợi ích của việc này là giúp chúng ta rất dễ maintain stylesheet vì nó buộc khi chúng ta viết css phải đơn giản nhất có thể.</p>\n<h2 id=\"xóa-style-đầy-tự-tin\"><a href=\"#x%C3%B3a-style-%C4%91%E1%BA%A7y-t%E1%BB%B1-tin\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xóa style đầy tự tin</h2>\n<p>Thích nhất là viết feature mới và đập bỏ cái code chuối cả nãy hồi xưa. Phần khó nhất là gì? Làm sao biết được xóa cái style cũ này đi có bị gì không? Lỡ đâu đang xài đâu đó.</p>\n<p>Ở cái <code class=\"language-text\">Button</code> ví dụ trên, phần stylesheet và component gần như là gắn chặt vào nhau như hình với bóng, mối quan hệ một-một giữa component và style sheet đó là một quy ước cho một component được viết tốt, file style sheet đó chỉ phục vụ cho đúng component đó, nếu mà lỡ xóa file stylesheet hoặc class nào mà đang sử dụng, chắc chắn quá trình build sẽ báo ngay lỗi cho chúng ta biết lỡ xóa phần nào.</p>\n<h2 id=\"một-vài-lựa-chọn-nâng-cao\"><a href=\"#m%E1%BB%99t-v%C3%A0i-l%E1%BB%B1a-ch%E1%BB%8Dn-n%C3%A2ng-cao\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một vài lựa chọn nâng cao</h2>\n<p>Những thư viện CSS-trong-JS nâng cao như styled-components hay emotion cũng được nhiều front-end chất xài, cung cấp nhiều tính năng tân tiến hơn, nếu không ngại học thêm và tìm hiểu cách hoạt động thì cũng là lựa chọn không đến nổi.</p>\n<p>Với kiểu viết CSS Module với Vanilla CSS hay SCSS đã được tín nhiệm từ nhiều năm qua, bên cạnh đó thì SCSS còn có biến nè, kiểu viết nesting rất tiện lợi nè,... thì thật ra chỉ sử dụng SCSS thôi cũng đã là đủ</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">styles</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./App.scss'</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>log ra xem có cái mợ gì</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*o9VrQ1idA8SqwJ_o6TL9Hg.png\"></p>\n<p>Bài dịch của tác giả: Spencer Miskoviak</p>\n<p><a href=\"https://medium.com/@skovy/writing-maintainable-styles-and-components-with-css-modules-308a9216a6c2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài gốc</a></p>\n<p><a href=\"https://medium.com/@kswanie21/css-modules-sass-in-create-react-app-37c3152de9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@kswanie21/css-modules-sass-in-create-react-app-37c3152de9</a></p>\n","cover_image":""}},{"node":{"id":"4be93db6e537bdcb646a0586abd148e5","title":"Kinh nghiệm tổ chức file và thư mục React project","path":"/kinh-nghiem-to-chuc-file-va-thu-muc-react-project/","date":"2018-06-08","timeToRead":4,"desc":"Có bao giờ cảm thấy lạc lối trong đóng code ngày càng lúc bự ra, một vài tip từ người có kinh nghiệm","content":"<!-- TOC -->\n<ul>\n<li>\n<p><a href=\"#th%C6%B0-m%E1%BB%A5c\">Thư mục</a></p>\n<ul>\n<li><a href=\"#api\">/api</a></li>\n<li><a href=\"#assets\">/assets</a></li>\n<li><a href=\"#components\">components</a></li>\n<li><a href=\"#lang\">/lang</a></li>\n<li><a href=\"#lib\">/lib</a></li>\n<li><a href=\"#store\">/store</a></li>\n<li><a href=\"#styles\">/styles</a></li>\n<li><a href=\"#view\">/view</a></li>\n</ul>\n</li>\n<li><a href=\"#cu%E1%BB%99c-chi%E1%BA%BFn-v%E1%BB%9Bi-css\">Cuộc chiến với CSS</a></li>\n<li><a href=\"#m%E1%BB%99t-s%E1%BB%91-th%C6%B0-vi%E1%BB%87n-th%C6%B0%E1%BB%9Dng-s%E1%BB%AD-d%E1%BB%A5ng\">Một số thư viện thường sử dụng</a></li>\n</ul>\n<!-- /TOC -->\n<p>Cách tổ chức project thì không phải là rule, mỗi người mỗi kiểu, chỉ là một vài cân nhắc để quản lý code tốt hơn.</p>\n<h2 id=\"thư-mục\"><a href=\"#th%C6%B0-m%E1%BB%A5c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thư mục</h2>\n<p>Đây là thư mục project hiện tại của tác giả bài viết này</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/600/1*vStBUv5egjAAb1XNWeVSRA.png\"></p>\n<p>Giải thích của tác giả về cách tổ chức này</p>\n<h3 id=\"api\"><a href=\"#api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>/api</h3>\n<p>Nơi chứa những functions đảm nhiệm chuyện gọi API</p>\n<h3 id=\"assets\"><a href=\"#assets\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>/assets</h3>\n<p>Nơi chứa external resource</p>\n<h3 id=\"components\"><a href=\"#components\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>components</h3>\n<p>Tất cả component được sử dụng từ 2 lần trở lên sẽ nằm ở đây. Mỗi component là một thư mục bao gồm <code class=\"language-text\">index.js</code> để export, <code class=\"language-text\">styles.module.scss</code> stylesheet kèm theo của component, ở đây quan điểm của mình là nên có một file là <code class=\"language-text\">ExampleComponent.js</code>, lý do để lúc code mình có thể trỏ ngay đến tên file theo cách đặt tên component = tên file như vậy, nếu component nào cũng <code class=\"language-text\">index.js</code> thì mở chừng chục file <code class=\"language-text\">index.js</code> như vậy trên VSCode sẽ chẳng thể biết đang sửa thằng nào.</p>\n<h3 id=\"lang\"><a href=\"#lang\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>/lang</h3>\n<p>Thư mục này chỉ có khi ứng dụng của mình hỗ trợ đa ngôn ngữ. Tác giả đang sử dụng i18n-js cho đa ngôn ngữ, vì nó dễ xài</p>\n<p>File <code class=\"language-text\">index.js</code> của lang</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">i18n</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'i18n-js'</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">en</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./locales/en'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">es</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./locales/es'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">pt</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./locales/pt'</span>\n\ni18n<span class=\"token punctuation\">.</span><span class=\"token property-access\">translations</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  en<span class=\"token punctuation\">,</span>\n  es<span class=\"token punctuation\">,</span>\n  pt<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\ni18n<span class=\"token punctuation\">.</span><span class=\"token property-access\">fallbacks</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> i18n<span class=\"token punctuation\">.</span><span class=\"token property-access\">t</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token exports\"><span class=\"token operator\">*</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./locales/keys'</span></code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/600/1*vStBUv5egjAAb1XNWeVSRA.png\" alt=\"Giống hình trên thôi, đỡ phải scroll lên\"></p>\n<h3 id=\"lib\"><a href=\"#lib\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>/lib</h3>\n<p>Chứa những file helper, utils, validation,...</p>\n<h3 id=\"store\"><a href=\"#store\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>/store</h3>\n<p>Dành cho người xài Redux, chưa sử dụng MobX nhiều, có thể sẽ khác. Bên trong này sẽ có những thư mục con</p>\n<ul>\n<li><strong>/actions</strong> chứa action creators</li>\n<li><strong>/definitions</strong> hay <strong>/actionTypes</strong></li>\n<li><strong>/reducers</strong> trong đây mỗi reducer sẽ là 1 file riêng biệt, file index.js sẽ combine tất cả export lại. Hoặc <strong>/sagas</strong> nếu dùng redux saga</li>\n</ul>\n<p>File <code class=\"language-text\">index.js</code> của thư mục store</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> createStore<span class=\"token punctuation\">,</span> applyMiddleware <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'redux'</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">createSagaMiddleware</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'redux-saga'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">loggerMiddleware</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'redux-logger'</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">combinedReducer</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'src/store/reducers'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">rootSaga</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'src/store/sagas'</span>\n\n<span class=\"token keyword\">const</span> sagaMiddleware <span class=\"token operator\">=</span> <span class=\"token function\">createSagaMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsagaMiddleware<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">run</span><span class=\"token punctuation\">(</span>rootSaga<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>\n  combinedReducer<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>\n    sagaMiddleware<span class=\"token punctuation\">,</span>\n    loggerMiddleware<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"styles\"><a href=\"#styles\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>/styles</h3>\n<p>Chứa common style</p>\n<h3 id=\"view\"><a href=\"#view\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>/view</h3>\n<p>Trong component thì ta để mấy component để hiển thị, pure component, thư mục view này thì chứa container component.</p>\n<p>File <code class=\"language-text\">index.js</code> của thư mục này chúng ta sẽ export toàn bộ mấy cái view để ta đưa nó vô <code class=\"language-text\">router</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span>\n  <span class=\"token maybe-class-name\">BrowserRouter</span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">Route</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-router-dom'</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Home</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./Home'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Settings</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./Settings'</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BrowserRouter</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">exact</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Home</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">exact</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/settings<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Settings</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">BrowserRouter</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"cuộc-chiến-với-css\"><a href=\"#cu%E1%BB%99c-chi%E1%BA%BFn-v%E1%BB%9Bi-css\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cuộc chiến với CSS</h2>\n<p>Có tới cả trăm bài viết và tranh luận xung quanh sử dụng CSS trong React. Tác giả bài viết này thích CSS module, chưa thấy được lý do tại sao dùng Styled Components.</p>\n<p>Lý do thích CSS module? Tuy không phải lúc nào cũng giải quyết được mọi vấn đề với CSS module, nên việc sử dụng kết hợp giữa CSS module và global import style là sự lựa chọn của tác giả</p>\n<p>Đây là cách config SASS trong webpack</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token group punctuation\">(?&lt;!</span><span class=\"token special-escape escape\">\\.</span>module<span class=\"token group punctuation\">)</span><span class=\"token special-escape escape\">\\.</span>scss<span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n  use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    require<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      loader<span class=\"token operator\">:</span> require<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        importLoaders<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      loader<span class=\"token operator\">:</span> require<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'postcss-loader'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Necessary for external CSS imports to work</span>\n        <span class=\"token comment\">// https://github.com/facebookincubator/create-react-app/issues/2677</span>\n        ident<span class=\"token operator\">:</span> <span class=\"token string\">'postcss'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">[</span>\n          <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'postcss-flexbugs-fixes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function\">autoprefixer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            browsers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n              <span class=\"token string\">'>1%'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">'last 4 versions'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">'Firefox ESR'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">'not ie &lt; 9'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// React doesn't support IE8 anyway</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            flexbox<span class=\"token operator\">:</span> <span class=\"token string\">'no-2009'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      loader<span class=\"token operator\">:</span> require<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sass-loader'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>\n  test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\.</span>module<span class=\"token special-escape escape\">\\.</span>scss<span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n  use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    require<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      loader<span class=\"token operator\">:</span> require<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        importLoaders<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        modules<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        localIdentName<span class=\"token operator\">:</span> <span class=\"token string\">'[local]__[hash:base64:5]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      loader<span class=\"token operator\">:</span> require<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'postcss-loader'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Necessary for external CSS imports to work</span>\n        <span class=\"token comment\">// https://github.com/facebookincubator/create-react-app/issues/2677</span>\n        ident<span class=\"token operator\">:</span> <span class=\"token string\">'postcss'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">[</span>\n          <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'postcss-flexbugs-fixes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function\">autoprefixer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            browsers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n              <span class=\"token string\">'>1%'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">'last 4 versions'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">'Firefox ESR'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">'not ie &lt; 9'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// React doesn't support IE8 anyway</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            flexbox<span class=\"token operator\">:</span> <span class=\"token string\">'no-2009'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      loader<span class=\"token operator\">:</span> require<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sass-loader'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre>\n<p>Sử dụng css module trong component</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">classNames</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'classnames'</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">styles</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./styles.module.scss'</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> negative <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> surname <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n    <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span>\n      styles<span class=\"token punctuation\">[</span><span class=\"token string\">'name-container'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      negative <span class=\"token operator\">&amp;&amp;</span> styles<span class=\"token punctuation\">[</span><span class=\"token string\">'name-negative'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">[</span><span class=\"token string\">'name-content'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Or should I refer to you by </span><span class=\"token punctuation\">{</span>surname<span class=\"token punctuation\">}</span><span class=\"token plain-text\">?</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Để tìm hiểu thêm về CSS Module trong React, <a href=\"https://blog.pusher.com/css-modules-react/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">đọc bài này</a></p>\n<h2 id=\"một-số-thư-viện-thường-sử-dụng\"><a href=\"#m%E1%BB%99t-s%E1%BB%91-th%C6%B0-vi%E1%BB%87n-th%C6%B0%E1%BB%9Dng-s%E1%BB%AD-d%E1%BB%A5ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một số thư viện thường sử dụng</h2>\n<ul>\n<li>Luôn sử dụng <strong>react</strong>, <strong>react-dom</strong> mới nhất</li>\n<li><code class=\"language-text\">classnames</code> để join <code class=\"language-text\">className</code> theo điều kiện</li>\n<li><code class=\"language-text\">i18n-js</code> để làm đa ngôn ngữ</li>\n<li><code class=\"language-text\">lodash</code>, một số utility function sử lý chuổi, object này nọ</li>\n<li><code class=\"language-text\">ramda</code> thay cho <code class=\"language-text\">lodash</code> nếu bạn khoái pure function, và <code class=\"language-text\">recompose</code> nếu đã thích <code class=\"language-text\">ramda</code></li>\n<li><code class=\"language-text\">dinero.js</code> để hiển thị và sử lý tiền</li>\n<li><code class=\"language-text\">moment</code> để làm việc với date time</li>\n<li><code class=\"language-text\">react-helmet</code> để thay đổi tag <code class=\"language-text\">&lt;head&gt;</code> cho từng component</li>\n<li><code class=\"language-text\">react-table</code> và <code class=\"language-text\">react-virtualized</code> cho hiển thị dữ liệu kiểu table</li>\n<li><code class=\"language-text\">react-redux</code> <code class=\"language-text\">redux</code> <code class=\"language-text\">redux-saga</code> và <code class=\"language-text\">redux-logger</code> để quản lý state tập trung</li>\n<li><code class=\"language-text\">react-router-dom</code> nếu làm web, và <code class=\"language-text\">react-navigation</code> nếu là react native</li>\n</ul>\n<p>Cảm ơn bạn đã đọc hết bài viết</p>\n<p><a href=\"https://hackernoon.com/tips-on-react-for-large-scale-projects-3f9ece85983d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài gốc: Tips on React for large scale projects</a>\nTác giả: Luis Felipe Zaguini</p>\n","cover_image":""}},{"node":{"id":"fa886c080ce0cc5ae7c411b14a1be10f","title":"Giới thiệu React Portal","path":"/gioi-thieu-react-portal/","date":"2018-05-31","timeToRead":2,"desc":"Tìm hiểu về Portals, bản hỗ trợ chính thức của react-dom","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81-portal-gi%E1%BA%A3i-quy%E1%BA%BFt\">Vấn đề Portal giải quyết</a></li>\n<li><a href=\"#c%C3%BA-ph%C3%A1p\">Cú pháp</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng\">Sử dụng</a></li>\n</ul>\n<!-- /TOC -->\n<p>Gọi là bản hỗ trợ chính thức vì trước bản React 16 thì không có support, chúng ta phải dùng các thư viện bổ sung. Giờ thì nó official rồi nhé.</p>\n<h2 id=\"vấn-đề-portal-giải-quyết\"><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81-portal-gi%E1%BA%A3i-quy%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vấn đề Portal giải quyết</h2>\n<p>Thông thường khi chúng ta có component cha là A, bên trong đó render component con là B, thì thằng B này sẽ luôn bị bọc lại bên trong A</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>component-c<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>component-a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>component-b<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Giờ nếu ta muốn khi viết thì vẫn viết component B bên trong component A, nhưng kết quả html ta có được thì component B lại nằm trong component C. Đó là lúc chúng ta cần đến Portal, ta sẽ bọc component B bằng hàm <code class=\"language-text\">createPortal</code>, để khi <code class=\"language-text\">render</code> B thì nó lại <code class=\"language-text\">render</code> ở C.</p>\n<h2 id=\"cú-pháp\"><a href=\"#c%C3%BA-ph%C3%A1p\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cú pháp</h2>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ReactDOM</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token maybe-class-name\">ReactDOM</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createPortal</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Trong đó</p>\n<ul>\n<li><code class=\"language-text\">ReactDOM.createPortal</code> là hàm của <code class=\"language-text\">react-dom</code></li>\n<li>child là thằng B, thằng con đi lông nhông không thèm ở nhà với cha nó</li>\n<li>container là nhà thằng hàng xóm, nơi thằng con B hoang đàng sẽ ở ké.</li>\n</ul>\n<h2 id=\"sử-dụng\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng</h2>\n<p>Để sử dụng Portal, chúng ta tạo ra một component mới, độc lập với B, rồi đẩy thằng B hay bất kỳ đứa nào muốn có cuộc sống du mục thành child component của component mới tạo này, đặt tên là <code class=\"language-text\">MyPortal</code> nha.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">PropTypes</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'prop-types'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ReactDOM</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyPortal</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// tìm coi có đứa nào chịu chứa chấp nó không</span>\n    <span class=\"token keyword\">const</span> haveTarget <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// không nơi chứa chấp thì ta ko render luôn</span>\n    <span class=\"token keyword control-flow\">return</span> haveTarget <span class=\"token operator\">?</span> <span class=\"token maybe-class-name\">ReactDOM</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createPortal</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span><span class=\"token punctuation\">,</span>\n      haveTarget\n    <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token maybe-class-name\">MyPortal</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">propTypes</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// là id của html element ta sẽ append cái đứa con hoang đàng vô</span>\n  target<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">PropTypes</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">string</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isRequired</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">MyPortal</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Component A sẽ viết như thế này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token spread operator\">...</span>\n<span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>component-a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Hello An.Luu\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyPortal</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>targetForB<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>component-b<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                Em là B!\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyPortal</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token spread operator\">...</span>\n\n<span class=\"token comment\">// trong đó, id có thể nằm ở bất kỳ component nào đó khác, thậm chí window khác luôn mới ghê</span>\n\n<span class=\"token comment\">// ví dụ component C</span>\n<span class=\"token spread operator\">...</span>\n<span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>component-c<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Em là C!\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>targetForB<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n)\n...</span></code></pre>\n<p>Đọc thêm </p>\n<ul>\n<li><a href=\"https://reactjs.org/docs/portals.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://reactjs.org/docs/portals.html</a> </li>\n<li><a href=\"https://hackernoon.com/using-a-react-16-portal-to-do-something-cool-2a2d627b0202\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://hackernoon.com/using-a-react-16-portal-to-do-something-cool-2a2d627b0202</a></li>\n</ul>\n","cover_image":""}},{"node":{"id":"b8095fcc4fddb26736d28255b2cd38ed","title":"Làm việc với Form trong React","path":"/lam-viec-voi-form-trong-react/","date":"2018-05-22","timeToRead":3,"desc":"Xử lý form trong React, căn bản nhất","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#controlled-component-vs-uncontrolled-component\">controlled component vs. uncontrolled component</a></li>\n<li><a href=\"#d%E1%BB%B1ng-form\">Dựng Form</a></li>\n</ul>\n<!-- /TOC -->\n<p>![null][https://process.filestackapi.com/cache=expiry:max/resize=width:700/compress/glrbsytsygriccnehidf]</p>\n<h2 id=\"controlled-component-vs-uncontrolled-component\"><a href=\"#controlled-component-vs-uncontrolled-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>controlled component vs. uncontrolled component</h2>\n<p>Không giống các element DOM, element FORM sẽ làm việc hơi khác trong React. Data của form sẽ được xử lý bởi component, không phải bởi DOM, thông thường chúng ta sử dụng controlled component, data của form sẽ được đưa vô component <code class=\"language-text\">state</code> như hình bên dưới</p>\n<p><img src=\"https://process.filestackapi.com/cache=expiry:max/Qb7pi8kTzenybAUcijaB\"></p>\n<p>Data từ <code class=\"language-text\">dump components</code> sẽ được gởi vô hàm callback, nơi chúng ta lưu lại các thay đổi</p>\n<p>Nếu sử dụng uncontrolled component, tương tự như HTML form truyền thống, dữ liệu sẽ nằm trong DOM, không nằm trong component state, các component <code class=\"language-text\">&lt;input /&gt;</code> hay <code class=\"language-text\">&lt;textarea/&gt;</code> sẽ tự quản lý state của nó và tự động thay đổi khi user nhập dữ liệu, nếu cần dữ liệu này, chúng ta query tới DOM đó để lấy giá trị bằng <code class=\"language-text\">ref</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">UncontrolledComponentForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleSubmit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">handleSubmit</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The value is: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleSubmit</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Name:\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span> <span class=\"token operator\">=</span> input <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đa số các trường hợp mình thường sử dụng controlled component để làm form, nhìn vào trực quan hơn và mình có thể validate được dữ liệu lúc nhập vào luôn.</p>\n<h2 id=\"dựng-form\"><a href=\"#d%E1%BB%B1ng-form\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dựng Form</h2>\n<p>Sẽ có khá nhiều thư viện có sẵn để làm việc với form, nhưng với cá nhân mình, mình vẫn thích tự build hơn vì nếu mình muốn thêm validate đặc biệt hay tùy biến behavior của nó cũng đơn giản hơn, đồng thời giúp chúng ta nắm rõ hơn về React Form luôn.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Component</span><span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>  \n\n<span class=\"token comment\">/* Import Components */</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">CheckBox</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../components/CheckBox'</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Input</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../components/Input'</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">TextArea</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../components/TextArea'</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Select</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../components/Select'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Button</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../components/Button'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FormContainer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      newUser<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        email<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        age<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        gender<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        expertise<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        about<span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n      genderOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Male'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Female'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Others'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      skillOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Programming'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Development'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Design'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Testing'</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/* This life cycle hook gets executed when the component mounts */</span>\n\n  <span class=\"token function-variable function\">handleFormSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Form submission logic</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">handleClearForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Logic for resetting the form</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">changeValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//update state</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleFormSubmit</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Input</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">changeValue</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Name of the user */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Input</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">changeValue</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Input for Age */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> \n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Select</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">changeValue</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Gender Selection */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CheckBox</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">changeValue</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* List of Skills (eg. Programmer, developer) */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TextArea</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">changeValue</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* About you */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleFormSubmit</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            Submit\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleClearForm</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            Reset\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">FormContainer</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Mình sẽ không đi sâu vào các component <code class=\"language-text\">Input</code>, <code class=\"language-text\">Select</code>, <code class=\"language-text\">Checkbox</code>, <code class=\"language-text\">TextArea</code>, các bạn có thể sử dụng một UI library React bất kỳ, hoặc tự build nếu thích, đa phần các library này sẽ cho phép sử dụng cả 2 kiểu controlled/uncontrolled</p>\n<p>Hàm <code class=\"language-text\">handleClearForm</code> sẽ reset toàn bộ state</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function-variable function\">handleClearForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> \n    newUser<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      age<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      gender<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      skills<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      about<span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Bên trong hàm <code class=\"language-text\">handleFormSubmit</code> ta có thể lấy giá trị của form và thực hiện một xử lý như <code class=\"language-text\">dispatch</code> ra một action</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function-variable function\">handleFormSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> userData <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">newUser</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// nếu connect FormContainer vào Redux, ta có thể dùng dispatch ở đây</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">someFunction</span><span class=\"token punctuation\">(</span>userData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>   </code></pre>\n<p>Bài này tác giả chưa đề cập những vấn đề sâu hơn như validate, bài sau mình sẽ bổ sung thêm.</p>\n<p><a href=\"https://www.codementor.io/blizzerand/building-forms-using-react-everything-you-need-to-know-iz3eyoq4y\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài gốc</a></p>\n<p>Tác giả: Manjunath</p>\n","cover_image":""}},{"node":{"id":"c739028abbcb89e9d3e7c89db87fa879","title":"Transition trong React Native với React Navigation","path":"/transition-trong-react-native-voi-react-navigation/","date":"2018-05-02","timeToRead":3,"desc":"Hướng dẫn làm transition trong React Native với react navigation","content":"<p>Chúng ta sẽ build những màn hình đầu tiên khi mới vào app: on-boarding screen, mấy cái màn hình kiểu chào hỏi khi mới vừa cài app xong, mở app lên, giới thiệu đôi ba nét rồi kêu người ta sign in/sign up.</p>\n<p>Chúng ta sẽ setup 2 screen, <code class=\"language-text\">Screen1</code>, <code class=\"language-text\">Screen2</code>, nhét 2 screens này vào trong <code class=\"language-text\">StackNavigator</code> component</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Component</span><span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">View</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Button</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Image</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">StyleSheet</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-native'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">StackNavigator</span><span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-navigation'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">LogoImage</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Image</span></span> <span class=\"token attr-name\">source</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>uri<span class=\"token operator\">:</span> <span class=\"token string\">'https://picsum.photos/100/100?image=56'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Screen1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">View</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">container</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LogoImage</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">largeLogo</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">paragraph</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                    Welcome!\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>Next<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">onPress</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">navigation</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">navigate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Screen2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">View</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Screen2</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">View</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">container</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LogoImage</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">smallLogo</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">paragraph</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>fontWeight<span class=\"token operator\">:</span><span class=\"token string\">'normal'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                    Now you should have a basic understanding of how this app works. \n                    Please sign up and take part in this fantastic user experience!\n                  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">  \n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">paragraph</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                    This is the last page of the onboarding.\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">  \n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Back<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onPress</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">navigation</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">goBack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">View</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Navigator</span> <span class=\"token operator\">=</span> <span class=\"token function\"><span class=\"token maybe-class-name\">StackNavigator</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    screen1<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>screen<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Screen1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    screen2<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>screen<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Screen2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Navigator</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">StyleSheet</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  container<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    flex<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    alignItems<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n    justifyContent<span class=\"token operator\">:</span> <span class=\"token string\">'space-around'</span><span class=\"token punctuation\">,</span>\n    backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'#ecf0f1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  largeLogo<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    width<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    height<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    borderRadius<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  smallLogo<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    width<span class=\"token operator\">:</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span>\n    height<span class=\"token operator\">:</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span>\n    borderRadius<span class=\"token operator\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  paragraph<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    margin<span class=\"token operator\">:</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span>\n    fontSize<span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n    fontWeight<span class=\"token operator\">:</span> <span class=\"token string\">'bold'</span><span class=\"token punctuation\">,</span>\n    textAlign<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n    color<span class=\"token operator\">:</span> <span class=\"token string\">'#34495e'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"thêm-transition\"><a href=\"#th%C3%AAm-transition\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thêm transition</h2>\n<p>Chúng ta sẽ sử dụng thêm một thư viện <code class=\"language-text\">react-navigation-fluid-transitions</code> để thêm transition khi chuyển từ <code class=\"language-text\">Screen1</code> qua <code class=\"language-text\">Screen2</code>, logo ở <code class=\"language-text\">Screen1</code> sẽ nhỏ dần nhỏ dần thành logo ở <code class=\"language-text\">Screen2</code>.</p>\n<pre class=\"language-text\"><code class=\"language-text\">npm i react-navigation-fluid-transitions --save</code></pre>\n<p>Thay vì sử dụng <code class=\"language-text\">StackNavigator</code>, ta chuyển sang dùng <code class=\"language-text\">FluidNavigator</code> của thư viện mới</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">FluidNavigator</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Transition</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> react<span class=\"token operator\">-</span>navigation<span class=\"token operator\">-</span>fluid<span class=\"token operator\">-</span>transitions’<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Navigator</span> <span class=\"token operator\">=</span> <span class=\"token function\"><span class=\"token maybe-class-name\">FluidNavigator</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n screen1<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>screen<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Screen1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n screen2<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>screen<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Screen2</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Ở đây chúng ta muốn cái Logo sẽ <em>biến hình</em> nên bọc nó vào <code class=\"language-text\">Transition</code> với cùng một giá trị <em>prop</em> <code class=\"language-text\">shared</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Transition</span></span> <span class=\"token attr-name\">shared</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>logo<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LogoImage</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">largeLogo</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Transition</span></span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Transition</span></span> <span class=\"token attr-name\">shared</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>logo<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LogoImage</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">smallLogo</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Transition</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Kết quả có được</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Pg-22BI0Z_vG1mMxe9Scjg.gif\"></p>\n<p>Nếu để ý ta sẽ thấy phần text sẽ không có áp dụng transition lên nên nó đơn giản là ẩn/hiện khi chuyển qua lại giữa 2 màn hình, chúng ta sẽ thêm transition luôn cho phần text này bằng component <code class=\"language-text\">Transition</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Transition</span></span> <span class=\"token attr-name\">appear</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>horizontal<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">paragraph</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    Welcome!\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Transition</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Da1RpwEKtsKL4fwp0oZ8Iw.gif\"></p>\n<p>Thư viện React Navigation Fluid Transition hỗ trợ sẵn một số transition có thể dùng mì-ăn-liền như <code class=\"language-text\">appear</code> ở trên, một số hiệu ứng có sẵn khác, đọc thêm tại <a href=\"https://github.com/fram-x/FluidTransitions/blob/develop/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">document ở đây</a></p>\n<p>Tác Giả: Christian Falch\nLink Bài Gốc: <a href=\"https://medium.com/@christian.falch/fluid-transitions-with-react-navigation-a049d2f71494\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@christian.falch/fluid-transitions-with-react-navigation-a049d2f71494</a></p>\n","cover_image":""}},{"node":{"id":"ed20ea853375e5181c942b2bd43f7653","title":"Cải thiện performance của React App","path":"/cai-thien-performance-cua-react-app/","date":"2018-05-01","timeToRead":7,"desc":"Trong bài này, chúng ta cùng đi qua các bước để fix những issue liên quan đến performance thường thấy.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#x%C3%A1c-%C4%91%E1%BB%8Bnh-c%C3%A1c-tr%C6%B0%E1%BB%9Dng-h%E1%BB%A3p-render-kh%C3%B4ng-c%E1%BA%A7n-thi%E1%BA%BFt\">Xác định các trường hợp render không cần thiết</a></li>\n<li><a href=\"#t%C3%A1ch-c%C3%A1c-component-update-th%C6%B0%E1%BB%9Dng-xuy%C3%AAn-th%C3%A0nh-c%C3%A1c-component-%C4%91%E1%BB%99c-l%E1%BA%ADp\">Tách các component update thường xuyên thành các component độc lập</a></li>\n<li><a href=\"#shouldcomponentupdate-v%C3%A0-purecomponent\"><code class=\"language-text\">shouldComponentUpdate</code> và PureComponent</a></li>\n<li><a href=\"#tr%C3%A1nh-vi%E1%BB%87c-%C4%91%C6%B0a-m%E1%BB%99t-object-m%E1%BB%9Bi-nh%C6%B0-l%C3%A0-prop\">Tránh việc đưa một object mới như là prop</a></li>\n<li><a href=\"#production\">Production</a></li>\n<li><a href=\"#code-splitting\">Code splitting</a></li>\n<li><a href=\"#thay-%C4%91%E1%BB%95i-dom-qu%C3%A1-nhi%E1%BB%81u-l%E1%BA%A7n\">Thay đổi DOM quá nhiều lần</a></li>\n<li><a href=\"#callback\">Callback</a></li>\n</ul>\n<!-- /TOC -->\n<p>Toàn bộ source app ví dụ có thể lấy <a href=\"https://github.com/ohansemmanuel/Cardie-performace\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ở đây https://github.com/ohansemmanuel/Cardie-performace</a>, khuyến khích các bạn nên tự lấy về và vọc.</p>\n<p>Chạy lên nó sẽ có như vầy</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*Yh4h7wXPOcbaDBKdVJxm-g.png\" alt=\"Cải thiện performance của React App\"></p>\n<p>Khi click vào button nó sẽ update lại thông tin nghề nghiệp</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*o-8SuFxH2Tl37JG-wSOj0g.gif\" alt=\"Cải thiện performance của React App\"></p>\n<h1 id=\"xác-định-các-trường-hợp-render-không-cần-thiết\"><a href=\"#x%C3%A1c-%C4%91%E1%BB%8Bnh-c%C3%A1c-tr%C6%B0%E1%BB%9Dng-h%E1%BB%A3p-render-kh%C3%B4ng-c%E1%BA%A7n-thi%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xác định các trường hợp render không cần thiết</h1>\n<p>Phương pháp đơn giản nhất để kiểm tra là bật nút <code class=\"language-text\">highlight update</code> trên React Dev tool.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*jfeS12BHr2dt5ooLeh5u3Q.gif\" alt=\"Cải thiện performance của React App\"></p>\n<p>Cái viền màu xanh hiển thị xung quanh component cho biết nó đang gọi render.</p>\n<p>Trong ví dụ này có thể thấy nguyên component <code class=\"language-text\">App</code> được re-render, không đúng như chúng ta mong muốn.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*ofXx-J4tr7KXXlNozuW9OA.gif\" alt=\"Cải thiện performance của React App\"></p>\n<p>Tốt nhất là đúng cái phần hiển thị thông tin nghề nghiệp gọi render.</p>\n<h1 id=\"tách-các-component-update-thường-xuyên-thành-các-component-độc-lập\"><a href=\"#t%C3%A1ch-c%C3%A1c-component-update-th%C6%B0%E1%BB%9Dng-xuy%C3%AAn-th%C3%A0nh-c%C3%A1c-component-%C4%91%E1%BB%99c-l%E1%BA%ADp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tách các component update thường xuyên thành các component độc lập</h1>\n<p>Sau khi đã bắt được component nào đang re-render không cần thiết, tách component này theo phương pháp sau</p>\n<p>Component <code class=\"language-text\">App</code> connect với redux store bằng hàm <code class=\"language-text\">connect</code>, nó nhận các props là <code class=\"language-text\">name</code>, <code class=\"language-text\">location</code>, <code class=\"language-text\">likes</code> và <code class=\"language-text\">description</code></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*EQLJ8lXEchp_USFfj2Em7A.png\" alt=\"Cải thiện performance của React App\"></p>\n<p>Khi user click cái button, cái description bị thay đổi. Nó làm cho component <code class=\"language-text\">App</code> re-render.</p>\n<p>Nhớ lại kiến thức căn bản React, khi prop hoặc state thay đổi, cây virtual DOM được update</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*rv3Y1Au-GarKtoiTJSmWRA.png\" alt=\"Cải thiện performance của React App\">\n<img src=\"https://cdn-images-1.medium.com/max/800/1*x6NfWjAOcqwoZs2GhbdTZw.png\" alt=\"Cải thiện performance của React App\">\n<img src=\"https://cdn-images-1.medium.com/max/800/1*EpSSnv8Wjql-IcrNvzvz_A.png\" alt=\"Cải thiện performance của React App\"></p>\n<p>Giờ để xử lý, chúng ta tạo một component mới, đặt là <code class=\"language-text\">Profession</code>, để render thông tin description, chúng ta cần tổ chức lại để có cây virtual DOM như thế này</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*g8w3av5rclzcX9N387nxgQ.png\" alt=\"Cải thiện performance của React App\">\n<img src=\"https://cdn-images-1.medium.com/max/1600/1*0kqtSR4WxvGy4yYBKyReIw.png\" alt=\"Cải thiện performance của React App\"></p>\n<p>Thay vì <code class=\"language-text\">&lt;App /&gt;</code> nhận prop là <code class=\"language-text\">profession</code>, chuyển trách nhiệm này cho <code class=\"language-text\">&lt;Profession /&gt;</code></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*tLbbgUgBavBm6FMpOzqL7Q.png\" alt=\"Cải thiện performance của React App\"></p>\n<p>Kết quả sau khi tách component</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*Poo-6-5-bfYQ0qYBcXoyiw.gif\" alt=\"Cải thiện performance của React App\"></p>\n<h1 id=\"shouldcomponentupdate-và-purecomponent\"><a href=\"#shouldcomponentupdate-v%C3%A0-purecomponent\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">shouldComponentUpdate</code> và PureComponent</h1>\n<p>Các bài viết liên quan đến chủ đề performance, chắc chắn sẽ nhắc đến <code class=\"language-text\">PureComponent</code>, bài này cũng không ngoại lệ.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<p>Điều gì bạn cần quan tâm khi khai báo một component là <code class=\"language-text\">PureComponent</code>? Đó là việc mất đi hàm <code class=\"language-text\">shouldComponentUpdate</code>. Về nguyên tắc nó chỉ render lại khi <code class=\"language-text\">prop</code> thay đổi</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Description</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> description <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>faint<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">I am</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> a </span><span class=\"token punctuation\">{</span>description<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Tác giả bài viết này còn chia nhỏ hơn nữa</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Description</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> description <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">I</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Am</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">A</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profession</span></span> <span class=\"token attr-name\">profession</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>description<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*TpXci0NJ24imQqmsc7S-_A.png\" alt=\"Cải thiện performance của React App\"></p>\n<p>Chúng ta cần nhớ lại 1 lần nữa: React định nghĩa thế nào là một PureComponent?</p>\n<p>Hãy thử xem xét cách viết <code class=\"language-text\">shouldComponentUpdate</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ShouldNotUpdate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">counter</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span> <span class=\"token operator\">!==</span> nextProps<span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span><span class=\"token punctuation\">;</span>    \n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">I should be rendered only 1 time. actual times rendered: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token operator\">++</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">counter</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Kết quả trả về sẽ không phải counter = 1, nghĩa là hàm render thực sự sẽ chạy rất nhiều lần, tại sao lại vậy? bởi vì <code class=\"language-text\">this.props.children !== nextProps.children</code> sẽ luôn luôn trả về <code class=\"language-text\">true</code>, React sẽ tạo ra một instance mới, 1 <strong>ReactElement mới</strong> mỗi khi render</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ShouldNotUpdate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">counter</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">I should be rendered only 1 time. actual times rendered: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token operator\">++</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">counter</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Số lần render vẫn không giảm đi, tại sao? Đọc tiếp sẽ rõ.</p>\n<h1 id=\"tránh-việc-đưa-một-object-mới-như-là-prop\"><a href=\"#tr%C3%A1nh-vi%E1%BB%87c-%C4%91%C6%B0a-m%E1%BB%99t-object-m%E1%BB%9Bi-nh%C6%B0-l%C3%A0-prop\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tránh việc đưa một object mới như là prop</h1>\n<p>Nó sẽ xảy ra tình huống là <code class=\"language-text\">prop</code> không thay đổi, nhưng React nghĩ là nó đã thay đổi, nên render lại. Ví dụ</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">I</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PureComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>faint<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">i</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// đâu đó truyền vào </span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Description</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t  value<span class=\"token operator\">:</span> <span class=\"token string\">\"i\"</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">I</span></span> <span class=\"token attr-name\">i</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Am</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">A</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profession</span></span> <span class=\"token attr-name\">profession</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">description</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*NymA8dLgtXQIHhk7AI2LzQ.png\" alt=\"Cải thiện performance của React App\"></p>\n<p>Ngay cả khi <code class=\"language-text\">&lt;I /&gt;</code> là một PureComponent, nó vẫn render khi <code class=\"language-text\">profession</code> thay đổi.</p>\n<p>Tại sao?</p>\n<p>Khi <code class=\"language-text\">&lt;Description /&gt;</code> nhận một prop mới, hàm render được gọi</p>\n<p>Khi đến đoạn này <code class=\"language-text\">&lt;I i={i} /&gt;</code>, giá trị của <code class=\"language-text\">i</code> là một object hoàn toàn mới</p>\n<p>Với <code class=\"language-text\">PureComponent</code> nó chỉ dùng <strong>shallow compare</strong> giữa prop cũ và mới, tức là <code class=\"language-text\">string</code> và <code class=\"language-text\">number</code> thì so sánh theo giá trị, còn <code class=\"language-text\">object</code> so sánh theo tham chiếu đến vùng nhớ</p>\n<p>Giá trị của <code class=\"language-text\">i</code> không khác, nhưng thực sự nó đã tham chiếu đến vùng nhớ khác</p>\n<p>Điều này cũng giải thích cho việc tại sao cách làm như thế này không được khuyến khích</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\"><span class=\"token maybe-class-name\">Render</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*do something*/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p>Function cũng là một <code class=\"language-text\">object</code>, bạn đang truyền vào một <code class=\"language-text\">object</code> mỗi lần render</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Do this, please</span>\n<span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">&lt;</span>div onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleClick</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"production\"><a href=\"#production\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Production</h1>\n<p>Deploy thì luôn build bằng production nhỉ, ngoài ra ở phía server nên nén lại bằng Gzip. Nếu dùng Node/Express ở backend, cài thêm module <code class=\"language-text\">compression</code> và sử dụng như Express middleware</p>\n<h1 id=\"code-splitting\"><a href=\"#code-splitting\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Code splitting</h1>\n<p>Cái này mình có hướng dẫn rồi, đọc lại <a href=\"/2018-10-07-huong-dan-lazy-load-component-react\">ở đây</a></p>\n<h1 id=\"thay-đổi-dom-quá-nhiều-lần\"><a href=\"#thay-%C4%91%E1%BB%95i-dom-qu%C3%A1-nhi%E1%BB%81u-l%E1%BA%A7n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thay đổi DOM quá nhiều lần</h1>\n<p>Có bao giờ bạn từng sử dụng một <em>component</em> nhiều lần trong app, cảm thấy app hơi lag? Animation cảm giác chạy không mượt?</p>\n<p>Khi xây các component phức tạp, bạn sẽ phải xử lý DOM một chút, khả năng sẽ vướng vào 2 issue sau</p>\n<ol>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Trigger layout</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing#avoid_layout_thrashing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Layout Thrashing</a></li>\n</ol>\n<p>Hãy chạy thử hiệu ứng đang làm cho một component <strong>Collapse</strong> với khoản vài chục cái instance, sau đó chọn 6x slowdown trên dev tool để thấy sự khác biệt, 6x slowdown là giá trị tương ứng với tốc độ khi xem trên điện thoại</p>\n<p><a href=\"https://cdn-images-1.medium.com/max/800/1*2xOju9iTPGs22U0joILHmQ.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cải thiện performance của React App</a></p>\n<p>Component <strong>Collapse</strong>, ta thường sẽ làm là thay đổi độ cao của nó</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">updateHeight</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isOpen</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>isOpen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">containerEl</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">height</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">contentEl</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">scrollHeight</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">containerEl</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">height</span> <span class=\"token operator\">=</span> <span class=\"token string\">'0px'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Có 2 điểm cần lưu ý</p>\n<ol>\n<li>Chúng ta thay đổi <em>height</em>, là chúng ta trigger chuyện sắp xếp lại Layout. Nếu chúng ta thay đổi <code class=\"language-text\">transform</code>, chúng ta chỉ sẽ trigger <strong>Composite</strong> và nhìn nó sẽ smooth hơn.</li>\n<li>Dòng <code class=\"language-text\">this.containerEl.style.height = ${this.contentEl.scrollHeight}px;</code> là một ví dụ điển hình của <strong>Layout Thrashing</strong>, chúng ta đọc giá trị độ cao hiện tại, rồi lấy giá trị đó update cho một đối tượng DOM, nhân số lần này lên với số lượng component <strong>Collapse</strong> sẽ là một số lần đáng quan tâm. Sẽ tốt hơn nếu chúng ta chỉ đọc một lần rồi gán giá trị một lượt luôn.</li>\n</ol>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">updateHeight</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isOpen</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">lastRAF</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">cancelAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">lastRAF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>isOpen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">lastRAF</span> <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// đọc</span>\n      <span class=\"token keyword\">const</span> height <span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">contentEl</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">scrollHeight</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">lastRAF</span> <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">lastRAF</span> <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// gán giá trị</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">containerEl</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">height</span> <span class=\"token operator\">=</span> height<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">lastRAF</span> <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">containerEl</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">height</span> <span class=\"token operator\">=</span> <span class=\"token string\">'0px'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Có thể sử dụng thư viện <a href=\"https://github.com/wilsonpage/fastdom\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fastdom</a> thay vì tự viết</p>\n<h1 id=\"callback\"><a href=\"#callback\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Callback</h1>\n<p>Khi attach một function vào bất kỳ event nào trong DOM, nếu có thêm <code class=\"language-text\">debounced</code> hoặc <code class=\"language-text\">throttled</code> sẽ tốt hơn, giảm tải số lần gọi đến function này đến mức thấp nhất.</p>\n<p>Cách viết rất thường thấy</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">throttle</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Nhưng tại sao không sử dụng nó trong component callback?</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UnleashedOne</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onChange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onChange</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta đang lắng nghe tất tần tật mỗi khi có thay đổi trên <code class=\"language-text\">input</code>, như vậy thực sự có cần thiết không?</p>\n<p>Để giải quyết vấn đề trên, có thể viết lại component</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LeashedOne</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onChange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onChangeDebounce</span> <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChangeDebounce</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onChange</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đợi user nhập xong đi rồi xử lý sự kiện, ở đây sử dụng <code class=\"language-text\">_.debounce</code>, <code class=\"language-text\">_.throttle</code> từ thư viện <strong>lodash</strong>, sự khác nhau của 2 thằng này thì đọc thêm trên docs của lodash.</p>\n<p>Nếu bị nghiện performance, bạn có thể chia sẻ thêm một số tip với mình.</p>\n<p>Tham khảo thêm </p>\n<ul>\n<li><a href=\"/2018-09-19-huong-dan-react-profiler-dev-tool\">Giới thiệu React Profiler</a></li>\n</ul>\n<p>Tài liệu tham khảo</p>\n<ul>\n<li><a href=\"https://medium.com/myheritage-engineering/how-to-greatly-improve-your-react-app-performance-e70f7cbbb5f6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/myheritage-engineering/how-to-greatly-improve-your-react-app-performance-e70f7cbbb5f6</a></li>\n<li><a href=\"https://logrocket-blog.ghost.io/death-by-a-thousand-cuts-a-checklist-for-eliminating-common-react-performance-issues/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://logrocket-blog.ghost.io/death-by-a-thousand-cuts-a-checklist-for-eliminating-common-react-performance-issues/</a></li>\n</ul>\n","cover_image":""}},{"node":{"id":"819a9c7b235ca822b9ba12c248406cf3","title":"Google Maps và React","path":"/google-maps-va-react/","date":"2018-04-27","timeToRead":3,"desc":"Hướng Sử dụng google maps api trong React","content":"<p>Nhúng Google Maps vào web site bình thường thì quá sức đơn giản, để sử dụng với React Js thì hơi vụng công một chút.</p>\n<p>Để sử dụng Google Maps API, ta chỉ cần load đoạn js từ googleapis, chèn thêm một cái <code class=\"language-text\">div</code> với id là <em>map</em> chằng hạn.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Basic Google Map on a web page<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>map<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&amp;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Đoạn script của google sẽ được load <strong>sau khi</strong> có static DOM, cái <code class=\"language-text\">&lt;div id=&#39;map&#39; /&gt;</code> lúc đó đã tồn tại và có thể được sử dụng thoải mái bởi google maps api.</p>\n<p>Nhưng mà trong React JS thì DOM được render và re-render từ <strong>virtual DOM</strong>, một file html của app React JS thường là chỉ có thế này</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Simple React app<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/app.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Tức là nếu làm như cách bình thường ở trên thì cái <code class=\"language-text\">&lt;div id=&#39;map&#39; /&gt;</code> chưa hề tồn tại trên xã hội.</p>\n<h2 id=\"load-bất-đồng-bộ-asynchronous-loading\"><a href=\"#load-b%E1%BA%A5t-%C4%91%E1%BB%93ng-b%E1%BB%99-asynchronous-loading\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Load bất đồng bộ (Asynchronous Loading)</h2>\n<p>Cả hai đoạn script React và Google maps đều phải tốn thời gian để load, chúng ta phải đảm bảo Google Map chỉ được tạo ra <strong>sau khi</strong> React app đã khởi tạo và render DOM xong. Thoạt nhìn thì dùng asyn google map sẽ là một giải pháp.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&amp;callback=initMap<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">async</span> <span class=\"token attr-name\">defer</span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Chúng ta thêm <code class=\"language-text\">asyn</code> và <code class=\"language-text\">defer</code> để load đoạn googleapis này sau cùng, đồng thời thêm hàm <em>callback</em> sau khi load xong. Nếu <code class=\"language-text\">initMap</code> là một <em>global function</em> thì ta có thể gọi nó bên trong React Component</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">initMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">google<span class=\"token punctuation\">.</span>maps<span class=\"token punctuation\">.</span>Map</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'map'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Buồn thay! Không chạy đâu các bạn ạ. Ngay cả khi Google Maps chỉ được load sau khi React được load, không có nghĩa là toàn bộ cây DOM đã được <em>mount</em> và <em>render</em> khi thực thi hàm <em>callback</em>.</p>\n<p>Ok, chúng ta cần giải pháp tốt hơn. Về cơ bản </p>\n<blockquote>\n<p>chúng ta muốn load đoạn script của google ngay khi <em>component</em> có sử dụng đến google api được <strong>mounted</strong></p>\n</blockquote>\n<pre class=\"language-jsx\"><code class=\"language-jsx\">componentDidMount <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// trỏ global function window.initMap này vào hàm initMap của component để thằng google có thể  gọi trong hàm callback</span>\n    <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">initMap</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">initMap</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// chèn ngay đoạn js của googleapis cho anh xài ngay.</span>\n    <span class=\"token function\">loadJS</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&amp;callback=initMap'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function-variable function\">initMap</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">google<span class=\"token punctuation\">.</span>maps<span class=\"token punctuation\">.</span>Map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">refs</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">map</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getDOMNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* các options khác*/</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nrender <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>map<span class=\"token punctuation\">\"</span></span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'500px'</span><span class=\"token punctuation\">,</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'500px'</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">&lt;⁄div>\n        &lt;⁄div>\n    );\n}\n\n// hàm này để chèn thêm &lt;script /> sau khi gọi\nfunction loadJS(src) </span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> ref <span class=\"token operator\">=</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> script <span class=\"token operator\">=</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    script<span class=\"token punctuation\">.</span><span class=\"token property-access\">src</span> <span class=\"token operator\">=</span> src<span class=\"token punctuation\">;</span>\n    script<span class=\"token punctuation\">.</span><span class=\"token property-access\">async</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    ref<span class=\"token punctuation\">.</span><span class=\"token property-access\">parentNode</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">insertBefore</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Để ý là ta thêm <code class=\"language-text\">ref=&#39;map&#39;</code> để trỏ tới đúng cái <code class=\"language-text\">div</code> sử dụng để đưa vào cho Google Map constructor bằng hàm <code class=\"language-text\">this.refs.map.getDOMNode()</code> ngay khi DOM đã render.</p>\n<p>Vậy là xong. Google Map đã có thể hoạt động trơn tru với React Component, đúng hơn là với Virtual DOM.</p>\n<p>Tác giả: klaasnotfound\nLink bài gốc: <a href=\"http://www.klaasnotfound.com/2016/11/06/making-google-maps-work-with-react/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.klaasnotfound.com/2016/11/06/making-google-maps-work-with-react/</a></p>\n","cover_image":""}},{"node":{"id":"038bc8dd6494a9d7ff4a2ffd06cb8a36","title":"Một số cách làm Animation trong React","path":"/mot-so-cach-lam-animation-trong-react/","date":"2018-04-24","timeToRead":8,"desc":"Tổng hợp một số phương pháp làm animation với React","content":"<!-- TOC -->\n<ul>\n<li>\n<p><a href=\"#css-animation-d%E1%BB%B1a-tr%C3%AAn-component-state\">CSS animation dựa trên component state</a></p>\n<ul>\n<li><a href=\"#nh%C6%B0%E1%BB%A3c\">Nhược</a></li>\n<li><a href=\"#%C6%B0u\">Ưu</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#js-style-animation-d%E1%BB%B1a-tr%C3%AAn-component-state\">JS Style animation dựa trên component state</a></p>\n<ul>\n<li><a href=\"#nh%C6%B0%E1%BB%A3c-1\">Nhược</a></li>\n<li><a href=\"#%C6%B0u-1\">Ưu</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#react-motion-c%E1%BB%A7a-t%C3%A1c-gi%E1%BA%A3-cheng-louhttpsmediumcomchenglou\">React Motion của tác giả [Cheng Lou](https://medium.com/@chenglou)</a></p>\n<ul>\n<li><a href=\"#nh%C6%B0%E1%BB%A3c-2\">Nhược</a></li>\n<li><a href=\"#%C6%B0u-2\">Ưu</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#th%C6%B0-vi%E1%BB%87n-animated\">Thư viện Animated</a></p>\n<ul>\n<li><a href=\"#nh%C6%B0%E1%BB%A3c-3\">Nhược</a></li>\n<li><a href=\"#%C6%B0u-3\">Ưu</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#th%C6%B0-vi%E1%BB%87n-velocity-react\">Thư viện Velocity React</a></p>\n<ul>\n<li><a href=\"#nh%C6%B0%E1%BB%A3c-4\">Nhược</a></li>\n<li><a href=\"#%C6%B0u-4\">Ưu</a></li>\n</ul>\n</li>\n<li><a href=\"#k%E1%BA%BFt-lu%E1%BA%ADn\">Kết luận</a></li>\n</ul>\n<!-- /TOC -->\n<p>Chúng ta sẽ điểm qua 5 cách làm sau</p>\n<ol>\n<li>CSS animation dựa trên component <code class=\"language-text\">state</code></li>\n<li>JS style animation dựa trên component <code class=\"language-text\">state</code></li>\n<li>React Motion của tác giả Cheng Lou</li>\n<li>Thư viện Animated</li>\n<li>Thư viện Velocity-React</li>\n</ol>\n<p>Toàn bộ source <a href=\"https://github.com/react-native-training/react-animations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">code demo</a></p>\n<h2 id=\"css-animation-dựa-trên-component-state\"><a href=\"#css-animation-d%E1%BB%B1a-tr%C3%AAn-component-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CSS animation dựa trên component state</h2>\n<p>Cách cơ bản và dễ hình dung nhất, sử dụng class CSS, add/remove các class này để thực thi một animation. Nếu đang sử dụng CSS trong App rồi thì đây là cách làm khá ok, performance khá tốt.</p>\n<h3 id=\"nhược\"><a href=\"#nh%C6%B0%E1%BB%A3c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nhược</h3>\n<p>Không hỗ trợ cross-platform, cơ bản là không chạy được trên React Native, chỉ chạy các trình duyệt hỗ trợ các thuộc tính CSS dùng để làm animation. Phụ thuộc vào CSS và DOM nên cũng hạn chế các thay đổi theo logic phức tạp.</p>\n<h3 id=\"ưu\"><a href=\"#%C6%B0u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ưu</h3>\n<p>Do chỉ thực hiện trên CSS nên các thuộc tính thay đổi gần như chỉ là <code class=\"language-text\">Opacity</code>, <code class=\"language-text\">Transform</code>, performance không phải là vấn đề lo ngại, thay đổi các giá trị này theo <code class=\"language-text\">state</code> cũng đương đối dễ, smooth, không can thiệp quá trình <code class=\"language-text\">render</code>.</p>\n<p>Ví dụ làm <em>transition</em> khi input focus</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Gg4wRWbWlU01edcXmoPk2A.gif\"></p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token class\">.input</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> width <span class=\"token number\">.35</span><span class=\"token unit\">s</span> linear<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">150</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode color\">#dddddd</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\"><span class=\"token class\">.input-focused</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">240</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Kết hợp với React, ta sẽ thêm 2 event listener trên input khi nó <code class=\"language-text\">focus</code> và <code class=\"language-text\">blur</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    focused<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focus'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">focus</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blur'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">focus</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">focus</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> focused<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>state<span class=\"token punctuation\">.</span><span class=\"token property-access\">focused</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n            <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">input</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">focused</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'input-focused'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"js-style-animation-dựa-trên-component-state\"><a href=\"#js-style-animation-d%E1%BB%B1a-tr%C3%AAn-component-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JS Style animation dựa trên component state</h2>\n<p>Cách này cũng tương tự như sử dụng class CSS. Thật là viết inline css để ta có thể control được các logic trong file js luôn</p>\n<h3 id=\"nhược-1\"><a href=\"#nh%C6%B0%E1%BB%A3c-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nhược</h3>\n<p>Tương tự như CSS Animation</p>\n<h3 id=\"ưu-1\"><a href=\"#%C6%B0u-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ưu</h3>\n<p>Tương tự như CSS Animation</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*JzdCEVZi3wFGg9YCSuAQRw.gif\"></p>\n<p>Phương thức <code class=\"language-text\">onChange</code> sẽ được gắn vào input để kiểm tra số chữ nhập vào input, nếu có 4 hoặc nhiều hơn 4 ký tự được nhập vào, thay đổi <em>state</em> <code class=\"language-text\">disable</code> thành <code class=\"language-text\">false</code>. Button sẽ animate trên <code class=\"language-text\">width</code> và <code class=\"language-text\">backgroundColor</code> khi state <code class=\"language-text\">disable</code> này thay đổi.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    disabled<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">onChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> disabled<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">disabled</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> disabled<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> label <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">disabled</span> <span class=\"token operator\">?</span> <span class=\"token string\">'Disabled'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Submit'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n          <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">button</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">disabled</span> <span class=\"token operator\">&amp;&amp;</span> styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">buttonEnabled</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">disabled</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">disabled</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n          <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onChange</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  input<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    width<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    outline<span class=\"token operator\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">,</span>\n    fontSize<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n    padding<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    border<span class=\"token operator\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">,</span>\n    backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'#ddd'</span><span class=\"token punctuation\">,</span>\n    marginTop<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  button<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    width<span class=\"token operator\">:</span> <span class=\"token number\">180</span><span class=\"token punctuation\">,</span>\n    height<span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span>\n    border<span class=\"token operator\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">,</span>\n    borderRadius<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    fontSize<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n    cursor<span class=\"token operator\">:</span> <span class=\"token string\">'pointer'</span><span class=\"token punctuation\">,</span>\n    transition<span class=\"token operator\">:</span> <span class=\"token string\">'.25s all'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  buttonEnabled<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffc107'</span><span class=\"token punctuation\">,</span>\n    width<span class=\"token operator\">:</span> <span class=\"token number\">220</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"react-motion-của-tác-giả-cheng-lou\"><a href=\"#react-motion-c%E1%BB%A7a-t%C3%A1c-gi%E1%BA%A3-cheng-lou\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>React Motion của tác giả <a href=\"https://medium.com/@chenglou\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cheng Lou</a></h2>\n<p>Idea đăng sau React Motion là nó sẽ dựa trên API theo khái niệm \"Spring\", một khái niệm làm animation rất đã được bảo chứng ngon, làm việc tốt trong hầu hết các tình huống làm animation, nó không phụ thuộc vào <em>timing</em>, nghĩa là trong các trường hợp cần <strong>dừng</strong>, <strong>undo</strong> một animation giữa chừng thì làm được, chứ không cần đợi animation chạy hết.</p>\n<p>Với React Motion, chúng ta set các giá trị để config cho React Motion component, chúng ta sẽ nhận về một callback chứa giá trị của style, lấy giá trị style này ta set lại trên component làm animation</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Motion</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token function\">spring</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> x <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> transform<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translateX(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>x<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Motion</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<h3 id=\"nhược-2\"><a href=\"#nh%C6%B0%E1%BB%A3c-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nhược</h3>\n<p>Performance không mướt bằng CSS/JS style trong một số tình huống. Phải học thêm cách tiếp cận khái niệm spring.</p>\n<h3 id=\"ưu-2\"><a href=\"#%C6%B0u-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ưu</h3>\n<p>React Motion làm việc tốt trên cả React Native và React Web, khái niệm \"spring\" thoạt đầu sẽ rất là kỳ khi sử dụng, nhưng cứ xài dần khi đã thắm sẽ thấy nó hay.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*jJTq3gD6MVLq3Rk-_1tN6Q.gif\"></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Motion</span><span class=\"token punctuation\">,</span> spring<span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-motion'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    height<span class=\"token operator\">:</span> <span class=\"token number\">38</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">animate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> height<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">height</span> <span class=\"token operator\">===</span> <span class=\"token number\">233</span> <span class=\"token operator\">?</span> <span class=\"token number\">38</span> <span class=\"token operator\">:</span> <span class=\"token number\">233</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">button</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">animate</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Animate</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Motion</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> height<span class=\"token operator\">:</span> <span class=\"token function\">spring</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">height</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> height <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">menu</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> height <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">selection</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Selection 1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">selection</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Selection 2</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">selection</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Selection 3</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">selection</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Selection 4</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">selection</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Selection 5</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">selection</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Selection 6</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Motion</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  menu<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    overflow<span class=\"token operator\">:</span> <span class=\"token string\">'hidden'</span><span class=\"token punctuation\">,</span>\n    border<span class=\"token operator\">:</span> <span class=\"token string\">'2px solid #ddd'</span><span class=\"token punctuation\">,</span>\n    width<span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span>\n    marginTop<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  selection<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    padding<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    margin<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    borderBottom<span class=\"token operator\">:</span> <span class=\"token string\">'1px solid #ededed'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  button<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    justifyContent<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n    alignItems<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n    display<span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span>\n    cursor<span class=\"token operator\">:</span> <span class=\"token string\">'pointer'</span><span class=\"token punctuation\">,</span>\n    width<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    height<span class=\"token operator\">:</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span>\n    border<span class=\"token operator\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">,</span>\n    borderRadius<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffc107'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>import <code class=\"language-text\">Motion</code> và <code class=\"language-text\">spring</code> từ <code class=\"language-text\">react-motion</code></li>\n<li>Set giá trị khởi tạo <code class=\"language-text\">height = 38</code></li>\n<li>hàm <code class=\"language-text\">animate</code> sẽ kiểm tra độ cao hiện tại, nếu là giá trị khởi tạo thì change nó sang 250, ngược lại set về 38</li>\n<li>Trong hàm render, sử dụng Motion component để wrap toàn bộ các tags <code class=\"language-text\">p</code>, đưa giá trị <code class=\"language-text\">this.state.height</code> vào cho hàm <code class=\"language-text\">spring</code>, nó sẽ trả về một giá trị <code class=\"language-text\">heigh</code> mới, lấy giá trị <code class=\"language-text\">height</code> mới này set lên thằng component</li>\n</ul>\n<h2 id=\"thư-viện-animated\"><a href=\"#th%C6%B0-vi%E1%BB%87n-animated\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thư viện Animated</h2>\n<p>Thư viện <a href=\"https://github.com/animatedjs/animated\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Animated</a> sử dụng tương tự như thư viện Animated dùng trong React Native.</p>\n<p>Ý tưởng cơ bản của Animated là tạo ra các animation theo kiểu khai báo <strong>declarative</strong>, truyền một object để config chuyện gì sẽ xảy ra khi chạy animation.</p>\n<h3 id=\"nhược-3\"><a href=\"#nh%C6%B0%E1%BB%A3c-3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nhược</h3>\n<p>Chưa được 100% stable trên web theo như thực nghiệm, các trình duyệt cũ, một số vấn đề xảy ra với performance</p>\n<h3 id=\"ưu-3\"><a href=\"#%C6%B0u-3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ưu</h3>\n<p>Cross Platform. Đã được kiểm chứng trong React Native, nếu đã học cách sử dụng nó thì có thể áp dụng luôn lúc làm React Native.</p>\n<p>Để tìm hiểu thêm về thư viện này thì có thể thảm khảo <a href=\"http://browniefed.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">blog</a> và <a href=\"https://egghead.io/instructors/jason-brown-20a6bf03-254a-428c-9984-dca76cc84f32\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">video</a> của Jason Brown</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*6lWQD3_uLWTcEFZpR04tWA.gif\"></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Animated</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'animated/lib/targets/react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Easing</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'animated/lib/Easing'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  animatedValue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animated<span class=\"token punctuation\">.</span>Value</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function-variable function\">animate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">animatedValue</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token maybe-class-name\">Animated</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">timing</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">animatedValue</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        toValue<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        duration<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n        easing<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Easing</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">elastic</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> marginLeft <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">animatedValue</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">interpolate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      inputRange<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      outputRange<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">button</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">animate</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Animate</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Animated.div</span>\n            <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>\n              <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span>\n                <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">box</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">{</span> opacity<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">animatedValue</span><span class=\"token punctuation\">,</span> marginLeft <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Thanks for your submission!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Animated.div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>Khởi tạo một class animateValue với giá trị ban đầu là 0</li>\n<li>Khai báo hàm <code class=\"language-text\">animate</code>, hàm này sẽ handle tất cả animation sẽ thực thi, bên trong hàm này ta set giá trị về 0 bằng <code class=\"language-text\">this.animatedValue.setValue(0)</code> để trigger animation chạy mỗi khi hàm được gọi. Khi gọi Animated.timing, truyền vào các giá trị sẽ animate, giá trị ban đầu, giá trị lúc kết thúc animate, duration, easing.</li>\n<li>Trong hàm render, chúng ta tạo một giá trị mới <code class=\"language-text\">marginLeft</code> sử dụng hàm <code class=\"language-text\">interpolate</code>, hàm này sẽ nhận về mảng <code class=\"language-text\">inputRange</code> và <code class=\"language-text\">outputRange</code>, nó sẽ tạo ra giá trị mới dựa trên input và output. Chúng ta lấy giá trị output này để set cho thuộc tính <code class=\"language-text\">marginLeft</code></li>\n<li>Thay vì sử dụng <code class=\"language-text\">div</code> chúng ta phải sử dụng <code class=\"language-text\">Animated.div</code></li>\n</ul>\n<h2 id=\"thư-viện-velocity-react\"><a href=\"#th%C6%B0-vi%E1%BB%87n-velocity-react\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thư viện Velocity React</h2>\n<p>Thư viện <a href=\"https://github.com/google-fabric/velocity-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Velocity React</a> dựa trên thư viện Velocity DOM, phiên bản <strong>React</strong> của Velocity.</p>\n<p>Có thể nói các API của Velocity React là sự kết hợp giữa Animated và React Motion. Nhìn chung là một thư viện khá thú vị, nếu chỉ đang làm web, am tưởng Velocity thì vô tư sử dụng.</p>\n<h3 id=\"nhược-4\"><a href=\"#nh%C6%B0%E1%BB%A3c-4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nhược</h3>\n<p>Hơi kỳ là nó không chạy trên <code class=\"language-text\">componentDidMount</code> mà bạn phải khai báo <code class=\"language-text\">runOnMount</code>, không hỗ trợ cross-platform</p>\n<h3 id=\"ưu-4\"><a href=\"#%C6%B0u-4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ưu</h3>\n<p>API khá simple và dễ hiểu, dễ cài chạy cũng ngon</p>\n<p>Khai báo simple như sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">VelocityComponent</span></span>\n  <span class=\"token attr-name\">animation</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> opacity<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">showSubComponent</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>      \n  <span class=\"token attr-name\">duration</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">500</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MySubComponent</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">VelocityComponent</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*NaL_X8_q3nr1tasEkDWW6w.gif\"></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">VelocityComponent</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'velocity-react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">VelocityLetter</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> letter <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">VelocityComponent</span></span>\n    <span class=\"token attr-name\">runOnMount</span>\n    <span class=\"token attr-name\">animation</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> opacity<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> marginTop<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token attr-name\">duration</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">500</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">letter</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>letter<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">VelocityComponent</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    letters<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">onChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> letters <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    letters<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">l<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">VelocityLetter</span></span> <span class=\"token attr-name\">letter</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>l<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> letters<span class=\"token operator\">:</span> arr <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onChange</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">letters</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">letters</span>\n            <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  input<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    height<span class=\"token operator\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n    backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'#ddd'</span><span class=\"token punctuation\">,</span>\n    width<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    border<span class=\"token operator\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">,</span>\n    outline<span class=\"token operator\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">,</span>\n    marginBottom<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n    fontSize<span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span>\n    padding<span class=\"token operator\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  letters<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    display<span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span>\n    height<span class=\"token operator\">:</span> <span class=\"token number\">140</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  letter<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    opacity<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    marginTop<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n    fontSize<span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span>\n    whiteSpace<span class=\"token operator\">:</span> <span class=\"token string\">'pre'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"kết-luận\"><a href=\"#k%E1%BA%BFt-lu%E1%BA%ADn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết luận</h1>\n<p>Với các animation đơn giản mình sẽ sử dụng JS Style animation, còn khi gặp các animation điên khùng của tụi design thì nghĩ tới React Motion, nếu là React Native, mình sẽ luôn sử dụng Animated.</p>\n","cover_image":""}},{"node":{"id":"6f0a36bc96e70468240bed06d352fce7","title":"Giải thích Observer Pattern trong javascript","path":"/giai-thich-observer-pattern-trong-javascript/","date":"2018-04-17","timeToRead":3,"desc":"Observer là một pattern khá phổ biến trong javascript, bài giải thích ngắn gọn về pattern này","content":"<p>Mình lấy một pattern trong cuộc sống để bạn dễ hình dung trước: cơ quan phát thanh của thị trấn, quản lý toàn bộ các loa phát thanh xung quanh thị trấn. Khi có một công dân trong thị trấn đăng ký kết hôn, mất trộm,... một sự kiện nào đó xảy ra trong thị trấn, cơ quan này sẽ lan tin tức đến toàn bộ dân làng, nếu tin tức này liên quan đến người nào đó, ví dụ anh này có hẹn hò với chị kia mà còn đăng ký kết hôn chị nọ, thì các nhà đó tự giải quyết với nhau.</p>\n<p>Giờ phân vai</p>\n<ul>\n<li><strong>Observable</strong>: cơ quan phát thanh</li>\n<li><strong>Observer</strong>: các hộ dân trong xã</li>\n<li><strong>Notify</strong>: hành động lan tin cho toàn xã</li>\n</ul>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Observable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// chứa danh sách các hộ dân trong xã</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">observers</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// thêm hộ dân mới vào xã mình</span>\n    <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">observers</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// bỏ xã ra đi</span>\n    <span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">observers</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">observers</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subscriber</span> <span class=\"token arrow operator\">=></span> subscriber <span class=\"token operator\">!==</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// lan tin cho toàn xã</span>\n    <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">observers</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">observer</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Ví dụ sử dụng</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.js-input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> p1 <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.js-p1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> p2 <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.js-p2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> p3 <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.js-p3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// một số hành động sẽ làm khi nghe tin từ loa phường</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateP1</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">text</span> <span class=\"token arrow operator\">=></span> p1<span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span> <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateP2</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">text</span> <span class=\"token arrow operator\">=></span> p2<span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span> <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateP3</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">text</span> <span class=\"token arrow operator\">=></span> p3<span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span> <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// thành lập ủy ban loa phường</span>\n<span class=\"token keyword\">const</span> headingsObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// cho em đăng ký với mấy anh ơi</span>\nheadingsObserver<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribe</span><span class=\"token punctuation\">(</span>updateP1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nheadingsObserver<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribe</span><span class=\"token punctuation\">(</span>updateP2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nheadingsObserver<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribe</span><span class=\"token punctuation\">(</span>updateP3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// khi giá trị input thay đổi</span>\n<span class=\"token comment\">// bắn tin tức này đến cho cả làng</span>\ninput<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keyup'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  headingsObserver<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">notify</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Đây là phiên bản siêu đơn giản của observer pattern, nếu muốn tìm hiểu sâu hơn nữa bạn có thể đọc <a href=\"https://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Learning Javascript Design Patterns</a> của anh Addy Osmani. Observe pattern còn được gọi \"Publication/Subscription\", thật ra thì nó có xíu khác biệt mà Addy <a href=\"https://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">đã đề cập</a></p>\n<p>Trong Observer pattern, <em>Observer</em> (object) muốn nhận thông báo phải đăng ký hộ khẩu (subscribe), trong khi đó Publish/Subscribe pattern sử dụng như một cầu nối đứng giữa object muốn nhận thông báo (subscriber) và object bắn ra sự kiện (publisher), ý tưởng ở đây là để tách sự phụ thuộc của subscriber và publisher. Giống như Youtube họ ko tự sản xuất video mà các bạn Youtuber làm video và phát qua kênh Youtube</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// email đã nhận</span>\n<span class=\"token keyword\">var</span> mailCounter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// khởi tạo subscriber sẽ lắng nghe sự kiện \"inbox/newMessage\" </span>\n<span class=\"token keyword\">var</span> subscriber1 <span class=\"token operator\">=</span> <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"inbox/newMessage\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">topic<span class=\"token punctuation\">,</span> data</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n \n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"A new message was received: \"</span><span class=\"token punctuation\">,</span> topic <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n  <span class=\"token comment\">// Dùng dữ liệu trả về để render và nội dung  </span>\n  <span class=\"token function\">$</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\".messageSender\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">html</span><span class=\"token punctuation\">(</span> data<span class=\"token punctuation\">.</span><span class=\"token property-access\">sender</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">$</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\".messagePreview\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">html</span><span class=\"token punctuation\">(</span> data<span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// Một subscriber khác cũng lắng nghe sự kiện này và thực hiện một tác vụ khác </span>\n<span class=\"token comment\">// Update lại counter </span>\n<span class=\"token keyword\">var</span> subscriber2 <span class=\"token operator\">=</span> <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"inbox/newMessage\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">topic<span class=\"token punctuation\">,</span> data</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.newMessageCounter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">html</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">++</span>mailCounter <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token function\">publish</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"inbox/newMessage\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n  sender<span class=\"token operator\">:</span> <span class=\"token string\">\"hello@google.com\"</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token operator\">:</span> <span class=\"token string\">\"Hey there! How are you doing today?\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// unsubscribe( subscriber1 );</span>\n<span class=\"token comment\">// unsubscribe( subscriber2 );</span></code></pre>\n<p>Tức là ở đây thằng Observer ta móc nó vào sự kiện xảy ra trên đối tượng (ví dụ trên là input), còn Pub/Sub thì sẽ có thằng đứng giữa 2 đứa, làm nhiệm vụ cung cấp 2 hàm là <code class=\"language-text\">publish</code> để tạo sự kiện, <code class=\"language-text\">subscribe</code> để lắng nghe sự kiện.</p>\n","cover_image":""}},{"node":{"id":"1791be0a9e147d1a847171d0eaedb2be","title":"Giới thiệu Expo, nhập môn React Native","path":"/gioi-thieu-expo-nhap-mon-react-native/","date":"2018-04-16","timeToRead":3,"desc":"Để bắt đầu với React Native, cách nhanh nhất không cần cài Android Studio, Xcode có ngay môi trường để chạy test React Native thì Expo chính là cái bạn cần","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#expo-l%C3%A0-c%C3%A1i-g%C3%AC\">Expo là cái gì</a></li>\n<li><a href=\"#h%E1%BA%A1n-ch%E1%BA%BF-c%E1%BB%A7a-expo\">Hạn chế của Expo</a></li>\n<li><a href=\"#app-s%E1%BA%BD-vi%E1%BA%BFt\">App sẽ viết</a></li>\n<li><a href=\"#c%C3%A0i-expo\">Cài Expo</a></li>\n<li><a href=\"#t%E1%BA%A1o-m%E1%BB%99t-d%E1%BB%B1-%C3%A1n-expo-m%E1%BB%9Bi\">Tạo một dự án Expo mới</a></li>\n<li><a href=\"#ch%E1%BA%A1y-code-v%C3%AD-d%E1%BB%A5\">Chạy code ví dụ</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"expo-là-cái-gì\"><a href=\"#expo-l%C3%A0-c%C3%A1i-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Expo là cái gì</h2>\n<p>Expo là một framework để đẩy nhanh việc viết app React Native. Giống như Laravel hay Symphony cho PHP, Ruby on Rail của Ruby. Đồng thời cung cấp một công cụ để chạy thử và debug.</p>\n<h2 id=\"hạn-chế-của-expo\"><a href=\"#h%E1%BA%A1n-ch%E1%BA%BF-c%E1%BB%A7a-expo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hạn chế của Expo</h2>\n<p>Trước khi nghiên cứu tiếp, một vài vấn đề quan trọng sau cần biết</p>\n<ol>\n<li><strong>Expo chỉ hỗ trợ những API mà Expo SDK hỗ trợ</strong>, có nghĩa là, nếu ứng dụng đang viết cần tương tác với Bluetooh, vốn không được hỗ trợ bởi Expo SDK thì bạn phải viết code React Native thuần luôn, hoặc tự viết thêm native code sử dụng thư viện <a href=\"https://docs.expo.io/versions/latest/expokit/expokit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ExpoKit</a>.</li>\n<li><strong>Sử dụng Expo là chết dính với bộ toolset của nó</strong>. Một số đồ chơi sẽ không chạy được với Expo, trong trường hợp cần xài tới, phải <code class=\"language-text\">eject</code> cái app ra khỏi Expo, mà khi đã <code class=\"language-text\">eject</code> thì sẽ ko thể có <code class=\"language-text\">inject</code> ngược lại.</li>\n<li><strong>Ứng dụng Expo chỉ build online</strong>. Expo cung cấp một công cụ command-line là <em>Exp</em>, cho phép việc build lên Expo Server, một khi hoàn tất, một URL để download <strong>.apk</strong> hoặc <strong>ipa</strong>, <a href=\"https://docs.expo.io/versions/latest/distribution/building-standalone-apps\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bài hướng dẫn</a></li>\n</ol>\n<p>Mặc dù nghe có vẻ khá hạn chế, nhưng thực sự Expo rất mạnh, rất nhiều thứ hỗ trợ sẵn cho Android và iOS. Có nghĩa là nếu app đang viết không có gì quá đặc biệt, quá \"đỉnh của đỉnh\" thì việc sử dụng Expo sẽ mang tới rất nhiều lợi ích.</p>\n<h2 id=\"app-sẽ-viết\"><a href=\"#app-s%E1%BA%BD-vi%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>App sẽ viết</h2>\n<p>Làm cái game kiểu tìm cặp</p>\n<p><img src=\"https://cms-assets.tutsplus.com/uploads/users/1125/posts/30546/image/memory-game-default.png\" alt=\"Giới thiệu Expo, nhập môn React Native\"></p>\n<p>Và đây là mặt kia của thẻ</p>\n<p><img src=\"https://cms-assets.tutsplus.com/uploads/users/1125/posts/30546/image/memory-game-done.png\" alt=\"Giới thiệu Expo, nhập môn React Native\"></p>\n<p>Sau khi tìm ra được hết các cặp, user nhấn reset để chơi lại</p>\n<h2 id=\"cài-expo\"><a href=\"#c%C3%A0i-expo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cài Expo</h2>\n<p>Không giống với việc viết React Native thuần, chúng ta phải cài và cấu hình Android Studio, Xcode và một số thứ linh tinh khác, tất cả những gì để bắt đầu với Expo là</p>\n<p><em>Dạo này nó có thêm cái service Snack để làm online khá ngon.</em></p>\n<ol>\n<li>Cài Node.js, viết React thì phải có rồi</li>\n<li>Cài Expo Client trên thiết bị iOS hoặc Android, cái này để preview app. Lên App Store, Google Play tải về</li>\n<li>Cài bộ CLI tool của Expo, để mà khởi chạy một dự án Expo mới, chạy build,... dễ lắm như sau</li>\n</ol>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> expo --global\n\n// init một project mới\nexpo init luckyluu-project\n<span class=\"token builtin class-name\">cd</span> luckyluu-project\nexpo start</code></pre>\n<h2 id=\"tạo-một-dự-án-expo-mới\"><a href=\"#t%E1%BA%A1o-m%E1%BB%99t-d%E1%BB%B1-%C3%A1n-expo-m%E1%BB%9Bi\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tạo một dự án Expo mới</h2>\n<p>Một khi hoàn tất 3 thứ công việc đơn giản trên, giờ chúng ta tạo một app mới</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">exp init MemoryGame\n\n// trỏ vô thư mục mới tạo\n<span class=\"token builtin class-name\">cd</span> MemoryGame\n\n// Let ruuuuuuun\nexp start</code></pre>\n<p>Nếu sử dụng Expo XDE thì có thể tạo và chạy Expo app qua giao diện, <a href=\"https://github.com/expo/xde/releases\" target=\"_blank\" rel=\"noopener noreferrer\">tải ở đây nè</a>. Sau khi chạy xong thì trên màn hình command-line sẽ có đoạn QR code</p>\n<p><img src=\"https://cms-assets.tutsplus.com/uploads/users/1125/posts/30546/image/run-dev-server.png\" alt=\"Giới thiệu Expo, nhập môn React Native\"></p>\n<p>Rút điện thoại ra, mở app Expo lên, quét đoạn QR code này và xong. Sẽ thấy màn hình mặc định của ứng dụng, mỗi lần bấm <code class=\"language-text\">Ctrl + S</code> là nó sẽ tự động load lại.</p>\n<p>Với bạn nào đang xài Iphone, gần đây Expo phải xóa cái quét mã QR ra khỏi app vì bị Apple chửi bới, trên bộ công cụ debug mới (lúc chạy expo start nó sẽ mở lên trình duyệt), bạn chỉ cần chọn gửi link qua email</p>\n<h2 id=\"chạy-code-ví-dụ\"><a href=\"#ch%E1%BA%A1y-code-v%C3%AD-d%E1%BB%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chạy code ví dụ</h2>\n<p>Toàn bộ code ví dụ có thể <a href=\"https://github.com/tutsplus/easier-react-native-development-with-expo\" target=\"_blank\" rel=\"noopener noreferrer\">download ở đây</a>, bạn có thể down về chạy thử. Mình không phân tích toàn bộ code vì mình chỉ tập trung giới thiệu về Expo, mình mặc định các bạn đã biết React, React Native căn bản nhé.</p>\n<p><a href=\"https://code.tutsplus.com/tutorials/easier-react-native-development-with-expo--cms-30546\" target=\"_blank\" rel=\"noopener noreferrer\">Wern Ancheta</a></p>\n","cover_image":""}},{"node":{"id":"8eedc3591fcf6d3c79f1d05a3ad61ae6","title":"Danh sách đồ chơi để bắt đầu với React Native","path":"/danh-sach-do-choi-de-bat-dau-voi-react-native/","date":"2018-04-04","timeToRead":3,"desc":"Để bắt đầu và đào sâu vọc vạch với React Native, bạn sẽ cần đụng tới những món đồ chơi sau","content":"<!-- TOC -->\n<ul>\n<li>\n<p><a href=\"#%C4%91%E1%BB%93-ch%C6%A1i-development\">đồ chơi Development</a></p>\n<ul>\n<li><a href=\"#sdk\">SDK</a></li>\n<li><a href=\"#check-code-chu%E1%BA%A9n\">Check code chuẩn</a></li>\n<li><a href=\"#debugging\">Debugging</a></li>\n</ul>\n</li>\n<li><a href=\"#boilerplate-v%C3%A0-ui-frameworks\">Boilerplate và UI Frameworks</a></li>\n<li><a href=\"#th%C6%B0-vi%E1%BB%87n-v%C3%A0-components\">Thư viện và components</a></li>\n<li>\n<p><a href=\"#web-services\">Web Services</a></p>\n<ul>\n<li><a href=\"#database\">Database</a></li>\n<li><a href=\"#analytics\">Analytics</a></li>\n<li><a href=\"#push-notifications\">Push Notifications</a></li>\n<li><a href=\"#code-update\">Code update</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"đồ-chơi-development\"><a href=\"#%C4%91%E1%BB%93-ch%C6%A1i-development\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>đồ chơi Development</h2>\n<h3 id=\"sdk\"><a href=\"#sdk\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SDK</h3>\n<p>Chưa ai qua mặt được <a href=\"https://expo.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Expo</a>. Expo cho phép dựng app mà ko cần Android Studio hay Xcode.</p>\n<p>Workflow để làm việc với Expo</p>\n<ol>\n<li>Tạo project mới sử dụng <a href=\"https://github.com/react-community/create-react-native-app\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">create-react-native-app</a></li>\n<li>Code, code và code...</li>\n<li>Chạy thử bằng Expo app có thể tìm thấy trong app store, google play</li>\n</ol>\n<p>Không cần kết nối điện thoại với máy tính, chỉ cần điện thoại kết nối cùng mạng với localhost đang chạy, điện thoại có cài Expo app, scan đoạn QR code trên command line là được.</p>\n<p>Điều hạn chế của Expo là nó ko cho phép cài thêm một số package khác nữa ngoài những package đã được cài sẵn của Expo như Camera, Facebook, Map. Trường hợp cần những package này, sử dụng <code class=\"language-text\">react-native init</code>, lúc đó bạn phải handle mọi thứ, phức tạp hơn dùng Expo.</p>\n<h3 id=\"check-code-chuẩn\"><a href=\"#check-code-chu%E1%BA%A9n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Check code chuẩn</h3>\n<p>Nếu bị nghiện code cho chuẩn như lê duẩn, ESLint là người bạn đồng hành, mình hay sử dụng bộ style guide cấu hình sẵn của <a href=\"https://github.com/airbnb/javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb's Javascript Style Guide</a>.</p>\n<p>Nếu sử dụng ESLint thì mình nghĩ bạn nên dùng thêm một số plugin của VSCode hay Atom, một số plugin của Sublime text mình cài về thì chạy không như ý lắm.</p>\n<h3 id=\"debugging\"><a href=\"#debugging\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Debugging</h3>\n<p>Ứng dụng chạy trên desktop <a href=\"https://infinite.red/reactotron\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reactotron</a> cho phép debug React và React Native với những tính năng như: inspecting, mofifying, subscribing, tracking HTTP, đo performance ứng dụng, track error...</p>\n<h2 id=\"boilerplate-và-ui-frameworks\"><a href=\"#boilerplate-v%C3%A0-ui-frameworks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Boilerplate và UI Frameworks</h2>\n<p><a href=\"https://github.com/bartonhammond/snowflake\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Snowflake</a> bao gồm cả Frontend đến Back-End code của ứng dụng, một lựa chọn tốt để bắt đầu dự án mới nhanh nhất.</p>\n<p>React Native có sẵn một số components UI cơ bản, nếu muốn custome style thì chúng ta phải viết thêm CSS, còn không, nếu muốn nhiều hơn những component đã được viết sẵn, màu mè hoa lá hẹ hết rồi thì có thể dùng <a href=\"https://nativebase.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NativeBase</a> tương đối kế thừa khái niệm của Bootstrap, hoặc React Native Kittens có một số components cũng hay ho.</p>\n<h2 id=\"thư-viện-và-components\"><a href=\"#th%C6%B0-vi%E1%BB%87n-v%C3%A0-components\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thư viện và components</h2>\n<p>Làm navigation thì nghĩ ngày đến <a href=\"https://reactnavigation.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React navigatio</a> của chính facebook luôn.</p>\n<p>Quản lý state thì dùng <a href=\"http://mobx.js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mobx</a> hoặc <a href=\"http://redux.js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redux</a>, redux thì thường cho những dữ liệu nhiều và lớn, năm 2018 chúng ta sẽ vẫn sử dụng Redux nhé, đừng tưởng là nó đã cũ và có cái khác thay thế.</p>\n<p><a href=\"https://github.com/oblador/react-native-animatable\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Animatable</a> rất có ích khi muốn làm animation cho layout hay mấy cái micro animation trên component.</p>\n<p>Một số UI Components khác có thể tham khảo</p>\n<ul>\n<a href=\"https://github.com/christopherdro/react-native-calendar\" rel=\"external\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>react-native-calendar</strong></a></li>\n<li>\n<a href=\"https://github.com/xgfe/react-native-datepicker\" target=\"_self\"><strong>react-native-</strong></a><a href=\"https://github.com/xgfe/react-native-datepicker\" target=\"_self\"><strong>datepicker</strong></a></li>\n<li>\n<a href=\"https://github.com/oblador/react-native-progress\" rel=\"external\" target=\"_blank\"><strong>react-native-progress</strong></a></li>\n<li>\n<a href=\"https://github.com/maxs15/react-native-spinkit\" rel=\"external\" target=\"_blank\"><strong>react-native-spinkit</strong></a></li>\n<li>\n<a href=\"https://github.com/oblador/react-native-vector-icons\" rel=\"external\" target=\"_blank\"><strong>Vector Icons</strong></a></li>\n<li>\n<a href=\"https://github.com/leecade/react-native-swiper\" rel=\"external\" target=\"_blank\"><strong>react-native-swiper</strong></a></li>\n<li>\n<a href=\"https://github.com/skv-headless/react-native-scrollable-tab-view\" rel=\"external\" target=\"_blank\"><strong>react-native-scrollable-tab-view</strong></a></li>\n<li>\n<a href=\"https://github.com/oblador/react-native-lightbox\" rel=\"external\" target=\"_blank\"><strong>react-native-lightbox</strong></a></li>\n<li>\n<a href=\"https://github.com/airbnb/react-native-maps\" rel=\"external\" target=\"_blank\"><strong>react-native-maps</strong></a></li>\n<li>\n<a href=\"https://github.com/sghiassy/react-native-sglistview\" rel=\"external\" target=\"_blank\"><strong>SGListView</strong></a></li>\n<li>\n<a href=\"https://github.com/jaredpalmer/formik\" rel=\"external\" target=\"_blank\"><strong>Formik</strong></a></li>\n<li>\n<a href=\"https://github.com/AlexanderZaytsev/react-native-i18n\" rel=\"external\" target=\"_blank\"><strong>react-native-i18n</strong></a></li>\n<li>\n<a href=\"https://github.com/zo0r/react-native-push-notification\" rel=\"external\" target=\"_blank\"><strong>react-native-push-notification</strong></a></li>\n<li>\n<strong><a href=\"https://community.algolia.com/react-instantsearch/\" rel=\"external\" target=\"_blank\">InstantSearch</a></strong></li>\n<li>\n<a href=\"https://github.com/itinance/react-native-fs\" rel=\"external\" target=\"_blank\"><strong>react-native-fs</strong></a></li>\n<li>\n<strong><a href=\"https://github.com/lwansbrough/react-native-camera\" rel=\"external\" target=\"_blank\">react-native-camera</a></strong></li>\n<li>\n<strong><a href=\"https://github.com/react-native-community/react-native-video\" rel=\"external\" target=\"_blank\">react-native-video</a></strong></li>\n<li>\n<strong><a href=\"https://github.com/andpor/react-native-sqlite-storage\" rel=\"external\" target=\"_blank\">react-native-</a><a href=\"https://github.com/andpor/react-native-sqlite-storage\" rel=\"external\" target=\"_blank\">sqlite</a><a href=\"https://github.com/andpor/react-native-sqlite-storage\" rel=\"external\" target=\"_blank\">-storage</a></strong></li>\n<li>\n<a href=\"https://github.com/thewei/react-native-store\" rel=\"external\" target=\"_blank\"><strong>react-native-store</strong></a></li>\n<li>\n<strong><a href=\"https://github.com/oney/react-native-webrtc\" rel=\"external\" target=\"_blank\">react-native-</a><a href=\"https://github.com/oney/react-native-webrtc\" rel=\"external\" target=\"_blank\">webrtc</a></strong></li>\n</ul>\n<h2 id=\"web-services\"><a href=\"#web-services\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Web Services</h2>\n<h3 id=\"database\"><a href=\"#database\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Database</h3>\n<p><a href=\"https://realm.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Realm</a> real-time database chuyên cho mobile app, bào gồm các tính năng như two-way data sync, offline-first, data push.</p>\n<p>Nếu Realm có quá nhiều tính năng ko dùng đến, thì có thể sử dụng <a href=\"https://facebook.github.io/react-native/docs/asyncstorage.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AsyncStorage</a> đi kèm React Native</p>\n<h3 id=\"analytics\"><a href=\"#analytics\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Analytics</h3>\n<p><a href=\"https://get.fabric.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fabric</a> bộ công cụ tất cả trong một hoặc nếu thích Google Analytics thì có nhiều <a href=\"https://github.com/idehub/react-native-google-analytics-bridge\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">thư viện khác</a> hỗ trợ</p>\n<h3 id=\"push-notifications\"><a href=\"#push-notifications\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Push Notifications</h3>\n<p>Cái này thì ko có nhiều service lắm, nói cách khác <a href=\"https://firebase.google.com/docs/cloud-messaging/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Firebase Cloud Messaging</a> (trước đây là Google Cloud Messaging) gần như thống trị, để sử dụng FCM chúng ta sẽ cần tới <a href=\"https://github.com/evollu/react-native-fcm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-native-fcm package</a></p>\n<h3 id=\"code-update\"><a href=\"#code-update\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Code update</h3>\n<p><a href=\"https://microsoft.github.io/code-push/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CodePush</a> cho phép deploy code mới nhất trực tiếp đến device của user, nó giống như kho trung tâm, nơi chúng ta quăng hết HTML, CSS, Javascript, assets lên đó hết. Thông qua CodePush chúng ta không cần upload những thay đổi lên app store và đợi user chọn update ứng dụng. Sử dụng với đống <a href=\"https://github.com/Microsoft/react-native-code-push\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">thư viện này</a> </p>\n","cover_image":""}},{"node":{"id":"d5343507bdfb3d91dba410ab2f481ef8","title":"Query String với React Router","path":"/query-string-voi-react-router/","date":"2018-03-29","timeToRead":1,"desc":"Cách sử dụng query string với React Router siêu căn bản","content":"<p>Khi làm web, nếu chúng ta muốn truyền một thông tin gì đó quá URL, ta sẽ sử dụng query string, cái này ai làm web chắc cũng biết</p>\n<pre class=\"language-text\"><code class=\"language-text\">http://luubinhan.github.io/list?sortBy=date&amp;sortOrder=desc</code></pre>\n<p>Cái đoạn sau dấu chấm hỏi gọi là query string <code class=\"language-text\">sortBy=date&amp;sortOrder=desc</code></p>\n<p>Để tạo ra một đoạn <em>query string</em> như vậy ta sẽ sử dụng component <code class=\"language-text\">Link</code> của <em>react-router</em></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> queryParameters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    sortBy<span class=\"token operator\">:</span> <span class=\"token string\">'date'</span><span class=\"token punctuation\">,</span>\n    sortOrder<span class=\"token operator\">:</span> <span class=\"token string\">'desc'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span>\n      <span class=\"token attr-name\">to</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n        pathname<span class=\"token operator\">:</span> <span class=\"token string\">'/list'</span><span class=\"token punctuation\">,</span>\n        query<span class=\"token operator\">:</span> queryParameters\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    CLICK ME!\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu ta thiết đặt Route cho đường path <code class=\"language-text\">list</code> đến <code class=\"language-text\">ListComponent</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>list<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">ListComponent</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p>thì bên trong <code class=\"language-text\">ListComponent</code> ta có thể truy xuất đến giá trị của query string này bằng <code class=\"language-text\">props.location</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span><span class=\"token dom variable\">location</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">location</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// { sortBy: 'date', sortOrder: 'desc' }</span></code></pre>\n","cover_image":""}},{"node":{"id":"02a02d68e2737698423d912c23786ac2","title":"Một số cách viết sử dụng trong React","path":"/mot-so-cach-viet-su-dung-trong-react/","date":"2018-03-19","timeToRead":2,"desc":"Tổng hợp các cách làm phổ biến trong React","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#containerview\">Container/View</a></li>\n<li><a href=\"#container--branch--view\">Container / Branch / View</a></li>\n<li><a href=\"#higher-order-components\">Higher Order Components</a></li>\n<li><a href=\"#stateless-function\">Stateless function</a></li>\n<li><a href=\"#jsx-spread-attributes\">JSX spread attributes</a></li>\n<li><a href=\"#render-theo-%C4%91i%E1%BB%81u-ki%E1%BB%87n-%C4%91%C3%BAng-sai\">render theo điều kiện đúng sai</a></li>\n<li><a href=\"#style-component\">Style component</a></li>\n<li><a href=\"#event-switch\">Event switch</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"containerview\"><a href=\"#containerview\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Container/View</h2>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PlanetView</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">renderLoading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">renderError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">I'm sorry! Please try again</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">renderPlanet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">,</span> climate<span class=\"token punctuation\">,</span> terrain<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">planet</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Climate: </span><span class=\"token punctuation\">{</span>climate<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Terrain: </span><span class=\"token punctuation\">{</span>terrain<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">loading</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">renderLoading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">planet</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">renderPlanet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">renderError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PlanetContainer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'www.api.com/planet/5'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token arrow operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>\n                <span class=\"token parameter\">planet</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> planet<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PlanetView</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">this</span><span class=\"token punctuation\">.</span><span class=\"token attr-value\">state</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Cách chia container - dùng để xử lý logic và view - dùng để nhận và hiển thị dữ liệu có nhiều điểm hữu dụng, cái view bạn có thể dùng được nhiều lần hơn khi tách biệt nó khỏi phần xử lý business logic</p>\n<h2 id=\"higher-order-component---hoc\"><a href=\"#higher-order-component---hoc\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Higher Order Component - HOC</h2>\n<p>Cái này có bài viết rồi, đọc lại bài cũ <a href=\"https://luubinhan.github.io/blog/2018-03-02-gioi-thieu-higher-order-component-trong-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ở đây</a></p>\n<h2 id=\"jsx-spread-attribute\"><a href=\"#jsx-spread-attribute\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JSX spread attribute</h2>\n<p>Giống như cách viết <code class=\"language-text\">...</code> để spread object, 2 Cách viết sau sẽ cho cùng kết quả</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">// dùng spread attributes</span>\n<span class=\"token operator\">&lt;</span>main <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">{</span>className<span class=\"token operator\">:</span> <span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span> role<span class=\"token operator\">:</span> <span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre>\n<p>Cái đoạn trên chắc sẽ ít thấy ai viết, thường gặp như thế này nhiều hơn</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">FancyDiv</span></span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token arrow operator\">=></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fancy<span class=\"token punctuation\">\"</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p>Lưu ý thứ tự sẽ ảnh hưởng đến chuyện override, thí dụ nếu truyền <code class=\"language-text\">className</code> như sau sẽ override lại cái class <em>fancy</em></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FancyDiv</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-fancy-div<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token comment\">// kết quả &lt;div class='my-fancy-div'/></span></code></pre>\n<p>Nhưng nếu khai báo <code class=\"language-text\">FancyDiv</code> như vầy thì sẽ ko bị override</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">FancyDiv</span></span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token arrow operator\">=></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fancy<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<h2 id=\"render-theo-điều-kiện-đúng-sai\"><a href=\"#render-theo-%C4%91i%E1%BB%81u-ki%E1%BB%87n-%C4%91%C3%BAng-sai\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>render theo điều kiện đúng sai</h2>\n<p>Render khi điều kiện === true</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>condition <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Got it</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span></code></pre>\n<p>Render khi điều kiện === false</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>condition <span class=\"token operator\">||</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Got it</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span></code></pre>\n<p>Render với cập điều kiện đúng sai</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span> condition\n    <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Got it</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Not really</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://luubinhan.github.io/blog/2018-03-05-8-cach-render-component-trong-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Một số kiểu viết với rendẻ theo điều kiện</a></p>\n<h2 id=\"event-switch\"><a href=\"#event-switch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Event switch</h2>\n<p>Với component cần handle nhiều kiểu event khác nhau, tạo một hàm và dùng câu <code class=\"language-text\">switch</code> trong đó sẽ trực quan hơn</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Thay vì</span>\n<span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./actions/doStuff\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* action stuff */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token function\">handleMouseEnter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hovered<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token function\">handleMouseLeave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hovered<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Thì viết</span>\n<span class=\"token function\">handleEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">switch</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"click\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./actions/doStuff\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* action dates */</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"mouseenter\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hovered<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"mouseleave\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hovered<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">No case for event type \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>type<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","cover_image":""}},{"node":{"id":"5b4fe9781945e374b48da5bb259e6195","title":"React Authentication với Amazon Cognito - Phần 2","path":"/react-authentication-voi-amazon-cognito-phan-2/","date":"2018-03-17","timeToRead":11,"desc":"Implement authentication 2 factor sử dụng React, React Router, Amazone Cognito, phần 2 tiếp tục với Routing và TOTP để có thể làm Google Authenticator.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#authenticatorjs\"><code class=\"language-text\">Authenticator.js</code></a></li>\n<li><a href=\"#headerjs\"><code class=\"language-text\">Header.js</code></a></li>\n<li><a href=\"#homejs\"><code class=\"language-text\">Home.js</code></a></li>\n<li><a href=\"#signinjs\"><code class=\"language-text\">SignIn.js</code></a></li>\n<li><a href=\"#signupjs\"><code class=\"language-text\">SignUp.js</code></a></li>\n<li><a href=\"#routerjs\"><code class=\"language-text\">Router.js</code></a></li>\n<li><a href=\"#appjs\"><code class=\"language-text\">App.js</code></a></li>\n<li><a href=\"#v%E1%BB%81-v%E1%BA%A5n-%C4%91%E1%BB%81-totp-time-based-one-time-passwords\">Về vấn đề TOTP (time-based one-time passwords)</a></li>\n<li><a href=\"#signinjs-1\"><code class=\"language-text\">SignIn.js</code></a></li>\n</ul>\n<!-- /TOC -->\n<p>Xem <a href=\"https://luubinhan.github.io/blog/2018-03-16-react-authentication-phan-1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">phần 1 ở đây</a></p>\n<p>Phần này chúng ta tiếp tục với React Router, chúng ta chỉ cho phép những user đã login xem ứng dụng, redirect đến trang signup/sign in khi chưa đăng nhập.</p>\n<p>Ta sẽ build component <code class=\"language-text\">PrivateRoute</code>, những trang mà user phải đăng nhập để vào xem, nếu cố tình access vào các trang mà chưa đăng nhập thì bị đá ra ngay</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">PrivateRoute</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>component<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Component</span><span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>rest<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span>\n        <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">rest</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">props</span> <span class=\"token arrow operator\">=></span>\n                isAuthenticated <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n                <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Redirect</span></span>\n                        <span class=\"token attr-name\">to</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n                            pathname<span class=\"token operator\">:</span> <span class=\"token string\">\"/auth\"</span>\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n                    <span class=\"token punctuation\">/></span></span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PrivateRoute</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/route1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Route1</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<h2 id=\"authenticatorjs\"><a href=\"#authenticatorjs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">Authenticator.js</code></h2>\n<p>Component sẽ là trang sign in và sign up, tách trang sign up và sign in ra 2 route cũng được nhưng làm thế này cho gọn.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> css <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'glamor'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> withRouter <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-router-dom'</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">SignIn</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./SignIn'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">SignUp</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./SignUp'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Authenticator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    showSignIn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">switchState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">showSignIn</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      showSignIn\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> showSignIn <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>\n          showSignIn <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SignIn</span></span> <span class=\"token punctuation\">/></span></span>\n          <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SignUp</span></span> <span class=\"token punctuation\">/></span></span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        &lt;div </span><span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">buttonContainer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">>\n          &lt;p\n            </span><span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">button</span><span class=\"token punctuation\">,</span> showSignIn <span class=\"token operator\">&amp;&amp;</span> styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">underline</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            onClick=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">switchState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n          >Sign In</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          &lt;p\n            onClick=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">switchState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">button</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span>showSignIn <span class=\"token operator\">&amp;&amp;</span> styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">underline</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n          >Sign Up</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Authenticator</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  buttonContainer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    display<span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span>\n    justifyContent<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  button<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    width<span class=\"token operator\">:</span> <span class=\"token string\">'100px'</span><span class=\"token punctuation\">,</span>\n    paddingBottom<span class=\"token operator\">:</span> <span class=\"token string\">'10px'</span><span class=\"token punctuation\">,</span>\n    cursor<span class=\"token operator\">:</span> <span class=\"token string\">'pointer'</span><span class=\"token punctuation\">,</span>\n    borderBottom<span class=\"token operator\">:</span> <span class=\"token string\">'2px solid transparent'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  underline<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    borderBottomColor<span class=\"token operator\">:</span> <span class=\"token string\">'#ddd'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"headerjs\"><a href=\"#headerjs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">Header.js</code></h2>\n<p>Component siêu căn bản, siêu quen thuộc</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> css <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'glamor'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Header</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">container</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h2 <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token maybe-class-name\">Auth</span> <span class=\"token maybe-class-name\">Demo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    color<span class=\"token operator\">:</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span>\n    margin<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    padding<span class=\"token operator\">:</span> <span class=\"token string\">'25px'</span><span class=\"token punctuation\">,</span>\n    textAlign<span class=\"token operator\">:</span> <span class=\"token string\">'left'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  container<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    height<span class=\"token operator\">:</span> <span class=\"token string\">'80px'</span><span class=\"token punctuation\">,</span>\n    width<span class=\"token operator\">:</span> <span class=\"token string\">'100%'</span><span class=\"token punctuation\">,</span>\n    backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'#4CAF50'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">Header</span></code></pre>\n<h2 id=\"homejs\"><a href=\"#homejs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">Home.js</code></h2>\n<p>Trong file này ta sẽ thêm một vài component tương ứng cho 1 route, các component này chỉ được bind vô khi user đã đăng nhập, chuyện kiểm tra này sẽ nằm ở Route</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> withRouter<span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Link</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-router-dom'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Auth</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'aws-amplify'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Home</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token maybe-class-name\">Auth</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">currentUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          username<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span><span class=\"token property-access\">username</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Welcome </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">username</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>/route1<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>route1<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Route 1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Route1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Route 1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token maybe-class-name\">Auth</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">signOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">history</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/auth'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error signing out...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Sign Out</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token maybe-class-name\">Home</span> <span class=\"token operator\">=</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Home</span><span class=\"token punctuation\">)</span>\n<span class=\"token maybe-class-name\">Route1</span> <span class=\"token operator\">=</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Route1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token exports\"><span class=\"token punctuation\">{</span>\n  <span class=\"token maybe-class-name\">Home</span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">Route1</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n<p>Các component trên điều được <em>lồng</em> qua <code class=\"language-text\">withRouter</code> để có thể truy cập vào prop <code class=\"language-text\">history</code> trong React Router trong trường hợp cần navigate đến một trang khác.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*DH2Bg4EXTVuoRYtUTNqOXg.jpeg\"></p>\n<h2 id=\"signinjs\"><a href=\"#signinjs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">SignIn.js</code></h2>\n<p>Update lại component từ phần 1, chỉ một chổ khác là ta sẽ ẩn phần confirm code đi, khi <code class=\"language-text\">confirmSignIn</code> trả về thành công, ta navigate user đến route Home sử dụng <code class=\"language-text\">history</code> prop</p>\n<p><code class=\"language-text\">history.push(&#39;/&#39;)</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> css <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'glamor'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Auth</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'aws-amplify'</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> withRouter <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-router-dom'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SignIn</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    showConfirmation<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    authCode<span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">onChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> value\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">signIn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token maybe-class-name\">Auth</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">signIn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">username</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">password</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">,</span> showConfirmation<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error signing in...: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">confirmSignIn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> history <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span>\n    <span class=\"token maybe-class-name\">Auth</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">confirmSignIn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">authCode</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        history<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error confirming signing in...: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">container</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">showConfirmation</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">container</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>input\n                onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n                placeholder<span class=\"token operator\">=</span><span class=\"token string\">'username'</span>\n              <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>input\n                type<span class=\"token operator\">=</span><span class=\"token string\">'password'</span>\n                onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">,</span> evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n                placeholder<span class=\"token operator\">=</span><span class=\"token string\">'password'</span>\n              <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">button</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">signIn</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>p <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">buttonText</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token maybe-class-name\">Sign</span> <span class=\"token maybe-class-name\">In</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">showConfirmation</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              &lt;input\n                onChange=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token string\">'authCode'</span><span class=\"token punctuation\">,</span> evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n                </span><span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n                placeholder='Confirmation Code'\n              />\n              &lt;div </span><span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">button</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> onClick=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">confirmSignIn</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">>\n                &lt;p </span><span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">buttonText</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">>Confirm Sign In</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  button<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    padding<span class=\"token operator\">:</span> <span class=\"token string\">'10px 60px'</span><span class=\"token punctuation\">,</span>\n    backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'#ddd'</span><span class=\"token punctuation\">,</span>\n    cursor<span class=\"token operator\">:</span> <span class=\"token string\">'pointer'</span><span class=\"token punctuation\">,</span>\n    borderRadius<span class=\"token operator\">:</span> <span class=\"token string\">'3px'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">':hover'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'#ededed'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  buttonText<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    margin<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  input<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    height<span class=\"token operator\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n    marginBottom<span class=\"token operator\">:</span> <span class=\"token string\">'10px'</span><span class=\"token punctuation\">,</span>\n    border<span class=\"token operator\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">,</span>\n    outline<span class=\"token operator\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">,</span>\n    borderBottom<span class=\"token operator\">:</span> <span class=\"token string\">'2px solid #4CAF50'</span><span class=\"token punctuation\">,</span>\n    fontSize<span class=\"token operator\">:</span> <span class=\"token string\">'16px'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'::placeholder'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      color<span class=\"token operator\">:</span> <span class=\"token string\">'rgba(0, 0, 0, .3)'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  container<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    flex<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    paddingTop<span class=\"token operator\">:</span> <span class=\"token string\">'15px'</span><span class=\"token punctuation\">,</span>\n    display<span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span>\n    alignItems<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n    justifyContent<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n    flexDirection<span class=\"token operator\">:</span> <span class=\"token string\">'column'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">SignIn</span><span class=\"token punctuation\">)</span></code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*aZdu5cNtAcTIkUTgA4PiGA.jpeg\"></p>\n<h2 id=\"signupjs\"><a href=\"#signupjs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">SignUp.js</code></h2>\n<p>Cập nhập lại từ phần 1</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> css <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'glamor'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> withRouter <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-router-dom'</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Auth</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'aws-amplify'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SignUp</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    phone_number<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    authCode<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    showConfirmation<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">onChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> value\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">signUp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> phone_number <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span>\n    <span class=\"token maybe-class-name\">Auth</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">signUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      username<span class=\"token punctuation\">,</span>\n      password<span class=\"token punctuation\">,</span>\n      attributes<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        email<span class=\"token punctuation\">,</span>\n        phone_number\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> showConfirmation<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error signing up: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">confirmSignUp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token maybe-class-name\">Auth</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">confirmSignUp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">username</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">authCode</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">history</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error confirming signing up: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> showConfirmation <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">container</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">!</span>showConfirmation <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">container</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>input\n                <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n                placeholder<span class=\"token operator\">=</span><span class=\"token string\">'Username'</span>\n                onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>input\n                <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n                placeholder<span class=\"token operator\">=</span><span class=\"token string\">'Password'</span>\n                type<span class=\"token operator\">=</span><span class=\"token string\">'password'</span>\n                onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">,</span> evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>input\n                <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n                placeholder<span class=\"token operator\">=</span><span class=\"token string\">'Email'</span>\n                onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">,</span> evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>input\n                <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n                placeholder<span class=\"token operator\">=</span><span class=\"token string\">'Phone Number'</span>\n                onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token string\">'phone_number'</span><span class=\"token punctuation\">,</span> evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">button</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">signUp</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>p <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">buttonText</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token maybe-class-name\">Sign</span> <span class=\"token maybe-class-name\">Up</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span>\n          showConfirmation <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              &lt;input\n                onChange=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token string\">'authCode'</span><span class=\"token punctuation\">,</span> evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n                </span><span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n                placeholder='Confirmation Code'\n              />\n              &lt;div </span><span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">button</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> onClick=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">confirmSignUp</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">>\n                &lt;p </span><span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">buttonText</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">>Confirm Sign Up</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  button<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    padding<span class=\"token operator\">:</span> <span class=\"token string\">'10px 60px'</span><span class=\"token punctuation\">,</span>\n    backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'#ddd'</span><span class=\"token punctuation\">,</span>\n    cursor<span class=\"token operator\">:</span> <span class=\"token string\">'pointer'</span><span class=\"token punctuation\">,</span>\n    borderRadius<span class=\"token operator\">:</span> <span class=\"token string\">'3px'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">':hover'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'#ededed'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  buttonText<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    margin<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  container<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    flex<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    display<span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span>\n    alignItems<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n    justifyContent<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n    flexDirection<span class=\"token operator\">:</span> <span class=\"token string\">'column'</span><span class=\"token punctuation\">,</span>\n    paddingTop<span class=\"token operator\">:</span> <span class=\"token string\">'15px'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  input<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    height<span class=\"token operator\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n    marginBottom<span class=\"token operator\">:</span> <span class=\"token string\">'10px'</span><span class=\"token punctuation\">,</span>\n    border<span class=\"token operator\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">,</span>\n    outline<span class=\"token operator\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">,</span>\n    borderBottom<span class=\"token operator\">:</span> <span class=\"token string\">'2px solid #4CAF50'</span><span class=\"token punctuation\">,</span>\n    fontSize<span class=\"token operator\">:</span> <span class=\"token string\">'16px'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'::placeholder'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      color<span class=\"token operator\">:</span> <span class=\"token string\">'rgba(0, 0, 0, .3)'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">SignUp</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"routerjs\"><a href=\"#routerjs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">Router.js</code></h2>\n<p>Cuối cùng, last but not least, router</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span>\n  withRouter<span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">Switch</span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">Route</span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">Redirect</span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">BrowserRouter</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">Router</span>\n<span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-router-dom'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Auth</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'aws-amplify'</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Authenticator</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./Authenticator'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span>\n  <span class=\"token maybe-class-name\">Home</span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">Route1</span>\n<span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./Home'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PrivateRoute</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    loaded<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    isAuthenticated<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">unlisten</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">history</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token maybe-class-name\">Auth</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">currentAuthenticatedUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user: '</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isAuthenticated</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isAuthenticated<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">unlisten</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token maybe-class-name\">Auth</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">currentAuthenticatedUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loaded<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> isAuthenticated<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">history</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/auth'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> component<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Component</span><span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>rest <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loaded <span class=\"token punctuation\">,</span> isAuthenticated<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>loaded<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword null nil\">null</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Route</span>\n        <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span>rest<span class=\"token punctuation\">}</span>\n        render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">props</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword control-flow\">return</span> isAuthenticated <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n          <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Redirect</span></span>\n              <span class=\"token attr-name\">to</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n                pathname<span class=\"token operator\">:</span> <span class=\"token string\">\"/auth\"</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n            <span class=\"token punctuation\">/></span></span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token maybe-class-name\">PrivateRoute</span> <span class=\"token operator\">=</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">PrivateRoute</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Routes</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>/auth<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Authenticator</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PrivateRoute</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>/route1<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Route1</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PrivateRoute</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>/<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Home</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">Routes</span></code></pre>\n<p>Trong phần import sử dụng component <code class=\"language-text\">Redirect</code> của <em>react-router-dom</em>, component này sẽ cho phép navigate user đến một route mới, làm web chắc ai cũng biết redirect là gì mà.</p>\n<p>Component <code class=\"language-text\">PrivateRoute</code> có nhiệm vụ là một <em>container</em> cho các route cần kiểm tra tình trạng đăng nhập.</p>\n<p>Khởi tạo <em>state</em> là <code class=\"language-text\">loaded</code> và <code class=\"language-text\">isAuthenticated</code> với giá trị ban đầu là <code class=\"language-text\">false</code></p>\n<p><code class=\"language-text\">componentDidMount</code> - chúng ta làm chuyện là kiểm tra ngay và luôn tình trạng hôn nhân gia đình, không tình trạng login, nếu chưa thì mời em đến phòng đăng ký (kết hôn), đồng thời trong ta tạo ra tình trạng \"hóng tin\", listen các sự thay đổi của history (dùng <code class=\"language-text\">this.props.history.listen</code>) và kiểm tra lại trình trạng đăng nhập</p>\n<h2 id=\"appjs\"><a href=\"#appjs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">App.js</code></h2>\n<p>Bên trong component App và ta có thể thu gọn lại</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token string\">'./App.css'</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Header</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./Header'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Router</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./Router'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Header</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">App</span></code></pre>\n<h2 id=\"về-vấn-đề-totp-time-based-one-time-passwords\"><a href=\"#v%E1%BB%81-v%E1%BA%A5n-%C4%91%E1%BB%81-totp-time-based-one-time-passwords\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Về vấn đề TOTP (time-based one-time passwords)</h2>\n<p>TOTP đang trở thành lựa chọn số một của các công ty đề cao tính bảo mật tuyệt đối khi muốn dùng MFA ( Multi-Factor Authentication ), thay thế cho việc dùng MFA với SMS. Sử dụng những ứng dụng như Authy, Google Authenticator &#x26; Dou để tạo ra một access token tạm thời, expire trong 30 đến 60 giây.</p>\n<p>Cognito và bây giờ là AWS Amplify cũng đã bổ sung tính năng này, thử mở rộng ứng dụng ra với tính năng này</p>\n<p>Trước khi sử dụng TOTP thì chúng ta nên nhớ một điều rằng: đừng bao giờ ép buộc user sử dụng nó thay cho MFA, trừ khi user cố tình chọn, vì TOTP thì xài cũng rất ư là phiền phức cho user, với những ứng dụng mà user không cung cấp bất kỳ thông tin gì quan trọng thì hà chi phải làm khó user vậy</p>\n<p>Flow sẽ như thế này</p>\n<ol>\n<li>User đăng ký, mặc định dùng MFA với SMS</li>\n<li>User đăng nhập, ở một hóc bà tó nào đó của ứng dụng, thường là trong mục thiết đặt, cho phép user sử dụng TOTP.</li>\n<li>User bật TOTP lên, cho họ một cái QR Code, họ lấy điện thoại mà scan cái QR code này, kiểu Zalo đó mấy bạn.</li>\n<li>Cho phép user quay lại SMS nếu thích</li>\n</ol>\n<p>Trong ứng dụng ví dụ thì ta thêm nó luôn vô trong <code class=\"language-text\">Home</code>, sử dụng phương thức <code class=\"language-text\">Auth.setupTOTP</code>, nó sẽ trả về một <em>promise</em> để chúng ta dùng tạo QR code cho user</p>\n<pre class=\"language-text\"><code class=\"language-text\">Auth.setupTOTP(user).then(code =&gt; /* create qrcode */ )</code></pre>\n<p>Cài thêm <code class=\"language-text\">qrcode.react</code></p>\n<pre class=\"language-text\"><code class=\"language-text\">npm install qrcode.react --save</code></pre>\n<p>Bên trong component <code class=\"language-text\">Home</code>, thêm phương thức <code class=\"language-text\">addTop</code> để set QRCode, nhớ import QRCode trong Home nha.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function-variable function\">addTTOP</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token maybe-class-name\">Auth</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setupTOTP</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">code</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> authCode <span class=\"token operator\">=</span> <span class=\"token string\">\"otpauth://totp/AWSCognito:\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">username</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"?secret=\"</span> <span class=\"token operator\">+</span> code <span class=\"token operator\">+</span> <span class=\"token string\">\"&amp;issuer=AWSCognito\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> qrCode<span class=\"token operator\">:</span> authCode <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Cho phép user chọn phương thức xác thực tài khoản MFA hay TOTP</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function-variable function\">setPreferredMFA</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">authType</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token maybe-class-name\">Auth</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">verifyTotpToken</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">challengeAnswer</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token maybe-class-name\">Auth</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setPreferredMFA</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span><span class=\"token punctuation\">,</span> authType<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MFA update success: '</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MFA update error: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Trên UI thêm chổ nhập TOTP code, một vài cái button</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    // previous code omitted\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">addTTOP</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> border<span class=\"token operator\">:</span> <span class=\"token string\">'1px solid #ddd'</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token number\">125</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Add TOTP</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">qrCode</span> <span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">QRCode</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">qrCode</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setPreferredMFA</span><span class=\"token punctuation\">(</span><span class=\"token string\">'TOTP'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> border<span class=\"token operator\">:</span> <span class=\"token string\">'1px solid #ddd'</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token number\">125</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Prefer TOTP</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n      <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>TOTP Code<span class=\"token punctuation\">'</span></span>\n      <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        challengeAnswer<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> border<span class=\"token operator\">:</span> <span class=\"token string\">'1px solid #ddd'</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token number\">35</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"signinjs-1\"><a href=\"#signinjs-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">SignIn.js</code></h2>\n<p>Update lại phương thức <code class=\"language-text\">signin</code> để sử dụng MFA, các thông tin cần thiết của user nằm trong object <code class=\"language-text\">user.challengename</code>, chúng ta sử dụng để truyền vào cho <code class=\"language-text\">Auth.confirmSignIn</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function-variable function\">confirmSignIn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> history <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span>\n  <span class=\"token maybe-class-name\">Auth</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">confirmSignIn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">authCode</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">challengeName</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// rest of code omitted</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*xC3g-S2iveqB1PH5U7Ec_A.png\"></p>\n<p>Lúc này sau khi user đăng nhập có thể click vào nút <strong>Add TOTP</strong>, scan đoạn QR code và chuyển sang chế độ authentication dùng TOTP</p>\n<p><a href=\"https://github.com/dabit3/react-authentication-in-depth\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Toàn bộ code ở đây</a></p>\n<p>Bài dịch từ tác giả Nader Dabit trên HackerNoon</p>\n","cover_image":""}},{"node":{"id":"465c085453aba70681b8078667ba6b33","title":"React Authentication với Amazon Cognito - Phần 1","path":"/react-authentication-voi-amazon-cognito-phan-1/","date":"2018-03-16","timeToRead":5,"desc":"Implement authentication 2 factor sử dụng React, React Router, Amazon Cognito","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#setup\">Setup</a></li>\n<li><a href=\"#m%C3%A0n-h%C3%ACnh-%C4%91%C4%83ng-k%C3%BD\">Màn hình đăng ký</a></li>\n<li><a href=\"#sign-in\">Sign In</a></li>\n</ul>\n<!-- /TOC -->\n<p>Trong demo chúng ta sẽ sử dụng</p>\n<ul>\n<li>Create React App</li>\n<li>Glamor</li>\n<li>React Router</li>\n<li>Amazon Cognito để authentication</li>\n<li>AWS amplify để tương tác với AWS Services</li>\n</ul>\n<h1 id=\"setup\"><a href=\"#setup\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Setup</h1>\n<p>Khởi tạo project và các thư viện sẽ sử dụng</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">create-react-app react-auth\n<span class=\"token builtin class-name\">cd</span> react-auth\n\n<span class=\"token function\">npm</span> i react-router-dom glamor --save</code></pre>\n<p>Cài AWSMobile CLI</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> i -g awsmobile-cli</code></pre>\n<p>Khởi tạo config AWS IAM</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">awsmobile configure\nawsmobile init</code></pre>\n<p>Nó sẽ tạo project Mobile Hub và file aws-exports.js trong thư mục src. Tiếp theo, thêm user-signin và deploy các config mới</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">awsmobile user-signin <span class=\"token builtin class-name\">enable</span>\nawsmobile push</code></pre>\n<p><code class=\"language-text\">awsmobile user-signin enable</code> sẽ bật Amazon Congito trong project với các thiết đặt mặc định, bao gồm 2 factor authentication với SMS (sẽ thêm TOTP sau). Nếu muôn can thiệp các thiệt đặt, vào trực tiếp <a href=\"https://signin.aws.amazon.com/signin?redirect_uri=https%3A%2F%2Fconsole.aws.amazon.com%2Fcognito%2Fhome%3Fregion%3Dus-east-1%26state%3DhashArgs%2523%26isauthcode%3Dtrue&#x26;client_id=arn%3Aaws%3Aiam%3A%3A015428540659%3Auser%2Fcognito&#x26;forceMobileApp=0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Amazon Cognito</a> để chỉnh</p>\n<h1 id=\"màn-hình-đăng-ký\"><a href=\"#m%C3%A0n-h%C3%ACnh-%C4%91%C4%83ng-k%C3%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Màn hình đăng ký</h1>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*U_Oa4dWFeIqJ9TPJFx9lmQ.jpeg\"></p>\n<p>Để tương tác với Amazon Cognito, chúng ta sẽ sử các hàm trong class <code class=\"language-text\">Auth</code> từ thư viện <code class=\"language-text\">aws-amplify</code>:</p>\n<p><code class=\"language-text\">signUp</code> - tạo user mới</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">signUp</span><span class=\"token punctuation\">(</span>username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> attributes<span class=\"token operator\">?</span><span class=\"token operator\">:</span> object<span class=\"token punctuation\">)</span></code></pre>\n<p><code class=\"language-text\">confirmSignUp</code> - để xác nhận đăng ký thành công</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">confirmSignUp</span><span class=\"token punctuation\">(</span>username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> authenticationCode<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span></code></pre>\n<p><code class=\"language-text\">signIn</code> - đăng nhập</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">signIn</span><span class=\"token punctuation\">(</span>username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span></code></pre>\n<p><code class=\"language-text\">confirmSignIn</code> - xác nhận đăng nhập</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">confirmSignIn</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> object<span class=\"token punctuation\">,</span> authenticationCode<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Trong file root của project, thường là <code class=\"language-text\">index.js</code> </p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// một số import khác</span>\n<span class=\"token comment\">// </span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">config</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./aws-exports'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Amplify</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'aws-amplify'</span>\n\n<span class=\"token maybe-class-name\">Amplify</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">configure</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n\n<span class=\"token maybe-class-name\">ReactDOM</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">registerServiceWorker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Screen <code class=\"language-text\">SignUp.js</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> css <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'glamor'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SignUp</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    phone_number<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    authCode<span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">container</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">SignUp</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  container<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    display<span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span>\n    flexDirection<span class=\"token operator\">:</span> <span class=\"token string\">'column'</span><span class=\"token punctuation\">,</span>\n    alignItems<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Flow sẽ như thế này, sau khi user cung cấp các thông tin trong form signup, chúng ta gọi đến phương thức <code class=\"language-text\">signUp</code>, user sẽ nhận được một mã code để verify quá SMS, user điền mã code này vào form verify, chúng ta verify cái mã code này bằng phương thức 'confirmSignUp'</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*Z1sFmf-KG7iiHG_-VMieQw.jpeg\"></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> css <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'glamor'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SignUp</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    phone_number<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    authCode<span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">onChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">container</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Sign Up</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token operator\">&lt;</span>input\n          <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          placeholder<span class=\"token operator\">=</span><span class=\"token string\">'Username'</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n          <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          placeholder<span class=\"token operator\">=</span><span class=\"token string\">'Password'</span>\n          type<span class=\"token operator\">=</span><span class=\"token string\">'password'</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">,</span> evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n          <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          placeholder<span class=\"token operator\">=</span><span class=\"token string\">'Email'</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">,</span> evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n          <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          placeholder<span class=\"token operator\">=</span><span class=\"token string\">'Phone Number'</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token string\">'phone_number'</span><span class=\"token punctuation\">,</span> evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">button</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Sign Up</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        \n        <span class=\"token operator\">&lt;</span>input\n          <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          placeholder<span class=\"token operator\">=</span><span class=\"token string\">'Authentication Code'</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token string\">'authCode'</span><span class=\"token punctuation\">,</span> evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">button</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Confirm Sign Up</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        \n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> styles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  container<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    display<span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span>\n    flexDirection<span class=\"token operator\">:</span> <span class=\"token string\">'column'</span><span class=\"token punctuation\">,</span>\n    alignItems<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  button<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    width<span class=\"token operator\">:</span> <span class=\"token string\">'170px'</span><span class=\"token punctuation\">,</span>\n    padding<span class=\"token operator\">:</span> <span class=\"token string\">'10px 0px'</span><span class=\"token punctuation\">,</span>\n    backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'#ddd'</span><span class=\"token punctuation\">,</span>\n    cursor<span class=\"token operator\">:</span> <span class=\"token string\">'pointer'</span><span class=\"token punctuation\">,</span>\n    borderRadius<span class=\"token operator\">:</span> <span class=\"token string\">'3px'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">':hover'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'#ededed'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  input<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    height<span class=\"token operator\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n    marginBottom<span class=\"token operator\">:</span> <span class=\"token string\">'10px'</span><span class=\"token punctuation\">,</span>\n    border<span class=\"token operator\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">,</span>\n    outline<span class=\"token operator\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">,</span>\n    borderBottom<span class=\"token operator\">:</span> <span class=\"token string\">'2px solid #4CAF50'</span><span class=\"token punctuation\">,</span>\n    fontSize<span class=\"token operator\">:</span> <span class=\"token string\">'16px'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'::placeholder'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      color<span class=\"token operator\">:</span> <span class=\"token string\">'rgba(0, 0, 0, .3)'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">SignUp</span></code></pre>\n<p>Xong cái UI, giờ ta sử dụng 2 phương thức class <code class=\"language-text\">Auth</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// previous imports omitted</span>\n\n  <span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Auth</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'aws-amplify'</span>\n\n  <span class=\"token comment\">// previously shown code omitted</span>\n  <span class=\"token function-variable function\">signUp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> phone_number <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span>\n    <span class=\"token maybe-class-name\">Auth</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">signUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      username<span class=\"token punctuation\">,</span>\n      password<span class=\"token punctuation\">,</span>\n      attributes<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        email<span class=\"token punctuation\">,</span>\n        phone_number\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'successful sign up!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error signing up: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">confirmSignUp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token maybe-class-name\">Auth</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">confirmSignUp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">username</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">authCode</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'successful confirm sign up!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error confirming signing up: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// </span>\n    <span class=\"token comment\">// here we need to update the buttons to attach class methods to onClick event</span>\n    <span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">button</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">signUp</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Sign Up</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token operator\">&lt;</span>input\n      <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      placeholder<span class=\"token operator\">=</span><span class=\"token string\">'Authentication Code'</span>\n      onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">evt</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token string\">'authCode'</span><span class=\"token punctuation\">,</span> evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token method function property-access\">css</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">button</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">confirmSignUp</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Confirm Sign Up</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>Cuối cùng import và sử dụng component trong <code class=\"language-text\">App.js</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">logo</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./logo.svg'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token string\">'./App.css'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">SignUp</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./SignUp'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App-header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>logo<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App-logo<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>logo<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Welcome to React</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SignUp</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">App</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Các thông tin của user sẽ được lại trong 'Manage your User Pools', vào Amazon Coginito dashboard, chọn ứng dụng đã setup, chọn mục 'Users and Settings'</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1000/1*XQfNfYhaGlkD0wxEPtr8bQ.jpeg\"></p>\n<h1 id=\"sign-in\"><a href=\"#sign-in\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sign In</h1>\n<p>Sign in thì cũng tương tự như signup, chúng ta sử dụng <code class=\"language-text\">Auth.signIn(username, password)</code>, trả về object nếu thành công, sau đó nó sẽ gửi SMS tới user với code xác nhận lần nữa, verify bằng <code class=\"language-text\">confirmSignIn</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">signIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token maybe-class-name\">Auth</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">signIn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">username</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">password</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error signing in! :'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">confirmSignIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token maybe-class-name\">Auth</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">confirmSignIn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">authCode</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">userData</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'userdata: '</span><span class=\"token punctuation\">,</span> userData<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error confirming sign in!: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>User data nằm trong cục dữ liệu trả về sau khi gọi hàm <code class=\"language-text\">confirmSignIn</code></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*yBT-_MdRPCIj5KN3PnyFmw.png\"></p>\n<p>Có rất nhiều cách để lấy thông tin user đang đăng nhập, có thể dùng <code class=\"language-text\">Auth.currentAuthenticatedUser()</code> là dễ nhất, toàn bộ API có thể tham khảo <a href=\"https://aws.github.io/aws-amplify/api/classes/authclass.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ở đây</a></p>\n<p>Kết thúc phần 1 ở đây, phần 2 tiếp tục với Routing và TOTP để có thể làm Google Authenticator.</p>\n<hr>\n<p>Bài dịch từ tác giả Nader Dabit trên HackerNoon</p>\n","cover_image":""}},{"node":{"id":"dea079a7d56929f46cf5c0bdd1070ebf","title":"Redux vận hành như thế nào","path":"/redux-van-hanh-nhu-the-nao/","date":"2018-03-06","timeToRead":4,"desc":"Actions, reducers, action creators, middleware, pure functions, immutability,... những ngoại ngữ làm rối bất kỳ ai nếu chưa biết redux","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#Ch%E1%BB%89-s%E1%BB%AD-d%E1%BB%A5ng-State-c%E1%BB%A7a-React\">Chỉ sử dụng State của React</a></li>\n<li><a href=\"#Th%C3%AAm-Redux\">Thêm Redux</a></li>\n<li><a href=\"#Action\">Action</a></li>\n<li><a href=\"#Kh%C3%B4ng-bao-gi%E1%BB%9D-%C4%91%C6%B0%E1%BB%A3c-ph%C3%A9p-thay-%C4%91%E1%BB%95i-State-tr%E1%BB%B1c-ti%E1%BA%BFp\">Không bao giờ được phép thay đổi State trực tiếp</a></li>\n<li><a href=\"#Action-t%E1%BB%AB-%C4%91%C3%A2u-m%C3%A0-c%C3%B3\">Action từ đâu mà có</a></li>\n</ul>\n<!-- /TOC -->\n<p>Nếu chưa biết tại sao lại sinh ra thằng Redux này, có thể xem ở tuts trước của mình.</p>\n<h2 id=\"chỉ-sử-dụng-state-của-react\"><a href=\"#ch%E1%BB%89-s%E1%BB%AD-d%E1%BB%A5ng-state-c%E1%BB%A7a-react\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chỉ sử dụng State của React</h2>\n<p>Component sẽ build</p>\n<p><img src=\"https://daveceddia.com/images/counter-plain.png\" alt=\"Redux vận hành như thế nào\"></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Counter</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">decrement</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">increment</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">Counter</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Giải thích ngắn gọn cho dễ theo dõi</p>\n<ul>\n<li>Giá trị <code class=\"language-text\">count</code> được lưu trong <em>state</em> của component <code class=\"language-text\">Counter</code></li>\n<li>Khi user click '+', hàm <code class=\"language-text\">increment</code> sẽ tăng giá trị <code class=\"language-text\">count</code> lên</li>\n<li>Khi state bị thay đổi, React sẽ render lại <code class=\"language-text\">Counter</code> và những component bên trong của nó, giá trị mới sẽ hiển thị</li>\n</ul>\n<h2 id=\"thêm-redux\"><a href=\"#th%C3%AAm-redux\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thêm Redux</h2>\n<p>Như đã đề cập trong tuts trước, Redux lưu <em>state</em> lại trong 1 cái <strong>store</strong>, tranh lẫn lộn, <strong>store</strong> là nơi lưu <strong>state</strong>, và <strong>state</strong> dữ liệu.</p>\n<p>Cài redux và react-redux package</p>\n<pre class=\"language-text\"><code class=\"language-text\">npm install redux react-redux --save</code></pre>\n<p>Tại sao phải 2 cái package?, cái redux chỉ cho ta cái <strong>store</strong>, để lấy được cái <em>state</em> ra, sử dụng hàm <code class=\"language-text\">connect</code> trong <code class=\"language-text\">react-redux</code>, vì redux không phải chỉ làm việc chung được với React thôi không, nó có thể chơi với Vue, Angular không chừng.</p>\n<p>Bỏ state đi</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Counter</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">decrement</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">increment</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">Counter</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code class=\"language-text\">connect</code> nó với store thôi</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// Viết thêm hàm này</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Thay cái</span>\n<span class=\"token comment\">// export default Counter;</span>\n\n<span class=\"token comment\">// bằng</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Counter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Ok vậy là xong phần connect component với các state ở trong <em>store</em>, chúng ta cần khai báo Store!</p>\n<p>Bọc toàn bộ cái <code class=\"language-text\">App</code> bên trong component <code class=\"language-text\">Provider</code> của <em>react-redux</em> để tất cả component bên trong <code class=\"language-text\">App</code> có thể sử dụng hàm <code class=\"language-text\">connect</code> để gọi đến <em>store</em></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Provider</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token spread operator\">...</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Provider</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chưa xong, chúng ta phải setup cái store để đưa vào cho Provider</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Provider</span></span> <span class=\"token attr-name\">store</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Provider</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Vẫn chưa đủ, thật sự Redux không được thông minh như chúng ta tưởng tượng, lúc đầu mình đã nghĩ rằng khi create store như vậy nó sẽ cho mình những giá trị default bên trong store. Nhưng không chúng ta phải làm tay tất cả. Chúng ta phải cung cấp cho nó 1 hàm gọi là <code class=\"language-text\">reducer</code>, cái hàm <code class=\"language-text\">reducer</code> này phải <em>return</em> về một giá trị cho state, luôn phải return state nhé. Bên trong <code class=\"language-text\">reducer</code> ta sẽ xào nấu state theo yêu cầu, nó sẽ nhận state hiện tại và trả về state mới.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Provider</span></span> <span class=\"token attr-name\">store</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Provider</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"action\"><a href=\"#action\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Action</h2>\n<p>Action là gì, nó đóng vai trò như thế nào và nó đến từ đâu? Làm thế nào mà ta đổi giá trị <code class=\"language-text\">counter</code>?</p>\n<p><code class=\"language-text\">action</code> là 1 JS object nó sẽ cho biết bạn đang muốn <code class=\"language-text\">order</code> món nào, như tờ giấy ghi <code class=\"language-text\">order</code> trong nhà hàng ấy mà, nó sẽ chưa thông tin 'món' bạn order, đầu bếp <code class=\"language-text\">reducer</code> sẽ dựa vào đó mà xào nấu ra 'món' bạn order</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">switch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'INCREMENT'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n        count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'DECREMENT'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n        count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Reducer sẽ căn cứ vào <code class=\"language-text\">action.type</code> để thực hiện thay đổi và trả về state mới, nên nhớ chúng ta phải LUÔN LUÔN trả về state trong <code class=\"language-text\">reducer</code>, nếu có hay không có thay đổi cũng phải trả về <em>state</em></p>\n<h2 id=\"không-bao-giờ-được-phép-thay-đổi-state-trực-tiếp\"><a href=\"#kh%C3%B4ng-bao-gi%E1%BB%9D-%C4%91%C6%B0%E1%BB%A3c-ph%C3%A9p-thay-%C4%91%E1%BB%95i-state-tr%E1%BB%B1c-ti%E1%BA%BFp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Không bao giờ được phép thay đổi State trực tiếp</h2>\n<p>State là một immutable object, tuyệt đối <strong>KHÔNG</strong> thay đổi state như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">brokenReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">switch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'INCREMENT'</span><span class=\"token operator\">:</span>\n      <span class=\"token comment\">// BẬY: đừng thay giá trị bằng kiểu này</span>\n      state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'DECREMENT'</span><span class=\"token operator\">:</span>\n      <span class=\"token comment\">// BẬY: đừng thay giá trị bằng kiểu này</span>\n      state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Làm như vậy cũng cấm tuyệt đối nhé: </p>\n<ul>\n<li><code class=\"language-text\">state.foo = 7</code></li>\n<li><code class=\"language-text\">state.items.push(newItem)</code></li>\n<li><code class=\"language-text\">delete state.something</code></li>\n</ul>\n<h2 id=\"action-từ-đâu-mà-có\"><a href=\"#action-t%E1%BB%AB-%C4%91%C3%A2u-m%C3%A0-c%C3%B3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Action từ đâu mà có</h2>\n<p>Action không tự sinh ra, nó được <code class=\"language-text\">dispatch</code> ra từ hàm <code class=\"language-text\">dispatch</code>. Hàm <code class=\"language-text\">dispatch</code> thì đặc biệt là nó không được import, mình có thể gọi <code class=\"language-text\">store.dispatch(someAction)</code>, nhưng cái store này thì nó năm ở trong 1 file thôi, Vậy hàm <code class=\"language-text\">dispatch</code> này làm sao có đây?</p>\n<p>Thật ra lúc chúng ta gọi <code class=\"language-text\">connect</code> thì hàm <code class=\"language-text\">connect</code> cũng đã <em>map</em> cái hàm <code class=\"language-text\">dispatch</code> vào trong props của component luôn.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'INCREMENT'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'DECREMENT'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Counter</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">decrement</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">increment</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Counter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n","cover_image":""}},{"node":{"id":"e0a65fb71b048a3e4e4569e089a64b09","title":"8 câu điều kiện khi render trong React","path":"/8-cau-dieu-kien-khi-render-trong-react/","date":"2018-03-05","timeToRead":3,"desc":"Tutorial này sẽ cover những câu điều kiện dùng để render component phổ biến nhất","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#ifelse\">If/Else</a></li>\n<li><a href=\"#ko-render-v%E1%BB%9Bi-null\">Ko render với <code class=\"language-text\">null</code></a></li>\n<li><a href=\"#%C4%91%E1%BA%B7t-bi%E1%BA%BFn-cho-element\">Đặt biến cho element</a></li>\n<li><a href=\"#c%C3%A2u-%C4%91i%E1%BB%81u-ki%E1%BB%87n-r%C3%BAt-g%E1%BB%8Dn\">Câu điều kiện rút gọn</a></li>\n<li><a href=\"#short-circuit-operator-\">Short-circuit operator (&#x26;&#x26;)</a></li>\n<li><a href=\"#immediately-invoked-function-expressions-iife\">Immediately-invoked function expressions (IIFE)</a></li>\n<li><a href=\"#subcomponents\">Subcomponents</a></li>\n<li><a href=\"#higher-order-component-hoc\">Higher-Order Component (HOC)</a></li>\n</ul>\n<!-- /TOC -->\n<h1 id=\"ifelse\"><a href=\"#ifelse\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>If/Else</h1>\n<p>Dễ nhất và căn bản nhất</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mode</span> <span class=\"token operator\">===</span> <span class=\"token string\">'view'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"ko-render-với-null\"><a href=\"#ko-render-v%E1%BB%9Bi-null\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ko render với <code class=\"language-text\">null</code></h1>\n<p>Nếu không muốn render một component, trong hàm return trả về giá trị <code class=\"language-text\">null</code>, lưu ý khi return null nhưng hàm render vẫn được gọi.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mode</span> <span class=\"token operator\">===</span> <span class=\"token string\">'view'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token keyword null nil\">null</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"đặt-biến-cho-element\"><a href=\"#%C4%91%E1%BA%B7t-bi%E1%BA%BFn-cho-element\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đặt biến cho element</h1>\n<p>Giờ nếu không muốn thêm câu <code class=\"language-text\">else</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> input<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mode</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'view'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      input <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n      \n    <span class=\"token keyword control-flow\">return</span> input<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"câu-điều-kiện-rút-gọn\"><a href=\"#c%C3%A2u-%C4%91i%E1%BB%81u-ki%E1%BB%87n-r%C3%BAt-g%E1%BB%8Dn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Câu điều kiện rút gọn</h1>\n<p>Thay gì <code class=\"language-text\">if/else</code>, có thể dùng câu điều kiện rút gọn để render luôn</p>\n<pre class=\"language-text\"><code class=\"language-text\">điều kiện ? nếu true : nếu false</code></pre>\n<p>Sử dụng với ví dụ trên</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mode</span> <span class=\"token operator\">===</span> <span class=\"token string\">'view'</span> <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> : null}\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    )\n}</span></code></pre>\n<p>Gọn gàng sạch sẽ hơn, tuy nhiên cũng đừng lạm dụng quá, có anh bạn làm chung với mình, lạm dụng cách này quá lố, đến nổi mỗi lần đọc code của anh ấy là cơn ác mộng, mặc dù không sai, nhưng thằng nào code sau mở lên đọc tội nó lắm.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span> condition1\n      <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component1</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span> condition2\n        <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component2</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span> condition3\n          <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component3</span></span> <span class=\"token punctuation\">/></span></span>\n          <span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token attr-name\">4</span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h1 id=\"short-circuit-operator-\"><a href=\"#short-circuit-operator-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Short-circuit operator (&#x26;&#x26;)</h1>\n<p>Trong trường hợp trên, rõ ràng việc trả về <code class=\"language-text\">null</code> cũng hơi dư thừa, có thể sử dụng ngắn-hơn-cả-ngắn với cú pháp <code class=\"language-text\">&amp;&amp;</code>. Cũng như câu điều kiện rút gọn, tuy nhiên nó sẽ chỉ render nếu <code class=\"language-text\">true</code>, con <code class=\"language-text\">false</code> nó sẽ không làm gì cả</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mode</span> <span class=\"token operator\">===</span> <span class=\"token string\">'view'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">}\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    )\n}</span></code></pre>\n<h1 id=\"immediately-invoked-function-expressions-iife\"><a href=\"#immediately-invoked-function-expressions-iife\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Immediately-invoked function expressions (IIFE)</h1>\n<p>IIFE như tên gọi nó đã nói lên tất cả, hàm sẽ thực thi ngay khi nó được định nghĩa.</p>\n<p>Bình thường</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Để biến nó thành IIFE, convert nó qua thành một expression</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* tham số*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">/* tham số*/</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// viêt như vầy cũng được nha</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* tham số*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">/* tham số*/</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// hoặc bỏ luôn tên</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* tham số*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">/* tham số*/</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// hoặc dùng luôn arrow function cho máu</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* tham số*/</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">/* tham số*/</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Giờ thì dùng IIFE với component</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>\n              <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> view \n                    <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleEdit</span> \n                    <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleSave</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> label <span class=\"token operator\">=</span> view <span class=\"token operator\">?</span> <span class=\"token string\">'Edit'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Save'</span><span class=\"token punctuation\">;</span>\n              \n                <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n                  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handler<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                    </span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n                  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token plain-text\">  \n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"subcomponents\"><a href=\"#subcomponents\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Subcomponents</h1>\n<p>Nếu thấy dùng IFEE có vẻ hơi khó chịu, chúng ta đang làm React, tất cả hãy đưa về component, tách phần logic của component và phần render cái view ra luôn là đều được khuyến cáo, declarative vs. imperative programing</p>\n<p>Vậy nên chuyển các điều kiện này sang một sub component để render dựa trên <code class=\"language-text\">props</code> luôn là ý hay.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">const</span> view <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mode</span> <span class=\"token operator\">===</span> <span class=\"token string\">'view'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>\n              view\n                <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">EditComponent</span></span> <span class=\"token attr-name\">handleEdit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleEdit</span><span class=\"token punctuation\">}</span></span>  <span class=\"token punctuation\">/></span></span>\n                <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n                  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SaveComponent</span></span> \n                   <span class=\"token attr-name\">handleChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleChange</span><span class=\"token punctuation\">}</span></span>\n                   <span class=\"token attr-name\">handleSave</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleSave</span><span class=\"token punctuation\">}</span></span>\n                   <span class=\"token attr-name\">text</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputText</span><span class=\"token punctuation\">}</span></span>\n                 <span class=\"token punctuation\">/></span></span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token plain-text\"> \n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Hoặc trong React-Router-4 mỗi route là một <code class=\"language-text\">If component</code> với cách thức vận hành như sao</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">If</span></span>\n    <span class=\"token attr-name\">condition</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span> view <span class=\"token punctuation\">}</span></span>\n    <span class=\"token attr-name\">then</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span> editComponent <span class=\"token punctuation\">}</span></span>\n    <span class=\"token attr-name\">else</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span> editComponent <span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">/></span></span>\n\n<span class=\"token comment\">// Component Route trong React-Router</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>/<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Home</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p>Đọc thêm về <a href=\"/2018-01-12-react-router-dom-gioi-thieu-react-router-4\">React-Router-4</a></p>\n<h1 id=\"higher-order-component-hoc\"><a href=\"#higher-order-component-hoc\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Higher-Order Component (HOC)</h1>\n<p>Sử dụng HOC để truyền xuống một <code class=\"language-text\">prop</code> dựa trên kiểm tra logic</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">higherOrderComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">EnhancedComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AnotherComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span> <span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AnotherComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span> <span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đọc thêm về <a href=\"/2018-03-02-gioi-thieu-higher-order-component-trong-react\">HOCs tại đây</a></p>\n","cover_image":""}},{"node":{"id":"2357b01f4fedb762de94f08f22517a13","title":"Giới thiệu Higher-Order Component trong React","path":"/gioi-thieu-higher-order-component-trong-react/","date":"2018-03-02","timeToRead":2,"desc":"Higher-Order Component (HOC) là kỹ thuật mà các bạn lập trình viên Việt Nam rất thích khi nhắc đến React, riêng mình thì không","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#t%E1%BB%95ng-quan\">Tổng quan</a></li>\n<li><a href=\"#higher-order-function\">Higher-Order Function</a></li>\n<li><a href=\"#higher-order-component\">Higher-Order Component</a></li>\n</ul>\n<!-- /TOC -->\n<p>HOC nghe khá trừu tượng và cao siêu, một cái tên sang chảnh cho một cách làm trong React, nó cũng có cái hạn chế và ưu điểm riêng, tuy nhiên thích thì học thôi.</p>\n<h2 id=\"ôn-lại-currying-function\"><a href=\"#%C3%B4n-l%E1%BA%A1i-currying-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ôn lại Currying function</h2>\n<p>Để đọc hiểu bài này dĩ nhiên cần nắm cơ bản ES6, hiểu cà-ri function là thế nào (Currying Functional Programming)</p>\n<p>Cà-ri function là cách viết tách một function nhận một đốn...ggggg arguments, tách function đó ra thành nhiều function con, mỗi function nhận 1 argument. Ví dụ</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// một hàm sum thông thường</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// cà-ri function</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">curriedSum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// viết hàm cà-ri bằng arrow function</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">curriedSum</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">a</span> <span class=\"token arrow operator\">=></span> <span class=\"token parameter\">b</span> <span class=\"token arrow operator\">=></span> a <span class=\"token operator\">+</span> b\n\n<span class=\"token comment\">//gọi hàm cà-ri</span>\n<span class=\"token function\">curriedSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Một số cách viết khác của ES6 tìm lại mấy bài cũ của mình <a href=\"/2016-11-15-chuong-1-es6-can-ban\">đã chia sẻ</a>.</p>\n<h2 id=\"higher-order-function\"><a href=\"#higher-order-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Higher-Order Function</h2>\n<p>Cái này không mới, trước đây trong javascript vẫn thường viết kiểu truyền một callback function (<em>vì trong javascript function được xem là object nên làm được chuyện này</em>), hay 1 function <strong>trả về một kết quả trả về</strong> của function khác.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">calculator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">inputFunction</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> resultValue <span class=\"token operator\">=</span> <span class=\"token function\">inputFunction</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>resultValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> resultValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>all</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> all<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">multiply</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>all</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> all<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> a<span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Ta có thể sử dụng hàm <code class=\"language-text\">calculator</code> như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">calculator</span><span class=\"token punctuation\">(</span>mutiply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 8</span>\n\n<span class=\"token function\">calculator</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 63</span></code></pre>\n<p>Các hàm như <code class=\"language-text\">add</code>, <code class=\"language-text\">multiply</code> chấp nhận số lượng input không giới hạn, hàm <code class=\"language-text\">calculator</code> sử dụng như một container, làm cha thiên hạ, sai hết đứa này tới đưa khác làm việc, <strong>extend</strong> thêm một số xử lý trước khi gọi hàm <code class=\"language-text\">add</code>, <code class=\"language-text\">multiply</code></p>\n<h1 id=\"higher-order-component\"><a href=\"#higher-order-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Higher-Order Component</h1>\n<p>Một higher-order component là một <strong>một function</strong> nhận vào một <code class=\"language-text\">component</code> như một argument và trả về \"phiên bản mở rộng\" của component đó.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token maybe-class-name\">InputComponent</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token maybe-class-name\">ExtendedComponent</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// hoặc</span>\n<span class=\"token parameter\"><span class=\"token maybe-class-name\">InputComponent</span></span> <span class=\"token arrow operator\">=></span> <span class=\"token maybe-class-name\">ExtendedComponent</span></code></pre>\n<p><code class=\"language-text\">ExtendedComponent</code> là một component container, nó trả về <code class=\"language-text\">InputComponent</code> với một số extend</p>\n<p><img src=\"https://cms-assets.tutsplus.com/uploads/users/1795/posts/30094/image/Introduction-To-Higher-Order-Components-in-React-Overview.jpg\" alt=\"Giới thiệu Higher-Order Components trong React\"></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withGreyBg</span> <span class=\"token operator\">=</span> <span class=\"token parameter\"><span class=\"token maybe-class-name\">WrappedComponent</span></span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NewComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> bgStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'grey'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>wrapper<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>bgStyle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WrappedComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">this</span><span class=\"token punctuation\">.</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">SmallCardWithGreyBg</span> <span class=\"token operator\">=</span> <span class=\"token function\">withGreyBg</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">SmallCard</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">BigCardWithGreyBg</span> <span class=\"token operator\">=</span> <span class=\"token function\">withGreyBg</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">BigCard</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">HugeCardWithGreyBg</span> <span class=\"token operator\">=</span> <span class=\"token function\">withGreyBg</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">HugeCard</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CardsDemo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SmallCardWithGreyBg</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">this</span><span class=\"token punctuation\">.</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BigCardWithGreyBg</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">this</span><span class=\"token punctuation\">.</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">HugeCardWithGreyBg</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"https://cms-assets.tutsplus.com/uploads/users/1795/posts/30094/image/Introduction-To-Higher-Order-Components-in-React-An-Example-HOC.jpg\" alt=\"Giới thiệu Higher-Order Components trong React\"></p>\n<h2 id=\"nhược-điểm\"><a href=\"#nh%C6%B0%E1%BB%A3c-%C4%91i%E1%BB%83m\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nhược điểm</h2>\n<ul>\n<li>Trong một số <a href=\"https://stackoverflow.com/questions/41084313/what-are-the-downsides-of-repeating-react-higher-order-components\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">trường hợp</a> sẽ làm ảnh hưởng đến hiệu năng, đến mức <a href=\"https://www.youtube.com/watch?v=zD_judE-bXk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Andrew Clark</a> phải build hẳn một thư viện để giải quyết vấn đề này</li>\n<li>Rõ ràng sẽ thấy HOC ko <strong>minh bạch</strong> trong việc đã <strong>extend</strong> những phần nào cho thằng con</li>\n<li>Nếu một component được bọc trong nhiều HOC cùng lúc, có thể sẽ <em>vô tình dẫm đạp</em> qua lại</li>\n<li>Debug cũng không dễ gì vì đang sử dụng arrow function, phải tung thêm chiêu <code class=\"language-text\">displayName</code></li>\n</ul>\n","cover_image":""}},{"node":{"id":"9fb0c6362096788ba892dbc1ce48951b","title":"Redux là gì và tại sao phải dùng?","path":"/redux-la-gi-va-tai-sao-phai-dung/","date":"2018-02-14","timeToRead":3,"desc":"Nếu đã đụng tới React thì sớm muộn gì bạn cũng sẽ nghe đến Redux","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#t%E1%BA%A1i-sao\">Tại sao?</a></li>\n<li><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81-l%C3%A0-data-flow-lu%E1%BB%93ng-d%E1%BB%AF-li%E1%BB%87u\">Vấn đề là: Data Flow (Luồng dữ liệu)</a></li>\n<li><a href=\"#k%E1%BA%BFt-n%E1%BB%91i-tr%E1%BB%B1c-ti%E1%BA%BFp-%C4%91%E1%BA%BFn-d%E1%BB%AF-li%E1%BB%87u-v%E1%BB%9Bi-redux\">Kết nối trực tiếp đến dữ liệu với Redux</a></li>\n<li><a href=\"#khi-n%C3%A0o-s%E1%BB%AD-d%E1%BB%A5ng-redux\">Khi nào sử dụng Redux</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"tại-sao\"><a href=\"#t%E1%BA%A1i-sao\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao?</h2>\n<p>Câu hỏi đầu tiên cần trả lời: Tại sao chúng ta cần Redux?</p>\n<p>Dĩ nhiên câu trả lời không phải là bởi vì ai trên mạng cũng bảo thế nên em phải xài nó.</p>\n<p>Redux được sử dụng rộng rãi vì nó giải quyết <strong>vấn đề</strong> mà chúng ta thường gặp khi làm Single Page App.</p>\n<p>Vấn đề \"State management\"? Không hề, bản thân React đã giải quyết State management rồi, Redux giúp quản lý <code class=\"language-text\">state</code>, nhưng nó không phải là <strong>vấn đề</strong> mấu chốt.</p>\n<h2 id=\"vấn-đề-là-data-flow-luồng-dữ-liệu\"><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81-l%C3%A0-data-flow-lu%E1%BB%93ng-d%E1%BB%AF-li%E1%BB%87u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vấn đề là: Data Flow (Luồng dữ liệu)</h2>\n<p>Nếu sử dụng React một thời gian, chúng ta thấy ngay <code class=\"language-text\">props</code> trong React là dữ liệu đi xuống theo 1 chiều từ trên xuống. Dữ liệu truyền xuống qua <code class=\"language-text\">props</code>.</p>\n<p>Ví dụ với <em>component</em> <code class=\"language-text\">Couter</code> như sau</p>\n<p><img src=\"https://daveceddia.com/images/counter-component.png\" alt=\"Redux là gì và tại sao phải dùng?\"></p>\n<p>Giá trị <code class=\"language-text\">count</code> lưu trong <em>state</em> của component <code class=\"language-text\">App</code>, được truyền xuống qua <em>props</em></p>\n<p><img src=\"https://daveceddia.com/images/passing-props-down.png\" alt=\"Redux là gì và tại sao phải dùng?\"></p>\n<p>Để dữ liệu đi ngược lên trên, có phải chúng ta sẽ có 1 hàm <em>callback</em>, hàm <em>callback</em> này được truyền xuống cho <strong>tất cả</strong> các component con, khi dữ liệu <code class=\"language-text\">count</code> thay đổi, chúng ta gọi lại hàm <em>callback</em> này để 'báo' cho <code class=\"language-text\">App</code> biết giá trị <code class=\"language-text\">count</code> đã thay đổi.</p>\n<p><img src=\"https://daveceddia.com/images/passing-callbacks-down.png\" alt=\"Redux là gì và tại sao phải dùng?\"></p>\n<p>Hình dung như thế này, dữ liệu như là nguồn điện ở nhà, muốn có điện từ nhà máy tới từng hộ dân ta cần đường dây điện được nối xuyên suốt từ nhà máy đến từng hộ dân, vì điện không thể truyền qua không khí như sóng điện thoại. Đó là cách React đưa dữ liệu đến các <em>component</em> con, với Redux chúng ta sẽ hỗ trợ dữ liệu đi qua đường sóng điện thoại.</p>\n<p>Sớm hay muộn gì bạn cũng rơi vào tình huống như trên, container ở trên cùng có một vài dữ liệu mà components bên dưới nó cũng cần dữ liệu tương tự. Lấy ví dụ như thông tin user trên trang Twitter</p>\n<p><img src=\"https://daveceddia.com/images/twitter-user-data.png\" alt=\"Redux là gì và tại sao phải dùng?\"></p>\n<p>Để đưa dữ liệu từ <code class=\"language-text\">App</code> xuống các <code class=\"language-text\">Avatar</code> components, bạn phải truyền dữ liệu này qua những component không cần thiết.</p>\n<p><img src=\"https://daveceddia.com/images/twitter-hierarchy.png\" alt=\"Redux là gì và tại sao phải dùng?\"></p>\n<h2 id=\"kết-nối-trực-tiếp-đến-dữ-liệu-với-redux\"><a href=\"#k%E1%BA%BFt-n%E1%BB%91i-tr%E1%BB%B1c-ti%E1%BA%BFp-%C4%91%E1%BA%BFn-d%E1%BB%AF-li%E1%BB%87u-v%E1%BB%9Bi-redux\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết nối trực tiếp đến dữ liệu với Redux</h2>\n<p>Sử dụng hàm <code class=\"language-text\">connect</code> trong Redux sẽ cho phép chúng ta kết nối bất kỳ <em>component</em> nào đến trung tâm của mọi dữ liệu, thích cái gì thì <em>map</em> nó vô component</p>\n<p><img src=\"https://daveceddia.com/images/redux-connected-twitter.png\" alt=\"Redux là gì và tại sao phải dùng?\"></p>\n<p>Bên cạnh đó nó còn có một số tính năng khác đi kèm, như giúp debug dễ hơn với Redux DevTools cho phép kiểm tra mỗi khi state thay đổi, time-travel debug cho phép roll back lại state trước đó</p>\n<p>Cách connect một component với Redux store</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Avatar</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">avatar</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  user<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token exports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Avatar</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Avatar</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Bản thân component <em>Avatar</em> không có gì khác biệt với component khác, nó sẽ nhận <code class=\"language-text\">props</code> và <code class=\"language-text\">render</code> ra như bình thường, hàm <code class=\"language-text\">connect</code> sẽ làm chuyện <em>map</em> cái state ở trong Redux store về thành <code class=\"language-text\">props</code>.</p>\n<h2 id=\"khi-nào-sử-dụng-redux\"><a href=\"#khi-n%C3%A0o-s%E1%BB%AD-d%E1%BB%A5ng-redux\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khi nào sử dụng Redux</h2>\n<ul>\n<li>Nếu các <em>component</em> được tổ chức theo cây như ví dụ ở trên</li>\n<li>Nếu cần lưu dữ liệu tạm thời giữa các view, thí dụ load dữ liệu ở trang list xong vô trang detail load dự liệu trang detail, rồi khi quay lại trang list không cần phải load dữ liệu lại lần nữa.</li>\n<li>Nếu ứng dụng lớn, quản lý dữ liệu nhiều.</li>\n</ul>\n","cover_image":""}},{"node":{"id":"c919a56a3b126ea31da9b991ff155b3d","title":"Giới thiệu React Router v4 (react router dom)","path":"/gioi-thieu-react-router-v4-react-router-dom/","date":"2018-01-12","timeToRead":6,"desc":"Trước đây có bài giới thiệu về React Router rồi, nhưng giờ React Router 4 ra, gần như đập đi làm lại chứ ko kế thừa nhiều.","content":"<p>Lúc đầu Michael and Ryan (2 tác giả của React Router) vốn là người viết Ember, chưa rõ cách vận hành lắm của React, nên lúc anh viết cái React Router thì cũng giống như Ember, Express, Angular, giờ khi 2 anh đã nắm vững React, 2 anh quyết định đập đi làm lại React Router để kế thừa những ý tưởng của React Component. Và ta có React Router v4 hoàn toàn mới so với bản cũ</p>\n<p>Chìa khóa để nắm rõ React Router v4, gọi react-router-dom đi hé, vì package giờ cũng đổi tên react-router-dom, là <strong>quên hết những gì về React Router</strong> từng biết, <strong>React Router là một component với hàm render ra một component khi đường dẫn thõa điều kiện trong path.</strong></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        React Router Course\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">App</span></code></pre>\n<p>Giờ import <code class=\"language-text\">BrowserRouter</code> rồi đổi tên lại thành <code class=\"language-text\">Router</code>, cái này ko bắt buộc mà đa phần người ta làm vậy quen rồi.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span>\n  <span class=\"token maybe-class-name\">BrowserRouter</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">Router</span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">Route</span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">Link</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-router-dom'</span></code></pre>\n<p>Thằng <code class=\"language-text\">BrowserRouter</code> này sẽ đưa tất cả thông tin <em>route</em> xuống cho tất cả các component con thông quan <code class=\"language-text\">context</code>. Giờ bọc nguyên cái app trong Router này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span>\n  <span class=\"token maybe-class-name\">BrowserRouter</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">Router</span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">Route</span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">Link</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-router-dom'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          React Router Course\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">App</span></code></pre>\n<p>Tiếp theo, ta sẽ sử dụng component <code class=\"language-text\">Route</code>, khi đường dẫn trình duyệt khớp với props <code class=\"language-text\">path</code> của thằng <code class=\"language-text\">Route</code> thì nó sẽ render ra component không thì trả về null</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span>\n  <span class=\"token maybe-class-name\">BrowserRouter</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">Router</span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">Route</span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">Link</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-router-dom'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Home</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Home</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">About</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">About</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Topics</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Topics</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>/<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Home</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>/about<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">About</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>/topics<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Topics</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">App</span></code></pre>\n<p>Cứ vậy, nếu muốn có thêm routes thì cứ add thêm các component <code class=\"language-text\">Route</code> này, khi user truy cập <code class=\"language-text\">/hello-viet-nam</code> thì chỉ component Home được render ra, 2 Route about và topics sẽ trả về null. Ở đây khi truy cập /about hay /topics thì component Home vẫn được render ra, nếu ko muốn render Home, thêm vào nó props là exact</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">exact</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>/<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Home</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p>Giờ thêm một thanh navigation để user có thể click chuyển qua lại giữa các 'trang', Link trong react-router-dom thì ko khác phiên bản trước</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>/<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Home</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>/about<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">About</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>/topics<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Topics</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>/<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Home</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>/about<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">About</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>/topics<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Topics</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Bây giờ bên trong component <code class=\"language-text\">Topics</code>, cứ vô tư lồng thêm Route vào như lồng <code class=\"language-text\">div</code> trong <code class=\"language-text\">div</code> thôi</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Topic</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">TOPIC</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Topics</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Topics</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/topics/rendering</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Rendering with React\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/topics/components</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Components\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/topics/props-v-state</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Props v. State\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/topics/rendering</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Topic</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/topics/components</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Topic</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/topics/props-v-state</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Topic</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Khi user truy cập vào /topics sẽ có một thanh navigation và một component <code class=\"language-text\">động</code> tùy thuộc vào routes (~ đường dẫn trên trình duyệt, gọi routes cho sang).</p>\n<p>Mà hardcode cái path thế này không hay, khi React Router render ra một component nó sẽ truyền vào 3 props cho component là: <code class=\"language-text\">match</code>, <code class=\"language-text\">location</code>, <code class=\"language-text\">history</code>. Trong ví dụ này nếu gọi <code class=\"language-text\">match.url</code> nó sẽ cho ta giá trị là <code class=\"language-text\">/topics</code>. Sửa lại component Topics một cách thông minh hơn</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Topic</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">TOPIC</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Topics</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> match <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Topics</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/rendering</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Rendering with React\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/components</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Components\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/props-v-state</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Props v. State\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/rendering</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Topic</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/components</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Topic</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/props-v-state</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Topic</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Ngoài url ra, thằng match còn có các params dường truyền vào</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Topics</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> match <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    ...\n\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/:topicId</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Topic</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//thằng con có thế lấy giá trị params topicId này</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Topic</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> match <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>match<span class=\"token punctuation\">.</span><span class=\"token property-access\">params</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">topicId</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Ví dụ muốn có một component hiển thị text là \"Ê chọn topic đi\" khi nó đang ở trang /topics, hãy nhớ Route cũng là component render một component khác theo điều kiện thôi mà</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">exact</span> <span class=\"token attr-name\">path</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>match<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Please select a topic.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span></code></pre>\n<p>Full Code</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span>\n  <span class=\"token maybe-class-name\">BrowserRouter</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">Router</span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">Route</span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">Link</span>\n<span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-router-dom'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Home</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Home</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">About</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">About</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Topic</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> match <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>match<span class=\"token punctuation\">.</span><span class=\"token property-access\">params</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">topicId</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Topics</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> match <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Topics</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/rendering</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Rendering with React\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/components</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Components\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/props-v-state</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Props v. State\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/:topicId</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Topic</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">exact</span> <span class=\"token attr-name\">path</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>match<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Please select a topic.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Home</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/about<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">About</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/topics<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Topics</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">exact</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Home</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/about<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">About</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/topics<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Topics</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">App</span></code></pre>\n<p>Thích câu này: Học React sẽ giúp bạn cứng javascript hơn, chơi với React Router 4 giúp bạn giỏi React hơn</p>\n","cover_image":""}},{"node":{"id":"449eea9422d09591cde689cb274c2924","title":"React Children và React cloneElement","path":"/react-children-va-react-clone-element/","date":"2017-10-27","timeToRead":2,"desc":"Tìm hiểu cách sử dụng react Children và react cloneElement","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#reactchildrenforeach\"><code class=\"language-text\">React.Children.forEach</code></a></li>\n<li><a href=\"#reactchildrencount\"><code class=\"language-text\">React.Children.count</code></a></li>\n<li><a href=\"#reactchildrentoarraychildren\"><code class=\"language-text\">React.Children.toArray(children)</code></a></li>\n<li><a href=\"#reactchildrenonly\"><code class=\"language-text\">React.Children.only</code></a></li>\n</ul>\n<!-- /TOC -->\n<p>Hãy nghĩ ngay tới cặp đôi <code class=\"language-text\">React.Children.map</code> và <code class=\"language-text\">React.cloneElement</code> khi cần truyền <code class=\"language-text\">props</code> từ component cha xuống các component con mà <strong>KHÔNG cần gọi render component bên trong component cha</strong></p>\n<p>Hơi mâu thuẫn vì không <code class=\"language-text\">render</code> component con vậy sao nó hiển thị, ví dụ đi</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">ComponentChaChu</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n     </span><span class=\"token punctuation\">{</span>\n        <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Children</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> <span class=\"token parameter\">child</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cloneElement</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n                style<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span>\n                    color<span class=\"token operator\">:</span> <span class=\"token string\">'white'</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Luckyluu</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">,</span> posts<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ComponentChaChu</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NavBar</span></span> <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ComponentChaChu</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>\n            posts<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span> <span class=\"token arrow operator\">=></span><span class=\"token punctuation\">(</span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ComponentChaChu</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PostHeader</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">post</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"> \n                    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ComponentChaChu</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PostBody</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">post</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Post</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>2 component con ở đây là <code class=\"language-text\">PostHeader</code> và <code class=\"language-text\">NavBar</code> có thể sử dụng ở bất kỳ đâu, còn <code class=\"language-text\">ComponentChaChu</code> có thể có bất kỳ đứa con nào, không cần biết sau này con nó là ai thì nó sẽ truyền hết tài sản là <code class=\"language-text\">backgroundColor</code> và <code class=\"language-text\">color</code> cho đứa con yêu dấu đó</p>\n<p>Sẵn tiện thì nói luôn một số <em>function</em> khác của <code class=\"language-text\">React.Children</code> luôn</p>\n<h2 id=\"reactchildrenforeach\"><a href=\"#reactchildrenforeach\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">React.Children.forEach</code></h2>\n<p>Giống như <code class=\"language-text\">React.Children.map</code> nhưng không trả về gì hết</p>\n<h2 id=\"reactchildrencount\"><a href=\"#reactchildrencount\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">React.Children.count</code></h2>\n<p>Nhà có nhiêu đứa con ?</p>\n<h2 id=\"reactchildrentoarraychildren\"><a href=\"#reactchildrentoarraychildren\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">React.Children.toArray(children)</code></h2>\n<p>Convert component con về <code class=\"language-text\">array</code></p>\n<h2 id=\"reactchildrenonly\"><a href=\"#reactchildrenonly\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">React.Children.only</code></h2>\n<p>Để áp dụng chương trình kế hoạch hóa gia đình, mỗi component cha chỉ có <strong>1</strong> và phải có 1 con duy nhất, quăng cái thông báo nếu không đáp ứng yêu cầu này.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BaBa</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu bắt buộc con thằng <code class=\"language-text\">BaBa</code> phải là <code class=\"language-text\">function</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token maybe-class-name\">BaBa</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">propTypes</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    children<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">propTypes</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">func</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isRequired</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nó log ra thông báo lỗi khi truyền vào con không phải là <code class=\"language-text\">function</code>, dev lười biến có thể 'cho qua' thông báo này. Nhưng khi mình bắt buộc kiểu này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BaBa</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Children</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">only</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu không có con là app chết luôn, cho các anh dev không còn lười biếng, giống kiểu mấy người xưa ko có con là không có được vây. ;)</p>\n","cover_image":""}},{"node":{"id":"bf4e1b9fbb5e25cb5df5a22e50560552","title":"Giải thích React Component Lifecycle","path":"/giai-thich-react-component-lifecycle/","date":"2017-10-20","timeToRead":4,"desc":"Tìm hiểu vòng đời của một Component React, khi nào và sử dụng ra sao","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#render\">render()</a></li>\n<li><a href=\"#constructorprops\">constructor(props)</a></li>\n<li><a href=\"#componentdidmount\">componentDidMount()</a></li>\n<li><a href=\"#componentdidupdateprevprops-prevstate-snapshot\">componentDidUpdate(prevProps, prevState, snapshot)</a></li>\n<li><a href=\"#componentwillunmount\">componentWillUnmount</a></li>\n<li><a href=\"#shouldcomponentupdatenextprops-nextstate\">shouldComponentUpdate(nextProps, nextState)</a></li>\n<li><a href=\"#static-getderivedstatefrompropsprops-state\">static getDerivedStateFromProps(props, state)</a></li>\n<li><a href=\"#getsnapshotbeforeupdateprevprops-prevstate\">getSnapshotBeforeUpdate(prevProps, prevState)</a></li>\n<li><a href=\"#componentdidcatcherror-info\">componentDidCatch(error, info)</a></li>\n</ul>\n<!-- /TOC -->\n<p><img src=\"https://cdn-images-1.medium.com/max/1800/0*OoDfQ7pzAqg6yETH.\" alt=\"Giải thích React Component Lifecycle\"></p>\n<p>Để thực sự trở thành một master React, việc hiểu lifecycle của component là bắt buộc.</p>\n<p>Các phương thức của lifecycle là một dạng <code class=\"language-text\">hook</code> (giống như khái niệm <code class=\"language-text\">hook</code> trong wordpress)</p>\n<p>Có thể group các phương thức lifecycle ra 3 nhóm, ứng với 4 giai đoạn của component: <strong>Mounting</strong>, <strong>Updating</strong>, <strong>Unmounting</strong>, <strong>Error Handling</strong></p>\n<p><strong>Mounting</strong></p>\n<p>Nó sẽ theo thứ tự sau</p>\n<ol>\n<li>constructor()</li>\n<li>static getDerivedStateFromProps()</li>\n<li>render()</li>\n<li>componentDidMount()</li>\n</ol>\n<p><strong>Updating</strong></p>\n<p>Các phương thức này sẽ được gọi khi có sự thay đổi của <code class=\"language-text\">state</code> hoặc <code class=\"language-text\">props</code></p>\n<ol>\n<li>static getDerivedStateFromProps()</li>\n<li>shouldComponentUpdate()</li>\n<li>render()</li>\n<li>getSnapshotBeforeUpdate()</li>\n<li>componentDidUpdate()</li>\n</ol>\n<p><strong>Unmounting</strong></p>\n<p>Phương thức được gọi trước khi remove component khỏi DOM</p>\n<ol>\n<li>componentWillUnmount()</li>\n</ol>\n<p><strong>Error Handling</strong></p>\n<p>Bất kể lỗi ở đâu trong component, nó sẽ gọi đến phương thức này</p>\n<ol>\n<li>componentDidCatch()</li>\n</ol>\n<h1 id=\"render\"><a href=\"#render\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>render()</h1>\n<p>Đây là phương thức bắt buộc duy nhất khi tạo ra một component, bắt buộc trả về một trong những giá trị</p>\n<ul>\n<li>React element</li>\n<li>Arrays and fragments</li>\n<li>Portals</li>\n<li>String and numbers</li>\n<li>Booleans or null</li>\n</ul>\n<p><strong>Hàm này sẽ không được gọi nếu <code class=\"language-text\">shouldComponentUpdate()</code> return false</strong></p>\n<h1 id=\"constructorprops\"><a href=\"#constructorprops\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>constructor(props)</h1>\n<p>Phương thức khởi tạo một component, nếu không khởi tạo <code class=\"language-text\">state</code>, bind các phương thức, thì ko cần khai báo phương thức này.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clicker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n       clicks<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> \n      clicks<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">clicks</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<blockquote>\n<p>Đừng chuyển props sang state! Xử lý logic sẽ hết sức rắc rối về sau</p>\n</blockquote>\n<p>Đừng làm thế này nhé</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// DON'T DO THIS</span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span><span class=\"token property-access\">color</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"componentdidmount\"><a href=\"#componentdidmount\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>componentDidMount()</h1>\n<p>Component đã hiện hình, là lúc mà ta gọi AJAX</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://gitconnected.com'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        user<span class=\"token operator\">:</span> res<span class=\"token punctuation\">.</span><span class=\"token property-access\">user</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Có thể gọi <code class=\"language-text\">setState()</code> ở dòng đầu tiên của phương thức <code class=\"language-text\">componentDidMount()</code>, hàm <code class=\"language-text\">render()</code> sẽ được gọi lại một lần nữa, nhưng nó chỉ xảy ra trước khi trình duyệt update DOM, render chắc chắn sẽ gọi 2 lần, user có thể không nhận ra sự thay đổi này, tuy nhiên đây là nguyên nhân cho vấn đề với performance. Nhưng cần thiết trong trường hợp như modal hay tooltip chúng ta cần tính toán vị trí của DOM trước khi render</p>\n<h1 id=\"componentdidupdateprevprops-prevstate-snapshot\"><a href=\"#componentdidupdateprevprops-prevstate-snapshot\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>componentDidUpdate(prevProps, prevState, snapshot)</h1>\n<p>Ngay sau khi component được cập nhập, hook này sẽ được gọi. Không gọi trong lần render đầu. Đây cũng có thể là nơi để tạo một network request khi chúng ta so sánh <code class=\"language-text\">prop</code> hiện tại với <code class=\"language-text\">prop</code> ở thời điểm trước đó</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState<span class=\"token punctuation\">,</span> snapshot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Trường hợp thường dùng (đừng quên kiểm tra so sánh props):</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">userID</span> <span class=\"token operator\">!==</span> prevProps<span class=\"token punctuation\">.</span><span class=\"token property-access\">userID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">userID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu muốn gọi <code class=\"language-text\">setState</code> ở đây, phải đưa nó trong câu điều kiện, nếu không sẽ bị lặp vô tận</p>\n<p>Nếu có implement phương thức <code class=\"language-text\">getSnapshotBeforeUpdate()</code>, giá trị return của <code class=\"language-text\">getSnapshotBeforeUpdate()</code> sẽ được đưa vào <code class=\"language-text\">snapshot</code>, nếu không thì là <code class=\"language-text\">undefined</code></p>\n<p>Hàm này cũng không được gọi nếu <code class=\"language-text\">shouldComponentUpdate()</code> return false</p>\n<h1 id=\"componentwillunmount\"><a href=\"#componentwillunmount\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>componentWillUnmount</h1>\n<p>Có thể sử dụng để remove các listener, các hàm setInterval, cancel network request</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">resizeEventHandler</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"shouldcomponentupdatenextprops-nextstate\"><a href=\"#shouldcomponentupdatenextprops-nextstate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>shouldComponentUpdate(nextProps, nextState)</h1>\n<p>Có phương thức này để cải thiện performance của React, vì đôi lúc thay đổi <code class=\"language-text\">state</code> hoặc <code class=\"language-text\">props</code> ta không muốn cập nhập lại UI, chỉ cần cho hàm này return <code class=\"language-text\">false</code> (mặc định là return <code class=\"language-text\">true</code>), khi return <code class=\"language-text\">false</code> thì <code class=\"language-text\">render</code>, <code class=\"language-text\">componentDidUpdate</code> sẽ không được gọi.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">clicks</span> <span class=\"token operator\">!==</span> nextProps<span class=\"token punctuation\">.</span><span class=\"token property-access\">clicks</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"static-getderivedstatefrompropsprops-state\"><a href=\"#static-getderivedstatefrompropsprops-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>static getDerivedStateFromProps(props, state)</h1>\n<p>Được gọi trước khi xuống <code class=\"language-text\">render</code>, có thể return một object để update state, hoặc <code class=\"language-text\">null</code></p>\n<p>Rất hiếm khi sử dụng, chỉ khi giá trị của <code class=\"language-text\">state</code> phụ thuộc vào <code class=\"language-text\">prop</code></p>\n<p>Nên hạn chế sử dụng hàm này, vì làm logic hiển thị của component rất ư khó hiểu, hãy nghĩ đến những cách implement đơn giản hơn bằng những lifecycle khác.</p>\n<h1 id=\"getsnapshotbeforeupdateprevprops-prevstate\"><a href=\"#getsnapshotbeforeupdateprevprops-prevstate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>getSnapshotBeforeUpdate(prevProps, prevState)</h1>\n<p>Gọi ngay trước khi render xuống DOM, cho phép lấy một số thông tin của DOM (ví dụ vị trí thanh scroll), các giá trị return từ hàm này sẽ đưa cho <code class=\"language-text\">componentDidUpdate()</code></p>\n<h1 id=\"componentdidcatcherror-info\"><a href=\"#componentdidcatcherror-info\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>componentDidCatch(error, info)</h1>\n<p>Nếu một component nào đó bị lỗi nó sẽ không chết nguyên cái app nữa mà sẽ quăn lỗi ở đây, sử dụng để hiển thị lỗi lên UI</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ErrorBoundary</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> hasError<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Display fallback UI</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hasError<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// You can also log the error to an error reporting service</span>\n    <span class=\"token function\">logErrorToMyService</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">hasError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// You can render any custom fallback UI</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Something went wrong.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ErrorBoundary</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyWidget</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ErrorBoundary</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p><a href=\"https://reactjs.org/docs/react-component.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tài liệu đầy đủ chính thức của React Lifecycle</a></p>\n","cover_image":""}},{"node":{"id":"40cc46c7d4b3636c0af94b280aa14af6","title":"React Bind Pattern: 5 cách chỉ định tham chiếu this","path":"/react-bind-pattern-5-cach-chi-dinh-tham-chieu-this/","date":"2017-10-11","timeToRead":1,"desc":"Để thay đổi ngữ cảnh của chữ this trong javascript, sử dụng ở đâu và như thế nào cho hợp lý nhất","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-reactcreateclass\">Sử dụng <code class=\"language-text\">React.createClass</code></a></li>\n<li><a href=\"#bind-trong-l%C3%BAc-render\">Bind trong lúc render</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-arrow-function\">Sử dụng Arrow function</a></li>\n<li><a href=\"#bind-trong-cunstructor\">Bind trong cunstructor</a></li>\n<li><a href=\"#s%E1%BB%AD--d%E1%BB%A5ng-arrow-function-trong-thu%E1%BB%99c-t%C3%ADnh-c%E1%BB%A7a-class\">Sử  dụng <code class=\"language-text\">Arrow Function</code> trong thuộc tính của class</a></li>\n</ul>\n<!-- /TOC -->\n<h1 id=\"sử-dụng-reactcreateclass\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-reactcreateclass\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng <code class=\"language-text\">React.createClass</code></h1>\n<p>Nếu sử dụng <code class=\"language-text\">React.createClass</code> react tự động <strong>bind toàn bộ</strong> từ khóa <code class=\"language-text\">this</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Contacts</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handChange</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Tuy nhiên từ khi ES6 có hỗ trợ <code class=\"language-text\">class</code>, React.createClass có thể bị tách ra các release trong tương lai.</p>\n<h1 id=\"bind-trong-lúc-render\"><a href=\"#bind-trong-l%C3%BAc-render\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bind trong lúc render</h1>\n<p>Nếu khai báo một component React bằng cách <code class=\"language-text\">extends React.Component</code>, <code class=\"language-text\">this</code> sẽ không được tự động bind như đã nói ở trên</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Contacts</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">handChange</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Cách này tuy là sạch sẽ gọn ràng dễ hiểu, tuy nhiên lại ảnh hưởng nhiều tới performance vì mỗi function sẽ <em>reallocated</em> lúc render. <strong>Kinh nghiệm không bind bằng cách này</strong></p>\n<h1 id=\"sử-dụng-arrow-function\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-arrow-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Arrow function</h1>\n<p>Tương tự như cách trên, sử dụng <strong>arrow function</strong> để không thay đổi giá trị của <code class=\"language-text\">this</code> lúc render</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Contacts</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handChange</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Cách này cũng không nên làm vì ảnh hương tới performance luôn</p>\n<h1 id=\"bind-trong-cunstructor\"><a href=\"#bind-trong-cunstructor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bind trong cunstructor</h1>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleChange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đây là cách được khuyến cáo sử dụng, nếu thật sự quan tâm tới performance thì nên sử dụng cách này khi muốn bind từ khóa <code class=\"language-text\">this</code>.</p>\n<h1 id=\"sử--dụng-arrow-function-trong-thuộc-tính-của-class\"><a href=\"#s%E1%BB%AD--d%E1%BB%A5ng-arrow-function-trong-thu%E1%BB%99c-t%C3%ADnh-c%E1%BB%A7a-class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử  dụng <code class=\"language-text\">Arrow Function</code> trong thuộc tính của class</h1>\n<p>Muốn sử dụng cách này, phải bật tính năng <em>transform-class-properties</em> trong Babel, xem thêm package này tại <a href=\"http://babeljs.io/docs/plugins/transform-class-properties\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://babeljs.io/docs/plugins/transform-class-properties</a></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function-variable function\">handleChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// call this function from render </span>\n  <span class=\"token comment\">// and this.whatever in here works fine.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Đây cũng là cách mà mình thường sử dụng nhất vì vừa sạch vừa tốt cho performance</p>\n","cover_image":""}},{"node":{"id":"8905cbcbcbfca00a569175a000425311","title":"7 khái niệm JavaScript cần biết","path":"/7-khai-niem-java-script-can-biet/","date":"2017-09-25","timeToRead":4,"desc":"Một vài khái niệm căn bản trong javascript cần nắm nếu bạn là frontend developer","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#gi%C3%A1-tr%E1%BB%8B-vs-tham-chi%E1%BA%BFu\">Giá trị vs. Tham chiếu</a></li>\n<li><a href=\"#so-s%C3%A1nh--v%C3%A0-\">So sánh <code class=\"language-text\">==</code> và <code class=\"language-text\">===</code></a></li>\n<li>\n<p><a href=\"#scope\">Scope</a></p>\n<ul>\n<li><a href=\"#global-scope\">Global Scope</a></li>\n<li><a href=\"#local-scope\">Local scope</a></li>\n</ul>\n</li>\n<li><a href=\"#block-scope\">Block scope</a></li>\n<li><a href=\"#hoisting\">Hoisting</a></li>\n<li><a href=\"#closure\">Closure</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"giá-trị--tham-chiếu\"><a href=\"#gi%C3%A1-tr%E1%BB%8B--tham-chi%E1%BA%BFu\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giá trị # Tham chiếu</h2>\n<p>5 kiểu dữ liệu được lưu trữ ở dạng <strong>giá trị</strong> - <strong>primitive type</strong>:</p>\n<ul>\n<li><strong>Boolean</strong></li>\n<li><strong>null</strong></li>\n<li><strong>undefined</strong></li>\n<li><strong>String</strong></li>\n<li><strong>Number</strong></li>\n</ul>\n<p>Khi <em>copy</em> giá trị của biến này cho biến khác, 2 giá trị này hoàn toàn độc lập không có liên hệ gì với nhau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\na <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></code></pre>\n<p>3 kiểu dữ liệu được lưu trữ ở dạng <strong>tham chiếu</strong> - <strong>Object type</strong>:</p>\n<ul>\n<li><strong>Array</strong></li>\n<li><strong>Function</strong></li>\n<li><strong>Object</strong></li>\n</ul>\n<p>Nó không mang giá trị mà chỉ <strong>tham chiếu</strong> đến <strong>vùng lưu trữ</strong> của đối tượng đó trong bộ nhớ.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> refArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n\nrefArr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> refArrr<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"so-sánh--và-\"><a href=\"#so-s%C3%A1nh--v%C3%A0-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>So sánh <code class=\"language-text\">==</code> và <code class=\"language-text\">===</code></h2>\n<p>Khi thực hiện so sánh <code class=\"language-text\">=</code> trên biến kiểu tham chiếu, trả về <code class=\"language-text\">true</code> khi cả 2 biến số <strong>cùng trỏ về một dùng nhớ</strong> chứ không phải so sánh giá trị của 2 biến.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> arrRef <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Hi!'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arrRef2 <span class=\"token operator\">=</span> arrRef<span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arrRef <span class=\"token operator\">===</span> arrRef2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -> true</span>\n\n<span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Hi!'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Hi!'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr1 <span class=\"token operator\">===</span> arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -> false</span></code></pre>\n<h2 id=\"scope---khu-vực-hoạt-động-phạm-vi-lãnh-thổ\"><a href=\"#scope---khu-v%E1%BB%B1c-ho%E1%BA%A1t-%C4%91%E1%BB%99ng-ph%E1%BA%A1m-vi-l%C3%A3nh-th%E1%BB%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Scope - khu vực hoạt động, phạm vi lãnh thổ</h2>\n<h3 id=\"global-scope---công-dân-toàn-cầu\"><a href=\"#global-scope---c%C3%B4ng-d%C3%A2n-to%C3%A0n-c%E1%BA%A7u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Global Scope - công dân toàn cầu</h3>\n<p>Nếu là một biến có phạm <strong>lãnh thổ</strong> là <strong>global scope</strong>, điều đó có nghĩa anh ấy là công dân toàn cầu, hàng ngôi sao quốc tế, ai cũng biết anh ấy là ai.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"luckyluu\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// luckyluu</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">logName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">logName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// luckyluu</span></code></pre>\n<h3 id=\"local-scope\"><a href=\"#local-scope\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Local scope</h3>\n<p>Nếu anh bạn tên \"biến\" của chúng ta chỉ là vô danh tiểu tốt, local scope, thì anh ấy chỉ được biết đến bởi <em>dân địa phương</em>, nơi anh ấy đăng ký hộ khẩu thường trú.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Global Scope</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">someFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Local Scope #1</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">someOtherFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Local Scope #2</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Global Scope</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">anotherFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Local Scope #3</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Global Scope</span></code></pre>\n<h3 id=\"block-scope\"><a href=\"#block-scope\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Block scope</h3>\n<p>Những câu khai báo như <code class=\"language-text\">if</code>, <code class=\"language-text\">switch</code>, <code class=\"language-text\">for</code>, <code class=\"language-text\">while</code> không giống như <code class=\"language-text\">function</code> bình thường, anh bạn <em>biến</em> lúc này con được biết đến ở <em>toàn tỉnh</em> do nhà anh ấy nằm thuộc diện cocc</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// câu lệnh điều kiện 'if' không tạo ra một scope mới</span>\n    <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Con ông If'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// name vẫn là global scope</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 'Con ông If'</span></code></pre>\n<p>Trong ES6, để tránh sự nhập nhằn này, khai báo biến bằng <code class=\"language-text\">let</code>,<code class=\"language-text\">const</code> chớ có dại dùng <code class=\"language-text\">var</code> để khai báo.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// name = global scope</span>\n    <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Con ông If'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// likes = local scope</span>\n    <span class=\"token keyword\">let</span> likes <span class=\"token operator\">=</span> <span class=\"token string\">'luckyluu'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// skills = local scope</span>\n    <span class=\"token keyword\">const</span> skills <span class=\"token operator\">=</span> <span class=\"token string\">'JavaScript and PHP'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Con ông If'</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>likes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Uncaught ReferenceError: likes is not defined</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>skills<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Uncaught ReferenceError: skills is not defined</span></code></pre>\n<h2 id=\"hoisting\"><a href=\"#hoisting\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hoisting</h2>\n<p>Một đặc điểm của Javascript, biến có thể được <strong>sử dụng trước, khai báo sau</strong>! Viết như sau là hoàn toàn hợp lệ trong javascript</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// gán giá trị 5 cho biến x chưa được khai báo</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// khai báo biến x</span>\n<span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span></code></pre>\n<p>Do đó <strong>luôn như khai báo biến trước khi sử dụng</strong> là  nguyên tắc gối đầu của mọi frontend developer, nếu không có thể xảy ra trường hợp sau</p>\n<pre class=\"language-js\"><code class=\"language-js\">​<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Michael Jackson\"</span><span class=\"token punctuation\">;</span>\n​\n​<span class=\"token keyword\">function</span> <span class=\"token function\">showCelebrityName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n​\n​<span class=\"token keyword\">function</span> <span class=\"token function\">showOrdinaryPersonName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">\"Johnny Evers\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">showCelebrityName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Michael Jackson​​</span>\n​\n<span class=\"token function\">showOrdinaryPersonName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Johnny Evers​</span>\n​\n<span class=\"token comment\">// biến toàn cục name giờ đây sẽ bị change giá trị thành Johnny Evers ​</span>\n<span class=\"token function\">showCelebrityName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Johnny Evers​</span>\n​\n​<span class=\"token comment\">// luôn nhớ khai báo biến bằng var,let,const</span>\n​<span class=\"token keyword\">function</span> <span class=\"token function\">showOrdinaryPersonName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Johnny Evers\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Thậm chí khi khai báo biến kèm giá trị cho nó mà không dùng từ khóa <code class=\"language-text\">var</code>, biến đó sẽ trở thành biến toàn cục</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">showAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    age <span class=\"token operator\">=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// nực cười chưa</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">showAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 90</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 90</span></code></pre>\n<h2 id=\"closure\"><a href=\"#closure\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Closure</h2>\n<p>Closure ám chỉ một cơ chế hoạt động, một function bên trong một function khác lại <strong>truy cập được</strong> các biến của function ngoài, nghĩa là nó vi phạm nguyên lý biến không cùng <strong>scope</strong> thì KO được dò xét lẫn nhau, chuyện này lại <strong>làm được</strong> nếu 2 function nó là cha con với nhau.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">showName</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span> lastName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ​<span class=\"token keyword\">var</span> nameIntro <span class=\"token operator\">=</span> <span class=\"token string\">\"Your name is \"</span><span class=\"token punctuation\">;</span>\n    ​<span class=\"token keyword\">function</span> <span class=\"token function\">makeFullName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ​<span class=\"token keyword control-flow\">return</span> nameIntro <span class=\"token operator\">+</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    ​\n    ​<span class=\"token keyword control-flow\">return</span> <span class=\"token function\">makeFullName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n​\n<span class=\"token function\">showName</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Michael\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jackson\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Your name is Michael Jackson</span></code></pre>\n<p>Như vậy chưa đủ quá đáng, nó còn có thể truy cập <strong>ngay cả khi function ngoài (cha) đã return</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">celebrityName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> nameIntro <span class=\"token operator\">=</span> <span class=\"token string\">\"This celebrity is \"</span><span class=\"token punctuation\">;</span>\n  ​\n  <span class=\"token keyword\">function</span> <span class=\"token function\">lastName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">theLastName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> nameIntro <span class=\"token operator\">+</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> theLastName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> lastName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n​\n​<span class=\"token keyword\">var</span> mjName <span class=\"token operator\">=</span> <span class=\"token function\">celebrityName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Michael\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n​\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token function\">mjName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jackson\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// This celebrity is Michael Jackson</span></code></pre>\n<p>Tận dụng đặc điểm này của closure function, tạm gọi là cha truyền con nối, lưu tham chiếu đến biến của function ngoài mà không lưu giá trị, ta có thể viết một function như class thế này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">celebrityID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> celebrityID <span class=\"token operator\">=</span> <span class=\"token number\">999</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">getID</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">return</span> celebrityID<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">setID</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">theNewID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            celebrityID <span class=\"token operator\">=</span> theNewID<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> myID <span class=\"token operator\">=</span> <span class=\"token function\">celebrityID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyID<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// return 999</span>\nmyID<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setID</span><span class=\"token punctuation\">(</span><span class=\"token number\">567</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyID<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// return 567</span></code></pre>\n<p>Đọc thêm chi tiết về bài viết clusure của mình trên <a href=\"https://developer.mozilla.org/vi/docs/Web/JavaScript/Closures\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mozilla.org</a></p>\n","cover_image":""}},{"node":{"id":"0be257d7b6339261c05ba76120350279","title":"Giới thiệu React Router","path":"/gioi-thieu-react-router/","date":"2017-07-31","timeToRead":4,"desc":"React không phải một framework, nó chỉ là một thư viện javascript, bởi vì vậy nó không thể giải quyết tất cả các yêu cầu một ứng dụng. Việc mà React làm rất tốt là tạo component và cách thức quản lý state của component, nhưng để tạo một Single Page App (sẽ viết tắt là SPA) phức tạp, nó cần những thư viện khác nữa, đầu tiên cần nhắc đến là React Router","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#gi%E1%BB%9Bi-thi%E1%BB%87u-v%E1%BB%81-react-router\">Giới thiệu về React Router</a></li>\n<li><a href=\"#nhi%E1%BB%81u-route\">Nhiều Route</a></li>\n<li><a href=\"#t%C3%A1i-s%E1%BB%AD-d%E1%BB%A5ng-component-v%E1%BB%9Bi-nested-route\">Tái sử dụng component với Nested Route</a></li>\n<li><a href=\"#indexroute\">IndexRoute</a></li>\n<li><a href=\"#m%E1%BB%99t-s%E1%BB%91-c%C3%A1ch-khai-b%C3%A1o-v%E1%BB%9Bi-route\">Một số cách khai báo với Route</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-link-component-%C4%91%E1%BB%ABng-s%E1%BB%AD-d%E1%BB%A5ng-tag-a\">Sử dụng Link component, đừng sử dụng tag a</a></li>\n<li><a href=\"#browser-history\">Browser History</a></li>\n<li><a href=\"#route-v%E1%BB%9Bi-parameter-string\">Route với parameter string</a></li>\n</ul>\n<!-- /TOC -->\n<h1 id=\"giới-thiệu-về-react-router\"><a href=\"#gi%E1%BB%9Bi-thi%E1%BB%87u-v%E1%BB%81-react-router\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giới thiệu về React Router</h1>\n<p>Cách tiếp cận của React Router không khác mấy so với các thư viện Router trước đây</p>\n<p>Ví dụ với 1 component <code class=\"language-text\">Home</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Home</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Welcome Home</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token maybe-class-name\">ReactDOM</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Home</span></span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Sử dụng với React-Router</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token maybe-class-name\">ReactDOM</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Home</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"> \n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Câu khai báo trên có thể diễn giải là với route \"/\" (tương đương với trang chủ), thì gọi <code class=\"language-text\">render</code> component <code class=\"language-text\">Home</code></p>\n<p>2 component <code class=\"language-text\">&lt;Router&gt;</code> và <code class=\"language-text\">&lt;Route&gt;</code> là những component React không render trong DOM, nếu <code class=\"language-text\">path</code> khớp với uri, nó render ra component chúng ta truyền vào cho nó (qua props component), chúng ta sẽ gặp lại khái niệm này thường xuyên: <strong>Một component bản thân không render trong DOM, mà render một component khác</strong></p>\n<h1 id=\"nhiều-route\"><a href=\"#nhi%E1%BB%81u-route\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nhiều Route</h1>\n<p>Xét ví dụ</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token maybe-class-name\">ReactDOM</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Home</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/tags<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">TagsPage</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/post/:id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Post</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>Với URL yourpage.com/ -> render component <code class=\"language-text\">Home</code></li>\n<li>Với URL yourpage.com/tags -> render component <code class=\"language-text\">TagsPage</code></li>\n<li>Với URL yourpage.com/post/12 -> render component <code class=\"language-text\">Post</code></li>\n</ul>\n<h1 id=\"tái-sử-dụng-component-với-nested-route\"><a href=\"#t%C3%A1i-s%E1%BB%AD-d%E1%BB%A5ng-component-v%E1%BB%9Bi-nested-route\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tái sử dụng component với Nested Route</h1>\n<p>Khai báo nested Route</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token maybe-class-name\">ReactDOM</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">MainLayout</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">SearchLayout</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>users<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">UserList</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> \n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Khi user truy cập đường dẫn <em>/users</em>, React Router sẽ render component <code class=\"language-text\">&lt;UserList /&gt;</code> bên trong component <code class=\"language-text\">&lt;SearchLayout/&gt;</code>, cả 2 component này lại đặt trong component <code class=\"language-text\">&lt;MainLayout/&gt;</code></p>\n<p>Nếu muốn trang chủ cũng render <code class=\"language-text\">&lt;MainLayout/&gt;</code> cùng với component <code class=\"language-text\">&lt;Home/&gt;</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token maybe-class-name\">ReactDOM</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">MainLayout</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Home</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">SearchLayout</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>users<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">UserList</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>widgets<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">WidgetList</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> \n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h1 id=\"indexroute\"><a href=\"#indexroute\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>IndexRoute</h1>\n<p>Thay vì viết như trên, có thể sử dụng component <code class=\"language-text\">IndexRoute</code> cũng cho cũng kết quả</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token maybe-class-name\">ReactDOM</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">MainLayout</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IndexRoute</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Home</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">SearchLayout</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>users<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">UserList</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>widgets<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">WidgetList</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> \n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h1 id=\"một-số-cách-khai-báo-với-route\"><a href=\"#m%E1%BB%99t-s%E1%BB%91-c%C3%A1ch-khai-b%C3%A1o-v%E1%BB%9Bi-route\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một số cách khai báo với Route</h1>\n<p>Nếu có một khai báo cho trang <em>User</em> như bên dưới</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user/settings<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">UserSettings</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user/inventory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">UserInventory</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user/orders<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">UserOrders</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p>Viết lại cho gọn</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>settings<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">UserSettings</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>inventory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">UserInventory</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>orders<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">UserOrders</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Cần bổ sung thêm component cho trang <code class=\"language-text\">/user</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IndexRoute</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">UserProfile</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>settings<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">UserSettings</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>inventory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">UserInventory</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>orders<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">UserOrders</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<h1 id=\"sử-dụng-link-component-đừng-sử-dụng-tag-a\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-link-component-%C4%91%E1%BB%ABng-s%E1%BB%AD-d%E1%BB%A5ng-tag-a\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Link component, đừng sử dụng tag a</h1>\n<p>Khi đã định nghĩa với Route, nếu muốn dẫn đến một route nào đó, sử dụng component <code class=\"language-text\">&lt;Link to=&quot;&quot; /&gt;</code> thay cho tag <code class=\"language-text\">&lt;a/&gt;</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary-header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>aside</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary-aside<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Home</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/user<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Users</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/user/settings<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Settings</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>aside</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Với <code class=\"language-text\">&lt;Link&gt;</code> nó biết khi nào đang active</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/users<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">activeClassName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>active<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Users</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<h1 id=\"browser-history\"><a href=\"#browser-history\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Browser History</h1>\n<p><code class=\"language-text\">&lt;Router&gt;</code> muốn hoạt động được, phải khai báo với <code class=\"language-text\">ReactRouter.browserHistory</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> browserHistory <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">ReactRouter</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">browserHistory</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token maybe-class-name\">ReactDOM</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span> <span class=\"token attr-name\">history</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>browserHistory<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Những version trước đây của React Router, attribute <code class=\"language-text\">history</code> có giá trị mặc định là hashHistory giống như router của Backbone.js, các version sau này, attribute history sẽ không có giá trị mặc định và bắt buộc phải khai báo khi sử dụng</p>\n<p>Nếu muốn redirect user đến một route nào đó</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\">browserHistory<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/some/path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h1 id=\"route-với-parameter-string\"><a href=\"#route-v%E1%BB%9Bi-parameter-string\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Route với parameter string</h1>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Route</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>users/:userId<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{UserProfile}</span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p>Component UserProfile sẽ được render trong các trường hợp: <code class=\"language-text\">users/1</code>, <code class=\"language-text\">users/145</code>, <code class=\"language-text\">users/abc</code>, React Router sẽ truyền vào giá trị <code class=\"language-text\">userId</code> vào UserProfile như một props, access đến giá trị này bằng <code class=\"language-text\">this.props.params.userId</code></p>\n","cover_image":""}},{"node":{"id":"800cb5408a7f326ad56eeb5a2dc01e29","title":"Interview React Developer thì hỏi gì?","path":"/interview-react-developer-thi-hoi-gi/","date":"2017-07-17","timeToRead":3,"desc":"Một vài câu hỏi để kiểm tra mức độ am hiểu react của một lập trình viên frontend","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#chuy%E1%BB%87n-g%C3%AC-x%E1%BA%A3y-ra-khi-g%E1%BB%8Di-setstate-\">Chuyện gì xảy ra khi gọi <code class=\"language-text\">setState</code> ?</a></li>\n<li><a href=\"#s%E1%BB%B1-kh%C3%A1c-nhau-gi%E1%BB%AFa-element-v%C3%A0-component-trong-react\">Sự khác nhau giữa Element và Component trong React?</a></li>\n<li><a href=\"#khi-n%C3%A0o-th%C3%AC-s%E1%BB%AD-d%E1%BB%A5ng-class-component-v%C3%A0-functional-component\">Khi nào thì sử dụng Class Component và Functional Component</a></li>\n<li><a href=\"#ref-trong-react-d%C3%B9ng-%C4%91%E1%BB%83-l%C3%A0m-g%C3%AC\"><code class=\"language-text\">Ref</code> trong React dùng để làm gì</a></li>\n<li><a href=\"#key-trong-react-l%C3%A0-g%C3%AC\">Key trong React là gì</a></li>\n<li><a href=\"#s%E1%BB%B1-kh%C3%A1c-nhau-gi%E1%BB%AFa-controlled-component-v%C3%A0-uncontrolled-component\">Sự khác nhau giữa controlled component và uncontrolled component</a></li>\n<li><a href=\"#%C4%91%E1%BB%83-g%E1%BB%8Di-ajax-s%E1%BB%AD-d%E1%BB%A5ng-s%E1%BB%B1-ki%E1%BB%87n-n%C3%A0o-c%E1%BB%A7a-lifecycle\">Để gọi AJAX, sử dụng sự kiện nào của lifecycle?</a></li>\n<li><a href=\"#shouldcomponentupdate-d%C3%B9ng-%C4%91%E1%BB%83-l%C3%A0m-g%C3%AC\"><code class=\"language-text\">shouldComponentUpdate</code> dùng để làm gì</a></li>\n<li><a href=\"#build-product-b%E1%BA%B1ng-c%C3%A1ch-n%C3%A0o\">Build Product bằng cách nào?</a></li>\n<li><a href=\"#t%E1%BA%A1i-sao-n%C3%AAn-s%E1%BB%AD-d%E1%BB%A5ng-reactchildrenmap-thay-v%C3%AC-propschildrenmap\">Tại sao nên sử dụng <code class=\"language-text\">React.Children.map()</code> thay vì <code class=\"language-text\">props.children.map()</code></a></li>\n<li><a href=\"#events-%C4%91%C6%B0%E1%BB%A3c-x%E1%BB%AD-l%C3%BD-trong-react-nh%C6%B0-th%E1%BA%BF-n%C3%A0o\">Events được xử lý trong React như thế nào?</a></li>\n<li><a href=\"#s%E1%BB%B1-kh%C3%A1c-nhau-gi%E1%BB%AFa-createelement-v%C3%A0-cloneelement\">Sự khác nhau giữa <code class=\"language-text\">createElement</code> và <code class=\"language-text\">cloneElement</code></a></li>\n<li><a href=\"#argument-th%E1%BB%A9-2-c%E1%BB%A7a-setstate-d%C3%B9ng-%C4%91%E1%BB%83-l%C3%A0m-g%C3%AC\">Argument thứ 2 của <code class=\"language-text\">setState</code> dùng để làm gì</a></li>\n<li><a href=\"#%C4%91o%E1%BA%A1n-code-sau-sai-%E1%BB%9F-%C4%91%C3%A2u\">Đoạn code sau sai ở đâu</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"chuyện-gì-xảy-ra-khi-gọi-setstate-\"><a href=\"#chuy%E1%BB%87n-g%C3%AC-x%E1%BA%A3y-ra-khi-g%E1%BB%8Di-setstate-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chuyện gì xảy ra khi gọi <code class=\"language-text\">setState</code> ?</h2>\n<p>Đầu tiên, object được truyền trong <code>setState</code> sẽ được merge với state hiện tại của component, dựa trên sự thay đổi của object này, UI được update với state mới.</p>\n<p>Để làm được chuyện này, React sẽ dựng một cây React Element mới, so sánh sự khác nhau của cây element mới và cây element trước đó, React biết được chính xác chỉ cần update phần UI nào đã bị thay đổi.</p>\n<h2 id=\"sự-khác-nhau-giữa-element-và-component-trong-react\"><a href=\"#s%E1%BB%B1-kh%C3%A1c-nhau-gi%E1%BB%AFa-element-v%C3%A0-component-trong-react\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sự khác nhau giữa Element và Component trong React?</h2>\n<p>React Element ám chỉ những gì thấy trên màn hình.</p>\n<p>React component là một function hoặc class có hoặc không có input và sẽ trả về một React element.</p>\n<h2 id=\"khi-nào-thì-sử-dụng-class-component-và-functional-component\"><a href=\"#khi-n%C3%A0o-th%C3%AC-s%E1%BB%AD-d%E1%BB%A5ng-class-component-v%C3%A0-functional-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khi nào thì sử dụng Class Component và Functional Component</h2>\n<p>Nếu component có state và các phương thức của lifecycle, sử dụng <strong>Class Component</strong>, ngược lại dùng <strong>functional component</strong></p>\n<h2 id=\"ref-trong-react-dùng-để-làm-gì\"><a href=\"#ref-trong-react-d%C3%B9ng-%C4%91%E1%BB%83-l%C3%A0m-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">Ref</code> trong React dùng để làm gì</h2>\n<p>Ref để truy cập trực tiếp đến DOM sau khi render</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<h2 id=\"key-trong-react-là-gì\"><a href=\"#key-trong-react-l%C3%A0-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Key trong React là gì</h2>\n<p>Key giúp React theo dõi sự thay đổi của một item trong list. Tại sao thêm key? để <strong>tối ưu performance</strong>, giúp React tìm nhanh tới element đó khi cần.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">todoItems</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task<span class=\"token punctuation\">,</span> uid</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>uid<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"sự-khác-nhau-giữa-controlled-component-và-uncontrolled-component\"><a href=\"#s%E1%BB%B1-kh%C3%A1c-nhau-gi%E1%BB%AFa-controlled-component-v%C3%A0-uncontrolled-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sự khác nhau giữa controlled component và uncontrolled component</h2>\n<p><strong>Controlled Component</strong>: <code class=\"language-text\">prop</code> hoặc <code class=\"language-text\">state</code> của component được gán cho giá trị DOM</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>text<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">username</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">updateUsername</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p><strong>Uncontrolled Component</strong>: giá trị của DOM thì do DOM quản</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>text<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<h2 id=\"để-gọi-ajax-sử-dụng-sự-kiện-nào-của-lifecycle\"><a href=\"#%C4%91%E1%BB%83-g%E1%BB%8Di-ajax-s%E1%BB%AD-d%E1%BB%A5ng-s%E1%BB%B1-ki%E1%BB%87n-n%C3%A0o-c%E1%BB%A7a-lifecycle\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Để gọi AJAX, sử dụng sự kiện nào của lifecycle?</h2>\n<p><code class=\"language-text\">componentDidMount</code></p>\n<h1 id=\"shouldcomponentupdate-dùng-để-làm-gì\"><a href=\"#shouldcomponentupdate-d%C3%B9ng-%C4%91%E1%BB%83-l%C3%A0m-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">shouldComponentUpdate</code> dùng để làm gì</h1>\n<p><code class=\"language-text\">shouldComponentUpdate</code> cho phép can thiệp quá trình update UI của component và các component con của nó. Nếu return <code class=\"language-text\">true</code> thì update, ngược lại <code class=\"language-text\">false</code></p>\n<h2 id=\"tại-sao-nên-sử-dụng-reactchildrenmap-thay-vì-propschildrenmap\"><a href=\"#t%E1%BA%A1i-sao-n%C3%AAn-s%E1%BB%AD-d%E1%BB%A5ng-reactchildrenmap-thay-v%C3%AC-propschildrenmap\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao nên sử dụng <code class=\"language-text\">React.Children.map()</code> thay vì <code class=\"language-text\">props.children.map()</code></h2>\n<p><code class=\"language-text\">props.children</code> chưa chắc lúc nào cũng là <code class=\"language-text\">array</code>. Ví dụ</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Parent</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Welcome.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Parent</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Nếu sử dụng <code class=\"language-text\">props.children.map</code> trong Parent sẽ bị lỗi vì <code class=\"language-text\">props.children</code> là một object không phải array.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Parent</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Welcome.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">props.children will now be an array</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Parent</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p><code class=\"language-text\">React.Children.map</code> cho phép <code class=\"language-text\">props.children</code> là <code class=\"language-text\">array</code> hoặc <code class=\"language-text\">object</code> đều được.</p>\n<h2 id=\"events-được-xử-lý-trong-react-như-thế-nào\"><a href=\"#events-%C4%91%C6%B0%E1%BB%A3c-x%E1%BB%AD-l%C3%BD-trong-react-nh%C6%B0-th%E1%BA%BF-n%C3%A0o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Events được xử lý trong React như thế nào?</h2>\n<p>Các hàm xử lý event trong React sẽ được truyền vào một instance của <code class=\"language-text\">SyntheticEvent</code>, <code class=\"language-text\">SyntheticEvent</code> cũng giống như những native event bình thường của Browser trừ việc nó có thể làm việc trên tất cả các trình duyệt.</p>\n<p>React không attach event vô các child node, mà sẽ lắng nghe tất cả các event sử dụng 1 event listener duy nhất, Với mục đích là để tăng performance và React không cần phải update lại event listener khi update DOM.</p>\n<h2 id=\"sự-khác-nhau-giữa-createelement-và-cloneelement\"><a href=\"#s%E1%BB%B1-kh%C3%A1c-nhau-gi%E1%BB%AFa-createelement-v%C3%A0-cloneelement\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sự khác nhau giữa <code class=\"language-text\">createElement</code> và <code class=\"language-text\">cloneElement</code></h2>\n<p><code class=\"language-text\">createElement</code> là để tạo element, <code class=\"language-text\">cloneElement</code> copy element và đưa vào các props mới.</p>\n<h2 id=\"argument-thứ-2-của-setstate-dùng-để-làm-gì\"><a href=\"#argument-th%E1%BB%A9-2-c%E1%BB%A7a-setstate-d%C3%B9ng-%C4%91%E1%BB%83-l%C3%A0m-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Argument thứ 2 của <code class=\"language-text\">setState</code> dùng để làm gì</h2>\n<p>callback function, function sẽ chạy sau khi <code class=\"language-text\">component</code> được <code class=\"language-text\">render</code> lại với state mới.</p>\n<p><code class=\"language-text\">setState</code> là một phương thức bất đồng bộ (asynchronous)</p>\n<h2 id=\"đoạn-code-sau-sai-ở-đâu\"><a href=\"#%C4%91o%E1%BA%A1n-code-sau-sai-%E1%BB%9F-%C4%91%C3%A2u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đoạn code sau sai ở đâu</h2>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> streak<span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">streak</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Không sai gì cả, ít người biết rằng khi <code class=\"language-text\">setState</code> có thể truyền vào <code class=\"language-text\">previous state</code>.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://tylermcginnis.com/react-interview-questions/\">📜 React Interview Questions</a></p>\n","cover_image":""}},{"node":{"id":"4ec3d6b800b60890a6bb7edc81dda541","title":"Nắm vững 5 khái niệm sau, xem như master React","path":"/nam-vung-5-khai-niem-sau-xem-nhu-master-react/","date":"2017-01-10","timeToRead":4,"desc":"Sạo vậy thôi chứ làm gì mà trở thành master ngay lập tức được, lý lẽ bình thường muốn master bất cứ thứ gì cũng cần mồ hôi và nước mắt. Hiểu được 5 khái niệm được cho là căn cơ nhất này sẽ giúp bạn dễ xa lầy hơn.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#kh%C3%A1i-ni%E1%BB%87m-1-react-component-ho%E1%BA%A1t-%C4%91%E1%BB%99ng-ra-sau\">Khái niệm #1: React component hoạt động ra sau</a></li>\n<li><a href=\"#kh%C3%A1i-ni%E1%BB%87m-2-jsx-ch%E1%BA%A1y-th%E1%BA%BF-n%C3%A0o\">Khái niệm #2: JSX chạy thế nào</a></li>\n<li><a href=\"#kh%C3%A1i-ni%E1%BB%87m-3-props-v%C3%A0-state\">Khái niệm 3: Props và State</a></li>\n<li><a href=\"#kh%C3%A1i-ni%E1%BB%87m-4-component-api\">Khái niệm #4: Component API</a></li>\n<li><a href=\"#kh%C3%A1i-ni%E1%BB%87m-5-component-type\">Khái niệm 5: Component Type</a></li>\n</ul>\n<!-- /TOC -->\n<p>Sạo vậy thôi chứ làm gì mà trở thành master ngay lập tức được, lý lẽ bình thường muốn master bất cứ thứ gì cũng cần mồ hôi và nước mắt. Hiểu được 5 khái niệm được cho là căn cơ nhất này sẽ giúp bạn dễ xa lầy hơn.</p>\n<ol>\n<li>Component</li>\n<li>JSX</li>\n<li>Props &#x26; State</li>\n<li>Component API</li>\n<li>Component Type</li>\n</ol>\n<h1 id=\"khái-niệm-1-react-component-hoạt-động-ra-sau\"><a href=\"#kh%C3%A1i-ni%E1%BB%87m-1-react-component-ho%E1%BA%A1t-%C4%91%E1%BB%99ng-ra-sau\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khái niệm #1: React component hoạt động ra sau</h1>\n<p>Điều đầu tiên cần nằm lòng là tất cả những gì React xây dựng điều xoay quanh component. Thế thì component là gì. Ví dụ tuyệt vời nhất là select HTML element, select có thể xem như một component được định nghĩa sẵn với kiểu hiển thị riêng của nó (màu xám, có label, nút tam giác nằm ở góc phải) và tự nó xử lý tác vụ đóng mở mấy cái option</p>\n<p><img src=\"https://img.readitlater.com/i/cdn-images-1.medium.com/max/800/1*dPxDcCmCItzEyQuPpHOS3Q/RS/w704.gif\"></p>\n<p>Giờ tưởng tượng là chúng ta sẽ tự build ra một cái component tương tự như select với giao diện và event chúng ta tự kiểm soát</p>\n<p><img src=\"https://img.readitlater.com/i/cdn-images-1.medium.com/max/800/1*AZ2IbiM4WskvgvIyhq6qPA/RS/w704.gif\"></p>\n<p>Đó là những gì React giúp chúng ta làm, xây dựng một đối tượng không chỉ output ra một HTML templete thông thường,  chúng ta sẽ viết ra những function để control những event trên cái template đó</p>\n<p>Để tạo ra một React component căn bản nhất</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>component</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token maybe-class-name\">Hello</span> <span class=\"token maybe-class-name\">World</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"khái-niệm-2-jsx-chạy-thế-nào\"><a href=\"#kh%C3%A1i-ni%E1%BB%87m-2-jsx-ch%E1%BA%A1y-th%E1%BA%BF-n%C3%A0o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khái niệm #2: JSX chạy thế nào</h1>\n<p>Có thể thấy là với cách tạo ra một component như React thì javascript và HTML sống chung một nhà. Vũ khí bí mật của React để làm được chuyện \"what-the-heck\" đó là JSX language.</p>\n<p>Ngày xưa, đi học được dạy phải tách biệt HTML ra một file và JS ra một file, thời gian sau này anh em làm frontend thấy làm gom như vậy làm thấy nhanh hơn, mà cũng không quá evil như mấy ông thầy dạy</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>component</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\nreturnToday is<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Để ý cái cách ta chèn code javascript ở trong HTML bằng cách đưa nào vào bên trong dấu {}, đó là cách viết JSX</p>\n<h1 id=\"khái-niệm-3-props-và-state\"><a href=\"#kh%C3%A1i-ni%E1%BB%87m-3-props-v%C3%A0-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khái niệm 3: Props và State</h1>\n<p>Bạn chắc chắn biết đến attribute href cho thẻ a , chưa biết? về lại w3com học nhé. Với một component của React những attribute như vậy được gọi là props . Props là cách mà các component tương tác lẫn nhau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ParentComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">{</span>\n <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">ChildComponent</span> message<span class=\"token operator\">=</span><span class=\"token string\">\"Hello World\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ChildComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">{</span>\n <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token maybe-class-name\">And</span> then <span class=\"token constant\">I</span> said<span class=\"token punctuation\">,</span> <span class=\"token string\">\"{this.props.message}\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Dữ liệu trong component có thể truyền từ cha xuống con và không có ngược lại</p>\n<p>Đôi khi dữ liệu sẽ không phải được truyền từ cha xuống con, mà nó chỉ là một dữ liệu tạm thời nào đó, ví dụ như giá trị input của user chẳng hạn, lúc đó nó được gọi là state</p>\n<p>Cho dễ hình dung, nếu xem cái bảng nam châm là một component thì props là nút gạt xóa, state là những gì viết trên bảng</p>\n<p><img src=\"https://img.readitlater.com/i/cdn-images-1.medium.com/max/1000/1*aYxNrkwkAPwIoGc0-3k_Ug/RS/w704.jpeg\"></p>\n<p>Bên trong một component, state được quản lý bằng hàm setState thường được viết lòng trong một hàm xử lý sự kiện</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>clicked<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"#\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleClick</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token maybe-class-name\">Click</span> <span class=\"token maybe-class-name\">Me</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"khái-niệm-4-component-api\"><a href=\"#kh%C3%A1i-ni%E1%BB%87m-4-component-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khái niệm #4: Component API</h1>\n<p>Những hàm như render và setState là một phần của component API, ngoài ra nó còn một số hàm hữu ích khác nữa như constructor để khởi tạo state và kích hoạt các phương thức, một số hàm trigger trước khi component được load, sau khi load, sau khi unmounting. vâng vâng.</p>\n<p>Thật ra việc master được React phần nhiều là master được việc lập trình và khái niệm để kiến trúc ra một component hơn là một loạt các API được hỗ trợ sẵn, vậy nên phần này kết thúc ở đây.</p>\n<h1 id=\"khái-niệm-5-component-type\"><a href=\"#kh%C3%A1i-ni%E1%BB%87m-5-component-type\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khái niệm 5: Component Type</h1>\n<p>Mấy ví dụ trên, định nghĩa một component được khai báo dạng class</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Giờ thì hãy quên cách viết này đi! Bây giờ ai cũng viết một component ở dạng function component</p>\n<p>Một functional component là một function nhận một props object như tham số truyền vào và trả về một đống HTML lằn xà ngoằn. Y hệt như cách viết template kinh điển, khác biệt cơ bản là ở chổ mình có thể xài JavaScript bất cứ chổ nào khi cần</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myComponent</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token maybe-class-name\">Hello</span> <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Today</span> is <span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Viết cách này có một hậu quả là mình không thể access được phương thức của component, trên thực tế việc này không ảnh hưởng gì làm vì phần lớn trường hợp ta không dùng tới.</p>\n<p>Và như vậy component này sẽ không có phương thức setState , không có state luôn, người ta còn gọi là stateless functional component.</p>\n<p>Cách viết này rất là gọn gàng, phù hợp cho những trường component đơn giản, nên áp dụng khi có thể.</p>\n<p>Nguồn</p>\n<blockquote>\n<blockquote>\n<p><a href=\"https://medium.freecodecamp.com/the-5-things-you-need-to-know-to-understand-react-a1dbd5d114a3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.freecodecamp.com/the-5-things-you-need-to-know-to-understand-react-a1dbd5d114a3</a></p>\n</blockquote>\n</blockquote>\n","cover_image":""}}]}}},"context":{}}