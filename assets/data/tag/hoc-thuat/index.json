{"hash":"fb6394b40d1044d313361f8d2119ce59e0069e78","data":{"tag":{"title":"hoc-thuat","belongsTo":{"edges":[{"node":{"id":"c769469501c0234d9baa0ced55d6da7d","title":"Truyền component qua prop như thế nào cho đúng","path":"/2023-02-04-cach-truyen-component-vao-prop/","date":"2023-02-04","timeToRead":3,"desc":"Điểm qua những pattern để truyền component vào prop trong React","content":"<p>Ví dụ một tính huống chúng ta cần truyền component qua prop, chúng ta có <code class=\"language-inline-text\">&lt;Button /></code> với icon</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> Button <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> ReactNode <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SomeIcon</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>small<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Để cho phép thay đổi icon, chúng ta sẽ cho phép truyền thêm prop <code class=\"language-inline-text\">icon</code> là một <strong>React element</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">type ButtonProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> ReactNode<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">icon</span><span class=\"token operator\">:</span> ReactElement<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IconProps</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">;\n};\n\nconst ButtonWithIconElement = (</span><span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> icon <span class=\"token punctuation\">}</span><span class=\"token plain-text\">): ButtonProps) => </span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> icon <span class=\"token operator\">=</span> <span class=\"token function\">getIconFromName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token punctuation\">{</span>icon<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\n// sử dụng\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ButtonWithIconElement</span></span>  <span class=\"token attr-name\">icon</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AccessAlarmIconGoogle</span></span>  <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">button here</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ButtonWithIconElement</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>hoặc icon là một <strong>React Component</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">type ButtonProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> ReactNode<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">Icon</span><span class=\"token operator\">:</span> ComponentType<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IconProps</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">;\n};\n\nexport const ButtonWithIconComponent = ({ children, Icon }: ButtonProps) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Icon</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">;\n\n// sử dụng\nimport  AccessAlarmIconGoogle  from  '@mui/icons-material/AccessAlarm';\n\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ButtonWithIconComponent</span></span>  <span class=\"token attr-name\">Icon</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>AccessAlarmIconGoogle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">button here</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ButtonWithIconComponent</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">;</span></code></pre></div>\n<p>hoặc cách thứ 3 là truyền nó vào như một function</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">type ButtonProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> ReactNode<span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">renderIcon</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ReactElement<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IconProps</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">;\n};\n\nexport const ButtonWithIconRenderFunc = ({ children, renderIcon }: ButtonProps) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> icon <span class=\"token operator\">=</span> <span class=\"token function\">renderIcon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>icon<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">;\n\n// sử dụng\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ButtonWithIconRenderFunc</span></span>  <span class=\"token attr-name\">renderIcon</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">=></span>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AccessAlarmIconGoogle</span></span>  <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">button here</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ButtonWithIconRenderFunc</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Câu hỏi đặt ra là đâu là cách đúng nhất trong 3 cách? Và đâu là sự khác nhau giữa ba cách?</p>\n<p>Để thấy sự khác nhau, xem xét tình huống chúng ta cần một <code class=\"language-inline-text\">prop</code> default cho icon component, ví dụ chúng ta cho giá trị prop <code class=\"language-inline-text\">fontSize</code> mặc định sẽ là <code class=\"language-inline-text\">small</code></p>\n<p><strong>React Element</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ButtonWithIconElement</span>\n<span class=\"token keyword\">const</span> clonedIcon <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">cloneElement</span><span class=\"token punctuation\">(</span>icon<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">fontSize</span><span class=\"token operator\">:</span> <span class=\"token string\">'small'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>clonedIcon<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>React Component</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ButtonWithIconElement</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ButtonWithIconComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> Icon <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> ButtonProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Icon</span></span> <span class=\"token attr-name\">fontSize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>small<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// sử dụng</span>\n<span class=\"token keyword\">import</span>  AccessAlarmIconGoogle  <span class=\"token keyword\">from</span>  <span class=\"token string\">'@mui/icons-material/AccessAlarm'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ButtonWithIconComponent</span></span>  <span class=\"token attr-name\">Icon</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>AccessAlarmIconGoogle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">button here</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ButtonWithIconComponent</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tuy nhiên nếu chúng ta cần truyền các prop khác cho icon, cần thay đổi một chút khi sử dụng</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AccessAlarmIcon</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AccessAlarmIconGoogle</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>error<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://www.developerway.com/assets/components-in-props/mental-circle-with-props-example.png\"></p>\n<p><em>Lưu ý quan trọng, nếu dùng bên dưới nó sẽ không chính xác</em></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AccessAlarmIcon</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AccessAlarmIconGoogle</span></span> <span class=\"token attr-name\">fontSize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>small<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>error<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://www.developerway.com/assets/components-in-props/mental-circle-example.png\"></p>\n<p><strong>function</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// chỉnh lại button component</span>\n<span class=\"token keyword\">const</span> icon <span class=\"token operator\">=</span> <span class=\"token function\">renderIcon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">fontSize</span><span class=\"token operator\">:</span> <span class=\"token string\">'small'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// sử dụng</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ButtonWithIconRenderFunc</span></span> <span class=\"token attr-name\">renderIcon</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">settings</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AccessAlarmIconGoogle</span></span> <span class=\"token attr-name\">fontSize</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>settings<span class=\"token punctuation\">.</span>fontSize<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  button here\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ButtonWithIconRenderFunc</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Để đưa ra quyết định cuối cùng, chúng ta cần nhắc đến tình huống sử dụng sau, khi hover vào button chúng ta thay thành một icon với màu khác</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ButtonWithIcon</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isHovered<span class=\"token punctuation\">,</span> setIsHovered<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n      <span class=\"token attr-name\">onMouseOver</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsHovered</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onMouseOut</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsHovered</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      ...\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chúng ta sẽ thực hiện những thay đổi cần thiết, tùy theo cách truyền component</p>\n<p><strong>React Element</strong></p>\n<p>Chúng ta phải tạo một wrapper component cho icon để nhận prop từ phía <code class=\"language-inline-text\">&lt;ButtonWithIconElement /></code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AlarmIconWithHoverForElement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AccessAlarmIconGoogle</span></span>\n      <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">color</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>isHovered <span class=\"token operator\">?</span> <span class=\"token string\">'primary'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'warning'</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// sử dụng</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ButtonWithIconElement</span></span> <span class=\"token attr-name\">icon</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AlarmIconWithHoverForElement</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">button here</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ButtonWithIconElement</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>React component</strong></p>\n<p>Chúng ta sử dụng lại đúng như cách đã làm với prop <code class=\"language-inline-text\">color</code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AccessAlarmIcon</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AccessAlarmIconGoogle</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>error<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ButtonWithIconElement</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ButtonWithIconComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> Icon <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> ButtonProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isHovered<span class=\"token punctuation\">,</span> setIsHovered<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n\t    <span class=\"token attr-name\">onMouseOver</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsHovered</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n\t    <span class=\"token attr-name\">onMouseOut</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsHovered</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Icon</span></span> <span class=\"token attr-name\">fontSize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>small<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">isHovered</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isHovered<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Function</strong></p>\n<p>Tương tự <code class=\"language-inline-text\">color</code>, chỉ cần truyền thêm prop <code class=\"language-inline-text\">isHovered</code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> icon <span class=\"token operator\">=</span> <span class=\"token function\">renderIcon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">fontSize</span><span class=\"token operator\">:</span> <span class=\"token string\">'small'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">isHovered</span><span class=\"token operator\">:</span> isHovered<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ButtonWithIconRenderFunc</span></span>\n  <span class=\"token attr-name\">renderIcon</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">settings</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AccessAlarmIconGoogle</span></span>\n      <span class=\"token attr-name\">fontSize</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>settings<span class=\"token punctuation\">.</span>fontSize<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">color</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>settings<span class=\"token punctuation\">.</span>isHovered <span class=\"token operator\">?</span> <span class=\"token string\">\"primary\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"warning\"</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"kết-luận\"><a href=\"#k%E1%BA%BFt-lu%E1%BA%ADn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết luận</h2>\n<p>Thành thật xin lỗi vì đã không thể có câu trả lời cho việc đâu là cách <em>100%</em> đúng nên dùng trong trường hợp này. Việc lựa chọn pattern nào để sử dụng ở đây mang nặng tính cá nhân hơn là sự chuẩn chỉnh về logic, cuối cùng đường nào cũng sẽ về la mã.</p>\n<p><a href=\"https://www.developerway.com/posts/react-component-as-prop-the-right-way\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React component as prop: the right way</a></p>\n","cover_image":""}},{"node":{"id":"ef07fe54df031b8956b57411b846eb64","title":"Concurrent rendering trong React là gì?","path":"/2023-01-15-giai-thich-react-concurrent-rendering-la-gi/","date":"2023-01-15","timeToRead":5,"desc":"Bài viết này chúng ta sẽ cũng tìm hiểu React Concurrent, vấn đề nó giải quyết là gì và nó chạy như thế nào, ứng dụng thực tế","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81\">Vấn đề</a></li>\n<li><a href=\"#gi%E1%BA%A3i-ph%C3%A1p\">Giải pháp</a></li>\n<li>\n<p><a href=\"#api\">API</a></p>\n<ul>\n<li><a href=\"#usetransition\"><code class=\"language-inline-text\">useTransition</code></a></li>\n<li><a href=\"#usedeferredvalue\"><code class=\"language-inline-text\">useDeferredValue</code></a></li>\n</ul>\n</li>\n<li><a href=\"#tip\">Tip</a></li>\n<li><a href=\"#k%E1%BA%BFt\">Kết</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"vấn-đề\"><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vấn đề</h2>\n<p>Chúng ta sẽ lấy một UI như bên dưới làm ví dụ</p>\n<p><img src=\"https://i.imgur.com/CCrR9dm.png\"></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> list <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./list\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./style.css\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>filter<span class=\"token punctuation\">,</span> setFilter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>filter<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setFilter</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span></span> <span class=\"token attr-name\">filter</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>filter<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">List</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> filter <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> filteredList <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    entry<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>filteredList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> - $</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sleep</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ms</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start <span class=\"token operator\">&lt;</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Hàm <code class=\"language-inline-text\">sleep</code> để giả lập việc render một component tốn nhiều thời gian</p>\n<p><img src=\"https://blog-codeminer42.s3.sa-east-1.amazonaws.com/wp-content/uploads/2022/12/08194847/list-filtering.gif\"></p>\n<p>Render <code class=\"language-inline-text\">&lt;List /></code> tốn thời gian, toàn bộ UI sẽ bị <em>đóng băng</em> cho đến khi toàn bộ quá trình này kết thúc, trong thời gian đang render, khi user tiếp tục nhập vào input, chúng ta sẽ thấy nó không <em>phản ứng</em></p>\n<p>Quá trình render component trước đây của React luôn là một quá trình <em>tuần tự</em>, chạy tiếp sức, khi 1 component chạy xong đến đích của nó, nó sẽ truyền cờ cho component tiếp theo chạy</p>\n<h2 id=\"giải-pháp\"><a href=\"#gi%E1%BA%A3i-ph%C3%A1p\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giải pháp</h2>\n<p>React 18 giới thiệu cơ chế <strong>concurrent rendering</strong> để giải quyết vấn đề trên, developer sẽ chủ động khai báo những component nào có thể sẽ không cần render, có thể bỏ qua một số lần render không cần thiết.</p>\n<p>Như ở ví dụ trên, thay vì user vừa gõ vào một ký tự, <code class=\"language-inline-text\">&lt;List /></code> sẽ được render, <code class=\"language-inline-text\">&lt;List /></code> chỉ cần render ở lần cuối cùng (khá giống với <code class=\"language-inline-text\">lodash.debounce</code>)</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>filter<span class=\"token punctuation\">,</span> setFilter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ưu tiên thấp, không cần chạy liền</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>delayedFilter<span class=\"token punctuation\">,</span> setDelayedFilter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isPending<span class=\"token punctuation\">,</span> startTransition<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// cái này để kiểm tra giá trị khi chạy</span>\n  <span class=\"token function\">useDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> filter<span class=\"token punctuation\">,</span> delayedFilter <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>filter<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setFilter</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">setDelayedFilter</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span></span> <span class=\"token attr-name\">filter</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>delayedFilter<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> List <span class=\"token operator\">=</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> filter <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> filteredList <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    entry<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>filteredList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> - $</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://blog-codeminer42.s3.sa-east-1.amazonaws.com/wp-content/uploads/2022/12/08195131/concurrent-list-filtering.gif\"></p>\n<h2 id=\"api\"><a href=\"#api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>API</h2>\n<p>Ở thời điểm viết bài này, React giới thiệu cho chúng ta 2 API hỗ trợ concurrent rendering là <code class=\"language-inline-text\">useTransition</code> (hay <code class=\"language-inline-text\">startTransition</code> nếu dùng độc lập) và <code class=\"language-inline-text\">useDeferredValue</code></p>\n<h3 id=\"usetransition\"><a href=\"#usetransition\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-inline-text\">useTransition</code></h3>\n<p>Trong ví dụ ở trên, chúng ta đã <em>diện kiến</em> <code class=\"language-inline-text\">useTransition</code>, hook này sẽ trả về cho chúng ta hàm <code class=\"language-inline-text\">startTransition</code> và state <code class=\"language-inline-text\">isPending</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isPending<span class=\"token punctuation\">,</span> startTransition<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-inline-text\">startTransition</code> sẽ <em>đánh dấu</em> những công việc có thứ tự ưu tiên thấp trong việc render, ở trên là việc đặt lại giá trị state <code class=\"language-inline-text\">delayFilter</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">startTranstion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setDelayedFilter</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Một lưu ý quan trọng với callback truyền cho <code class=\"language-inline-text\">startTransition(callback)</code> là nó phải là một sync function, nghĩa là sử dụng như bên dưới sẽ không cho kết quả như mong đợi</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">❌\n<span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n❌\n<span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">asyncWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n❌\n<span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">asyncWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Different call stack</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chúng ta cần sửa lại thành</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">await</span> <span class=\"token function\">asyncWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">asyncWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Một lưu ý khác, chỉ dùng với <code class=\"language-inline-text\">state</code>, không dùng được với <code class=\"language-inline-text\">ref</code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">❌\n<span class=\"token keyword\">const</span> delayedFilterRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  delayedFilterRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"usedeferredvalue\"><a href=\"#usedeferredvalue\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-inline-text\">useDeferredValue</code></h3>\n<p>Vẫn là bài toán ban đầu, chúng ta sẽ giải quyết nó bằng <code class=\"language-inline-text\">useDeferredValue</code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>filter<span class=\"token punctuation\">,</span> setFilter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> deferredFilter <span class=\"token operator\">=</span> <span class=\"token function\">useDeferredValue</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useDebug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> filter<span class=\"token punctuation\">,</span> deferredFilter <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>filter<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setFilter</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span></span> <span class=\"token attr-name\">filter</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>deferredFilter<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> List <span class=\"token operator\">=</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> filter <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> filteredList <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    entry<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>filteredList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> - $</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://blog-codeminer42.s3.sa-east-1.amazonaws.com/wp-content/uploads/2022/12/08195534/deferred-values.gif\"></p>\n<p>Khác với <code class=\"language-inline-text\">useTransition</code> chúng ta phải thêm <code class=\"language-inline-text\">delayFilter</code> state và chủ động gán giá trị này, <code class=\"language-inline-text\">useDeferredValue</code> sẽ làm dùm cho chúng ta công việc <em>cơ bắp</em> đó, chúng ta truyền vào cho <code class=\"language-inline-text\">useDeferredValue</code> giá trị <em>\"nếu có thay đổi, thì mày khoan hả làm gì cả\"</em></p>\n<h2 id=\"tip\"><a href=\"#tip\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tip</h2>\n<p>Tip nhỏ nếu anh em nào muốn hiển thị <code class=\"language-inline-text\">loading</code> khi <code class=\"language-inline-text\">fetch</code> dữ liệu lần đầu, ở những lần tiếp theo chúng ta sẽ hiển thị dữ liệu cũ trong lúc đang chờ dữ liệu mới thay vì loading. Tới thời điểm hiện tại, chúng ta sẽ chưa đủ <em>đồ chơi</em> đề làm việc này</p>\n<p><img src=\"https://blog-codeminer42.s3.sa-east-1.amazonaws.com/wp-content/uploads/2022/12/08194847/list-filtering.gif\"></p>\n<p>Đây là lúc mang thêm <code class=\"language-inline-text\">&lt;Suspense /></code> vào</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>page<span class=\"token punctuation\">,</span> setPage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> deferredPage <span class=\"token operator\">=</span> <span class=\"token function\">useDeferredValue</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n          <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">setPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">page</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> page <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Previous Page\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n          <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">setPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">page</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> page <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Next Page\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Page: </span><span class=\"token punctuation\">{</span>page<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Loading...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token attr-name\">page</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>deferredPage<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Component</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> page <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">suspenseFetchData</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>data\n        <span class=\"token operator\">?</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>entry<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>entry<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">:</span> <span class=\"token string\">\"Loading ...\"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://blog-codeminer42.s3.sa-east-1.amazonaws.com/wp-content/uploads/2022/12/08195634/new-stale-while-revalidate-transitions.gif\"></p>\n<h2 id=\"kết\"><a href=\"#k%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết</h2>\n<p>Concurrent Rendering là một là một phương pháp mới để giải quyết những vấn đề <em>gặp hoài</em> với anh em làm Frontend, cân nhắc sử dụng nó để đem tới những trãi nghiệm sử dụng ứng dụng <em>mượt mà</em> cho người dùng nhé anh em.</p>\n","cover_image":""}},{"node":{"id":"07147b52eef5808a0a63aa97adc0f7b8","title":"Dùng lệnh docker exec để thực thi một lệnh trong Docker Container","path":"/2023-01-14-tuong-tac-voi-docker-container/","date":"2023-01-14","timeToRead":5,"desc":"Tìm hiểu cách tương tác với một docker container đang chạy","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#d%E1%BB%B1ng-m%E1%BB%99t-docker-container-%C4%91%E1%BB%83-th%E1%BB%B1c-h%C3%A0nh\">Dựng một Docker container để thực hành</a></li>\n<li><a href=\"#t%C3%ACm-t%C3%AAn-c%E1%BB%A7a-docker-container\">Tìm tên của Docker container</a></li>\n<li><a href=\"#ch%E1%BA%A1y-shell-trong-docker-container\">Chạy shell trong Docker container</a></li>\n<li><a href=\"#th%E1%BB%B1c-thi-command-trong-docker-container-kh%C3%B4ng-d%C3%B9ng-shell\">Thực thi command trong Docker container không dùng shell</a></li>\n<li><a href=\"#th%E1%BB%B1c-thi-m%E1%BB%99t-command-%E1%BB%9F-m%E1%BB%99t-th%C6%B0-m%E1%BB%A5c-trong-docker-container\">Thực thi một command ở một thư mục trong Docker container</a></li>\n<li><a href=\"#ch%E1%BA%A1y-command-b%E1%BA%B1ng-m%E1%BB%99t-user-kh%C3%A1c-trong-docker-container\">Chạy command bằng một user khác trong Docker container</a></li>\n<li><a href=\"#truy%E1%BB%81n-bi%E1%BA%BFn-m%C3%B4i-tr%C6%B0%E1%BB%9Dng-v%C3%A0o-docker-container\">Truyền biến môi trường vào Docker container</a></li>\n<li><a href=\"#l%E1%BB%97i-th%C6%B0%E1%BB%9Dng-g%E1%BA%B7p\">Lỗi thường gặp</a></li>\n</ul>\n<!-- /TOC -->\n<p>Khi làm việc với Docker chúng ta sẽ có nhu cầu tương tác bên trong container, để debug, inspect, kiểm tra trạng thái hiện của ứng dụng. Để thực thi một lệnh bên trong một container đang chạy, chúng ta sẽ dùng đến câu lệnh <code class=\"language-inline-text\">docker exec</code></p>\n<h2 id=\"dựng-một-docker-container-để-thực-hành\"><a href=\"#d%E1%BB%B1ng-m%E1%BB%99t-docker-container-%C4%91%E1%BB%83-th%E1%BB%B1c-h%C3%A0nh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dựng một Docker container để thực hành</h2>\n<p>Chúng ta sẽ dùng <code class=\"language-inline-text\">alpipe</code> image để dựng một container với mục đích thực hành lệnh <code class=\"language-inline-text\">docker exec</code></p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--name</span> container-name alpine <span class=\"token function\">watch</span> <span class=\"token string\">\"date >> /var/log/date.log\"</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-inline-text\">-d</code> để chạy chế độ <em>detach</em>, nó sẽ chạy nền và không chiếm lấy terminal</p>\n</blockquote>\n<p><code class=\"language-inline-text\">watch \"date >> /var/log/date.log\"</code> là command mà chúng ta muốn chạy bên trong container, lệnh <code class=\"language-inline-text\">watch</code> sẽ chạy lặp lại sau mỗi 2 giây (thời gian mặc định), trong trường hợp này, câu lệnh <code class=\"language-inline-text\">date >> /var/log/date.log</code> sẽ in thời gian hiện tại vào file <code class=\"language-inline-text\">date.log</code> sau mỗi 2 giây. Cái file nó sẽ như thế này</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Sat Jan 14 01:35:11 UTC 2023\nSat Jan 14 01:35:13 UTC 2023\nSat Jan 14 01:35:15 UTC 2023</code></pre></div>\n<h2 id=\"tìm-tên-của-docker-container\"><a href=\"#t%C3%ACm-t%C3%AAn-c%E1%BB%A7a-docker-container\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tìm tên của Docker container</h2>\n<p>Trong trường hợp container đang chạy rồi, chúng ta lại không biết tên của nó là gì, chúng ta sẽ liệt kê toàn bộ docker đang chạy</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">ps</span></code></pre></div>\n<p>kết quả trả về</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES\n76aded7112d4   alpine    \"watch 'date >> /var…\"   11 seconds ago   Up 10 seconds             container-name</code></pre></div>\n<p>Dùng container name hoặc container id để nói với <code class=\"language-inline-text\">docker exec</code> container nào sử dụng. Nếu muốn rename </p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">rename</span> container-name new-name</code></pre></div>\n<h2 id=\"chạy-shell-trong-docker-container\"><a href=\"#ch%E1%BA%A1y-shell-trong-docker-container\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chạy shell trong Docker container</h2>\n<p>Để chạy <em>shell</em> bên trong container, dùng <code class=\"language-inline-text\">docker exec</code> với flag <code class=\"language-inline-text\">-i</code> <code class=\"language-inline-text\">-t</code> (viết gọp lại thành <code class=\"language-inline-text\">-it</code>)</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> container-name <span class=\"token function\">sh</span></code></pre></div>\n<p>Sau câu lệnh này, chúng ta sẽ đứng ở <em>shell</em> terminal bên trong container, để thoát khỏi terminal này, gõ lệnh <code class=\"language-inline-text\">exit</code> và nhấn <code class=\"language-inline-text\">ENTER</code></p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/ <span class=\"token comment\"># exit</span></code></pre></div>\n<p>Nếu không dùng <code class=\"language-inline-text\">shell</code> mà cần đến những tính năng chỉ có trong <code class=\"language-inline-text\">bash</code>, thay <code class=\"language-inline-text\">sh</code> ở câu lệnh trên bằng <code class=\"language-inline-text\">bash</code></p>\n<h2 id=\"thực-thi-command-trong-docker-container-không-dùng-shell\"><a href=\"#th%E1%BB%B1c-thi-command-trong-docker-container-kh%C3%B4ng-d%C3%B9ng-shell\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thực thi command trong Docker container không dùng shell</h2>\n<p>Nếu cần thị thi một lệnh bên trong container, nhưng không cần mở <em>shell</em> để tương tác, gọi <code class=\"language-inline-text\">docker exec</code> không thêm bất kỳ flag nào</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> container-name <span class=\"token function\">tail</span> /var/log/date.log</code></pre></div>\n<p>Nó sẽ chạy lệnh <code class=\"language-inline-text\">tail /var/log/date.log</code> và in ra kết quả, mặc định lệnh <code class=\"language-inline-text\">tail</code> sẽ in ra mười dòng cuối cùng trong file</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Sat Jan 14 01:35:11 UTC 2023\nSat Jan 14 01:35:13 UTC 2023\nSat Jan 14 01:35:15 UTC 2023\nSat Jan 14 01:35:17 UTC 2023\nSat Jan 14 01:35:19 UTC 2023\nSat Jan 14 01:35:21 UTC 2023\nSat Jan 14 01:35:23 UTC 2023\nSat Jan 14 01:35:25 UTC 2023\nSat Jan 14 01:35:27 UTC 2023\nSat Jan 14 01:35:29 UTC 2023</code></pre></div>\n<h2 id=\"thực-thi-một-command-ở-một-thư-mục-trong-docker-container\"><a href=\"#th%E1%BB%B1c-thi-m%E1%BB%99t-command-%E1%BB%9F-m%E1%BB%99t-th%C6%B0-m%E1%BB%A5c-trong-docker-container\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thực thi một command ở một thư mục trong Docker container</h2>\n<p>Để thực thi một lệnh bên trong một thư mục cụ thể, sử dụng flag <code class=\"language-inline-text\">--workdir</code> để chỉ định thư mục</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">--workdir</span> /tmp container-name <span class=\"token builtin class-name\">pwd</span></code></pre></div>\n<p>Câu lệnh trên, chỉ định thư mục <code class=\"language-inline-text\">/tmp</code> là thư mục mà lệnh sẽ đứng ở vị trí đó để thực thi, <code class=\"language-inline-text\">pwd</code> sẽ in ra thư mục hiện tại, kết quả là</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/tmp</code></pre></div>\n<h2 id=\"chạy-command-bằng-một-user-khác-trong-docker-container\"><a href=\"#ch%E1%BA%A1y-command-b%E1%BA%B1ng-m%E1%BB%99t-user-kh%C3%A1c-trong-docker-container\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chạy command bằng một user khác trong Docker container</h2>\n<p>Sử dụng flag <code class=\"language-inline-text\">--user</code> nếu muốn thực thì bằng một user khác</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">--user</span> guest container-name <span class=\"token function\">whoami</span></code></pre></div>\n<p>Kết quả của câu lệnh <code class=\"language-inline-text\">whoami</code> sẽ trả về user đang gọi lệnh</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">guest</code></pre></div>\n<h2 id=\"truyền-biến-môi-trường-vào-docker-container\"><a href=\"#truy%E1%BB%81n-bi%E1%BA%BFn-m%C3%B4i-tr%C6%B0%E1%BB%9Dng-v%C3%A0o-docker-container\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Truyền biến môi trường vào Docker container</h2>\n<p>Đôi khi chúng ta sẽ có nhu cầu truyền thêm biến môi trường vào trong container để chạy. Flag <code class=\"language-inline-text\">-e</code> sẽ cho phép chỉ định biến môi trường</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">TEST</span><span class=\"token operator\">=</span>binhan container-name <span class=\"token function\">env</span></code></pre></div>\n<p>Lệnh này sẽ khai báo một biến môi trường tên <code class=\"language-inline-text\">TEST</code> với giá trị <code class=\"language-inline-text\">binhan</code>. Lệnh <code class=\"language-inline-text\">env</code> sẽ in toàn bộ biến môi trường bên trong container</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nHOSTNAME=2191b2d508e9\nTEST=binhan\nHOME=/root</code></pre></div>\n<p>Nếu cần khai báo thêm biến môi trường thứ 2</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">TEST</span><span class=\"token operator\">=</span>binhan <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">ENVIROMENT</span><span class=\"token operator\">=</span>prod container-name <span class=\"token function\">env</span></code></pre></div>\n<p>Nếu mà nhiều biến hơn, chúng ta dùng file <code class=\"language-inline-text\">.env</code>, <code class=\"language-inline-text\">--env-file</code> để truyền file chưa biến môi trường</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> --env-file .env container-name <span class=\"token function\">env</span></code></pre></div>\n<p>Kết quả</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nHOSTNAME=76aded7112d4\nTEST=binhan\nENVIRONMENT=prod\nHOME=/root</code></pre></div>\n<h2 id=\"lỗi-thường-gặp\"><a href=\"#l%E1%BB%97i-th%C6%B0%E1%BB%9Dng-g%E1%BA%B7p\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lỗi thường gặp</h2>\n<p>Khi sử dụng <code class=\"language-inline-text\">docker exec</code>, có thể chúng ta sẽ gặp một số lỗi như:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Error: No such container: container-name</code></pre></div>\n<p>Kiểm tra lại xem có sai chữ nào không, chạy <code class=\"language-inline-text\">docker ps</code> để kiểm tra lần nữa, tốt nhất là copy tên từ lệnh <code class=\"language-inline-text\">docker ps</code></p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Error response from daemon: Container 2a94aae70ea5dc92a12e30b13d0613dd6ca5919174d73e62e29cb0f79db6e4ab is not running</code></pre></div>\n<p>Cái này là do container chưa chạy thôi, chỉ cần <code class=\"language-inline-text\">docker start container-name</code> để dựng nó lên</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Error response from daemon: Container container-name is paused, unpause the container before exec</code></pre></div>\n<p>Container đang tạm dừng, khá rõ ràng là chúng ta cần <code class=\"language-inline-text\">docker unpause container-name</code> trước khi muốn làm gì tiếp</p>\n<p><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-docker-exec-to-run-commands-in-a-docker-container\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How To Use docker exec to Run Commands in a Docker Container</a></p>\n","cover_image":""}},{"node":{"id":"6c5fec044498dd797ded807e27e60261","title":"Dynamic component trong Vue","path":"/2022-12-16-giai-thich-dynamic-component-vue/","date":"2022-12-16","timeToRead":3,"desc":"Tìm hiểu khái niệm Dynamic component của Vue","content":"<p>Khái niệm dynamic component trong Vue rất đơn giản, nếu <code class=\"language-inline-text\">:is=\"true\"</code>, component đó sẽ được render</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component</span> <span class=\"token attr-name\">:is</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>”currentTab”</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>component</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Khi chúng ta dùng <code class=\"language-inline-text\">:is</code>, còn một component khác cũng cần biết là <code class=\"language-inline-text\">&lt;keep-alive/></code>, nó cho phép component <em>tạm thời</em> núp lùm chứ không phải <em>diệt cỏ tận gốc</em>, ví dụ trong tab component, khi switch qua switch lại giữa các tab, không cần phải kill nó luôn.</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component</span> <span class=\"token attr-name\">:is</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>”currentTab”</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Chúng ta nghiền ngẫm xem cách sử dụng 2 đứa này, với một trường hợp khác</p>\n<p>Có một cục dữ liệu như thế này, mỗi key là một kiểu dữ liệu khác nhau</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">birthdate</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1986-06-22T00:00:00Z\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">anniversary</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2005-10-09T00:00:00Z\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">activities</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Skiing\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hiking\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cycling\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Drinking Beer\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">about</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John talking about himself. It goes on and on forever...[snip]\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">metadata</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">lastUpdateUTC</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2019-06-29T15:14:00Z\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">lastUpdatedBy</span><span class=\"token operator\">:</span> <span class=\"token string\">\"admin\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Để hiển thị 1 dữ liệu của key, chúng ta có thể làm như thế này</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> {{ person.firstName }} {{ person.lastName }}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Birthday<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> {{ person.birthday | formatDate }}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>activities<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> \n  // loop tiếp\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Với từng kiểu dữ liệu khác nhau, chúng ta sẽ cần đến những filter khác nhau, hoặc thậm chí thêm thư viện (như để parse giá trị date). Vấn đề là chúng ta không loop được 1 lần một cho khỏe</p>\n<p>Trước tiên chúng ta cần đưa trách nhiệm xử lý, định dạng các kiểu dữ liệu này cho component con, thằng bố chúng ta chỉ việc loop thôi</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>First Name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>details-text</span> <span class=\"token attr-name\">:value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>person.firstName + ' ' + person.lastName<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Birthday<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>details-date</span> <span class=\"token attr-name\">:value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>person.birthday<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Activities<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>details-list</span> <span class=\"token attr-name\">:value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>person.activities<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Vẫn chưa loop được, vì các component con này là khác nhau, chúng ta cần có một cách nào đó để đưa điều kiện: “Ê, chọn component này khi dữ liệu là a,b,c,d”</p>\n<p>Dynamic component sẽ cho chúng ta làm điều đó!</p>\n<p>Trước tiên chúng  ta cần transform dữ liệu ban đầu về dạng mảng như sau</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">items</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">.</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">.</span>lastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DetailsText\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Birthday\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">.</span>birthday<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DetailsDate\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Activities\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">.</span>activities<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DetailsList\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Chúng ta đã có thể dùng <code class=\"language-inline-text\">v-for</code>, chọn đúng component cần dùng</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item in items<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{item.name}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component</span> <span class=\"token attr-name\">:is</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.component<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.value<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Cái hay là chỗ chúng ta map <code class=\"language-inline-text\">:is=”item.component”</code> với component đã khai báo cho từng thằng dữ liệu </p>\n<p><a href=\"https://www.drewtown.dev/post/the-magic-of-vues-dynamic-components-for-lists-of-data\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Magic of Vue's Dynamic Components For Lists of Data</a></p>\n","cover_image":""}},{"node":{"id":"4db7a08d66d565c191da5fcc9e6507a3","title":"Gửi message từ server nhưng không dùng WebSocket","path":"/2022-12-04-gui-message-tu-server/","date":"2022-12-04","timeToRead":3,"desc":"Tìm hiểu API của JS để gửi và nhận message từ server","content":"<p>Nếu cần gửi một message từ server đến client, thay vì phía client gửi request tới server, Javascript có một cơ chế đã được hỗ trợ từ rất lâu, là dùng <code class=\"language-inline-text\">EventSource</code>,  nó còn có trước khi có <code class=\"language-inline-text\">WebSocket</code>. Tất nhiên nó cũng những hạn chế nhất định so với WebSocket. Cụ thể</p>\n<table>\n<thead>\n<tr>\n<th>WebSocket</th>\n<th>EventSource</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Hai chiều</td>\n<td>Một chiều từ server</td>\n</tr>\n<tr>\n<td>Binary và text</td>\n<td>Chỉ text</td>\n</tr>\n<tr>\n<td>WebSocket Protocal</td>\n<td>HTTP</td>\n</tr>\n</tbody>\n</table>\n<p><code class=\"language-inline-text\">EventSource</code> là một lựa chọn phù hợp cho những trường hợp đơn giản, chưa cần dùng đến đao to búa lớn như <code class=\"language-inline-text\">WebSocket</code>. Ví dụ giá vàng, giá xăng cần cập nhập, những dữ liệu mà chỉ cần đi một chiều từ server -> client. <code class=\"language-inline-text\">EventSource</code> còn hỗ trợ <em>auto-reconnect</em> cũng rất tiện (WebSocket phải chạy bằng <em>cơm</em>)</p>\n<h2 id=\"nhận-message\"><a href=\"#nh%E1%BA%ADn-message\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nhận message</h2>\n<p>Để nhận một message, chúng ta cần tạo một instance <code class=\"language-inline-text\">new EventSource(url)</code>, trình duyệt tự quản lý thiết lập kết nối đến <code class=\"language-inline-text\">url</code> và lắng nghe các event gửi đến.</p>\n<p>Server sẽ trả về status 200 và header <code class=\"language-inline-text\">Content-Type: text/event-stream</code>, message được gửi đến sẽ theo định dạng cố định</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">data: Message <span class=\"token number\">1</span>\n\ndata: Message <span class=\"token number\">2</span>\n\ndata: Message <span class=\"token number\">3</span>\ndata: dòng <span class=\"token number\">2</span> của Message <span class=\"token number\">3</span></code></pre></div>\n<p>Nội dung sẽ nằm sau từ khóa <code class=\"language-inline-text\">data:</code>, các message sẽ được tách biệt bằng 2 dấu xuống dòng <code class=\"language-inline-text\">\\n\\n</code>, nếu chỉ có một dấu <code class=\"language-inline-text\">\\n</code> có nghĩa là message này gồm 2 dòng.</p>\n<p>Trong thực tế, không nên tách message ra 2 dòng và luôn gửi message theo một dòng duy nhất</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">data<span class=\"token operator\">:</span>  <span class=\"token punctuation\">{</span><span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"First line_\\n_ Second line\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Để đọc message này</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> eventSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/events/subscribe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\neventSource<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"New message\"</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// hoặc eventSource.addEventListener('message', ...)</span></code></pre></div>\n<h2 id=\"cross-origin-request\"><a href=\"#cross-origin-request\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cross-origin request</h2>\n<p>Tương tự như <code class=\"language-inline-text\">fetch</code>, chúng ta có thể lắng nghe trên một message cross-origin</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://another-site.com/events\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Để gửi thêm thông tin <code class=\"language-inline-text\">credential</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://another-site.com/events\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">withCredentials</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"reconnect\"><a href=\"#reconnect\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reconnect</h2>\n<p>Như đã nói, <code class=\"language-inline-text\">EventSource</code> tự động reconnect nếu bị đứt connection giữa chừng, server cũng có thể thông báo nên chờ bao lâu trước khi thử lại bằng <code class=\"language-inline-text\">retry:</code></p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">retry: <span class=\"token number\">15000</span>\ndata: Hello, I <span class=\"token builtin class-name\">set</span> the reconnection delay to <span class=\"token number\">15</span> seconds</code></pre></div>\n<p>Nếu server không muốn trình duyệt tự động reconnect, server có thể trả status 204, hoặc ở phía client chúng ta <em>cưỡng chế</em> luôn <code class=\"language-inline-text\">eventSource.close()</code></p>\n<h2 id=\"message-id\"><a href=\"#message-id\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Message Id</h2>\n<p>Để giải quyết vấn đề mất message giữa chừng do lỗi connect và không biết được message nào đã nhận và chưa, mỗi message có thể có thêm field <code class=\"language-inline-text\">id</code> để dễ xác định</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">data: Message <span class=\"token number\">1</span>\nid: <span class=\"token number\">1</span>\n\ndata: Message <span class=\"token number\">2</span>\nid: <span class=\"token number\">2</span>\n\ndata: Message <span class=\"token number\">3</span>\ndata: of two lines\nid: <span class=\"token number\">3</span></code></pre></div>\n<h2 id=\"connection-status\"><a href=\"#connection-status\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Connection Status</h2>\n<p>Bên trong object <code class=\"language-inline-text\">EventSource</code> sẽ có property <code class=\"language-inline-text\">readyState</code>, nó chứa <em>status</em> của connection</p>\n<ul>\n<li>EventSource.CONNECTING = 0</li>\n<li>EventSource.OPEN = 1</li>\n<li>EventSource.CLOSED = 2</li>\n</ul>\n<h2 id=\"event-type\"><a href=\"#event-type\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Event type</h2>\n<p>Có 3 loại event có thể được gửi về từ <code class=\"language-inline-text\">EventSource</code></p>\n<ul>\n<li><code class=\"language-inline-text\">message</code>: khi có message gửi về</li>\n<li><code class=\"language-inline-text\">open</code>: khi connection đã open</li>\n<li><code class=\"language-inline-text\">error</code>: lỗi không thể connect đến server</li>\n</ul>\n<p>Server cũng có thể gửi thêm các kiểu event tự định nghĩa khác ngoài các event có sẵn</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">event: <span class=\"token function\">join</span>\ndata: Bob\n\ndata: Hello\n\nevent: leave\ndata: Bob</code></pre></div>\n<p>Để lắng nghe những custom event như vậy</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">eventSource<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'join'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Joined </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>event<span class=\"token punctuation\">.</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\neventSource<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Said: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>event<span class=\"token punctuation\">.</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\neventSource<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'leave'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Left </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>event<span class=\"token punctuation\">.</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://javascript.info/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://javascript.info/</a></p>\n","cover_image":""}},{"node":{"id":"8b00dbecf693b54e06b8107947c6c529","title":"8 thẻ html ít ai biết nhưng lại rất hay ho","path":"/2022-05-15-8-html-it-duoc-ai-biet/","date":"2022-05-15","timeToRead":2,"desc":"","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#s\"><code class=\"language-inline-text\">s</code></a></li>\n<li><a href=\"#ruby-rt-rp\"><code class=\"language-inline-text\">ruby</code>, <code class=\"language-inline-text\">rt</code>, <code class=\"language-inline-text\">rp</code></a></li>\n<li><a href=\"#details\"><code class=\"language-inline-text\">details</code></a></li>\n<li><a href=\"#optgroup\"><code class=\"language-inline-text\">optgroup</code></a></li>\n<li><a href=\"#meter\"><code class=\"language-inline-text\">meter</code></a></li>\n<li><a href=\"#progress\"><code class=\"language-inline-text\">progress</code></a></li>\n<li><a href=\"#kbd\"><code class=\"language-inline-text\">kbd</code></a></li>\n<li><a href=\"#bdo\"><code class=\"language-inline-text\">bdo</code></a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"s\"><a href=\"#s\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-inline-text\">s</code></h2>\n<p>Được dùng để đánh dấu một nội dung không còn chính xác nữa, ví dụ giá cũ. Nội dung sẽ bị gạch ngang</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h4</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>s</span><span class=\"token punctuation\">></span></span>10.000 đ<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>s</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>9.999 đ<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h4</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>CSS để có format giống như tag <code class=\"language-inline-text\">&lt;s></code></p>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.line-through</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> line-through<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"ruby-rt-rp\"><a href=\"#ruby-rt-rp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-inline-text\">ruby</code>, <code class=\"language-inline-text\">rt</code>, <code class=\"language-inline-text\">rp</code></h2>\n<p>Thêm phần ghi chú, lúc đầu được thiết kế để dùng thêm chú thích cho các ký tự không phải latin</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ruby</span><span class=\"token punctuation\">></span></span>帶翅膀<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rt</span><span class=\"token punctuation\">></span></span>Carmine<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rt</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ruby</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ruby</span><span class=\"token punctuation\">></span></span>的老鼠<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rt</span><span class=\"token punctuation\">></span></span>Falcone<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rt</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ruby</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iNjF4CSp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xmmeopz2m96ngxh7a6h.png\"></p>\n<h2 id=\"details\"><a href=\"#details\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-inline-text\">details</code></h2>\n<p>Cũng dùng để thêm chú thích, nhưng dưới dạng <em>collapse</em>, user có thể đóng/mở phần chú thích này</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>details</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>summary</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span>pointer<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>Xem diễn giải<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>summary</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>\n\t\tĐây là nội dung có ích lắm\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>details</span><span class=\"token punctuation\">></span></span> </code></pre></div>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--hQRdd3Sa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgal47336yb6ktmuccqm.png\"></p>\n<h2 id=\"optgroup\"><a href=\"#optgroup\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-inline-text\">optgroup</code></h2>\n<p>Được dùng để gộp các element liên quan với nhau bên trong <code class=\"language-inline-text\">&lt;select></code></p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optgroup</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Trái cây<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cam<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Cam<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dua-hau<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Dưa hấu<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optgroup</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optgroup</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Nước Ép<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ca-sau<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Cá sấu<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>khung-long<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Khủng Long<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optgroup</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"meter\"><a href=\"#meter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-inline-text\">meter</code></h2>\n<p>Hiển thị <code class=\"language-inline-text\">gauge</code> (cột năng lượng), như vầy nè</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--oG5gI0AM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11rwsx8j10ccqaak6zhs.png\"></p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span> 0L \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meter</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fuel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">min</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">max</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">low</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>33<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">high</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>66<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">optimum</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>80<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        at 50/100\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>meter</span><span class=\"token punctuation\">></span></span> 5L\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span> 0L \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meter</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fuel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">min</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">max</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">low</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>33<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">high</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>66<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">optimum</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>80<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        at 50/100\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>meter</span><span class=\"token punctuation\">></span></span> 5L\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span> 0L \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meter</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fuel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">min</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">max</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">low</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>33<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">high</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>66<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">optimum</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>80<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>80<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        at 50/100\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>meter</span><span class=\"token punctuation\">></span></span> 5L\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"progress\"><a href=\"#progress\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-inline-text\">progress</code></h2>\n<p>Như tên đã nói lên tất cả, dùng để hiển thị tiến trình, cũng hơi na ná với <code class=\"language-inline-text\">meter</code> há</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>File progress:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>progress</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">max</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>70<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> 70% <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>progress</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--guaJQXSD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wm0r9c5ez7iasz6gj3q.png\"></p>\n<h2 id=\"kbd\"><a href=\"#kbd\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-inline-text\">kbd</code></h2>\n<p>Được thiết kế <em>kẹp</em>  phím tắt, nội dung bên trong sẽ được mặc định hiện thị bằng font <code class=\"language-inline-text\">monospace</code></p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Press <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>kbd</span><span class=\"token punctuation\">></span></span>Ctrl<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>kbd</span><span class=\"token punctuation\">></span></span> + <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>kbd</span><span class=\"token punctuation\">></span></span>C<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>kbd</span><span class=\"token punctuation\">></span></span> to copy text (Windows).<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--IDPlHZaK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgqcbg81dptv46om81up.png\"></p>\n<h2 id=\"bdo\"><a href=\"#bdo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-inline-text\">bdo</code></h2>\n<p>Viết tắt cho <code class=\"language-inline-text\">Bi-Directional Override</code>, hiển thị text ở dạng animate, đổi hướng hiển thị, một trong những tag ít sử dụng và <em>lạ</em> nhất so với những thằng đã kể trên</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bdo</span> <span class=\"token attr-name\">dir</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rtl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>May the force be with you.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bdo</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--g9ok-gPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i54v3vic225493ihkkuy.gif\"></p>\n<p><a href=\"https://dev.to/samsundar/8-unknown-html-tags-that-are-actually-quite-useful-2l45\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">8 Unknown HTML tags that are actually quite useful</a></p>\n","cover_image":""}},{"node":{"id":"c8a93009b5744dc61180bda6cbd817fb","title":"React Transition","path":"/2022-05-07-cach-dung-usetransition-trong-react/","date":"2022-05-07","timeToRead":3,"desc":"Một tính năng mới trong React 18, cho phép chúng ta đánh giấu một thay đổi là transition","content":"<h2 id=\"tại-sao\"><a href=\"#t%E1%BA%A1i-sao\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao?</h2>\n<p>Một vấn đề rất thực tế mà chúng ta hay gặp khi viết <em>search component</em>, chúng ta sẽ thêm cơ chế <em>debounce</em> khi gọi xuống API sau khi user nhập giá trị vào <code class=\"language-inline-text\">input</code>, <em>debounce</em> tức là hổng đi làm liền mà đợi cho đến hết thời gian thì mới làm.</p>\n<p>Trước đây, React không có phân biệt giữa cái gì cần làm liền và cái gì có thể để sau rồi làm, dân tình gọi là sống vội. Giờ đây, thấy việc sống vội như thế là mà lối sống sai lầm, nên mở ra khái niệm <em>sống chậm</em>, thông thả mà làm. Như món nào cần gấp thì bạn bay ra tạp quá gần nhà mua liền, món nào chưa cần ngay thì đưa vào danh sách mua sắm cuối tháng đi siêu thị.</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--6-YH79KT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t359lpszuvb3k6dlm6q0.gif\"></p>\n<p>Những công chuyện nào được coi là <em>sống chậm</em> React sẽ không làm liền và không hiển thị <em>Suspense fallback</em> component.</p>\n<p>2 API mới, một hook và một cái dùng trong trường hợp không thể dùng hook</p>\n<ul>\n<li>React.startTransition</li>\n<li>React.useTransition</li>\n</ul>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isPending<span class=\"token punctuation\">,</span> startTransition<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token punctuation\">{</span>isPending <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Spinner</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Chúng ta có một danh sách <em>employee name</em>, khi user nhập vào input, chúng ta thực hiện <em>filter</em> lại danh sách này.</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">FilterList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>query<span class=\"token punctuation\">,</span> setQuery<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setQuery</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>innput</span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>changeHandler<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>query<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token punctuation\">{</span>names<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n\t\t        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListItem</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">highlight</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>query<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n\t\t      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ListItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> highlight <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>highlight<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>highlight<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> highlight<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> highlight<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://codesandbox.io/s/heavy-update-as-urgent-ejwbg?file=/src/FilterList.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo</a></p>\n<p>Khi user nhập quá nhanh, chúng ta sẽ thấy UI có vẻ hơi <em>lag</em> và nó không hiển thị được kết quá ngay.</p>\n<p>Ở đây <code class=\"language-inline-text\">&lt;ListItem /></code> đã được update liên tục khi user nhập vào input, việc này là không cần thiết, nó chỉ cần cập nhập lại sau khi user đã kết thúc nhập liệu, một cách khác là bỏ quả tất cả những lần cập nhập ở giữa, chỉ giữ lại lần cập nhập sau cùng.</p>\n<p>Để sửa lại</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useTransition <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">FilterList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> names <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>query<span class=\"token punctuation\">,</span> setQuery<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>highlight<span class=\"token punctuation\">,</span> setHighlight<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isPending<span class=\"token punctuation\">,</span> startTransition<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setQuery</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setHighlight</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>changeHandler<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>query<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>names<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListItem</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">highlight</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>highlight<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://codesandbox.io/s/heavy-update-as-non-urgent-ifobc?file=/src/FilterList.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo</a>.</p>\n<p><a href=\"https://dmitripavlutin.com/react-usetransition/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Don't Stop Me Now: How to Use React useTransition() hook</a></p>\n","cover_image":""}},{"node":{"id":"691018d928912ef0c296b5f00948cd37","title":"Cách mà babel preset-env, core-js, browserslistrc làm việc với nhau","path":"/2022-02-02-babel-preset-env-core-js-browerslistrc-lam-viec/","date":"2022-02-02","timeToRead":3,"desc":"","content":"<h2 id=\"thiết-đặt-babel\"><a href=\"#thi%E1%BA%BFt-%C4%91%E1%BA%B7t-babel\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thiết đặt babel</h2>\n<p>Với input là code js với các syntax mới, babel sẽ <em>transform</em> thành code mà trình duyệt có thể hiểu được.</p>\n<p>Chúng ta sẽ cần các gói babel cần thiết</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i @babel/core @babel/preset-env @babel/cli --save-dev</code></pre></div>\n<p>Bên trong file config của babel, <code class=\"language-inline-text\">babel.config.json</code> chúng ta sẽ tìm thấy phần thiết đặt <code class=\"language-inline-text\">preset-env</code></p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"@babel/preset-env\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>@babel/preset-env</strong> là một bộ các plugin của babel để nó có thể <strong>transform</strong> các syntax mới, <strong>tùy theo trình duyệt mà chúng ta chỉ định</strong></p>\n<p>Trình duyệt được chỉ định có thể set trong file <code class=\"language-inline-text\">babel.config.json</code> hoặc dùng một file riêng <code class=\"language-inline-text\">.browserslistrc</code>, hoặc trong <code class=\"language-inline-text\">package.json</code></p>\n<p>Dùng file package.json</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"browserslist\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"defaults\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"not IE 11\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"maintained node versions\"</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Dùng file .browserslistrc</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">defaults\nnot IE 11\nmaintained node versions</code></pre></div>\n<p>Ví dụ với đoạn code như sau</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">printArr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">printArr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sau khi transform với thiết đặt browser là IE11, chúng ta sẽ có</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">_toConsumableArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">_arrayWithoutHoles</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">_iterableToArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">_unsupportedIterableToArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">_nonIterableSpread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">_nonIterableSpread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">_unsupportedIterableToArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o<span class=\"token punctuation\">,</span> minLen</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> o <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">_arrayLikeToArray</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> minLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token string\">\"Object\"</span> <span class=\"token operator\">&amp;&amp;</span> o<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span> n <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token string\">\"Map\"</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">===</span> <span class=\"token string\">\"Set\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token string\">\"Arguments\"</span> <span class=\"token operator\">||</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">_arrayLikeToArray</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> minLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">_iterableToArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">iter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Symbol <span class=\"token operator\">!==</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">&amp;&amp;</span> Symbol<span class=\"token punctuation\">.</span>iterator <span class=\"token keyword\">in</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">_arrayWithoutHoles</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">_arrayLikeToArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">_arrayLikeToArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> len</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> len <span class=\"token operator\">></span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> arr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">return</span> arr2<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">printArr</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">printArr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> _console<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">(</span>_console <span class=\"token operator\">=</span> console<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>_console<span class=\"token punctuation\">,</span> <span class=\"token function\">_toConsumableArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">printArr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Babel đã cố gắng hết sức, tuy nhiên <code class=\"language-inline-text\">printArr</code> là kiểu <strong>array-like (na ná array)</strong> chứ không thực sự là một <strong>array</strong></p>\n<p>Các trình duyệt cũ sẽ không chạy được kiểu <em>na ná</em> array như vậy.</p>\n<p>Đây là lúc <strong>core-js</strong> phát huy tác dụng</p>\n<p><strong>core-js là tập hợp các polyfill</strong> cho các tính năng chưa được trình duyệt cập nhập.</p>\n<p>Cài đặt</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i core-js</code></pre></div>\n<p>Sau đó import vào file dùng bootstrap như <code class=\"language-inline-text\">src/index.js</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"core-js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">printArr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">printArr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Bổ sung config cho babel để dùng core-js trong lúc transform <code class=\"language-inline-text\">babel.config.json</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"@babel/preset-env\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">\"useBuiltIns\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"entry\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"corejs\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Kết quả chúng ta sẽ nhận được</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core-js/modules/es.symbol\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core-js/modules/es.symbol.description\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core-js/modules/es.symbol.async-iterator\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core-js/modules/es.symbol.has-instance\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core-js/modules/es.symbol.is-concat-spreadable\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core-js/modules/es.symbol.iterator\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core-js/modules/es.symbol.match\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core-js/modules/es.symbol.replace\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core-js/modules/es.symbol.search\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core-js/modules/es.symbol.species\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//...</span></code></pre></div>\n<p>Khi import một file core-js, chúng ta sẽ có được tất cả những polyfill cần thiết cho trình duyệt đã chỉ định.</p>\n<p>Tạm kết, sử dụng những CLI như <code class=\"language-inline-text\">create-react=app</code> hay Vue CLI, mọi thứ đã được config sẵn, tuy nhiên biết cơ chế và cách làm thủ công là cần thiết, chắc chắn sẽ có lúc chúng ta cần dùng.</p>\n<p><a href=\"https://www.valentinog.com/blog/preset-env/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How babel preset-env, core-js, and browserslistrc work together</a></p>\n","cover_image":""}},{"node":{"id":"5b62a4dd4557224e507cd92ffab74628","title":"Giới thiệu Javascript Proxy object","path":"/2021-09-06-gioi-thieu-proxy-cua-javascript/","date":"2021-09-06","timeToRead":3,"desc":"","content":"<blockquote>\n<p>Một object <code class=\"language-inline-text\">Proxy</code> sẽ bọc một object khác, và can thiệp trước khi truyền xử lý đó xuống object chính chủ, giống như một middleware</p>\n</blockquote>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><code class=\"language-inline-text\">target</code> là object chính chủ</li>\n<li><code class=\"language-inline-text\">handler</code> khai báo các phương thức sẽ bị can thiệp</li>\n</ul>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nproxy<span class=\"token punctuation\">.</span>test <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></code></pre></div>\n<p>Do không truyền một handler nào, nên <code class=\"language-inline-text\">test</code> sẽ không thay đổi</p>\n<p>Giờ chúng ta muốn can thiệp vào phương thức <code class=\"language-inline-text\">get</code> (khi chúng ta gọi <code class=\"language-inline-text\">object.prop</code>)</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\nnumbers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prop <span class=\"token keyword\">in</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span><span class=\"token number\">123</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span></code></pre></div>\n<p>Ví dụ khác, chúng ta có một dãy số, chỉ cho phép thêm vào kiểu <code class=\"language-inline-text\">number</code>, nếu cố tình thêm vào một kiểu dữ liệu khác sẽ không thực hiện được và trả về lỗi</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nnumbers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span>\n<span class=\"gridsome-highlight-code-line\">    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> val <span class=\"token operator\">==</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// trả về lỗi</span>\n<span class=\"gridsome-highlight-code-line\">            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></span>        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\n<span class=\"gridsome-highlight-code-line\">numbers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError ('set' on proxy returned false)</span></span></code></pre></div>\n<p>Một ứng dụng khác, bảo vệ các thuộc tính <code class=\"language-inline-text\">internal</code> của một object, ví dụ chúng ta có một số property bắt đầu bằng <code class=\"language-inline-text\">_</code>, chúng ta không cho phép truy cập các property</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">_password</span><span class=\"token operator\">:</span> <span class=\"token string\">\"****\"</span>\n<span class=\"token punctuation\">}</span>\n\nuser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n<span class=\"gridsome-highlight-code-line\">    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">.</span><span class=\"token function\">startWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access denied\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">value</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gridsome-highlight-code-line\">    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access denied\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gridsome-highlight-code-line\">    <span class=\"token function\">deleteProperty</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access denied\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">delete</span> target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gridsome-highlight-code-line\">    <span class=\"token function\">ownKeys</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>        <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>_password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error: Access denied</span>\n<span class=\"token keyword\">delete</span> user<span class=\"token punctuation\">.</span>_password<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error: Access denied</span></code></pre></div>\n<p>Nếu object của chúng ta là một function thì sao nhỉ?</p>\n<p>Ví dụ với hàm <code class=\"language-inline-text\">delay</code> sau, hàm này cho phép <em>delay</em> thời gian hàm được thực thi bằng <code class=\"language-inline-text\">setTimeout</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> ms</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>user<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nsayHi <span class=\"token operator\">=</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>sayHi<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chúng ta sẽ có một cách viết khác với <code class=\"language-inline-text\">Proxy</code>, điểm khác biệt là <code class=\"language-inline-text\">Proxy</code> sẽ chuyển tiếp luôn tất cả những property khác của function (như <code class=\"language-inline-text\">name</code>, <code class=\"language-inline-text\">length</code>)</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> ms</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n<span class=\"gridsome-highlight-code-line\">        <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">target</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>user<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nsayHi <span class=\"token operator\">=</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>sayHi<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gridsome-highlight-code-line\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>sayHi<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chúng đã đề cập đến các phương thức <em>tiền</em> xử lý <code class=\"language-inline-text\">ownKeys</code>, <code class=\"language-inline-text\">deleteProperty</code>, <code class=\"language-inline-text\">get</code>, <code class=\"language-inline-text\">set</code>, <code class=\"language-inline-text\">apply</code>. Ngoài ra nó còn có các phương thức khác các bạn có thể thảm khảo thêm</p>\n<ul>\n<li><code class=\"language-inline-text\">has</code>: trigger khi thực thi <code class=\"language-inline-text\">in</code></li>\n<li><code class=\"language-inline-text\">apply</code>: trigger khi thực thi một function</li>\n<li><code class=\"language-inline-text\">construct</code>: trigger với <code class=\"language-inline-text\">new</code></li>\n<li><code class=\"language-inline-text\">getPrototypeOf</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"> Object.getPrototypeOf</a></li>\n<li><code class=\"language-inline-text\">setPrototypeOf</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Object.setPrototypeOf</a></li>\n<li><code class=\"language-inline-text\">isExtensible</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Object.isExtensible</a></li>\n<li><code class=\"language-inline-text\">preventExtensions</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Object.preventExtensions</a></li>\n<li><code class=\"language-inline-text\">defineProperty</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"> Object.defineProperty</a></li>\n<li><code class=\"language-inline-text\">getOwnPropertyDescriptor</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Object.getOwnPropertyDescriptor</a></li>\n</ul>\n<p>Ví dụ lấy từ Javascript.info</p>\n","cover_image":""}},{"node":{"id":"591905fac7f3bf828c968a36492cacfa","title":"Phân biệt same-site và same-origin","path":"/2021-08-22-phan-biet-same-site-same-origin/","date":"2021-08-22","timeToRead":1,"desc":"","content":"<h2 id=\"origin\"><a href=\"#origin\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>origin</h2>\n<p><img src=\"https://web-dev.imgix.net/image/admin/PX5HrIMPlgcbzYac3FHV.png?auto=format&#x26;w=845\"></p>\n<blockquote>\n<p><strong>origin</strong> = scheme + host name + port</p>\n</blockquote>\n<p>Ví dụ nếu có URL là: <code class=\"language-inline-text\">https:///www.example.com:443/foo</code> thì <em>origin</em> của nó là <code class=\"language-inline-text\">https://www.example.com:443</code></p>\n<p>Vậy <strong>same-origin</strong> tức là những url có cùng scheme, host name, port, ngược lại thì gọi là <strong>cross-origin</strong></p>\n<table>\n<thead>\n<tr>\n<th>Origin A</th>\n<th>Origin B</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://www.example.com:443\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.example.com:443</a></td>\n<td><a href=\"https://example.com:443\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://example.com:443</a></td>\n<td>cross-origin: khác subdomain</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"https://www.evil.com:443\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.evil.com:443</a></td>\n<td>cross-origin: khác domain</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"https://login.example.com:443\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://login.example.com:443</a></td>\n<td>cross-origin: khác subdomain</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"http://www.example.com:443\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.example.com:443</a></td>\n<td>cross-origin: khác scheme</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"https://www.example.com:80\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.example.com:80</a></td>\n<td>cross-origin: khác port</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"https://www.example.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.example.com</a></td>\n<td>same-origin:  ngầm hiểu cùng port 443 (port mặc định của web)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"site\"><a href=\"#site\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Site</h2>\n<p><img src=\"https://web-dev.imgix.net/image/admin/oSRJzCJIr4OjGzUhcNDP.png?auto=format&#x26;w=845\"></p>\n<p>Top-level domains (TLDs) như <code class=\"language-inline-text\">.com</code>, <code class=\"language-inline-text\">.org</code> được liệt kê trong <a href=\"https://www.iana.org/domains/root/db\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">trang này</a></p>\n<blockquote>\n<p><strong>site</strong> =TLD + phần ngay phía trước domain</p>\n</blockquote>\n<p>Với ví dụ trên, thì site = <code class=\"language-inline-text\">example.com</code></p>\n<p>Tuy nhiên với những tên miền kiểu <code class=\"language-inline-text\">.com.vn</code>, <code class=\"language-inline-text\">github.io</code>, cách xác định site này không còn đúng, nên người ta tạo thêm danh sách <em>effective TLDs (eTLDs)</em>, <a href=\"https://publicsuffix.org/list/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">xem chi tiết publicsuffix.org/list</a></p>\n<p>Ví dụ, URL <code class=\"language-inline-text\">https://my-project.github.io</code> thì site = <code class=\"language-inline-text\">my-project.github.io</code></p>\n<p><img src=\"https://web-dev.imgix.net/image/admin/qmr35hpnIvpouOe9591g.png?auto=format&#x26;w=845\"></p>\n<p>Vậy <strong>same-site</strong> là những url có cùng site, ngược lại được gọi là <strong>cross-site</strong></p>\n<table>\n<thead>\n<tr>\n<th>URL A</th>\n<th>URL B</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://www.example.com:443\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.example.com:443</a></td>\n<td><a href=\"https://www.evil.com:443\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.evil.com:443</a></td>\n<td>cross-site: khác domain</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"https://login.example.com:443\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://login.example.com:443</a></td>\n<td>same-site: khác subdomain không sao</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"http://www.example.com:443\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.example.com:443</a></td>\n<td>same-site: khác scheme không sao</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"https://www.example.com:80\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.example.com:80</a></td>\n<td>same-site: khác port không sao</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"https://www.example.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.example.com</a></td>\n<td>same-site</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Gần đây khái niệm same-site được mở rộng và bao gồm luôn scheme</p>\n</blockquote>\n<p>Nếu tính luôn scheme, thì <code class=\"language-inline-text\">http://example.com</code> và <code class=\"language-inline-text\">https://example.com</code> là cross-site vì khác scheme</p>\n<p><a href=\"https://web.dev/same-site-same-origin/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://web.dev/same-site-same-origin/</a></p>\n","cover_image":""}},{"node":{"id":"d6762b9afc01eda0fb9f085209081f3f","title":"Ứng dụng Visitor Pattern để làm configure UI driven","path":"/2021-08-20-su-dung-visitor-pattern-de-tao-form-dong/","date":"2021-08-20","timeToRead":3,"desc":"","content":"<p>Vấn đề chúng ta cần giải quyết: chúng ta cần render form với các loại field phổ biến như <code class=\"language-inline-text\">date</code>, <code class=\"language-inline-text\">number</code>, <code class=\"language-inline-text\">dropdown</code>, <code class=\"language-inline-text\">text</code>, với điều kiện là những field này user có thể <strong>config</strong> được, giống như google form</p>\n<blockquote>\n<p>Visitor pattern là 1 phương pháp thiết kế trong OOP, cách làm là chúng ta sẽ có một object với cấu trúc định sẵn, sử dụng object này để thực hiện những xử lý chúng mong muốn</p>\n</blockquote>\n<p><strong>object với cấu trúc định sẵn</strong> thường được gọi là <code class=\"language-inline-text\">schema</code>, trong bài toán của chúng ta thì schema cần những property sau</p>\n<ul>\n<li><code class=\"language-inline-text\">fieldType</code>: ví dụ dropdown, textbox, date, number</li>\n<li><code class=\"language-inline-text\">label</code>: ví dụ first name, birthday</li>\n<li><code class=\"language-inline-text\">name</code>: field name dùng để submit form</li>\n<li><code class=\"language-inline-text\">required</code>: thuộc tính có bắt buộc không</li>\n</ul>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">\"First Name\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"firstName\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">fieldType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Text\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Birthdate\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"birthdate\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">fieldType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Date\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Number of Pets\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"numPets\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">fieldType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Number\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Để render form dựa trên <code class=\"language-inline-text\">schema</code> này, giải pháp xuất hiện ngay trong đầu sẽ là</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Form</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> schema <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">field</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">.</span>fieldType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"Text\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span> \n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"Date\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>date<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"Number\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>number<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tuy nhiên, đây chưa phải là visitor pattern, để có thể customize <em>sâu và rộng</em> schema, mà không cần cập nhập lại <code class=\"language-inline-text\">Form</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> defaultComponents <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">Text</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  \t<span class=\"token function-variable function\">Date</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"date\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  \t<span class=\"token function-variable function\">Number</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"number\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n    \n<span class=\"token keyword\">function</span> <span class=\"token function\">ViewGenerator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> schema<span class=\"token punctuation\">,</span> components <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> mergedComponents <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"gridsome-highlight-code-line\">\t\t<span class=\"token operator\">...</span>defaultComponents<span class=\"token punctuation\">,</span></span><span class=\"gridsome-highlight-code-line\">\t\t<span class=\"token operator\">...</span>components</span>\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">return</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">field</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> mergedComponents<span class=\"token punctuation\">[</span>field<span class=\"token punctuation\">.</span>fieldType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-inline-text\">ViewGenerator</code> cũng chung một công dụng như <code class=\"language-inline-text\">Form</code> ở trên, ở đây chúng ta chỉ làm thêm việc, 1 là đưa phần khai báo component ra <code class=\"language-inline-text\">defaultComponent</code> và bổ sung tham số <code class=\"language-inline-text\">components</code> để khi có nhu cầu mở rộng, override các component default thì truyền thêm. Quá generic!</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">birthdate</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1992-02-01\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">numPets</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> profileViewComponents <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">Text</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> label<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">Date</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> label<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">Number</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> label<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ProfileView</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> schema <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ViewGenerator</span></span>\n      <span class=\"token attr-name\">schema</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>schema<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">components</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>profileViewComponents<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Giờ nếu các field được group vào kiểu cha-con thì sao? Một cách (mình cũng không thích lắm) là thêm <code class=\"language-inline-text\">children</code> </p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Personal Details\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">fieldType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Section\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">\"First Name\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">fieldType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Text\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Birthdate\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">fieldType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Date\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Favorites\"</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token literal-property property\">fieldType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Section\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Favorite Movie\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">fieldType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Text\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Với một cấp duy nhất thì schema này ok, nhưng nếu lồng nhiều hơn một cấp thì đây không phải cách mình sẽ làm, anyway để đơn giản hóa chúng ta chỉ dùng một cấp. Phần <code class=\"language-inline-text\">ViewGenerator</code> cần được cập nhập để render thêm các children</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ViewGenerator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> schema<span class=\"token punctuation\">,</span> components <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> mergedComponents <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>defaultComponents<span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>components<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">field</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gridsome-highlight-code-line\">    <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> field<span class=\"token punctuation\">.</span>children <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span></span>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ViewGenerator</span></span>\n        <span class=\"token attr-name\">schema</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>field<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">components</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>mergedComponents<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n\n<span class=\"gridsome-highlight-code-line\">    <span class=\"token keyword\">return</span> mergedComponents<span class=\"token punctuation\">[</span>field<span class=\"token punctuation\">.</span>fieldType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>field<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Đệ quy như vậy chưa hẳn là giải pháp hoàn hảo, hy vọng các bạn nào có giải pháp nào tốt hơn thì góp ý thêm.</p>\n<p>Khi nghĩ về visitor pattern, chúng ta nghĩ đến</p>\n<ol>\n<li>Configure Object đứng độc lập</li>\n<li>UI đứng độc lập</li>\n<li>Hàm trung gian dùng để map configure object và UI tương ứng</li>\n</ol>\n<p><a href=\"https://www.arahansen.com/react-design-patterns-generating-user-configured-ui-using-the-visitor-pattern\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.arahansen.com/react-design-patterns-generating-user-configured-ui-using-the-visitor-pattern</a></p>\n","cover_image":""}},{"node":{"id":"70f3e2bd989634dc3f0a0ae306169ed8","title":"Prototype của object","path":"/2021-08-10-javascript-prototype-object/","date":"2021-08-10","timeToRead":3,"desc":"","content":"<p>Khi chúng ta <code class=\"language-inline-text\">console.log</code> một object của JS, sẽ thấy một property ẩn đặc biệt <code class=\"language-inline-text\">[[Prototype]]</code>, nó có thể là <code class=\"language-inline-text\">null</code> hoặc là trỏ đến một object khác</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">object a <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Prototype<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> prototype object b</code></pre></div>\n<p>Điều này có nghĩa là object a kế thừa từ object b, b có gì thì a sẽ có đó</p>\n<p>Chúng ta không thể truy xuất trực tiếp thông qua <code class=\"language-inline-text\">[[Prototype]]</code>, mà thông qua các phương pháp khác</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> animal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">eats</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Animal walk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> rabbit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">jumps</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"gridsome-highlight-code-line\">    <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> animal</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// hoặc khai báo bằng</span>\n<span class=\"gridsome-highlight-code-line\">rabbit<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> animal<span class=\"token punctuation\">;</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rabbit<span class=\"token punctuation\">.</span>eats<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => true;</span>\n\nrabbit<span class=\"token punctuation\">.</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-inline-text\">__proto__</code> != <code class=\"language-inline-text\">[[Prototype]]</code></p>\n</blockquote>\n<p>Về bản chất, <code class=\"language-inline-text\">__proto__</code> không phải là property <code class=\"language-inline-text\">[[Prototype]]</code>, chính xác thì nó là getter/setter của <code class=\"language-inline-text\">[[Prototype]]</code></p>\n<p>Thời điểm hiện tại, không khuyến khích dùng <code class=\"language-inline-text\">__proto__</code>, thay vào đó dùng <code class=\"language-inline-text\">Object.getPrototypeOf/Object.setPrototypeOf</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">surname</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Smith\"</span><span class=\"token punctuation\">,</span>\n    \n    <span class=\"token keyword\">set</span> <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    \n    <span class=\"token keyword\">get</span> <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> admin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">isAdmin</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>admin<span class=\"token punctuation\">.</span>fullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => John Smith</span>\n\nadmin<span class=\"token punctuation\">.</span>fullName <span class=\"token operator\">=</span> <span class=\"token string\">\"Alice Cooper\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gridsome-highlight-code-line\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>admin<span class=\"token punctuation\">.</span>fullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token comment\">// => Alice Cooper</span>\n\n<span class=\"gridsome-highlight-code-line\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>fullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token comment\">// => John Smith</span></code></pre></div>\n<p>Khi dùng prototype, không trực tiếp thay đổi property ở object cha từ object con, việc này cần thông qua một hàm setter để đảm bảo dữ liệu sẽ độc lập trên từng object.</p>\n<p>Như ví dụ trên, <code class=\"language-inline-text\">this</code> lúc này đang trỏ đến object phía trước dấu <code class=\"language-inline-text\">.</code>, nên dữ liệu hoàn toàn độc lập, trong khi các phương thức thì share với nhau</p>\n<h2 id=\"vòng-lặp-forin\"><a href=\"#v%C3%B2ng-l%E1%BA%B7p-forin\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vòng lặp <code class=\"language-inline-text\">for...in</code></h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> animal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">eats</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> rabbit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">jumps</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> animal\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gridsome-highlight-code-line\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>rabbit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token comment\">// jumps</span>\n\n<span class=\"gridsome-highlight-code-line\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> prop <span class=\"token keyword\">in</span> rabbit<span class=\"token punctuation\">)</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token comment\">// jumps, then eats</span></code></pre></div>\n<p>Nếu không muốn chạy qua các <code class=\"language-inline-text\">property</code> kề thừa qua <code class=\"language-inline-text\">__prototype__</code>, sử dụng <code class=\"language-inline-text\">obj.hasOwnProperty(key)</code> để xác định 1 property của được kế thừa hay không</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> prop <span class=\"token keyword\">in</span> rabbit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gridsome-highlight-code-line\">  <span class=\"token keyword\">let</span> isOwn <span class=\"token operator\">=</span> rabbit<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOwn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Our: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prop<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Our: jumps</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Inherited: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prop<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Inherited: eats</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Một điều thú vị, nếu để ý chúng ta không hề khai báo <code class=\"language-inline-text\">rabbit.hasOwnProperty</code>, vậy nó từ đâu mà có? và nó cũng không xuất hiện bên trong vòng lặp <code class=\"language-inline-text\">for...in</code>?</p>\n<p>Đây là một property kế thừa từ <code class=\"language-inline-text\">Object</code> chúa, và nó đã được khai báo decriptor với giá trị <code class=\"language-inline-text\">enumerable: false</code></p>\n<p>Đọc lại bài <a href=\"https://luubinhan.github.io/blog/2021-08-07-huong-dan-khoa-object-khong-cho-thay-doi/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">decriptor</a></p>\n<h2 id=\"objectprototype\"><a href=\"#objectprototype\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Object.prototype</h2>\n<p>Xét qua ví dụ</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> obj <span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => \"[object Object]\"</span></code></pre></div>\n<p>Bạn có bao giờ thắc mắc tại sao lại có kết quả <code class=\"language-inline-text\">[object Object]</code>? <code class=\"language-inline-text\">obj</code> là một object rỗng mà?</p>\n<p>Thật ra, <code class=\"language-inline-text\">obj = {}</code> sẽ tương đương với <code class=\"language-inline-text\">obj = new Object()</code>, tức là, chúng ta khởi tạo một object thông qua việc gọi một constructor function, và nó sẽ kế thừa tất cả property, phương thức từ <code class=\"language-inline-text\">Object</code>, như <code class=\"language-inline-text\">toString</code>, <code class=\"language-inline-text\">[[Prototype]]</code></p>\n<p>Khi gọi <code class=\"language-inline-text\">obj.toString()</code> có nghĩa là chúng ta đang gọi đến phương thức <code class=\"language-inline-text\">Object.prototype.toString</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => true</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">===</span> obj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => true</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => true</span></code></pre></div>\n<blockquote>\n<p>Tất cả những object khác như <code class=\"language-inline-text\">Array</code>, <code class=\"language-inline-text\">Date</code>, <code class=\"language-inline-text\">Function</code> đều kế thừa từ <code class=\"language-inline-text\">Object</code></p>\n</blockquote>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> arr<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> arr<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span></code></pre></div>\n<p><img src=\"https://javascript.info/article/native-prototypes/console_dir_array.png\"></p>\n<h2 id=\"tóm-tắt\"><a href=\"#t%C3%B3m-t%E1%BA%AFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tóm tắt</h2>\n<ul>\n<li>Mỗi object sẽ chứa một property đặc biệt <code class=\"language-inline-text\">[[Prototype]]</code>, giá trị là null, hoặc trỏ đến một object khác</li>\n<li>Sử dụng <code class=\"language-inline-text\">obj.__proto__</code> để truy cập</li>\n<li><code class=\"language-inline-text\">this</code> luôn trỏ đến obj hiện tại thay vì prototype object</li>\n<li><code class=\"language-inline-text\">for..in</code> sẽ chạy qua tất cả property chính chủ và property được kế thừa</li>\n<li>Tất cả những object build-in (như Array, Object, Date) đều lưu các phương thức bên trong property <code class=\"language-inline-text\">prototype</code> (Array.prototype, Object.prototype, Date.prototype)</li>\n</ul>\n<p>Javascript.info</p>\n","cover_image":""}},{"node":{"id":"a69e8a733fdf12a74c6dfcf52d90e187","title":"Các cách lock một property hay object của JS","path":"/2021-08-07-huong-dan-khoa-object-khong-cho-thay-doi/","date":"2021-08-07","timeToRead":2,"desc":"","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#kh%C3%B3a-property-c%E1%BB%A7a-object\">Khóa property của object</a></li>\n<li><a href=\"#kh%C3%B3a-to%C3%A0n-b%E1%BB%99-object\">Khóa toàn bộ object</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"khóa-property-của-object\"><a href=\"#kh%C3%B3a-property-c%E1%BB%A7a-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khóa property của object</h2>\n<p>Set giá trị một object trong js, chúng ta chỉ cần biết đến <code class=\"language-inline-text\">property: value</code></p>\n<p>Vậy nếu muốn <em>khóa</em> <em>property</em> này không cho phép chỉnh sửa thì sao?</p>\n<p>Mỗi property trong object sẽ được <em>khuyến mãi</em> thêm 3 <em>flag attribute</em> <strong>đặc biệt</strong> - <strong>descriptor</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> descriptor <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>descriptor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// kết quả</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"writable\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  \t<span class=\"token string-property property\">\"enumerable\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  \t<span class=\"token string-property property\">\"configurable\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><strong>writable</strong>: = <code class=\"language-inline-text\">true</code> thì chúng ta cập nhập được <code class=\"language-inline-text\">value</code></li>\n<li><strong>enumerable</strong>: = <code class=\"language-inline-text\">true</code> thì khi loop chúng ta sẽ <strong>thấy</strong> nó</li>\n<li><strong>configurable</strong>: = <code class=\"language-inline-text\">true</code> thì có thể <em>delete</em> được, các <em>attribute</em> <code class=\"language-inline-text\">writable</code>, <code class=\"language-inline-text\">enumerable</code> có thể chỉnh sửa</li>\n</ul>\n<p>Để thay đổi giá trị cho các attribute này, chúng ta thực hiện thông qua hàm <code class=\"language-inline-text\">Object.defineProperty(obj, propertyName, descriptor)</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"gridsome-highlight-code-line\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gridsome-highlight-code-line\">    <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span><span class=\"gridsome-highlight-code-line\">    <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span><span class=\"gridsome-highlight-code-line\">    <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// không còn change giá trị của name được nữa</span>\nuser<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Peter\"</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// Error: Cannot assign to read only property 'name'</span>\n\n<span class=\"token comment\">// không còn thấy khi loop</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> user<span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ví dụ một property có attribute <code class=\"language-inline-text\">configurable=false</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// tự động gán false hết cho các attribute</span>\n<span class=\"token keyword\">let</span> descriptor <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">,</span> <span class=\"token string\">'PI'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n{\n  \"value\": 3.141592653589793,\n  \"writable\": false,\n  \"enumerable\": false,\n  \"configurable\": false\n}\n*/</span>\n\nMath<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// Error, because it has writable: false</span>\n\n<span class=\"token comment\">// ko thể thay đổi attribute writable nữa</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">,</span> <span class=\"token string\">\"PI\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Error, because of configurable: false</span></code></pre></div>\n<blockquote>\n<p>Nếu chỉ set <code class=\"language-inline-text\">configurable = false</code> thì vẫn thay đổi giá trị được, nó chỉ không cho thay đổi attribute và delete</p>\n</blockquote>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nuser<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Pete\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// vẫn được</span>\n<span class=\"token keyword\">delete</span> user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n<p>Nếu muốn khai báo nhiều property cùng lúc, dùng <code class=\"language-inline-text\">Object.defineProperties()</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">prop1</span><span class=\"token operator\">:</span> descriptor1<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">prop2</span><span class=\"token operator\">:</span> descriptor2\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Ví dụ</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">surname</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Smith\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Lấy tất cả descriptor, <code class=\"language-inline-text\">Object.getOwnDescriptors(obj)</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> clone <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptors</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"khóa-toàn-bộ-object\"><a href=\"#kh%C3%B3a-to%C3%A0n-b%E1%BB%99-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khóa toàn bộ object</h2>\n<p>Để khóa hẳn một object, chúng ta có đến tận 3 phương thức</p>\n<ul>\n<li><code class=\"language-inline-text\">Object.preventExtension(obj)</code> không cho thể các property mới</li>\n<li><code class=\"language-inline-text\">Object.seal(obj)</code> không cho thêm/xóa các property, <code class=\"language-inline-text\">configurable: false</code></li>\n<li><code class=\"language-inline-text\">Object.freeze(obj)</code> không cho thêm/xóa/thay đổi property, <code class=\"language-inline-text\">configurable: false, writable: false</code></li>\n</ul>\n<p><a href=\"https://javascript.info/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://javascript.info/</a></p>\n","cover_image":""}},{"node":{"id":"87885af6fdd603de9385251725750946","title":"Lưu ý khi chạy async function với vòng lặp","path":"/2021-08-04-chay-cac-function-async-voi-vong-lap-nhu-the-nao/","date":"2021-08-04","timeToRead":1,"desc":"","content":"<p>Để chạy một chuỗi các async function theo thứ tự (tuần tự như chạy tiếp sức) cố định, nếu không để ý chúng ta sẽ có những kết quả không như mong đợi.</p>\n<blockquote>\n<p>Luôn dùng <code class=\"language-inline-text\">for...of</code></p>\n</blockquote>\n<p>Không sử dụng <code class=\"language-inline-text\">.forEach</code> nếu bên trong callback chứa các hàm cần <code class=\"language-inline-text\">await</code>. <strong>Luôn luôn</strong> dùng <code class=\"language-inline-text\">for..of</code> nếu muốn nó đúng thứ tự</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">asyncProcessing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ms</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wait:'</span><span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">forOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> timeouts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">775</span><span class=\"token punctuation\">,</span> <span class=\"token number\">125</span><span class=\"token punctuation\">,</span> <span class=\"token number\">990</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> timeout <span class=\"token keyword\">of</span> timeouts<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">asyncProcessing</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">// Kết quả\nwait: <span class=\"token number\">10</span>\nwait: <span class=\"token number\">600</span>\nwait: <span class=\"token number\">200</span>\nwait: <span class=\"token number\">775</span>\nwait: <span class=\"token number\">125</span>\nwait: <span class=\"token number\">990</span></code></pre></div>\n<p>Nếu thay vòng lặp <code class=\"language-inline-text\">for...of</code> bằng</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">timeouts<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">timeout</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">asyncProcessing</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">// kết quả nhận được\nwait: <span class=\"token number\">10</span>\nwait: <span class=\"token number\">125</span>\nwait: <span class=\"token number\">200</span>\nwait: <span class=\"token number\">600</span>\nwait: <span class=\"token number\">775</span>\nwait: <span class=\"token number\">990</span></code></pre></div>\n<blockquote>\n<p>Hoặc dùng <code class=\"language-inline-text\">Array.reduce</code></p>\n</blockquote>\n<p>Một lựa chọn khác nếu không thích dùng <code class=\"language-inline-text\">for...of</code>, kết quả sẽ giống i chang</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> timeouts<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">sum<span class=\"token punctuation\">,</span> timeout</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">asyncProcessing</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">// Kết quả\nwait: <span class=\"token number\">10</span>\nwait: <span class=\"token number\">600</span>\nwait: <span class=\"token number\">200</span>\nwait: <span class=\"token number\">775</span>\nwait: <span class=\"token number\">125</span>\nwait: <span class=\"token number\">990</span></code></pre></div>\n<p>Vậy nếu có nhu cầu chạy các hàm một cách bất đồng bộ, như phất cờ là cho toàn bộ chạy một lúc giống thi chạy diệt dã? Chúng ta có một lựa chọn rất hiển nhiên <code class=\"language-inline-text\">Promise.all</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> promises <span class=\"token operator\">=</span> timeouts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">timeout</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">await</span> <span class=\"token function\">asyncProcessing</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Kết quả</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">wait: <span class=\"token number\">10</span>\nwait: <span class=\"token number\">125</span>\nwait: <span class=\"token number\">200</span>\nwait: <span class=\"token number\">600</span>\nwait: <span class=\"token number\">775</span>\nwait: <span class=\"token number\">990</span></code></pre></div>\n<p>Vuilaptrinh.com</p>\n","cover_image":""}},{"node":{"id":"3b55946aad55a79852ebfac0c978cdeb","title":"typeof của React element để làm gì?","path":"/2021-07-26-giai-thich-typeof-cua-react-element-la-gi/","date":"2021-07-26","timeToRead":4,"desc":"Bài viết dành cho những bạn tò mò thích khám phá những gì diễn ra trong thế giới ngầm","content":"<p>Chúng ta viết một react component và bạn nghĩ mình viết JSX</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>marquee</span> <span class=\"token attr-name\">bgcolor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#000<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Chào buổi sáng</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>marquee</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Nhưng thật ra chúng ta đang gọi hàm này</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">/* type */</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/* props */</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">bgcolor</span><span class=\"token operator\">:</span> <span class=\"token string\">'#000'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/* children */</span> <span class=\"token string\">'Chào buổi sáng'</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Và function trên sẽ trả về cho chúng ta một <code class=\"language-inline-text\">object</code>, <em>người đời</em> gọi <code class=\"language-inline-text\">object</code> này là React element. Nó báo với React tiếp theo cần phải làm gì</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">bgcolor</span><span class=\"token operator\">:</span> <span class=\"token string\">'#000'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token string\">'Chào buổi sáng'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"gridsome-highlight-code-line\">    $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// ai đây ta?</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-inline-text\">$$typeof</code> là cái gì vậy? và tại sao nó có value là <code class=\"language-inline-text\">Symbol</code>?</p>\n<p>Nếu chỉ cần sử dụng React thì việc biết hay không biết đến <em>nó</em> cũng không ảnh hưởng gì thế giới, chỉ dành cho các bạn thích tò mò.</p>\n<h6 id=\"\"></h6>\n<p>Việc chèn thêm một HTML bằng code js như thế này đã từng rất phổ biến</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> messageEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmessageEl<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;p>'</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">.</span>text <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/p>'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Mọi thứ thật tuyệt vời cho đến khi <em>ai đó</em> cố tình nhét giá trị <code class=\"language-inline-text\">&lt;img src onerror=\"stealYourPassword()\"></code> cho <code class=\"language-inline-text\">message.text</code>. Một kiểu <em>hack nhẹ</em> cũng rất phổ biến</p>\n<p>Để tránh kiểu tấn công này, chúng ta dùng <code class=\"language-inline-text\">document.createTextNode()</code> hoặc <code class=\"language-inline-text\">textContent</code>, hoặc <strong>trục xuất</strong> hết các ký tự <code class=\"language-inline-text\">&lt;</code> và <code class=\"language-inline-text\">></code> để nó không thể nào chạy được.</p>\n<p>Tất nhiên không phải ai cũng biết và nhớ hết các thủ tục xử lý này khi nhận giá trị input từ user. Đó là lý do tại sao, các thư viện như React, việc <strong>trục xuất</strong> này được thực hiện mặc định</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Trong trường hợp <strong>chúng ta biết mình đang làm gì</strong>, muốn render thẻ HTML</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">__html</span><span class=\"token operator\">:</span> message<span class=\"token punctuation\">.</span>text <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Vậy dùng React thì an toàn tuyệt đối? <strong>Không</strong></p>\n<p>Phải nói có <a href=\"https://github.com/facebook/react/issues/3473#issuecomment-90594748\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nhiều lắm</a> cách tấn công dùng HTML và DOM. Việc chặn hết là quá khó và quá tốn thời gian.</p>\n<p>Ví dụ nếu render <code class=\"language-inline-text\">&lt;a href={user.website}></code>, và trang web dẫn đến có thể chỉ là <code class=\"language-inline-text\">javascript: stealYourPassword()</code>, hay spreading kiểu này <code class=\"language-inline-text\">&lt;div {...userData}></code> cũng nguy hiểm phết.</p>\n<p>Vì với cách viết này</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// escape tự động</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>...đã đủ an toàn lắm rồi đúng không? Không phải lúc nào cũng đúng. Đó là lý do tại sao có <code class=\"language-inline-text\">$$typeof</code></p>\n<h6 id=\"-1\"><a href=\"#-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a></h6>\n<p>Một React element là một <code class=\"language-inline-text\">object</code> như thế này</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">bgcolor</span><span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tất nhiên chúng ta sẽ tạo ra object này bằng việc gọi <code class=\"language-inline-text\">React.createElement()</code>. Nếu chúng ta sẽ lưu trữ <code class=\"language-inline-text\">object</code> như một JSON ở phía server</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// server cho phép user lưu ở dạng JSON</span>\n<span class=\"token keyword\">let</span> expectedTextButGotJSON <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">dangerouslySetInnerHTML</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">__html</span><span class=\"token operator\">:</span> <span class=\"token string\">'/* put your exploit here */'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> expectedTextButGotJSON <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Với React 0.13 đây là tử nguyệt</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>React 0.13 đây là điểm bị lợi dụng để tấn công XSS. (Đáng lẽ ra ở phía Server không nên để cho user lưu dạng JSON như thế)</p>\n<p>Phiên bản 0.14 React hỗ trợ xử lý con bug này bằng cách thêm đánh dấu <strong>đây chính hiệu là react element bằng Symbol</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">bgcolor</span><span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Bởi gì user hổng thể nào đặt một <code class=\"language-inline-text\">Symbol</code> vào trong file JSON. <strong>Thậm chí mấy ông làm backend ẩu tả cho phép return JSON thay vì text</strong> cũng không vấn đề (Đoạn này chắc lão Dan đang cáo mấy chú Backend)</p>\n<p>Điều tuyệt vời nữa là <code class=\"language-inline-text\">Symbol.for()</code> thì scope ở mức global giữa các môi trường như iframe, worker. Nghĩa là việc <strong>ném</strong> các component qua lại giữa các môi trường cũng không bị ảnh hưởng.</p>\n<h6 id=\"-2\"><a href=\"#-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a></h6>\n<p>Vậy nếu trình duyệt không hỗ trợ Symbol thì sao?</p>\n<p>Đó là chuyện của user, ai bảo xài trình duyệt cũ thì không được bảo hộ đầy đủ chứ biết sao. React sẽ vẫn thêm vào property <code class=\"language-inline-text\">$$typeof</code>, nhưng với giá trị <code class=\"language-inline-text\">0xeac7</code>, tại sao là <code class=\"language-inline-text\">0xeac7</code>? Tại tụi tui (React team) thấy nhìn nó giống chữ \"React\"</p>\n<p><a href=\"https://overreacted.io/why-do-react-elements-have-typeof-property/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bài của Dan</a></p>\n","cover_image":""}},{"node":{"id":"a9a687a96eb90a2f5426c4dd2413832d","title":"CSS Clamp giải thích và ứng dụng","path":"/2021-04-16-css-clamp-giai-thich-va-ung-dung/","date":"2021-04-16","timeToRead":1,"desc":"hàm clamp() của CSS rất hữu dụng khi xử lý các vấn đề liên quan đến responsive, là một tính năng mới hay ho bạn cũng nên biết đế áp dụng","content":"<h2 id=\"diễn-giải\"><a href=\"#di%E1%BB%85n-gi%E1%BA%A3i\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Diễn giải</h2>\n<blockquote>\n<p>Lưu ý: hàm clamp không chạy trên IE</p>\n</blockquote>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span>MIN<span class=\"token punctuation\">,</span> PREFER<span class=\"token punctuation\">,</span> MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Trong đó:</p>\n<ul>\n<li><strong>MIN</strong>: là giá trị chặn dưới, nếu giá trị <strong>PREFER &#x3C; MIN => return giá trị MIN</strong></li>\n<li><strong>PREFER</strong>: là giá trị sẽ được return nếu đang nằm trong khoản giữa MIN và MAX</li>\n<li><strong>MAX</strong>: là giá trị chặn trên, nếu giá trị <strong>PREFER > MAX => return giá trị MAX</strong></li>\n</ul>\n<h2 id=\"ứng-dụng\"><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ứng dụng</h2>\n<p>Sử dụng cho giá trị <code class=\"language-inline-text\">font-size</code></p>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span>1.1rem<span class=\"token punctuation\">,</span> 1vw + 1.1rem<span class=\"token punctuation\">,</span> 2.5rem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Diễn giải đoạn code chỉnh <code class=\"language-inline-text\">font-size</code> không thể rắc rối hơn ở trên: \"tính dùm tôi cái font size cho nó tự động to nhỏ theo màn hình, với công thức tính là 1% của viewport + 1.1rem, kết quả không được phép nhỏ hơn 1.1rem và lớn hơn 2.5rem\"</p>\n<p>Kết quả nhận được</p>\n<p><img src=\"https://css-tricks.com/wp-content/uploads/2020/08/clamp.gif\" alt=\"CSS Clamp giải thích và ứng dụng\"></p>\n<p>Chúng ta vừa cho phép giá trị font-size linh động theo kích thước màn hình, nhưng vẫn đảm bảo nó không được quá lớn và quá nhỏ với hai giá trị chặn trên, chặn dưới.</p>\n<p>Sử dụng với thuộc tính <code class=\"language-inline-text\">width</code></p>\n<p>Nếu bạn có đam mê với typography thì thể đọc hết cuốn <a href=\"https://readings.design/PDF/the_elements_of_typographic_style.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The element of typographic style</a>. Ở đây mình xin trích một đoạn trong cuốn sách này: từ 45 đến 75 ký tự trên một cột là chuẩn không cần chỉnh. Áp dụng lý thuyết này ta có thể viết</p>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span>45ch<span class=\"token punctuation\">,</span> 50%<span class=\"token punctuation\">,</span> 75ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-inline-text\">ch</code> là đơn vị tính độ rộng của một ký tự</p>\n</blockquote>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"clamp example\" src=\"https://codepen.io/luckyluu/embed/VwPdEOK?height=265&theme-id=light&default-tab=html,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/luckyluu/pen/VwPdEOK'>clamp example</a> by Lưu An\n  (<a href='https://codepen.io/luckyluu'>@luckyluu</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n","cover_image":""}},{"node":{"id":"98e9188f64c0008d4cd761f50283dccf","title":"Hỏi đáp cùng Vue","path":"/2021-04-04-hoi-dap-voi-vue/","date":"2021-04-04","timeToRead":6,"desc":"Một số khái niệm trong Vue cần nắm","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#function-component-l%C3%A0-g%C3%AC\">Function component là gì?</a></li>\n<li><a href=\"#t%E1%BA%A1i-sao-data-trong-vue-component-ph%E1%BA%A3i-l%C3%A0-1-function\">Tại sao data trong Vue component phải là 1 function</a></li>\n<li><a href=\"#v-if-v%C3%A0-v-show-kh%C3%A1c-nhau-nh%C6%B0-th%E1%BA%BF-n%C3%A0o\"><code class=\"language-inline-text\">v-if</code> và <code class=\"language-inline-text\">v-show</code> khác nhau như thế nào</a></li>\n<li><a href=\"#khai-b%C3%A1o-default-value-c%E1%BB%A7a-prop-l%C3%A0-array-ho%E1%BA%B7c-object\">Khai báo default value của <code class=\"language-inline-text\">prop</code> là <code class=\"language-inline-text\">array</code> hoặc <code class=\"language-inline-text\">object</code></a></li>\n<li><a href=\"#m%E1%BB%A5c-%C4%91%C3%ADch-c%E1%BB%A7a-key-trong-vue-component\">Mục đích của <code class=\"language-inline-text\">key</code> trong Vue Component</a></li>\n<li><a href=\"#v%C3%AC-sao-kh%C3%B4ng-s%E1%BB%AD-d%E1%BB%A5ng-v-if-v%C3%A0-v-for-c%C3%B9ng-l%C3%BAc\">Vì sao không sử dụng <code class=\"language-inline-text\">v-if</code> và <code class=\"language-inline-text\">v-for</code> cùng lúc?</a></li>\n<li><a href=\"#c%C3%A1c-event-modifier-cung-c%E1%BA%A5p-b%E1%BB%9Fi-vue\">Các <code class=\"language-inline-text\">event modifier</code> cung cấp bởi Vue</a></li>\n<li><a href=\"#m%E1%BB%99t-s%E1%BB%91-key-modifier-cung-c%E1%BA%A5p-s%E1%BA%B5n\">Một số key modifier cung cấp sẵn</a></li>\n<li><a href=\"#modifier-tr%C3%AAn-model\">Modifier trên model</a></li>\n<li><a href=\"#plugin-trong-vue-l%C3%A0-g%C3%AC-v%C3%A0-d%C3%B9ng-%C4%91%E1%BB%83-l%C3%A0m-g%C3%AC\">Plugin trong Vue là gì và dùng để làm gì</a></li>\n<li><a href=\"#tr%C6%B0%E1%BB%9Dng-h%E1%BB%A3p-n%C3%AAn-s%E1%BB%AD-d%E1%BB%A5ng-render-function-m%C3%A0-kh%C3%B4ng-d%C3%B9ng-ki%E1%BB%83u-vi%E1%BA%BFt-template\">Trường hợp nên sử dụng render function mà không dùng kiểu viết template</a></li>\n<li><a href=\"#m%E1%BB%A5c-%C4%91%C3%ADch-c%E1%BB%A7a-th%E1%BA%BB-keep-alive\">Mục đích của thẻ <code class=\"language-inline-text\">keep-alive</code></a></li>\n<li><a href=\"#82-c%E1%BA%A5u-tr%C3%BAc-m%E1%BB%99t-async-component\">82. Cấu trúc một async component</a></li>\n<li><a href=\"#x-template\">x template</a></li>\n<li><a href=\"#m%E1%BB%A5c-%C4%91%C3%ADch-c%E1%BB%A7a-once\">Mục đích của <code class=\"language-inline-text\">once</code></a></li>\n<li><a href=\"#m%E1%BB%A5c-%C4%91%C3%ADch-c%E1%BB%A7a-rendererror\">Mục đích của <code class=\"language-inline-text\">renderError</code></a></li>\n<li><a href=\"#nexttick-l%C3%A0-g%C3%AC\"><code class=\"language-inline-text\">nextTick</code> là gì</a></li>\n<li><a href=\"#l%C3%A0m-sao-%C4%91%E1%BB%83-force-update\">Làm sao để force update</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"function-component-là-gì\"><a href=\"#function-component-l%C3%A0-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Function component là gì?</h2>\n<p>Function component là một component với đặc điểm:</p>\n<ol>\n<li><strong>Stateless</strong>: không chứa state bên trong nó</li>\n<li><strong>Instanceless</strong>: không có instance, nghĩa là không có từ khóa <code class=\"language-inline-text\">this</code></li>\n</ol>\n<h2 id=\"tại-sao-data-trong-vue-component-phải-là-1-function\"><a href=\"#t%E1%BA%A1i-sao-data-trong-vue-component-ph%E1%BA%A3i-l%C3%A0-1-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao data trong Vue component phải là 1 function</h2>\n<p>Tại sao không thể khai báo như thế này</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'here data'</span> 😠\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>bắt buộc phải là function return data</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'here data'</span> 👍\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Theo tài liệu trên trang của Vue, nếu khai báo <code class=\"language-inline-text\">data</code> là 1 object, các <code class=\"language-inline-text\">instance</code> của 1 component sẽ trỏ đến cùng một <code class=\"language-inline-text\">data</code></p>\n<blockquote>\n<p>Việc làm này là với mục đích tiết kiệm bộ nhớ.</p>\n</blockquote>\n<p>Nếu mỗi component là một object độc lập hoàn toàn với nhau, khi component được khởi tạo, tất cả các phương thức và dữ liệu được khởi tạo theo.</p>\n<p>Vue cho phép các dữ liệu trên component hoàn toàn độc lập, còn những thứ như <code class=\"language-inline-text\">method</code>, <code class=\"language-inline-text\"></code>computed<code class=\"language-inline-text\">,</code>lifecycle hook` được tạo và lưu một lần duy nhất.</p>\n<h2 id=\"v-if-và-v-show-khác-nhau-như-thế-nào\"><a href=\"#v-if-v%C3%A0-v-show-kh%C3%A1c-nhau-nh%C6%B0-th%E1%BA%BF-n%C3%A0o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-inline-text\">v-if</code> và <code class=\"language-inline-text\">v-show</code> khác nhau như thế nào</h2>\n<p><code class=\"language-inline-text\">v-if</code> không render DOM, <code class=\"language-inline-text\">v-show</code> có render nhưng dùng css để ẩn đi, dùng <code class=\"language-inline-text\">v-show</code> để tối ưu vì không cần update DOM liên tục.</p>\n<h2 id=\"khai-báo-default-value-của-prop-là-array-hoặc-object\"><a href=\"#khai-b%C3%A1o-default-value-c%E1%BB%A7a-prop-l%C3%A0-array-ho%E1%BA%B7c-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khai báo default value của <code class=\"language-inline-text\">prop</code> là <code class=\"language-inline-text\">array</code> hoặc <code class=\"language-inline-text\">object</code></h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Array\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>☠️ No no đừng viết vậy nhé</p>\n<p>Tất cả <code class=\"language-inline-text\"></code>instance<code class=\"language-inline-text\">sẽ cùng *reference* tới một prop</code>arr`</p>\n<p>Cách viết đúng</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Array<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>viết kiểu ES6</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Array<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"mục-đích-của-key-trong-vue-component\"><a href=\"#m%E1%BB%A5c-%C4%91%C3%ADch-c%E1%BB%A7a-key-trong-vue-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mục đích của <code class=\"language-inline-text\">key</code> trong Vue Component</h2>\n<p>Để tối ưu, Vue tái sử dụng khi có thể, tránh khởi tạo component mọi lúc. Việc này dẫn đến một vài bug trong tính huống như bên dưới</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Enter your name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">v-else</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Enter your name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Nếu không có <code class=\"language-inline-text\">key</code>, Vue không tạo ra 2 <code class=\"language-inline-text\">&lt;input/></code>, mà dùng cùng 1 <code class=\"language-inline-text\">&lt;input/></code>, khi giá trị <code class=\"language-inline-text\">toggle</code> chuyển từ <code class=\"language-inline-text\">true</code> sang <code class=\"language-inline-text\">false</code> và ngược lại, nếu input này đang có giá trị nó sẽ không bị thay đổi.</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Enter your name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle-true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">v-else</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Enter your name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle-false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"vì-sao-không-sử-dụng-v-if-và-v-for-cùng-lúc\"><a href=\"#v%C3%AC-sao-kh%C3%B4ng-s%E1%BB%AD-d%E1%BB%A5ng-v-if-v%C3%A0-v-for-c%C3%B9ng-l%C3%BAc\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vì sao không sử dụng <code class=\"language-inline-text\">v-if</code> và <code class=\"language-inline-text\">v-for</code> cùng lúc?</h2>\n<p>Vì <code class=\"language-inline-text\">v-for</code> có thứ tự ưu tiên cao hơn <code class=\"language-inline-text\">v-if</code>, nên có thể bị bug khi dùng chung.</p>\n<h2 id=\"các-event-modifier-cung-cấp-bởi-vue\"><a href=\"#c%C3%A1c-event-modifier-cung-c%E1%BA%A5p-b%E1%BB%9Fi-vue\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các <code class=\"language-inline-text\">event modifier</code> cung cấp bởi Vue</h2>\n<p>Trong javascript cung cấp các modifier <code class=\"language-inline-text\">event.preventDefault()</code>, <code class=\"language-inline-text\">event.stopPropagation()</code> trong đối tượng <code class=\"language-inline-text\">event</code>. Vue thì có thêm các modifier bổ sung</p>\n<ul>\n<li><code class=\"language-inline-text\">.stop</code></li>\n<li><code class=\"language-inline-text\">.prevent</code></li>\n<li><code class=\"language-inline-text\">.capture</code></li>\n<li><code class=\"language-inline-text\">.self</code></li>\n<li><code class=\"language-inline-text\">.once</code></li>\n<li><code class=\"language-inline-text\">.passive</code></li>\n</ul>\n<p>Ví dụ</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token operator\">&lt;</span>button @click<span class=\"token punctuation\">.</span>stop<span class=\"token operator\">=</span><span class=\"token string\">\"callHandler\"</span><span class=\"token operator\">></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"một-số-key-modifier-cung-cấp-sẵn\"><a href=\"#m%E1%BB%99t-s%E1%BB%91-key-modifier-cung-c%E1%BA%A5p-s%E1%BA%B5n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một số key modifier cung cấp sẵn</h2>\n<p>Vue hỗ trợ các key modifier để lắng nghe sự kiện bàn phím trên <code class=\"language-inline-text\">v-on</code></p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>keyup.13</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>show<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>Khi ấn phím <strong>Enter</strong> (key code = 13), nó sẽ chạy hàm <code class=\"language-inline-text\">show</code>. Các phím có tên hay dùng</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">.enter\n.tab\n.delete\n.esc\n.space\n.up\n.down\n.up\n.left\n.right</code></pre></div>\n<p>Ví dụ sử dụng</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>keyup.enter</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>Và có luôn modifier cho chuột</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">.left\n.right\n.middle</code></pre></div>\n<h2 id=\"modifier-trên-model\"><a href=\"#modifier-tr%C3%AAn-model\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Modifier trên model</h2>\n<ul>\n<li><strong>lazy</strong>: thay vì change ngay lập tức, chỉ change sau một khoản thời gian delay</li>\n</ul>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">v-model.lazy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>msg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code></pre></div>\n<ul>\n<li><strong>number</strong> chuyển giá trị sang dạng số </li>\n</ul>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">v-model.number</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>number<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<ul>\n<li><strong>trim</strong> cắt bỏ khoảng trắng ở đầu và ở cuối</li>\n</ul>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">v-model.trim</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>msg<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<h2 id=\"plugin-trong-vue-là-gì-và-dùng-để-làm-gì\"><a href=\"#plugin-trong-vue-l%C3%A0-g%C3%AC-v%C3%A0-d%C3%B9ng-%C4%91%E1%BB%83-l%C3%A0m-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Plugin trong Vue là gì và dùng để làm gì</h2>\n<p>Plugin sẽ cho phép đăng ký các function ở scope global, các function được nói đến có thể là</p>\n<ul>\n<li><code class=\"language-inline-text\">directive</code>, <code class=\"language-inline-text\">filter</code>, <code class=\"language-inline-text\">transition</code></li>\n<li><code class=\"language-inline-text\">methods</code>, <code class=\"language-inline-text\">properties</code></li>\n<li><code class=\"language-inline-text\">mixin</code></li>\n<li>Dùng Vue.prototype để \"nhét\" thêm một số phương thức global, ví dụ <code class=\"language-inline-text\">vm.$router</code></li>\n</ul>\n<p>Để tạo một plugin</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">MyPlugin<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">install</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">Vue<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 1. global method, property</span>\n\tVue<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myGlobalMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 2. global asset</span>\n\tVue<span class=\"token punctuation\">.</span><span class=\"token function\">directive</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-directive'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">bind</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">,</span> oldNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 3. \"Nhét\" (inject) một trên toàn bộ component</span>\n\tVue<span class=\"token punctuation\">.</span><span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function-variable function\">created</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">//4. Một phương thức global</span>\n\t<span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$myMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">methodOptions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sau đó khai báo với Vue sử dụng plugin này</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>MyPlugin<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"trường-hợp-nên-sử-dụng-render-function-mà-không-dùng-kiểu-viết-template\"><a href=\"#tr%C6%B0%E1%BB%9Dng-h%E1%BB%A3p-n%C3%AAn-s%E1%BB%AD-d%E1%BB%A5ng-render-function-m%C3%A0-kh%C3%B4ng-d%C3%B9ng-ki%E1%BB%83u-vi%E1%BA%BFt-template\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Trường hợp nên sử dụng render function mà không dùng kiểu viết template</h2>\n<p>Như tạo component động dựa trên input hoặc giá trị slot</p>\n<h2 id=\"mục-đích-của-thẻ-keep-alive\"><a href=\"#m%E1%BB%A5c-%C4%91%C3%ADch-c%E1%BB%A7a-th%E1%BA%BB-keep-alive\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mục đích của thẻ <code class=\"language-inline-text\">keep-alive</code></h2>\n<p>Là một component dùng để giữ state và tránh việc re-render. Khi component trong trạng thái inactive nó sẽ cache lại chứ không destroy</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>comp-a</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>a > 1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>comp-a</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>comp-b</span> <span class=\"token attr-name\">v-else</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>comp-b</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"82-cấu-trúc-một-async-component\"><a href=\"#82-c%E1%BA%A5u-tr%C3%BAc-m%E1%BB%99t-async-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>82. Cấu trúc một async component</h2>\n<p>Vue có sẵn một factory function để <strong>lazy load</strong> component, được gọi với tên async component</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AsyncComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./MyComponent.vue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\">// indicator để biết load xong chưa</span>\n  <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> LoadingComponent<span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\">// nếu load bị lỗi</span>\n  <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> ErrorComponent<span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\">// mặc định 200ms, thời gian delay</span>\n  <span class=\"token literal-property property\">delay</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\">// mặc định là không có giới hạn, sau thời gian này, ErrorComponent sẽ hiển thị</span>\n  <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span> <span class=\"token number\">3000</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"x-template\"><a href=\"#x-template\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>x template</h2>\n<p>Cho phép chúng ta có thể định nghĩa một template bằng thẻ <code class=\"language-inline-text\">script</code>, chỉ cần thêm vào <code class=\"language-inline-text\">text/x-template</code></p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/x-template<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script-template<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n\t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>vuilaptrinh<span class=\"token punctuation\">.</span>com<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Vue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">x-template-example</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">'#script-template'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"mục-đích-của-once\"><a href=\"#m%E1%BB%A5c-%C4%91%C3%ADch-c%E1%BB%A7a-once\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mục đích của <code class=\"language-inline-text\">once</code></h2>\n<p>Nếu muốn render <strong>rất nhiều nội dung tĩnh</strong>, chúng ta chỉ cần thực hiện <strong>một lần</strong> và sau đó cache lại kết quả này.</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-once</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">vuilaptrinh.com</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"mục-đích-của-rendererror\"><a href=\"#m%E1%BB%A5c-%C4%91%C3%ADch-c%E1%BB%A7a-rendererror\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mục đích của <code class=\"language-inline-text\">renderError</code></h2>\n<p>Khi gọi hàm <code class=\"language-inline-text\">render</code> có phát sinh lỗi, hàm <code class=\"language-inline-text\">renderError</code> sẽ được gọi</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'An error'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token function\">renderError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h<span class=\"token punctuation\">,</span> err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'red'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span>stack <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"nexttick-là-gì\"><a href=\"#nexttick-l%C3%A0-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-inline-text\">nextTick</code> là gì</h2>\n<p>Hàm <code class=\"language-inline-text\">nextTick()</code> cho phép chạy một hàm khác sau khi dữ liệu có thay đổi và DOM đã cập nhập.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// thay đổi dữ liệu</span>\nvm<span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> <span class=\"token string\">'vuilaptrinh'</span>\n<span class=\"token comment\">// DOM chưa update</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// DOM đã update</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Có thể dùng như `.then` như Promise</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// DOM đã update</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"làm-sao-để-force-update\"><a href=\"#l%C3%A0m-sao-%C4%91%E1%BB%83-force-update\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Làm sao để force update</h2>\n<p>Trường hợp phải force update rất hiếm xảy ra. Nhưng nếu muốn chúng ta có thể gọi <code class=\"language-inline-text\">vm.$forceUpdate()</code> để ép buộc re-render</p>\n","cover_image":""}},{"node":{"id":"daaccafce3793adafdaca30286159d05","title":"Với CSS, chuyện gì xảy ra khi có 2 giá trị margin nằm liền kề nhau?","path":"/2020-12-14-quy-luat-cua-margin-collapse/","date":"2020-12-14","timeToRead":2,"desc":"Được biết với tên margin collapse, thường gây khó hiểu nếu bạn không nắm rule được áp dụng sẽ được chỉ ra trong bài này","content":"<p>Ví dụ với 2 thẻ <code class=\"language-inline-text\">&lt;p /></code> nằm liền kề nhau như thế này:</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Paragraph One<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Paragraph Two<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Thay vì <code class=\"language-inline-text\">48px</code>, thực tế giữa hai thẻ <code class=\"language-inline-text\">&lt;p /></code> chỉ có khoảng cách là <code class=\"language-inline-text\">24px</code></p>\n<p>Không rõ vì lý do <em>cá nhân</em> gì, mà CSS chỉ áp dụng cái luật <em>margin collapse</em> này cho giá trị <code class=\"language-inline-text\">top</code> và <code class=\"language-inline-text\">bottom</code>, nếu giá trị <em>margin</em> là <code class=\"language-inline-text\">left</code> hoặc <code class=\"language-inline-text\">right</code>, thì nó lại bình thường</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>P1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>P2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><em>Khoảng cách giữa (trái phải) là 48px</em></p>\n<p>Chưa đủ <em>dị</em>, CSS lại còn có quy định <strong>chỉ khi 2 element nằm liền kề với nhau mới hiệu nghiệm</strong>, nếu có 1 element chèn ở giữa thì lại bình thường 48px</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Paragraph One<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Paragraph Two<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Và sẽ ra sao nếu 2 element có giá trị <strong>margin không bằng nhau</strong>. <strong>winner take all</strong> sẽ được áp dụng, giá trị nào lớn hơn thì chỉ lấy giá trị đó.</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n    <span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 48px<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 90px<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Paragraph One<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>Paragraph Two<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><em>khoảng cách trên dưới sẽ là 90px</em></p>\n<p><em>margin collapse</em> không chỉ xuất hiện khi có giá trị <code class=\"language-inline-text\">top</code> và <code class=\"language-inline-text\">bottom</code>, nó còn xảy ra khi có 2 giá trị <code class=\"language-inline-text\">top</code> hoặc <code class=\"language-inline-text\">bottom</code></p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">.parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 72px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.child</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>child<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Paragraph One<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><em>Giá trị margin sẽ chỉ lấy top = 72px</em></p>\n<p>Lời khuyên cuối cùng, nếu thực sự hiểu và nhớ mình đang viết gì thì dùng margin, còn không thì dùng <code class=\"language-inline-text\">padding</code> cho an toàn.</p>\n","cover_image":""}},{"node":{"id":"7553ea288c1e211ad8544c5f8541e4d8","title":"Ghi chú file package.json của node module","path":"/2020-12-09-ghi-chu-chp-package-json/","date":"2020-12-09","timeToRead":1,"desc":"","content":"<p>Tạo file <code class=\"language-inline-text\">package.json</code> (đồng thời khởi tạo một npm package)</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> init\n// dùng các thiết đặt mặc định\n<span class=\"token function\">npm</span> init <span class=\"token parameter variable\">--yes</span></code></pre></div>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--TQDD7RDS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AQlNpEYhWUe_gU60G8X77mA.png\"></p>\n<p>Các property chính cần nắm trong file <code class=\"language-inline-text\">package.json</code></p>\n<p><code class=\"language-inline-text\">name</code>: tên project</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"my-blog-backend\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p><code class=\"language-inline-text\">version</code>: version hiện tại của project</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p><code class=\"language-inline-text\">main</code>: đường dẫn trỏ đến file <code class=\"language-inline-text\">entry point</code> chính của project</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"server.js\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p><code class=\"language-inline-text\">scripts</code>: chứa các command shortcut</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npx babel-node src/server.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npx babel-node src/server.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint ./server\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p><code class=\"language-inline-text\">bugs</code>: địa chỉ để báo bug và email nhận thông báo</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"bugs\"</span><span class=\"token operator\">:</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/owner/project/issues\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"project@hostname.com\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p><code class=\"language-inline-text\">private</code>: true nếu bạn không muốn publish, như đang làm project công ty thì không ai để <code class=\"language-inline-text\">false</code></p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"private\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></code></pre></div>\n<p><code class=\"language-inline-text\">keywords</code>: hỗ trợ các công cụ search tìm theo từ khóa</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"keywords\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p><code class=\"language-inline-text\">dependencies</code>: những thư viện nào đang phụ thuộc</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.17.1\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p><code class=\"language-inline-text\">devDependencies</code>: external dependencies trong lúc dev, không cần nếu bạn chỉ lấy production build.</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"@babel/cli\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.12.8\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"@babel/core\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.12.9\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"@babel/node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.12.6\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"@babel/preset-env\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.12.7\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-inline-text\">repository</code>: code bạn đặt source ở đâu, để người khác có thể đóng góp</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"repository\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"type\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"git\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"url\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/npm/cli.git\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-inline-text\">license</code>: bản quyền, project này open source hay tài sản của công ty</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span> <span class=\"token comment\">// hay proprietary, MIT</span></code></pre></div>\n","cover_image":""}},{"node":{"id":"ea7f1aa7c910794f819249677be85ab4","title":"Ghi chú về 3 module bundler rollup, parcel, webpack","path":"/2020-12-08-rollup-parcel-webpack/","date":"2020-12-08","timeToRead":2,"desc":"","content":"<blockquote>\n<p> <strong>bundler</strong> của JS là công cụ dùng để đưa tất cả file đã <code class=\"language-inline-text\">import</code> vào thành 1 file duy nhất. Nó còn có thể *minify` kết quả cuối cùng nếu bạn muốn.</p>\n</blockquote>\n<p>JS bundler có 3 <em>ông lớn</em> ở thời điểm hiện tại</p>\n<ul>\n<li>Parcel</li>\n<li>Rollup</li>\n<li>Webpack</li>\n</ul>\n<h3 id=\"đánh-giá-trên-việc-config-có-dễ-hay-không\"><a href=\"#%C4%91%C3%A1nh-gi%C3%A1-tr%C3%AAn-vi%E1%BB%87c-config-c%C3%B3-d%E1%BB%85-hay-kh%C3%B4ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đánh giá trên việc config có dễ hay không</h3>\n<p>Parcel số 1, gần như không phải làm gì</p>\n<p>Webpack và Rollup yêu cầu phải có file config riêng.</p>\n<p>Rollup có sẵn polyfill cho <code class=\"language-inline-text\">import/export</code>, webpack chưa có</p>\n<p>Rollup hỗ trợ relative path, webpack phải dùng <code class=\"language-inline-text\">path.resolve</code> hoặc <code class=\"language-inline-text\">path.join</code></p>\n<p>Config webpack phức tạp nhất, được cái hỗ trợ nhiều third-party</p>\n<h3 id=\"loại-bỏ-code-không-sử-dụng\"><a href=\"#lo%E1%BA%A1i-b%E1%BB%8F-code-kh%C3%B4ng-s%E1%BB%AD-d%E1%BB%A5ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Loại bỏ code không sử dụng</h3>\n<p>Loại bỏ code không sử dụng, còn gọi dead code, Tree shaking rất cần thiết để nâng cao hiệu năng.</p>\n<p>Parcel vẫn là số 1. Hỗ trợ tree-shaking cả ES6 và CommonJS</p>\n<p>Rollup đứng thứ 2.</p>\n<p>Webpack thì phải thủ công config để có tree-shaking.</p>\n<p>Rollup và webpack tập trung tree-shaking với ES6.</p>\n<h3 id=\"code-splitting\"><a href=\"#code-splitting\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Code splitting</h3>\n<p>Webpack số 1, đúng kiểu làm ít hưởng nhiều. Có 3 lựa chọn</p>\n<ul>\n<li>Sử dụng config entry</li>\n<li>Sử dụng plugin CommonsChunkPlugin</li>\n<li>Dynamic import</li>\n</ul>\n<p>Rollup và Parcel hỗ trợ splitting ngay từ đầu, nhưng đang vướng nhiều issue bị report.</p>\n<p>Webpack vẫn là lựa chọn hàng đầu.</p>\n<h3 id=\"live-reload\"><a href=\"#live-reload\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Live reload</h3>\n<p>Parcel gặp một số vấn đề với HTTP logging, Hooks và middleware</p>\n<p>Rollup phải cài thêm <code class=\"language-inline-text\">rollup-plugin-serve</code>, <code class=\"language-inline-text\">rollup-plugin-livereload</code> chứ không có sẵn.</p>\n<p>Webpack cài thêm <code class=\"language-inline-text\">webpack-dev-server</code>.</p>\n<p>Khả năng tùy chỉnh của webpack sẽ cao hơn Rollup và Parcel.</p>\n<h3 id=\"module-transform\"><a href=\"#module-transform\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Module transform</h3>\n<p>Các bundler chỉ hỗ trợ file JS, với các file khác chúng ta cần thêm plugin</p>\n<p><img src=\"https://miro.medium.com/max/300/1*fQYPJhmQuHA93GWcChKBTw.png\"></p>\n<p>Parcel hỗ trợ sẵn tất cả những kiểu file quen thuộc, không cần đụng đến config. Không những vậy, khi gặp các file config <code class=\"language-inline-text\">.babelrc</code>, <code class=\"language-inline-text\">.postcssrc</code>, <code class=\"language-inline-text\">.posthtml</code> nó sẽ tự handle</p>\n<p>Webpack và Rollup cần thêm plugin và config mới có transform và transpiler.</p>\n<h2 id=\"kết\"><a href=\"#k%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết</h2>\n<ul>\n<li>Nhanh gọn lẹ, app đơn giản, chọn Parcel</li>\n<li>Làm thư viện, hạn chế third-party, dùng Rollup</li>\n<li>App phức tạp, nhiều third-party, dùng webpack.</li>\n</ul>\n<p>Ghi chú từ <a href=\"https://medium.com/better-programming/the-battle-of-bundlers-6333a4e3eda9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rollup vs. Parcel vs. webpack: Which Is the Best Bundler?</a></p>\n","cover_image":""}},{"node":{"id":"9621ff01d30abb66d3b795a9a43ea3bf","title":"Ghi chú về JWT","path":"/2020-12-05-kinh-nghiem-lam-viec-voi-jwt/","date":"2020-12-05","timeToRead":4,"desc":"JWT đã không còn mới lạ ở năm 2020, tóm tắt một những vấn đề chính cần quan tâm khi làm việc với JWT","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#c%C6%A1-b%E1%BA%A3n-c%E1%BA%A7n-n%E1%BA%AFm\">Cơ bản, cần nắm</a></li>\n<li><a href=\"#ph%C3%ADa-backend\">Phía Backend</a></li>\n<li>\n<p><a href=\"#ph%C3%ADa-client-d%C3%B9ng-spa\">Phía client dùng SPA</a></p>\n<ul>\n<li><a href=\"#so-s%C3%A1nh-%C4%91%E1%BB%8Bnh-danh-b%E1%BA%B1ng-session-v%C3%A0-token\">So sánh định danh bằng Session và Token</a></li>\n<li><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81-v%E1%BB%9Bi-xss-v%C3%A0-csrf-khi-d%C3%B9ng-jwt\">Vấn đề với XSS và CSRF khi dùng JWT</a></li>\n<li><a href=\"#c%C3%B3-c%E1%BA%A7n-https-v%E1%BB%9Bi-jwt\">Có cần HTTPS với JWT?</a></li>\n<li><a href=\"#khi-n%C3%A0o-kh%C3%B4ng-n%C3%AAn-d%C3%B9ng-jwt\">Khi nào không nên dùng JWT</a></li>\n<li><a href=\"#th%C6%B0-vi%E1%BB%87n-ngon\">Thư viện ngon</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"cơ-bản-cần-nắm\"><a href=\"#c%C6%A1-b%E1%BA%A3n-c%E1%BA%A7n-n%E1%BA%AFm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cơ bản, cần nắm</h2>\n<p>JWT có thể nhớ nôm na là một JSON đã <strong>encrypt</strong> => gọi là <em>token</em>, chứa thông tin giúp backend có thể định danh bạn là ai, bạn có quyền gì</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Lmyom2tH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1048F41B3AC814B927887FF3C86602B940107555916A37D85A0BACB9135A34EA_1606545347515_jwt.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Lmyom2tH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1048F41B3AC814B927887FF3C86602B940107555916A37D85A0BACB9135A34EA_1606545347515_jwt.png\" alt=\"img\"></a></p>\n<p>Nguyên nhân ra đời của JWT là để giải quyết bài toán <strong>định danh</strong> trong <em>microservice</em></p>\n<h2 id=\"phía-backend\"><a href=\"#ph%C3%ADa-backend\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phía Backend</h2>\n<p>Ở phía Backend có 2 vấn đề chính cần quan tâm</p>\n<ol>\n<li>Tạo như thế nào</li>\n<li>Validate ra làm sao</li>\n</ol>\n<p>Việc tạo, sử dụng những thư viện có sẵn (<a href=\"https://www.npmjs.com/package/jsonwebtoken\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jsonwebtoken</a> nếu bạn đang dùng Node.js), Ưchỉ cần quan tâm những giá trị <em>đã</em>  hoặc <em>muốn</em> nhét thêm trong JSON</p>\n<p>Một trường tối quan trong trong JSON là <code class=\"language-inline-text\">expiresIn</code>, cho phép token sẽ expire sau bao lâu.</p>\n<p>Việc validate, thì dùng thư viện nào tạo token, nó sẽ có luôn phương thức để kiểm tra token đó có hợp lệ không.</p>\n<h2 id=\"phía-client-dùng-spa\"><a href=\"#ph%C3%ADa-client-d%C3%B9ng-spa\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phía client dùng SPA</h2>\n<h3 id=\"so-sánh-định-danh-bằng-session-và-token\"><a href=\"#so-s%C3%A1nh-%C4%91%E1%BB%8Bnh-danh-b%E1%BA%B1ng-session-v%C3%A0-token\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>So sánh định danh bằng Session và Token</h3>\n<p>Giống nhau</p>\n<ol>\n<li>Chức năng như nhau, để định danh</li>\n<li>Sau khi định danh ở Backend, nó trả về token cho client</li>\n<li>Gửi kèm token trên khi muốn dùng một service ở phía backend</li>\n</ol>\n<p>Khác nhau</p>\n<ul>\n<li>Session thì dữ liệu và trạng thái đăng nhập của user được lưu ở bộ nhớ phía server. Không phù hợp với RESTful APIs, mỗi service đều phải <code class=\"language-inline-text\">stateless</code>, anh là ai, anh từ đâu tới đều phải đưa chứng minh nhân dân chứ chúng tôi không ai rảnh đầu ngồi nhớ mặt hết những ai ra vào service.</li>\n<li>Session sẽ lưu thông tin về user ở <strong>cookie</strong> của trình duyệt, vấn đề là các service có thể khác domain, trình duyệt không biết và sẽ không đưa thông tin cookie cho các domain khác</li>\n</ul>\n<h3 id=\"vấn-đề-với-xss-và-csrf-khi-dùng-jwt\"><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81-v%E1%BB%9Bi-xss-v%C3%A0-csrf-khi-d%C3%B9ng-jwt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vấn đề với XSS và CSRF khi dùng JWT</h3>\n<p>Hết sức thận trọng khi xử lý JWT trong code, token là mồi ngon cho XSS và CSRF</p>\n<p>Tuyệt đối không dùng local storage để lưu JWT trên phía frontend. Localstorage có thể được truy xuất bằng JS cùng domain, attacker có thể dùng điểm này để inject thêm mã để lấy local storage. (XSS)</p>\n<p>Vì cookie được gửi trên tất cả <em>request</em>, attacker có thể lợi dụng điểm này để gửi một link yêu cầu đổi password (CSRF)</p>\n<p>Nếu không còn lựa chọn nào khác, lưu trong bộ nhớ, lưu ý sẽ mất khi user refresh.</p>\n<p>Cookie thật ra không phải là không dùng được, nhưng dùng thì phải kiểm tra</p>\n<ul>\n<li>Dùng <code class=\"language-inline-text\">httpOnly</code> để cookie không thể được truy cập thông qua JS</li>\n<li>Dùng <code class=\"language-inline-text\">SameSite</code> để hạn chế  cấp phát cookie đi các domain chỉ định. Nếu phải đưa qua nhiều domain khác nhau, dùng <em>Lax</em>, nó cho phép gọi truyền cookie khác domain nếu là <code class=\"language-inline-text\">GET</code></li>\n</ul>\n<p>Nếu muốn 100% an toàn tuyệt đối, phải trả một cái giá không rẻ, như tắt cross-domain request.</p>\n<p>Nếu sử dụng <code class=\"language-inline-text\">axios</code>, và backend tạo cookie đúng chuẩn, để axios lo phần đó cho an toàn, không cần lo việc xử lý token, cookie một cách thủ công, thiếu chuyên nghiệp.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>withCredentials <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://github.com/deleteman/sample-jwt-auth-vue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Code tham khảo</a></p>\n<h3 id=\"có-cần-https-với-jwt\"><a href=\"#c%C3%B3-c%E1%BA%A7n-https-v%E1%BB%9Bi-jwt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Có cần HTTPS với JWT?</h3>\n<p>HTTPS có đảm bảo an toàn tuyệt đối cho site, là yêu cầu bắt buộc khi sử dụng JWT?</p>\n<p>100% bảo mật là con số chưa ai dám nhận, hay nói toẹt ra là không thể. Sẽ luôn có đâu đó một con người tài giỏi, thông minh hơn bạn, họ sẽ tìm được cách tấn công phù hợp. May mắn thay những người xuất chúng như vậy họ cũng có đạo đức cao và không rảnh để làm những việc quá tầm thường. Đừng có lên mạng mà \"Anh đố chú hack được site anh!\"</p>\n<p>HTTPS là cơ chế <strong>encrypt</strong> thông tin đi-về giữa client và server, đảm bảo không có người ngoài nào có thể dòm ngó và đọc được bạn đang gửi gì, nhưng nếu nó đã chui được vào nhà bạn rồi thì thành thật mà nói HTTPS cũng không phải là cánh cửa chỉ có bạn mở được.</p>\n<h3 id=\"khi-nào-không-nên-dùng-jwt\"><a href=\"#khi-n%C3%A0o-kh%C3%B4ng-n%C3%AAn-d%C3%B9ng-jwt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khi nào không nên dùng JWT</h3>\n<p>Nếu bạn đang muốn sử dụng một stateful backend, JWT là thừa thãi không cần thiết.</p>\n<p>JWT sinh ra và phù hợp nhất với stateless API</p>\n<h3 id=\"thư-viện-ngon\"><a href=\"#th%C6%B0-vi%E1%BB%87n-ngon\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thư viện ngon</h3>\n<p>Vue: <a href=\"https://www.npmjs.com/package/vuejs-jwt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vuejs-jwt</a></p>\n<p>React: <a href=\"https://www.npmjs.com/package/react-jwt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-jwt</a></p>\n<p>Angular: <a href=\"https://www.npmjs.com/package/@auth0/angular-jwt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">angular-jwt</a></p>\n<p>Ghi chú từ bài viết <a href=\"https://dev.to/deleteman123/jwt-authentication-best-practices-3lf9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JWT Authentication Best Practices</a></p>\n","cover_image":""}},{"node":{"id":"80de2ea5867be30db65dd46d7520aa20","title":"Tóm tắt quá trình render của trình duyệt","path":"/2020-12-03-browser-render-website-nhu-the-nao/","date":"2020-12-03","timeToRead":2,"desc":"Tóm lược các bước chính trình duyệt cần thực hiện để render một trang web","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#parse-html\">Parse HTML</a></li>\n<li><a href=\"#2---external-resource\">2 - External Resource</a></li>\n<li><a href=\"#3---parse-css\">3 - Parse CSS</a></li>\n<li><a href=\"#4---execute-js\">4 - Execute JS</a></li>\n<li><a href=\"#5---merge-dom-v%C3%A0-cssom-%C4%91%E1%BB%83-t%E1%BA%A1o-render-tree\">5 - Merge DOM và CSSOM để tạo render tree</a></li>\n<li><a href=\"#6---calculate-layout-v%C3%A0-paint\">6 - Calculate layout và paint</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"parse-html\"><a href=\"#parse-html\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Parse HTML</h2>\n<p>Khi trình duyệt nhận một dữ liệu HTML, nó sẽ <strong>parse</strong> qua DOM node</p>\n<p><img src=\"https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-1.png\"></p>\n<h2 id=\"2---external-resource\"><a href=\"#2---external-resource\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2 - External Resource</h2>\n<p>Khi gặp các file CSS, JS nó sẽ chạy đi lấy dữ liệu đó, quá trình <strong>parse</strong> vẫn tiếp tục, nhưng sẽ <strong>chặn</strong> việc render trên trình duyệt (CSS được sếp vào loại resource <strong>block render</strong>)</p>\n<p>JS hơi khác, mặc định nó sẽ <strong>chặn</strong> quá trình parse HTML (<strong>block parse</strong>). Tuy nhiên với việc truyền thêm attribute <code class=\"language-inline-text\">defer</code> hoặc <code class=\"language-inline-text\">async</code>, việc parse js sẽ chạy ngầm, và không chặn parse HTML</p>\n<p>Với <code class=\"language-inline-text\">defer</code>, file sẽ được execute sau khi parse document xong, nếu nhiều file được thêm thuộc tính <code class=\"language-inline-text\">defer</code>, nó sẽ được execute theo thứ tự trong HTML</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">defer</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Với <code class=\"language-inline-text\">async</code>, file sẽ execute ngay khi load, nghĩa là có thể trong lúc parse hoặc sau lúc parse, vì vậy thứ tự đặt file không quan trọng, không đảm bảo file execute theo đúng thứ tự.</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">async</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-2.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--5qrUxpJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-2-1000.png\" alt=\"Fetching CSS and JavaScript resources in a web browser\"></a></p>\n<p>Với các trình duyệt sau này, nó sẽ hỗ trợ thêm việc <strong>preload</strong>, lấy về những resource chưa thật sự cần ở thời điểm hiện tại, nhưng trong tương lai có thể cần đến, việc này cũng tùy thuộc vào từng trình duyệt mà cách xử lý có khác nhau</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>style.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preload<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">as</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>style<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<h2 id=\"3---parse-css\"><a href=\"#3---parse-css\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3 - Parse CSS</h2>\n<p>Sau khi đã có được source file css \"trong tay\", trình duyệt làm tiếp 2 thao tác, parse CSS và build CSSOM</p>\n<p><a href=\"https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-3.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--lDR98Pu7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-3-1000.png\" alt=\"Parsing CSS and building the CSSOM in a web browser\"></a></p>\n<h2 id=\"4---execute-js\"><a href=\"#4---execute-js\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4 - Execute JS</h2>\n<p>Các trình duyệt khác nhau, quá trình parse-compile-execute sẽ khác nhau, cũng cần nhớ thêm việc parse JS rất tốn kém tài nguyên của máy.</p>\n<p>Ngay sau khi <strong>JS đã load xong</strong> và <strong>DOM đã parse xong</strong>, sự kiện <code class=\"language-inline-text\">document.DOMContentLoaded</code> sẽ được <em>emit</em></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Sau khi các async JS, image load xong, sự kiện <code class=\"language-inline-text\">window.load</code> sẽ được emit</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'load'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-4.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fu8vnHfk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-4-1000.png\" alt=\"Timeline of executing JavaScript in a web browser\"></a></p>\n<h2 id=\"5---merge-dom-và-cssom-để-tạo-render-tree\"><a href=\"#5---merge-dom-v%C3%A0-cssom-%C4%91%E1%BB%83-t%E1%BA%A1o-render-tree\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5 - Merge DOM và CSSOM để tạo render tree</h2>\n<p>Hợp thể giữa DOM và CSSOM sẽ cho ra <strong>render tree</strong>, là toàn bộ những gì sẽ hiển thị trên trình duyệt</p>\n<p><a href=\"https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-5.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ay06Rl9_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-5-1000.png\" alt=\"Merging the DOM and CSSOM to create a render tree in a web browser\"></a></p>\n<h2 id=\"6---calculate-layout-và-paint\"><a href=\"#6---calculate-layout-v%C3%A0-paint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6 - Calculate layout và paint</h2>\n<p>Sau khi đã nhận được <strong>render tree</strong>, trình duyệt đã có đủ thông tin để tính toán những phần tử nào, đặt ở đâu, kích thước ra làm sao, qua trình đó gọi là calculate layout, kết thúc quá trình tính toán này, trình duyệt sẽ bắt đầu quá trình <strong>paint</strong>, là những gì user sẽ thấy trên trình duyệt, đây cũng là bước cuối cùng.</p>\n<p><a href=\"https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-6.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--MBpASwvG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-6-1000.png\" alt=\"Calculating the layout and paint of a web page in a browser\"></a></p>\n<p><a href=\"https://dev.to/jstarmx/how-the-browser-renders-a-web-page-1ahc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a></p>\n","cover_image":""}},{"node":{"id":"82024782340394829e370035b38d7c55","title":"Các cách khai báo function trong JS","path":"/2020-11-09-3-cach-khai-bao-function-trong-js/","date":"2020-11-09","timeToRead":1,"desc":"","content":"<h2 id=\"khai-báo-tường-minh\"><a href=\"#khai-b%C3%A1o-t%C6%B0%E1%BB%9Dng-minh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khai báo tường minh</h2>\n<p>Cách khai báo function “vở lòng” mà ai cũng phải biết, sau từ khóa <code class=\"language-inline-text\">function</code> là tên function chúng ta muốn khai báo</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vui lap trinh\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"gán-function-vào-một-biến\"><a href=\"#g%C3%A1n-function-v%C3%A0o-m%E1%BB%99t-bi%E1%BA%BFn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gán function vào một biến</h2>\n<p>Chúng ta khai báo một biến, gán giá trị của biến này là một function</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vui lap trinh\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Với cách này, lưu ý là <strong>không dùng function trước khi khai báo</strong>, giống như chúng ta không thể dùng một biến mà chưa được khai báo vậy.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught ReferenceError: foo is not defined</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vui lap trinh\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"arrow-function\"><a href=\"#arrow-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Arrow function</h2>\n<p>Khai báo function bằng dấu <code class=\"language-inline-text\">=></code> mũi tên, bên trái là params của function, bên phải là phần <em>ruột</em> function</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vui lap trinh\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// hoặc bỏ luôn ngoặc kép</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'An'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'luckyluu'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vui'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'laptrinh'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> name<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> name<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Lưu ý cho arrow function, sẽ không có</p>\n<ul>\n<li>object đặc biệt <code class=\"language-inline-text\">arguments</code>, các function khác sẽ có cái object tên là <code class=\"language-inline-text\">arguments</code> chứa các tham số truyền vào cho function đó</li>\n<li>Ko có gọi <code class=\"language-inline-text\">new (() => {})</code></li>\n<li>Không có <code class=\"language-inline-text\">this</code>, <code class=\"language-inline-text\">super</code>, <code class=\"language-inline-text\">new.target</code></li>\n</ul>\n<h2 id=\"constructor\"><a href=\"#constructor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>constructor</h2>\n<p>Ko được khuyến khích sử dụng, đọc cho vui</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myStrangeFunc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"console.log(a + ' with Functions')\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">myStrangeFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fun\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs --> \"Fun with Functions\"</span></code></pre></div>\n<p>3 thằng còn lại, cũng không phổ biến, chưa thấy giá trị sử dụng</p>\n<ul>\n<li>generator function expression</li>\n<li>generator function declaration</li>\n<li>\n<p>GeneratorFunction constructor</p>\n<p>Nếu có đam mê bạn có thể tìm hiểu thêm</p>\n</li>\n</ul>\n","cover_image":""}},{"node":{"id":"c293d590b2cd028fa96aea3901842cf4","title":"Nếu vỗ ngực xưng tên là một javascript developer sành sỏi, mà không giải thích được prototype inheritance thì thật là kỳ","path":"/2020-11-16-gioi-thieu-javascript-prototype/","date":"2020-11-09","timeToRead":2,"desc":"","content":"<p>Khởi tạo một object trong JS bằng <em>object literal</em></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> cat <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">sound</span><span class=\"token operator\">:</span> <span class=\"token string\">'Meow!'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">legs</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nếu muốn sử dụng lại thuộc tính <code class=\"language-inline-text\">legs</code> trên các object khác, chúng ta đưa <code class=\"language-inline-text\">legs</code> vào một object <em>đặc biệt</em> <code class=\"language-inline-text\">pet</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pet <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">legs</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> cat <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">sound</span><span class=\"token operator\">:</span> <span class=\"token string\">'Meow!'</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Làm sao <em>inherit</em> từ một object khác? Câu trả lời là dùng <strong>Prototype</strong></p>\n<p>Nếu <code class=\"language-inline-text\">pet</code> là một <strong>prototype</strong> của <code class=\"language-inline-text\">cat</code>, khi đó <code class=\"language-inline-text\">cat</code> sẽ có luôn property <code class=\"language-inline-text\">legs</code></p>\n<blockquote>\n<p>Khi khởi tạo object bằng cách viết <em>object literal</em>, chúng ta có thêm một property đặc biệt <strong><code class=\"language-inline-text\">__proto__</code></strong> để set prototype cho object đó.</p>\n</blockquote>\n<p>Với ví dụ trên, chúng ta sẽ làm như sau</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pet <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">legs</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> cat <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">sound</span><span class=\"token operator\">:</span> <span class=\"token string\">'Meow!'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> pet <span class=\"token punctuation\">}</span>\ncat<span class=\"token punctuation\">.</span>legs<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 4</span></code></pre></div>\n<p>Property <code class=\"language-inline-text\">sound</code>, chỉ tồn tại trong <code class=\"language-inline-text\">cat</code>, người ta gọi tên nó là <strong>Own Property</strong> (property này là của anh, do anh tạo ra, anh không thừa hưởng từ bất kỳ ai).</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cat<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sound'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true;</span>\ncat<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'legs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p><img src=\"https://dmitripavlutin.com/static/9d6c9ba5235b280e315068f7c98bc16a/360ab/Selection_013.png\" alt=\"Inherited property from the prototype in JavaScript\"></p>\n<blockquote>\n<p>Bạn có thể sẽ thắc mắc, tại sao lại sinh ra <code class=\"language-inline-text\">inheritance</code> trong JS lằng nhằng thế ?</p>\n</blockquote>\n<p>Vì bản chất JS ngày xưa không hỗ trợ <code class=\"language-inline-text\">class</code>.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pet <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">legs</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> cat <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">sound</span><span class=\"token operator\">:</span> <span class=\"token string\">'Meow!'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> pet <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dog <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">sound</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bark!'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> pet <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> pig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">sound</span><span class=\"token operator\">:</span> <span class=\"token string\">'Grunt!'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> pet <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>Sử dụng <code class=\"language-inline-text\">__proto__</code> không còn được chấp nhận, thay vào đó hay dùng <code class=\"language-inline-text\">Object.create()</code></p>\n</blockquote>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pet <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">legs</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cat <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>pet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncat<span class=\"token punctuation\">.</span>sound <span class=\"token operator\">=</span> <span class=\"token string\">'Meow!'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Nhưng giờ JS đã có class đúng không?</strong></p>\n<p>Đúng, giờ có class bạn có thể viết</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pet</span> <span class=\"token punctuation\">{</span>\n  legs <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sound</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sound <span class=\"token operator\">=</span> sound<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Moew!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncat<span class=\"token punctuation\">.</span>legs<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// => 4</span>\ncat <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => true</span></code></pre></div>\n<p>Bên dưới, code trên sẽ được viết lại (bằng babel) gần giống thế này</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pet <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">legs</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">CreatePet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sound</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> sound<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> pet <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">CreatePet</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> pet<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> cat <span class=\"token operator\">=</span> <span class=\"token function\">CreatePet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Moew!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncat<span class=\"token punctuation\">.</span>legs<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// => 4</span>\ncat <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">CreatePet</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => true</span></code></pre></div>\n<p>Bạn có thể sẽ thấy hơi bối rối, nếu bạn có nền tảng từ những ngôn ngữ có hỗ trợ class <em>ngay trong trứng</em> như Java hay PHP, không sao cả, ai cũng cần thời gian để tiếp thu những kiến thức mới.</p>\n<p><a href=\"https://dmitripavlutin.com/javascript-prototypal-inheritance/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">What Makes JavaScript JavaScript? Prototypal Inheritance</a></p>\n","cover_image":""}},{"node":{"id":"15a301c04f8dd6bdf2fc4f20caee25ef","title":"Factory Function vs. Class","path":"/2020-11-02-function-factory-trong-js/","date":"2020-11-02","timeToRead":4,"desc":"Khi ES6 giới thiệu class chúng ta nghĩ nó đã giải quyết tất cả những vấn đề của hàm constructor trong JS, thật sự nó đã thay thế được factory function hay chưa, cùng tìm hiểu.","content":"<p>Để tạo một <code class=\"language-inline-text\">object</code> với các <em>method</em> và <em>data</em> dựng sẵn, chúng ta có các phương pháp để làm trong JS:</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// class</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassCar</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">drive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GOOO'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> car1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car1<span class=\"token punctuation\">.</span><span class=\"token function\">drive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// constructor function</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ConstructorCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">ConstructorCar</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">drive</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GOOO'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> car2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstructorCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car2<span class=\"token punctuation\">.</span><span class=\"token function\">drive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// factory</span>\n<span class=\"token keyword\">const</span> proto <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">drive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GOOO'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">factoryCar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> car3 <span class=\"token operator\">=</span> <span class=\"token function\">factoryCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car3<span class=\"token punctuation\">.</span><span class=\"token function\">drive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Về tính năng, thì cả 3 là như nhau, và có thể dùng thay thế cho nhau được.</p>\n<blockquote>\n<p>Có thể bạn chưa biết: Trong JS, bất cứ function nào trả về một object, mà không phải là <code class=\"language-inline-text\">constructor function</code> hay <code class=\"language-inline-text\">class</code>, thì được gọi là <strong>factory function</strong></p>\n</blockquote>\n<h2 id=\"vài-so-sánh-giữa-factory-và-constructor\"><a href=\"#v%C3%A0i-so-s%C3%A1nh-gi%E1%BB%AFa-factory-v%C3%A0-constructor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vài so sánh giữa Factory và Constructor</h2>\n<blockquote>\n<p> Constructor bắt buộc phải khởi tạo bằng keyword <code class=\"language-inline-text\">new</code>. Factory thì không.</p>\n</blockquote>\n<p>Vậy thì keyword <code class=\"language-inline-text\">new</code> của Constructor và Class nó làm gì?</p>\n<ol>\n<li>Khởi tạo một object mới và <code class=\"language-inline-text\">bind</code> giá trị cho từ khóa <code class=\"language-inline-text\">this</code></li>\n<li>Bind <code class=\"language-inline-text\">instance.__proto__</code> vào <code class=\"language-inline-text\">Constructor.prototype</code></li>\n<li>Bind <code class=\"language-inline-text\">instance.__proto__.constructor</code> vào <code class=\"language-inline-text\">Constructor</code></li>\n<li>Ngầm trả về <code class=\"language-inline-text\">this</code> (refer vào giá trị <code class=\"language-inline-text\">instance</code>)</li>\n</ol>\n<p><strong>Về mặt lợi ích khi sử dụng Constructor và Class</strong></p>\n<ul>\n<li>Dễ tiếp cận với những người có xuất phát điểm từ những ngôn ngữ lập trình có hỗ trợ <code class=\"language-inline-text\">class</code></li>\n<li><code class=\"language-inline-text\">this</code> luôn prefer đến một object mới</li>\n<li>Nhiều người thích cách viết <code class=\"language-inline-text\">myFoo = new Foo()</code></li>\n</ul>\n<p><strong>Nhược điểm của Constructor và Class</strong></p>\n<ul>\n<li>Bắt buộc phải dùng từ khóa <code class=\"language-inline-text\">new</code> để khởi tạo</li>\n<li>Tất cả những thằng sử dụng đều dùng chung một constructor, rất khó nếu muốn thay đổi hiện thực bên trong constructor từ bên ngoài.</li>\n<li>Không đáp ứng dụng nguyên tắc <code class=\"language-inline-text\">open/closed</code>: API chỉ cho phép <em>extend</em>, nhưng không cho phép <em>modify</em></li>\n<li>Kết thừa <code class=\"language-inline-text\">class</code> và các vấn đề mà nó sinh ra là câu chuyện không mới khi các bạn viết object oriented (có thể tra cứu google bằng các từ khóa sau: <strong>the fragile base class problem, the gorilla banana problem, the duplication by necessity problem</strong>)</li>\n</ul>\n<p><strong>Lợi ích việc sử dụng Factory</strong></p>\n<ul>\n<li><strong>Linh động</strong> hơn <code class=\"language-inline-text\">class</code> và <code class=\"language-inline-text\">constructor function</code></li>\n<li>Bạn sẽ không bao giờ đụng vô từ khóa <code class=\"language-inline-text\">extend</code> vốn là một con đường đã gây ra đau khổ bấy năm nay.</li>\n<li>Không còn cần dùng từ khóa <code class=\"language-inline-text\">new</code>, không còn loằn ngoằn rối rắm với từ khóa <code class=\"language-inline-text\">this</code></li>\n<li>Nhiều người thích đọc code dạng này <code class=\"language-inline-text\">myFoo = createFoo()</code></li>\n</ul>\n<p><strong>Nhược điểm của Factory</strong></p>\n<ul>\n<li>Không thể check <code class=\"language-inline-text\">instanceof</code>, do không có liên kết giữa instance và <code class=\"language-inline-text\">Factory.prototype</code></li>\n<li><code class=\"language-inline-text\">this</code> không còn refer vào object mới tạo (<code class=\"language-inline-text\">this</code> cũng có ưu nhược điểm của nó chứ không phải toàn nhược điểm)</li>\n<li><strong>Có thể</strong> chậm hơn một chút. Thật ra cũng không cần quá bận tâm việc này, vì chưa ai chứng minh được nó ảnh hưởng đến tốc độ, hiệu năng của ứng dụng, lý thuyết là chậm hơn <em>xíu xiu</em> nhưng máy tính giờ nhanh lắm rồi.</li>\n</ul>\n<h2 id=\"nên-dùng-factory-function\"><a href=\"#n%C3%AAn-d%C3%B9ng-factory-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nên dùng factory function</h2>\n<p>Có rất nhiều quan điểm đưa ra để khuyên bạn đừng dùng contructor trong JS, bài viết <a href=\"https://tsherif.wordpress.com/2013/08/04/constructors-are-bad-for-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Constructors Are Bad For JavaScript</a> có liệt kê khá khá lý do bạn có thể tham khảo.</p>\n<p>Một ví dụ tương đối đầy đủ về factory function</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Player</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> level</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> health <span class=\"token operator\">=</span> level <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLevel</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> level<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">die</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// uh oh</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">damage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\thealth <span class=\"token operator\">-=</span> x<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>health <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">die</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">attack</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">enemy</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>level <span class=\"token operator\">&lt;</span> enemy<span class=\"token punctuation\">.</span><span class=\"token function\">getLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">damage</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>enemy<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> has damaged </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>level <span class=\"token operator\">>=</span> enemy<span class=\"token punctuation\">.</span><span class=\"token function\">getLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tenemy<span class=\"token punctuation\">.</span><span class=\"token function\">damage</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> has damaged </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>enemy<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> attack<span class=\"token punctuation\">,</span> damage<span class=\"token punctuation\">,</span> getLevel<span class=\"token punctuation\">,</span> getName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> jimmie <span class=\"token operator\">=</span> <span class=\"token function\">Player</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jim'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> badGuy <span class=\"token operator\">=</span> <span class=\"token function\">Player</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jeff'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\njimmie<span class=\"token punctuation\">.</span><span class=\"token function\">attack</span><span class=\"token punctuation\">(</span>badGuy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Để kế thừa trong factory function, các bạn có thể làm như sau</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Tôi là </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> sayName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Nerd</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// tạo Person, sau đó trả về hàm sayName</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> sayName <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doSomethingNerdy</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tôi tài giỏi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> sayName<span class=\"token punctuation\">,</span> doSomethingNerdy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> jeff <span class=\"token operator\">=</span> <span class=\"token function\">Nerd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'luckyluu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\njeff<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Tôi là luckyluu</span>\njeff<span class=\"token punctuation\">.</span><span class=\"token function\">doSomethingNerdy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// tôi tài giỏi</span></code></pre></div>\n<p>Với cách trên, chỉ định rất cụ thể hàm nào sẽ được trả về, còn nếu muốn trả tất cả những gì của Person, đơn giản là merge object</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Nerd</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> prototype <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doSomethingNerdy</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tôi tài giỏi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> prototype<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> doSomethingNerdy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nghe có vẻ hơi trái tai, mặc dù JS đã có hỗ trợ class, nhưng các bạn đừng nên dùng nó.</p>\n<p><a href=\"https://medium.com/javascript-scene/javascript-factory-functions-vs-constructor-functions-vs-classes-2f22ceddf33e\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Factory Functions vs Constructor Functions vs Classes</a></p>\n<p><a href=\"https://www.theodinproject.com/courses/javascript/lessons/factory-functions-and-the-module-pattern\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FACTORY FUNCTIONS AND THE MODULE PATTERN</a></p>\n","cover_image":""}},{"node":{"id":"2482830f7eedf36f393fccfb1042c32a","title":"Import lodash như thế nào mới đúng","path":"/2020-10-20-import-lodash-sao-cho-dung/","date":"2020-10-20","timeToRead":2,"desc":"Nếu cần xài lodash, thì bạn xài nó sao cho hiệu quả","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#c%C3%A1ch-1\">Cách 1</a></li>\n<li><a href=\"#c%C3%A1ch-2\">Cách 2</a></li>\n<li><a href=\"#c%C3%A1ch-3\">Cách 3</a></li>\n<li><a href=\"#d%C3%B9ng-lodash-babel-plugin\">Dùng lodash babel plugin</a></li>\n<li><a href=\"#d%C3%B9ng-lodash-webpack-plugin\">Dùng Lodash webpack plugin</a></li>\n<li><a href=\"#k%E1%BA%BFt-lu%E1%BA%ADn\">Kết luận</a></li>\n</ul>\n<!-- /TOC -->\n<p>Mình đã từng nghe một bạn Principle FE trong công ty phát biểu là</p>\n<blockquote>\n<p>Đã 2020 rồi mà còn xài lodash là sao, lodash đã tối cổ, chả ai xài nữa đâu</p>\n</blockquote>\n<p>Khoan bàn chuyện đúng sai trong phát biểu này, nếu bạn cũng như mình, vẫn đang dùng <code class=\"language-inline-text\">lodash</code> thì bạn cần biết <code class=\"language-inline-text\">import</code> nó như thế nào cho đúng</p>\n<p><strong>Tại sao cần làm đúng? Vì nếu làm sao vô tình bạn sẽ làm phình cục bundle lên gấp mấy chục lần</strong></p>\n<p>Giờ so sánh 3 cách <code class=\"language-inline-text\">import</code></p>\n<h2 id=\"cách-1\"><a href=\"#c%C3%A1ch-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cách 1</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tại sao lại chọn kiểu này? Không cần quan tâm đến user, cảm giác rất quyền lực như có găng tay vô cực, chỉ với <code class=\"language-inline-text\">_.</code> chúng ta có tất cả mọi thứ.</p>\n<p>Điểm yếu, đây là cách tuyệt đối nghiêm cấm, vì gần như là load nguyên cái thư viện</p>\n<p><img src=\"https://cdn2.hubspot.net/hubfs/208250/Blog_Images/lodash2.png\" alt=\"the best way to import lodash\"></p>\n<p>Tổng 190 KB, Lodash ngốn hết 72.5kb</p>\n<h2 id=\"cách-2\"><a href=\"#c%C3%A1ch-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cách 2</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> map<span class=\"token punctuation\">,</span> each<span class=\"token punctuation\">,</span> get<span class=\"token punctuation\">,</span> set <span class=\"token punctuation\">}</span> from lodash<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Kiểu này ổn, dễ đọc, rất rõ ràng để thấy được những hàm nào cần sử dụng.</p>\n<p>Tuy nhiên, nó lại không khác gì với cách 1. Tổng vẫn là 190kb</p>\n<h2 id=\"cách-3\"><a href=\"#c%C3%A1ch-3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cách 3</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> map <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash/map'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> each <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash/each'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">get</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash/get'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">set</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash/set'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Kết quả cho thấy đây là cách tiết kiệm nhất, mặc dù thực tế sử dụng cho thấy cách này hơi tốn công anh em dev của chúng ta và nhìn đoạn import có vẻ dài.</p>\n<p><img src=\"https://cdn2.hubspot.net/hubfs/208250/Blog_Images/lodash3.png\" alt=\"benchmarking lodash import\"></p>\n<p>Một số ý kiến cho là dùng <a href=\"https://www.npmjs.com/package/lodash-es\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lodash-es</a>, một phiên bản theo kiểu ES module sẽ tiết kiệm hơn, đây là kết quả đo được</p>\n<ol>\n<li>Cách 1: 256.4 KB</li>\n<li>Cách 1: 256.54 KB</li>\n<li>Cách 1: 142.39 KB</li>\n</ol>\n<p>Như vậy việc dùng <code class=\"language-inline-text\">lodash-es</code> có vẻ là vô dụng</p>\n<h2 id=\"dùng-lodash-babel-plugin\"><a href=\"#d%C3%B9ng-lodash-babel-plugin\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dùng lodash babel plugin</h2>\n<p>Sử dụng <a href=\"https://github.com/lodash/babel-plugin-lodash\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lodash babel plugin</a> chúng ta có kết quả 140kb trên tất cả các cách <em>import</em></p>\n<p><img src=\"https://cdn2.hubspot.net/hubfs/208250/Blog_Images/lodash4.png\" alt=\"importing lodash with the lodash babel plugin\"></p>\n<h2 id=\"dùng-lodash-webpack-plugin\"><a href=\"#d%C3%B9ng-lodash-webpack-plugin\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dùng Lodash webpack plugin</h2>\n<p><a href=\"https://github.com/lodash/lodash-webpack-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lodash webpack plugin</a> không biết đã bùa chú kiểu gì mà kết quả cuối cùng rất <em>ngon</em> 121kb cho cách 1, các cách khác sẽ còn bé hơn nữa</p>\n<p><img src=\"https://cdn2.hubspot.net/hubfs/208250/Blog_Images/lodash5.png\" alt=\"imprting lodash with the webpack plugin\"></p>\n<h2 id=\"kết-luận\"><a href=\"#k%E1%BA%BFt-lu%E1%BA%ADn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết luận</h2>\n<p>Nếu ko siêng bạn nên dùng cách 3, còn nếu siêng bạn setup với babel-plugin-lodash và lodash-webpack-plugin để đạt hiệu quả cao nhất.</p>\n<p>Lodash-es thì nên dẹp luôn đừng xài vì nó ko thay đổi gì tích cực cả.</p>\n<p><a href=\"https://www.blazemeter.com/blog/the-correct-way-to-import-lodash-libraries-a-benchmark\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Correct Way to Import Lodash Libraries</a></p>\n","cover_image":""}},{"node":{"id":"ad5c122b1a15878ccf9df5fdf8b56f7f","title":"Micro frontend tại sao và như thế nào","path":"/2020-10-15-micro-frontend-giai-thich-huong-dan/","date":"2020-10-15","timeToRead":11,"desc":"Lướt qua một vài điểm về Micro Frontend, ý tưởng chính và các vấn đề được quan tâm","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#t%E1%BA%A1i-sao-b%E1%BA%A1n-c%E1%BA%A7n-bi%E1%BA%BFt-%C4%91%E1%BA%BFn-micro-frontend\">Tại sao bạn cần biết đến Micro frontend</a></li>\n<li><a href=\"#micro-frontend-l%C3%A0-c%C3%A1i-g%C3%AC\">Micro frontend là cái gì</a></li>\n<li>\n<p><a href=\"#hi%E1%BB%87n-th%E1%BB%B1c-h%C3%B3a-nh%C6%B0-th%E1%BA%BF-n%C3%A0o\">Hiện thực hóa như thế nào</a></p>\n<ul>\n<li><a href=\"#t%C6%B0%C6%A1ng-t%C3%A1c-gi%E1%BB%AFa-c%C3%A1c-%E1%BB%A9ng-d%E1%BB%A5ng\">Tương tác giữa các ứng dụng</a></li>\n<li><a href=\"#th%C6%B0-vi%E1%BB%87n-component-d%C3%B9ng-chung\">Thư viện component dùng chung</a></li>\n<li><a href=\"#styling\">Styling</a></li>\n<li><a href=\"#c%C3%A1c-c%C3%A1ch-%C4%91%E1%BB%83-integrate\">Các cách để integrate</a></li>\n</ul>\n</li>\n<li><a href=\"#k%E1%BA%BFt\">Kết</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"tại-sao-bạn-cần-biết-đến-micro-frontend\"><a href=\"#t%E1%BA%A1i-sao-b%E1%BA%A1n-c%E1%BA%A7n-bi%E1%BA%BFt-%C4%91%E1%BA%BFn-micro-frontend\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao bạn cần biết đến Micro frontend</h2>\n<p>Vấn đề cần giải quyết:</p>\n<ul>\n<li>Ứng dụng càng lúc càng phình ra về quy mô, cũng như độ phức tạp</li>\n<li><strong>Một codebase FE</strong> duy nhất mà muốn maintain thì chỉ có <em>gặp ác mộng hằng đêm</em></li>\n<li>Nhiều team FE, mỗi team chỉ làm việc trên một phần tính năng nào đó rất cụ thể, chỉ 1 codebase mà hơn 5 team vào làm việc trên đó thì thôi xong</li>\n<li>Bạn muốn có 1 codebase viết bằng typescript, một codebase viết js, một feature được build bằng React, feature khác được build Vue. Nếu bạn có thắc mắc tại sao lại có nhu cầu này? Câu trả lời là vì bạn ko ràng buộc team vào một technical nào cả, team có thể tự quyết định</li>\n<li>Nâng cấp từng project sẽ dễ hơn nhiều</li>\n</ul>\n<h2 id=\"micro-frontend-là-cái-gì\"><a href=\"#micro-frontend-l%C3%A0-c%C3%A1i-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Micro frontend là cái gì</h2>\n<p>Đây là cách tiếp cận cũng <em>na ná</em> như microservice, thay vì 1, chúng ta có nhiều codebase, và trên từng codebase chỉ quản lý một tính năng cụ thể mà thôi.</p>\n<p>Có thể xem một ứng dụng web là một bộ kết hợp của nhiều tính năng, mỗi một tính năng như vậy được quản lý bởi một team</p>\n<p><img src=\"https://microfrontends.com/img/deployment.png\" alt=\"A flow diagram showing 3         independent deployment pipelines for 3 different micro frontends, which         are then composed into a single app after deployment\"></p>\n<p>Thuật ngữ này được giới thiệu lần đầu vào 2016 bởi <a href=\"https://www.thoughtworks.com/radar/techniques/micro-frontends\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Thourghtworks Tech Radar</a></p>\n<blockquote>\n<p>An architectural style where independently deliverable frontend applications are composed into a greater whole</p>\n</blockquote>\n<p><img src=\"https://microfrontends.com/img/radar.png\" alt=\"Micro frontends on the ThoughtWorks tech radar\"></p>\n<p>Một cách trực quan hơn bạn có thể tham khảo hình sau</p>\n<p><img src=\"https://microfrontends.com/img/composition.png\" alt=\"A wireframe of an example website,         showing a container application that embeds a micro frontend within it\"></p>\n<p>Còn đây là demo của trang microfrontends.com <a href=\"https://demo.microfrontends.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://demo.microfrontends.com/</a></p>\n<h2 id=\"hiện-thực-hóa-như-thế-nào\"><a href=\"#hi%E1%BB%87n-th%E1%BB%B1c-h%C3%B3a-nh%C6%B0-th%E1%BA%BF-n%C3%A0o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hiện thực hóa như thế nào</h2>\n<p>Để có thể hiện thực hóa hoàn chỉnh micro frontend sẽ bao gồm rất nhiều thứ, ở đây chỉ tóm tắt một số vấn đề cơ bản cần giải quyết</p>\n<h3 id=\"tương-tác-giữa-các-ứng-dụng\"><a href=\"#t%C6%B0%C6%A1ng-t%C3%A1c-gi%E1%BB%AFa-c%C3%A1c-%E1%BB%A9ng-d%E1%BB%A5ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tương tác giữa các ứng dụng</h3>\n<p>Một câu hỏi được đặt ra đầu tiên là nếu tách ra thành nhiều bộ source như vậy, làm sao chúng có thể nói chuyện được với nhau? Một cách tổng quát, <strong>nên hạn chế việc trao đổi thông tin qua lại ít chừng nào tốt chừng đó</strong>, bởi vì nếu bạn làm ngược lại, nghĩa là bạn đang lặp lại vấn đề chúng ta muốn giải quyết ngay từ đâu: <strong>decoupling</strong> các tính năng với nhau.</p>\n<p>Nhưng việc trao đổi giữa các ứng dụng với nhau là không tránh khỏi và cần thiết, chúng ta chỉ tiết chế chứ không loại bỏ hết, <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Custom event</a> là một cách, cách khác, lấy mô hình truyền callback và data từ trên xuống trong React để làm <strong>kênh</strong> trao đổi thông tin, làm như thế nó sẽ rất tường minh, cách thứ 3 là thông qua thanh đường dẫn trên trình duyệt, chút nữa nói kỹ hơn.</p>\n<p>Tựa chung, chúng ta không share state, mà chỉ share dữ liệu trong database như microservice.</p>\n<h3 id=\"thư-viện-component-dùng-chung\"><a href=\"#th%C6%B0-vi%E1%BB%87n-component-d%C3%B9ng-chung\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thư viện component dùng chung</h3>\n<p>Nó chung, ý tưởng <strong>re-use</strong> lại những component UI không có gì mới, nghe cũng rất hợp lý, mặc dù ai cũng biết việc đó khó làm.</p>\n<p>Sai lầm thường thấy là việc tạo các component như vậy quá sớm, việc <em>hào hứng</em> quá mức vào xây dựng một Framework UI chuẩn không cần chỉnh, viết một lần xài mãi mãi, thống nhất giao diện trên mọi mặt trận là điều thường thấy ở mọi team. Tuy nhiên, trong thực tế, kinh nghiệm cho biết rằng việc đó rất khó, nếu không muốn nói là không thể, không thể ngồi nghĩ ra một bộ Framework với tất cả các API cần thiết rồi đưa cho tất cả các team xài, chắc gì API đó đã đáp ứng đúng nhu cầu cho tất cả các team? Lời khuyên là các team cứ tạo ra những component riêng trong codebase nếu họ thấy cần, dù cho nó có bị duplicate đây nữa cũng chẳng sao. Và khi đã chín mùi, những API nào cần thiết sẽ hiện nguyên hình, chúng ta đưa những cho đang bị duplicate vào trong thư viện dùng chung.</p>\n<p>Tất nhiên cũng có những ngoại lệ, những component mà nhìn vào chúng ta biết ngay là cần đưa vào share component, như icon, label, button, autocomplete, drop-down, search, table. Và nhớ là chỉ đưa đúng UI logic, đừng đưa bất kỳ business logic và domain logic vào đây. Ví dụ như một component <code class=\"language-inline-text\">ProductTable</code> cho riêng cái domain Product là không nên, chỉ nên làm một cái component <code class=\"language-inline-text\">Table</code>.</p>\n<p>Thoạt nghe làm một share component có vẻ đơn giản, nhưng nó lại là công việc đòi hỏi kỹ thuật phải rất cứng tay, và người có nhúng tay vào tất cả các team.</p>\n<h3 id=\"styling\"><a href=\"#styling\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Styling</h3>\n<p>Styling 2020 là một câu chuyện dài, như mình đã kể trong một <a href=\"https://luubinhan.github.io/blog/2020-05-22-cam-giac-viet-css-nam-2020/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bài viết</a>, tựa chung mà nói bạn có thể dùng BEM, dùng SASS, dùng CSS module, dùng CSS-in-JS, dùng Styled Component, dùng Tailwind, kiểu gì cũng được, miễn đảm bảo được style không chồng chéo lên nhau, thằng nào độc lập thằng đó, và tự tin đoạn code nó sẽ chạy như <strong>đúng như lường trước</strong>.</p>\n<h3 id=\"các-cách-để-integrate\"><a href=\"#c%C3%A1c-c%C3%A1ch-%C4%91%E1%BB%83-integrate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các cách để integrate</h3>\n<p>Để hiện thực hóa ý tưởng của micro frontend, cũng có nhiều cách làm, cách nào cũng có đánh đổi. Tựu chung, nếu xét theo hướng giao diện, chúng ta có thể tổ chức nó theo dạng một ứng dụng dạng <strong>container</strong>, bao gồm những thành phần chung như <em>header</em>, <em>menu</em>, và các <em>micro frontend</em> sẽ nhúng vào phần <strong>ruột</strong> của trang</p>\n<p><img src=\"https://martinfowler.com/articles/micro-frontends/composition.png\" alt=\"A web page with boxes drawn around different sections. One box wraps the whole page, labelling it as the &#x27;container application&#x27;. Another box wraps the main content (but not the global page title and navigation), labelling it as the &#x27;browse micro frontend&#x27;\"></p>\n<p><strong>Cách 1: composition dùng server side template</strong></p>\n<p>Với một cách <em>không chính thống lắm</em> cho việc phát triển code FE, chúng ta render HTML ở phía server, với nhiều bộ template khác nhau. Chúng ta có một file <code class=\"language-inline-text\">index.html</code> với các phần tử chung, server sẽ quyết định phần <em>ruột</em> trả về cho từng trang</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dir</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ltr<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Feed me<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>🍽 Feed me<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--# include file=\"$PAGE.html\" --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Ở ví dụ này đang dùng với Nginx, biến <code class=\"language-inline-text\">$PAGE</code> sẽ ứng với URL đang được request</p>\n<div class=\"gridsome-highlight\" data-language=\"nginx\"><pre class=\"language-nginx\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token directive\"><span class=\"token keyword\">listen</span> <span class=\"token number\">8080</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">server_name</span> localhost</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token directive\"><span class=\"token keyword\">root</span> /usr/share/nginx/html</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">index</span> index.html</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">ssi</span> <span class=\"token boolean\">on</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># Redirect / đến /browse</span>\n    <span class=\"token directive\"><span class=\"token keyword\">rewrite</span> ^/$ http://localhost:8080/browse redirect</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># Dùng HTML nào để insert dựa vào URL</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> /browse</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token directive\"><span class=\"token keyword\">set</span> <span class=\"token variable\">$PAGE</span> <span class=\"token string\">'browse'</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> /order</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token directive\"><span class=\"token keyword\">set</span> <span class=\"token variable\">$PAGE</span> <span class=\"token string\">'order'</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> /profile</span> <span class=\"token punctuation\">{</span>\n      set $PAGE 'profile'\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\"># Cho phép render ở index.html</span>\n    <span class=\"token directive\"><span class=\"token keyword\">error_page</span> <span class=\"token number\">404</span> /index.html</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Kỹ thuật này mình không nắm lắm, nên cũng chỉ để đây cho các bạn tham khảo, trong thực tế mình gặp và làm việc với những cách làm bên dưới nhiều hơn.</p>\n<p><strong>Cách 2: Integrate lúc build</strong></p>\n<p>Cách này sẽ publish cái micro frontend ở dạng package, container sẽ khai báo những micro frontend này ở dạng dependency. File <code class=\"language-inline-text\">package.json</code> nó sẽ trông như thế này:</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@feed-me/container\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A food delivery web app\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@feed-me/browse-restaurants\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.2.3\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@feed-me/order-food\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.5.6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@feed-me/user-profile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.8.9\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Thoạt nhìn, cũng khá hợp lý, tuy nhiên nếu để ý, bạn sẽ thấy chúng ta phải re-compile và release trên từng cục dependency, rồi sao đó lại phải release tiếp container. Đây vẫn không phải là cách làm được khuyến khích.</p>\n<p><strong>Cách 3: Integrate lúc run-time bằng iframe</strong></p>\n<p>Đây cũng là cách mà dự án mình đang dùng, một cách tiếp cận đơn giản nhất để compose nhiều ứng dụng với nhau trong trình duyệt đã có từ rất rất lâu. Lợi ích có thể kể thêm của cách làm này là phần styling và biến global đều độc lập và không bị đụng độ lẫn nhau</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Feed me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Welcome to Feed me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>micro-frontend-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token keyword\">const</span> microFrontendsByRoute <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">'/'</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://browse.example.com/index.html'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">'/order-food'</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://order.example.com/index.html'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">'/user-profile'</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://profile.example.com/index.html'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> iframe <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'micro-frontend-container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      iframe<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> microFrontendsByRoute<span class=\"token punctuation\">[</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Nhược điểm của cách này là việc tích hợp giữa các phần của ứng dụng, như route, history, deep-link sẽ rất phức tạp, responsive cũng sẽ gặp nhiều vấn đề cần xử lý hơn.</p>\n<p><strong>Cách 4: Integrate lúc run-time bằng JavaScript</strong></p>\n<p>Đây là cách linh hoạt nhất, và được nhiều team chọn làm. Mỗi một micro frontend sẽ được nhét vào trong trang bằng thẻ <code class=\"language-inline-text\">&lt;script /></code>. Container sẽ làm nhiệm vụ cho mount micro frontend nào và thực thi các hàm liên quan để báo cho các micro frontend sẽ render ở đâu và khi nào.</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Feed me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Welcome to Feed me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">&lt;!-- Nó không render bất cứ gì cả --></span>\n    <span class=\"token comment\">&lt;!-- Nó sẽ đưa vào hàm entry-point vào `window` --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://browse.example.com/bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://order.example.com/bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://profile.example.com/bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>micro-frontend-root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token comment\">// Những global function này được nhét vào window bằng các đoạn script include ở trên</span>\n      <span class=\"token keyword\">const</span> microFrontendsByRoute <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">'/'</span><span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>renderBrowseRestaurants<span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">'/order-food'</span><span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>renderOrderFood<span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">'/user-profile'</span><span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>renderUserProfile\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> renderFunction <span class=\"token operator\">=</span> microFrontendsByRoute<span class=\"token punctuation\">[</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Sau khi đã có các hàm cần thiết,</span>\n      <span class=\"token comment\">// đưa id của element sẽ dùng để render</span>\n      <span class=\"token function\">renderFunction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'micro-frontend-root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Trên đây chỉ là ví dụ cơ bản nhất để mô tả kỹ thuật sẽ làm, thật tế có thể phải thêm thắt một số thứ khác. Không giống với cách integrate lúc build, <code class=\"language-inline-text\">bundle.js</code> có thể được deploy một cách độc lập. Và khác iframe, chúng ta có thể linh động chọn lựa việc render micro frontend nào chúng ta thích.</p>\n<p>Nếu có hứng thú với cách làm này, có thể tham khảo thêm <a href=\"https://martinfowler.com/articles/micro-frontends.html#TheExampleInDetail\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ví dụ chi tiết hơn</a></p>\n<p><strong>Cách 5: Integrate lúc run-time bằng Web Component</strong></p>\n<p>Một lựa chọn khác cũng tương tự như cách làm trên, mỗi một micro frontend sẽ được link với element</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Feed me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Welcome to Feed me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">&lt;!-- Chưa render gì cả --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://browse.example.com/bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://order.example.com/bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://profile.example.com/bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>micro-frontend-root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token comment\">// Những element type này được định nghĩa ở các script trên</span>\n      <span class=\"token keyword\">const</span> webComponentsByRoute <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">'/'</span><span class=\"token operator\">:</span> <span class=\"token string\">'micro-frontend-browse-restaurants'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">'/order-food'</span><span class=\"token operator\">:</span> <span class=\"token string\">'micro-frontend-order-food'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">'/user-profile'</span><span class=\"token operator\">:</span> <span class=\"token string\">'micro-frontend-user-profile'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> webComponentType <span class=\"token operator\">=</span> webComponentsByRoute<span class=\"token punctuation\">[</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Tạo instance và đưa vào document ứng với từng loại phù hợp</span>\n      <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'micro-frontend-root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> webComponent <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>webComponentType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      root<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>webComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Khác nhau duy nhất so với cách trên có lẽ chỉ là việc dùng <em>web component</em> thay vì một interface chúng ta tự định nghĩa.</p>\n<p><strong>Tương tác với Backend</strong></p>\n<p>Cái này chưa biết, không dám chém.</p>\n<h2 id=\"kết\"><a href=\"#k%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết</h2>\n<p>Micro frontend có thể không lạ với một số người và khá mới với số còn lại, thực tế mà nói đã có rất nhiều dự án đang áp dụng kiến trúc này (dự án mình đang làm).</p>\n<p>Hy vọng với bài viết này bạn đã thấy công việc của những lập trình viên frontend không còn đơn thuần là việc làm sao cho trang web bay, lượn, responsive mượt mà, nếu bạn muốn tiến xa hơn, giới hạn là chân trời.</p>\n<p><strong>Các bài viết đã tham khảo</strong></p>\n<ul>\n<li><a href=\"https://martinfowler.com/articles/micro-frontends.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://martinfowler.com/articles/micro-frontends.html</a></li>\n<li><a href=\"https://microfrontends.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://microfrontends.com/</a></li>\n<li><a href=\"https://micro-frontends.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://micro-frontends.org/</a></li>\n</ul>\n","cover_image":""}},{"node":{"id":"7fe363b7a979cc1f55b43cfea00c9ba5","title":"3 điều bạn có thể không biết về biến trong CSS","path":"/2020-10-07-ban-co-the-lam-gi-voi-bien-css/","date":"2020-10-07","timeToRead":3,"desc":"Bài này chúng ta sẽ đi qua ba thứ chúng ta có thể làm được với biến trong css, có thể bạn chưa biết","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#chuy%E1%BB%87n-g%C3%AC-x%E1%BA%A3y-ra-n%E1%BA%BFu-ch%C3%BAng-ta-d%C3%B9ng-var-v%E1%BB%9Bi-m%E1%BB%99t-bi%E1%BA%BFn-undefined\">Chuyện gì xảy ra nếu chúng ta dùng <code class=\"language-inline-text\">var()</code> với một biến undefined</a></li>\n<li><a href=\"#fallback-value-khi-gi%C3%A1-tr%E1%BB%8B-bi%E1%BA%BFn-kh%C3%B4ng-t%C3%ACm-th%E1%BA%A5y\">Fallback value khi giá trị biến không tìm thấy</a></li>\n<li><a href=\"#devtool-c%E1%BB%A7a-tr%C3%ACnh-duy%E1%BB%87t-gi%C3%BAp-%C4%91%C6%B0%E1%BB%A3c-g%C3%AC\">DevTool của trình duyệt giúp được gì</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"chuyện-gì-xảy-ra-nếu-chúng-ta-dùng-var-với-một-biến-undefined\"><a href=\"#chuy%E1%BB%87n-g%C3%AC-x%E1%BA%A3y-ra-n%E1%BA%BFu-ch%C3%BAng-ta-d%C3%B9ng-var-v%E1%BB%9Bi-m%E1%BB%99t-bi%E1%BA%BFn-undefined\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chuyện gì xảy ra nếu chúng ta dùng <code class=\"language-inline-text\">var()</code> với một biến undefined</h2>\n<p>Trước hết phải nói CSS và HTML là ngôn ngữ không quá strictly, một vài lỗi nhỏ không làm làm chết nguyên trang, nếu dùng <code class=\"language-inline-text\">var()</code> với một biến không tồn tại, không gây ra ảnh hưởng parsing.</p>\n<p>Sẽ có nhiều lý do cho việc xuất biến undefined trong <code class=\"language-inline-text\">var</code>, có thể là</p>\n<ul>\n<li>Gõ nhầm tên biến</li>\n<li>Tưởng là có nhưng chưa define biến này</li>\n<li>Biến đó ko tồn tại trên trang đang xem</li>\n</ul>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">ol li</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">--foo</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">ul li</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Bởi, lời khuyên là luôn đặt biết ở node trên cùng như <code class=\"language-inline-text\">:root</code> hay <code class=\"language-inline-text\">html</code>, như vậy biến có thể truy xuất ở bất cứ đâu trong DOM.</p>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">--main-color</span><span class=\"token punctuation\">:</span> #f06<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.my-lovely-component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--main-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Vậy nếu biến đó <code class=\"language-inline-text\">undefined</code> thì sao? Thứ tự xử lý sẽ là</p>\n<ol>\n<li>Nếu property đó ko <em>inheritable</em> (ví dụ như <code class=\"language-inline-text\">border</code>) nó được đưa về <code class=\"language-inline-text\">initial</code></li>\n<li>Nếu là property kế thừa, như <code class=\"language-inline-text\">color</code>, thì <code class=\"language-inline-text\">inherited</code> giá trị từ thằng cha, nếu không có cái nào hết, thì sẽ dùng <code class=\"language-inline-text\">initial</code></li>\n</ol>\n<p>Giá trị initial của <code class=\"language-inline-text\">border</code> sẽ là <code class=\"language-inline-text\">medium none currentColor</code>, cái này siêng thì kiểm tra trên <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/border#Formal_definition\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a></p>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">--main-color</span><span class=\"token punctuation\">:</span> #f06<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> gold<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.my-lovely-component</span> <span class=\"token punctuation\">{</span>\n    // nó sẽ dùng giá trị `gold` kế thừa từ body\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--secondary-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"fallback-value-khi-giá-trị-biến-không-tìm-thấy\"><a href=\"#fallback-value-khi-gi%C3%A1-tr%E1%BB%8B-bi%E1%BA%BFn-kh%C3%B4ng-t%C3%ACm-th%E1%BA%A5y\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Fallback value khi giá trị biến không tìm thấy</h2>\n<p>Đây cũng ít ai để ý mà dùng, <code class=\"language-inline-text\">var()</code> có thể truyền thêm tham số thứ 2, là giá trị fallback khi không tìm thấy biến</p>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\">// dùng red nếu không thấy --theme-color\n<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--theme-color<span class=\"token punctuation\">,</span> red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Khá clear đúng không, nhưng bạn cũng có thể viết như thế này cho nó <em>rắc rối</em> đồng đội chơi</p>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--foo<span class=\"token punctuation\">,</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--bar<span class=\"token punctuation\">,</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--baz<span class=\"token punctuation\">,</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--are<span class=\"token punctuation\">,</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--you<span class=\"token punctuation\">,</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--crazy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Cú pháp trên hoàn toàn hợp lệ, nhưng không nên làm khó nhau như vậy. Ngoài ra đây cũng là một cách viết hợp lệ </p>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">--my-variable</span><span class=\"token punctuation\">:</span> one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">;</span>\n<span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--foo<span class=\"token punctuation\">,</span> one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Hãy nhớ, làm mọi thứ đơn giản nhất thôi các bạn, đừng nghĩ mình viết như vậy sẽ thông minh hơn người khác.</p>\n<h2 id=\"devtool-của-trình-duyệt-giúp-được-gì\"><a href=\"#devtool-c%E1%BB%A7a-tr%C3%ACnh-duy%E1%BB%87t-gi%C3%BAp-%C4%91%C6%B0%E1%BB%A3c-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DevTool của trình duyệt giúp được gì</h2>\n<p>Rắc rối là như vậy, may mà chúng ta có DevTool cứu giúp</p>\n<p><strong>Tự động điền tên biến</strong></p>\n<p>Khi cần quick change trên trình duyệt, sau khi gõ <code class=\"language-inline-text\">var(</code>, nó tự động gợi ý các biến hợp lệ</p>\n<p><img src=\"https://patrickbrosset.com/assets/firefox-css-var-autocomplete.png\" alt=\"Screenshot of Firefox&#x27;s css var autocomplete\"></p>\n<p>Firefox, Edge, Chrome đều có</p>\n<p><strong>Biết giá trị nào đang được sử dụng</strong></p>\n<p>Bên trong tab <strong>Computed</strong>, giá trị cuối cùng đang sử dụng sau cả tá kế thừa sẽ được hiện ra</p>\n<p><img src=\"https://patrickbrosset.com/assets/edge-computed-css-var.png\" alt=\"Screenshot of the tooltip that appears in Edge when you hover over a var() function\"></p>\n<p>Hy vọng trong tương lai DevTool sẽ có nhiều hỗ trợ hơn như xác định biến <code class=\"language-inline-text\">undefined</code></p>\n<p><a href=\"https://patrickbrosset.com/articles/2020-09-21-3-things-about-css-variables-you-might-not-know/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">3 things about CSS variables you might not know</a></p>\n","cover_image":""}},{"node":{"id":"b0bba90699bb2df794ea25f55c2957db","title":"Composition là cái chi chi","path":"/2020-10-01-composition-la-cai-chi-chi/","date":"2020-10-01","timeToRead":6,"desc":"Nhớ về 5 anh em siêu nhân kết hợp thành một con robot mãnh thú","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#composition-trong-to%C3%A1n-h%E1%BB%8Dc\">Composition trong toán học</a></li>\n<li><a href=\"#function-composition\">Function composition</a></li>\n<li><a href=\"#component-composition\">Component Composition</a></li>\n<li><a href=\"#composition-vs-inheritance\">Composition vs inheritance</a></li>\n</ul>\n<!-- /TOC -->\n<p>Composition một cách trừu tượng mà nói là việc đưa hai (hoặc nhiều) thứ khác nhau vào một chỗ để nhận được một loại kết quả</p>\n<h2 id=\"composition-trong-toán-học\"><a href=\"#composition-trong-to%C3%A1n-h%E1%BB%8Dc\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Composition trong toán học</h2>\n<p>Toán học cũng chưa thật sự liên quan nhiều đến frontend, tuy nhiên toán học là nơi đã phát sinh ra khái niệm này</p>\n<p>Ví dụ có 2 hàm, một hàm là <code class=\"language-inline-text\">y = 2 * x</code>, hàm thứ 2 là <code class=\"language-inline-text\">y = x + 10</code>.</p>\n<p><em>Composition</em> 2 hàm này lại, kết quả của thằng này là input của thằng kia, chúng ta sẽ có hàm mới <code class=\"language-inline-text\">y = (2 * x) + 10</code>. <strong>Đó là tất cả khái niệm cần nắm</strong></p>\n<h2 id=\"function-composition\"><a href=\"#function-composition\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Function composition</h2>\n<p>Trong ngữ cảnh của functional programming, cũng không khác toán học, chỉ là được diễn tả bằng code</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> date <span class=\"token operator\">=</span> <span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> label <span class=\"token operator\">=</span> <span class=\"token function\">createLabel</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">showLabel</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Code này có vài đoạn <em>na ná</em> nhau, chúng ta có nhận lấy một input, convert nó sang một loại khác, rồi lại lấy kết quả đó, convert tiếp.</p>\n<p>Làm sao để lượt bỏ hết sự <em>na ná</em> đó?</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> steps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    getDate<span class=\"token punctuation\">,</span>\n    formatDate<span class=\"token punctuation\">,</span>\n    createLabel<span class=\"token punctuation\">,</span>\n    showLabel\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Một \"vài người\" cho rằng code vậy sạch hơn. Viết một helper function để tin gọn hơn nữa</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">runSteps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">steps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> steps<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> step <span class=\"token operator\">=</span> steps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// làm tiếp các bước được móc nối vào</span>\n    result <span class=\"token operator\">=</span> <span class=\"token function\">step</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nhờ sự trợ giúp của hàm <code class=\"language-inline-text\">runSteps</code> chúng ta có thể viết lại</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">runSteps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    getDate<span class=\"token punctuation\">,</span>\n    formatDate<span class=\"token punctuation\">,</span>\n    createLabel<span class=\"token punctuation\">,</span>\n    showLabel\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Nếu tổng số code bước phải làm là cố định, chúng ta muốn chạy y chang như vậy trên nhiều chỗ khác nhau, chúng ta tiếp tục đưa nó vào một function</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">showDateLabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">runSteps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    getDate<span class=\"token punctuation\">,</span>\n    formatDate<span class=\"token punctuation\">,</span>\n    createLabel<span class=\"token punctuation\">,</span>\n    showLabel\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Giờ gọi ở bất kỳ đâu</span>\n<span class=\"token function\">showDateLabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">showDateLabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Các bạn lập trình lại tiến một bước xa hơn, sao không rút gọn code hơn nữa bằng một hàm gọi là <code class=\"language-inline-text\">pipe</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> showDateLabel <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n  getDate<span class=\"token punctuation\">,</span>\n  formatDate<span class=\"token punctuation\">,</span>\n  createLabel<span class=\"token punctuation\">,</span>\n  showLabel\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Giờ gọi ở bất kỳ đâu</span>\n<span class=\"token function\">showDateLabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">showDateLabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chúng ta <em>dấu diếm</em> phần implement của thể  đó như thế này</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>steps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// chạy hết tất cả các function cho tui</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">runSteps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> steps<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> step <span class=\"token operator\">=</span> steps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      result <span class=\"token operator\">=</span> <span class=\"token function\">step</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Như vậy chúng ta đã đi rất xa, rất rất xa. Từ điểm xuất phát phải gọi lần lượt các hàm một cách thủ công, chúng ta chỉ định các bước cần chạy theo thứ tự một cách <em>sạch sẽ hơn</em></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// code cũ</span>\n<span class=\"token keyword\">let</span> date <span class=\"token operator\">=</span> <span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> label <span class=\"token operator\">=</span> <span class=\"token function\">createLabel</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">showLabel</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// code mới</span>\n<span class=\"token keyword\">let</span> showDateLabel <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n  getDate<span class=\"token punctuation\">,</span>\n  formatDate<span class=\"token punctuation\">,</span>\n  createLabel<span class=\"token punctuation\">,</span>\n  showLabel\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">showDateLabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nếu có thắc mắc trong đầu: ủa vậy để mần chi? Phức tạp rườm rà vãi cả ra! Hãy cân nhắc xem giữa hay cách viết trên, cách nào bạn đọc dễ hơn?</p>\n<p>Khi hiểu được <code class=\"language-inline-text\">pipe</code> và function composition bạn sẽ thấy mọi thứ gọn gàng rành mạch thật tuyệt vời, nhưng không có nghĩa là không có nhược điểm, <em>outsource</em> cho <code class=\"language-inline-text\">pipe</code>, chúng ta không còn thấy được rõ ràng dữ liệu đã đi ra-đi vào như thế nào.</p>\n<h2 id=\"component-composition\"><a href=\"#component-composition\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Component Composition</h2>\n<p>Một ngữ cảnh khác chúng ta cũng thấy sự xuất hiện của \"composition\" là lập trình UI hướng declarative. React component là một ví dụ.</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Screen</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Screen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Form</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Form</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hey there.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Đấy cũng gọi là composition vì chúng ta đứa những component vào trong những component khác, rồi nhận được kết quả là một tổng thể chứa tất cả component</p>\n<p>Một dạng biến thể của composition trong component là <code class=\"language-inline-text\">slot</code> (làm Vue bạn sẽ biết khái niệm này)</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Layout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> sidebar<span class=\"token punctuation\">,</span> content <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sidebar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>sidebar<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sau đấy đưa các giá trị cụ thể vào slot</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">HomePage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Layout</span></span>\n      <span class=\"token attr-name\">sidebar</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HomeSidebar</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">content</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HomeContent</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  )\n}\nfunction AboutPage() </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Layout</span></span>\n      <span class=\"token attr-name\">sidebar</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AboutSidebar</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">content</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AboutContent</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  )\n}</span></code></pre></div>\n<p>React sẽ không đặt hẳn một khái niệm riêng cho slot vì bạn có thể làm điều đó thông qua <code class=\"language-inline-text\">prop</code></p>\n<h2 id=\"composition-vs-inheritance\"><a href=\"#composition-vs-inheritance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Composition vs inheritance</h2>\n<p><em>Người đời</em> thường đem composition để đối chiếu với inheritance, kế thừa gặp nhiều trong class và object hơn, composition gặp nhiều trong function</p>\n<p>Một cách cụ thể, nếu viết code theo kiểu <code class=\"language-inline-text\">class</code>, bạn sẽ có xu hướng dùng lại các behavior từ một class khác bằng cách <code class=\"language-inline-text\">extend</code> nó (kế thừa). Tuy nhiên, làm vậy cũng có hạn chế là rất khó tùy chỉnh các behavior sau này. Ví dụ như tình huống muốn <code class=\"language-inline-text\">extend</code> không chỉ một mà nhiều <code class=\"language-inline-text\">class</code></p>\n<p>Đôi khi, <em>miệng đời</em> cũng đồn đại rằng việc dùng class khiến \"bạn bị khóa cứng\" trong thiết kế ban đầu vì việc thay đổi kiến trúc của các class thì rất chi là tốn công. Với việc dùng composition, thay vì extend, bạn dữ nguyên hiện trạng của một instance, sử dụng trực tiếp từ instance này và cũng có thể làm gì đó kết hợp với nhiều thứ khác, có nhiều đất diễn hơn.</p>\n<p>Nói chung, ngành phần mềm đã bỏ việc model các UI component như một dạng kế thừa nhiều tầng nhiều cấp.</p>\n<p>Không có nói inheritance lúc nào cũng \"tệ\", nó chỉ không đủ \"bén như dao lam\", sử dụng cần phải tiết chế, việc kế thừa đa cấp ở một độ sâu nhất định, đòi hỏi bạn đủ kiên nhẫn để giải quyết các vấn đề của nó.</p>\n<blockquote>\n<p>If you write your code in a style that composes functions in some way before calling them, and there are other humans on your team, make sure that you’re getting concrete benefits from this approach. It is not “cleaner” or “better”, and there is a price to pay for “beautiful” but indirect code.</p>\n</blockquote>\n<p>Tạm kết: Nếu bạn làm việc trong team, hãy đảm bảo mọi người nhất trí với nhau lợi ích mà nó mang lại từ cách làm này. Nó không liên quan gì tới việc \"cleaner-better\", nó luôn có cái giá phải trả cho \"beautiful\" nhưng mà code không trực quan</p>\n<p><a href=\"https://whatthefuck.is/composition\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">composition - <em>Dan’s JavaScript Glossary</em></a></p>\n","cover_image":""}},{"node":{"id":"a65d15045f140beed162457576f63c06","title":"Kiến thức căn bản REST API cho FE developer","path":"/2020-09-26-kien-thuc-rest-api-can-thiet-khi-di-phong-van/","date":"2020-09-26","timeToRead":4,"desc":"2020 REST API vẫn đang là chuẩn mực giao tiếp của API trên nền web (chiếm 69% so với các API khác), như vậy đã đủ thuyết phục các bạn nắm thật rõ kiến thức REST API chưa?","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#ph%C3%A2n-bi%E1%BB%87t-gi%E1%BB%AFa-api-v%C3%A0-web-service\">Phân biệt giữa API và Web Service</a></li>\n<li><a href=\"#ph%C3%A2n-bi%E1%BB%87t-gi%E1%BB%AFa-rest-v%C3%A0-restful\">Phân biệt giữa REST và RESTFUL</a></li>\n<li><a href=\"#nh%E1%BB%AFng-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-http-%C4%91%C6%B0%E1%BB%A3c-h%E1%BB%95-tr%E1%BB%A3-trong-rest\">Những phương thức HTTP được hổ trợ trong REST</a></li>\n<li><a href=\"#s%E1%BB%B1-kh%C3%A1c-nhau-gi%E1%BB%AFa-ajax-v%C3%A0-rest\">Sự khác nhau giữa AJAX và REST</a></li>\n<li><a href=\"#%C4%91i%E1%BB%83m-m%E1%BA%A5u-ch%E1%BB%91t-c%E1%BA%A7n-nh%E1%BB%9B-trong-rest\">Điểm mấu chốt cần nhớ trong REST</a></li>\n<li><a href=\"#%C4%91i%E1%BB%83m-kh%C3%A1c-nhau-gi%E1%BB%AFa-put-v%C3%A0-post\">Điểm khác nhau giữa <code class=\"language-inline-text\">PUT</code> và <code class=\"language-inline-text\">POST</code></a></li>\n<li><a href=\"#m%E1%BB%A5c-ti%C3%AAu-c%E1%BB%A7a-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-options-trong-restful-web-service\">Mục tiêu của phương thức OPTIONS trong RESTful web service</a></li>\n<li><a href=\"#limit-c%E1%BB%A7a-payload-trong-ph%C6%B0%E1%BB%9Bc-th%E1%BB%A9c-post\">Limit của payload trong phước thức POST</a></li>\n</ul>\n<!-- /TOC -->\n<p>Để cho dễ hiểu chúng ta đi qua một số thuật ngữ trước</p>\n<ul>\n<li><strong>Resource</strong> (tài nguyên) có thể hình dung nôm na nó là một <em>cái gì đó đó</em> ở phía server nắm dữ, có thể là một dữ liệu trong database, một file html, css, js, svg,...</li>\n<li><strong>Web Service</strong>: nhiều cách định nghĩa, có thể hiểu <em>bình dân</em>, nếu internet là một cái chợ, dữ liệu là những gì có thể buôn bán trao đổi, thì web service là những gì có thể đem ra chợ trao đổi buôn bán</li>\n<li><strong>URI</strong>: viết tắt của <em>Uniform Resource Identifier</em>, một một resource trong kiến trúc REST sẽ xác định bằng một và chỉ một URI. Theo định dạng như sau</li>\n</ul>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>protocol<span class=\"token operator\">></span>://<span class=\"token operator\">&lt;</span>service-name<span class=\"token operator\">></span>/<span class=\"token operator\">&lt;</span>ResourceType<span class=\"token operator\">></span>/<span class=\"token operator\">&lt;</span>ResourceID<span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"phân-biệt-giữa-api-và-web-service\"><a href=\"#ph%C3%A2n-bi%E1%BB%87t-gi%E1%BB%AFa-api-v%C3%A0-web-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phân biệt giữa API và Web Service</h2>\n<ul>\n<li>Tất cả web service đều là API, nhưng không phải tất cả API đều là web service</li>\n<li>Web service sử dụng 3 kiểu sau: SOAP, REST, XML-RPC, trong khi API có nhiều cách hơn</li>\n</ul>\n<h2 id=\"phân-biệt-giữa-rest-và-restful\"><a href=\"#ph%C3%A2n-bi%E1%BB%87t-gi%E1%BB%AFa-rest-v%C3%A0-restful\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phân biệt giữa REST và RESTFUL</h2>\n<p>REST ám chỉ <strong>kiểu kiến trúc</strong> để xây dựng các ứng dụng có thể truy cập thông qua mạng của ông chú viettel, vnpt, fpt,...</p>\n<p>REST chỉ là <em>một trong nhiều kiểu kiến trúc</em> trên nền web, ngoài ra còn có <a href=\"https://en.wikipedia.org/wiki/SOAP\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SOAP</a>, và một số kiểu khác.</p>\n<p><em>RESTful</em> ám chỉ một <strong>web service</strong> hiện thực cái kiến trúc REST</p>\n<h2 id=\"những-phương-thức-http-được-hổ-trợ-trong-rest\"><a href=\"#nh%E1%BB%AFng-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-http-%C4%91%C6%B0%E1%BB%A3c-h%E1%BB%95-tr%E1%BB%A3-trong-rest\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Những phương thức HTTP được hổ trợ trong REST</h2>\n<ul>\n<li><code class=\"language-inline-text\">GET</code>: dùng để yêu cầu một resource qua URL. Không nên chứa <code class=\"language-inline-text\">body</code>, có thể được cache phía client hoặc server</li>\n<li><code class=\"language-inline-text\">POST</code>: gửi thông tin lên một <em>service</em> nào đấy để xử lý, thường trả về một resource mới hoặc resource đã bị thay đổi</li>\n<li><code class=\"language-inline-text\">PUT</code>: cập nhập resource tại một URL</li>\n<li><code class=\"language-inline-text\">DELETE</code>: xóa resource tại một URL</li>\n<li><code class=\"language-inline-text\">OPTIONS</code>: Xác định hổ trợ cái gì</li>\n<li><code class=\"language-inline-text\">HEAD</code>: trả về các thông tin meta</li>\n</ul>\n<h2 id=\"sự-khác-nhau-giữa-ajax-và-rest\"><a href=\"#s%E1%BB%B1-kh%C3%A1c-nhau-gi%E1%BB%AFa-ajax-v%C3%A0-rest\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sự khác nhau giữa AJAX và REST</h2>\n<table>\n<thead>\n<tr>\n<th>AJAX</th>\n<th>REST</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Gửi một object <code class=\"language-inline-text\">XMLHttpRequest</code> lên server. JS sẽ nhận lấy kết quả trả về và làm gì đó thật <em>vi diệu</em> trên trang hiện tại</td>\n<td>Bao gồm nhiều thứ hơn: cấu trúc URL, pattern cho request/response xung quanh việc truy xuất đến các resource</td>\n</tr>\n<tr>\n<td>Ám chỉ một công nghệ để cập nhập UI mà không cần reload thần thánh</td>\n<td>Kiến trúc phần mềm và phương pháp để user có thể có được dữ liệu từ phía server</td>\n</tr>\n<tr>\n<td>Loại bỏ tương tác giữa người sử dụng và server</td>\n<td>Yêu cầu tương tác giữa người sử dụng và server</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"điểm-mấu-chốt-cần-nhớ-trong-rest\"><a href=\"#%C4%91i%E1%BB%83m-m%E1%BA%A5u-ch%E1%BB%91t-c%E1%BA%A7n-nh%E1%BB%9B-trong-rest\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Điểm mấu chốt cần nhớ trong REST</h2>\n<p><strong>Stateless</strong>: nghĩa là server không quản lý state và session data</p>\n<h2 id=\"điểm-khác-nhau-giữa-put-và-post\"><a href=\"#%C4%91i%E1%BB%83m-kh%C3%A1c-nhau-gi%E1%BB%AFa-put-v%C3%A0-post\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Điểm khác nhau giữa <code class=\"language-inline-text\">PUT</code> và <code class=\"language-inline-text\">POST</code></h2>\n<ul>\n<li><code class=\"language-inline-text\">PUT</code> dùng để <strong>xử lý</strong> một resource tại một URI cụ thể <strong>đã tồn tại trước đó</strong>, nếu chưa có tạo mới, đã có thì ghi đè. Ko phụ thuộc số lần gửi, số lượng resource sẽ không đổi sau khi gọi <code class=\"language-inline-text\">PUT</code></li>\n<li><code class=\"language-inline-text\">POST</code> <strong>gửi dữ liệu</strong> đến một URI, resource tại URI đó sẽ xử lý dữ liệu được gởi. Việc gửi lên càng nhiều, đồng nghĩa với việc số lượng resource phía server cũng tăng theo</li>\n</ul>\n<h2 id=\"mục-tiêu-của-phương-thức-options-trong-restful-web-service\"><a href=\"#m%E1%BB%A5c-ti%C3%AAu-c%E1%BB%A7a-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-options-trong-restful-web-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mục tiêu của phương thức OPTIONS trong RESTful web service</h2>\n<p>Phương thức này dùng để liệt kê tất cả các thao tác mà web service hổ trợ. Tạo một request readonly đến server</p>\n<h2 id=\"limit-của-payload-trong-phước-thức-post\"><a href=\"#limit-c%E1%BB%A7a-payload-trong-ph%C6%B0%E1%BB%9Bc-th%E1%BB%A9c-post\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Limit của payload trong phước thức POST</h2>\n<p>Nếu <GET> gửi dữ liệu thông qua URL, nó ko được vượt quá chiều dài tối đa cho phép của URL. <POST> lại không có limit, có thể gửi lên bao nhiều tùy thích, trong thực tế sử dụng thì không nên gửi payload quá lớn, vì sẽ tốn rất nhiều thời gian xử lý.</p>\n","cover_image":""}},{"node":{"id":"8252c4f039ec3be236389aeab96597e4","title":"Sự khác nhau giữa npm và npx?","path":"/2020-09-01-phan-biet-giua-npm-va-npx/","date":"2020-09-01","timeToRead":2,"desc":"Bài viết này sẽ giải thích ngắn gọn nhất có thể sự khác nhau về mục đích của 2 thằng này","content":"<p>Phân biệt giữa lệnh <code class=\"language-inline-text\">npm</code> và <code class=\"language-inline-text\">npx</code> các bạn có thể tìm thấy trên mạng khá nhiều, chủ yếu là dịch từ <a href=\"https://www.freecodecamp.org/news/npm-vs-npx-whats-the-difference/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">freeCodeCamp</a>, mình đọc thấy cũng khá dài dòng nhưng có nhiều chổ không ưng, hy vọng thông qua ngôn ngữ của một lập trình viên là mình các bạn có thể dễ đọc, dễ hiểu, tóm gọn hơn là các bạn marketing dịch.</p>\n<p>Nói một cách ngắn gọn nhất, để bạn dễ nhớ thì hãy nhớ đến tên đầy đủ của từng thằng để hình dung công dụng của nó</p>\n<blockquote>\n<p>npm viết tắt cho Node Package Manager</p>\n<p>npx viết tắt cho Node Package eXecute</p>\n</blockquote>\n<p>Một thằng dùng để <strong>quản lý</strong> package, thằng còn lại để <strong>thực thi</strong> package.</p>\n<p>Dài dòng hơn một chút</p>\n<p><strong>NPM</strong> là bộ <strong>quản lý</strong> package (như bộ giao thông vận tải, bộ giáo dục đào tạo)  chính thức của Node.js, khi bạn cài Node.js là bạn được <em>tặng kèm không thu giá</em> một bộ command-line (câu lệnh để bạn gõ cọc cọc trong terminal) cũng tên là <code class=\"language-inline-text\">npm</code></p>\n<p><strong>NPX</strong>, được trình làng từ Node.js 5.2.0 (<em>nghĩa là hiện tại bạn sẽ luôn có npx song song với npm, vì cái thời 5.2.0 là nó là thời mình còn cởi truồng tắm mưa rồi</em>) được dùng để <strong>thực thi</strong> bất kỳ package nào có trên trang <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.npmjs.com/</a> mà <strong>không cần cài đặt</strong> nó trước đó, bạn chỉ chạy nó thôi (tức nhiên nếu nó chạy được)</p>\n<p>Ví dụ cho dễ hiểu nhé, trên tài liệu của <a href=\"https://create-react-app.dev/docs/getting-started/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">create-react-app</a> người ta sẽ hướng dẫn bạn chạy lệnh</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx create-react-app my-app</code></pre></div>\n<p>Bạn không cần cài <code class=\"language-inline-text\">create-react-app</code> (bản thân nó là một package Node.js), mà chỉ thực thi nó để init source code</p>\n<p>Nếu thích các bài dài dòng hơn nữa, bạn có thể ghé qua</p>\n<p><a href=\"https://www.geeksforgeeks.org/what-are-the-differences-between-npm-and-npx/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.geeksforgeeks.org/what-are-the-differences-between-npm-and-npx/</a></p>\n<p><a href=\"https://www.geeksforgeeks.org/what-are-the-differences-between-npm-and-npx/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.geeksforgeeks.org/what-are-the-differences-between-npm-and-npx/</a></p>\n","cover_image":""}},{"node":{"id":"0cd0167af93dd257a1535f985aabe93a","title":"DRY không hiệu quả, hãy dùng WET","path":"/2020-08-24-dry-khong-duoc-vay-thi-wet/","date":"2020-08-24","timeToRead":3,"desc":"Khi bạn học lập trình bạn sẽ được nghe tới khái niệm DRY (Don't Repeat Yourself), bạn rất có thể đã vận dụng sai ý nghĩa của nó.","content":"<p>Trên wiki: DRY là nguyên tắc bạn đừng viết lặp lại một đoạn code</p>\n<p>Bạn: Ok, những phần code bị trùng mình sẽ chuyển thành abstraction</p>\n<p>Giải pháp trông có vẻ hiển nhiên đúng, nhưng không, abstraction của bạn thường là sai.</p>\n<p>Đây là lý do tại sao:</p>\n<ol>\n<li>Bạn thấy code bị duplicate</li>\n<li>Bạn đưa đoạn duplicate ra thành một abstract (method, class)</li>\n<li>Bạn thay thể toàn bộ phần duplicate bằng abstraction mới</li>\n<li>Bạn nghĩ code đã hoàn hảo</li>\n<li>Thời gian trôi đi</li>\n<li>PM đưa thêm các yêu cầu mới.</li>\n<li>Bạn bắt đầu hiện thực các yêu cầu mới</li>\n<li>Với yêu cầu mới này, bạn phải chỉnh sửa vài đoạn trong abstraction, <code class=\"language-inline-text\">if...else</code> các kiểu, đổi parameter, abstraction của chúng ta có thể đưa ra những action khác nhau theo những điều kiện khác nhau</li>\n<li>Giờ abstraction của trọng sẽ cho ra những kết quả khác nhau trên những case khác nhau</li>\n<li>Yêu cầu mới lại đến, thêm parameter tiếp, thêm câu điều kiện tiếp</li>\n<li>Và giờ đây đoạn code của bạn không còn dễ maintain, nói thẳng ra là một đống hầm bà lằng khó nuốt</li>\n<li>Chúc mừng, bạn đã bị over engineer và gây ra một abstract quá đỗi phức tạp</li>\n</ol>\n<p>Vậy thì sao? Hãy thử WET (Write everything twice)</p>\n<h2 id=\"wet\"><a href=\"#wet\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>WET</h2>\n<p>Như cách chơi chữ đã thể hiện, nó là trường phái đối nghịch hoàn toàn với DRY, khi bắt đầu viết code, bạn sẽ không thể nào lường trước được mọi yêu cầu, mọi tính năng. Vì thế đừng vội vàng áp dụng abstraction</p>\n<p>Bạn hãy nhớ</p>\n<blockquote>\n<p>Cái giá phải trả cho duplicate vẫn rẻ hơn nhiều cho một abstract viết sai</p>\n</blockquote>\n<p>Ví dụ bạn viết một ứng dụng, bạn dựng ra một component tên <code class=\"language-inline-text\">Button</code> để sử dụng nhiều nơi, nghe rất hợp lý. Một yêu cầu mới xuất hiện, ở trang landing page họ muốn có một nút bấm rất <em>fancy</em> và không giống với tất cả những nút bấm trước đây.</p>\n<p>Ok, thay đổi cũng nhỏ thôi, chỉ cần thêm tí điều kiện <code class=\"language-inline-text\">if...else</code>, 90% phần code là của <code class=\"language-inline-text\">Button</code> và 10% code là của <code class=\"language-inline-text\">FancyButton</code></p>\n<p>Sự thật đáng buồn là sẽ có rất nhiều những thay đổi như thế xuất hiện và khả năng rất cao là bạn không đủ kinh nghiệm để có hiện thực những abstraction đủ dễ hiểu, dễ maintain.</p>\n<p>Lời khuyên? <strong>Copy copy code đó ra, đừng ngần ngại</strong></p>\n<p>Bạn thấy quan điểm của mình <em>bậy quá bậy!</em>, bạn có thể tham khảo thêm quan điểm của Dan Abramov</p>\n<p><a href=\"https://overreacted.io/the-wet-codebase/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The WET Codebase</a></p>\n<blockquote>\n<p>In this talk, my aim was to show why strict adherence to writing code that is free of duplication inevitably leads to software we can’t understand</p>\n</blockquote>\n<p>Tạm dịch, tuân thủ nghiêm ngặc quy tắc DRY sẽ dẫn đến một phần mềm mà chúng ta không hiểu nổi nó.</p>\n<p><a href=\"https://www.deconstructconf.com/2019/dan-abramov-the-wet-codebase\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Watch: The Wet Codebase</a></p>\n<p><a href=\"https://dev.to/bulljsdev/when-dry-doesn-t-work-go-wet-4536\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">When DRY Doesn't Work, Go WET - Tác giả Nick Bull JS</a></p>\n","cover_image":""}},{"node":{"id":"522135835c03f266bc70b07a7a7f409c","title":"Các thuật toán sắp xếp phổ biến và JavaScript","path":"/2020-08-19-tim-hieu-cac-thuat-toan-sap-xep-va-hien-thuc-bang-javascript/","date":"2020-08-19","timeToRead":5,"desc":"Chúng ta sẽ điểm qua các thuật toán sắp xếp phổ biến được học trong trường và hiện thực nó bằng JavaScript","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#bubble-sort\">Bubble Sort</a></li>\n<li><a href=\"#selection-sort\">Selection Sort</a></li>\n<li><a href=\"#insertion-sort\">Insertion Sort</a></li>\n<li><a href=\"#merge-sort\">Merge Sort</a></li>\n<li><a href=\"#quick-sort\">Quick sort</a></li>\n<li><a href=\"#bucket-sort\">Bucket Sort</a></li>\n</ul>\n<!-- /TOC -->\n<p>Chúng ta sẽ hiện thực các thuật toán này bằng JavaScript.</p>\n<p>Hàm helper để swap giá trị</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Hàm để so sánh giá trị</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Compare <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">LESS_THAN</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">BIGGER_THAN</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">defaultCompare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">===</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">&lt;</span> b <span class=\"token operator\">?</span> Compare<span class=\"token punctuation\">.</span><span class=\"token constant\">LESS_THAN</span> <span class=\"token operator\">:</span> Compare<span class=\"token punctuation\">.</span><span class=\"token constant\">BIGGER_THAN</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"bubble-sort\"><a href=\"#bubble-sort\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bubble Sort</h2>\n<ul>\n<li>Tình huống tốt nhất: độ phức tạp = <code class=\"language-inline-text\">O(N)</code> (đi qua đúng n phần tử)</li>\n<li>Tình huống xấu nhất: độ phức tạp = <code class=\"language-inline-text\">O(N^2)</code> (đi qua n mũ 2 phần tử)</li>\n</ul>\n<p>Cái này rất ít xài trong thực tế, chỉ để dạy và học, vì nó chậm nhất so với các thuật toán khác.</p>\n<p>Ý tưởng là sẽ so sánh 2 phần tử liền kề, hoán đổi vị trí cho phù hợp</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--C0CI1OCj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ubhywp9xh8zk6on4caql.gif\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> compare <span class=\"token operator\">=</span> defaultCompare</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> length <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// refer to note below</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> Compare<span class=\"token punctuation\">.</span><span class=\"token constant\">BIGGER_THAN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Để hình dung thuật toán này, bạn có thể nghiên cứu cái hình mô tả bên dưới</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--AIAlZIhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/euz62qdpc74m9w4gcg09.png\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<h2 id=\"selection-sort\"><a href=\"#selection-sort\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Selection Sort</h2>\n<p>Không phân biệt tính huống tốt hay xấu gì cả, nó luôn có độ phức tạp = <code class=\"language-inline-text\">O(N^2)</code></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--musoV4Rk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vweh1mcmiap8q3onqxz8.gif\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<p>Ý tưởng của thuật toán là tìm ra giá trị nhỏ nhất trong đám, rồi đưa nó về vị trí đầu tiên, lặp lại cho các phần tử kế tiếp.</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--wJDCsONw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mbzjewb2l897eiidkr14.gif\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">selectionSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> compare <span class=\"token operator\">=</span> defaultCompare</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> length <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> minIndex<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    minIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> Compare<span class=\"token punctuation\">.</span><span class=\"token constant\">BIGGER_THAN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        minIndex <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!==</span> minIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> minIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--992IFucj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/43gibzc1hne0ie73cmp1.png\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<h2 id=\"insertion-sort\"><a href=\"#insertion-sort\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Insertion Sort</h2>\n<ul>\n<li>Tình huống tốt nhất: độ phức tạp = <code class=\"language-inline-text\">O(N)</code></li>\n<li>Tình huống xấu nhất: độ phức tạp = <code class=\"language-inline-text\">O(N^2)</code></li>\n</ul>\n<p>Thuật toán này nó sẽ tạo ra mảng mới, tìm và chèn từng phần tử một vào đúng thứ tự. Sẽ như sau</p>\n<ol>\n<li>Cứ coi như phần tử đầu tiên là đúng vị trí</li>\n<li>Lấy phần tử đầu tiên này so sánh với phần tử tiếp theo, nó có 2 tình huống một là ở yên vị trí đang ở, hay là chúng ta chèn phần tử thứ 2 vào trước phần tử đầu.</li>\n<li>Lặp lại tương tự</li>\n</ol>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s---bIcRugF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/osft7ojymgp8jroekxxu.gif\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">insertionSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> compare <span class=\"token operator\">=</span> defaultCompare</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> length <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> temp<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> Compare<span class=\"token punctuation\">.</span><span class=\"token constant\">BIGGER_THAN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--98gGOQtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kdcqz1o3weeqjxwcdfpq.png\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<h2 id=\"merge-sort\"><a href=\"#merge-sort\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Merge Sort</h2>\n<p>Độ phức tạp cố định: <code class=\"language-inline-text\">O(N Log N)</code></p>\n<p>Là thuật toán chia để trị, chi nhỏ các phần tử ban đầu ra thành các nhóm nhỏ hơn để dể xử lý từng cụm</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--A-kq2byS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xokw1fxci67ttscu23vy.gif\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> compare <span class=\"token operator\">=</span> defaultCompare</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> length <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> middle <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> middle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>middle<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    arr <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> compare</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> left<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> Compare<span class=\"token punctuation\">.</span><span class=\"token constant\">LESS_THAN</span> <span class=\"token operator\">?</span> left<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> right<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> left<span class=\"token punctuation\">.</span>length <span class=\"token operator\">?</span> left<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> right<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iTGTEOAp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bowug91fuof69su39fwd.png\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<h2 id=\"quick-sort\"><a href=\"#quick-sort\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Quick sort</h2>\n<ul>\n<li>Tình huống tốt nhất: độ phức tạp = <code class=\"language-inline-text\">O(N Log N)</code></li>\n<li>Tình huống xấu nhất: độ phức tạp = <code class=\"language-inline-text\">O(N^2)</code></li>\n</ul>\n<p>Đây là thuật toán được sử dụng nhiều nhất, vẫn là phương pháp chia để trị</p>\n<p>Có thể xem lại bài <a href=\"https://luubinhan.github.io/blog/2019-11-02-gioi-thieu-thuat-toan-quicksort\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">giới thiệu về Quick Sort của mình</a></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--5nmg3LKx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vo2ltivrpucxtoamvdeb.gif\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> compare <span class=\"token operator\">=</span> defaultCompare</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">quick</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">quick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> compare</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    i <span class=\"token operator\">=</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">quick</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">quick</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> compare</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> pivot <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pivot<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> Compare<span class=\"token punctuation\">.</span><span class=\"token constant\">LESS_THAN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pivot<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> Compare<span class=\"token punctuation\">.</span><span class=\"token constant\">BIGGER_THAN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"bucket-sort\"><a href=\"#bucket-sort\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bucket Sort</h2>\n<ul>\n<li>Tình huống tốt nhất: độ phức tạp = <code class=\"language-inline-text\">O(N + k)</code></li>\n<li>Tình huống xấu nhất: độ phức tạp = <code class=\"language-inline-text\">O(N^2)</code></li>\n</ul>\n<p>Ý tưởng là sẽ chia đôi thành 2 mảng, rồi trên từng mảng đó, áp dụng một thuật toán sắp xếp trên đó, như insertion sort</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--c3E8lx6w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vdv48hfw2oomr5r3myc0.gif\" alt=\"Các thuật toán sắp xếp phổ biến và JavaScript\"></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">bucketSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> bucketSize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// create buckets and distribute the elements</span>\n  <span class=\"token keyword\">const</span> buckets <span class=\"token operator\">=</span> <span class=\"token function\">createBuckets</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> bucketSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// sort the buckets using insertion sort and add all bucket elements to sorted result</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">sortBuckets</span><span class=\"token punctuation\">(</span>buckets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createBuckets</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> bucketSize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// determine the bucket count</span>\n  <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      min <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> bucketCount <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>max <span class=\"token operator\">-</span> min<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> bucketSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// initialize each bucket (a multidimensional array)</span>\n  <span class=\"token keyword\">const</span> buckets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bucketCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// distribute elements into buckets</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> bucketIndex <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> min<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> bucketSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    buckets<span class=\"token punctuation\">[</span>bucketIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> buckets<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sortBuckets</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">buckets</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> sortedArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> buckets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">insertionSort</span><span class=\"token punctuation\">(</span>buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// quick sort is another good option</span>\n      sortedArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> sortedArr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Lưu ý bucket sort chạy tốt nhất khi có thể chia đều các phần tử cho các bucket, việc chia thành 2 bucket cũng không bắt buộc, có thể chia nhiều hơn nếu số lượng phần tử nhiều</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--OCRlBcCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m10o9xkwmpyllvarra5g.png\"></p>\n<p><a href=\"https://dev.to/christinamcmahon/common-sorting-algorithms-in-javascript-58a7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Common Sorting Algorithms in JavaScript</a></p>\n<p><a href=\"https://www.bigocheatsheet.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Know Thy Complexities!</a></p>\n","cover_image":""}},{"node":{"id":"639425de1b7947874ed74f9c9776b61d","title":"Giới thiệu functional programming trong JavaScript","path":"/2020-08-16-tim-hieu-functional-programming/","date":"2020-08-16","timeToRead":5,"desc":"Functional programming là một topic rất chi quen thuộc trong cộng đồng JS, các bạn có biết tại sao mọi người lại hype với nó? Tại sao mọi người lại quay lưng với Object oriented","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#functional-programming-l%C3%A0-g%C3%AC--d%C3%A2n-t%C3%ACnh-hay-vi%E1%BA%BFt-t%E1%BA%AFt-l%C3%A0-fp\">Functional Programming là gì ? (dân tình hay viết tắt là FP)</a></li>\n<li><a href=\"#t%E1%BA%A1i-sao-l%E1%BA%A1i-s%E1%BB%AD-d%E1%BB%A5ng-fp\">Tại sao lại sử dụng FP?</a></li>\n<li><a href=\"#t%E1%BA%A1i-sao-l%E1%BA%A1i-s%E1%BB%AD-d%E1%BB%A5ng-fp-v%E1%BB%9Bi-javascript\">Tại sao lại sử dụng FP với JavaScript?</a></li>\n<li><a href=\"#vi%E1%BA%BFt-fp-nh%C6%B0-th%E1%BA%BF-n%C3%A0o\">Viết FP như thế nào?</a></li>\n<li><a href=\"#t%C3%A0i-li%E1%BB%87u-tham-kh%E1%BA%A3o\">Tài liệu tham khảo</a></li>\n</ul>\n<!-- /TOC -->\n<p>Functional Programming ? Là cái gì? Tại sao dùng? Dùng như thế nào?</p>\n<p>Các bạn có từng <em>hoảng loạn</em> như mình khi phải nghe hàng loạt thuật ngữ sau không</p>\n<blockquote>\n<p>stateless, compose, pure, side effect, ramda, lazy, immuable, curry, functor, monad, monoid, higher-order, referential transparency</p>\n</blockquote>\n<h2 id=\"functional-programming-là-gì--dân-tình-hay-viết-tắt-là-fp\"><a href=\"#functional-programming-l%C3%A0-g%C3%AC--d%C3%A2n-t%C3%ACnh-hay-vi%E1%BA%BFt-t%E1%BA%AFt-l%C3%A0-fp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Functional Programming là gì ? (dân tình hay viết tắt là FP)</h2>\n<p>Functional Programming nó là một thuật ngữ mà hiểu theo kiểu bình dân là một <strong>style</strong>-phong cách-kiểu viết code.</p>\n<p>Khi nói đến <strong>style</strong> thì bắt buộc phải có một số đặc thù nhất định để phân biệt với các <strong>style</strong> khác. Chút nữa sẽ nói cụ thể.</p>\n<p>Không chỉ có JS mà một số ngôn ngữ lập trình khác cũng hỗ trợ <em>style</em> này</p>\n<ul>\n<li>F#</li>\n<li>Haskell</li>\n<li>Erlang</li>\n<li>JS ( tất nhiên )</li>\n<li>Elm</li>\n<li>Scala</li>\n<li>Ocaml</li>\n<li>Clojure</li>\n</ul>\n<p>Ngoài trước FP, nếu các bạn học cùng thời với mình thì sẽ được dạy Object Oriented <em>Programming</em></p>\n<p>Một thuật ngữ các bạn cũng sẽ hay gặp là <strong>programming paradigm</strong>, có thể hiểu <em>bình dân</em> là <strong>cách chúng ta nhìn nhận mọi thứ vận hành</strong>, cách mà chương trình sẽ kết nối và hoạt động với nhau (<strong>mindset</strong> nếu muốn dùng thuật ngữ hoa mỹ)</p>\n<p>Một số <em>programming paradigm</em>  liên quan</p>\n<table>\n<thead>\n<tr>\n<th>Nhóm 1</th>\n<th>Nhóm 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Imperative</strong>: tập các lệnh được đưa ra theo thứ tự cố định</td>\n<td><strong>Declarative</strong>: tui muốn cái này, bạn làm sao đưa ra kết quả như mong muốn</td>\n</tr>\n<tr>\n<td><strong>Object-Oriented</strong>: imperative cool, nhưng nếu có nhiều state và phải quản lý toàn bộ nó, hãy chia nó ra thành từng <strong>object</strong> làm nhiệm vụ quản lý <code class=\"language-inline-text\">state</code> này và chương trình là sự kết hợp các object <strong>truyền/nhận</strong> thông tin</td>\n<td><strong>Functional</strong>: một dạng sub-paradigm (con cùng cha chú) với declarative</td>\n</tr>\n</tbody>\n</table>\n<p>Ý tưởng FP không qua cao siêu, chỉ gói gọn trong một câu</p>\n<blockquote>\n<p>Pure Function: chỉ phụ thuộc vào input truyền vào, chỉ trả về output không làm gì khác cả</p>\n</blockquote>\n<p>Ví dụ, một function như thế này không được xem là Pure Function</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Andy\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello, Andy!</span>\n\nname <span class=\"token operator\">=</span> <span class=\"token string\">\"luckyluu\"</span>\n<span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello, luckyluu!</span></code></pre></div>\n<p>Nó vi phạm 2 nguyên tắc, một là phụ thuộc vào một biến bên ngoài, 2 là nó không trả về mà làm thay đổi một <strong>thứ</strong> bên ngoài (ở đây là log ra một giá trị).</p>\n<h2 id=\"tại-sao-lại-sử-dụng-fp\"><a href=\"#t%E1%BA%A1i-sao-l%E1%BA%A1i-s%E1%BB%AD-d%E1%BB%A5ng-fp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao lại sử dụng FP?</h2>\n<p><strong>Predictable/Safer</strong></p>\n<p>Chúng ta có thể hoàn toàn tin tưởng vào pure function, nó chỉ làm đúng việc cần làm và không ảnh hưởng đến hàng xóm. Chắc chắn là ít có những có bug mà ai cũng không ngờ tới</p>\n<p><strong>Dễ test/debug</strong></p>\n<p>Những gì bạn cần test trên một Pure Function là đưa vào input và kiểm tra output. Ví dụ mà bạn nhận được một output sai, kiểm tra input đã đúng hết thì bạn sẽ biết ngay vấn đề nằm ở trong function đó, hãy nhớ Pure Function chỉ phụ thuộc vào input, không có side effect thì làm gì đổ lỗi được.</p>\n<blockquote>\n<p>Ngoài ra theo quan điểm cá nhân thì việc sử dụng FP cũng giúp chúng ta copy-paste code giữa nhiều dự án dễ dàng hơn</p>\n</blockquote>\n<p>Còn nếu bạn đang sử dụng FP vì những lý do sau, thì mình khuyên bạn không nên tin vào điều này</p>\n<ul>\n<li>Những người sử dụng FP trông cool/ngầu hơn những người tiền bối sử dụng Object Oriented</li>\n<li>Đây là paradigm xịn sò nhất ở thì hiện tại</li>\n</ul>\n<p><strong>Nói chung FP cũng chỉ là một trong những paradigm trong lập trình, sẽ có điểm mạnh và điểm yếu riêng.</strong></p>\n<h2 id=\"tại-sao-lại-sử-dụng-fp-với-javascript\"><a href=\"#t%E1%BA%A1i-sao-l%E1%BA%A1i-s%E1%BB%AD-d%E1%BB%A5ng-fp-v%E1%BB%9Bi-javascript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao lại sử dụng FP với JavaScript?</h2>\n<p>Khi bắt đầu học và sử dụng JS để viết object-oriented chúng ta đều nhận ra một điều rằng: JS không phải sinh ra để viết object-oriented.</p>\n<p>Bạn sẽ thấy nhan nhản các câu hỏi tricky trong JavaScript về <code class=\"language-inline-text\">prototype</code> , <code class=\"language-inline-text\">this</code> trong các buổi phỏng vấn, qua chi là khó để làm việc và hiểu được thực những thứ như vậy trong javascript, chúng ta sẽ kỳ vọng nó làm việc như thế này, nhưng JS lại không làm như chúng nghĩ.</p>\n<blockquote>\n<p> Đã bao nhiêu lần bạn bị dính bug liên quan tới <code class=\"language-inline-text\">this</code></p>\n</blockquote>\n<p>Dù cho bạn là chuyên gia lập trình cấp cao, chắc cũng bao lần mệt mỏi với <code class=\"language-inline-text\">this</code></p>\n<p>Và nếu bạn sử dụng FP mọi thứ nhức đầu đó sẽ không còn là vấn đề quan tâm.</p>\n<p>Ngoài ra có khá nhiều thư viện/công cụ trong cộng đồng javascript xây <em>sẵn</em> để chúng ta xào món FP này nhanh nhất có thể</p>\n<h2 id=\"viết-fp-như-thế-nào\"><a href=\"#vi%E1%BA%BFt-fp-nh%C6%B0-th%E1%BA%BF-n%C3%A0o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Viết FP như thế nào?</h2>\n<p>Mình đã có 2 bài viết cho chủ đề này, các bạn có thể đọc lại</p>\n<p><a href=\"https://luubinhan.github.io/blog/2019-07-26-nguyen-ly-chung-cua-lap-trinh-huong-function\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nguyên lý nền tảng của lập trình function</a></p>\n<p><a href=\"https://luubinhan.github.io/blog/2020-05-17-functional-programing-nen-va-khong-nen/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Functional programing nên và không nên</a></p>\n<p>Một số thư viện để bạn viết FP một cách gọn gàn, sạch sẽ, thơm tho</p>\n<ul>\n<li>Mori: <a href=\"https://github.com/swannodette/mori\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/swannodette/mori</a></li>\n<li>Immutable.js: <a href=\"https://github.com/immutable-js/immutable-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/immutable-js/immutable-js</a></li>\n<li>Ramda: <a href=\"https://github.com/ramda/ramda\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/ramda/ramda</a></li>\n<li>Underscore: <a href=\"https://github.com/jashkenas/underscore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/jashkenas/underscore</a></li>\n<li>Lodash: <a href=\"https://github.com/lodash/lodash\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/lodash/lodash</a></li>\n<li>Nhiều lắm</li>\n</ul>\n<h2 id=\"tài-liệu-tham-khảo\"><a href=\"#t%C3%A0i-li%E1%BB%87u-tham-kh%E1%BA%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tài liệu tham khảo</h2>\n<p><a href=\"https://codewords.recurse.com/issues/one/an-introduction-to-functional-programming\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codewords.recurse.com/issues/one/an-introduction-to-functional-programming</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=qtsbZarFzm8&#x26;list=WL&#x26;index=7&#x26;t=0s\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.youtube.com/watch?v=qtsbZarFzm8&#x26;list=WL&#x26;index=7&#x26;t=0s</a></p>\n","cover_image":""}},{"node":{"id":"e7c293f2b5f883e552990038574c3c90","title":"Mixin của JS","path":"/2020-08-14-mixins/","date":"2020-08-14","timeToRead":2,"desc":"","content":"<p>Trong JS, chúng ta chỉ có thể kế thừa từ <strong>một</strong> object, bên trong mỗi object chỉ chứa duy nhất <strong>một</strong> property <code class=\"language-inline-text\">[[Prototype]]</code>, và một <code class=\"language-inline-text\">class</code> thì chỉ <code class=\"language-inline-text\">extends</code> từ <strong>một</strong> class khác.</p>\n<p>Đôi khi như vậy khá giới hạn, điều này đẻ ra khái niệm <strong>mixins</strong>, cho phép một class có thể sử dụng các phương thức của một class khác mà không cần kế thừa</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> sayHiMixin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">sayBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bye </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Sử dụng</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>   \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gridsome-highlight-code-line\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> sayHiMixin<span class=\"token punctuation\">)</span></span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Andy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chúng ta không kế thừa, mà đơn giản là <strong>merge</strong> tất tả các phương thức lại thông qua <code class=\"language-inline-text\">prototype</code></p>\n<p>Bản thân một mixin cũng có thể kế thừa từ một mixin khác</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> sayMixin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">phrase</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>phrase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> sayHiMixin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// hoặc sử dụng Object.setPrototypeOf</span>\n<span class=\"gridsome-highlight-code-line\">    <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> sayMixin<span class=\"token punctuation\">,</span></span>    \n    <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// gọi đến phương thức từ mixin kế thừa</span>\n<span class=\"gridsome-highlight-code-line\">        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">sayBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bye </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (*)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-inline-text\">super</code> sẽ gọi đến phương thức kế thừa từ cha</p>\n</blockquote>\n<p>Ứng dụng mixin vào thực tế, khai báo một EventMixin để tất cả các function/class/object có thể sử dụng truyền đi một thông tin nào đó</p>\n<ul>\n<li><code class=\"language-inline-text\">trigger</code> bắn sự kiện và các thông tin đính kèm</li>\n<li><code class=\"language-inline-text\">on</code> subcribe một handler với một sự kiện</li>\n<li><code class=\"language-inline-text\">off</code> unsubscribe khỏi sự kiện</li>\n</ul>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> eventMixin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n    * subcribe trên sự kiện\n    * sử dụng menu.on('select', function(item) { ... })\n    */</span>\n    <span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">eventName<span class=\"token punctuation\">,</span> handler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_eventHandlers<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_eventHandlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_eventHandlers<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_eventHandlers<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_eventHandlers<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    \n    <span class=\"token comment\">/**\n    * unsubcribe\n    * menu.off('select', handler)\n    */</span>\n    <span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">eventName<span class=\"token punctuation\">,</span> handler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> handlers <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_eventHandlers<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>handlers<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> handlers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>handlers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                handlers<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    \n    <span class=\"token comment\">/**\n    * Trigger event\n    * this.trigger('select', data1, data2)\n    */</span>\n    <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">eventName<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_eventHandlers<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token comment\">// gọi handler</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_eventHandlers<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>\n            <span class=\"token parameter\">handler</span> <span class=\"token operator\">=></span> <span class=\"token function\">handler</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sử dụng</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Menu</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Menu</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> eventMixin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> menu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gridsome-highlight-code-line\">menu<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Value selected: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\nmenu<span class=\"token punctuation\">.</span><span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"tóm-ý\"><a href=\"#t%C3%B3m-%C3%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tóm ý</h2>\n<ul>\n<li>mixin là một phương pháp trong object-oriented programming để cho phép một class không cần <code class=\"language-inline-text\">extends</code> nhưng vẫn có thể sử dụng các phương thức từ class khác</li>\n<li>Các ngôn ngữ khác có thể cho phép đa kế thừa, tuy nhiên điều này không được trong js, phải dùng mixin</li>\n<li>Vấn để của mixin là sẽ ghi đè những phương thức trùng tên</li>\n</ul>\n","cover_image":""}},{"node":{"id":"793abc5e270b730b946fa9a1f6fcfba9","title":"Yaml cho web developer","path":"/2020-08-05-gioi-thieu-yaml-cho-nguoi-moi-bat-dau/","date":"2020-08-05","timeToRead":4,"desc":"Dạo gần đây, nếu bạn là Front End developer chắc sẽ gặp nhiều đến file có đuôi .yml ( ví dụ như .gitlab-ci.yml). Nếu bạn chưa biết kiểu file này, thì bài này mình sẽ giới thiệu túm lược để bạn làm quen.","content":"<p>File này được dùng khá nhiều cho việc thiết đặt và cấu hình. Mà nhiều nhất là dùng cho các thiết đặt CI/CD. Ngày xưa, khi chưa có Yaml, sau khi quá mệt mỏi với việc mỗi người mỗi ý trong việc viết file cấu hình, nổ ra cái ý tưởng hồi năm 2001</p>\n<blockquote>\n<p>Giờ sao chúng ta không tạo ra một file cấu hình giống như chỉ dẫn nấu ăn, chữ thôi, cực kỳ dễ hiểu</p>\n</blockquote>\n<p>Yaml cũng là một dạng superset của người anh em JSON.</p>\n<blockquote>\n<p>Superset là một ngôn ngữ chứa tất cả feature của một ngôn ngữ, rồi mở rộng thêm một số thứ nữa</p>\n</blockquote>\n<p>Ví dụ như TypeScript là superset của Javascript</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"system\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"removeComments\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"preserveConstEnums\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outFile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"../../built/local/tsc.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/**/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.spec.ts\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>File JSON không quá khó đọc, tuy nhiên lại vướng một vài hạn chế:</p>\n<ol>\n<li>Không dùng biến được</li>\n<li>Không dùng biến môi trường được</li>\n<li>Không thể override value</li>\n</ol>\n<p>YAML sẽ giúp ta làm được những điều chưa làm được ở json</p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">compilerOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">module</span><span class=\"token punctuation\">:</span> system\n  <span class=\"token key atrule\">noImplicitAny</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">removeComments</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">preserveConstEnums</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">outFile</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"../../built/local/tsc.js\"</span>\n  <span class=\"token key atrule\">sourceMap</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">types</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> node\n    <span class=\"token punctuation\">-</span> lodash\n    <span class=\"token punctuation\">-</span> express\n<span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> src/<span class=\"token important\">**/*</span>\n<span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> node_modules\n  <span class=\"token punctuation\">-</span> <span class=\"token string\">\"**/*.spec.ts\"</span></code></pre></div>\n<p><em>lưu ý đây chỉ là ví dụ, bạn không thể viết <code class=\"language-inline-text\">tsconfig</code> bằng YAML, buồn thay</em></p>\n<p>Một số nguyên tắc-cú pháp cần nắm</p>\n<p><strong>Thục đầu dòng</strong></p>\n<p>Thục đầu dòng rất quan trọng, bạn chỉ được dùng dấu <strong>khoảng trắng</strong>, không cho phép dùng <strong>tab</strong></p>\n<p><strong>Viết comment</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># I'm a comment</span>\n<span class=\"token key atrule\">person</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># I'm also a comment</span>\n  <span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span></code></pre></div>\n<p><strong>Dạng danh sách</strong></p>\n<p>Có 2 cách biết, như đã nói là superset của json, nên chúng ta có cách thứ nhất i như json</p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">people</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Anne\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Max\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Khuyến khích cách này hơn</p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">people</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> Anne\n  <span class=\"token punctuation\">-</span> John\n  <span class=\"token punctuation\">-</span> Max</code></pre></div>\n<p><strong>Khai báo giá trị string</strong></p>\n<p>Trong JSON bạn chỉ một cách viết giá trị dạng <code class=\"language-inline-text\">String</code> là đưa nó vào dấu ngoặc kép <code class=\"language-inline-text\">\"\"</code>, Yaml thì linh động hơn</p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">company</span><span class=\"token punctuation\">:</span> Google <span class=\"token comment\"># Single words, no quotes</span>\n<span class=\"token key atrule\">full_name</span><span class=\"token punctuation\">:</span> John Foo Bar Doe <span class=\"token comment\"># Full sentence, no quotes</span>\n<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"John\"</span> <span class=\"token comment\"># Using single quotes</span>\n<span class=\"token key atrule\">surname</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Christian Meyer\"</span> <span class=\"token comment\"># Using double quotes</span></code></pre></div>\n<blockquote>\n<p>Trong trường hợp bạn có chưa các ký tự đặc biệt, thì nên đưa vào dấu nháy kép.</p>\n</blockquote>\n<p><strong>Số</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">year</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2019</span> <span class=\"token comment\"># Integer</span>\n<span class=\"token key atrule\">nodeVersion</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10.8</span> <span class=\"token comment\"># Float</span></code></pre></div>\n<p><strong>Con trỏ</strong></p>\n<p>Khái niệm <em>con trỏ</em> xem như bạn đã biết nhé, mình không giải thích, cái này các bạn đi học chắc các thầy dạy kỹ lắm rồi.</p>\n<p>Ví dụ như bạn đang viết một số config cho môi trường <code class=\"language-inline-text\">production</code> và <code class=\"language-inline-text\">staging</code>, tức nhiên là một config là giống nhau thôi, nên chúng ta chỉ cần <em>trỏ</em> nó qua một chỗ</p>\n<p>Đây là không <em>trỏ</em> qua mà <em>copy/paste</em> huyền thoại</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"production\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"node_version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"13.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"os\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ubuntu\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"package_manager\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"run\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"yarn install\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NODE_ENV=${ENVIRONMENT} yarn build\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"ENVIRONMENT\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"production\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"staging\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"node_version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"13.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"os\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ubuntu\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"package_manager\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"run\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"yarn install\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NODE_ENV=${ENVIRONMENT} yarn build\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"ENVIRONMENT\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"staging\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Để dùng con trỏ, chúng ta tạo trước một cái <em>neo</em> để sau này trỏ vào cái <em>neo</em> này</p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">base-config</span><span class=\"token punctuation\">:</span> <span class=\"token important\">&amp;base</span> <span class=\"token comment\"># tên cái neo</span>\n  <span class=\"token key atrule\">node_version</span><span class=\"token punctuation\">:</span> 13.0.0\n  <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> ubuntu\n  <span class=\"token key atrule\">package_manager</span><span class=\"token punctuation\">:</span> yarn\n  <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> yarn install\n    <span class=\"token punctuation\">-</span> NODE_ENV=$<span class=\"token punctuation\">{</span>ENVIRONMENT<span class=\"token punctuation\">}</span> yarn build</code></pre></div>\n<p>Sau đó thực hiện việc trỏ</p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">base-config</span><span class=\"token punctuation\">:</span> <span class=\"token important\">&amp;base</span>\n  <span class=\"token key atrule\">node_version</span><span class=\"token punctuation\">:</span> 13.0.0\n  <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> ubuntu\n  <span class=\"token key atrule\">package_manager</span><span class=\"token punctuation\">:</span> yarn\n  <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> yarn install\n    <span class=\"token punctuation\">-</span> NODE_ENV=$<span class=\"token punctuation\">{</span>ENVIRONMENT<span class=\"token punctuation\">}</span> yarn build\n\n<span class=\"token key atrule\">production</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># dùng các thiết đặt ở neo tên là base</span>\n  <span class=\"token key atrule\">&lt;&lt;</span><span class=\"token punctuation\">:</span> <span class=\"token important\">*base</span>\n  <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">ENVIRONMENT</span><span class=\"token punctuation\">:</span> production\n\n<span class=\"token key atrule\">staging</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># dùng các thiết đặt ở neo tên là base</span>\n  <span class=\"token key atrule\">&lt;&lt;</span><span class=\"token punctuation\">:</span> <span class=\"token important\">*base</span>\n  <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">ENVIRONMENT</span><span class=\"token punctuation\">:</span> staging</code></pre></div>\n<p><strong>Môi trường Shell/Bash</strong></p>\n<p>Như đã nói lúc đầu, file <code class=\"language-inline-text\">.yml</code> rất được ưu dùng đề làm config, đặc biệt là config môi trường CI/CD.</p>\n<p>Môi trường CI/CD thường là Linux, và chúng ta cũng có thể truy cập đến các biến môi trường của Linux.</p>\n<p>Ví dụ như Github CI, chúng ta có thể chỉ định biến môi trường global nào chúng ta muốn truy cập</p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">variables</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">NODE_IMAGE</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">:</span><span class=\"token number\">10</span>\n\n<span class=\"token key atrule\">stages</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> build\n\n<span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> $NODE_IMAGE\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> build</code></pre></div>\n<p>Cú pháp <code class=\"language-inline-text\">$</code> không phải của <code class=\"language-inline-text\">yaml</code> mà là của <code class=\"language-inline-text\">shell/bash</code>. Những gì Github CI sẽ làm là đưa toàn bộ những biến bạn đặt trong <code class=\"language-inline-text\">variables</code> và tạo ra biến trong <code class=\"language-inline-text\">shell</code></p>\n<p>Một vài hệ thống khác cũng <strong>inject</strong> các giá trị khác như commit ref, branch name, build time, secret key được đặt bên ngoài file config</p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">variables</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">NODE_IMAGE</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">:</span><span class=\"token number\">10</span>\n\n<span class=\"token key atrule\">stages</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> build\n\n<span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> $NODE_IMAGE\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> build\n  <span class=\"token key atrule\">artifacts</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> $CI_COMMIT_REF_NAME</code></pre></div>\n<p>Ví dụ ở trên, chúng ta sử dụng biến môi trường <code class=\"language-inline-text\">$CI_COMMIT_REF_NAME</code> của GitLab CI.</p>\n<p>Hy vọng các bạn đã hiểu chút đỉnh về YAML và cảm thấy đọc file yaml không quá khó chịu nữa.</p>\n<h3 id=\"tài-liệu-tham-khảo\"><a href=\"#t%C3%A0i-li%E1%BB%87u-tham-kh%E1%BA%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tài liệu tham khảo</h3>\n<p><a href=\"https://yaml.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://yaml.org/</a>\n<a href=\"https://www.json2yaml.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.json2yaml.com/</a>\n<a href=\"https://learnxinyminutes.com/docs/yaml/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://learnxinyminutes.com/docs/yaml/</a></p>\n<p><a href=\"https://dev.to/raulfdm/yaml-for-web-developers-559n\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Yaml for Web Developers</a></p>\n","cover_image":""}},{"node":{"id":"03c24b35f02139473e6c5d2412a4ee9b","title":"Phân biệt sự khác nhau giữa await-return-return await","path":"/2020-07-30-phan-biet-su-khac-nhau-giua-await-return-await/","date":"2020-07-30","timeToRead":2,"desc":"Nắm rõ async không bao giờ là một kiến thức thừa.","content":"<p>Khi viết một async function, có sự khác nhau giữa <code class=\"language-inline-text\">await</code> và <code class=\"language-inline-text\">return</code> và <code class=\"language-inline-text\">return await</code>, các bạn nên biết để sử dụng cho đúng</p>\n<p>Chúng ta có một async function <code class=\"language-inline-text\">waitAndMaybeReject</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">waitAndMaybeReject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// wait 1 giây</span>\n  <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> isHeads <span class=\"token operator\">=</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isHeads<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Thành công zòi\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Xui thôi!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sau 1 giây, nó sẽ trả về một <code class=\"language-inline-text\">Promise</code>, <em>hên hên</em> thì resolve cho giá trị <em>Thành công zòi</em>, xui xui thì cho giá trị <em>Xui thôi!</em>.</p>\n<p>Giờ khi chúng ta gọi hàm <code class=\"language-inline-text\">waitAndMaybeReject()</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">waitAndMaybeReject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Oh No!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Khi viết như vậy, chúng ta sẽ luôn nhận được kết quả <strong>fulfill với giá trị undefined, không có waiting</strong></p>\n<p>Bởi vì chúng ta không có <strong>await</strong> trên kết quả trả về của <code class=\"language-inline-text\">waitAndMaybeReject()</code>, nói chúng là chúng ta ko có phục thuộc gì vào việc gọi hàm <code class=\"language-inline-text\">waitAndMaybeReject()</code>. Code như vậy là sai nghe các bạn.</p>\n<p>Rồi giờ chúng ta sẽ <strong>await</strong> trên kết quả của hàm <code class=\"language-inline-text\">waitAndMaybeReject()</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">waitAndMaybeReject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Oh No!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Hàm này khi thực thi nó sẽ chạy như sau, <strong>đợi 1 giây</strong>, sau đó hoặc là trả về <strong>fulfill với undefined</strong>, hoặc <strong>fulfill với 'Oh No!'</strong></p>\n<p>Bởi vì chúng ta <em>chỉ await trên <code class=\"language-inline-text\">waitAndMaybeReject()</code></em>, việc <em>xui xui</em> bị reject trong <code class=\"language-inline-text\">waitAndMaybeReject</code> sẽ throw ra lỗi và được túm lấy trong hàm <code class=\"language-inline-text\">test</code>. Và vì không làm gì hết khi <code class=\"language-inline-text\">waitAndMaybeReject()</code> khi được resolve, nên chúng ta nhận về <em>undefined</em></p>\n<p>Rồi, giờ tới trường hợp <code class=\"language-inline-text\">return</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">waitAndMaybeReject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Oh No!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nó sẽ thực thi như sau, <strong>đợi một giây</strong>, sau đó hoặc là <strong>fulfill với giá trị Thành công zòi</strong> hoặc <strong>reject với giá trị Xui thôi!</strong></p>\n<p>Với việc <code class=\"language-inline-text\">return waitAndMaybeReject</code>, chúng ta đã chuyển tiếp hết kết quả trả về của <code class=\"language-inline-text\">waitAndMaybeReject</code>, đồng nghĩa với việc <code class=\"language-inline-text\">catch</code> bên trong hàm <code class=\"language-inline-text\">test</code> chả bao giờ chạy tới.</p>\n<p><code class=\"language-inline-text\">return await</code> thì sao?</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token function\">waitAndMaybeReject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Oh No!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nó sẽ thực thi như sau, <strong>đợi sau một giây</strong> sau đó trả về <strong>fulfill với giá trị Thành công zòi</strong> hoặc <strong>fulfill với giá trị Oh No!</strong></p>\n<p>Vì chúng ta <code class=\"language-inline-text\">await</code> trên kết quả cả <code class=\"language-inline-text\">waitAndMaybeReject()</code>, reject của hàm <code class=\"language-inline-text\">waitAndMaybeReject()</code> sẽ đẩy về throw của hàm <code class=\"language-inline-text\">test</code>, kết quả là <strong>Oh No!</strong>. Nếu <code class=\"language-inline-text\">waitAndMaybeReject</code> được resolve, chúng ta return kết quả này, chính là <strong>Thành công zòi</strong></p>\n<p>Có thể viết như thế này cho dễ hình dung hơn</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fulfilledValue <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">waitAndMaybeReject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> fulfilledValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Oh No!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Lưu ý cuối cùng: Nếu không dùng try/catch mà return await sẽ rất dư thừa</p>\n</blockquote>\n<p><a href=\"https://jakearchibald.com/2017/await-vs-return-vs-return-await/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">await vs return vs return await</a></p>\n","cover_image":""}},{"node":{"id":"104ac9cb8bfa5400177824a201c68c2d","title":"useEffect từ a tới z","path":"/2020-03-23-tat-tan-tat-huong-dan-ve-use-effect/","date":"2020-03-23","timeToRead":13,"desc":"Đây là một bài viết tương đối dài dòng về useEffect, bạn cần biết và đã đọc qua tài liệu về useEffect trên trang chính thức của React trước, và nếu chỉ thực sự cần biết sử dụng useEffect ra sao, bạn không cần đọc bài viết phân tách mổ xẻ sâu kiểu này.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#m%E1%BB%97i-l%E1%BA%A7n-render-l%C3%A0-m%E1%BB%99t-gi%C3%A1-tr%E1%BB%8B-prop-v%C3%A0-state-%C4%91%E1%BB%99c-l%E1%BA%ADp\">Mỗi lần render là một giá trị Prop và State độc lập</a></li>\n<li><a href=\"#m%E1%BB%99t-l%C3%A0-kh%C3%B4ng-n%C3%B3i-l%C3%A1o-2-l%C3%A0-kh%C3%B4ng-n%C3%B3i-l%C3%A1o-nhi%E1%BB%81u-l%E1%BA%A7n\">Một là không nói láo, 2 là không nói láo nhiều lần</a></li>\n<li><a href=\"#h%E1%BA%ADu-qu%E1%BA%A3-c%E1%BB%A7a-vi%E1%BB%87c-d%E1%BB%91i-tr%C3%A1\">Hậu quả của việc dối trá</a></li>\n<li><a href=\"#2-c%C3%A1ch-%C4%91%E1%BB%83-th%C3%BA-th%E1%BA%ADt-v%E1%BB%9Bi-react-v%E1%BB%81-dependency\">2 cách để thú thật với React về dependency</a></li>\n<li><a href=\"#t%C3%ADnh-n%C4%83ng-update-c%E1%BB%A7a-google-docs\">Tính năng update của Google Docs</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"mỗi-lần-render-là-một-giá-trị-prop-và-state-độc-lập\"><a href=\"#m%E1%BB%97i-l%E1%BA%A7n-render-l%C3%A0-m%E1%BB%99t-gi%C3%A1-tr%E1%BB%8B-prop-v%C3%A0-state-%C4%91%E1%BB%99c-l%E1%BA%ADp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mỗi lần render là một giá trị Prop và State độc lập</h2>\n<p>Trước khi bắt đầu nói về <code class=\"language-inline-text\">useEffect</code> chúng ta cần nhắc lại quá trình render</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> ...\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Khác với Vue, nó không phải là một dạng <em>data binding</em>, <em>watcher</em>, <em>proxy</em>, nó chỉ là một giá trị thông thường.</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Đầu tiên giá trị khởi tạo của <code class=\"language-inline-text\">count</code> sẽ =0. Khi chúng ta gọi <code class=\"language-inline-text\">setCount(1)</code>, React sẽ gọi lại component một lần nữa, với giá trị <code class=\"language-inline-text\">count</code> lúc này là <code class=\"language-inline-text\">1</code>. Cứ vậy</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Lần đầu render</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// trả về bởi useState()  // ...</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// sau khi click, function này được gọi lại lần nữa</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// trả về bởi `useState()  // ...</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// sau khi click, function được gọi lại lần nữa</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// trả về bởi useState()  // ...</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Khi update một state, React gọi lại component, mỗi lần render như vậy, nó sẽ <strong>thấy</strong> một giá trị <code class=\"language-inline-text\">count</code> mới. Sau đó React sẽ update lại DOM tương ứng.</p>\n<p>Vấn đề mấu chốt cần nắm là giá trị <code class=\"language-inline-text\">count</code> <strong>trong các lần render khác nhau là khác nhau.</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleAlertClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked on: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Click me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleAlertClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Show alert</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      ...\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Chúng ta thực hiện các bước sau</p>\n<ul>\n<li>Bấm counter lên 3</li>\n<li>Bấm \"Show alert\"</li>\n<li>Bấm tiếp <code class=\"language-inline-text\">Click me</code> cho counter lên 5 trước khi bị gọi timeout</li>\n</ul>\n<p><img src=\"https://overreacted.io/46c55d5f1f749462b7a173f1e748e41e/counter.gif\" alt=\"Counter demo\"></p>\n<p>Câu hỏi ở đây là nó sẽ alert ra 5 - giá trị cuối cùng, hay là 3 giá trị lúc chúng ta click</p>\n<p><a href=\"https://codesandbox.io/s/w2wxl3yo0l\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chạy thử</a></p>\n<p><em>Bạn có thấy kết quả quá vô lý?</em></p>\n<p>Như đã nói ở trên, giá trị <code class=\"language-inline-text\">count</code> là hằng số trên mỗi lần render. <strong>Function của chúng ta được gọi nhiều lần, mỗi lần gọi như vậy giá trị <code class=\"language-inline-text\">count</code> bên trong là một số độc lập hoàn toàn với giá trị trước đó</strong></p>\n<p>Không phải <strong>đặc sản</strong> của React, viết dạng function như thế này bạn sẽ dễ hình dung hơn.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> someone <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Dan\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span>someone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsomeone <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Yuzhi\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span>someone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsomeone <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Dominic\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span>someone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Thế còn hàm xử lý event thì sao? cụ thể là hàm <code class=\"language-inline-text\">handleAlertClick</code>? Cũng như trên, hàm này là có các <strong>version</strong> khác nhau ở các lần render khác nhau.</p>\n<p>Bài viết được <strong>quảng cáo</strong> là nói về <code class=\"language-inline-text\">useEffect</code> mà nãy giờ chưa đá động gì!</p>\n<p>Quay lại với ví dụ từ <a href=\"https://reactjs.org/docs/hooks-effect.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">trang chính thức của React</a></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Click me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Câu hỏi là <code class=\"language-inline-text\">useEffect</code> đã làm cách nào để lấy được giá trị cuối cùng của <code class=\"language-inline-text\">count</code>?</p>\n<p>Lẽ nào đó có một dạng \"data binding\" hay \"watching\" ở đây để update giá trị <code class=\"language-inline-text\">count</code> bên trong hàm effect? Hoặc giả React <em>chơi chiêu</em> dùng biến mutable bên trong component để luôn có được giá trị cuối?</p>\n<p><em>Không hề!</em></p>\n<p>Chúng ta đã biết: giá trị <code class=\"language-inline-text\">count</code> là hằng số cho các lần render, event handle cũng độc lập trên các lần render khác nhau, effect cũng vậy luôn.</p>\n<p>Không phải giá trị <code class=\"language-inline-text\">count</code> thay đổi bên trong <code class=\"language-inline-text\">useEffect</code> <strong>bất biến</strong>, mà là <code class=\"language-inline-text\">useEffect</code> cũng bị thay đổi trên từng lần render.</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// lần render đầu tiên</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">0</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// sau khi click</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// click thêm lần nữa</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">2</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Có thể mường tượng effect là một phần của kết quả lúc render</p>\n</blockquote>\n<p>Giờ thử với <code class=\"language-inline-text\">setTimeout</code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Click me\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nếu mà click vài lần với một khoảng thời gian <em>bỏ nhỏ</em> thì kết quả log ra là gì?</p>\n<p><a href=\"https://codesandbox.io/s/lyx20m1ol\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Thử ở đây</a></p>\n<p>Bạn không chỉ nhận được 1 mà là một chuỗi các đoạn log ứng với số lần click.</p>\n<p><img src=\"https://overreacted.io/a5727d333c270e05942f508707265378/timeout_counter.gif\" alt=\"Screen recording of 1, 2, 3, 4, 5 logged in order\"></p>\n<p><em>Đương nhiên phải chạy như vậy mới đúng chứ, đâu có gì phải thắc mắc?</em></p>\n<p>Bạn đã thử với <code class=\"language-inline-text\">this.state</code> trong class component chưa?</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://overreacted.io/264b329edc111a1973003bdf2bcacd65/timeout_counter_class.gif\" alt=\"Screen recording of 5, 5, 5, 5, 5 logged in order\"></p>\n<p><em>Lý do?</em> Giá trị <code class=\"language-inline-text\">this.state</code> bên trong class component là một mutation (có thể thay đổi).</p>\n<p>Nếu luôn muốn lấy giá trị sau cùng bên trong effect, cách dễ nhất là dùng <code class=\"language-inline-text\">refs</code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">const</span> latestCount <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>\n        latestCount<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">...</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">...</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>latestCount<span class=\"token punctuation\">.</span>current<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://overreacted.io/timeout_counter_refs-78f7948263dd13b023498b23cb99f4fc.gif\"></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nếu chúng ta render <code class=\"language-inline-text\">&lt;Greeting name=\"Dan\" /></code>, sau đó render <code class=\"language-inline-text\">&lt;Greeting name=\"Luu\" /></code>. Cuối cùng chúng ta luôn nhận được <em>Hello, Luu</em></p>\n<p>React luôn đồng bộ cục DOM với giá trị hiện tại của <code class=\"language-inline-text\">prop</code> và <code class=\"language-inline-text\">state</code>. Không cần phân biệt giữa <code class=\"language-inline-text\">mount</code> và <code class=\"language-inline-text\">update</code> khi render. Có thể hình dung effect cũng tương tự như vậy, <strong><code class=\"language-inline-text\">useEffect</code> cho phép đồng bộ những phần không nằm trong React tree với giá trị của <code class=\"language-inline-text\">prop</code> và <code class=\"language-inline-text\">state</code></strong></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Câu thần chú cho việc này là: <strong>Quan trọng là đích đến, không phải quá trình</strong></p>\n<p>Chạy effect trên tất cả lúc chạy render sẽ không hay lắm, đôi khi có trường hợp lặp vô tận.</p>\n<p>Trong quá trình re-render, React chỉ cập nhập đúng phần DOM đã thay đổi.</p>\n<p>Ví dụ như</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, Dan</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Sang</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, Luu</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>React sẽ thấy 2 object</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> oldProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Greeting\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello, Dan\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Greeting\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello, Yuzhi\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nó sẽ xác định được <code class=\"language-inline-text\">children</code> bị thay đổi và cần update, còn <code class=\"language-inline-text\">className</code> thì không, nó sẽ làm như sau</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">domNode<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, Luu\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chúng ta cũng muốn effect làm điều tương tự, khi re-render chỉ apply những update cần thiết</p>\n<p>Ví dụ với component này</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> setCounter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-inline-text\">useEffect</code> không hề liên quan tới giá trị state <code class=\"language-inline-text\">counter</code>, gọi <code class=\"language-inline-text\">document.title</code> khi giá trị <code class=\"language-inline-text\">counter</code> thay đổi không phải là ý hay.</p>\n<p>Đó là lý do tại sao chúng ta có thêm tham số <code class=\"language-inline-text\">dependency</code> (một mảng) khi dùng <code class=\"language-inline-text\">useEffect</code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// deps</span></code></pre></div>\n<p>Dịch ra ngôn ngữ con người là thế này: \"Tao biết React mày không phân biệt được sự khác nhau bên trong function, nên tao hứa là tao chỉ dùng đến <code class=\"language-inline-text\">name</code> bên trong function này thôi, và chỉ giá trị <code class=\"language-inline-text\">name</code> này update thì mày hả gọi nó\"</p>\n<h2 id=\"một-là-không-nói-láo-2-là-không-nói-láo-nhiều-lần\"><a href=\"#m%E1%BB%99t-l%C3%A0-kh%C3%B4ng-n%C3%B3i-l%C3%A1o-2-l%C3%A0-kh%C3%B4ng-n%C3%B3i-l%C3%A1o-nhi%E1%BB%81u-l%E1%BA%A7n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một là không nói láo, 2 là không nói láo nhiều lần</h2>\n<p>Đừng bao giờ lừa gạt React bằng cách đưa dependency không đúng cho nó, hậu quả nhãn tiền. Hợp lý, nhưng nhiều lập trình viên quen sử dụng <code class=\"language-inline-text\">class</code> sẽ cố tình qua mặt</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">SearchResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// việc ntn được hôn? không phải lúc nào cũng đúng</span>\n  <span class=\"token comment\">// có cách viết tốt hơn</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Bạn sẽ nghĩ là \"Tao chỉ muốn chạy nó lúc mount thôi\". Nếu chúng ta chỉ định một dependency, <strong>tất cả giá trị bên trong component sử dụng bởi effect phải được khai báo cụ thể</strong>. Bao gồm prop, state, function</p>\n<p>Đôi khi mà làm như vậy nó phát sinh lỗi. Thí dụ như gọi fetch data liên tục hoặc socket được tạo không cần thiết. Cách giải quyets là <strong>không xóa chúng khỏi dependency</strong></p>\n<p>Trước khi nói về cách giải quyết, chúng ta xem vấn đề ở đây là gì khi so sánh Dependency</p>\n<h2 id=\"hậu-quả-của-việc-dối-trá\"><a href=\"#h%E1%BA%ADu-qu%E1%BA%A3-c%E1%BB%A7a-vi%E1%BB%87c-d%E1%BB%91i-tr%C3%A1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hậu quả của việc dối trá</h2>\n<p>Nếu mảng dependency chứa tất cả giá trị sử dụng trong <code class=\"language-inline-text\">useEffect</code>, React biết được khi nào thì re-run nó</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://overreacted.io/fae247cd068eedbd4b62ba50592d2b3d/deps-compare-correct.gif\" alt=\"Diagram of effects replacing one another\"></p>\n<p>Nhưng nếu chúng ta chỉ định <code class=\"language-inline-text\">[]</code>, nó không re-run sau lần đầu tiên</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// thiếu name</span></code></pre></div>\n<p><img src=\"https://overreacted.io/25f75db3f9f57ffe1426912093577445/deps-compare-wrong.gif\" alt=\"Diagram of effects replacing one another\">,</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Sai: không được phép bỏ qua thằng name</span></code></pre></div>\n<p>Rõ ràng là 2 thằng dependency không khác nhau, nên nó sẽ không chạy effect</p>\n<p>Trong tình huống này, vấn đề khá là hiển nhiên, nhưng trực giác có thể đánh lừa bạn trong các tình huống khác, lấy ví dụ, chúng ta muốn giá trị <code class=\"language-inline-text\">counter</code> tăng đều sau mỗi giây. Với một class, trực giác sẽ mách bảo: \"Set up cái interval một lần, rồi dứt tình vứt áo một lần\", kiểu như <a href=\"https://codesandbox.io/s/n5mjzjy9kl\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">thế này</a>, khi chuyển qua dùng <code class=\"language-inline-text\">useEffect</code> bạn sẽ nghĩ đến dùng <code class=\"language-inline-text\">[]</code> cho mảng phụ thuộc \"Tao chỉ muốn tình một đêm\", đúng không?</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Theo như lập luận rất hay gặp \"danh sách phụ thuộc cho phép chúng ta chỉ định việc re-render effect khi nào\", và ở đây ta chỉ muốn trigger nó một lần vì nó là interval, <em>nhưng tại sao lại có vấn đề ở đây?</em></p>\n<p>Chúng ta đang muốn effect này chỉ chạy lần đầu tiên mà thôi, đưa vào dependencies là <code class=\"language-inline-text\">[]</code> có vẻ hợp lý, React sẽ bỏ qua hết những lần sau, nhưng chúng ta đang lừa dối React, vì bên trong chúng ta có sử dụng giá trị <code class=\"language-inline-text\">count</code>, chúng ta có giá trị phụ thuộc mà không khai báo. Thực tế <code class=\"language-inline-text\">setCount()</code> sẽ gọi liên tục sau 1 giây, chứ không dừng lại sau lần gọi đầu tiên.</p>\n<p>Ở lần render đầu tiên, <code class=\"language-inline-text\">count</code> = 0, vì thế <code class=\"language-inline-text\">setCount(count + 1)</code> ở lần render đầu tiên nghĩa là <code class=\"language-inline-text\">setCount(0+1)</code>, nhưng vì không re-run effect thêm lần nào nữa, chúng ta cứ gọi mãi <code class=\"language-inline-text\">setCount(0+1)</code> ở những lần tiếp theo</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// state = 0</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// lần đầu</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// luôn là setCount(1)      }, 1000);</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// không re-run  );</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// state = 1</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// không bao giờ chạy    () => {</span>\n      <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Những con bug như thế này sẽ rất rất khó để mò ra được, vì thế hãy luôn thành thật với React, khai báo hết dependency đang có.</p>\n<p><img src=\"https://overreacted.io/29e53bd0c9b7d2ac70d3cd924886b030/interval-wrong.gif\" alt=\"Diagram of stale interval closure\"></p>\n<h2 id=\"2-cách-để-thú-thật-với-react-về-dependency\"><a href=\"#2-c%C3%A1ch-%C4%91%E1%BB%83-th%C3%BA-th%E1%BA%ADt-v%E1%BB%9Bi-react-v%E1%BB%81-dependency\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2 cách để thú thật với React về dependency</h2>\n<p><em>Nên chọn cách một, cách 2 chỉ áp dụng khi cần thiết</em></p>\n<p><strong>Cách 1: luôn là người trung thực, chính trực đạo đức hết mực, luôn khai báo đầy đủ thông tin bạn trai, bạn gái, ba má, chú bác nào bạn đang phụ thuộc cho cơ quan thuế</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">etCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tuy nhiên thế này, khi giá trị <code class=\"language-inline-text\">count</code> thay đổi, cái interval của chúng ta sẽ bị xóa và đặt lại lần nữa sau những lần render, nó không phải là cái chúng ta mong muốn nó hoạt động như vậy</p>\n<p><img src=\"https://overreacted.io/5734271ddfa94d2d65ac6160515e0069/interval-rightish.gif\" alt=\"Diagram of interval that re-subscribes\"></p>\n<p><strong>Cách 2 là thay đổi tư duy, giảm bớt anh trai nuôi, em gái nuôi không cần thiết</strong></p>\n<p>Chúng ta không nói xạo, chúng ta giảm bớt số lượng những thứ phụ thuộc cho việc re-run effect</p>\n<p>Để làm được việc này, chúng ta phải hỏi bản thân: <strong>chúng ta dùng count để làm gì?</strong> Có vẻ như chúng ta chỉ dùng nó cho việc gọi hàm <code class=\"language-inline-text\">setCount</code>, chúng ta không thực sự cần giá trị <code class=\"language-inline-text\">count</code> nếu chúng ta biết được giá trị trước đó, trường hợp trên, chúng ta có thể không cần dùng đến giá trị <code class=\"language-inline-text\">count</code> mà dùng <em>previous state</em></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://overreacted.io/f128ad20c28317ed27a3cb68197fc906/interval-right.gif\" alt=\"Diagram of interval that works\"></p>\n<p><a href=\"https://codesandbox.io/s/q3181xz1pj\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chạy thử</a></p>\n<h2 id=\"tính-năng-update-của-google-docs\"><a href=\"#t%C3%ADnh-n%C4%83ng-update-c%E1%BB%A7a-google-docs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tính năng update của Google Docs</h2>\n<p>Khi nói về effect, định hướng lập trình chúng ta là <strong>đồng bộ hóa</strong>, có một khái niệm khá thú vị khi thực hiện đồng bộ hóa là chúng ta thường không đồng bộ toàn bộ nội dung. Lấy ví dụ như Google Docs, nó không thực sự truyền tải <strong>cả trang</strong> lên phía server, làm như vậy hiệu năng sẽ rất tệ, cái nó làm là gửi đi một thông tin chứa cái mà user đang muốn thực hiện.</p>\n<p><strong>Tốt nhất truyền đi thật ít thông tin từ effect (chỉ những thông tin cần thiết nhất) vào trong component</strong>. Hàm <code class=\"language-inline-text\">setCount(c => c + 1)</code> sẽ gửi đi ít thông tin hơn so với hàm <code class=\"language-inline-text\">setCount(count + 1)</code> đứng trên một khía cạnh nào đó vì nó không phụ thuộc giá trị hiện tại, <a href=\"https://reactjs.org/docs/thinking-in-react.html#step-3-identify-the-minimal-but-complete-representation-of-ui-state\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sử dụng ít state nhất có thể</a> để đạt được kết quả là một trong các nguyên lý chính của đợt cập nhập React với effect</p>\n<p>Tuy nhiên không phải lúc nào cuộc sống cũng đơn giản với bạn như vậy, nếu chúng ta muốn tính toán giá trị của state mới dựa trên một prop, 2 giá trị state phụ thuộc lẫn nhau, <code class=\"language-inline-text\">setState</code> là không đủ. Chúng ta có người chị em hàng xóm tên <code class=\"language-inline-text\">useReducer</code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> step <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"tick\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> state <span class=\"token operator\">+</span> step<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tick\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cách dùng <code class=\"language-inline-text\">useReducer</code> như vậy là một dạng <strong>cheat mode</strong> của hook, cho phép chúng ta bỏ qua các dependency <em>ngầm</em> khỏi effect, và chặn re-run không không cần thiết</p>\n<p><a href=\"https://codesandbox.io/s/7ypm405o8q\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chạy thử</a></p>\n<p>Bài viết này vẫn còn, và nếu bạn vẫn còn muốn đào sâu hơn nữa, có thể tìm đọc bài viết gốc của Dan</p>\n<p><a href=\"https://overreacted.io/a-complete-guide-to-useeffect/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Complete Guide to useEffect</a></p>\n","cover_image":""}},{"node":{"id":"f535766d417badcb135cb627fa5ea2a6","title":"Thiết đặt ESLint khi sử dụng với Javascript, Typescript, React","path":"/2020-02-03-huong-dan-cai-dat-eslint-react-javascript-typescript-vscode/","date":"2020-02-03","timeToRead":8,"desc":"Chúng ta bắt đầu với Javascript trước, sau đó sẽ là TypeScript, và React. Mục tiêu là làm đúng, tránh trường hợp cài package không cần thiết hoặc copy/paste các config tới khi nó chạy được thì thôi.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#t%E1%BA%A1i-sao-d%C3%B9ng-eslint\">Tại sao dùng ESLint</a></li>\n<li><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-eslint\">Cài đặt ESLint</a></li>\n<li><a href=\"#file-c%C3%A0i-%C4%91%E1%BA%B7t-c%E1%BB%A7a-eslint\">File cài đặt của ESLint</a></li>\n<li><a href=\"#javascript-thu%E1%BA%A7n\">Javascript thuần</a></li>\n<li><a href=\"#thi%E1%BA%BFt-%C4%91%E1%BA%B7t-typescript\">Thiết đặt TypeScript</a></li>\n<li>\n<p><a href=\"#thi%E1%BA%BFt-%C4%91%E1%BA%B7t-cho-react\">Thiết đặt cho React</a></p>\n<ul>\n<li><a href=\"#react-javascript\">React Javascript</a></li>\n<li><a href=\"#react-typescript\">React TypeScript</a></li>\n</ul>\n</li>\n<li><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-cho-vscode\">Cài đặt cho VSCode</a></li>\n</ul>\n<!-- /TOC -->\n<p>Nếu chưa rành, bạn cần đọc từ đầu tới cuối, nếu đã thành thạo, chỉ việc nhảy tới phần cuối rồi copy config về xài.</p>\n<p>Hướng dẫn này sử dụng bộ config của Airbnb, vì nó quá nổi tiếng và được sử dụng gần như là chuẩn. Tất nhiên, bạn có quyền thay đổi sao cho hợp <em>gu</em></p>\n<p>Nếu chưa bao giờ <em>nghe</em> đến hướng dẫn viết <em>code sao cho chuẩn</em> của Airbnb, tham khảo các bài viết sau</p>\n<ul>\n<li><a href=\"https://github.com/airbnb/javascript/blob/master/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb JavaScript style guide</a></li>\n<li><a href=\"https://github.com/airbnb/javascript/tree/master/react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb React style guide</a></li>\n<li><a href=\"https://github.com/airbnb/javascript/tree/master/css-in-javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb CSS in JavaScript style guide</a></li>\n<li><a href=\"https://github.com/airbnb/css\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb Sass style guide</a></li>\n</ul>\n<h2 id=\"tại-sao-dùng-eslint\"><a href=\"#t%E1%BA%A1i-sao-d%C3%B9ng-eslint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao dùng ESLint</h2>\n<p>Hiện tại không có bất cứ một đối thủ nào <em>xứng tầm</em> với ESLint, nó là dự án đã và đang được bảo trì bởi cộng đồng rất rộng lớn. Hầu hết các chương trình viết code đều hỗ trợ, chúng ta sẽ không gặp khó khăn trong việc sử dụng nó với VSCode, Vim, Emac, WebStorm, Sublime, Atom,...</p>\n<p>Túm lại, ESLint là <strong>nền tảng</strong> xịn sò nhất, bạn không cần lăng tăng tìm <em>người khác</em>.</p>\n<h2 id=\"cài-đặt-eslint\"><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-eslint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cài đặt ESLint</h2>\n<p>Giống như bất kỳ package nào khác, ESLint có thể được cài đặt ở 2 mức</p>\n<ul>\n<li><em>global</em>, cài luôn vào máy <code class=\"language-inline-text\">npm -g</code></li>\n<li>đi theo từng project</li>\n</ul>\n<p>Việc cài đặt ESLint ở mức <em>global</em> khá là hợp lý vì chúng ta muốn dùng nó ở mọi project. Tuy nhiên cũng <em>hợp lý</em> nếu cài riêng trên từng project nếu bạn đang cần</p>\n<ul>\n<li>Các phiên bản ESLint khác nhau trên từng dự án</li>\n<li>Công khai bạn phụ thuộc vào ESLint cho project đó</li>\n<li>Đồng nghiệp và các công cụ tự động (như mấy thằng CI) có thể cài đặt ESlint như những package khác.</li>\n</ul>\n<p>Cài đặt ESLint trong thư mục project</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i eslint --save-dev</code></pre></div>\n<p>Chạy ESLint trong project</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx eslint</code></pre></div>\n<p>Để tạo một <em>shortcut</em> cho câu lệnh chạy eslint. Bên trong file <code class=\"language-inline-text\">package.json</code> thêm dòng sau</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint .\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tham số <code class=\"language-inline-text\">.</code> cho phép chạy ESLint bên trong thư mục hiện tại, chúng ta chạy lệnh thông qua shortcut</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run lint</code></pre></div>\n<h2 id=\"file-cài-đặt-của-eslint\"><a href=\"#file-c%C3%A0i-%C4%91%E1%BA%B7t-c%E1%BB%A7a-eslint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>File cài đặt của ESLint</h2>\n<p>Có thể đặt file cài đặt ESLint ở <a href=\"https://eslint.org/docs/user-guide/configuring#configuration-cascading-and-hierarchy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nhiều vị trí</a>. Nếu không có nhu cầu quá đặt biệt, 1 file duy nhất ở thư mục ngoài cùng ( <code class=\"language-inline-text\">root</code> ) là đủ.</p>\n<p>ESLint cho phép sử dụng nhiều kiểu file</p>\n<ul>\n<li>Javascript</li>\n<li>JSON</li>\n<li>YAML</li>\n</ul>\n<p>Xài YAML trong ví dụ này. Tạo file tên <code class=\"language-inline-text\">.eslintrc.yaml</code>, cái này nếu bạn chạy <code class=\"language-inline-text\">eslint init</code> trong thư mục <code class=\"language-inline-text\">src/</code> của dự án nó sẽ hỏi bạn có muốn tạo không, nó tạo dùm cho.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">eslint <span class=\"token parameter variable\">--init</span></code></pre></div>\n<blockquote>\n<p>Nếu muốn thêm <em>logic</em> bằng code, bạn cần dùng kiểu javascript</p>\n</blockquote>\n<p>Điều cần quan tâm trước hết là thông báo cho ESLint chúng ta đang viết ngôn ngữ gì, phiên bản nào, môi trường mà code sẽ chạy. Nếu không có các thông tin, ESLint sẽ không chạy được.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">parserOptions:\n  ecmaVersion: <span class=\"token number\">6</span>\nenv:\n  node: <span class=\"token boolean\">true</span></code></pre></div>\n<h2 id=\"javascript-thuần\"><a href=\"#javascript-thu%E1%BA%A7n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Javascript thuần</h2>\n<p>Với project là javascript thuần, toàn bộ file là <code class=\"language-inline-text\">.js</code>, có thể tự định nghĩa từ đầu hết, nhưng như vậy khá mất thời gian, khó bảo trì, chưa chắc chuẩn vì nó phụ thuộc vào sự hiểu biết của bạn về javascript</p>\n<p>Rất nhiều các công ty lớn như <a href=\"https://github.com/google/eslint-config-google\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google</a>, <a href=\"https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb</a>, <a href=\"https://github.com/facebook/fbjs/tree/master/packages/eslint-config-fbjs-opensource\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Facebook</a> bỏ ra cả tỉ tỉ thời gian để bảo trì và cập nhập mấy cài đặt này</p>\n<p>Sử dụng cài đặt vạn người yêu thích, Airbnb</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx install-peerdeps <span class=\"token parameter variable\">--dev</span> eslint-config-airbnb-base</code></pre></div>\n<p>Các bài viết trên mạng sẽ kêu bạn cài <code class=\"language-inline-text\">eslint-config-airbnb</code>, nó có bao gồm luôn phần cài đặt cho React, React Hooks, ... . Không cần thiết trong trường hợp project chỉ là javascript thông thường.</p>\n<p>Để ý chúng ta <strong>KHÔNG</strong> dùng <code class=\"language-inline-text\">npm</code> để cài đặt, mà dùng <code class=\"language-inline-text\">npx install-peerdeps</code>. Nó sẽ cài luôn mấy package nào mà <code class=\"language-inline-text\">eslint-config-airbnb-base</code> phụ thuộc. Trường hợp sử dụng ESLint chúng ta sẽ gặp hoài, vì hầu như nó đều phụ thuộc một vài package khác.</p>\n<p>Cài xong, khai báo sẽ kế thừa bộ cài đặt của Airbnb</p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>base</code></pre></div>\n<p>Những thiết đặt của airbnb có thể nói là rất phổ biến và được tin dùng bởi nhiều dự án lớn nhỏ khác nhau. Chúng ta có thể yên tâm sử dụng nó mà không cần thay đổi gì nhiều.</p>\n<p>Tổng kết</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-config-airbnb-base\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^14.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-import\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.20.0\"</span> (peer dependency)\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parserOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ecmaVersion</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">node</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> eslint<span class=\"token punctuation\">:</span>recommended\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>base</code></pre></div>\n<h2 id=\"thiết-đặt-typescript\"><a href=\"#thi%E1%BA%BFt-%C4%91%E1%BA%B7t-typescript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thiết đặt TypeScript</h2>\n<p>Vấn đề chính của TypeScript là ESLint không thể tự động mà <code class=\"language-inline-text\">parse</code> được, chúng ta phải thêm một parser <a href=\"https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/parser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@typescript-eslint/parser</a>.</p>\n<p>Cài đặt</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @typescript-eslint/parser --save-dev</code></pre></div>\n<blockquote>\n<p>Parse làm nhiệm vụ đọc cài file input và tạo ra một <em>phiên bản</em> mà ESLint hiểu được.</p>\n</blockquote>\n<p>Khai báo dùng parser này</p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parser</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span></code></pre></div>\n<p>Đồng thời cập nhập luôn <code class=\"language-inline-text\">package.json</code> và báo với ESLint đừng kiểm tra file <code class=\"language-inline-text\">.js</code> mà kiểm tra file <code class=\"language-inline-text\">.ts</code></p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint . --ext .ts\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tương tự như javascript, chúng ta dùng bộ thiết đặt của Airbnb</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx install-peerdeps <span class=\"token parameter variable\">--dev</span> eslint-config-airbnb-typescript\n<span class=\"token function\">npm</span> i eslint-plugin-import --save-dev</code></pre></div>\n<p><code class=\"language-inline-text\">eslint-plugin-import</code> phải được cài đặt riêng, thủ công, không rõ lý do tại sao luôn.</p>\n<p>Cập nhập lại file config ESLint</p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>typescript/base\n  <span class=\"token punctuation\">-</span> plugin<span class=\"token punctuation\">:</span>@typescript<span class=\"token punctuation\">-</span>eslint/recommended</code></pre></div>\n<p>Bạn có thể thắc mắc, tại sao chưa cài <code class=\"language-inline-text\">@typescript-eslint</code> mà có thể sử dụng, thật ra lúc cài <code class=\"language-inline-text\">eslint-config-airbnb-typescript</code> chúng ta đã cài luôn nó bằng <code class=\"language-inline-text\">npx install-peerdeps</code></p>\n<p>Có thể rule khác nữa có thể tham khảo <a href=\"https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">trực tiếp từ tài liệu trên github</a></p>\n<p>Cuối cùng, bạn sẽ thấy có rất nhiều bài viết trên mạng, chỉ bạn thiết đặt</p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token string\">\"@typescript-eslint\"</span></code></pre></div>\n<p>Nếu không sử dụng các thiết ESLint được đề nghị, cái này không cần thiết. Lý do là Airbnb đã bật luôn các rule như vậy.</p>\n<p>Tổng kết</p>\n<p><strong>package.json</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"@typescript-eslint/eslint-plugin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.17.0\"</span><span class=\"token punctuation\">,</span> (peer dependency)\n  <span class=\"token property\">\"@typescript-eslint/parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.17.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.8.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-config-airbnb-typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.3.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-import\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.20.0\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>.eslintrc.yaml</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parserOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ecmaVersion</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">node</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>typescript/base\n  <span class=\"token punctuation\">-</span> plugin<span class=\"token punctuation\">:</span>@typescript<span class=\"token punctuation\">-</span>eslint/recommended</code></pre></div>\n<h2 id=\"thiết-đặt-cho-react\"><a href=\"#thi%E1%BA%BFt-%C4%91%E1%BA%B7t-cho-react\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thiết đặt cho React</h2>\n<p>Thêm các thiết đặt ESLint cho React vô cùng đơn giản, mọi thứ đã có Airbnb lo.</p>\n<p>Một trong những sai lầm phổ biến là cho rằng viết như bên dưới sẽ bật hỗ trợ React</p>\n<p><strong>.eslintrc.yaml</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parserOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ecmaFeatures</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">jsx</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>React sử dụng JSX, nhưng theo cách mà ESLint không thể <strong>hiểu nổi</strong>. Để React và ESLint <em>nói chuyện</em> được với nhau, chúng ta phải sử dụng <code class=\"language-inline-text\">eslint-plugin-react</code></p>\n<h3 id=\"react-javascript\"><a href=\"#react-javascript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>React Javascript</h3>\n<p>Cài đặt package</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx install-peerdeps <span class=\"token parameter variable\">--dev</span> eslint-config-airbnb</code></pre></div>\n<p><strong>.eslintrc.yaml</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">browser</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p><strong>package.json</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint . --ext .js,.jsx\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nếu có sử dụng React Hook, bạn nên thêm phần cài đặt sau (có bỏ qua việc kiểm tra accessibility)</p>\n<p><strong>.eslintrc.yaml</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>base\n  <span class=\"token punctuation\">-</span> airbnb/rules/react\n  <span class=\"token punctuation\">-</span> airbnb/hooks</code></pre></div>\n<p>Tổng kết</p>\n<p><strong>package.json</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-config-airbnb\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^18.0.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-import\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.20.0\"</span><span class=\"token punctuation\">,</span> (peer dependency)\n  <span class=\"token property\">\"eslint-plugin-jsx-a11y\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.2.3\"</span><span class=\"token punctuation\">,</span> (peer dependency)\n  <span class=\"token property\">\"eslint-plugin-react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.18.0\"</span><span class=\"token punctuation\">,</span> (peer dependency)\n  <span class=\"token property\">\"eslint-plugin-react-hooks\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.7.0\"</span> (peer dependency)\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>.eslintrc.yaml</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parserOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ecmaVersion</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">browser</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb\n  <span class=\"token punctuation\">-</span> airbnb/hooks\n\n<span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">react/react-in-jsx-scope</span><span class=\"token punctuation\">:</span> off</code></pre></div>\n<p><a href=\"https://github.com/yannickcr/eslint-plugin-react#list-of-supported-rules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rảnh ngồi xem toàn bộ thiết đặt</a></p>\n<h3 id=\"react-typescript\"><a href=\"#react-typescript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>React TypeScript</h3>\n<p>Nếu dùng TypeScript, chúng ta không thể cài theo kiểu <code class=\"language-inline-text\">npx install-peerdeps</code>, mà phải cài độc lập</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint-config-airbnb-typescript <span class=\"token punctuation\">\\</span>\n            eslint-plugin-import <span class=\"token punctuation\">\\</span>\n            eslint-plugin-jsx-a11y <span class=\"token punctuation\">\\</span>\n            eslint-plugin-react <span class=\"token punctuation\">\\</span>\n            eslint-plugin-react-hooks <span class=\"token punctuation\">\\</span>\n            @typescript-eslint/eslint-plugin <span class=\"token punctuation\">\\</span>\n            --save-dev</code></pre></div>\n<p><strong>.eslintrc.yaml</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parserOptions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ecmaVersion</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">browser</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> airbnb<span class=\"token punctuation\">-</span>typescript\n  <span class=\"token punctuation\">-</span> airbnb/hooks\n  <span class=\"token punctuation\">-</span> plugin<span class=\"token punctuation\">:</span>@typescript<span class=\"token punctuation\">-</span>eslint/recommended\n\n<span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">react/react-in-jsx-scope</span><span class=\"token punctuation\">:</span> off</code></pre></div>\n<p><strong>package.json</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.8.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"@typescript-eslint/eslint-plugin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.17.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-config-airbnb-typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.3.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-import\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.20.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-jsx-a11y\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.2.3\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.18.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-react-hooks\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.3.0\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint . --ext .ts,.tsx\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"cài-đặt-cho-vscode\"><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-cho-vscode\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cài đặt cho VSCode</h2>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VSCode đã có plugin</a> khá thần thánh để hỗ trợ ESLint. Các thiết đặt yêu thích của mình</p>\n<p>Tự động chạy lint khi save</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"eslint.run\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"onSave\"</span></code></pre></div>\n<p>VSCode sẽ kiểm tra trên JS, JSX, TS, TSX</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"eslint.validate\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"javascript\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"javascriptreact\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"typescript\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"typescriptreact\"</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Chọn kiểu nháy đơn</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"javascript.preferences.quoteStyle\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"single\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"typescript.preferences.quoteStyle\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"single\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Tự động cập nhập vị trí file</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"javascript.updateImportsOnFileMove.enabled\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"typescript.updateImportsOnFileMove.enabled\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p><a href=\"https://blog.geographer.fr/eslint-guide\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ESLint configuration and best practices</a></p>\n","cover_image":""}},{"node":{"id":"85d2d63ac798ad8354b135ec3b530dc3","title":"Kiểu enum trong TypeScript: làm việc như thế nào, sử dụng ra sao","path":"/2020-02-01-huong-dan-kieu-enum-trong-typescript-can-ban/","date":"2020-02-01","timeToRead":4,"desc":"Chúng ta sẽ trả lời 2 câu hỏi sau: enum của TypeScript làm việc như thế nào, Nó được sử dụng để làm gì. Vở lòng cho người mới viết TypeScript","content":"<h2 id=\"các-khái-niệm-căn-bản-của-enum\"><a href=\"#c%C3%A1c-kh%C3%A1i-ni%E1%BB%87m-c%C4%83n-b%E1%BA%A3n-c%E1%BB%A7a-enum\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các khái niệm căn bản của enum</h2>\n<p>Javascript chỉ có đúng một kiểu mà giá trị bị ràng buộc <em>rất cụ thể</em>: <code class=\"language-inline-text\">boolean</code>, giá trị chỉ được phép là <code class=\"language-inline-text\">true</code> hoặc <code class=\"language-inline-text\">false</code>, không chấp nhận một giá trị nào khác. <code class=\"language-inline-text\">Enum</code> là phiên bản <em>mở rộng</em> với công dụng tương tự như <code class=\"language-inline-text\">boolean</code></p>\n<div class=\"gridsome-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> NoYes <span class=\"token punctuation\">{</span>\n    No<span class=\"token punctuation\">,</span>\n    Yes\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>2 giá trị <code class=\"language-inline-text\">No</code> <code class=\"language-inline-text\">Yes</code> được gọi là thành viên của hội <code class=\"language-inline-text\">enum</code> <code class=\"language-inline-text\">NoYes</code>. Dùng nó như một <code class=\"language-inline-text\">object</code>, chúng ta có thể <em>chấm</em> đến giá trị đó</p>\n<div class=\"gridsome-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">toGerman</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> NoYes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> NoYes<span class=\"token punctuation\">.</span>No<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'Nein'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> NoYes<span class=\"token punctuation\">.</span>Yes<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'Ja'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tất cả thành viên của hội <code class=\"language-inline-text\">enum</code> đều được cấp một <em>thẻ thành viên</em> gồm <code class=\"language-inline-text\">name</code> và <code class=\"language-inline-text\">value</code>. Ở trên chúng ta chỉ đang khai báo phần <code class=\"language-inline-text\">name</code> cho enum, <code class=\"language-inline-text\">value</code> lúc đó sẽ lấy mặc định là số từ 0 đi lên</p>\n<div class=\"gridsome-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> NoYes <span class=\"token punctuation\">{</span>\n  No<span class=\"token punctuation\">,</span>\n  Yes<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// nếu khai báo một cách tường minh hơn</span>\n<span class=\"token keyword\">enum</span> NoYes <span class=\"token punctuation\">{</span>\n  No <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  Yes <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>NoYes<span class=\"token punctuation\">.</span>No<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>NoYes<span class=\"token punctuation\">.</span>Yes<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nếu cà khịa, khai báo như thế này</p>\n<div class=\"gridsome-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Enum <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">D</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">E</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">F</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Đồng nghĩa là các giá trị kế tiếp sẽ tự động tăng lên một, so với giá trị khai báo trước đó</p>\n<div class=\"gridsome-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">[</span>Enum<span class=\"token punctuation\">.</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> Enum<span class=\"token punctuation\">.</span><span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> Enum<span class=\"token punctuation\">.</span><span class=\"token constant\">C</span><span class=\"token punctuation\">,</span> Enum<span class=\"token punctuation\">.</span><span class=\"token constant\">D</span><span class=\"token punctuation\">,</span> Enum<span class=\"token punctuation\">.</span><span class=\"token constant\">E</span><span class=\"token punctuation\">,</span> Enum<span class=\"token punctuation\">.</span><span class=\"token constant\">F</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Về cách đặt tên (<code class=\"language-inline-text\">name</code>) trong <code class=\"language-inline-text\">enum</code>, cũng có vài ba lựa chọn</p>\n<ul>\n<li>Đặt theo kiểu JavaScript, viết hoa hết, <code class=\"language-inline-text\">Number,MAX_VALUE</code></li>\n<li>Đặt theo kiểu symbol, con lạc đà, chữ đầu viết thường, <code class=\"language-inline-text\">Symbol.asyncIterator</code></li>\n<li>Kiểu TypeScript, con lạc đà, chữ đầu viết hoa, <code class=\"language-inline-text\">Number.MaxValue</code></li>\n</ul>\n<p>Tương tự như object, chúng ta có thể truy xuất đến một thành viên của hội bằng cách viết sau</p>\n<div class=\"gridsome-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> HttpRequestField <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'Accept'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Accept-Charset'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Accept-Datetime'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Accept-Encoding'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Accept-Language'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>HttpRequestField<span class=\"token punctuation\">[</span><span class=\"token string\">'Accept-Charset'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Giá trị <code class=\"language-inline-text\">value</code> của enum, không bắt buộc là một number, có thể là một <code class=\"language-inline-text\">string</code></p>\n<div class=\"gridsome-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> NoYes <span class=\"token punctuation\">{</span>\n  No <span class=\"token operator\">=</span> <span class=\"token string\">'No'</span><span class=\"token punctuation\">,</span>\n  Yes <span class=\"token operator\">=</span> <span class=\"token string\">'Yes'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>NoYes<span class=\"token punctuation\">.</span>No<span class=\"token punctuation\">,</span> <span class=\"token string\">'No'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>NoYes<span class=\"token punctuation\">.</span>Yes<span class=\"token punctuation\">,</span> <span class=\"token string\">'Yes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Còn một cách khai báo, ít được sử dụng, là kiểu xăng pha nhớt, các giá trị trong enum có thể là số cũng có thể là chữ</p>\n<div class=\"gridsome-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Enum <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">D</span> <span class=\"token operator\">=</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">E</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">F</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">[</span>Enum<span class=\"token punctuation\">.</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> Enum<span class=\"token punctuation\">.</span><span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> Enum<span class=\"token punctuation\">.</span><span class=\"token constant\">C</span><span class=\"token punctuation\">,</span> Enum<span class=\"token punctuation\">.</span><span class=\"token constant\">D</span><span class=\"token punctuation\">,</span> Enum<span class=\"token punctuation\">.</span><span class=\"token constant\">E</span><span class=\"token punctuation\">,</span> Enum<span class=\"token punctuation\">.</span><span class=\"token constant\">F</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Theo như kinh nghiệm từ các bật tiền bối, sử dụng enum thì nên dùng kiểu giá trị <code class=\"language-inline-text\">string</code></p>\n<div class=\"gridsome-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> NoYes <span class=\"token punctuation\">{</span> No <span class=\"token operator\">=</span> <span class=\"token string\">'NO'</span><span class=\"token punctuation\">,</span> Yes <span class=\"token operator\">=</span> <span class=\"token string\">'YES'</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nếu có <em>log</em> ra chúng ta cũng biết được giá trị chính xác là gì, đỡ hack não ngồi đếm số thứ tự</p>\n<div class=\"gridsome-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>NoYes<span class=\"token punctuation\">.</span>No<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>NoYes<span class=\"token punctuation\">.</span>Yes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Thêm nữa, ràng buộc được luôn kiểu giá trị</p>\n<div class=\"gridsome-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>noYes<span class=\"token operator\">:</span> NoYes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Yes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"trường-hợp-sử-dụng-enum\"><a href=\"#tr%C6%B0%E1%BB%9Dng-h%E1%BB%A3p-s%E1%BB%AD-d%E1%BB%A5ng-enum\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Trường hợp sử dụng enum</h2>\n<h3 id=\"hằng-số-nhiều-giá-trị\"><a href=\"#h%E1%BA%B1ng-s%E1%BB%91-nhi%E1%BB%81u-gi%C3%A1-tr%E1%BB%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>hằng số nhiều giá trị</h3>\n<p>Nếu chúng ta có một <em>mớ</em> các hằng số, có quan hệ họ hàng gần với nhau</p>\n<div class=\"gridsome-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> fatal <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fatal'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> error <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> warn <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'warn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> info <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> debug <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> trace <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'trace'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Có thể dùng enum</p>\n<div class=\"gridsome-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> LogLevel <span class=\"token punctuation\">{</span>\n  fatal <span class=\"token operator\">=</span> <span class=\"token string\">'fatal'</span><span class=\"token punctuation\">,</span>\n  error <span class=\"token operator\">=</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n  warn <span class=\"token operator\">=</span> <span class=\"token string\">'warn'</span><span class=\"token punctuation\">,</span>\n  info <span class=\"token operator\">=</span> <span class=\"token string\">'info'</span><span class=\"token punctuation\">,</span>\n  debug <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span><span class=\"token punctuation\">,</span>\n  trace <span class=\"token operator\">=</span> <span class=\"token string\">'trace'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Lợi ích mang lại: nhóm lại với nhau một cục, TypeScript dễ đàng kiểm tra giúp chúng ta</p>\n<h3 id=\"tường-minh-hơn-boolean\"><a href=\"#t%C6%B0%E1%BB%9Dng-minh-h%C6%A1n-boolean\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tường minh hơn boolean</h3>\n<p>Chúng ta hay dùng boolean để làm <em>cờ</em> bật tắt hoặc đảo ngược giá trị</p>\n<div class=\"gridsome-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">List1</span> <span class=\"token punctuation\">{</span> isOrdered<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nếu dùng enum, nó sẽ rõ nghĩa hơn, nhiều lựa chọn hơn</p>\n<div class=\"gridsome-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> ListKind <span class=\"token punctuation\">{</span> ordered<span class=\"token punctuation\">,</span> unordered <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">List2</span> <span class=\"token punctuation\">{</span>\n  listKind<span class=\"token operator\">:</span> ListKind<span class=\"token punctuation\">;</span>\n  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"string-là-một-hằng-số-đúng-nghĩa-an-toàn-hơn-vì-không-thể-thay-đổi-được-giá-trị\"><a href=\"#string-l%C3%A0-m%E1%BB%99t-h%E1%BA%B1ng-s%E1%BB%91-%C4%91%C3%BAng-ngh%C4%A9a-an-to%C3%A0n-h%C6%A1n-v%C3%AC-kh%C3%B4ng-th%E1%BB%83-thay-%C4%91%E1%BB%95i-%C4%91%C6%B0%E1%BB%A3c-gi%C3%A1-tr%E1%BB%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>String là một hằng số đúng nghĩa, an toàn hơn vì không thể thay đổi được giá trị</h3>\n<p>Ví dụ hàm bên dưới dùng <code class=\"language-inline-text\">const</code></p>\n<div class=\"gridsome-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token constant\">GLOBAL</span> <span class=\"token operator\">=</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">NOT_GLOBAL</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Globalness</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> <span class=\"token constant\">GLOBAL</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">typeof</span> <span class=\"token constant\">NOT_GLOBAL</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createRegExp</span><span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  globalness<span class=\"token operator\">:</span> Globalness <span class=\"token operator\">=</span> <span class=\"token constant\">NOT_GLOBAL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> <span class=\"token string\">'u'</span> <span class=\"token operator\">+</span> globalness<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">createRegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">GLOBAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">abc</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">ug</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>dùng enum tiện hơn</p>\n<div class=\"gridsome-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Globalness <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">GLOBAL</span> <span class=\"token operator\">=</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">NOT_GLOBAL</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createRegExp</span><span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> globalness <span class=\"token operator\">=</span> Globalness<span class=\"token punctuation\">.</span><span class=\"token constant\">NOT_GLOBAL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> <span class=\"token string\">'u'</span> <span class=\"token operator\">+</span> globalness<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">createRegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> Globalness<span class=\"token punctuation\">.</span><span class=\"token constant\">GLOBAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">abc</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">ug</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"enum-lúc-chạy-thì-sẽ-trở-thành-gì\"><a href=\"#enum-l%C3%BAc-ch%E1%BA%A1y-th%C3%AC-s%E1%BA%BD-tr%E1%BB%9F-th%C3%A0nh-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enum lúc chạy thì sẽ trở thành gì?</h2>\n<p>Sau khi TypeScript đã compile, enum sẽ được được chuyển thành javascript object</p>\n<div class=\"gridsome-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> NoYes <span class=\"token punctuation\">{</span>\n  No<span class=\"token punctuation\">,</span>\n  Yes<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> NoYes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">NoYes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  NoYes<span class=\"token punctuation\">[</span>NoYes<span class=\"token punctuation\">[</span><span class=\"token string\">\"No\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"No\"</span><span class=\"token punctuation\">;</span>\n  NoYes<span class=\"token punctuation\">[</span>NoYes<span class=\"token punctuation\">[</span><span class=\"token string\">\"Yes\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Yes\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NoYes <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>NoYes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://2ality.com/2020/01/typescript-enums.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TypeScript enums: How do they work? What can they be used for?</a></p>\n","cover_image":""}},{"node":{"id":"111d6af58ecd6150bbc2a79aac3408e4","title":"Kim chỉ nam mà Vue 3 đã áp dụng khi thiết kế","path":"/2020-01-29-nguyen-tac-thiet-ke-cua-vue-3/","date":"2020-01-29","timeToRead":10,"desc":"Kim chỉ nam (principle) được áp dụng khi cần đưa ra một quyết định kỹ thuật trước vô vàng các lựa chọn. Nếu bạn đã biết được mọi thứ vận hành như thế nào, thì đã đến lúc bạn tiến một bước xa hơn, trả lời cho câu hỏi tại sao","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#bi%E1%BA%BFt-ng%C6%B0%E1%BB%9Di-bi%E1%BA%BFt-ta-tr%C4%83m-tr%E1%BA%ADn-tr%C4%83m-th%E1%BA%AFng\">Biết người, biết ta, trăm trận trăm thắng</a></li>\n<li>\n<p><a href=\"#th%E1%BB%AD-th%C3%A1ch\">Thử thách</a></p>\n<ul>\n<li><a href=\"#kh%E1%BA%A3-n%C4%83ng-ti%E1%BA%BFp-c%E1%BA%ADn-v%C3%A0-m%E1%BB%9F-r%E1%BB%99ng\">Khả năng tiếp cận và mở rộng</a></li>\n<li><a href=\"#typescript-vs-javascript\">Typescript vs Javascript</a></li>\n<li><a href=\"#template-vs-jsx\">Template vs JSX</a></li>\n<li><a href=\"#s%E1%BB%A9c-m%E1%BA%A1nh-v%C3%A0-k%C3%ADch-th%C6%B0%E1%BB%9Bc\">Sức mạnh và Kích thước</a></li>\n</ul>\n</li>\n<li><a href=\"#t%C3%A0i-li%E1%BB%87u-tham-kh%E1%BA%A3o\">Tài liệu tham khảo</a></li>\n</ul>\n<!-- /TOC -->\n<p><em>Một phút quảng cáo</em></p>\n<p>Thời điểm hiện có khoảng <strong>1 triệu người đang sử dụng</strong> <a href=\"https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">add-on Vue.js devtools</a> của Chrome, đây là con số phản ánh có bao nhiêu lập trình viên đang <em>thực sự</em> sử dụng Vue, một con số không hề nhỏ. Còn trên Github, <strong>Vue đã vượt mặt React</strong> để trở thành bộ <a href=\"https://risingstars.js.org/2019/en/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">công cụ phổ biến nhất của Frontend</a>, +31.4k lượt thích so với +22.9k của React, riêng bộ Vue Element Admin cũng có tới +22.7k lượt thích.</p>\n<p>Nhiều thương hiệu và tên tuổi lớn tin tưởng sử dụng Vue, trong đó có Lois Vuitton (Vue + Nuxt), một phần newsfeed của Facebook, Netflix, Adobe, Grammarly, GitLab, Behance <a href=\"https://www.netguru.com/blog/13-top-companies-that-have-trusted-vue.js-examples-of-applications\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Danh sách 13 công ty sử dụng Vue.js</a></p>\n<h2 id=\"biết-người-biết-ta-trăm-trận-trăm-thắng\"><a href=\"#bi%E1%BA%BFt-ng%C6%B0%E1%BB%9Di-bi%E1%BA%BFt-ta-tr%C4%83m-tr%E1%BA%ADn-tr%C4%83m-th%E1%BA%AFng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Biết người, biết ta, trăm trận trăm thắng</h2>\n<p>Ngày đầu ra đời, Vue là một dự án <em>ngoài công ty</em>, làm buổi tối của tác giả, không hề cần cân nhắc lựa chọn nào mới đúng với yêu cầu thực tế, tất cả được dựa trên những gì tôi muốn, các nhân tôi thích như vậy (tôi ở đây là Evan You). Khi bắt đầu được sự đón nhận từ cộng đồng, càng nhiều người sử dụng, bắt đầu có những nhu cầu khác nhau đến từ những đối tượng người sử dụng khác nhau. Với người thiết kế ra framework như tôi và đội ngũ, trách nhiệm đáp ứng nhu cầu này của người sử dụng là điều rất quan trọng, không như những dự án mà phía sau là các tập đoàn công ty lớn, đầu tiên họ sẽ tìm và giải quyết các vấn đề của công ty trước, sau đó đưa một phần source code ra bên ngoài cho cộng đồng sử dụng (open source), với Vue, mục tiêu cao nhất là hiểu được <strong>ai là người dùng Vue, họ dùng nó để làm gì, trong trường hợp nào</strong>.</p>\n<p><strong>Chúng tôi liệt kê ra những đối tượng người sử dụng Vue bao gồm:</strong></p>\n<ul>\n<li>Người mới bắt đầu, biết căn bản HTML/CSS    </li>\n<li>Dân <em>chuyên nghiệp</em> chuyển qua từ jQuery    </li>\n<li>Những người đã từng sử dụng một framework khác như React, Angular và muốn chuyển sang dùng Vue, để xem nó là gì, có ngon lành không</li>\n<li>Lập trình viên backend, có chuyên môn ở những ngôn ngữ khác, muốn tìm một framework frontend gọn nhẹ, có thể dễ dàng tiếp cận</li>\n<li>Những người chịu trách nhiệm kỹ thuật ở một công ty (TA, CTO, Lead), tìm kiếm một giải pháp nền tảng frontend cho công ty</li>\n</ul>\n<p><strong>Các dự án được cân nhắc khi sử dụng Vue gồm có</strong></p>\n<ul>\n<li>Đưa một vài tương tác vào trong một <strong>ứng dụng đã lâu đời</strong> nào đó, nếu viết lại từ đầu là điều không thể    </li>\n<li>Dự án có <strong>vòng đời ngắn</strong>, không cần cân nhắc đến vấn đề bảo trì nâng cấp sau này, coi như viết một lần, để đó xài luôn, muốn đưa nó ra thị trường càng sớm càng tốt (landing page)    </li>\n<li>Dự án <strong>tương đối vừa phải, không quá lớn, không quá nhỏ, độ phức tạp có thể đoán trước được</strong>, có thể đâu đó trong dự án sẽ có chút hơi rối rắm, nhưng không ảnh hưởng và bạn có thể chấp nhận nó.    </li>\n<li>Dự án lớn, bạn sẽ <strong>làm việc trên source code cả năm, với nhiều người cùng làm chung, nhiều người ra vào nhóm.</strong></li>\n</ul>\n<p><em>Bài toán với Vue là làm sao đáp ứng được tất cả những nhu cầu này</em></p>\n<p>Khi thiết kế một framework lớn, đáp ứng được nhiều đối tượng sử dụng khác nhau, nhiều mục đích khác nhau, đương nhiên chúng tôi <strong>chấp nhận đánh đổi</strong></p>\n<p>Đây là những thứ chúng tôi có thể <strong>cho qua</strong>, như một phần phải đánh đổi để thỏa mãn được quá nhiều yêu cầu</p>\n<ul>\n<li>API được tối ưu để dễ sử dụng nhất có thể dẫn đến <strong>các vấn đề khi bảo trì và mở rộng</strong></li>\n<li>Quá nhiều công cụ được dựng sẵn, đôi khi như một hàng rào giới hạn các tình huống sử dụng    </li>\n<li>Càng nhiều yêu cầu bổ sung các tính năng còn thiếu, vô số các tính năng lại không được đụng đến. Những người không có nhu cầu cho các tính năng đó lại chịu chung cục bundle như mọi người khác.    </li>\n</ul>\n<p><img src=\"https://i.imgur.com/vDBDdv3.jpg\" alt=\"Imgur\"></p>\n<h2 id=\"thử-thách\"><a href=\"#th%E1%BB%AD-th%C3%A1ch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thử thách</h2>\n<h3 id=\"khả-năng-tiếp-cận-và-mở-rộng\"><a href=\"#kh%E1%BA%A3-n%C4%83ng-ti%E1%BA%BFp-c%E1%BA%ADn-v%C3%A0-m%E1%BB%9F-r%E1%BB%99ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khả năng tiếp cận và mở rộng</h3>\n<p>Đơn giản chưa được đánh giá đúng. Không thể làm cho mọi thứ thực sự đơn giản mà không phải hy sinh bất cứ điều gì. Đơn giản sẽ giúp nhiều người dễ tiếp cận Vue hơn, khi bạn trong một tổ chức, bạn có muốn nguồn lực giới hạn về con người, không phải công ty nào cũng có thể bỏ ra nhiều tiền để thuê một đội ngũ kỹ thuật cấp cao, trình độ javascript thượng thừa, không có chi phí đào tạo và hướng dẫn người mới. Chúng tôi không muốn bỏ qua tính đơn giản đang có trong Vue, cũng có thời điểm chúng tôi cũng muốn đưa những tính năng cao cấp, phức tạp, khả năng mở rộng cho các dự án lớn. Theo thời gian nhiều API chúng tôi cung cấp cho thấy những điểm khiếm khuyết, nhưng lại không muốn bỏ đi tính đơn giản.</p>\n<p>Làm sao chúng tôi thỏa mãn được cả 2: vừa dễ dùng, vừa tân tiến? Một trong những ví dụ là việc hỗ trợ cả <strong>CDN build và Vue CLI</strong></p>\n<p>Bạn có thể sử dụng Vue như cách bạn dùng jQuery, dùng trực tiếp từ CDN, không cần cài đặt hay cấu hình. Nếu muốn, React bạn cũng thế làm được nhưng sẽ không thực sự đơn giản như với Vue, bạn vẫn thêm một số thư viện như babel để viết JSX. Nếu bạn cần can thiệp phức tạp hơn, sử dụng Vue CLI  </p>\n<p>Câu hỏi tiếp theo: <strong>Options API vs. Composition API</strong></p>\n<p>Khi bắt đầu, chúng tôi nghe rất nhiều phàn nàn, tại sao lại giới thiệu thêm một cách khác để làm cùng một việc? Chúng tôi giới thiệu thêm composition API trong Vue 3 là có lý do của nó.</p>\n<p>Vấn đề của Option API</p>\n<ul>\n<li>Rất trực quan, dễ tiếp cận    </li>\n<li>Khi bắt đầu có những component thực sự lớn, mọi thứ trở nên khó kiểm soát. Trong lúc viết các ứng dụng lớn, component lớn, bạn buộc phải chia các tính năng của component ra ở nhiều chỗ khác nhau, một component có thể có rất rất nhiều logic bên trong</li>\n</ul>\n<p>Với Composition API</p>\n<ul>\n<li>Không cần phải viết lại toàn bộ ứng dụng, bạn có thể tiếp tục sử dụng bộ codebase đang chạy. Nó có thể được sử dụng cùng với option API</li>\n<li>Cung cấp khả năng linh hoạt trong việc quản lý code và tái sử dụng logic, kết hợp các API với nhau</li>\n<li>Hỗ trợ tốt với TypeScript</li>\n</ul>\n<h3 id=\"typescript-vs-javascript\"><a href=\"#typescript-vs-javascript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Typescript vs Javascript</h3>\n<p><strong>Tại sao TypeScript?</strong></p>\n<p>TypeScript có thật sự cần thiết không? Bạn có cần học TypeScript không? Câu trả lời là bạn không cần học TypeScript để có thể viết Vue. Bản thân Vue 3 cũng được viết trên JavaScript. Chúng tôi có hỗ trợ bộ type để thiết đặt làm việc chung với TypeScript</p>\n<p><strong>Lợi ích mang lại</strong></p>\n<ul>\n<li>Các IDE hỗ trợ xuất sắc trọng việc tự động nhắc lệnh và cung cấp thông tin về type. Một function cần bạn truyền vào những gì, nó sẽ trả về những gì, tất cả điều minh bạch    </li>\n<li>Tự tin khi cần refactor code cũ trong một dự án lớn. Nếu như bạn biết dự án đó sẽ tiếp tục kéo dài quá trình phát triển trong vòng 2, 3 năm tới, bạn sẽ tự tin hơn khi nhìn lại code của chính mình viết cách đây một năm về trước. Bạn sẽ biết được mình đã làm cái khỉ khô gì trước đây vậy.</li>\n</ul>\n<p><strong>Đánh đổi</strong></p>\n<ul>\n<li>Tốn thời gian học. Để thực sự trở thành developer thành thạo TypeScript hay bất cứ ngôn ngữ nào khác, bạn cần thời gian học nó một cách bài bản. Ví dụ khi bạn sử dụng các API của Vue, bạn sẽ thấy rất tường minh dễ hiểu, nhưng khi nhìn vào code bên trong của các API này, bạn sẽ không dễ gì hiểu được những gì đang xảy ra.</li>\n<li>Thời gian chạy dự án lâu. Khi viết TypeScript, bạn bắt buộc phải nghĩ bạn sẽ dùng kiểu gì ngay từ đầu, bạn sẽ tốn thời gian để <em>nghĩ</em> những gì mình viết hơi lâu một chút</li>\n</ul>\n<p>Bạn đừng đi vào kết luận dùng TypeScript là đúng hay sai, nó là kiểu lựa chọn sao cho phù hợp với dự án đang thực hiện</p>\n<h3 id=\"template-vs-jsx\"><a href=\"#template-vs-jsx\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Template vs JSX</h3>\n<p><strong>Tại sao chúng tôi lại cung cấp cả 2?</strong></p>\n<p><em>Có nhiều người sẽ sử bảo thích kiểu template, và cũng có người sẽ bảo JSX mới là đỉnh cao.</em></p>\n<p>Lý do chúng tôi cung cấp cả 2 lựa chọn là vì muốn đáp ứng cho nhiều đối tượng người sử dụng khác nhau, những người quen với HTML, CSS sẽ thích template, thay vì phải lập trình lại suy nghĩ theo hướng javascript như JSX. Với template chúng tôi có thể tối ưu hiệu năng ở mức tốt nhất. Trong khi JSX lại cho phép linh động hơn trong lúc viết.</p>\n<p>Xem thêm bài <a href=\"https://luubinhan.github.io/blog/2019-11-24-huong-dan-chon-framework-frontend#c%C6%A1-ch%E1%BA%BF-render\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lựa chọn framework frontend nào trong thời điểm hiện tại</a> có giải thích ưu và nhược của template và JSX</p>\n<blockquote>\n<p>Chúng tôi muốn là một framework với tất cả các lựa chọn khác nhiều điều có, để tiếp cận được những người sử dụng từ nhiều background khác nhau.</p>\n</blockquote>\n<h3 id=\"sức-mạnh-và-kích-thước\"><a href=\"#s%E1%BB%A9c-m%E1%BA%A1nh-v%C3%A0-k%C3%ADch-th%C6%B0%E1%BB%9Bc\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sức mạnh và Kích thước</h3>\n<p>Vấn đề kinh điển của Vue 2, khi bổ sung một tính năng mới, kích thước bundle tăng lên cho tất cả người sử dụng, dù bạn có dùng nó hay không. Ví dụ nếu chúng tôi muốn bổ sung <code class=\"language-inline-text\">&lt;Fragment/></code> cho Vue, nghĩa là kích thước bundle sẽ tăng lên. Không ai thích <strong>trả thêm tiền</strong> cho thứ mình không dùng đến</p>\n<p>Với Vue 3</p>\n<ul>\n<li>Phần lớn các Global APIs và helper được cung cấp dưới dạng ES module export (tree-shakable). Thí dụ như <code class=\"language-inline-text\">keep-alive</code>, <code class=\"language-inline-text\">transition</code>, <code class=\"language-inline-text\">v-model</code>, <code class=\"language-inline-text\">suspense</code> nếu không sử dụng nó sẽ không được <code class=\"language-inline-text\">import</code></li>\n<li>Bộ compiler generate cũng được tích hợp tree-shakable cho template của bạn</li>\n</ul>\n<p><img src=\"https://i.imgur.com/n2pNkX6.jpg\" alt=\"Imgur\"></p>\n<h2 id=\"tài-liệu-tham-khảo\"><a href=\"#t%C3%A0i-li%E1%BB%87u-tham-kh%E1%BA%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tài liệu tham khảo</h2>\n<p><a href=\"https://www.youtube.com/watch?v=WLpLYhnGqPA&#x26;list=WL&#x26;index=2&#x26;t=0s\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Design Principles of Vue 3.0 by Evan You</a></p>\n<p><a href=\"https://docs.google.com/presentation/d/1r0HcS4baHy2c106DsZ4jA7Zt0R9u2MnRmmKIvAVuf1o/edit#slide=id.p\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Slide</a></p>\n","cover_image":""}},{"node":{"id":"4c753d8b0026a81df56b8a546e40a3d1","title":"Viết React Higher-Order Component bằng TypeScript","path":"/2020-01-19-viet-type-cho-hoc-voi-typescript/","date":"2020-01-19","timeToRead":6,"desc":"Cuộc sống đưa đẩy bạn phải viết TypeScript, thì bài này sẽ giúp bạn chút ít khi viết type với HOC","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#enhancer\">Enhancer</a></li>\n<li><a href=\"#injector\">Injector</a></li>\n<li><a href=\"#enhance--inject\">Enhance + Inject</a></li>\n</ul>\n<!-- /TOC -->\n<blockquote>\n<p>Từ React 16.8.0, chúng ta có React Hook, nó giải quyết toàn bộ những trường hợp chúng ta phải sử dụng higher-order component và giảm đáng kể độ phức tạp của việc set type so với HOC. Bạn sử dụng hook trong mọi tình huống có thể. Nếu gơi cảnh <em>ngặt nghèo</em>, anh lead của bạn <em>ko rõ lý do gì</em> bắt xài HOC với TypeScript. Thì bài viết này để giúp biết biết cách set type cho HOC.</p>\n</blockquote>\n<p>HOC trong React là <em>công cụ</em> để chúng ta sử dụng nhiều đoạn code giống nhau trên các component khác nhau. Tuy nhiên khi dùng chung với TypeScript thì <strong>triệu triệu</strong> developer gặp không ít khó khăn khi set type cho nó. Bao gồm luôn mình trong đó.</p>\n<p>Trong phạm vi bài viết này, chúng ta sẽ chi ra 2 loại HOC, 2 cách làm HOC phổ biến hiện nay, tạm gọi là <strong>enhancer</strong> và <strong>injector</strong></p>\n<ul>\n<li><strong>Enhancer</strong>: bọc một component, bổ sung thêm các hàm hoặc prop</li>\n<li><strong>Injector</strong>: <em>bơm/chích</em> thêm prop vào một component</li>\n</ul>\n<p>Để phân biệt rõ hơn, bạn xem tiếp ví dụ bên dưới.</p>\n<h2 id=\"enhancer\"><a href=\"#enhancer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enhancer</h2>\n<p>Chúng ta bắt đầu với Enhancer vì nó dễ viết <code class=\"language-inline-text\">type</code> nhất. Ví dụ cơ bản nhất, bổ sung thêm prop <code class=\"language-inline-text\">loading</code> vào component.</p>\n<p>Không bao gồm <code class=\"language-inline-text\">type</code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withLoading</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">Component</span> <span class=\"token operator\">=></span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">WithLoading</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> loading <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadingSpinner</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>... và với <code class=\"language-inline-text\">type</code></p>\n<div class=\"gridsome-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">WithLoadingProps</span> <span class=\"token punctuation\">{</span>\n  loading<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> withLoading <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">object</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(Component: React.ComponentType&lt;P>) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">WithLoading</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>Component<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token operator\">&amp;</span> WithLoadingProps<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> loading <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadingSpinner</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>props <span class=\"token keyword\">as</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">;</span></code></pre></div>\n<p>Có vài thứ cần giải thích ở đoạn trên, từng bước một nhé</p>\n<div class=\"gridsome-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">WithLoadingProps</span> <span class=\"token punctuation\">{</span>\n  loading<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Đây là <code class=\"language-inline-text\">interface</code> khai báo các prop và <code class=\"language-inline-text\">type</code> sẽ được thêm vào (<strong>enhance</strong>)</p>\n<div class=\"gridsome-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">object</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(Component: React.ComponentType&lt;P>)</span></code></pre></div>\n<p>Chúng ta đang sử dụng một <a href=\"https://www.typescriptlang.org/docs/handbook/generics.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-inline-text\">generic</code></a>, <code class=\"language-inline-text\">P</code> là ký tự dùng để đại diện cho toàn bộ prop của component khi truyền cho HOC. <code class=\"language-inline-text\">React.ComponentType&lt;P></code> là một type viết tắt cho cả hai <code class=\"language-inline-text\">React.FC&lt;P></code> và <code class=\"language-inline-text\">React.ClassComponent&lt;P></code>, nghĩa là một component truyền vào cho HOC này có thể là function cũng được, class component cũng được.</p>\n<div class=\"gridsome-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">WithLoading</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>Component<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token operator\">&amp;</span> WithLoadingProps<span class=\"token operator\">></span></code></pre></div>\n<p>Đây là đoạn chúng ta component sẽ <code class=\"language-inline-text\">return</code> từ HOC, nó chỉ định là component này sẽ bao gồm toàn bộ prop từ component (<code class=\"language-inline-text\">P</code>) và prop của chính thằng HOC (<code class=\"language-inline-text\">WithLoadingProps</code>), nó được <em>cộng dồn</em> bằng toán tử <code class=\"language-inline-text\">&amp;</code></p>\n<div class=\"gridsome-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>Với phiên bản cũ của TypeScript, có thể chúng ta phải <em>ép kiểu</em> <code class=\"language-inline-text\">this.props</code> như thế này <code class=\"language-inline-text\">this.props as WithLoadingProps</code></p>\n</blockquote>\n<p>Cuối cùng chúng ta sử dụng prop <code class=\"language-inline-text\">loading</code> để đặt điều kiện hiển thị cái <em>Spinner</em></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">return</span> loading <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadingSpinner</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props <span class=\"token keyword\">as</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>ép kiểu <code class=\"language-inline-text\">props as P</code> là bắt buộc từ TypeScript 3.2, đây là bug của TypeScript</p>\n</blockquote>\n<p>Với HOC <code class=\"language-inline-text\">withLoading</code> cũng có thể được viết để return một function component thay vì class</p>\n<div class=\"gridsome-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> withLoading <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">object</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(\n  Component: React.ComponentType&lt;P>\n): React.FC&lt;P &amp; WithLoadingProps> => (</span><span class=\"token punctuation\">{</span>\n  loading<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>props\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">: WithLoadingProps) =>\n  loading ? </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadingSpinner</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"> : </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>props <span class=\"token keyword\">as</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">;</span></code></pre></div>\n<p>Chúng ta gặp vấn đề tương tự khi sử dụng rest/spread object, chúng ta chỉ định kiểu return là <code class=\"language-inline-text\">React.FC&lt;P &amp; WithLoadingProps></code>, nhưng chỉ sử dụng <code class=\"language-inline-text\">WithLoadingProps</code> bên trong function component</p>\n<h2 id=\"injector\"><a href=\"#injector\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Injector</h2>\n<p>Kiểu <em>injector</em> HOC sẽ hay gặp hơn, nhưng cũng khó set type hơn, bên cạnh việc <em>chích</em> thêm một số prop vào cho component, trong đa số các trường hợp nó còn xóa những prop đã <em>chích</em> vào khi nó bọc lại, như vậy những thằng từ bên ngoài không thể ghi đè lên. <code class=\"language-inline-text\">connect</code> của react-redux là một ví dụ cho injector HOC. Chúng ta không sử dụng nó, vì quá phức tạp, dùng một ví dụ đơn giản hơn, HOC chích thêm giá trị <code class=\"language-inline-text\">counter</code> và <code class=\"language-inline-text\">callback</code> để tăng giảm giá trị.</p>\n<div class=\"gridsome-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Subtract <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"utility-types\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InjectedCounterProps</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onDecrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MakeCounterState</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> makeCounter <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">InjectedCounterProps</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(\n  Component: React.ComponentType&lt;P>\n) =>\n  class MakeCounter extends React.Component&lt;\n    Subtract&lt;P, InjectedCounterProps>,\n    MakeCounterState\n  > </span><span class=\"token punctuation\">{</span>\n    state<span class=\"token operator\">:</span> MakeCounterState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>prevState <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>prevState <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span>value <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span>\n          <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token keyword\">as</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">onIncrement</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">onDecrement</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>decrement<span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token plain-text\">;</span></code></pre></div>\n<p>Một vài điểm khác nhau</p>\n<div class=\"gridsome-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InjectedCounterProps</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onDecrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Khai báo một interface để chỉ định những prop nào sẽ được <em>chích</em>, đồng thời export luôn để component nào dùng HOC có thể lấy xài.</p>\n<div class=\"gridsome-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> makeCounter<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> InjectedCounterProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./makeCounter\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CounterProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">InjectedCounterProps</span> <span class=\"token punctuation\">{</span>\n  style<span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>CSSProperties<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> CounterProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>onDecrement<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> - </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>onIncrement<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> + </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">makeCounter</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">InjectedCounterProps</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(Component: React.ComponentType&lt;P>)</span></code></pre></div>\n<p>Một lần nữa chúng ta dùng một <code class=\"language-inline-text\">generic</code>, nhưng lần này để đảm bảo component sử dụng HOC có bao gồm các prop đã được chích, nếu không thì báo lỗi.</p>\n<div class=\"gridsome-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MakeCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>Component<span class=\"token operator\">&lt;</span>\n  Subtract<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> InjectedCounterProps<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  MakeCounterState\n<span class=\"token operator\">></span></code></pre></div>\n<p>Component được trả về từ HOC sẽ sử dụng <a href=\"https://github.com/piotrwitek/utility-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-inline-text\">Subtract</code></a>, nó sẽ tách hết những prop đã chích thêm, nghĩa là nếu ai đó set lại từ kết quả trả về từ HOC, nó sẽ lỗi</p>\n<p><img src=\"https://miro.medium.com/max/451/1*xTKe3DWJdC7nAVQnM4bvbg.png\"></p>\n<h2 id=\"enhance--inject\"><a href=\"#enhance--inject\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enhance + Inject</h2>\n<p>Kết hợp cả 2 cách làm này lại, chúng ta sẽ có một component counter cho phép đưa giá trị minimum và maximum</p>\n<div class=\"gridsome-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InjectedCounterProps</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onDecrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MakeCounterProps</span> <span class=\"token punctuation\">{</span>\n  minValue<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  maxValue<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MakeCounterState</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> makeCounter <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">InjectedCounterProps</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(\n  Component: React.ComponentType&lt;P>\n) =>\n  class MakeCounter extends React.Component&lt;\n    Subtract&lt;P, InjectedCounterProps> &amp; MakeCounterProps,\n    MakeCounterState\n  > </span><span class=\"token punctuation\">{</span>\n    state<span class=\"token operator\">:</span> MakeCounterState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>prevState <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span>\n          prevState<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>maxValue\n            <span class=\"token operator\">?</span> prevState<span class=\"token punctuation\">.</span>value\n            <span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>prevState <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span>\n          prevState<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>minValue\n            <span class=\"token operator\">?</span> prevState<span class=\"token punctuation\">.</span>value\n            <span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span>value <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> minValue<span class=\"token punctuation\">,</span> maxValue<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span>\n          <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>props <span class=\"token keyword\">as</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">onIncrement</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">onDecrement</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>decrement<span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token plain-text\">;</span></code></pre></div>\n<p><code class=\"language-inline-text\">Subtract</code> được sử dụng để kết hợp cả những prop của chính component và prop của HOC</p>\n<div class=\"gridsome-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">Subtract<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> InjectedCounterProps<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> MakeCounterProps</code></pre></div>\n<p>Ngoài ra không còn gì thật sự khác nhau giữa 2 cách làm này cần phải nói thêm.</p>\n<p><a href=\"https://medium.com/@jrwebdev/react-higher-order-component-patterns-in-typescript-42278f7590fb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@jrwebdev/react-higher-order-component-patterns-in-typescript-42278f7590fb</a></p>\n","cover_image":""}},{"node":{"id":"8f398894ad7d02d56b6479213f997cd9","title":"Phương pháp test React Component","path":"/2020-01-09-phuong-phap-test-react-component/","date":"2020-01-09","timeToRead":12,"desc":"Bài viết được dịch từ tài liệu chính thức của React","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-c%E1%BB%A5-th%E1%BB%83-setup--teardown\">Cài đặt cụ thể {#setup--teardown}</a></li>\n<li><a href=\"#act-act\"><code class=\"language-inline-text\">act()</code> {#act}</a></li>\n<li><a href=\"#rendering-rendering\">Rendering {#rendering}</a></li>\n<li><a href=\"#fetch-d%E1%BB%AF-li%E1%BB%87u-data-fetching\">Fetch dữ liệu {#data-fetching}</a></li>\n<li><a href=\"#gi%E1%BA%A3-l%E1%BA%ADp-c%C3%A1c-module-mocking-modules\">Giả lập các module {#mocking-modules}</a></li>\n<li><a href=\"#event-events\">Event {#events}</a></li>\n<li><a href=\"#timer-timers\">Timer {#timers}</a></li>\n<li><a href=\"#snapshot-test-snapshot-testing\">Snapshot Test {#snapshot-testing}</a></li>\n<li><a href=\"#multiple-renderer-multiple-renderers\">Multiple Renderer {#multiple-renderers}</a></li>\n<li><a href=\"#c%C3%B2n-thi%E1%BA%BFu-g%C3%AC-%C4%91%C3%B3-something-missing\">Còn thiếu gì đó? {#something-missing}</a></li>\n</ul>\n<!-- /TOC -->\n<p>Một vài cách viết test phổ biến cho component React.</p>\n<blockquote>\n<p>Lưu ý:</p>\n<p>Trang này mặc định bạn đang dùng <a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jest</a> làm test runner. Nếu dùng một test runner khác, bạn cần thay đổi API cho phù hợp, giải pháp sẽ gần như nhau. Đọc thêm chi tiết cách cài đặt môi trường test ở <a href=\"/docs/testing-environments.html\">Môi trường Test</a>.</p>\n</blockquote>\n<p>Trên trang này, chúng tôi sẽ tập chung vào function component. Tuy nhiên, cách để tiếp cận test không phụ thuộc vào phần hiện thực cụ thể, nó cũng sẽ làm việc tốt với class component.</p>\n<ul>\n<li><a href=\"#setup--teardown\">Cài đặt cụ thể</a></li>\n<li><a href=\"#act\"><code class=\"language-inline-text\">act()</code></a></li>\n<li><a href=\"#rendering\">Rendering</a></li>\n<li><a href=\"#data-fetching\">Data Fetching</a></li>\n<li><a href=\"#mocking-modules\">Mocking Modules</a></li>\n<li><a href=\"#events\">Events</a></li>\n<li><a href=\"#timers\">Timers</a></li>\n<li><a href=\"#snapshot-testing\">Snapshot Testing</a></li>\n<li><a href=\"#multiple-renderers\">Multiple Renderers</a></li>\n<li><a href=\"#something-missing\">Something Missing?</a></li>\n</ul>\n<hr>\n<h3 id=\"cài-đặt-cụ-thể-setup--teardown\"><a href=\"#c%C3%A0i-%C4%91%E1%BA%B7t-c%E1%BB%A5-th%E1%BB%83-setup--teardown\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cài đặt cụ thể {#setup--teardown}</h3>\n<p>Trên mỗi test, chúng ta thường muốn render React tree của chúng ta thành DOM element và chèn nó vào <code class=\"language-inline-text\">document</code>. Chỉ như thế chúng ta mới nhận được các sự kiện trên DOM. Khi kết thúc một test, chúng ta muốn \"dọn dẹp\" và <em>gỡ bỏ</em> cây này khỏi DOM.</p>\n<p>Một cách phổ biến để làm nó là sử dụng bộ đôi <code class=\"language-inline-text\">beforeEach</code> và <code class=\"language-inline-text\">afterEach</code>, để chúng luôn chạy một cách độc lập và không ảnh hưởng đến test khác:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// cài đặt một DOM element như là target cho render</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// dọn dẹp lúc thoát</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Bạn có thể sử dụng một cách khác, nhưng hãy nhớ chúng ta muốn chạy việc dọn dẹp ngay cả khi test <em>fail</em>. Nếu không, test có thể trở nên \"bất ổn\", và một test có thể ảnh hưởng đến hoạt động của test khác. Như vậy sẽ rất khó để debug.</p>\n<hr>\n<h3 id=\"act-act\"><a href=\"#act-act\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-inline-text\">act()</code> {#act}</h3>\n<p>Khi viết UI test, công việc như render, sự kiện từ user, hoặc fetch dữ liệu có thể được xem như một \"đơn vị\" tương tác với giao diện người dùng. React cung cấp một hàm trợ giúp <code class=\"language-inline-text\">act()</code> để đảm bảo tất cả mọi cập nhập liên quan đến \"đơn vị\" đã được thực thi và áp dụng đến DOM trước khi chúng ta xác nhận kết quả:</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// render component</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// xác nhận kết quả</span></code></pre></div>\n<p>Nó giúp test chạy giống nhất với những gì user nhận được khi sử dụng ứng dụng. Tất cả những ví dụ bên dưới sử dụng <code class=\"language-inline-text\">act()</code> để đảm bảo điều này.</p>\n<p>Bạn có thể thấy sử dụng <code class=\"language-inline-text\">act()</code> trực tiếp rất rườm rà. Để tránh rườm rà, bạn có thể sử dụng một thư viện như <a href=\"https://testing-library.com/react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Testing Library</a>, các hàm hỗ trợ đã được wrap lại sẵn trong <code class=\"language-inline-text\">act()</code>.</p>\n<blockquote>\n<p>Lưu ý:</p>\n<p>Tên <code class=\"language-inline-text\">act</code> có nguồn gốc từ cách làm <a href=\"http://wiki.c2.com/?ArrangeActAssert\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Arrange-Act-Assert</a>.</p>\n</blockquote>\n<hr>\n<h3 id=\"rendering-rendering\"><a href=\"#rendering-rendering\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Rendering {#rendering}</h3>\n<p>Thường thì, chúng ta muốn test xem một component render đúng hay không với các prop nhận được. Xem xét một component đơn giản sẽ render một thông tin dựa vào prop:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// hello.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hey, stranger</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Chúng ta có thể viết test cho component:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// hello.test.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> Hello <span class=\"token keyword\">from</span> <span class=\"token string\">\"./hello\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// cài đặt một DOM element như là target cho render</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// dọn dẹp lúc thoát</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renders with or without a name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hey, stranger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Jenny<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, Jenny!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Margaret<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, Margaret!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h3 id=\"fetch-dữ-liệu-data-fetching\"><a href=\"#fetch-d%E1%BB%AF-li%E1%BB%87u-data-fetching\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Fetch dữ liệu {#data-fetching}</h3>\n<p>Thay vì gọi APIs thật trong test, chúng ta có thể giả lập các request này bằng dữ liệu giả. Giả lập dữ liệu với dữ liệu \"fake\" để tránh ảnh hưởng đến test khi backend không sử dụng được, và để nó chạy nhanh hơn. Lưu ý: bạn có thể muốn nó chạy danh sách các test con sử dụng framework <a href=\"/docs/testing-environments.html#end-to-end-tests-aka-e2e-tests\">\"end-to-end\"</a> để xem toàn bộ ứng dụng có làm việc với nhau không.</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// user.js</span>\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">,</span> setUser<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchUserData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchUserData</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"loading...\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>details</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>summary</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>summary</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> years old\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      lives in </span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>details</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Bạn có thể viết test cho nó:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// user.test.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> User <span class=\"token keyword\">from</span> <span class=\"token string\">\"./user\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// cài đặt một DOM element như là target cho render</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// dọn dẹp lúc thoát</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renders user data\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> fakeUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Joni Baez\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token string\">\"32\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123, Charming Avenue\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  jest<span class=\"token punctuation\">.</span><span class=\"token function\">spyOn</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">,</span> <span class=\"token string\">\"fetch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockImplementation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">json</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>fakeUser<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// sử dụng một phiên bản async để áp dụng resolved promise</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>123<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"summary\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>fakeUser<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"strong\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>fakeUser<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>fakeUser<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// xóa giả lập để đảm bảo test chạy tách biệt</span>\n  global<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">.</span><span class=\"token function\">mockRestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h3 id=\"giả-lập-các-module-mocking-modules\"><a href=\"#gi%E1%BA%A3-l%E1%BA%ADp-c%C3%A1c-module-mocking-modules\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giả lập các module {#mocking-modules}</h3>\n<p>Một vài module không làm việc tốt trong môi trường test, hoặc không cần thiết cho test đó. Giả lập các module này bằng dummy để dễ dàng test hơn phần code của chúng ta.</p>\n<p>Component <code class=\"language-inline-text\">Contact</code> có nhúng một component third-party <code class=\"language-inline-text\">GoogleMap</code>:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// map.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> LoadScript<span class=\"token punctuation\">,</span> GoogleMap <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-google-maps\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadScript</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script-loader<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">googleMapsApiKey</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>YOUR_API_KEY<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GoogleMap</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example-map<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">center</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">LoadScript</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// contact.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Map <span class=\"token keyword\">from</span> <span class=\"token string\">\"./map\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Contact</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>address</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Contact </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> via</span><span class=\"token punctuation\">{</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"mailto:\"</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          email\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        or on their </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>site<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          website\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">.\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>address</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span></span> <span class=\"token attr-name\">center</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nếu không muốn load component <code class=\"language-inline-text\">GoogleMap</code> trong test của chúng ta, giả lập bằng một dummy component và chạy test:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// contact.test.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> Contact <span class=\"token keyword\">from</span> <span class=\"token string\">\"./contact\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> MockedMap <span class=\"token keyword\">from</span> <span class=\"token string\">\"./map\"</span><span class=\"token punctuation\">;</span>\n\njest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./map\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">DummyMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>map<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">.</span>lat<span class=\"token punctuation\">}</span><span class=\"token plain-text\">:</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">.</span>long<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// cài đặt một DOM element như là target cho render</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// dọn dẹp lúc thoát</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should render contact information\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> center <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">lat</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">long</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Contact</span></span>\n        <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Joni Baez<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">email</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>test@example.com<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">site</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://test.com<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">center</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>center<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n      container\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n    container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[data-testid='email']\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mailto:test@example.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n    container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-testid=\"site\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://test.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-testid=\"map\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"0:0\"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h3 id=\"event-events\"><a href=\"#event-events\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Event {#events}</h3>\n<p>Chúng tôi khuyến nghị dispatch một event DOM thật trên DOM element, và đặt phần xác nhận kết quả. Xem một component <code class=\"language-inline-text\">Toggle</code>:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// toggle.js</span>\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Toggle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousState</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>previousState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        props<span class=\"token punctuation\">.</span><span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>state <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"Turn off\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Turn on\"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Chúng ta có thể viết test cho nó:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// toggle.test.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> Toggle <span class=\"token keyword\">from</span> <span class=\"token string\">\"./toggle\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// cài đặt một DOM element như là target cho render</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// container *phải* được chèn vào document để event chạy đúng.</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// dọn dẹp lúc thoát</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"changes value when clicked\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> onChange <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toggle</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// lấy toàn bộ các element, và trigger một vài sự kiện click</span>\n  <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[data-testid=toggle]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Turn on\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    button<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">bubbles</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Turn off\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      button<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">bubbles</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Turn on\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Các event DOM và thuộc tính được mô tả trong <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a>. Lưu ý bạn phải truyền vào <code class=\"language-inline-text\">{ bubbles: true }</code> trên từng event bạn tạo cho nó để đến React listener vì React tự động truyền các event này đến document.</p>\n<blockquote>\n<p>Lưu ý:</p>\n<p>React Testing Library cung cấp <a href=\"https://testing-library.com/docs/dom-testing-library/api-events\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">một số hàm hỗ trợ</a> cho việc bắn sự kiện.</p>\n</blockquote>\n<hr>\n<h3 id=\"timer-timers\"><a href=\"#timer-timers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Timer {#timers}</h3>\n<p>Code có thể sử dụng hàm liên quan thời gian như <code class=\"language-inline-text\">setTimeout</code> để lên lịch các công việc sẽ thực hiện trong tương lai. Trong ví dụ, một cửa sổ nhiều lựa chọn đợi cho đến khi có lựa chọn, nếu sau 5 giây sẽ không thể chọn:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// card.js</span>\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Card</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> timeoutID <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      props<span class=\"token punctuation\">.</span><span class=\"token function\">onSelect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeoutID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>onSelect<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">choice</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n      <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>choice<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">data-testid</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>choice<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span><span class=\"token function\">onSelect</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>choice<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Chúng ta có thể viết test cho component bằng cách dùng <a href=\"https://jestjs.io/docs/en/timer-mocks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jest's timer mocks</a> và test sự khác nhau của state.</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// card.test.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n\njest<span class=\"token punctuation\">.</span><span class=\"token function\">useFakeTimers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// cài đặt một DOM element như là target cho render</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// dọn dẹp lúc thoát</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should select null after timing out\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> onSelect <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Card</span></span> <span class=\"token attr-name\">onSelect</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onSelect<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// chạy đến lúc 100ms</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    jest<span class=\"token punctuation\">.</span><span class=\"token function\">advanceTimersByTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// và chạy đến lúc 5 giây</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    jest<span class=\"token punctuation\">.</span><span class=\"token function\">advanceTimersByTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should cleanup on being removed\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> onSelect <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Card</span></span> <span class=\"token attr-name\">onSelect</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onSelect<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    jest<span class=\"token punctuation\">.</span><span class=\"token function\">advanceTimersByTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// unmount app</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    jest<span class=\"token punctuation\">.</span><span class=\"token function\">advanceTimersByTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should accept selections\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> onSelect <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Card</span></span> <span class=\"token attr-name\">onSelect</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onSelect<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    container\n      <span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[data-testid='2']\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">bubbles</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Bạn có thể giả lập thời gian trong một test. Ở trên, chúng ta bật lên bằng cách gọi <code class=\"language-inline-text\">jest.useFakeTimers()</code>. Ưu điểm chính của chúng cho ta là test không cần thực sự đợi đến 5 giây để chạy, và bạn cũng không cần thay đổi component để phục vụ việc test.</p>\n<hr>\n<h3 id=\"snapshot-test-snapshot-testing\"><a href=\"#snapshot-test-snapshot-testing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Snapshot Test {#snapshot-testing}</h3>\n<p>Framework như Jest cho chúng ta lưu \"ảnh\" với <a href=\"https://jestjs.io/docs/en/snapshot-testing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-inline-text\">toMatchSnapshot</code> / <code class=\"language-inline-text\">toMatchInlineSnapshot</code></a>. Với chúng, bạn có thể \"lưu\" một kết quả render và đảm bảo một thay đổi có thể làm thay đổi của kết quả snapshot.</p>\n<p>Trong ví dụ, chúng ta render một component và định dạng HTML đã render với thư viện <a href=\"https://www.npmjs.com/package/pretty\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-inline-text\">pretty</code></a>, trước khi lưu nó như một snapshot inline:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// hello.test.js, again</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> pretty <span class=\"token keyword\">from</span> <span class=\"token string\">\"pretty\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> Hello <span class=\"token keyword\">from</span> <span class=\"token string\">\"./hello\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// cài đặt một DOM element như là target cho render</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// dọn dẹp lúc thoát</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should render a greeting\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">pretty</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchInlineSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* ... được tự động điền bởi jest ... */</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Jenny<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">pretty</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchInlineSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* ... được tự động điền bởi jest ... */</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Margaret<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">pretty</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchInlineSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* ... được tự động điền bởi jest ... */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Thường sẽ tốt hơn nếu chỉ rõ kết quả muốn nhận được thay vì snapshot. Những kiểu test này bao gồm phần hiện thực chi tiết để chúng dễ dàng bị fail. Chọn <a href=\"#mocking-modules\">giả lập một vài component con</a> có thể giúp giảm kích thước snapshot và giữ chúng dễ độc lúc review code.</p>\n<hr>\n<h3 id=\"multiple-renderer-multiple-renderers\"><a href=\"#multiple-renderer-multiple-renderers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Multiple Renderer {#multiple-renderers}</h3>\n<p>Trong những tình huống hiếm, bạn có thể chạy một test trên một component sử dụng multiple renderer. Lấy ví dụ, bạn có thể chạy snapshot test trên một component với <code class=\"language-inline-text\">react-test-renderer</code>, bên trong đó nó dùng <code class=\"language-inline-text\">ReactDOM.render</code>trong một child component để render một vài nội dung. Tình huống đó, bạn có thể wrap phần cập nhập với <code class=\"language-inline-text\">act()</code> ứng với từng renderer</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token keyword\">as</span> domAct <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token keyword\">as</span> testAct<span class=\"token punctuation\">,</span> create <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-test-renderer\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">let</span> root<span class=\"token punctuation\">;</span>\n<span class=\"token function\">domAct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">testAct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    root <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h3 id=\"còn-thiếu-gì-đó-something-missing\"><a href=\"#c%C3%B2n-thi%E1%BA%BFu-g%C3%AC-%C4%91%C3%B3-something-missing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Còn thiếu gì đó? {#something-missing}</h3>\n<p>Nếu các tình huống hay gặp không được đề cập ở đây, có thể liên hệ với chúng tôi qua <a href=\"https://github.com/reactjs/reactjs.org/issues\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">issue tracker</a> cho toàn bộ tài liệu của website</p>\n","cover_image":""}},{"node":{"id":"401ee0e90bdab9f7ce4613120efed381","title":"Chỉ dẫn viết Redux sao cho chuẩn","path":"/2020-01-01-chi-dan-viet-redux-sao-cho-chuan/","date":"2020-01-01","timeToRead":15,"desc":"Đây không phải là quan điểm cá nhân, bài viết được dịch thuật từ tài liệu chính thức của Redux","content":"<!-- TOC -->\n<ul>\n<li>\n<p><a href=\"#a-b%E1%BA%AFt-bu%E1%BB%99c\">A. Bắt buộc</a></p>\n<ul>\n<li><a href=\"#ko-mutate-state\">Ko mutate state</a></li>\n<li><a href=\"#reducer-ko-%C4%91%C6%B0%E1%BB%A3c-c%C3%B3-side-effect\">Reducer ko được có side effect</a></li>\n<li><a href=\"#kh%C3%B4ng-%C4%91%C6%B0a-c%C3%A1c-gi%C3%A1-tr%E1%BB%8B-non-serialize-v%C3%A0o-trong-action-v%C3%A0-state\">Không đưa các giá trị Non-Serialize vào trong action và state</a></li>\n<li><a href=\"#ch%E1%BB%89-m%E1%BB%99t-redux-store-cho-app\">Chỉ một Redux store cho app</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#b-c%E1%BB%B1c-k%E1%BB%B3-khuy%E1%BA%BFn-kh%C3%ADch\">B. Cực kỳ khuyến khích</a></p>\n<ul>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-redux-toolkit-%C4%91%E1%BB%83-vi%E1%BA%BFt-redux-logic\">Sử dụng Redux Toolkit để viết Redux logic</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-immer-%C4%91%E1%BB%83-c%E1%BA%ADp-nh%E1%BA%ADp-gi%C3%A1-tr%E1%BB%8B-store\">Sử dụng Immer để cập nhập giá trị store</a></li>\n<li><a href=\"#c%E1%BA%A5u-tr%C3%BAc-file-v%C3%A0-th%C6%B0-m%E1%BB%A5c\">Cấu trúc file và thư mục</a></li>\n<li><a href=\"#%C4%91%C6%B0a-c%C3%A0ng-nhi%E1%BB%81u-logic-v%C3%A0-trong-reducer-c%C3%A0ng-t%E1%BB%91t\">Đưa càng nhiều logic và trong reducer càng tốt</a></li>\n<li><a href=\"#reducer-c%E1%BA%A7n-n%E1%BA%AFm-r%C3%B5-c%E1%BA%A5u-tr%C3%BAc-c%E1%BB%A7a-state\">Reducer cần nắm rõ cấu trúc của state</a></li>\n<li><a href=\"#%C4%91%E1%BA%B7t-t%C3%AAn-state-d%E1%BB%B1a-tr%C3%AAn-d%E1%BB%AF-li%E1%BB%87u-s%E1%BA%BD-l%C6%B0u\">Đặt tên state dựa trên dữ liệu sẽ lưu</a></li>\n<li><a href=\"#xem-reducer-nh%C6%B0-m%E1%BB%99t-c%E1%BB%97-m%C3%A1y-ch%E1%BB%A9a-v%C3%A0-v%E1%BA%ADn-h%C3%A0nh-state\">Xem reducer như một cỗ máy chứa và vận hành state</a></li>\n<li><a href=\"#%C4%91%C6%A1n-gi%E1%BA%A3n-h%C3%B3a-c%C3%A1c-state-ch%E1%BB%93ng-ch%C3%A9oc%C3%B3-quan-h%E1%BB%87-v%E1%BB%9Bi-nhau\">Đơn giản hóa các state chồng chéo/có quan hệ với nhau</a></li>\n<li><a href=\"#c%C3%A1c-action-n%C3%AAn-t%E1%BB%95-ch%E1%BB%A9c-nh%C6%B0-event-kh%C3%B4ng-ph%E1%BA%A3i-setter\">Các action nên tổ chức như event, không phải setter</a></li>\n<li><a href=\"#vi%E1%BA%BFt-t%C3%AAn-action-c%C3%B3-ngh%C4%A9a\">Viết tên action có nghĩa</a></li>\n<li><a href=\"#tr%C3%A1nh-dispatch-c%C3%A1c-action-m%E1%BB%99t-c%C3%A1ch-tu%E1%BA%A7n-t%E1%BB%B1\">Tránh dispatch các action một cách tuần tự</a></li>\n<li><a href=\"#k%E1%BA%BFt-n%E1%BB%91i-c%C3%A0ng-nhi%E1%BB%81u-component-%C4%91%E1%BB%83-%C4%91%E1%BB%8Dc-d%E1%BB%AF-li%E1%BB%87u-trong-store\">Kết nối càng nhiều component để đọc dữ liệu trong store</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1ch-vi%E1%BA%BFt-t%E1%BA%AFt-cho-mapdispatch-khi-d%C3%B9ng-connect\">Sử dụng cách viết tắt cho <code class=\"language-inline-text\">mapDispatch</code> khi dùng <code class=\"language-inline-text\">connect</code></a></li>\n<li><a href=\"#g%E1%BB%8Di-useselector-nhi%E1%BB%81u-l%E1%BA%A7n-trong-function-component\">Gọi <code class=\"language-inline-text\">useSelector</code> nhiều lần trong function component</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-redux-devtools\">Sử dụng Redux DevTools</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#khuy%E1%BA%BFn-kh%C3%ADch\">Khuyến khích</a></p>\n<ul>\n<li><a href=\"#gi%C3%A1-tr%E1%BB%8B-type-c%E1%BB%A7a-action-n%C3%AAn-l%C3%A0-domaineventname\">Giá trị type của action nên là <code class=\"language-inline-text\">domain/eventName</code></a></li>\n<li><a href=\"#vi%E1%BA%BFt-action-s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1ch-%C4%91%E1%BA%B7t-t%C3%AAn-chu%E1%BA%A9n-c%E1%BB%A7a-flux\">Viết action sử dụng cách đặt tên chuẩn của Flux</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-action-creator\">Sử dụng action creator</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-thunk-cho-c%C3%A1c-logic-async\">Sử dụng Thunk cho các logic async</a></li>\n<li><a href=\"#t%C3%A1ch-c%C3%A1c-logic-ph%E1%BB%A9c-t%E1%BA%A1p-ra-kh%E1%BB%8Fi-component\">Tách các logic phức tạp ra khỏi component</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-selector-function-%C4%91%E1%BB%83-%C4%91%E1%BB%8Dc-d%E1%BB%AF-li%E1%BB%87u-trong-store\">Sử dụng selector function để đọc dữ liệu trong store</a></li>\n<li><a href=\"#tr%C3%A1nh-%C4%91%C6%B0a-state-c%E1%BB%A7a-form-v%C3%A0o-trong-redux\">Tránh đưa state của form vào trong redux</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<p>Tài liệu chính thức hướng dẫn viết redux sao cho ngon-sạch, bao gồm những cách làm được đề nghị, kinh nghiệm thực tế và những cách tiếp cận được khuyến khích.</p>\n<p>Cả phần core của Redux và các tài liệu của Redux không hề là chuẩn mực bắt buộc mọi người tuân thủ, có rất nhiều cách để sử dụng Redux, cũng như có rất nhiều cách làm <em>đúng</em> để giải quyết một vấn đề.</p>\n<h2 id=\"a-bắt-buộc\"><a href=\"#a-b%E1%BA%AFt-bu%E1%BB%99c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A. Bắt buộc</h2>\n<h3 id=\"ko-mutate-state\"><a href=\"#ko-mutate-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ko mutate state</h3>\n<p>Chỉnh sửa state là nguyên nhân gây bug thường thấy trong Redux, như không re-render, time-travel trong Redux DevTools ko hoạt động. Tuyệt đối <strong>KO tự chỉnh sửa giá trị của state</strong>, bao gồm cả trong reducer và bất kỳ chỗ nào trong source code, chỉ được phép <strong>thay thế giá trị của state</strong></p>\n<p>Có thể sử dụng những công cụ như <a href=\"https://github.com/leoasis/redux-immutable-state-invariant\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">redux-immutable-state-invariant</a>, <a href=\"https://immerjs.github.io/immer/docs/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">immer</a> để tránh việc vô tình chỉnh sửa state ngoài ý muốn.</p>\n<h3 id=\"reducer-ko-được-có-side-effect\"><a href=\"#reducer-ko-%C4%91%C6%B0%E1%BB%A3c-c%C3%B3-side-effect\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reducer ko được có side effect</h3>\n<p>Các hàm Reducer chỉ phụ thuộc vào <code class=\"language-inline-text\">state</code> và <code class=\"language-inline-text\">action</code>, chỉ tính toán và trả về giá trị mới dựa vào những tham số này. <strong>Không chạy bất kỳ logic bất đồng bộ nào (AJAX, timeout, promise), các giá trị khởi tạo một cách ngẫu nhiên Date.now, Math.random, thay đổi những giá trị bên ngoài reducer</strong></p>\n<h3 id=\"không-đưa-các-giá-trị-non-serialize-vào-trong-action-và-state\"><a href=\"#kh%C3%B4ng-%C4%91%C6%B0a-c%C3%A1c-gi%C3%A1-tr%E1%BB%8B-non-serialize-v%C3%A0o-trong-action-v%C3%A0-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Không đưa các giá trị Non-Serialize vào trong action và state</h3>\n<p><strong>Tránh dùng các giá trị non-serialize như Promise, Symbol, function, class instance vào trong state hoặc dispatch action.</strong> Điều này còn nhằm đảm bảo các công như Redux DevTool chạy đúng</p>\n<h3 id=\"chỉ-một-redux-store-cho-app\"><a href=\"#ch%E1%BB%89-m%E1%BB%99t-redux-store-cho-app\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chỉ một Redux store cho app</h3>\n<p>Với một ứng dụng, <strong>chỉ được sử dụng một Redux store, sử dụng bởi toàn bộ ứng dụng</strong>, khai báo trong file <code class=\"language-inline-text\">store.js</code></p>\n<p>Cũng không có một chỗ nào trong source được import store trực tiếp. Nó phải được truyền vào <code class=\"language-inline-text\">&lt;Provider/></code>, hoặc tham chiếu thông qua middleware như Thunk.</p>\n<h2 id=\"b-cực-kỳ-khuyến-khích\"><a href=\"#b-c%E1%BB%B1c-k%E1%BB%B3-khuy%E1%BA%BFn-kh%C3%ADch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>B. Cực kỳ khuyến khích</h2>\n<h3 id=\"sử-dụng-redux-toolkit-để-viết-redux-logic\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-redux-toolkit-%C4%91%E1%BB%83-vi%E1%BA%BFt-redux-logic\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Redux Toolkit để viết Redux logic</h3>\n<p><a href=\"https://redux.js.org/redux-toolkit/overview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redux Toolkit</a> là bộ công cụ chính thức của chúng tôi (Redux team) để phát triển redux một cách hiệu quả, chuẩn để viết logic redux của chúng tôi.</p>\n<p>Nó bao gồm các hàm để làm việc với các trường hợp phổ biến nhất của Redux, bao gồm cài đặt store, khai báo reducer, các thư viện được sử dụng rộng rãi trong Redux như Redux Thunk, Reselect để viết các selector function.</p>\n<h3 id=\"sử-dụng-immer-để-cập-nhập-giá-trị-store\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-immer-%C4%91%E1%BB%83-c%E1%BA%ADp-nh%E1%BA%ADp-gi%C3%A1-tr%E1%BB%8B-store\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Immer để cập nhập giá trị store</h3>\n<p>Viết update cho store đôi khi rất mệt mỏi, có thể sử dụng thêm công cụ hỗ trợ <a href=\"https://immerjs.github.io/immer/docs/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">immerjs</a>.</p>\n<h3 id=\"cấu-trúc-file-và-thư-mục\"><a href=\"#c%E1%BA%A5u-tr%C3%BAc-file-v%C3%A0-th%C6%B0-m%E1%BB%A5c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cấu trúc file và thư mục</h3>\n<p>Về cơ bản Redux <em>không quan tâm cách bạn tổ chức file và thư mục</em>. Tuy nhiên, trong thực tế việc đặt các logic gần nhau giúp việc cập nhập code nhanh hơn.</p>\n<p>Khuyến khích sử dụng cách tiếp cận \"feature folder\" hoặc <a href=\"https://github.com/erikras/ducks-modular-redux\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cách làm ducks</a> (tất cả những logic cho feature nằm trong một file duy nhất)</p>\n<p>Một cấu trúc thư mục cơ bản sẽ gồm</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">-/src\n--/index.tsx\n--/app\n---/store.ts\n---/rootReducer.ts\n---/App.tsx\n--/common\n--/features\n---/todos\n----/todosSlice.ts\n----/Todos.tsx</code></pre></div>\n<h3 id=\"đưa-càng-nhiều-logic-và-trong-reducer-càng-tốt\"><a href=\"#%C4%91%C6%B0a-c%C3%A0ng-nhi%E1%BB%81u-logic-v%C3%A0-trong-reducer-c%C3%A0ng-t%E1%BB%91t\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đưa càng nhiều logic và trong reducer càng tốt</h3>\n<p>Nếu có thể, cố gắng đưa càng nhiều logic hoặc tính toán để có một state mới vào trong reducer càng tốt, không nên đưa vào chỗ xử lý tiền dữ liệu như các function handler click. Việc này giúp logic dễ test hơn, tránh lỗi.</p>\n<p>Redux không thực sự quan tâm giá trị mới của state được tính toán bên trong reducer hay trong action creation. Ví dụ như Todo App, việc <em>toggle todo</em> sẽ cập nhập lại mảng <code class=\"language-inline-text\">todos</code> trong store. Có thể tính toán mảng <code class=\"language-inline-text\">todos</code> mới ở cả action và reducer</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Click handler:</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onTodoClicked</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"todos/toggleTodo\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// tính toán ở Reducer:</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"todos/toggleTodo\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> todo<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>todo<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Tính toán ở action creation:</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onTodoClicked</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">id</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newTodos <span class=\"token operator\">=</span> todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> todo\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>todo<span class=\"token punctuation\">,</span> id <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'todos/toggleTodo'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">todos</span><span class=\"token operator\">:</span> newTodos <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Reducer:</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"todos/toggleTodo\"</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Khuyến khích làm việc này ở reducer vì những nguyên nhân sau</p>\n<ul>\n<li>Test ở Reducer sẽ dễ hơn vì nó là pure function, chỉ cần gọi <code class=\"language-inline-text\">const result = reducer(testState, action)</code> và đưa vào kết quả bạn expect.</li>\n<li>Thay đổi giá trị state luôn tuân theo quy định, không chỉnh sửa-chỉ thay thế. Rõ ràng là việc này sẽ trực quan hơn trong reducer, những nếu ngoài reducer, chúng ta dễ vô tình chỉnh sửa ngoài ý muốn</li>\n<li>Time-travel debug cho phép chúng ta <strong>undo</strong> một dispatch action, rồi <strong>redo</strong> thậm chí thay thế bằng một action khác. Debug sẽ dễ hơn nếu chúng ta đưa logic đó vào reducer</li>\n<li>Khi áp dụng nguyên tắc này, chúng biết được khi cần thay đổi, và nơi state bị thay đổi chắc chắn là trong reducer chứ không đâu khác.</li>\n</ul>\n<p>Có những ngoại lệ có thể tính toán trước, như khởi tạo một ID, nhưng nên tránh là tốt nhất.</p>\n<h3 id=\"reducer-cần-nắm-rõ-cấu-trúc-của-state\"><a href=\"#reducer-c%E1%BA%A7n-n%E1%BA%AFm-r%C3%B5-c%E1%BA%A5u-tr%C3%BAc-c%E1%BB%A7a-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reducer cần nắm rõ cấu trúc của state</h3>\n<p>Các reducer do bạn viết, khi trả về một giá trị đã tính toán của state, phải viết cụ thể là trả về giá trị gì, tránh sử dụng <em>spread/blind return</em> như sau <code class=\"language-inline-text\">return action.payload</code> (blind return), <code class=\"language-inline-text\">return {...state, ...action.payload}</code> (spread return). Vì như vậy, nó sẽ phụ thuộc giá trị truyền vào lúc dispatch action phải đúng với cấu trúc ban đầu. Nếu vô tình dữ liệu này không đúng cấu trúc sẽ có bug.</p>\n<h3 id=\"đặt-tên-state-dựa-trên-dữ-liệu-sẽ-lưu\"><a href=\"#%C4%91%E1%BA%B7t-t%C3%AAn-state-d%E1%BB%B1a-tr%C3%AAn-d%E1%BB%AF-li%E1%BB%87u-s%E1%BA%BD-l%C6%B0u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đặt tên state dựa trên dữ liệu sẽ lưu</h3>\n<p>Object truyền vào cho <code class=\"language-inline-text\">combineReducers</code> sẽ là tên key trả về trong state. Tránh sử dụng từ <code class=\"language-inline-text\">reducer</code> ,</p>\n<p>Ko nên có một object state như thế này</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">usersReducer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">postsReducer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nên</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">users</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">posts</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"xem-reducer-như-một-cỗ-máy-chứa-và-vận-hành-state\"><a href=\"#xem-reducer-nh%C6%B0-m%E1%BB%99t-c%E1%BB%97-m%C3%A1y-ch%E1%BB%A9a-v%C3%A0-v%E1%BA%ADn-h%C3%A0nh-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xem reducer như một cỗ máy chứa và vận hành state</h3>\n<p>Rất nhiều reducer của redux được viết một cách không ràng buộc như thế này, kiểm tra action, tính toán giá trị state mới mà không hề phụ thuộc tới state hiện tại. Có những trường hợp giá trị của một state phụ thuộc vào giá trị state khác, nếu không kiểm tra trước khi cập nhập, có thể dẫn đến bug</p>\n<h3 id=\"đơn-giản-hóa-các-state-chồng-chéocó-quan-hệ-với-nhau\"><a href=\"#%C4%91%C6%A1n-gi%E1%BA%A3n-h%C3%B3a-c%C3%A1c-state-ch%E1%BB%93ng-ch%C3%A9oc%C3%B3-quan-h%E1%BB%87-v%E1%BB%9Bi-nhau\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đơn giản hóa các state chồng chéo/có quan hệ với nhau</h3>\n<p>Rất nhiều ứng dụng cần cache các dữ liệu phức tạp trong store, dữ liệu thường có quan hệ chồng chéo trong API và phụ thuộc vào nhiều entities khác nhau (như quan hệ giữa dữ liệu Users, Posts, Comments)</p>\n<p>Khuyến khích nên lưu dữ liệu trong store ở dạng <a href=\"https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">căn bản nhất</a>. Như vậy khi nhìn vào có thể dễ dàng biết được dựa vào ID của chúng</p>\n<h3 id=\"các-action-nên-tổ-chức-như-event-không-phải-setter\"><a href=\"#c%C3%A1c-action-n%C3%AAn-t%E1%BB%95-ch%E1%BB%A9c-nh%C6%B0-event-kh%C3%B4ng-ph%E1%BA%A3i-setter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các action nên tổ chức như event, không phải setter</h3>\n<p>Chúng ta có thể truyền bất cứ giá trị gì cho <code class=\"language-inline-text\">action.type</code>, thí dụ như <code class=\"language-inline-text\">\"users/update\"</code>, <code class=\"language-inline-text\">\"users/updated\"</code>, <code class=\"language-inline-text\">\"upload/progress\"</code>, <code class=\"language-inline-text\">\"users/setUserName\"</code>. Không sai nhưng khuyến khích nên diễn tả các <code class=\"language-inline-text\">action.type</code> này như một event, hơn là các <code class=\"language-inline-text\">setter</code> như vậy. Nếu diễn đạt theo kiểu setter như vậy thường dẫn tới quá nhiều action type, quá nhiều dispatcher</p>\n<h3 id=\"viết-tên-action-có-nghĩa\"><a href=\"#vi%E1%BA%BFt-t%C3%AAn-action-c%C3%B3-ngh%C4%A9a\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Viết tên action có nghĩa</h3>\n<p><code class=\"language-inline-text\">action.type</code> phục vụ 2 mục đích</p>\n<ul>\n<li>reducer sẽ kiểm tra giá trị type để tính toán</li>\n<li>hiển thị trên công cụ redux devtool để chúng ta theo dõi</li>\n</ul>\n<p>Tiếp cận action như cơ chế <strong>event</strong>, tên này này không cần ràng buộc với một trường cụ thể nào trong store, đặt tên sao để khi đọc vào chúng ta có thể hiểu được chuyện gì đang diễn ra trên ứng dụng (thông qua công cụ redux devtool). Tránh những cái tên quá chung chung như <code class=\"language-inline-text\">SET_DATA</code> hay <code class=\"language-inline-text\">UPDATE_STORE</code>.</p>\n<h3 id=\"tránh-dispatch-các-action-một-cách-tuần-tự\"><a href=\"#tr%C3%A1nh-dispatch-c%C3%A1c-action-m%E1%BB%99t-c%C3%A1ch-tu%E1%BA%A7n-t%E1%BB%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tránh dispatch các action một cách tuần tự</h3>\n<p>Tránh <code class=\"language-inline-text\">dispatch</code> nhiều action cùng lúc để thực hiện một tác vụ nào đó. Không sai, nhưng kết quả là việc update UI rất tiêu tốn công sức của trình duyệt, đôi khi có những state không truy xuất được ở một vài logic.</p>\n<h3 id=\"kết-nối-càng-nhiều-component-để-đọc-dữ-liệu-trong-store\"><a href=\"#k%E1%BA%BFt-n%E1%BB%91i-c%C3%A0ng-nhi%E1%BB%81u-component-%C4%91%E1%BB%83-%C4%91%E1%BB%8Dc-d%E1%BB%AF-li%E1%BB%87u-trong-store\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết nối càng nhiều component để đọc dữ liệu trong store</h3>\n<p>Càng nhiều component kết nối vào store sẽ giúp hiệu năng update UI cải thiện, do biết được component nào cần và không cần update.</p>\n<p>Có thể kết nối bằng <code class=\"language-inline-text\">connect</code> hoặc <code class=\"language-inline-text\">useSelector</code></p>\n<h3 id=\"sử-dụng-cách-viết-tắt-cho-mapdispatch-khi-dùng-connect\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1ch-vi%E1%BA%BFt-t%E1%BA%AFt-cho-mapdispatch-khi-d%C3%B9ng-connect\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng cách viết tắt cho <code class=\"language-inline-text\">mapDispatch</code> khi dùng <code class=\"language-inline-text\">connect</code></h3>\n<p><a href=\"https://react-redux.js.org/using-react-redux/connect-mapdispatch#defining-mapdispatchtoprops-as-an-object\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sử dụng cách viết tắt cho <code class=\"language-inline-text\">mapDispatch</code> khi dùng <code class=\"language-inline-text\">connect</code></a> nhằm đơn giản hóa code. Gần như chưa bao giờ cần phải viết <code class=\"language-inline-text\">mapDispatch</code> như một function.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">,</span> decrement<span class=\"token punctuation\">,</span> reset<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./counterActions\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Redux tự động dùng dispatch</span>\n<span class=\"token comment\">// khi bạn truyền vào là một object</span>\n<span class=\"token keyword\">const</span> actionCreators <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  increment<span class=\"token punctuation\">,</span>\n  decrement<span class=\"token punctuation\">,</span>\n  reset\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapState<span class=\"token punctuation\">,</span> actionCreators<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// or</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  mapState<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> increment<span class=\"token punctuation\">,</span> decrement<span class=\"token punctuation\">,</span> reset <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"gọi-useselector-nhiều-lần-trong-function-component\"><a href=\"#g%E1%BB%8Di-useselector-nhi%E1%BB%81u-l%E1%BA%A7n-trong-function-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gọi <code class=\"language-inline-text\">useSelector</code> nhiều lần trong function component</h3>\n<p>Khi sử dụng hook <code class=\"language-inline-text\">useSelector</code>, khuyến khích dùng nhiều lần để lấy nhiều phần dữ liệu khác nhau, thay vì lấy một cục dữ liệu lớn đã bao gồm các dữ liệu nhỏ hơn bên trong. Không giống với <code class=\"language-inline-text\">mapState</code>, <code class=\"language-inline-text\">useSelector</code> không yêu cầu trả về object, sử dụng selector để lấy những đơn vị dữ liệu nhỏ hơn bên trong store sẽ giúp ít cho việc render nhiều lần.</p>\n<h3 id=\"sử-dụng-redux-devtools\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-redux-devtools\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Redux DevTools</h3>\n<p>Học cách cài đặt và sử dụng thuần thục <a href=\"https://github.com/zalmoxisus/redux-devtools-extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redux DevTool</a>, nó sẽ cho phép chúng ta</p>\n<ul>\n<li>Xem lịch sử dispatch action</li>\n<li>Nội dung của từng action</li>\n<li>State cuối cùng sau khi action được dispatch</li>\n<li>Sự khác nhau của state trước và sau một action</li>\n<li>Action đã được dispatch từ đâu</li>\n</ul>\n<h2 id=\"khuyến-khích\"><a href=\"#khuy%E1%BA%BFn-kh%C3%ADch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khuyến khích</h2>\n<h3 id=\"giá-trị-type-của-action-nên-là-domaineventname\"><a href=\"#gi%C3%A1-tr%E1%BB%8B-type-c%E1%BB%A7a-action-n%C3%AAn-l%C3%A0-domaineventname\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giá trị type của action nên là <code class=\"language-inline-text\">domain/eventName</code></h3>\n<p>Trước đây tài liệu Redux có đề cập và sử dụng tên như thế này <code class=\"language-inline-text\">SCREAMING_SNAKE_CASE</code> để khai báo action type, ví dụ như <code class=\"language-inline-text\">ADD_TODO</code> và <code class=\"language-inline-text\">INCREMENT</code>, cách này sẽ khớp với cách đặt biến hằng số trong đa số các ngôn ngữ lập trình. Tuy nhiên viết hoa hết như vậy hơi khó đọc.</p>\n<p>Cộng đồng lập trình viên áp dụng một cách đặt tên khác, bắt đầu là <code class=\"language-inline-text\">feature</code> hoặc <code class=\"language-inline-text\">domain</code> nơi action này thuộc về và theo sau là tên của kiểu action. Ngoài ra còn có nhiều cách khác như <code class=\"language-inline-text\">\"[Domain] Action Type\"</code> hay <code class=\"language-inline-text\">\"[Login Page] Login\"</code>, <code class=\"language-inline-text\">\"domain:action\"</code></p>\n<p>Hàm <code class=\"language-inline-text\">createSlice</code> trong Redux Toolkit tạo ra một action type như sau <code class=\"language-inline-text\">\"domain/action\"</code>, ví dụ <code class=\"language-inline-text\">todos/addTodo</code>. Chúng tôi khuyến khích sử dụng <code class=\"language-inline-text\">domain/action</code> cho dễ đọc.</p>\n<h3 id=\"viết-action-sử-dụng-cách-đặt-tên-chuẩn-của-flux\"><a href=\"#vi%E1%BA%BFt-action-s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1ch-%C4%91%E1%BA%B7t-t%C3%AAn-chu%E1%BA%A9n-c%E1%BB%A7a-flux\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Viết action sử dụng cách đặt tên chuẩn của Flux</h3>\n<p><em>Flux Architechure</em> chỉ yêu cầu mỗi action object phải có trường <code class=\"language-inline-text\">type</code> và không có bất cứ ràng buộc nào khác, từ cách đặt tên cũng như trường nào nên đưa vào. Để đảm bảo nhất quán, Andrew Clark viết ra một bộ <a href=\"https://github.com/redux-utilities/flux-standard-action\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flux Standard Actions</a> để chuẩn hóa. Tóm tắt lại bộ nội dung này, action nên là</p>\n<ul>\n<li>Luôn đặt dữ liệu trong trường <code class=\"language-inline-text\">payload</code></li>\n<li>Thêm trường <code class=\"language-inline-text\">meta</code> cho các thông tin khác</li>\n<li>Thêm trường <code class=\"language-inline-text\">error</code> cho các action báo lỗi</li>\n</ul>\n<h3 id=\"sử-dụng-action-creator\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-action-creator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng action creator</h3>\n<p>Thuật ngữ <strong>Action creator</strong> có nguồn gốc từ cách tiếp cận của <em>Flux Architechure</em>, action creator <strong>không bắt buộc</strong>, các component và logic có thể gọi trực tiếp <code class=\"language-inline-text\">dispatch({ type: \"some/action\"})</code> (action object được truyền dạng inline).</p>\n<p>Tuy nhiên, sử dụng action creator đảm bảo tính nhất quán, đặc biệt phù hợp khi cần chuẩn bị một dữ liệu hoặc logic cho action (thí dụ như khởi tạo một giá trị ID không trùng lặp).</p>\n<p><strong>Khuyến khích sử dụng action creator</strong>. Tuy nhiên, thay vì viết tay, bạn nên sử dụng hàm <code class=\"language-inline-text\">createSlice</code> trong bộ Redux Toolkit, nó sẽ giúp tạo một action creator và action type tự động</p>\n<h3 id=\"sử-dụng-thunk-cho-các-logic-async\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-thunk-cho-c%C3%A1c-logic-async\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Thunk cho các logic async</h3>\n<p>Redux được thiết kế để có thể mở rộng và middleware API được tạo ra cho phép các dạng async logic khác khau có thể cài cắm vào trong Redux store. Bằng cách đó, bạn không cần bắt buộc phải học các thư viện cụ thể nào đó như RxJS nếu không phù hợp với nhu cầu thực tế.</p>\n<p>Kết quả cả khá nhiều middleware addon được tạo ra cho Redux và tạo ra không ít bối rối cũng như câu hỏi về nên sử dụng middleware nào.</p>\n<p>Chúng tôi thực sự khuyến khích sử dụng <a href=\"https://github.com/reduxjs/redux-thunk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redux Thunk</a> như mặc định, nó có thể giải quyết hầu hết các trường hợp. Đồng thời sử dụng cú pháp <code class=\"language-inline-text\">async/await</code> trong thunk rất dễ đọc.</p>\n<p>Nếu bạn có như cầu sử dụng một workflow async thực sự phức tạp như cancel, debouncing, chạy logic khau khi action được dispatch, <strong>thread chạy ngầm</strong> có thể cân nhắc sử dụng các middleware như Redux-Saga và Redux-Observable</p>\n<h3 id=\"tách-các-logic-phức-tạp-ra-khỏi-component\"><a href=\"#t%C3%A1ch-c%C3%A1c-logic-ph%E1%BB%A9c-t%E1%BA%A1p-ra-kh%E1%BB%8Fi-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tách các logic phức tạp ra khỏi component</h3>\n<p>Chúng tôi khuyến nghị nên đưa các logic phức tạp ra khỏi component, theo tư tưởng của cách làm <em>container/presentational</em>, càng nhiều component chỉ nhận prop và hiển thị UI càng tốt, đồng thời khi phải làm việc với các logic bất tuần tự (async) bên trong component rất khó để bảo trì sau này.</p>\n<p>Tuy nhiên, sử dụng React hook có vẻ như dễ dàng hơn trong việc quản lý các logic kiểu như fetch dữ liệu trực tiếp trong component và có thể thay thế bằng thunk trong vài trường hợp</p>\n<h3 id=\"sử-dụng-selector-function-để-đọc-dữ-liệu-trong-store\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-selector-function-%C4%91%E1%BB%83-%C4%91%E1%BB%8Dc-d%E1%BB%AF-li%E1%BB%87u-trong-store\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng selector function để đọc dữ liệu trong store</h3>\n<p>Selector function là công cụ mạnh mẽ đề đọc các giá trị trong store. Những thư viện như Reselect cho tạo và lưu trữ các selector function, chỉ tính toán lại kết quả nếu cần thiết, là một đặc tính quan trọng để cải thiện hiệu năng.</p>\n<p>Khuyến khích sử dụng các selector function và lưu lại kết quả đọc được từ store bất cứ khi nào có thể, tạo các selector function này bằng Reselect</p>\n<p>Tuy nhiên, cũng không nhất thiết <strong>bắt buộc phải</strong> viết selector function cho tất cả các giá trị trong state. Cân nhắc các trường hay cần truy xuất và cập nhập cũng như lợi ích mang lại khi sử dụng các selector function</p>\n<h3 id=\"tránh-đưa-state-của-form-vào-trong-redux\"><a href=\"#tr%C3%A1nh-%C4%91%C6%B0a-state-c%E1%BB%A7a-form-v%C3%A0o-trong-redux\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tránh đưa state của form vào trong redux</h3>\n<p>Hầu như như state của form ko nên nằm trong Redux. Dữ liệu này không thực sự phải <em>global</em>, ko cần được cache, không được sử dụng bởi nhiều component cùng lúc. Connect form vào redux cũng dẫn đến chuyện dispatch action trên tất cả các sự kiện thay đổi trong form, nó sẽ làm hiệu năng giảm trầm trọng và không mang lại nhiều hiệu quả.</p>\n<p>Chỉ nên dữ state của form trong component và đưa toàn bộ giá trị lên store sau khi user submit form.</p>\n<p>Chỉ duy nhất trường hợp đưa form state vào redux là hợp lý khi viết component như WYSIWYG với tính năng live preview trên các thuộc tính. Còn lại đa phần không cần thiết.</p>\n<p><a href=\"https://redux.js.org/style-guide/style-guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://redux.js.org/style-guide/style-guide/</a></p>\n","cover_image":""}},{"node":{"id":"be6c10c63ff46b0bb93b57a071afe476","title":"Giải bài toán cộng 2 số bằng javascript","path":"/2019-11-29-giai-bai-toan-cong-so-trong-javascript/","date":"2019-11-29","timeToRead":4,"desc":"Một đề bài cũng không mới, thông qua đó chúng ta sẽ biết thêm tí về cách sử dụng object sao cho hiệu quả","content":"<p>Đề bài: viết một hàm, nhận 2 tham số đầu vào, tham số thứ nhất là một mảng số, tham số thứ 2 là một số bất kỳ. Yêu cầu trả về một mảng gồm 2 phần tử trong mảng ban đầu và 2 phần tử này cộng lại bằng tham số thứ 2.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {number[]} nums\n * @param {number} total\n * @return {number[]}\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> total</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Solution here</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ví dụ sử dụng hàm này bằng các input như bên dưới</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">input: nums = [1, 2, 3], total = 4\noutput: [1, 3]\n\ninput: nums = [3, 9, 12, 20], total = 21\noutput: [9, 12]</code></pre></div>\n<p>Chúng ta coi như mảng <code class=\"language-inline-text\">nums</code> truyền vào luôn là mảng số, ko cần kiểm trả kiểu giá trị của phần tử trong mảng, <code class=\"language-inline-text\">total</code> luôn là một con số mà 2 phần tử trong có thể cộng lại bằng. Tất là không có trường hợp ko tìm thấy cặp phần tử nào thỏa yêu cầu</p>\n<h2 id=\"phương-pháp-vét-cạn-không-bỏ-sót-em-nào\"><a href=\"#ph%C6%B0%C6%A1ng-ph%C3%A1p-v%C3%A9t-c%E1%BA%A1n-kh%C3%B4ng-b%E1%BB%8F-s%C3%B3t-em-n%C3%A0o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phương pháp: Vét cạn, không bỏ sót em nào</h2>\n<p>Lấy phần tử đầu tiên của <code class=\"language-inline-text\">nums</code>, duyệt qua toàn bộ các phần tử còn lại, xem có thằng nào cộng lại bằng <code class=\"language-inline-text\">total</code> không. Cứ làm điều tương tự với từng phần tử một trong mảng. </p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {number[]} nums\n * @param {number} total\n * @return {number[]}\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> total</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> total<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 3]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [9, 12]</span></code></pre></div>\n<p>Có 2 chỗ đáng quan tâm nếu chọn cách này</p>\n<ol>\n<li>Tại sao vòng lặp <strong>phải</strong> kết thúc ở <code class=\"language-inline-text\">i &lt; nums.length - 1</code> ?</li>\n<li>Tại sao vòng lặp bên trong nữa bắt đầu ở vị trí <code class=\"language-inline-text\">j = i +1</code> ?</li>\n</ol>\n<p>Cũng như cái tên của nó <strong>Vét cạn</strong>, chúng ta không bỏ sót trường hợp nào cả, ngay cả những trường hợp <strong>có thể bỏ qua</strong>. Độ khó của 2 vòng lặp lồng nhau như vậy là n mũ n<sub>2</sub>, nói cách khác, thời gian chạy của vòng lặp này tỉ lệ với bình phương số lượng các phần tử</p>\n<p>Giả dụ bạn có 100000 phần tử, thì số lần chạy của vòng lặp là 4999950000</p>\n<p>Nếu thích thì mấy bạn copy đoạn code này chạy thử</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bigArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbigArr<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\nbigArr<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> total <span class=\"token operator\">=</span> <span class=\"token number\">19</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> total</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> iterations <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> startTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      iterations<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> total<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Iterations: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>iterations<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Time: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">ms</span><span class=\"token template-punctuation string\">`</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>bigArr<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>5 triệu lần chạy này sẽ tốn khoảng 20 giây trên máy mình</p>\n<h2 id=\"phương-pháp-bảng-băm-sử-dụng-object-của-javascript\"><a href=\"#ph%C6%B0%C6%A1ng-ph%C3%A1p-b%E1%BA%A3ng-b%C4%83m-s%E1%BB%AD-d%E1%BB%A5ng-object-c%E1%BB%A7a-javascript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phương pháp bảng băm: sử dụng Object của javascript</h2>\n<p>Chúng ta có thể làm tốt hơn cách trên. Thay vì đặt vòng lặp lồng nhau, chạy qua các phần tử của <code class=\"language-inline-text\">nums</code> một lượt, đánh dấu các phần tử đã kiểm tra, bỏ vào làm key cho một object, kiểm tra phần tử trong <code class=\"language-inline-text\">nums</code> có tồn tại trong object hay chưa</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> total</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// object chứa những giá trị đã duyệt qua</span>\n  <span class=\"token keyword\">const</span> previousValues <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// giá trị cần tìm</span>\n    <span class=\"token keyword\">const</span> complement <span class=\"token operator\">=</span> total <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// giá trị cần tìm có nằm ở lần duyệt trước đó</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>previousValues<span class=\"token punctuation\">[</span>complement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>complement<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// lưu lại giá trị này vào object đã duyệt</span>\n    previousValues<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 3]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [9, 12]</span></code></pre></div>\n<p>Chúng ta chỉ còn một vòng lặp, vòng lặp thứ 2 bị thay thế bởi <code class=\"language-inline-text\">previousValues[complement]</code></p>\n<p>Đo lại tốc độ với cách làm này</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bigArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbigArr<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\nbigArr<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> total <span class=\"token operator\">=</span> <span class=\"token number\">19</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> total</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> iterations <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> startTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> previousValues <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    iterations<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> complement <span class=\"token operator\">=</span> total <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>previousValues<span class=\"token punctuation\">[</span>complement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Iterations: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>iterations<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Time: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">ms</span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>complement<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    previousValues<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>bigArr<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Iterations: 100000 Time: 4ms</span></code></pre></div>\n<p>Không có chi là miễn phí, chúng ta tiết kiệm được thời gian chạy, nhưng phải bỏ ra một vùng nhớ để lưu object <code class=\"language-inline-text\">previousValues</code>, nếu lưu khoảng 1 triệu phần tử, dung lượng này cũng không nhỏ, khoản đâu đó 10MB RAM</p>\n<p><a href=\"https://nick.scialli.me/exploring-the-two-sum-interview-question-in-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nick.scialli.me/exploring-the-two-sum-interview-question-in-javascript/</a></p>\n","cover_image":""}},{"node":{"id":"731e5c7704bec14bcc3893c51555106c","title":"Cách viết React render props","path":"/2019-11-27-huong-dan-pattern-react-render-prop/","date":"2019-11-27","timeToRead":5,"desc":"Một trong những pattern để chúng ta có thể sử dụng lại logic","content":"<p>Có 2 điều quan trọng cần nói trước khi bắt đầu. Một là, chúng ta đang nói đến một <strong>cách làm</strong> (pattern) trong lập trình, ko phải đặc sản của React. Thứ 2, đây không phải là kiến thức bắt buộc để viết một ứng dụng React. Bạn có thể không cần đọc bài này, vẫn có thể vỗ ngực xưng tên là một React developer và viết React như thường. Còn nếu bạn tò mò muốn biết thêm món <em>đồ chơi</em> thì đọc tiếp.</p>\n<p>Những lập trình viên mới vào nghề cũng biết đến câu thần chú \"D.R.Y\" (đừng tự lập lại chính mình). Câu thần chú rất đáng để trong tâm niệm. Cái cách làm Render Props này cũng là để đạt được cái gọi là DRY, giống như Higher-Order-Components.</p>\n<p>Trước khi xem đến giải pháp, chúng ta cần biết vấn đề cần giải quyết là gì. Ví dụ chúng ta muốn làm lại cái dashboard như bên dưới</p>\n<p><img src=\"https://tylermcginnis.com/images/posts/react-fundamentals/tool-tips.gif\"></p>\n<p>Bạn sẽ cần hiển thị một đống cái kiểu tooltip khác nhau khi một element được hover lên</p>\n<p>Có vài cách để tiếp cận vấn đề này, một là bạn kiểm tra một component cụ thể nào đó có đang hover không, rồi hiển thị hoặc ẩn tooltip. Có 3 component bạn cần kiểm tra, bạn đưa hàm kiểm tra vào cả 3 component <code class=\"language-inline-text\">Info</code>, <code class=\"language-inline-text\">TrendChart</code>, <code class=\"language-inline-text\">DailyChart</code></p>\n<p>Component Info</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Info</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span>\n        <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Icon-svg Icon--hoverable-svg<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 16 16<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>16<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M9 8a1 1 0 0 0-1-1H5.5a1 1 0 1 0 0 2H7v4a1 1 0 0 0 2 0zM4 0h8a4 4 0 0 1 4 4v8a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4zm4 5.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Chúng ta sẽ sử dụng <code class=\"language-inline-text\">onMouseOver</code> và <code class=\"language-inline-text\">onMouseOut</code>, dùng thêm state <code class=\"language-inline-text\">hovering</code> để chúng ta có thể kêu nó <code class=\"language-inline-text\">re-render</code> khi cần thiết</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Info</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hovering</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">mouseOver</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hovering</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function-variable function\">mouseOut</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hovering</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>hovering <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span>\n          <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tooltip</span></span> <span class=\"token attr-name\">id</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n          <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span>\n          <span class=\"token attr-name\">onMouseOver</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mouseOver<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">onMouseOut</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mouseOut<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Icon-svg Icon--hoverable-svg<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 16 16<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>16<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M9 8a1 1 0 0 0-1-1H5.5a1 1 0 1 0 0 2H7v4a1 1 0 0 0 2 0zM4 0h8a4 4 0 0 1 4 4v8a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4zm4 5.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Giờ chúng ta cần <em>copy</em> tính năng này cho 2 component còn lại. Việc <em>copy</em> này vi phạm nghiêm trọng câu thần chú DRY. Chúng ta phải làm sao để sử dụng lại những logic giống nhau mà ko phải copy-paste</p>\n<p>Trong hầu hết các trường hợp khi chúng ta dựng một component trong React, kết quả output cuối cùng là một cái UI gì đó</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">View <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Tuy nhiên chỉ là hầu hết, chứ ko phải toàn bộ, có nhưng component như là <em>wrapper</em> của một component khác, nó chỉ mang nhiệm vụ quản lý logic.</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Users</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">users</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">users</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> users <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Grid</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Như component <code class=\"language-inline-text\">Users</code> ở trên, không chịu trách nhiệm quản lý UI, chuyện đó là việc của <code class=\"language-inline-text\">Grid</code></p>\n<p>Trong React, chúng ta có thể truyền function vào như prop cho component</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">User</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// vuilaptrinh.com</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span></span> <span class=\"token attr-name\">id</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isAuthed</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> isAuthed <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">?</span> <span class=\"token string\">'vuilaptrinh.com'</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>Với ý tưởng này, chúng ta giải quyết vấn đề trên như thế nào?</p>\n<p>Trước tiên chúng ta tạo ra một component <em>wrapper</em> chịu trách nhiệm quản lý logic của hover</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hover</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hovering</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">mouseOver</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hovering</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function-variable function\">mouseOut</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hovering</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onMouseOver</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mouseOver<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseOut</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mouseOut<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Câu hỏi tiếp theo, component <code class=\"language-inline-text\">Hover</code> thì render cái gì. Vận dụng ý tưởng truyền prop là một function, chúng ta cho <code class=\"language-inline-text\">Hover</code> nhận vào một prop function có tên <code class=\"language-inline-text\">render</code>, chúng ta sẽ nhét vào trong cái function <code class=\"language-inline-text\">render</code> giá trị <code class=\"language-inline-text\">hovering</code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hover</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hovering</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    Is hovering? </span><span class=\"token punctuation\">{</span>hovering <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">?</span> <span class=\"token string\">'Yes'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'No'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>Việc còn lại là cập nhập lại component <code class=\"language-inline-text\">Hover</code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hover</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hovering</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">mouseOver</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hovering</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function-variable function\">mouseOut</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hovering</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onMouseOver</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mouseOver<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseOut</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mouseOut<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>hovering<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Vấn đề đã được giải quyết. Bất kể khi nào cần dùng logic <code class=\"language-inline-text\">hover</code> chúng ta sẽ gọi lại component <code class=\"language-inline-text\">Hover</code>. Cách làm này được gọi với cái tên đúng như những gì đã diễn ra (truyền prop render là một function) <strong>Render Props</strong></p>\n<p>Một cách viết khác không dùng prop tên <code class=\"language-inline-text\">render</code>, xài luôn prop tên <code class=\"language-inline-text\">children</code> có sẵn, chúng ta sẽ viết một cách gọn hơn</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">User</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> This is props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">User</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>So với cách làm của Higher-Order-Component, Render Props sẽ không vướng phải vấn đề đụng tên props, không mất quyền kiểm soát vào <em>tay</em> component được wrap lại, và wrapper hell.</p>\n<p><a href=\"https://tylermcginnis.com/react-render-props/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://tylermcginnis.com/react-render-props/</a></p>\n","cover_image":""}},{"node":{"id":"5216a73a2202dbb40fdf313b192ed771","title":"Lựa chọn framework frontend nào trong thời điểm hiện tại","path":"/2019-11-24-huong-dan-chon-framework-frontend/","date":"2019-11-24","timeToRead":12,"desc":"Đây không phải là một bài so sánh đâu mới là framework chạy nhanh nhất","content":"<p>Thời điểm hiện tại nếu bạn đang làm Frontend thì chắc hẳn đang sử dụng một framework nào đó trong 3 thằng này, Vue, React, và Angular. Nếu trước đây trên cả tá framework, và cả tá ví dụ về làm một ứng dụng web ToDoMVC trên github, thì cuộc chơi giờ đây đã đỡ hơn rất nhiều, khi chúng ta chỉ còn 3 lựa chọn sáng giá.</p>\n<p>Để viết một ứng dụng phức tạp, chúng ta bắt buộc phải sử dụng framework, vì nếu không có những framework như vậy, chúng ta sẽ tốn không biết bao nhiêu thời gian để đạt được kết quả cuối cùng.</p>\n<p>Chắc các bạn cũng như mình đã quá mệt mỏi với những bài viết so sánh 3 framework trên, ai ngon hơn ai, các bạn cũng nên dừng tìm kiếm câu trả lời cho câu hỏi \"Top 10 framework nên xài trong năm 2019\". Tại sao? Vì những bài viết này đa phần sẽ tập trung vào  đếm số lượng <em>sao</em> trên Github, số lượng tải về từ NPM, số câu hỏi liên quan trên Stack Overflow. Những con số thống kê vô hồn này chỉ có tác dụng trong những trường hợp cụ thể, như đi quảng bá về mức độ phủ rộng của những framework này. Nếu bạn là dân kỹ thuật và nhìn nhận ở góc độ kỹ thuật, phán xét những framework này ở góc độ kỹ thuật chứ không thể căn cứ trên số lượt <em>view</em> và <em>download</em></p>\n<blockquote>\n<p>Kỹ thuật quyết định bên trong của từng framework là gì, đâu là sự khác nhau thực sự của từng framework</p>\n</blockquote>\n<p>Mục tiêu cuối cùng của các framework đều là để giúp chúng ta viết ứng dụng web hiệu quả nhất có thể, việc cạnh tranh giữa các framework với nhau là ý tưởng tốt hay không? Mỗi framework sẽ có một số lượng người sử dụng nhất định, như React-Angular-Vue hiện tại có khoản hơn nửa triệu developer đang <em>ăn nằm</em> với nó hằng ngày.</p>\n<p>Không có khái niệm \"điểm tốt\" và \"điểm chưa tốt\" cho các framework. Người ta thường hay hỏi mấy câu, framework nào xài ngon nhất. Một dạng câu hỏi bạn nên ngừng làm khó nhau vì không thể nào so sánh như toán học 3 > 2 > 1</p>\n<p>Việc thiết kế phần mềm luôn đòi hỏi một sự đánh đổi, đặc biệt là với web, chắc có lẽ vì có quá nhiều thứ người ta muốn làm thông qua web, từ một trang web đơn giản chỉ là HTML tĩnh đến cả một hệ thống phức tạp nhất bạn có thể nghĩ ra, để đáp ứng toàn bộ những nhu cầu khác nhau đó, các framework phải chấp nhận đánh đổi một số thứ, chứ ko thể đáp ứng toàn bộ với một giải pháp toàn diện được</p>\n<h2 id=\"scope\"><a href=\"#scope\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Scope</h2>\n<blockquote>\n<p>Framework cung cấp bao nhiêu đồ chơi cho bạn</p>\n</blockquote>\n<p>Một trong những ví dụ kinh điển giữa <strong>thư viện</strong> và <strong>framework</strong> là React và Angular. React được xem là thư viện trong khi Angular sẽ là framework</p>\n<p>Là một thư viện, React chỉ muốn tập trung cung cấp mô hình để phát triển UI. Để hình dung dễ hơn, liên tưởng tới các nhà máy sản xuất bún, scope rất cụ thể, tôi sẽ tập trung vào việc sản xuất ra bún, việc các bạn đem bún này về nấu thành món gì là do bạn, lý do tại sao ecosystem của React luôn luôn sôi động, rất nhiều dev đã chế biến thành các món khác nhau, như với món bún chúng ta có bún riêu, canh bún, bún đậu mắm tôm, bún cá châu đốc, bún mắm, vâng vâng.</p>\n<p>Trong khi đó, Angular với tư cách là một framework thực thụ, nó sẽ tiếp cận vấn đề theo hướng từ trên xuống. Hình dung như mì gói nuôi nhân tài ở Việt Nam, với mọi thứ đóng gói đầy đủ để bạn có một món cứu đói tạm thời, bột nêm, dầu, hành. Angular cung cấp hệ thống form validation, animation,... rất nhiều tính năng khác mà chúng ta rất cần thiết để dựng nên một ứng dụng hoàn chỉnh. Với scope lớn như vậy, mọi tính năng khi thiết kế đã được nghĩ đến làm thế nào để chúng <em>sống chung</em> với nhau một cách mượt mà</p>\n<p><strong>Lợi ích khi có scope nhỏ và cụ thể</strong></p>\n<ul>\n<li>Ít khái niệm, dễ tiếp cận ngay từ đầu. Trong React bạn sẽ có mô hình làm component, prop, state, virtual DOM, hook, bao nhiêu kiến thức thôi là bạn đã có thể bắt đầu làm quen React.</li>\n<li>Linh động, món bún có thể kết hợp với rất nhiều thứ gia vị, cách nấu khác nhau để cho ra các món ăn khác nhau.</li>\n<li>Team duy trì React <em>rảnh</em> hơn, những chuyện khác đã có cộng đồng gánh vác, như đi làm React Router, React Redux, React Form, họ sẽ có thời gian nhiều hơn để tập trung vào các ý tưởng mới cho bản thân React</li>\n</ul>\n<p><strong>Hạn chế khi scope nhỏ và cụ thể</strong></p>\n<ul>\n<li>Khi bạn phải xây dựng một ứng dụng phức tạp, một vài concept cơ bản là không đủ xài, bạn phải tự viết khá nhiều. Giống như bắt bạn diễn tả tất cả những câu nói hằng ngày bằng cách chỉ sử dụng 10 từ, thì bạn diễn đạt ý như thế nào?</li>\n<li>Cách làm (<em>pattern</em>) mới ngày càng nhiều. Nói học React rất dễ là bạn thực sự chưa biết đến ngoài React ra, bạn có phải học vô số các cách làm (pattern) khác, như Redux, mặc dù không có trong tài liệu chính thức trên React, nhưng lại là thứ bạn không thể bỏ qua nếu muốn dùng React như một React Developer chân chính. Nào là Higher Other Component, Render Props, React hook, rồi quá trời cách để sử dụng CSS trong JS, tài liệu chính thức của React sẽ không nói bạn nên dùng gì, bạn phải tự tìm hiểu và chọn cái nào mình thích. Những kiến thức này bạn phải nạp từ từ như là một kiến thức chính quy để bạn có thể vỗ ngực xưng tên <em>tao là React Developer</em>.</li>\n<li>Ecosystem phát triển quá nhanh không đồng nghĩa với chất lượng các thư viện dành cho React cái nào cũng ngon, rất nhiều thư viện nổi lên một thời rồi ra đi mãi mãi, như Flux, rồi bao nhiêu là cách viết CSS trong JS. Trong ta luôn trong cảm giác lo sợ <strong>lỡ mất không xài thằng ngon nhất rồi</strong></li>\n</ul>\n<p><strong>Lợi ích khi có scope bao la bát ngát</strong></p>\n<ul>\n<li>Các vấn đề thường gặp đã được giải quyết hết, bạn có ngay tô mì để ăn trong 5 phút mà không cần suy nghĩ nhiều, cứ lên trang chủ, đọc tài liệu, học cái framework xong là xài, để nghiên cứu giây mơ rễ má có thể để sau. Đâu ai cấm bạn ăn mì gói bỏ thêm thịt bò, trứng hay tôm càng.</li>\n<li>Các tính năng bên trong được thiết kế để làm việc mượt mà đảm bảo tính thống nhất của toàn bộ hệ thống, không cần chạy đi đâu để kiếm giải pháp cho một vấn đề quá căn bản, bạn cứ lên trang chính thức của nó xem người ta giải quyết vấn đề đó như thế nào, không còn phải suy nghĩ lựa chọn đâu là cách tốt nhất trong hơn chục cái giải pháp được đưa ra.</li>\n</ul>\n<p><strong>Hạn chế của scope bao quát bát ngát hết vườn hoa</strong></p>\n<ul>\n<li>Học là một quá trình dài, nhiều khi để tới được bước có một cái gì đó hiển thị trên màn hình, bạn phải trải qua cả khóa học bài bảng. Những người không có kiến thức về một ngôn ngữ Backend nào cả, chỉ biết HTML, CSS, javascript mà đọc tài liệu của Angular thì phải nói là một trãi nghiệm vô cùng đau thương</li>\n<li>Đôi khi một giải pháp được cung cấp sẵn lại không phù hợp với tính huống gặp phải, chúng ta ước gì có thể làm cách khác, nhưng điều đó là không thể.</li>\n<li>Hệ thống lớn đòi hỏi chi phí rất lớn để duy trì cũng như đưa ra các ý tưởng mới, rất nhiều thành phần phải tích hợp để cả hệ thống có thể kết nối hoạt động trơn tru</li>\n</ul>\n<h2 id=\"cơ-chế-render\"><a href=\"#c%C6%A1-ch%E1%BA%BF-render\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cơ chế render</h2>\n<blockquote>\n<p>Cách structure, cách quản lý code của framework</p>\n</blockquote>\n<p>Để đơn giản chúng ta so sánh JSX và Templates</p>\n<p><strong>Điểm cộng của JSX/Virtual DOM</strong></p>\n<ul>\n<li>Tất cả điều là javascript, ai cũng thích, bạn không cần biết những syntax mới được định nghĩa bởi framework, những kiến thức bạn nạp vào là kiến thức nền tảng của javascript, một khi bạn đã cứng tay, bạn có thể thiên biến vạn hóa theo sở thích.</li>\n<li>Xem <em>view</em> như một dạng <em>data </em>, một component sẽ return một thứ gì đó dựa vào những giá trị input khác nhau, bạn có thể làm những thứ như chụp một cái snapshot dựa trên virtual DOM, render nó trên những target khác như terminal, PDF, Canvas, WebGL</li>\n</ul>\n<p><strong>Điểm trừ của JSX/Virtual DOM</strong></p>\n<ul>\n<li>Vốn dĩ sẽ tiêu tốn tài nguyên. Khi React mới ra đời, họ cũng đã trả lời cho câu hỏi <em>làm như vậy có chậm không?</em>, <em>vâng nó chậm nhưng vẫn nhanh đủ để dùng</em>. Nếu nhìn nhận về mặc kỹ thuật, phải làm rất nhiều thao tác xử lý trên virtual DOM. Kích thước của một VDom chuẩn sẽ liên quan tới kích thước của view chứ không phải số lượng node sẽ thay đổi.</li>\n<li>Hàm render cơ bản rất linh động, vì linh động nên nó cũng rất khó optimize, linh động ở đây muốn nói đến một hàm render như thế này</li>\n</ul>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        children<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'text'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">===</span> <span class=\"token number\">2</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message<span class=\"token operator\">:</span> <span class=\"token string\">\"vuilaptrinh.com\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'content'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Chúng ta có thể tạo parent node trước, rồi sau đó nhét thêm các node con, hoặc bất cứ thứ gì bạn có thể nghĩ ra được, javascript rất linh động, có nhiều tình huống đặc biệt chúng ta khó có thể đảm bảo optimize được cho tất cả.</p>\n<ul>\n<li>Giải pháp của React cho tình huống này không tập trung vào việc làm cho virtual DOM nhanh hơn, mà làm cho chúng ta <em>cảm giác</em> performance tốt hơn (giống như việc gửi tin nhắn trên facebook luôn cảm giác như gửi được liền chứ không cần đợi), việc đó được thực hiện bằng các kỹ thuật runtime scheduling, concurrent mode, time slicing. Những giải pháp này buộc họ phải tự tạo và quản lý một <em>stack</em> riêng, một công việc rất tốn kém</li>\n</ul>\n<p><strong>Điểm cộng của Template</strong></p>\n<ul>\n<li>Với cách tiếp cận trực tiếp hơn cho việc render, performance đương nhiên sẽ <em>gần</em> hơn render performance của trình duyệt, với cách viết template như thế này sẽ không thể nào thay đổi được thứ tứ của những element đã khai báo</li>\n</ul>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Lorem ipsum<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Lorem ipsum<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{ message }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Lorem ipsum<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Việc đoán trước được những gì có thể thay đổi, giúp việc cải thiện hiệu năng cũng sẽ dễ tiếp cận hơn </p>\n<ul>\n<li>Tùy vào tình huống, có thể giá trị baseline runtime sẽ thấp hơn</li>\n</ul>\n<p><strong>Điểm trừ của Template</strong></p>\n<ul>\n<li>Dính chặt vào cú pháp của Template, bạn sẽ mất đi một ít tự do bay nhảy bằng javascript thông thường. Sự sáng tạo của chúng ta bị giới hạn trong những thứ mà framework cung cấp. Lỡ đâu bạn đã là một master javascript và bạn thấy cách làm của framework này <em>chuối</em> cả nải và muốn làm khác hơn.</li>\n<li>Cái giá phải trả cho giá trị baseline runtime thấp sẽ là kết quả trả về của mỗi template sẽ dài dòng hơn. Đôi khi để code chạy nhanh nhất có thể, chúng ta phải nhét cứng một số thông tin bên trong output</li>\n</ul>\n<h2 id=\"cơ-chế-state\"><a href=\"#c%C6%A1-ch%E1%BA%BF-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cơ chế State</h2>\n<blockquote>\n<p>mutable vs immutable, dirty checking vs dependency tracking, reactivity vs simulated reactivity</p>\n</blockquote>\n<p>Rất tiếc, Evan You không có thời gian trình bài phần này trong bài thuyết trình của mình.</p>\n<h2 id=\"tổng-kết\"><a href=\"#t%E1%BB%95ng-k%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tổng kết</h2>\n<p>Nếu bạn đang muốn chọn một framework một cách hợp lý, bạn phải hiểu được những gì mà framework đó đang đánh đổi, biết hướng đi của framework đó có khớp với những gì bạn ưu tiên hàng đầu cho dự án mình làm.</p>\n<p>Các bạn có thể xem Video bài thuyết trình của Evan You <a href=\"https://www.youtube.com/watch?v=ANtSWq-zI0s\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ở đây</a></p>\n","cover_image":""}},{"node":{"id":"8d94d7234fef61572a2e24f9875559d9","title":"Làm sao để fetch dữ liệu bằng React Hook","path":"/2019-11-18-huong-dan-goi-fetch-api-bang-react-hook/","date":"2019-11-18","timeToRead":13,"desc":"Trong bài này chúng ta sẽ sử dụng React.useState, React.useEffect, React.useReducer để fetch dữ liệu từ API, đồng thời cũng viết một custom hook để có thể sử dụng ở bất kỳ đâu","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#g%E1%BB%8Di-hook-th%E1%BB%A7-c%C3%B4ngb%E1%BA%B1ng-code\">Gọi hook thủ công/bằng code</a></li>\n<li><a href=\"#loading-indicator\">Loading indicator</a></li>\n<li><a href=\"#handle-error\">Handle Error</a></li>\n<li><a href=\"#fetch-data-v%E1%BB%9Bi-form\">Fetch data với Form</a></li>\n<li><a href=\"#custom-hook-%C4%91%E1%BB%83-fetch-data\">Custom hook để Fetch data</a></li>\n<li><a href=\"#reducer-hook\">Reducer hook</a></li>\n<li><a href=\"#b%E1%BB%8F-qua-vi%E1%BB%87c-fetch-data\">Bỏ qua việc fetch data</a></li>\n</ul>\n<!-- /TOC -->\n<p>Chúng ta có một component, dữ liệu của component này sẽ được lấy từ API</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hits</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>hits<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>objectID<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chúng ta sẽ sử dụng axios để fetch dữ liệu, bạn thích xài cái khác thì cứ vô tư</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hits</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'https://hn.algolia.com/api/v1/search?query=redux'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>hits<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>objectID<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Bên trong <code class=\"language-inline-text\">React.useEffect</code> chúng ta sẽ thực hiện việc fetch data từ API, sau khi nhận được dữ liệu gán giá trị nhận được cho giá trị của state <code class=\"language-inline-text\">data</code></p>\n<p>Nếu dừng ở đây, khi chạy bạn sẽ thấy một vòng lặp vô tận của việc gọi fetch data. Effect sẽ chạy không chỉ ở lúc component mount mà còn ở các lần update tiếp theo. Bởi vì chúng ta gán giá trị state trên mỗi lần fetch, component lại được update và effect lại được gọi lại để chạy. Chúng ta chỉ muốn <strong>fetch data khi component mount lần đầu tiên</strong>. Đó là lý do chúng ta phải thêm một mảng rỗng vào tham số thứ hai của effect, như vậy các lần update tiếp theo nó sẽ không được gọi.</p>\n<div class=\"gridsome-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hits</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'https://hn.algolia.com/api/v1/search?query=redux'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gridsome-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>hits<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>objectID<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tham số thứ 2 truyền vào cho effect này là danh sách những giá trị nào mà hook phụ thuộc, tức nếu các giá trị này thay đổi thì effect được gọi lại. Bỏ array trống sẽ không còn chuyện chạy ở lần update.</p>\n<p>Trong đoạn code trên vẫn còn một chỗ phải chỉnh sửa, chúng ta sử dụng <code class=\"language-inline-text\">async/await</code>, <em>theo như định nghĩa</em>, tất cả những hàm nào là <code class=\"language-inline-text\">async</code> sẽ được ngầm hiểu là trả về một <code class=\"language-inline-text\">Promise</code>. Tuy nhiên, cũng <em>theo như định nghĩa</em> effect hook không được trả về gì cả, hoặc một function để clean up (xem lại bài nói về Hook Effect, có giải thích 2 loại Effect Hook).</p>\n<p>Nên bạn mà copy đoạn trên mà chạy thì sẽ nhận thông báo bên dưới console. Không thể sử dụng async function bên trong <code class=\"language-inline-text\">React.useEffect</code>, chúng ta sửa lại</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'https://hn.algolia.com/api/v1/search?query=redux'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Để fetch dữ liệu bằng <code class=\"language-inline-text\">React.useEffect</code> có thể tóm gọn như ở trên. Chúng ta sẽ tiếp tục xem cách handle error, loading indicator, gọi fetch từ form và làm thế nào tái sử dụng hook để fetch</p>\n<h2 id=\"gọi-hook-thủ-côngbằng-code\"><a href=\"#g%E1%BB%8Di-hook-th%E1%BB%A7-c%C3%B4ngb%E1%BA%B1ng-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gọi hook thủ công/bằng code</h2>\n<p>Chúng ta đã xong phần fetch dữ liệu một lần lúc component mount. Nhưng làm thế nào để fetch dữ liệu khi có sự kiện từ user, ví dụ ô search, khi user nhập lấy danh sách kết quả tìm kiếm. Ví dụ bên dưới mặc định sẽ hiển thị kết quả cho từ khóa <code class=\"language-inline-text\">redux</code>, nếu user nhập vào một giá trị khác, chúng ta cần làm sao để chạy <code class=\"language-inline-text\">useEffect</code> một lần nữa</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Fragment<span class=\"token punctuation\">,</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hits</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>query<span class=\"token punctuation\">,</span> setQuery<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'redux'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'https://hn.algolia.com/api/v1/search?query=redux'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>query<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token function\">setQuery</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>hits<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>objectID<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Với nhu cầu như trên, chúng ta cần cập nhập lại <code class=\"language-inline-text\">useEffect</code></p>\n<div class=\"gridsome-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>\n<span class=\"gridsome-highlight-code-line\">      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://hn.algolia.com/api/v1/search?query=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>query<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tuy nhiên, nếu chỉ như vậy, hàm <code class=\"language-inline-text\">fetchData</code> sẽ không được gọi khi user input một giá trị mới vào ô tìm kiếm. Vì chúng ta đã truyền vào một mảng rỗng vào cho giá trị <code class=\"language-inline-text\">depend</code> của effect, nên nó chỉ chạy lần đầu mount</p>\n<div class=\"gridsome-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://hn.algolia.com/api/v1/search?query=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>query<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gridsome-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>query<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Có một vấn đề khác, user cứ nhập một ký tự, câu <code class=\"language-inline-text\">fetchData</code> lại được gọi, gọi liên tục như vậy không hay, thêm vào một nút để user click vào mới thực hiện search thì sao</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hits</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>query<span class=\"token punctuation\">,</span> setQuery<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'redux'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>search<span class=\"token punctuation\">,</span> setSearch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://hn.algolia.com/api/v1/search?query=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>query<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>query<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>query<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token function\">setQuery</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setSearch</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Search\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>hits<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>objectID<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Giờ effect phải phụ thuộc vào <code class=\"language-inline-text\">search</code>, không chạy khi user nhập vào input</p>\n<div class=\"gridsome-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hits</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>query<span class=\"token punctuation\">,</span> setQuery<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'redux'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gridsome-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>search<span class=\"token punctuation\">,</span> setSearch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'redux'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  \n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>\n<span class=\"gridsome-highlight-code-line\">        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://hn.algolia.com/api/v1/search?query=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>search<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span></span>      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gridsome-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>search<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nhưng nếu sửa như vậy, trường hợp component được mount lần đầu, nó sẽ không có hiển thị kết quả cho từ khóa <code class=\"language-inline-text\">redux</code> nữa. Nếu dùng thềm một <code class=\"language-inline-text\">useEffect</code> khác cho trường hợp chạy lúc đầu sẽ gây nhầm lẫn, không rõ ràng, thay vào đó nếu chúng ta xem search state là nguyên cái <code class=\"language-inline-text\">url</code> sẽ đơn giản hơn</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hits</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>query<span class=\"token punctuation\">,</span> setQuery<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'redux'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">,</span> setUrl<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'https://hn.algolia.com/api/v1/search?query=redux'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>query<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token function\">setQuery</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n          <span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://hn.algolia.com/api/v1/search?query=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>query<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Search\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>hits<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>objectID<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"loading-indicator\"><a href=\"#loading-indicator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Loading indicator</h2>\n<p>Một nhu cầu khác cũng hay gặp là trong lúc fetch data từ API, chúng ta cần biết trạng thái loading tới đâu rồi, chúng ta sẽ bổ sung thêm state <code class=\"language-inline-text\">isLoading</code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hits</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>query<span class=\"token punctuation\">,</span> setQuery<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'redux'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">,</span> setUrl<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'https://hn.algolia.com/api/v1/search?query=redux'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isLoading<span class=\"token punctuation\">,</span> setIsLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>query<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token function\">setQuery</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n          <span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://hn.algolia.com/api/v1/search?query=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>query<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Search\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>isLoading <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Loading ...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>hits<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>objectID<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"handle-error\"><a href=\"#handle-error\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Handle Error</h2>\n<p>Cũng tương tự như loading, chúng ta sẽ bổ sung thêm state <code class=\"language-inline-text\">isError</code> để xác định việc fetch dữ liệu có bị lỗi không</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hits</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>query<span class=\"token punctuation\">,</span> setQuery<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'redux'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">,</span> setUrl<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'https://hn.algolia.com/api/v1/search?query=redux'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isLoading<span class=\"token punctuation\">,</span> setIsLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isError<span class=\"token punctuation\">,</span> setIsError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsError</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setIsError</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      \n      <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>query<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token function\">setQuery</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n          <span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://hn.algolia.com/api/v1/search?query=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>query<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Search\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>isError <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Something went wrong ...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>isLoading <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Loading ...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>hits<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>objectID<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"fetch-data-với-form\"><a href=\"#fetch-data-v%E1%BB%9Bi-form\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Fetch data với Form</h2>\n<p>Nãy giờ chúng ta chỉ fetch data với bằng input và button. Khi có nhiều element hơn, chúng ta sẽ đưa nó vào <code class=\"language-inline-text\">form</code> để có thể trigger form submit bằng cách nhấn Enter</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span>\n        <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">event</span> <span class=\"token operator\">=></span>\n          <span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://hn.algolia.com/api/v1/search?query=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>query<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n          event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>query<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token function\">setQuery</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Search</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>isError <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Something went wrong ...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      ...\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"custom-hook-để-fetch-data\"><a href=\"#custom-hook-%C4%91%E1%BB%83-fetch-data\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Custom hook để Fetch data</h2>\n<p>Để tái sử dụng được các đoạn code liên quan đến việc fetch data, chúng ta sẽ đưa nó ra thành một custom hook, các giá trị liên quan trực tiếp đến việc fetch data, cụ thể là loading, error chúng ta cũng đưa vào trong custom hook</p>\n<div class=\"gridsome-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gridsome-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useHackerNewsApi</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hits</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">,</span> setUrl<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'https://hn.algolia.com/api/v1/search?query=redux'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isLoading<span class=\"token punctuation\">,</span> setIsLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isError<span class=\"token punctuation\">,</span> setIsError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsError</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setIsError</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gridsome-highlight-code-line\">  </span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> isLoading<span class=\"token punctuation\">,</span> isError <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> setUrl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sử dụng bên trong App Component</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>query<span class=\"token punctuation\">,</span> setQuery<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'redux'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> isLoading<span class=\"token punctuation\">,</span> isError <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> doFetch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useHackerNewsApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">doFetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://hn.algolia.com/api/v1/search?query=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>query<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>query<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token function\">setQuery</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Search</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      ...\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Giá trị state lúc khởi tạo của thể đưa vào như một tham số truyền vào cho custom hook luôn</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Fragment<span class=\"token punctuation\">,</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useDataApi</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">initialUrl<span class=\"token punctuation\">,</span> initialData</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">,</span> setUrl<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isLoading<span class=\"token punctuation\">,</span> setIsLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isError<span class=\"token punctuation\">,</span> setIsError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsError</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setIsError</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> isLoading<span class=\"token punctuation\">,</span> isError <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> setUrl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>query<span class=\"token punctuation\">,</span> setQuery<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'redux'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> isLoading<span class=\"token punctuation\">,</span> isError <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> doFetch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useDataApi</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'https://hn.algolia.com/api/v1/search?query=redux'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hits</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span>\n        <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">doFetch</span><span class=\"token punctuation\">(</span>\n            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://hn.algolia.com/api/v1/search?query=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>query<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>query<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token function\">setQuery</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Search</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>isError <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Something went wrong ...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>isLoading <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Loading ...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>hits<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>objectID<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"reducer-hook\"><a href=\"#reducer-hook\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reducer hook</h2>\n<p>Với cái custom hook để fetch data như ở trên, chúng ta thấy có 2 state <code class=\"language-inline-text\">isLoading</code>, <code class=\"language-inline-text\">isError</code> quan hệ khá <em>mật thiết</em> với nhau, có thể hợp nhất 2 đứa nó lại bằng <code class=\"language-inline-text\">React.useReducer</code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  Fragment<span class=\"token punctuation\">,</span>\n  useState<span class=\"token punctuation\">,</span>\n  useEffect<span class=\"token punctuation\">,</span>\n  useReducer<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dataFetchReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useDataApi</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">initialUrl<span class=\"token punctuation\">,</span> initialData</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">,</span> setUrl<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>dataFetchReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">isLoading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">isError</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> initialData<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-inline-text\">React.useReducer</code> sẽ nhận vào một hàm reducer (công dụng tương tự như hàm reducer của redux ấy) và các giá trị khởi tạo của state, trong trường hợp của chúng ta là <code class=\"language-inline-text\">isLoading</code> và <code class=\"language-inline-text\">isError</code>. Việc này chẳng qua là gom tất cả state liên quan vào một object cho nó <em>tinh tế</em> thôi, thay vì từng state riêng biệt như sử dụng <code class=\"language-inline-text\">useState</code></p>\n<div class=\"gridsome-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dataFetchReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useDataApi</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">initialUrl<span class=\"token punctuation\">,</span> initialData</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">,</span> setUrl<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>dataFetchReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">isLoading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">isError</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> initialData<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gridsome-highlight-code-line\">      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'FETCH_INIT'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gridsome-highlight-code-line\">        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'FETCH_SUCCESS'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> result<span class=\"token punctuation\">.</span>data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gridsome-highlight-code-line\">        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'FETCH_FAILURE'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Mình đã bảo rồi, nó sẽ giống như cái reducer trong redux thôi, chúng ta <code class=\"language-inline-text\">dispatch</code> một object gồm <code class=\"language-inline-text\">type</code> và <code class=\"language-inline-text\">payload</code>, căn cứ vào payload mà chúng ta xử lý, cập nhập state</p>\n<p>Cuối cùng chúng ta cập nhập lại giá trị trả về của custom hook nữa</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useDataApi</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">initialUrl<span class=\"token punctuation\">,</span> initialData</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">,</span> setUrl<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>dataFetchReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">isLoading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">isError</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> initialData<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token operator\">...</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setUrl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Cuối cùng, không kém phần quan trọng, phần code thực hiện bên trong <code class=\"language-inline-text\">dataFetchReducer</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dataFetchReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'FETCH_INIT'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">isLoading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">isError</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'FETCH_SUCCESS'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">isLoading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">isError</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'FETCH_FAILURE'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">isLoading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">isError</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"bỏ-qua-việc-fetch-data\"><a href=\"#b%E1%BB%8F-qua-vi%E1%BB%87c-fetch-data\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bỏ qua việc fetch data</h2>\n<p>Tình huống là khi user chuyển qua một route khác, khi đang fetch data, việc gọi fetch ko cần thiết và có thể bỏ qua</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useDataApi</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">initialUrl<span class=\"token punctuation\">,</span> initialData</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">,</span> setUrl<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>dataFetchReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">isLoading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">isError</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> initialData<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> didCancel <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'FETCH_INIT'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>didCancel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'FETCH_SUCCESS'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> result<span class=\"token punctuation\">.</span>data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>didCancel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'FETCH_FAILURE'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      didCancel <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setUrl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Với việc return một function ở cuối của <code class=\"language-inline-text\">React.useEffect</code>, tên gọi các bạn React đặt là clean up function, nằm trong kiểu effect cần clean up - nói thật mình phát mệt với việc các bạn trong team React cứ thích <em>chế</em> thêm liên tục như vậy.</p>\n<blockquote>\n<p>Nói theo cách của mình đi, nếu bạn return một function ở cuối của <code class=\"language-inline-text\">React.useEffect</code> nó sẽ chạy khi component bị unmount.</p>\n</blockquote>\n<p>Source code có thể tham khảo đầy đủ <a href=\"https://github.com/the-road-to-learn-react/use-data-api/blob/master/src/index.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ở đây</a></p>\n<p><a href=\"https://www.robinwieruch.de/react-hooks-fetch-data\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.robinwieruch.de/react-hooks-fetch-data</a></p>\n","cover_image":""}},{"node":{"id":"2cc3f276ddaaff28bbb27a44eafd1e75","title":"Tại sao lại sinh ra React hook","path":"/2019-11-17-giai-thich-tai-sao-ban-can-react-hook/","date":"2019-11-17","timeToRead":10,"desc":"Tại sao và lợi ích mà react hook đem lại là gì, mà thiên hạ cứ rần rần lên vậy?","content":"<!-- TOC -->\n<ul>\n<li>\n<p><a href=\"#l%e1%bb%8bch-s%e1%bb%ad\">Lịch sử</a></p>\n<ul>\n<li><a href=\"#th%c3%a1ng-5-2013\">Tháng 5, 2013</a></li>\n<li><a href=\"#th%c3%a1ng-gi%c3%aang-2015\">Tháng giêng, 2015</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#v%e1%ba%a5n-%c4%91%e1%bb%81-t%e1%bb%93n-%c4%91%e1%bb%8dng\">Vấn đề tồn đọng</a></p>\n<ul>\n<li><a href=\"#logic-tr%c3%b9ng-l%e1%ba%b7p\">Logic trùng lặp</a></li>\n<li><a href=\"#chia-s%e1%ba%bd-logic\">Chia sẽ logic</a></li>\n</ul>\n</li>\n<li><a href=\"#gi%e1%ba%a3i-quy%e1%ba%bft\">Giải quyết</a></li>\n</ul>\n<!-- /TOC -->\n<p>Qua bài viết này chúng ta sẽ cùng trả lời 2 câu hỏi bạn cần đặt ra khi tiếp cận một <strong>đồ chơi mới</strong> như React Hook</p>\n<ol>\n<li>Tại sao nó lại tồn tại trên trái đất này?</li>\n<li>Nó tồn tại trên trái đất này có lợi ích gì không?</li>\n</ol>\n<h2 id=\"lịch-sử\"><a href=\"#l%E1%BB%8Bch-s%E1%BB%AD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lịch sử</h2>\n<h3 id=\"tháng-5-2013\"><a href=\"#th%C3%A1ng-5-2013\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tháng 5, 2013</h3>\n<p>Nếu bạn còn nhớ về cách viết một component trong React bằng <code class=\"language-inline-text\">React.createClass</code>, chứng tỏ bạn đã là già làng trong React, ngày mới ra đời khi javascript không hề có khai báo <code class=\"language-inline-text\">class</code>, chúng ta sẽ khai báo component như thế này</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> ReposGrid <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getInitialState</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>      \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">componentDidMount</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">componentDidUpdate</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"tháng-giêng-2015\"><a href=\"#th%C3%A1ng-gi%C3%AAng-2015\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tháng giêng, 2015</h3>\n<p>Tổ chức <em>Ác ma</em> thế giới công bố chuẩn EcmaScript 2015, còn gọi với tên thân thương ES6. <strong>class</strong> chính thức có mặt trong javascript. Đội ngũ phát triển của React lúc đó kết luận, chúng ta <em>không cần phát minh lại cái bánh xe</em> (don't reinvent the wheel), cứ xài theo chuẩn đã có. Thế là từ đó chúng ta khai báo component bằng <code class=\"language-inline-text\">class extends</code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ReposGrid</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">repos</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>updateRepos <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateRepos</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidMount</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidUpdate</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Khi khai báo component bằng <code class=\"language-inline-text\">class</code>, chúng ta khởi tạo giá trị của <code class=\"language-inline-text\">state</code> bên trong phương thức <code class=\"language-inline-text\">constructor</code> và nó sẽ được nhét vào trong <code class=\"language-inline-text\">this</code>. Tuy nhiên, với cách khai báo đã <em>quốc tế hóa</em> của <code class=\"language-inline-text\">class</code>, nếu chúng ta <code class=\"language-inline-text\">extends</code> từ một <code class=\"language-inline-text\">class</code>, chúng ta phải gọi <code class=\"language-inline-text\">super()</code> trước khi có thể sử dụng <code class=\"language-inline-text\">this</code>. Và riêng với React, chúng ta còn phải truyền thêm <code class=\"language-inline-text\">props</code> vào trong <code class=\"language-inline-text\">super</code>. Các bạn lập trình viên <em>phát bệnh</em> vì cách viết chướng mắt này.</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 🤮</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ngày xưa khi dùng <code class=\"language-inline-text\">createClass</code> của React, bên trong hàm đó nó sẽ làm luôn chuyện binding toàn bộ <code class=\"language-inline-text\">this</code> vào các phương thức cho một instance của component. Tuy nhiên khi viết <code class=\"language-inline-text\">extends React.Component</code> chuyện đó ko còn tự động xảy ra <em>như phép màu</em> nữa, chúng ta phải đi <code class=\"language-inline-text\">.bind</code> từng phương thức một trong <code class=\"language-inline-text\">constructor</code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>updateRepos <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateRepos</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 😭</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nếu nhìn vào các bạn sẽ nói, ồ cái này chả to tác gì đâu, chỉ là phải viết thêm mấy dòng ấy mà. Cũng vì lầm đường lạc lối theo class <em>Ác ma</em> mà React bị ko biết bao nhiều lời phàn nàn từ những lập trình viên khắp mọi nơi.</p>\n<p>Hên sao, không lâu sau đó Class Field được thêm vào trong <code class=\"language-inline-text\">class</code>, chúng ta có thể khai báo một biến bên trong <code class=\"language-inline-text\">class</code> mà không cần dùng <code class=\"language-inline-text\">constructor</code>, thay vì <code class=\"language-inline-text\">.bind</code> chúng ta dùng arrow function</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ReposGrid</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n  <span class=\"token function-variable function\">updateRepos</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"vấn-đề-tồn-đọng\"><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81-t%E1%BB%93n-%C4%91%E1%BB%8Dng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vấn đề tồn đọng</h2>\n<p>Vấn đề đã được giải quyết tương đối ổn thỏa? Tuy nhiên vẫn còn vấn đề khác React team cảm thấy chưa hài lòng lắm phiên bản hiện tại.</p>\n<p>Ý tưởng chính của React là để chúng ta có thể quản lý những ứng dụng phức tạp bằng cách chia ra thành từng component nhỏ rồi <em>kết hợp</em> (compose) lại với nhau. Đây là cách làm tạo ra <em>thương hiệu</em> sáng ngời của React. Cách tiếp cận theo kiểu component chả có vấn đề gì, cách <strong>hiện thực</strong> những component hiện tại đang có vấn đề.</p>\n<h3 id=\"logic-trùng-lặp\"><a href=\"#logic-tr%C3%B9ng-l%E1%BA%B7p\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Logic trùng lặp</h3>\n<p>Trước đây chúng ta thiết kế component dựa rất nhiều vào component lifecycle. Chúng ta đặt để logic vào trong các từng lifecycle này, thí dụ như chúng ta cần phải gọi cùng một hàm bên trong cả 2 phương thức lifecycle <code class=\"language-inline-text\">componentDidMount</code>, <code class=\"language-inline-text\">componentDidUpdate</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentDidMount</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateRepos</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">componentDidUpdate</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateRepos</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function-variable function\">updateRepos</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">fetchRepos</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">repos</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      repos<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Để giải quyết vấn đề side effect (hàm <code class=\"language-inline-text\">fetchRepos</code> làm cái quần gì ở ngoài đường ai mà biết, rõ ràng nó không thuộc phạm vi quản lý của component). Chúng ta <strong>cần một cách tiếp cận khác không thể sử dụng lifecycle nữa</strong></p>\n<h3 id=\"chia-sẽ-logic\"><a href=\"#chia-s%E1%BA%BD-logic\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chia sẽ logic</h3>\n<p>Khi nghĩ về sự kết hợp giữa các component trong React, chúng ta sẽ nghĩ về cách các đối tượng UI kết hợp với nhau.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">view <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Trong thực tế, viết một ứng dụng không phải chỉ bao gồm tầng UI, rất nhiều trường hợp chúng ta cần <strong>tái sử dụng logic, kết hợp các logic lại với nhau</strong>. Trước đây React chưa hề có cách nào đáp ứng được nhu cầu này.</p>\n<p>Ví dụ nếu có một component khác, nó cũng cần xài biến state <code class=\"language-inline-text\">repos</code> và tất cả những logic liên quan, mà những cái đó nó đang nằm bên trong component <code class=\"language-inline-text\">ReposGrid</code>. Làm sao chúng ta lấy ra xài lại? Cách bình thường là chúng ta copy-paste toàn bộ code bên trong qua một component mới. Cũng nhiều người làm vậy, ai có kinh nghiệm hơn thì dùng Higher-Order Component</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">withRepos</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WithRepos</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">repos</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">componentDidMount</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateRepos</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">componentDidUpdate</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateRepos</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function-variable function\">updateRepos</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token function\">fetchRepos</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">repos</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          repos<span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span>\n          <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span></span>\n          <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Rồi giờ có bất kỳ component nào muốn dùng <code class=\"language-inline-text\">repos</code> thì cứ mẹ-bồng-con thế này</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ReposGrid.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ReposGrid</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> repos <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withRepos</span><span class=\"token punctuation\">(</span>ReposGrid<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Profile.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Profile</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> repos <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withRepos</span><span class=\"token punctuation\">(</span>Profile<span class=\"token punctuation\">)</span></code></pre></div>\n<p><em>Hồi xưa</em> chúng ta hay làm vậy, hoặc là dùng Render Props để chia sẻ những logic dùng tới dùng lui. Tuy nhiên, đây là cách tiếp cận không dành cho dân nghiệp dư, vì không phải dễ mà hiểu được cách tụi HOC nó chạy, thứ 2 nếu bạn cho chục mẹ bồng một đứa con thì sẽ sinh ra chuyện <code class=\"language-inline-text\">wrapper hell</code> giống như callback hell</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withHover</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">withTheme</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">withAuth</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">withRepos</span><span class=\"token punctuation\">(</span>Profile<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Vận động não để hiểu đoạn này chạy kết quả thể nào</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WithHover</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WithTheme</span> <span class=\"token attr-name\">hovering</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{false}</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WithAuth</span> <span class=\"token attr-name\">hovering</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{false}</span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>dark<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WithRepos</span> <span class=\"token attr-name\">hovering</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{false}</span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>dark<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">authed</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{true}</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Profile</span> \n          <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>JavaScript<span class=\"token punctuation\">'</span></span>\n          <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{true}</span> \n          <span class=\"token attr-name\">repos</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{[]}</span>\n          <span class=\"token attr-name\">authed</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{true}</span>\n          <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>dark<span class=\"token punctuation\">'</span></span>\n          <span class=\"token attr-name\">hovering</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{false}</span>\n        <span class=\"token punctuation\">/></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>WithRepos</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>WithAuth</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WithTheme</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>WithHover</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Tóm lại những vấn đề trước mặt cần giải quyết là gì</p>\n<ul>\n<li>gọi <code class=\"language-inline-text\">super(props)</code> là quá xàm xí đú</li>\n<li><code class=\"language-inline-text\">this</code> là thứ mơ hồ mà không dễ biết cách nó hoạt động, bạn có thể là chuyên gia và biết đấy, nhưng chúng ta tuân thủ nguyên tắc khi code <strong>KISS</strong>, ngu ngốc nhất có thể, đừng tỏ ra thông minh</li>\n<li>Tổ chức logic theo các phương thức lifecycle không còn hợp lý hợp tình</li>\n<li>React chưa có câu trả lời chính thức nào cho việc chia sẻ logic (HOC là từ pattern của javascript, không phải đặc sản nhà React, nên không tính)</li>\n</ul>\n<h2 id=\"giải-quyết\"><a href=\"#gi%E1%BA%A3i-quy%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giải quyết</h2>\n<p>Từ React 0.14 chúng ta có 2 cách tạo component, dùng class hoặc dùng function. Nếu cần state và các lifecycle thì dùng class, nếu chỉ nhận props rồi trả về UI thì dùng function. Đó là cách chúng ta được dạy.</p>\n<p>Bác CTO John Carmack nói, em xin lỗi sửa câu văn của bác chút</p>\n<blockquote>\n<p>Tụi bây dẹp phương thức, class, framework hết dùm tao cái, Dùng hết function đi</p>\n</blockquote>\n<p>React team, chân lý đây rồi, chúng ta tìm cách biến function component đáp ứng được những gì class component làm được đi.</p>\n<p>Với function component, chúng ta chả cần quan tâm tới <code class=\"language-inline-text\">super(props)</code>, <code class=\"language-inline-text\">this</code> chạy thế nào. Chúng ta sẽ bổ sung state, giải quyết lifecycle, chia sẻ logic nữa là xong.</p>\n<p>Và thế là các hook của React ra đời: <code class=\"language-inline-text\">useState</code>, <code class=\"language-inline-text\">useEffect</code>, custom hook</p>\n<p>Để sử dụng state, chúng ta dùng hook là <code class=\"language-inline-text\">React.useState</code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ReposGrid</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> repos<span class=\"token punctuation\">,</span> setRepos <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> loading<span class=\"token punctuation\">,</span> setLoading <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Lifecycle thì có thể bạn sẽ buồn (hoặc vui) khi nghe tin này. Nếu bắt đầu sử dụng React hook, function component, dẹp hết những gì bạn đã từng biết về lifecycle của component đi, quên đi những việc cần làm ở giai đoạn này, giai đoạn kia của component. Bạn hay tiếp cận <em>cách tư duy khác</em> hoàn toàn <strong>Đồng bộ hóa</strong></p>\n<p>Thử nghĩ những gì bạn làm ở một sự kiện của lifecycle, có thể là đổi state, fetch dữ liệu, cập nhập DOM, tất cả đều gom về một mục đích duy nhất <strong>Đồng bộ hóa</strong>. Những gì chúng ta cần đồng bộ thường là những thứ nằm ngoài React (gọi API, DOM, đại loại như thế) với những thứ bên trong React (state) hoặc ngược lại</p>\n<p>Khi tiếp cận theo hướng đồng bộ hóa thay vì lifecycle event, nó cho phép chúng ta gom các logic liên quan lại với nhau. Để làm việc đó React cho chúng ta một Hook gọi là <code class=\"language-inline-text\">React.useEffect</code></p>\n<p>Theo định nghĩa, <code class=\"language-inline-text\">useEffect</code> cho phép chúng ta thực hiện side effect bên trong function component. Hàm này sẽ dùng để <strong>re-sync</strong> (thực hiện đồng bộ hóa các giá trị)</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>username<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>username<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Đoạn code trên sẽ chạy lại bất cứ khi nào giá trị state <code class=\"language-inline-text\">username</code> có thay đổi</p>\n<p>Để gọi lại <code class=\"language-inline-text\">fetchRepos</code> khi có thay đổi từ state <code class=\"language-inline-text\">repos</code> ở ví dụ trên</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ReposGrid</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> repos<span class=\"token punctuation\">,</span> setRepos <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> loading<span class=\"token punctuation\">,</span> setLoading <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">fetchRepos</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">repos</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setRepos</span><span class=\"token punctuation\">(</span>repos<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Loading</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Như vậy, chúng ta đã có thể nói lời chia tay mãi mãi với <code class=\"language-inline-text\">React.Component</code>, <code class=\"language-inline-text\">constructor</code>, <code class=\"language-inline-text\">super</code>, <code class=\"language-inline-text\">this</code>, lifecycle</p>\n<p>Còn lại với cuộc chiến chống Higher-Order Component và Render Props. Để dùng lại logic, chúng ta sẽ vẫn dùng Hook, nhưng không phải do React làm sẵn cho <em>xơi</em>, chúng ta phải tự viết những custom Hook</p>\n<p>Giờ chúng ta sẽ viết một custom hook <code class=\"language-inline-text\">useRepos</code>, nó sẽ nhận một <code class=\"language-inline-text\">id</code> lấy dữ liệu tương ứng.</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useRepos</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> repos<span class=\"token punctuation\">,</span> setRepos <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> loading<span class=\"token punctuation\">,</span> setLoading <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">fetchRepos</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">repos</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setRepos</span><span class=\"token punctuation\">(</span>repos<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span> loading<span class=\"token punctuation\">,</span> repos <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Điều ngon lành ở đây là tất cả những gì liên quan đến <code class=\"language-inline-text\">repos</code> điều gói gọn trong hook, ở đây mình muốn nói đến <code class=\"language-inline-text\">loading</code>, <code class=\"language-inline-text\">repos</code></p>\n<p>Sử dụng custom hook này trên các component khác nhau</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">ReposGrid</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> loading<span class=\"token punctuation\">,</span> repos <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRepos</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Profile</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> loading<span class=\"token punctuation\">,</span> repos <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRepos</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Thật không thể tin được bạn có thể khai báo và setState bên trong một function bình thường. Chúng ta đã có một React mạnh mẽ với các đặc tính sau</p>\n<ul>\n<li>Đơn giản hóa</li>\n<li>Đóng gói</li>\n<li>Linh động</li>\n<li>Mở rộng</li>\n</ul>\n<p>Không những giải quyết vấn đề đang có, như cách mà các bạn làm marketing cho React tuyên truyền: sử dụng Hook để có <code class=\"language-inline-text\">state</code> bên trong function component. Thật ra nó còn mang tới những giá trị to lớn khác là tăng khả năng tái sử dụng và kết hợp logic.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.youtube.com/watch?v=eX_L39UvZes\">📜 Why React Hooks?</a></p>\n","cover_image":""}},{"node":{"id":"e55a87c1eb61b1faf89f80480047ad94","title":"Bàn luận về setTimeout và setInterval trong javascript","path":"/2019-11-16-ban-luan-settimout-va-setinterval-trong-javascript/","date":"2019-11-16","timeToRead":4,"desc":"Một số vấn đề về setTimeout đáng để bạn cân nhắc trước khi sử dụng","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#setinterval\">setInterval</a></li>\n<li><a href=\"#settimeout\">setTimeout</a></li>\n</ul>\n<!-- /TOC -->\n<p>Nếu bạn cần gọi một hàm <strong>lặp lại</strong> theo một khoản thời gian nhất định trong javascript bạn sẽ dùng gì? Một là dùng <code class=\"language-inline-text\">setInterval</code>  hay là đệ quy <code class=\"language-inline-text\">setTimeout</code></p>\n<p>Vì sao bạn nên cân nhắc trước khi sử dụng <code class=\"language-inline-text\">setInterval</code>, nó đã gây ra tội tình gì? Vì sao sẽ tốt hơn nếu chúng ta lắng nghe và đợi một <em>tín hiệu</em> nào đó rồi chạy</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// đợi tính hiệu nào đó rồi thực thi một số việc</span>\n  <span class=\"token comment\">// sẽ luôn là lựa chọn tốt nhất</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nếu ông bà có dạy <em>đợi mua bò mới đi làm chuồng thì đã muộn</em> không đúng trong trường hợp này. <strong>CÓ</strong> trước hẳn làm gì thì làm.</p>\n<h3 id=\"setinterval\"><a href=\"#setinterval\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>setInterval</h3>\n<p>Với <code class=\"language-inline-text\">setInterval</code> nó sẽ tiếp tục chạy cho tới khi chúng ta ra lệnh xóa nó hoặc đóng luôn trình duyệt.</p>\n<p><code class=\"language-inline-text\">setInterval</code> cam kết đoạn code của chúng ta nó sẽ được đưa vào <strong>STACK</strong> theo đúng một chu kỳ thời gian. <em>Tuy nhiên</em>, đoạn code này của bạn <strong>không được cam kết</strong> sẽ chạy theo đúng chu kỳ thời gian, phụ thuộc vào các yếu tố khác nữa, và đã phần là có độ trễ, theo một cách dân gian ta gọi nó là <strong>HÊN XUI</strong></p>\n<p><img src=\"https://miro.medium.com/max/1837/1*A138JkWveIfKajztvhu60g.png\" alt=\"Bàn luận về setTimeout và setInterval trong javascript\"></p>\n<p>Thời gian chạy của hàm <code class=\"language-inline-text\">dummyMethod1</code> tốn nhiều thời gian hơn dự tính, <em>lý do thì không rõ</em>.</p>\n<blockquote>\n<p>Javascript được thiết kế để chạy single thread, nó <strong>không</strong> thực hiện hai công việc cùng một lúc.</p>\n</blockquote>\n<p>Điều đó có nghĩa, các phương thức khác phía trên stack phải <strong>đợi</strong> cho đến khi <code class=\"language-inline-text\">dummyMethod1</code> làm xong công chuyện của nó.</p>\n<p>Thêm một ví dụ khác, nếu hàm khai báo bên trong <code class=\"language-inline-text\">setInterval</code> có thời gian chạy lớn hơn giá trị delay của <code class=\"language-inline-text\">setInterval</code> (ví dụ như hàm gọi ajax), chúng ta sẽ có vấn đề như thế này</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fakeCallToServer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returning from server'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">let</span> insideSetInterval <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'insideSetInterval'</span><span class=\"token punctuation\">,</span> insideSetInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">fakeCallToServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//insideSetInterval 14:13:47</span>\n<span class=\"token comment\">//insideSetInterval 14:13:49</span>\n<span class=\"token comment\">//insideSetInterval 14:13:51</span>\n<span class=\"token comment\">//returning from server 14:13:51</span>\n<span class=\"token comment\">//insideSetInterval 14:13:53</span>\n<span class=\"token comment\">//returning from server 14:13:53</span>\n<span class=\"token comment\">//insideSetInterval 14:13:55</span>\n<span class=\"token comment\">//returning from server 14:13:55</span></code></pre></div>\n<p>Như kết quả ở trên cho thấy, câu <code class=\"language-inline-text\">console.log(\"insideSetInterval\")</code> sẽ liên tục gọi ajax bất kể trước đó đã gọi thành công chưa. Đáng lẽ chúng ta phải kết thúc việc gọi liên tục này, đa phần chúng ta quên <code class=\"language-inline-text\">clearInterval</code>. Nó sẽ tạo ra một hàng đợi <em>dài ngoằn</em> trong stack.</p>\n<p>Giờ thử một xử lý tuần tự trong <code class=\"language-inline-text\">setInterval</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fakeTimeIntensiveOperation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> <span class=\"token number\">50000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'random'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> insideTimeTakingFunction  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'insideTimeTakingFunction'</span><span class=\"token punctuation\">,</span> insideTimeTakingFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> insideSetInterval <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'insideSetInterval'</span><span class=\"token punctuation\">,</span> insideSetInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>counter <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fakeTimeIntensiveOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>counter <span class=\"token operator\">>=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//insideSetInterval 13:50:53</span>\n<span class=\"token comment\">//insideTimeTakingFunction 13:50:55</span>\n<span class=\"token comment\">//insideSetInterval 13:50:55 &lt;---- mất tiêu câu gọi lúc 54 giây</span>\n<span class=\"token comment\">//insideSetInterval 13:50:56</span>\n<span class=\"token comment\">//insideSetInterval 13:50:57</span>\n<span class=\"token comment\">//insideSetInterval 13:50:58</span></code></pre></div>\n<p>Những gì đang diễn ra ở trên, với một thao tác tốn <em>kha khá</em> thời gian xử lý, nó mất hẳn đoạn code <code class=\"language-inline-text\">console.log(\"insideSetInterval\")</code>, nôm na là nó bị <em>đứt một nhịp</em>, tình huống này xảy ra với Chrome, nó tạo ra một <em>nhịp</em> mới.</p>\n<p>Thay vì dùng <code class=\"language-inline-text\">setInterval</code>, chúng ta có thể dùng đệ quy <code class=\"language-inline-text\">setTimeout</code></p>\n<h3 id=\"settimeout\"><a href=\"#settimeout\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>setTimeout</h3>\n<p>Mặc dù cũng chưa hẳn cam kết 100% đoạn code của chúng chạy đúng theo một chu kỳ đã định với đệ quy <code class=\"language-inline-text\">setTimeout</code>. Chí ít nó cũng không gây ra chuyện đưa hàng đống lệnh chờ chạy vào trong stack</p>\n<p><img src=\"https://miro.medium.com/max/1920/1*A9gNYo3pOtnzuXi30NHjfA.png\" alt=\"Bàn luận về setTimeout và setInterval trong javascript\"></p>\n<p>Khi thực hiện bằng <code class=\"language-inline-text\">setTimeout</code>, bên trong vòng đệ quy chúng ta đã có bước kiểm tra <strong>có nên</strong> gọi thêm lần nữa không.</p>\n<p>Lưu ý khi bạn dùng setTimeout, chớ có <strong>thực thi</strong> hàm đó luôn (kèm dấu <code class=\"language-inline-text\">()</code>), chúng ta chỉ truyền hàm đó thôi</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ☠ Lỗi</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 👍 OK</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>sayHi<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Nguồn tham khảo</strong></p>\n<p><a href=\"https://dev.to/akanksha_9560/why-not-to-use-setinterval--2na9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Why not to use setInterval</a></p>\n<p><a href=\"https://develoger.com/settimeout-vs-setinterval-cff85142555b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">setTimeout VS setInterval</a></p>\n<p><a href=\"https://javascript.info/settimeout-setinterval\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Scheduling: setTimeout and setInterval</a></p>\n","cover_image":""}},{"node":{"id":"fab13d9eab231ef24a78efbc29cb05f4","title":"Tại sao lại viết Super(props)","path":"/2019-11-10-tai-sao-lai-viet-super-props/","date":"2019-11-10","timeToRead":6,"desc":"Bài cũ, dịch cũng lâu rồi, giờ mới đăng lên trang cá nhân của mình","content":"<p>Nghe nói <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hook</a> đang là trend. Trớ trêu thay, tôi muốn viết bài đầu tiên cho blog này để nói về điều thú vị của <em>class</em> component.</p>\n<p><strong>Vấn đề này <em>không</em> liên quan tới việc sử dụng React một cách hiệu quả. Nhưng bạn sẽ cảm thấy chúng thú vị nếu như bạn muốn tìm hiểu sâu hơn về cách hoạt động.</strong></p>\n<p>Đây là bài đầu tiên.</p>\n<hr>\n<p>Chúng ta đã viết <code class=\"language-inline-text\">super(props)</code> không biết bao nhiêu lần trong đời:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isOn</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Dĩ nhiên, nếu áp dụng <a href=\"https://github.com/tc39/proposal-class-fields\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">class field proposal</a> thì có thể bỏ qua <em>nghi thức</em> này:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isOn</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cú pháp này <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#es7-property-initializers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">đã  được hoạch định</a> khi React 0.13 đã hỗ trợ cho plain class năm 2015. KHai báo <code class=\"language-inline-text\">constructor</code> và gọi <code class=\"language-inline-text\">super(props)</code> luôn là kế hoạch tạm thời cho đến khi có một cách khác tốt hơn.</p>\n<p>Quay về ví dụ,  chỉ sử dụng các tính năng của ES2015:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isOn</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Tại sao chúng ta lại gọi <code class=\"language-inline-text\">super</code>? Chúng ta có thể <em>không</em> gọi chúng được không? Nếu chúng ta gọi chúng, thì chuyện gì sẽ xảy ra nếu chúng ta không truyền <code class=\"language-inline-text\">props</code>? Truyền thêm các tham số khác được không?</strong> Cùng tìm hiểu nào.</p>\n<hr>\n<p>Trong JavaScript, <code class=\"language-inline-text\">super</code> để gọi lại constructor của class cha. (Trong ví dụ của chúng ta, nó trỏ về <code class=\"language-inline-text\">React.Component</code>.)</p>\n<p>Điều quan trọng, bạn <strong>không thể sử dụng <code class=\"language-inline-text\">this</code></strong> trong constructor nếu chưa gọi đến constructor của class cha. JavaScript sẽ không để bạn làm việc này:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 🔴  Không thể dùng `this` được</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ✅  Giờ thì dùng được rồi</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isOn</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Có một lý do chính đáng giải thích vì sao JavaScript phải thực hiện constructor của lớp cha trước khi đụng vào <code class=\"language-inline-text\">this</code>. Hãy xem xét trường hợp sau:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PolitePerson</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🔴  Điều này không cho phép, đọc lý do ở bên dưới</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Chào buổi sáng!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Hãy tưởng tượng, khi bạn có thể dùng <code class=\"language-inline-text\">this</code> trước <code class=\"language-inline-text\">super</code>. Một tháng sau, chúng ta đổi <code class=\"language-inline-text\">greetColleagues</code>, thêm <code class=\"language-inline-text\">this.name</code> khi alert:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Chào buổi sáng!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tên tôi là '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">', rất vui được gặp bạn!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nhưng chúng ta quên rằng <code class=\"language-inline-text\">this.greetColleagues()</code> được gọi trước <code class=\"language-inline-text\">super()</code>, giá trị <code class=\"language-inline-text\">this.name</code> <strong>chỉ có sau khi gọi <code class=\"language-inline-text\">super()</code></strong>! Lúc này bạn có thể thấy, code như thế này khó để biết được lỗi ở đâu.</p>\n<p>Để tránh những điều như vậy, <strong>JavaScript chỉ định rằng nếu bạn muốn sử dụng <code class=\"language-inline-text\">this</code> bên trong constructor, bạn <em>phải</em> gọi <code class=\"language-inline-text\">super</code> trước.</strong> Để cho thằng cha làm việc của nó! Và điều này cũng áp dụng với các lớp React components:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ✅  Okay, dùng `this` được rồi</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isOn</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Chúng ta cùng đến với câu hỏi khác: phải sao phải truyền vào <code class=\"language-inline-text\">props</code>?</p>\n<hr>\n<p>Bạn hãy nghĩ đơn giản rằng khi truyền <code class=\"language-inline-text\">props</code> vào <code class=\"language-inline-text\">super</code> là cần thiết để <code class=\"language-inline-text\">React.Component</code> constructor có thể thiết lập <code class=\"language-inline-text\">this.props</code>:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Bên trong React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nó thật sự là <a href=\"https://github.com/facebook/react/blob/1d25aa5787d4e19704c049c3cfa985d3b5190e0d/packages/react/src/ReactBaseClasses.js#L22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cách mà chúng tôi thực hiện bên trong React.Component</a>.</p>\n<p>Bằng cách nào đó, nếu bạn gọi <code class=\"language-inline-text\">super()</code> mà không có tham số <code class=\"language-inline-text\">props</code>, bạn vẫn có thể sử dụng <code class=\"language-inline-text\">this.props</code> trong phương thức <code class=\"language-inline-text\">render</code> và các phương thức khác. (Nếu không tin, hãy tự kiểm tra xem!)</p>\n<p>Vậy <em>nó</em> hoạt động như thế nào? Hóa ra <strong>React đã gán <code class=\"language-inline-text\">props</code> cho một instance ngay sau constructor:</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token comment\">// Bên trong React</span>\n  <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  instance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Thế nên khi bạn quên bỏ thằng <code class=\"language-inline-text\">props</code> vào <code class=\"language-inline-text\">super()</code>, thì trong React bạn vẫn có thể gọi nó sau đó. Có một lý do cho việc này.</p>\n<p>Khi React hỗ trợ thêm class, nó không chỉ hỗ trợ class cho mỗi phiên bản ES6. Mà mục tiêu chính là hỗ trợ nhiều class abstract nhất có thể. <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#other-languages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Không rõ</a> làm thế nào ClojureScript, CoffeeScript, ES6, Fable, Scala.js, TypeScript, hoặc các giải pháp khác định nghĩa component. Vì vậy, React sử dụng <code class=\"language-inline-text\">super()</code> không hề là quan điểm cá nhân.</p>\n<p>Vậy có nghĩa là bạn có thể gọi <code class=\"language-inline-text\">super()</code> thay vì <code class=\"language-inline-text\">super(props)</code>?</p>\n<p><strong>Không. Như vậy rất khó hiểu.</strong> Chắc chắn, React sẽ gán <code class=\"language-inline-text\">this.props</code> <em>sau khi</em>  constructor chạy. Nhưng <code class=\"language-inline-text\">this.props</code> vẫn  là <code class=\"language-inline-text\">undefined</code> <em>giữa</em> lúc gọi <code class=\"language-inline-text\">super</code> và kết thúc constructor:</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Bên trong React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Bên trong code của bạn</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😬 Chúng ta không truyền vào props</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ✅ {}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😬 undefined - chưa định nghĩa </span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Việc debug sẽ trở nên khó khăn nếu như một vài phương thức được gọi <em>từ</em> constructor. <strong>Đó là lý do vì sao luôn khuyến khích bạn sử dụng <code class=\"language-inline-text\">super(props)</code>, mặc dù nó không phải quy định bắt buộc:</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Chúng ta truyền props vào </span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ✅ {}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ {}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Điều này đảm bảo <code class=\"language-inline-text\">this.props</code> sẽ được thiết lập trong constructor.</p>\n<hr>\n<p>Có một điều cuối mà khiến cho các fan lâu năm của React tò mò.</p>\n<p>Bạn có thể thấy rằng khi sử dụng Context API bên trong class (hoặc với <code class=\"language-inline-text\">contextTypes</code> cũ hoặc với <code class=\"language-inline-text\">contextType</code> API được thêm vào ở React 16.6), <code class=\"language-inline-text\">context</code> được đẩy vào tham số thứ hai trong constructor.</p>\n<p>Vậy tại sao chúng ta không viết là <code class=\"language-inline-text\">super(props, context)</code>? Có thể chứ, nhưng context ít khi sử dụng nên việc phát sinh lỗi cũng ít xuất hiện.</p>\n<p><strong>Với <a href=\"https://github.com/tc39/proposal-class-fields\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">class fields proposal</a> thì những vấn đề này hầu như biến mất.</strong> Không có constructor, tất cả các tham số đều được truyền vào một cách tự động. Đây là những lý do cho phép một biểu thức <code class=\"language-inline-text\">state = {}</code> bao gồm cả các tham chiếu <code class=\"language-inline-text\">this.props</code> hoặc <code class=\"language-inline-text\">this.context</code> nếu cần thiết.</p>\n<p>Với Hooks, chúng ta thậm chí không có <code class=\"language-inline-text\">super</code> hoặc <code class=\"language-inline-text\">this</code>. Nhưng chủ đề đó sẽ giành cho một ngày khác.</p>\n<p><strong>Bài viết được dịch từ</strong> <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://overreacted.io/why-do-we-write-super-props/\">Why Do We Write super(props)?</a></p>\n","cover_image":""}},{"node":{"id":"d0dc0513407321acf8243a499cdf0280","title":"Thuật toán QuickSort","path":"/2019-11-02-gioi-thieu-thuat-toan-quicksort/","date":"2019-11-02","timeToRead":2,"desc":"Một thuật toán rất phổ biến mà chúng ta phải nắm thật chắc và hình dung được cách hiện thực nó ngay khi được nhắc tới.","content":"<h2 id=\"một-chút-lịch-sử\"><a href=\"#m%E1%BB%99t-ch%C3%BAt-l%E1%BB%8Bch-s%E1%BB%AD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một chút lịch sử</h2>\n<p>Thuật toán <em>chia để trị</em> phổ biến nhất mà tất cả anh em lập trình đều được học qua thời mài đích trường đại học. Được tạo ra bởi Tony Hoare năm 1959</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--k1SblSX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.coderscat.com/wp-content/uploads/2019/10/2019_10_09_quick_sort.org_20191009_203646.png\" alt=\"Thuật toán Quicksort\"></p>\n<p>Trên là hình ông Tony Hoare trình làng thuật toán QuickSort năm 1960 tại Moscow.</p>\n<p>Để mô tả thuật toán này, nó bao gồm các bước chính như sau:</p>\n<ol>\n<li>Nếu chỉ còn một phần tử hoặc không còn phần tử nào để sort, nghĩa là <strong>KẾT THÚC</strong></li>\n<li>Mỗi lần gọi sort chúng ta chọn một phần tử làm <strong>CHỐT ĐỂ SO SÁNH</strong></li>\n<li>So sánh tất cả các phần tử còn lại với <strong>CHỐT ĐỂ SO SÁNH</strong>, nhỏ hơn đưa vào một <strong>nhóm nhỏ hơn</strong>, lớn hơn đưa qua <strong>nhóm lớn hơn</strong></li>\n<li>(Đệ quy) thực hiện đúng những bước đã làm với các phần tử thuộc 2 nhóm mới có</li>\n</ol>\n<p>Độ phức tạp của nó là O(NlogN), trường hợp xấu nhất là O(N2). Đại khái nó là một trong những phương pháp sort mảng hiệu quả nhất.</p>\n<p>Để hiểu độ phức tạp của thuật toán, các bạn <a href=\"https://luubinhan.github.io/blog/2019-10-28-gioi-thieu-ve-do-phuc-tap-cua-thuat-toan\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">đọc bài này</a></p>\n<h2 id=\"hiện-thực-bằng-javascript\"><a href=\"#hi%E1%BB%87n-th%E1%BB%B1c-b%E1%BA%B1ng-javascript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hiện thực bằng Javascript</h2>\n<p>Trong javascript đã có sẵn hàm <code class=\"language-inline-text\">sort</code> vậy tại sao chúng ta lại quan tâm tới thuật toán QuickSort?</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [2, 3, 5, 6, 7, 9]</span></code></pre></div>\n<p>Hàm <code class=\"language-inline-text\">sort()</code> của javascript sẽ tùy thuộc vào engine trình duyệt, <strong>insertion sort</strong> cho Chrome và <strong>merge sort</strong> cho Firefox và Safari</p>\n<p>Nó <strong>không phù hợp khi phải sort số lượng dữ liệu lớn</strong>, hay là một mảng object, dạng <code class=\"language-inline-text\">[{order: 1}, {order: 4}, {order: 2}]</code></p>\n<p>Hiện thực cho mảng bình thường, phần mảng là object các bạn chỉ cần thay điều kiện so sánh</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">unsortedArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> smaller <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">let</span> larger <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>unsortedArray<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> unsortedArray<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> unsortedArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>unsortedArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> unsortedArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            smaller<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>unsortedArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>unsortedArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> unsortedArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n            larger<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>unsortedArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>smaller<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>unsortedArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>larger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n","cover_image":""}},{"node":{"id":"18cb92ac02ca5ea7699b99123861aa16","title":"JAMstack và ngành công nghiệp hủ tiếu gõ Việt Nam","path":"/2019-10-30-gioi-thieu-jamstack/","date":"2019-10-30","timeToRead":7,"desc":"Sau khi đọc bài này, bạn sẽ hiểu được JAMstack là gì, lợi lộc gì, để hiện thức hóa JAMstack bạn cần nghiên cứu những công cụ gì","content":"<p>Nếu bạn đang là developer, chắc gần đây có nghe từ <strong>JAMstack</strong>, cũng có khi bạn đang làm JAMstack nhưng chưa ai phổ biến cho bạn nó là gì.</p>\n<p>Chữ <strong>JAM</strong> là viết tắt cho <strong>JavaScript-APIs-Markup</strong>. Còn <em>stack</em> là ổ bánh mì kẹp thịt của Việt Nam</p>\n<p><img src=\"https://monngonmoingay.com/wp-content/uploads/2015/08/9.banhmikepgakhia1.png\" alt=\"JAMstack và ngành công nghiệp hủ tiếu gõ Việt Nam\"></p>\n<p>Lấy ví von ổ bánh mì Việt Nam là có lý do. Tùy thuộc vào cô bán, họ sẽ bỏ ít-hay-nhiều <strong>lớp</strong> thịt mỡ vào trong đó tùy thuộc vào giá tiền bạn bỏ ra.</p>\n<p>Bỏ qua chuyện ăn uống, quay lại với công nghệ, JAMstack là một cách kiến trúc các ứng dụng web với mục tiêu <strong>tiết kiệm hơn</strong>  trong triển khai, <strong>bảo mật hơn</strong>  trong lúc vận hành, <strong>chạy lẹ hơn</strong> trong lúc đông khách (user), <strong>dễ dàng nhân rộng</strong> hơn khi số lượng khách hàng càng tăng dần (<em>hứa hẹn thật nhiều không biết có thất hứa nhiều ko</em>)</p>\n<p>JAMstack không bắt buộc bạn sử dụng một công nghệ nào cụ thể, bạn có thể dùng javascript thuần, typescript, Elm, Clojure, WebAssembly đều được. Bạn dùng javascript để <code class=\"language-inline-text\">fetch</code> dữ liệu từ nguồn nào cũng được, thirt-party APIs, API ở server nhà bạn, các Serverless function, hoặc gôm 2 ba ông xài chung được luôn. Về mặt nội dung, bạn có thể chọn các kiểu tạo static site đang có, Hugo, GatsbyJS, Jekyll, Next.js, Nuxt.js, VuePress... Nói chung đây là một kiến trúc không quan trọng cách bạn làm nó bằng gì, như thế nào, chỉ đặt yêu cầu đầu ra của bạn cần đạt được.</p>\n<h2 id=\"vì-sao-lại-có-sự-xuất-hiện-của-mô-hình-kiến-trúc-này\"><a href=\"#v%C3%AC-sao-l%E1%BA%A1i-c%C3%B3-s%E1%BB%B1-xu%E1%BA%A5t-hi%E1%BB%87n-c%E1%BB%A7a-m%C3%B4-h%C3%ACnh-ki%E1%BA%BFn-tr%C3%BAc-n%C3%A0y\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vì sao lại có sự xuất hiện của mô hình kiến trúc này</h2>\n<p><em>Có thể xem web truyền thống là mô hình bán hủ tiếu gia truyền, nhà nào bán, nhà đó làm hết tất cả các khâu, có một công thức nấu nước lèo riêng, bạn cần ước lượng để nấu nồi nước lèo ít nhất một 100 tô thì mới có lời. Khi bạn mở thành công một chi nhánh, việc mở thành một chuỗi cửa hàng hủ tiếu sẽ phức tạp hơn vì bạn chưa có kinh nghiệm nấu cho 10000 tô nước lèo một ngày, và còn vô số thứ khác bạn cần tính toán thật kỹ.</em></p>\n<p>Các ứng dụng web truyền thống và CMS phụ thuộc vào code server side để render và return HTML trên từng request. Đa phần chúng ta cần database hoặc các loại lưu trữ dữ liệu động khác. Với hệ thống truyền thống, cần mở rộng nghĩa là cần nhiều server hơn, các kỹ thuật caching để khi dữ lớn cực lớn, web vẫn chạy nhanh.</p>\n<p><em>JAMstack có thể hình dung là mô hình bán hủ tiếu gõ ở Việt Nam, tất cả nước lèo được sản xuất công nghiệp ở một nhà máy, người bán có thể bán hủ tiếu, mì, bánh canh nui gì cũng được. Việc nhân rộng mô hình hủ tiếu gõ là vô cùng nhanh và dễ, người ta chỉ cần mua thứ nước đã nấu sẵn về là bán. Chi phí khi sản xuất công nghiệp bao giờ cũng xuống thấp hơn với nhà tự nấu, và nếu bạn ăn nên làm ra, việc mở rộng thành 10 quán hủ tiếu khắp phường 10 quận 8 sẽ không quá nhiều khó khăn.</em></p>\n<p>Theo cách tiếp cận của JAMstack, mỗi trang đã được build sẵn khi ứng dụng deploy. Toàn bộ HTML, JavaScript, CSS, hình cần thiết của ứng dụng đã được <em>nấu chính sẵn</em>. Mục tiêu là giảm số việc cần làm ở server xuống, việc truyền tất cả file dạng tĩnh bao giờ cũng đơn giản và nhanh hơn chạy server code.</p>\n<p>Mà khi đã là static file, có thể được cache lại ở tất cả CDN, đưa lên CDN làm giảm đáng kể chi phí duy trì hệ tầng server, không những vậy, với hệ thống quán hủ tiếu gõ rộng khắp, user chỉ cần \"ra đường là có\", user sẽ có được tô hủ tiếu ăn liền không mất thời gian chạy từ quận 8 đến Củ Chi để ăn tô hủ tiếu bò.</p>\n<p><img src=\"https://scotch-res.cloudinary.com/image/upload/dpr_1,w_800,q_auto:good,f_auto/v1566357555/zhjcksws2p1n5jaux32k.png\" alt=\"Giới thiệu JAMstack\"></p>\n<p>Chất lượng nồi nước được nấu sẵn chắc chắn sẽ ổn định hơn nhà tự nấu, vì nó đã quy chuẩn thành dạng công nghiệp. Không sợ hôm nay ra chợ thiếu xương, giá thịt hôm nay tăng vọt.</p>\n<p>Giảm xử lý trên server, tăng cường cung cấp file dạng static, rủi ro cũng sẽ hạ thấp xuống. Phần xử lý server được quản lý và vận hành bởi những tai to mặt lớn, khả năng có lỗ hỏng cũng sẽ thấp hơn khi tự vận hành.</p>\n<h2 id=\"một-số-cột-mốc\"><a href=\"#m%E1%BB%99t-s%E1%BB%91-c%E1%BB%99t-m%E1%BB%91c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một số cột mốc</h2>\n<p><em>2015</em> - static site xuất hiện trở lại, có sự phản bác nhẹ các hệ thống CMS đang thịnh hành</p>\n<p><em>2016</em> - một bước lùi nhẹ, chưa có nhiều công cụ để làm static site <em>cool</em>, mọi thứ còn quá thô sơ. Một nhóm các lập trình viên <em>máu mặt</em> giới thiệu thuật ngữ JAMstack đến cộng đồng và lôi kéo vào nhóm phát triển để thúc đẩy sự đi lên cho JAMstack.</p>\n<p><em>2017</em> - dụ dỗ thành công, xuất hiện cộng đồng làm static site, \"static\" không còn là \"static\" đúng nghĩa nữa, nhiều đồ chơi để build ra static xuất hiện. Một vài công ty tên tuổi bắt đầu áp dụng JAMstack như <a href=\"https://www.sequoiacap.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sequoia Capital</a>, <a href=\"https://mailchimp.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mailchimp</a> &#x26; <a href=\"https://www.redbull.com/int-en/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Red Bull</a>.</p>\n<p><em>2018</em> - Năm bùng nổ của JAMstack, nhà nhà người người nói về nó, Gatsby, Netlify, Contentful những món đồ chơi xịn sò càng hoàn thiện.</p>\n<p><em>2019</em> - Kiến trúc web cũ tồn tại hơn chục năm không còn thống trị như trước đây, JAMstack bước vào cuộc chơi trở thành một lựa chọn không thua kém.</p>\n<p><img src=\"https://snipcart.com/media/204006/jamstack-vs-wordpress-1.png\" alt=\"jamstack-vs-wordpress\"></p>\n<h2 id=\"công-cụ-để-nấu-jamstack\"><a href=\"#c%C3%B4ng-c%E1%BB%A5-%C4%91%E1%BB%83-n%E1%BA%A5u-jamstack\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Công cụ để \"nấu\" JAMstack</h2>\n<p>Có nhiều công cụ để tạo static site, tất cả được liệt kê trên <a href=\"https://www.staticgen.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">StaticGen</a></p>\n<p><img src=\"https://snipcart.com/media/204009/static-site-generators.png\" alt=\"static-site-generators\"></p>\n<p>Bạn thích và quen cái nào thì xài cái đó, không có ai chiếm ưu thế tuyệt đối.</p>\n<p>Về phía backend, cũng có nhiều lựa chọn <a href=\"https://headlesscms.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HeadlessCMS để sử dụng</a> (nhóm các phần mềm để tương tác với database trong JAMstack được gọi là HeadlessCMS, dân công nghệ lắm thuật ngữ lắm)</p>\n<p><img src=\"https://snipcart.com/media/204007/headless-cms.png\" alt=\"headless-cms\"></p>\n<p>Phía deploy, chúng ta có thể đặt code trên <a href=\"https://github.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub pages</a>, <a href=\"https://www.netlify.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Netlify</a> hoặc <a href=\"https://github.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Zeit</a></p>\n<p>Với những tính năng phía backend có thể được outsource cho các dịch vụ SaaS.</p>\n<ul>\n<li><a href=\"https://snipcart.com/blog/foxycart-vs-snipcart-review\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Foxy.io</a>, Snipcard, Moltin, nút mua của Shopify cho các tính năng e-commerce</li>\n<li>FormKeep, <a href=\"https://www.typeform.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Typeform</a>, Formspree, <a href=\"https://www.netlify.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Netlify</a> để làm việc với form</li>\n<li>Algolia, Google Custom Search, Fuse.js, Lunr.js, List.js cho tính năng tìm kiếm</li>\n<li>Disqus, <a href=\"https://staticman.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Staticman</a> cho phần bình luận</li>\n</ul>\n<p>Danh sách <em>dài hơi</em> hơn xem trên <a href=\"https://github.com/agarrharr/awesome-static-website-services\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github</a></p>\n<h2 id=\"lợi-ích-cho-khách-hàng\"><a href=\"#l%E1%BB%A3i-%C3%ADch-cho-kh%C3%A1ch-h%C3%A0ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lợi ích cho khách hàng</h2>\n<p>Về phía cộng đồng lập trình viên, chúng ta đa <strong>bị dụ khị thành công</strong>. Chúng ta ai cũng muốn mua nước lèo nấu sẵn về mở 100 quán hủ tiều gõ. Giờ đã mở 100 cửa hàng hủ tiếu gõ, làm sao chúng ta <em>kêu gọi</em> được mọi người ăn hủ tiếu gõ ngon-bổ-rẻ</p>\n<p><img src=\"https://snipcart.com/media/203996/jamstack-benefits-security-2.png\" alt=\"jamstack-benefits-security\"></p>\n<p>Câu trả lời đang đợi anh em chúng ta, những câu khách hàng hay hỏi</p>\n<ul>\n<li>Cũng hứa hẹn đấy, nhưng chị muốn có mấy tính năng <em>động</em> cho web em ơi?</li>\n<li>Chị muốn quản lý và phần quyền user thì sao em à?</li>\n</ul>\n<p><strong>Tài liệu đã sử dụng tham khảo</strong></p>\n<p><a href=\"https://scotch.io/tutorials/secure-and-scalable-an-introduction-to-jamstack\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://scotch.io/tutorials/secure-and-scalable-an-introduction-to-jamstack</a></p>\n<p><a href=\"https://snipcart.com/blog/jamstack\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://snipcart.com/blog/jamstack</a></p>\n","cover_image":""}},{"node":{"id":"195ab57756334d54d5b91aec0cf11fd1","title":"Độ phức tạp của thuật toán","path":"/2019-10-28-gioi-thieu-ve-do-phuc-tap-cua-thuat-toan/","date":"2019-10-28","timeToRead":5,"desc":"Một cách chuẩn hóa trong ngành lập trình để đánh giá độ phức tạp của giải thuật","content":"<p>Một <strong>giải thuật</strong> sẽ bao gồm <strong>các bước tuần tự</strong> để giải quyết một vấn đề, để đi qua các bước tuần tự này, sẽ tốn một <strong>khoản thời gian</strong> nhất định để hoàn thành. Thời gian tiêu tốn của một giải thuật để giải quyết vấn đề được gọi là <strong>Độ phức tạp của thuật toán</strong></p>\n<p>Trong trường hợp xấu nhất, <strong>thời gian chạy của một giải thuật tỉ lệ thuận với số lượng tham số đầu vào</strong></p>\n<p>Giống như giải toán, chuyện có nhiều cách khác nhau để giải cùng một bài toán là bình thường. Ví dụ như nhân 2 con số, có rất nhiều cách để tính nhẩm được, chứ không phải chỉ có đúng một cách mà thầy cô bạn dạy hồi tiểu học, cách nào giúp ta nhẩm nhanh hơn thì được gọi là ít phức tạp hơn.</p>\n<p>Độ phức tạp của thuật toán được diễn đạt bằng ký hiệu <strong>chữ O viết hoa</strong>. O cho biết thời gian cần chạy của giải thuật <strong>tỉ lệ như thế nào</strong> với số lượng tham số đầu vào (như một dạng đơn vị hé)</p>\n<p><img src=\"https://i1.wp.com/www.jenniferbland.com/wp-content/uploads/big-o-complexity.png?w=783&#x26;ssl=1\"></p>\n<h2 id=\"o1---độ-phức-tạp-không-đổi\"><a href=\"#o1---%C4%91%E1%BB%99-ph%E1%BB%A9c-t%E1%BA%A1p-kh%C3%B4ng-%C4%91%E1%BB%95i\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>O(1) - Độ phức tạp không đổi</h2>\n<p>Giải thuật nào có độ phức tạp bằng <strong>O(1)</strong> nghĩa là giải thuật đó không phụ thuộc giá trị input có <em>bự</em> bao nhiêu đi nữa, nó luôn có độ phức tạp không đổi.</p>\n<p>Nếu một hàm có độ phức tạp bằng O(1) nghĩa là trường hợp đẹp nhất của hàm, tối ưu nhất.</p>\n<p><img src=\"https://i0.wp.com/www.jenniferbland.com/wp-content/uploads/O1-constant-time-complexity.jpg?w=416&#x26;ssl=1\"></p>\n<p>Ví dụ, hash table</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*1 triệu phần tử chẳng hạn*/</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Câu lệnh sau có O(1)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token string\">\"một key bất kỳ\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// hàm lấy giá trị cuối cùng của mảng</span>\n<span class=\"token comment\">// độ phức tạp là O(1), dù mảng có bao nhiêu phần tử </span>\n<span class=\"token comment\">// cũng ko ảnh hưởng thời gian chạy</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLast</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">items</span> <span class=\"token operator\">=></span> items<span class=\"token punctuation\">[</span>items<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"olog-n\"><a href=\"#olog-n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>O(log n)</h2>\n<p>Thời gian chạy càng tăng, mức độ phức tạp càng giảm</p>\n<p>Ví dụ bạn muốn tìm số điện thoại của một người trong cuốn danh bạ khoản một triệu cái tên. Điều đầu tiên chúng làm là tìm mở đại khoản giữa cuốn danh bạ, so sanh cái tên hiện tại nằm trước hay nằm sau trang đó, lặp lại tương tự với nhóm mới tìm được.</p>\n<p>Rõ ràng khi càng tìm, số lượng tên phải kiểm tra càng giảm đáng kể (mỗi lần bỏ qua 1 nữa). Nếu có 3 tên, chúng ta chỉ tốn 2 bước là tìm ra. Có 15 tên, chúng ta chỉ cần tối đa 4 bước.</p>\n<p><img src=\"https://i1.wp.com/www.jenniferbland.com/wp-content/uploads/Olog-n-logarithmic-complexity.jpg?w=472&#x26;ssl=1\"></p>\n<p>Thời gian thực hiện thuật toán giảm đáng kể khi số lượng input giảm.</p>\n<p>Ví dụ như thuật toán tìm kiếm QuickSort</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">quickSort</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">list</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> pivot <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> left  <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> total <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> total<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> pivot<span class=\"token punctuation\">)</span>\n      left<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n      right<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">...</span><span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    pivot<span class=\"token punctuation\">,</span> \n    <span class=\"token operator\">...</span><span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"on---thời-gian-tịnh-tiến-theo-số-lượng-input\"><a href=\"#on---th%E1%BB%9Di-gian-t%E1%BB%8Bnh-ti%E1%BA%BFn-theo-s%E1%BB%91-l%C6%B0%E1%BB%A3ng-input\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>O(n) - Thời gian tịnh tiến theo số lượng input</h2>\n<p>Đây là những thuật toán có tốc độ tăng <strong>song hành</strong> với số lượng input tăng, trường hợp xấu nhất sẽ rơi vào khi số lượng input nhiều nhất</p>\n<p>Ví dụ, bạn in ra giá trị của một mảng 10 phần tử, loop qua toàn bộ các phần tử để làm việc in này. Khi số lượng phần tử tăng lên thành 1000 lần thì bạn cũng phải loop qua 1000 phần tử</p>\n<p><img src=\"https://i2.wp.com/www.jenniferbland.com/wp-content/uploads/On-Linear-Complexity.jpg?w=463&#x26;ssl=1\"></p>\n<p>Ví dụ các vòng lặp <code class=\"language-inline-text\">for</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">findIndex</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">items<span class=\"token punctuation\">,</span> match</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> total <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> total<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> match<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> array<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// loop 1 lần, tốt nhất</span>\n<span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n<span class=\"token comment\">// loop 4 lần, xấu nhất</span>\n<span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// loop 4 lần, xấu nhất</span>\n<span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -1 </span></code></pre></div>\n<h2 id=\"on2----thời-gian-chạy-tăng-theo-n-mũ-2\"><a href=\"#on2----th%E1%BB%9Di-gian-ch%E1%BA%A1y-t%C4%83ng-theo-n-m%C5%A9-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>O(n^2)  - Thời gian chạy tăng theo n mũ 2</h2>\n<p>Ngược lại với <strong>O(log n)</strong>, thời gian chạy của thuật toán nào có giá trị này sẽ tăng theo **số lượng input mũ 2)</p>\n<p><img src=\"https://i1.wp.com/www.jenniferbland.com/wp-content/uploads/On2-quadratic-time-complexity.jpg?w=382&#x26;ssl=1\"></p>\n<p>Trong lập trình chúng ta sẽ tránh để các đoạn code nào bị rơi vào độ phức tạp O(n^2)</p>\n<p>Ví dụ, 2 vòng lặp for lồng nhau, bubble sort.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">findMatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> string<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> string<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> string<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://www.freecodecamp.org/news/time-is-complex-but-priceless-f0abd015063c/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.freecodecamp.org/news/time-is-complex-but-priceless-f0abd015063c/</a></p>\n<p><a href=\"http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html</a></p>\n<p><a href=\"https://medium.com/@gmedina229/big-o-in-javascript-36ff67766051\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@gmedina229/big-o-in-javascript-36ff67766051</a></p>\n<p><a href=\"https://medium.com/javascript-scene/time-complexity-big-o-notation-1a4310c3ee4b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/javascript-scene/time-complexity-big-o-notation-1a4310c3ee4b</a></p>\n<p><a href=\"https://medium.com/cesars-tech-insights/big-o-notation-javascript-25c79f50b19b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/cesars-tech-insights/big-o-notation-javascript-25c79f50b19b</a></p>\n<p><a href=\"https://www.jenniferbland.com/time-complexity-analysis-in-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.jenniferbland.com/time-complexity-analysis-in-javascript/</a></p>\n","cover_image":""}},{"node":{"id":"50a3d31f962a5dc33f5ab5add39a40fa","title":"Authentication bằng Token - Bài 2: Giới thiệu JWT","path":"/2019-10-02-giai-thich-jwt-la-gi/","date":"2019-10-02","timeToRead":2,"desc":"Phần mềm ngày nay được phát triển theo hướng sử dụng token để làm authentication, để có thể tách chức năng này ra như một phần độc lập, cho phép phần mềm có thể scale ở mức cao nhất","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#jwt-l%c3%a0-g%c3%ac\">JWT là gì</a></li>\n<li><a href=\"#c%c6%a1-ch%e1%ba%bf-c%e1%bb%a7a-jwt\">Cơ chế của JWT</a></li>\n</ul>\n<!-- /TOC -->\n<p>Trước khi đọc bài này, các bạn hãy đọc bài <a href=\"/2019-10-01-giai-thich-authentication-bang-token\">Ví dụ thực tế để hiểu rõ hơn cách authentication bằng token</a>, để hiểu được cơ chế authentication bằng token, tiếng Việt mình có thể dịch ra là Xác thực tài khoản bằng một string đặc biệt (token là một dạng string được tạo ra theo một cơ chế đặc biệt <em>bí hiểm</em>)</p>\n<h2 id=\"jwt-là-gì\"><a href=\"#jwt-l%C3%A0-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT là gì</h2>\n<blockquote>\n<p>TOKEN = một dạng string được tạo ra theo một cơ chế</p>\n</blockquote>\n<p>JWT chính là tên 1 cơ chế để tạo ra token (tức, có nhiều cơ chế khác nữa không chỉ riêng JWT)</p>\n<p>JWT viết tắt của JSON Web Token</p>\n<p>Cái cơ chế JWT này, nó đã nhét cái gì vào trong string, mời bạn đọc tiếp là rõ</p>\n<h2 id=\"cơ-chế-của-jwt\"><a href=\"#c%C6%A1-ch%E1%BA%BF-c%E1%BB%A7a-jwt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cơ chế của JWT</h2>\n<p>Một request sử dụng JWT sẽ gửi kèm trong header</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">Authorization<span class=\"token operator\">:</span> Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.XbPfbIHMI6arZ3Y922BhjWgQzWXcXNrz0ogtVhfEd2o</code></pre></div>\n<p>Không cần quan tâm cái <strong>Bearer</strong>, nó là quy định thôi, cái cần quan tâm là đoạn hầm bà lằng phía sau nó</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.XbPfbIHMI6arZ3Y922BhjWgQzWXcXNrz0ogtVhfEd2o</code></pre></div>\n<p>Dòm kỹ một tí bạn sẽ thấy nó có 2 dấu <code class=\"language-inline-text\">.</code>, tách cái string này ra làm 3 phần <code class=\"language-inline-text\">header.payload.signature</code></p>\n<ul>\n<li><strong>Header</strong>: chứa kiểu dữ liệu, thuật toán mã hóa chữ ký</li>\n<li><strong>Payload</strong>: một số thông tin như thời gian expire, thông tin user,... tùy thuộc server muốn đưa về cái gì.</li>\n<li><strong>Signature</strong>: chữ ký điện tử, chứa thông tin để server có thể verify cái JWT này</li>\n</ul>\n<p>Chữ ký sẽ được tạo ra ở server, có thể là như thế này (có nhiều cách khác)</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> signature <span class=\"token operator\">=</span> <span class=\"token function\">RS256Algorithm</span><span class=\"token punctuation\">(</span><span class=\"token function\">encode64</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">encode64</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> secret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// secret là một chìa khóa (như password ấy mà) chỉ có server mới biết</span></code></pre></div>\n<p>Còn cái JWT sẽ được cấp bằng thuật toán cao siêu nhất vũ trụ <strong>nối chuỗi</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">encode64</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">encode64</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span> signature<span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://blog.hasura.io/content/images/2019/08/Group.png\" alt=\"Authentication bằng Token - Bài 2: Giới thiệu JWT\"></p>\n<p>Đọc tiếp</p>\n<ul>\n<li><a href=\"/2019-10-01-giai-thich-authentication-bang-token\">Authentication bằng Token - Bài 1: cơ chế authentication bằng token</a></li>\n<li><a href=\"/2019-10-02-giai-thich-jwt-la-gi\">Authentication bằng Token - Bài 2: Giới thiệu JWT</a></li>\n<li>[Authentication bằng Token - Bài 3: Hướng dẫn authentication với React]</li>\n<li><a href=\"/2018-11-18-mot-so-van-de-can-quan-tam-de-bao-mat-web\">Bảo mật web - Một số kiểu tấn công</a></li>\n</ul>\n","cover_image":""}},{"node":{"id":"8ce45ee877f65e8cebb28cf45644de2e","title":"Authentication bằng Token - Bài 1: Cơ chế authentication bằng token","path":"/2019-10-01-giai-thich-authentication-bang-token/","date":"2019-10-01","timeToRead":4,"desc":"Phần mềm ngày nay được phát triển theo hướng sử dụng token để làm authentication, để có thể tách chức năng này ra như một phần độc lập, cho phép phần mềm có thể scale ở mức cao nhất","content":"<p>Trong bài 1 này sẽ giải thích các thuật ngữ và hướng giải quyết vấn đề xác thực user bằng token</p>\n<p>Tham khảo bài <a href=\"/2019-08-30-lam-quen-voi-kien-truc-serverless\">Làm quen với kiến trúc Serverless</a> để biết tại sao lại có nhu cầu tách phần authentication ra thành một service riêng.</p>\n<p>Ví dụ thực tế để hiểu rõ hơn cách authentication bằng token, để các bạn dễ nhớ cơ chế authentication token vận hành, chúng ta dùng một quy trình có thật trong cuộc sống</p>\n<ul>\n<li><strong>ứng dụng</strong> = <strong>khách sạn</strong></li>\n<li><strong>authentication service</strong> = <strong>tiếp tân khách sạn</strong></li>\n<li><strong>resource của ứng dụng</strong> = <strong>phòng khách sạn</strong></li>\n<li><strong>access token</strong> = <strong>thẻ từ khách sạn</strong></li>\n<li><strong>thông tin xác thực</strong> = <strong>chứng minh nhân dân/ hoặc passport</strong></li>\n</ul>\n<p>Chúng ta sẽ nhớ cơ chế token authentication này đến hết phần đời còn lại!</p>\n<p>Khi chúng ta bước vào một khách sạn, chúng ta được phép đi đến những khu vực <em>miễn phí</em>, như sảnh chờ, nhà vệ sinh chung</p>\n<blockquote>\n<p>Mở một ứng dụng, chúng ta có thể truy cập các trang public như homepage</p>\n</blockquote>\n<p>Tuy nhiên để có thể vào phòng, hồ bơi, chúng ta cần thẻ từ của khách sạn</p>\n<blockquote>\n<p>Để truy cập vào trang account, lấy các thông tin private, chúng ta cần token</p>\n</blockquote>\n<p>Chúng ta bước tới chỗ quầy lễ tân, đưa CMND, bộ phận tiếp tân sẽ xác thực thông tin này trước khi đưa cho chúng ta một thẻ từ</p>\n<blockquote>\n<p>User đi tới trang đăng ký/đăng nhập để xác thực thông tin. Authentication service kiểm tra thông tin và trả về một token</p>\n</blockquote>\n<p>Với thẻ từ được cấp, chúng ta được phép vào phòng, hồ bơi và một số dịch vụ được quy định trong thẻ từ</p>\n<blockquote>\n<p>Khi có token, chúng ta gửi token này lên API nếu cần lấy một thông tin private</p>\n</blockquote>\n<p>Bên khách sạn sẽ hiểu là, bất kể chỗ nào bạn quét cái thẻ từ đó, thì bạn là người đang nắm giữ thẻ, nghĩa là nó sẽ không cần biết bạn có đưa thẻ đó cho ai mượn không</p>\n<blockquote>\n<p>Với token nhận được, API sẽ biết được ai là người giữ token này. Dù đứa nào đó chôm được cái token này, nó cũng sẽ cho rằng đó là bạn</p>\n</blockquote>\n<p>Khi lỡ làm mất khách thẻ từ, chúng ta bao với quầy lễ tân, họ thực hiện khóa thẻ từ bị mất, đóng cửa phòng</p>\n<blockquote>\n<p>Cơ chế deactive một token sau khi đã cấp phát, tự động \"đá\" user nào dùng token đã deactive ra khỏi các trang private</p>\n</blockquote>\n<p>Chúng ta không thể xài cái thẻ này hoài được, phụ thuộc vào khách sạn, họ có cho thời gian hết hạn cái thẻ đó không</p>\n<blockquote>\n<p>Authentication service sẽ có quyền thiết lập thời gian hết hạn của một token</p>\n</blockquote>\n<p>Nếu bạn <strong>chôm</strong> luôn cái thẻ từ về nhà, lần sau vào khách sạn bạn không sử dụng được nó nữa</p>\n<blockquote>\n<p>Dù cho bạn vẫn giữ token (cũ), nhưng khi đã hết hạn, bạn cũng không lấy được dữ liệu từ API</p>\n</blockquote>\n<p>Khách sạn có thể cung cấp nhiều loại thẻ từ khác nhau, bạn chỉ có thẻ vào phòng mình, nhưng bên vệ sinh họ sẽ có thẻ để mở tất cả các phòng</p>\n<blockquote>\n<p>Admin có những token riêng, được phép truy xuất đến mọi thông tin trên ứng dụng</p>\n</blockquote>\n<p>Để thẻ từ không giả mạo được, nó sẽ đi kèm một chữ ký điện tử (của từng khách sạn) trong đó, nếu không xác thực được chữ ký này, bạn sẽ không thể sử dụng</p>\n<blockquote>\n<p>Token có chữ ký điện tử để đảm bảo không bị làm giả</p>\n</blockquote>\n<p>Hy vọng qua bài viết này, các bạn có thể thuộc làu và giải thích được cơ chế token cho những người ngoại đạo biết nó là gì, vận hành ra làm sao.</p>\n<p>Đọc tiếp</p>\n<ul>\n<li><a href=\"/2019-10-01-giai-thich-authentication-bang-token\">Authentication bằng Token - Bài 1: cơ chế authentication bằng token</a></li>\n<li><a href=\"/2019-10-02-giai-thich-jwt-la-gi\">Authentication bằng Token - Bài 2: Giới thiệu JWT</a></li>\n<li>[Authentication bằng Token - Bài 3: Hướng dẫn authentication với React]</li>\n<li><a href=\"/2018-11-18-mot-so-van-de-can-quan-tam-de-bao-mat-web\">Bảo mật web - Một số kiểu tấn công</a></li>\n</ul>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.jvandemo.com/simple-metaphor-to-understand-and-remember-how-token-based-authentication-works/\">📜 Simple metaphor to easily understand and remember how token-based authentication works</a></p>\n","cover_image":""}},{"node":{"id":"127c7e87031c5caa17358ff4111ea29a","title":"Căn bản cách sử dụng media query","path":"/2019-09-27-huong-dan-su-dung-media-query/","date":"2019-09-27","timeToRead":2,"desc":"Những kiến thức căn bản bắt buộc nhất để bạn làm responsive","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#media-type\">Media type</a></li>\n<li><a href=\"#to%c3%a1n-t%e1%bb%ad-logic\">Toán tử logic</a></li>\n<li><a href=\"#n%c3%a2ng-c%e1%ba%a5p-t%e1%bb%ab-level-4-%c4%91%e1%ba%a1i-kh%c3%a1i-l%c3%a0-s%e1%bb%ad-d%e1%bb%a5ng-tr%c3%aan-tr%c3%acnh-duy%e1%bb%87t-c%c5%a9-kh%c3%b4ng-%c4%91%e1%ba%a3m-b%e1%ba%a3o-%c4%91%c3%b3\">Nâng cấp từ level 4 (đại khái là sử dụng trên trình duyệt cũ không đảm bảo đó)</a></li>\n<li><a href=\"#pattern-hay-s%e1%bb%ad-d%e1%bb%a5ng\">Pattern hay sử dụng</a></li>\n</ul>\n<!-- /TOC -->\n<p>Query media là kiến thức bắt buộc phải nắm nếu muốn làm tốt responsive, nó sẽ được sử dụng trong các trường hợp sau </p>\n<ul>\n<li>Đặt điều kiện để apply css qua <code class=\"language-inline-text\">@media</code> hoặc <code class=\"language-inline-text\">@import</code></li>\n<li>Chỉ định cụ thể trên một số HTML element và các file resource cho <code class=\"language-inline-text\">&lt;link/></code> và <code class=\"language-inline-text\">&lt;source /></code></li>\n<li>Kiểm tra sự thay đổi kích thước của window trong hàm <code class=\"language-inline-text\">Window.matchMedia</code> và <code class=\"language-inline-text\">MediaQueryList.addListener</code> </li>\n</ul>\n<p>Bài này chỉ dùng CSS <code class=\"language-inline-text\">@media</code> để làm ví dụ, sử dụng trên các cách khác cũng tương tự  </p>\n<h2 id=\"media-type\"><a href=\"#media-type\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Media type</h2>\n<p>Chỉ định kiểu device sẽ có hiệu lực, nếu không truyền vào thì mặc định là <code class=\"language-inline-text\">all</code>  </p>\n<ul>\n<li><code class=\"language-inline-text\">all</code> tất cả các loại device</li>\n<li><code class=\"language-inline-text\">print</code> đang xem trên màn hình ở chế độ preview, hoặc lúc in</li>\n<li><code class=\"language-inline-text\">screen</code> chỉ áp dụng trên màn hình</li>\n<li><code class=\"language-inline-text\">speech</code> các thiết bị đọc văn bản  </li>\n</ul>\n<p>Các thằng khác đã bỏ rồi, nên các bạn không cần nhớ chi cho nhiều, thấy một số bài viết trên mạng còn liệt kê chi không biết.  </p>\n<p>Cũng không sử dụng nhiều đến cách này, đa phần khi thiết kế thì người ta làm trên từng kích thước độ rộng màn hình, chứ không nghĩ cụ thể cho từng loại thiết bị như để in, xem trên màn hình  </p>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> print</span> <span class=\"token punctuation\">{</span> ... <span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> screen</span> <span class=\"token punctuation\">{</span> ... <span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> speech</span><span class=\"token punctuation\">{</span> ... <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"toán-tử-logic\"><a href=\"#to%C3%A1n-t%E1%BB%AD-logic\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Toán tử logic</h2>\n<p>Có một số toán tử có thể sử dụng trong câu media là <code class=\"language-inline-text\">not</code>, <code class=\"language-inline-text\">and</code>, <code class=\"language-inline-text\">only</code>, <code class=\"language-inline-text\">,</code> - cái này thì giống như toán tử <code class=\"language-inline-text\">or</code> vậy đó</p>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-height</span><span class=\"token punctuation\">:</span> 680px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> portrait<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span> ... <span class=\"token punctuation\">}</span> \n<span class=\"token atrule\"><span class=\"token rule\">@media</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 30em<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span> ... <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"nâng-cấp-từ-level-4-đại-khái-là-sử-dụng-trên-trình-duyệt-cũ-không-đảm-bảo-đó\"><a href=\"#n%C3%A2ng-c%E1%BA%A5p-t%E1%BB%AB-level-4-%C4%91%E1%BA%A1i-kh%C3%A1i-l%C3%A0-s%E1%BB%AD-d%E1%BB%A5ng-tr%C3%AAn-tr%C3%ACnh-duy%E1%BB%87t-c%C5%A9-kh%C3%B4ng-%C4%91%E1%BA%A3m-b%E1%BA%A3o-%C4%91%C3%B3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nâng cấp từ level 4 (đại khái là sử dụng trên trình duyệt cũ không đảm bảo đó)</h2>\n<p>Trước đây để áp dụng điều kiện <strong>nằm trong khoản màn hình</strong> nào đó, chúng ta dùng kiểu <code class=\"language-inline-text\">max-width:</code> hay <code class=\"language-inline-text\">min-width</code></p>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 30em<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span> ... <span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 30em<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 50em<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span> ... <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Giờ có thể viết theo kiểu</p>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span>width &lt;= 30em<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span> ... <span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span>30em &lt;= width &lt;= 50em<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span> ... <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"pattern-hay-sử-dụng\"><a href=\"#pattern-hay-s%E1%BB%AD-d%E1%BB%A5ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pattern hay sử dụng</h2>\n<p>Tài liệu thì rườm rà, rắc rối vậy thôi, chứ khi sử dụng, mình chỉ dùng bộ media định nghĩa trong bootstrap là đủ xài</p>\n<div class=\"gridsome-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\">// màn hình điện thoại\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 576px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span> ... <span class=\"token punctuation\">}</span>\n// màn hình ipad đứng\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 768px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span> ... <span class=\"token punctuation\">}</span>\n// màn hình bự hơn ipad\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span> ... <span class=\"token punctuation\">}</span>\n// màn hình laptop trở lên\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 1200px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span> ... <span class=\"token punctuation\">}</span></code></pre></div>\n","cover_image":""}},{"node":{"id":"b1591ae9d327c4253c2e900452806cc6","title":"9 VSCode extension hay ho","path":"/2019-09-25-vscode-extension-hay-ho-thuong-su-dung/","date":"2019-09-25","timeToRead":2,"desc":"Tổng hợp những VScode sẽ giúp anh em lập trình chúng ta làm việc hiệu quả hơn","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#settings-sync\">Settings Sync</a></li>\n<li><a href=\"#live-server\">Live Server</a></li>\n<li><a href=\"#bracket-pair-colorizer\">Bracket Pair Colorizer</a></li>\n<li><a href=\"#auto-rename-tag\">Auto Rename Tag</a></li>\n<li><a href=\"#css-peek\">CSS Peek</a></li>\n<li><a href=\"#code-spell-checker\">Code Spell Checker</a></li>\n<li><a href=\"#debugger-for-chrome\">Debugger for Chrome</a></li>\n<li><a href=\"#vscode-icons\">vscode-icons</a></li>\n<li><a href=\"#git-history\">Git History</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"settings-sync\"><a href=\"#settings-sync\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Settings Sync</h2>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync</a></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9RuFyc2c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dukp6c7f7/image/upload/f_auto%2Cfl_lossy%2Cq_auto/s3-ghost/2019/02/Settings-Sync.gif\"></p>\n<p>Bạn quá mệt mỏi việc mỗi lần cài lại máy mới, hay cài lại toàn bộ extension trên công ty, máy ở nhà, cài ngay <a href=\"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Settings Sync</a>, nó sẽ sync toàn bộ những extension chúng ta hay xài lên Gist (phải cho nó access vào Github account)</p>\n<h2 id=\"live-server\"><a href=\"#live-server\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Live Server</h2>\n<p> <a href=\"https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer</a></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--bhb3nSVI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dukp6c7f7/image/upload/f_auto%2Cfl_lossy%2Cq_auto/s3-ghost/2019/02/Live-Server.gif\"></p>\n<p>Một trong những extension siêu ngon cho anh em frontend, tạo server local với live reload</p>\n<h2 id=\"bracket-pair-colorizer\"><a href=\"#bracket-pair-colorizer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bracket Pair Colorizer</h2>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer</a></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gLmyHCgW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dukp6c7f7/image/upload/f_auto%2Cfl_lossy%2Cq_auto/s3-ghost/2019/02/Bracket-Pair-Colorizer.png\"></p>\n<p>Mặc dù VSCode đã có tính năng collapse cho từng khối code, nhưng tô màu rõ ràng cho dễ nhìn cũng vui</p>\n<h2 id=\"auto-rename-tag\"><a href=\"#auto-rename-tag\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Auto Rename Tag</h2>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag</a></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--jn8PcGux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dukp6c7f7/image/upload/f_auto%2Cfl_lossy%2Cq_auto/s3-ghost/2019/02/Auto-Rename-Tag.gif\"></p>\n<p>Cái này sẽ tự động điền đổi tên tag cho khớp với tag đóng/mở</p>\n<p>Đôi khi viết React, Vue cũng hơi chút phiền phức, nhưng cũng đáng để thử</p>\n<h2 id=\"css-peek\"><a href=\"#css-peek\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CSS Peek</h2>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek</a></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cVqIno3Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dukp6c7f7/image/upload/f_auto%2Cfl_lossy%2Cq_auto/s3-ghost/2019/02/CSS-Peek.gif\"></p>\n<p>Xem ngay phần code css đã viết cho class/id. Ngoài ra cũng nhảy được ngay tới phần khai báo đó trong file css/scss/less</p>\n<h2 id=\"code-spell-checker\"><a href=\"#code-spell-checker\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Code Spell Checker</h2>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker</a></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Ij0NAjPP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dukp6c7f7/image/upload/f_auto%2Cfl_lossy%2Cq_auto/s3-ghost/2019/02/Code-Spell-Checker.gif\"></p>\n<p>Với anh em không dùng tiếng anh như tiếng mẹ đẻ chúng ta, một cái tool tự động báo khi có từ sai chính ta là vô cùng cần thiết.</p>\n<h2 id=\"debugger-for-chrome\"><a href=\"#debugger-for-chrome\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Debugger for Chrome</h2>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome</a></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XqJ04htP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/blogs/2016/02/23/chrome-debugger-demo.gif\"></p>\n<p>Được phát triển bởi Microsoft, cho phép chúng ta debug JS ngay trong VSCode, so với mấy IDE khác, thì thằng này chạy khá mượt mà</p>\n<h2 id=\"vscode-icons\"><a href=\"#vscode-icons\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>vscode-icons</h2>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons</a></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--nYvipWN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dukp6c7f7/image/upload/f_auto%2Cfl_lossy%2Cq_auto/s3-ghost/2019/02/vscode-icons.gif\"></p>\n<p>Dành cho mấy đứa thích màu mè như mình, đổi icon nhìn cho phấn chấn tinh thần dễ làm việc</p>\n<h2 id=\"git-history\"><a href=\"#git-history\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Git History</h2>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory</a></p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--u27x1LAs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dukp6c7f7/image/upload/f_auto%2Cfl_lossy%2Cq_auto/s3-ghost/2019/02/Git-History.gif\"></p>\n<p>Nếu đang làm việc với Git (không biết còn dev nào thời này ko dùng Git không), xem history và kiểm tra những chỗ nào đã bị đổi trên VSCode luôn</p>\n","cover_image":""}},{"node":{"id":"60d979b0b44e6a90212b4573178fe1ae","title":"Điều gì nói một trang web có UX tốt trên mobile","path":"/2019-09-23-thiet-ke-website-the-nao-la-chuan-ux-cho-mobile/","date":"2019-09-23","timeToRead":5,"desc":"Sau kết quả nghiên cứu hơn 199 giờ, lấy ý kiến trên một lượng lớn user ở Mỹ, mời họ về công ty của Google, gửi feedback rồi nhận tiền, Google đã tổng hợp một danh sách các điều mà user cho là site này ngon","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#call-to-action-%c4%91%e1%ba%b7t-ngay-gi%e1%bb%afa-tr%c3%aan-c%c3%b9ng\">Call-to-action: đặt ngay giữa, trên cùng</a></li>\n<li><a href=\"#gi%e1%bb%af-menu-%c3%adt-m%c3%a0-ch%e1%ba%a5t\">Giữ menu ít mà chất</a></li>\n<li><a href=\"#l%c3%bac-n%c3%a0o-c%c5%a9ng-ch%e1%bb%aba-%c4%91%c6%b0%e1%bb%9dng-v%e1%bb%81-nh%c3%a0\">Lúc nào cũng chừa đường về nhà</a></li>\n<li><a href=\"#qu%e1%ba%a3ng-c%c3%a1o-d%e1%ba%a1ng-popup-%c4%91%e1%bb%abng-c%c6%b0%e1%bb%9bp-h%e1%ba%bft-s%c3%a0n-di%e1%bb%85n\">Quảng cáo dạng popup đừng cướp hết sàn diễn</a></li>\n<li><a href=\"#t%c3%acm-ki%e1%ba%bfm\">Tìm kiếm</a></li>\n<li><a href=\"#k%e1%ba%bft-qu%e1%ba%a3-search\">Kết quả search</a></li>\n<li><a href=\"#b%e1%bb%99-l%e1%bb%8dc-t%c3%acm-ki%e1%ba%bfm\">Bộ lọc tìm kiếm</a></li>\n<li><a href=\"#cho-user-x%c3%a0i-tr%c6%b0%e1%bb%9bc-khi-%c3%a9p-user-%c4%91%c4%83ng-k%c3%bd\">Cho user xài trước khi ép user đăng ký</a></li>\n<li><a href=\"#mua-h%c3%a0ng-nh%c6%b0-kh%c3%a1ch-n%e1%ba%b7c-danh\">Mua hàng như khách nặc danh</a></li>\n<li><a href=\"#s%e1%bb%ad-d%e1%bb%a5ng-calendar-cho-th%c3%b4ng-tin-ng%c3%a0y-th%c3%a1ng\">Sử dụng calendar cho thông tin ngày tháng</a></li>\n<li><a href=\"#h%e1%ba%a1n-ch%e1%ba%bf-l%e1%bb%97i-b%e1%ba%aft-validation-ngay-khi-nh%e1%ba%adp\">Hạn chế lỗi, bắt validation ngay khi nhập</a></li>\n<li><a href=\"#c%c3%b3-th%e1%bb%83-ph%c3%b3ng-to-%c4%91%e1%bb%83-xem-chi-ti%e1%ba%bft-%e1%ba%a3nh-s%e1%ba%a3n-ph%e1%ba%a9m\">Có thể phóng to để xem chi tiết ảnh sản phẩm</a></li>\n<li><a href=\"#b%c3%a1o-user-bi%e1%ba%bft-xem-%e1%bb%9f-ch%e1%ba%bf-%c4%91%e1%bb%99-n%c3%a0o-l%c3%a0-t%e1%bb%91t-nh%e1%ba%a5t\">Báo user biết xem ở chế độ nào là tốt nhất</a></li>\n<li><a href=\"#%c4%90%e1%bb%abng-m%e1%bb%9f-nhi%e1%bb%81u-tab\">Đừng mở nhiều tab</a></li>\n<li><a href=\"#n%c3%b3i-r%c3%b5-t%e1%ba%a1i-sao-b%e1%ba%a1n-c%e1%ba%a7n-l%e1%ba%a5y-th%c3%b4ng-tin-v%e1%bb%8b-tr%c3%ad-c%e1%bb%a7a-user\">Nói rõ tại sao bạn cần lấy thông tin vị trí của user</a></li>\n</ul>\n<!-- /TOC -->\n<p><strong>UX tốt trên mobile</strong> nói một cách <em>quạch tẹc</em> ra là trải nghiệm của người sử dụng trang web, đánh giá là site chúng ta <em>ngon</em>, dễ đớp như ăn bánh.</p>\n<p><a href=\"https://www.thinkwithgoogle.com/marketing-resources/experience-design/speed-is-key-optimize-your-mobile-experience/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Download toàn bộ kết quá đánh giá</a></p>\n<h2 id=\"call-to-action-đặt-ngay-giữa-trên-cùng\"><a href=\"#call-to-action-%C4%91%E1%BA%B7t-ngay-gi%E1%BB%AFa-tr%C3%AAn-c%C3%B9ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Call-to-action: đặt ngay giữa, trên cùng</h2>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/hpnav-cta-good.png\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>✅ Những call-to-action (user vào đây để làm cái gì là chính, tương tác hay sử dụng nhất) nằm ngay giữa, vừa vào thấy luôn. Các thao tác kém quan trọng hơn có thể đưa vào menu hoặc cuộn xuống để xem</p>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/hpnav-cta-bad.png\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>🤬 Phung phí phần hiển thị đập vào mặt user đầu tiên bằng cái hình vớ vẩn, nút \"Learn more\" chả mấy tác dụng</p>\n<h2 id=\"giữ-menu-ít-mà-chất\"><a href=\"#gi%E1%BB%AF-menu-%C3%ADt-m%C3%A0-ch%E1%BA%A5t\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giữ menu ít mà chất</h2>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/hpnav-menus-good.png\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>✅ Bọn user xài mobile rất lười cuộn lên cuộn xuống để tìm cái menu nào đó</p>\n<h2 id=\"lúc-nào-cũng-chừa-đường-về-nhà\"><a href=\"#l%C3%BAc-n%C3%A0o-c%C5%A9ng-ch%E1%BB%ABa-%C4%91%C6%B0%E1%BB%9Dng-v%E1%BB%81-nh%C3%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lúc nào cũng chừa đường về nhà</h2>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/hpnav-hp-good.png\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>✅ Nếu bạn không cho click vào cái logo để quay về trang chủ, bạn không phải người ở hành tinh chúng tôi</p>\n<h2 id=\"quảng-cáo-dạng-popup-đừng-cướp-hết-sàn-diễn\"><a href=\"#qu%E1%BA%A3ng-c%C3%A1o-d%E1%BA%A1ng-popup-%C4%91%E1%BB%ABng-c%C6%B0%E1%BB%9Bp-h%E1%BA%BFt-s%C3%A0n-di%E1%BB%85n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Quảng cáo dạng popup đừng cướp hết sàn diễn</h2>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/hpnav-promo-good.png\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>✅ Quảng cáo thì cũng vừa vừa chứ đừng cướp hết cả nội dung trang web</p>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/hpnav-promo-bad.png\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>🤬 Một trong những tính năng yêu thích của bọn marketing làm đau lòng user, popup, popup, popup</p>\n<h2 id=\"tìm-kiếm\"><a href=\"#t%C3%ACm-ki%E1%BA%BFm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tìm kiếm</h2>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/ss-search-good.jpg\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>✅ Ô search lồ lộ ngoài mặt tiền</p>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/ss-search-bad.jpg\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>🤬 Ô search ẩn sâu trong menu collapse</p>\n<h2 id=\"kết-quả-search\"><a href=\"#k%E1%BA%BFt-qu%E1%BA%A3-search\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết quả search</h2>\n<p>User không rảnh đi vòng vòng để kiểm tra kết quả tìm kiếm có đúng không. Tự đồng điền câu tìm kiếm, sửa lỗi chính tả, gợi ý những tìm kiếm tương tự. Không cần phát minh lại cái bánh xe mới, dùng <a href=\"https://cse.google.com/cse/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google custom search</a></p>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/ss-relevant-good.png\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>✅ Trả kết quả là các sản phẩm liên quan tới trẻ em</p>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/ss-relevant-bad.png\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>🤬 Có chữ \"kid\" là trả về hết</p>\n<h2 id=\"bộ-lọc-tìm-kiếm\"><a href=\"#b%E1%BB%99-l%E1%BB%8Dc-t%C3%ACm-ki%E1%BA%BFm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bộ lọc tìm kiếm</h2>\n<p>User rất cần bộ lọc để giới hạn lại kết quả cần tìm, filter đặt dưới ngay ô search và có bao nhiêu kết quả ứng với filter đó</p>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/ss-filters-good.jpg\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>✅ Luôn hiện filter</p>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/ss-filters-bad.jpg\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>🤬 Ẩn luôn filter</p>\n<h2 id=\"cho-user-xài-trước-khi-ép-user-đăng-ký\"><a href=\"#cho-user-x%C3%A0i-tr%C6%B0%E1%BB%9Bc-khi-%C3%A9p-user-%C4%91%C4%83ng-k%C3%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cho user xài trước khi ép user đăng ký</h2>\n<p>User rất khó chịu khi bị buộc phải đăng ký để sử dụng mà chưa hề biết bên trong site là cái gì, yêu cầu cung cấp các thông tin cá nhân quá sớm, khi trang bạn chưa nổi tiếng như Facebook, thì chả ai đăng ký đâu</p>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/cc-gates-good.png\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>✅  Cho user lượn lờ website rồi mới gợi ý đăng ký</p>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/cc-gates-bad.png\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>🤬 Ép user đăng ký mới cho đọc</p>\n<h2 id=\"mua-hàng-như-khách-nặc-danh\"><a href=\"#mua-h%C3%A0ng-nh%C6%B0-kh%C3%A1ch-n%E1%BA%B7c-danh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mua hàng như khách nặc danh</h2>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/cc-purchase-guest-good.png\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>✅  Ngoài đời có ai bắt bạn cung cấp email mới cho mua hàng?</p>\n<p>User khoái nhanh nhất, tiện nhất, bớt đòi hỏi nhất khi họ muốn mua hàng, cung cấp email cá nhân mà không rõ ràng họ được lợi lộc gì từ đó, họ ko sẵn sàng đăng ký mua hàng</p>\n<h2 id=\"sử-dụng-calendar-cho-thông-tin-ngày-tháng\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-calendar-cho-th%C3%B4ng-tin-ng%C3%A0y-th%C3%A1ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng calendar cho thông tin ngày tháng</h2>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/forms-calendar-good.png\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>✅ Nếu cần user cung cấp thông tin ngày tháng, cho user chọn từ lịch, đừng tách ra thành 3 text input ngày-tháng-năm</p>\n<h2 id=\"hạn-chế-lỗi-bắt-validation-ngay-khi-nhập\"><a href=\"#h%E1%BA%A1n-ch%E1%BA%BF-l%E1%BB%97i-b%E1%BA%AFt-validation-ngay-khi-nh%E1%BA%ADp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hạn chế lỗi, bắt validation ngay khi nhập</h2>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/forms-multipart-good.png\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>✅ label rõ ràng để user biết cần nhập thông tin gì, nếu được bắt validation ngay khi user nhập xong</p>\n<h2 id=\"có-thể-phóng-to-để-xem-chi-tiết-ảnh-sản-phẩm\"><a href=\"#c%C3%B3-th%E1%BB%83-ph%C3%B3ng-to-%C4%91%E1%BB%83-xem-chi-ti%E1%BA%BFt-%E1%BA%A3nh-s%E1%BA%A3n-ph%E1%BA%A9m\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Có thể phóng to để xem chi tiết ảnh sản phẩm</h2>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/sw-make-images-expandable-good.png\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>✅ Zoom vào để soi chi tiết sản phẩm luôn là điều khách hàng cần</p>\n<h2 id=\"báo-user-biết-xem-ở-chế-độ-nào-là-tốt-nhất\"><a href=\"#b%C3%A1o-user-bi%E1%BA%BFt-xem-%E1%BB%9F-ch%E1%BA%BF-%C4%91%E1%BB%99-n%C3%A0o-l%C3%A0-t%E1%BB%91t-nh%E1%BA%A5t\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Báo user biết xem ở chế độ nào là tốt nhất</h2>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/us-orientation.jpg\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>✅ Nếu thiết kế hiển thị đẹp nhất khi lật ngang, tại sao không báo user để họ biết nên xem điện thoại ở chế độ nằm ngang</p>\n<h2 id=\"đừng-mở-nhiều-tab\"><a href=\"#%C4%91%E1%BB%ABng-m%E1%BB%9F-nhi%E1%BB%81u-tab\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đừng mở nhiều tab</h2>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/sw-single-browser-good.png\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>✅ Nếu là internal link, tại sao lại mở tab mới trên trình duyệt?</p>\n<h2 id=\"nói-rõ-tại-sao-bạn-cần-lấy-thông-tin-vị-trí-của-user\"><a href=\"#n%C3%B3i-r%C3%B5-t%E1%BA%A1i-sao-b%E1%BA%A1n-c%E1%BA%A7n-l%E1%BA%A5y-th%C3%B4ng-tin-v%E1%BB%8B-tr%C3%AD-c%E1%BB%A7a-user\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nói rõ tại sao bạn cần lấy thông tin vị trí của user</h2>\n<p>User được quyền biết tại sao chúng ta muốn lấy thông tin vị trí hiện tại của user, lên đặt phòng khách sạn cho một chuyến nghỉ mát ở Campuchia, mà bắt user cho phép lấy thông tin vị trí hiện tại làm gì? Với những dịch vụ như tìm quán ăn gần vị trí user, cứ mặc định bỏ trống vị trí hiện tại, cho phép user chọn \"Find near me\"</p>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/sw-navigation-good.png\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>✅ Yêu cầu lấy thông tin vị trí khi cần thiết</p>\n<p><img src=\"https://developers.google.com/web/fundamentals/design-and-ux/principles/images/sw-navigation-bad.png\" alt=\"Điều gì nói một trang web có UX tốt trên mobile\"></p>\n<p>🤬 Vừa bay vào trang web đã bị đòi thông tin vị trí hiện tại</p>\n<ul>\n<li>📜 <a href=\"https://developers.google.com/web/fundamentals/design-and-ux/principles\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">What Makes a Good Mobile Site? ― By Jenny Gove</a></li>\n</ul>\n","cover_image":""}},{"node":{"id":"e8d6fde53064af1e5d851657253dfd98","title":"IIFE trong javascript là cái gì vại","path":"/2019-09-20-gioi-thieu-iife-cua-javascript/","date":"2019-09-20","timeToRead":3,"desc":"Giới thiệu về Íp-Phi trong javascript, tuy không còn dùng nhiều nữa, nhưng vẫn là một kiến thức tốt cần biết","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#khai-b%c3%a1o-function\">Khai báo function</a></li>\n<li><a href=\"#iife\">IIFE</a></li>\n<li><a href=\"#es6-module\">ES6 Module</a></li>\n</ul>\n<!-- /TOC -->\n<p>Một trong những pattern có tên rất <em>kiêu</em> trong javascript \"íp-phi\" - <strong>IIFE</strong></p>\n<p>Trước khi tìm hiểu nó là gì, tại sao chúng ta cần nó, ôn lại khái niệm function căn bản trong javascript</p>\n<h2 id=\"khai-báo-function\"><a href=\"#khai-b%C3%A1o-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khai báo function</h2>\n<p>Một javascript developer đều biết cách khai báo chính quy này</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>“Hello world”<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sayHelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>1 cách khác, gọi là <strong>function expression</strong>, đặt biến và gán nó vào function</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHelloWorld</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sayHelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Các callback chúng ta viết điều là function expression kiểu này</p>\n<blockquote>\n<p>Function trong javascript có thể xem như những giá trị khác, có thể truyền vào như tham số cho function khác</p>\n</blockquote>\n<h2 id=\"iife\"><a href=\"#iife\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>IIFE</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">!</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello IIFE\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Nếu copy đoạn này dán vào console của trình duyệt, câu <code class=\"language-inline-text\">alert</code> sẽ xuất hiện, nhưng nó sẽ không bao giờ có thể hiện lại lần nữa</p>\n<blockquote>\n<p>function này sau khi hoàn thành nhiệm vụ, nó đi luôn không quay lại</p>\n</blockquote>\n<p>Nếu bạn tinh ý, bạn sẽ thắc mắc tại sao lại có <code class=\"language-inline-text\">!</code> phía trước function vậy?</p>\n<p>Khi javascript thấy keyword <strong>function</strong> nó sẽ xem khúc sau là phần khai báo cho function. Nhưng khi chúng ta thêm <strong>!</strong> phía trước, chúng ta đang ép javascript xem nó là một <strong>expression</strong>, nghĩa là phải trả về một giá trị</p>\n<p>Điều thú vị là ở chổ <code class=\"language-inline-text\">{}()</code>, <strong>nó chạy function này luôn</strong></p>\n<blockquote>\n<p>Một function gọi luôn sau khi tạo, gọi xong thì hết gọi lại được gọi là IIFE</p>\n</blockquote>\n<p>Không nhất thiết phải dùng <code class=\"language-inline-text\">!</code>, bạn có thể dùng <code class=\"language-inline-text\">+</code>, <code class=\"language-inline-text\">-</code>, <code class=\"language-inline-text\">~</code>, <code class=\"language-inline-text\">void</code> để ép nó về <em>expression</em></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">void</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> … <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Một cách khác nữa, cách này vẫn hay dùng nhất</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// hoặc</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Chúng ta vẫn sử dụng IIFE như một module trong javascript (trước đây), vì nó cho chúng ta đưa biến vào một <em>đặc khu kinh tế</em>, những thằng khác sẽ không truy cập được biến khai báo bên trong IIFE</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">initGame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// biến private</span>\n\t<span class=\"token keyword\">var</span> live\n\t<span class=\"token keyword\">var</span> weapon\n\n\t<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// function private</span>\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tlive <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\t\tweapon <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Tất nhiên nếu là module, thì phải có những thứ public để thằng khác gọi tới, muốn thằng nào public chúng ta return là được</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">initGame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// biến private</span>\n\t<span class=\"token keyword\">var</span> live\n<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// function private</span>\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tlive <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token literal-property property\">init</span><span class=\"token operator\">:</span> init\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Nếu muốn truyền vào tham số cho IIFE </p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">IIFE</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token punctuation\">,</span> times</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> times<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"es6-module\"><a href=\"#es6-module\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ES6 Module</h2>\n<p>Khi ES6 ra đời, cách viết IIFE không còn được “thịnh hành” như trước</p>\n<p>Thí dụ, trước đây để biến private</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> scoped <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>scoped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span></code></pre></div>\n<p>Giờ có <code class=\"language-inline-text\">let</code> và <code class=\"language-inline-text\">const</code> đặt nó vào block là xem như private</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> scoped <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>scoped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span></code></pre></div>\n<p>Cách viết này gọn gàng, nhìn vào ai cũng hiểu, ko cần giải thích nhiều như IIFE</p>\n<p>Module được hiểu là <strong>từng file</strong> javascript, những gì không <code class=\"language-inline-text\">export</code> là private hết</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// myModule.js</span>\n<span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>    \n\n<span class=\"token comment\">// logic.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> increment <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'myModule.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Bài viết đã tham khảo</p>\n<ul>\n<li>📜 <a href=\"https://medium.com/@vvkchandra/essential-javascript-mastering-immediately-invoked-function-expressions-67791338ddc6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mastering Immediately-Invoked Function Expressions ― Chandra Gundamaraju</a></li>\n<li>📜 <a href=\"https://hashnode.com/post/do-es6-modules-make-the-case-of-iifes-obsolete-civ96wet80scqgc538un20es0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Do ES6 Modules make the case of IIFEs obsolete?</a></li>\n</ul>\n","cover_image":""}},{"node":{"id":"5252d9fef70b16905936f4f39e1d1afc","title":"Bức ảnh chế thú vị về so sánh trong Javascript","path":"/2019-09-15-anh-che-javascript/","date":"2019-09-15","timeToRead":1,"desc":"Qua bức ảnh chế này, chúng ta biết được nhiều điều hay ho về so sánh trong javascript","content":"<p>Bộ ảnh thú vị mô tả kể chuyện so sánh trong Javascript, vô tình lụm xem được cái hình này trên Reddit</p>\n<p><img src=\"https://miro.medium.com/max/500/0*kjcbVX8Y9TFoHGDO.png\" alt=\"Nguyên tắc bắt cầu javascript\"></p>\n<p>Bạn có thể copy nguyên đoạn code này paste vào trình duyệt để xem kết quả</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span>\n<span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// Nguyên tắc bắt cầu có đúng?</span>\n\n<span class=\"token string\">'0'</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Chuyện gì đã xảy ra vậy?</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span> <span class=\"token comment\">// => true</span></code></pre></div>\n<p>Với các ngôn ngữ lập trình khác thì chưa biết, nhưng với javascript <code class=\"language-inline-text\">==</code> sẽ tự ý <strong>chuyển 2 giá trị muốn so sánh về cùng một kiểu</strong>, hay người ta vẫn gọi là ko quan tâm đến kiểu dữ liệu khi so sánh.</p>\n<p>Trong nhiều trường hợp chúng ta cũng có thể sử dụng cách so sánh <code class=\"language-inline-text\">==</code> để tiện, javascript tự động chuyển về một kiểu, tuy nhiên sẽ ko khuyến khích cách này</p>\n<p>Theo như <a href=\"https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">specify</a></p>\n<blockquote>\n<p>Nếu x = Number, y = String, trả về x == ToNumber(y),</p>\n</blockquote>\n<p>Nó đưa giá trị bên phải về number mà không báo cho ai biết hết</p>\n<p><img src=\"https://miro.medium.com/max/581/0*njs7mQoUYjWG13Sm.jpeg\" alt=\"Tự động convert string sang number\"></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// => true</span></code></pre></div>\n<blockquote>\n<p>Nếu x là String hoặc Number, y là Object, trả về x == ToPrimitive(y)</p>\n</blockquote>\n<p><img src=\"https://miro.medium.com/max/618/0*qN97ouGakJx0Gthb.jpg\" alt=\"Array là object\"></p>\n<p>Đúng! Array trong javascript cũng là object</p>\n<p>ToPrimitive(y) ở đây, JS sẽ gọi vào hàm <code class=\"language-inline-text\">.toString</code> để convert về kiểu primitive, trường hợp là array nó nối toàn bộ giá trị trong array thành chuỗi</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => \"1,2,3\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => \"hello,world\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => \"\"</span></code></pre></div>\n<p>Toàn bộ những điều vô lý này đã được đưa vào <a href=\"https://www.ecma-international.org/ecma-262/5.1/#sec-8.12.8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">văn bản chính quy!</a></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'0'</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><img src=\"https://miro.medium.com/max/500/0*69mYzhumogiPLSh6.png\" alt=\"So sánh string và array\"></p>\n<p>Cứ theo nguyên tắc đã quy định mà làm</p>\n<blockquote>\n<p>Nếu x là String hoặc Number, y là Object, trả về x == ToPrimitive(y)</p>\n</blockquote>\n<p>Bước một <code class=\"language-inline-text\">ToPrimitive([])</code> => chúng ta sẽ trở thành so sánh <code class=\"language-inline-text\">'0' == \"\"</code>, khác nhau rõ ràng hé.</p>\n","cover_image":""}},{"node":{"id":"b06641bb4d4b92ab664282ae62d2f19e","title":"Làm quen khái niệm CORS của Web","path":"/2019-09-06-gioi-thieu-can-ban-ve-cors/","date":"2019-09-06","timeToRead":3,"desc":"Bài này khá căn bản và cần thiết cho bạn nào chưa biết gì về CORS, nghe ai đó nói về từ khóa ghê gớm này mà ko biết nó là gì, không để cập đến vấn đề setup làm sao để chạy CORS trên server - vì mình ko biết code phía server đâu","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#access-control-allow-origin\">Access-Control-Allow-Origin</a></li>\n<li>\n<p><a href=\"#c%c3%a1c-ki%e1%bb%83u-request-cors\">Các kiểu request CORS</a></p>\n<ul>\n<li><a href=\"#request-%c4%91%c6%a1n-thu%e1%ba%a7n-nh%c6%b0-get-post-head\">Request đơn thuần như <code class=\"language-inline-text\">GET</code>, <code class=\"language-inline-text\">POST</code>, <code class=\"language-inline-text\">HEAD</code></a></li>\n<li><a href=\"#preflight-request\">Preflight request</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<p>Cross-Origin Resource Sharing (CORS) là một cơ chế sử dụng thông tin trên HTTP header để báo với trình duyệt, cho phép ứng dụng web chạy từ <em>nhà</em> này, có quyền truy xuất resource từ 1 <strong>nhà</strong> khác (2 thằng gọi là khác nhà khi khác tên miền, khác port, khác giao thức http và https)</p>\n<p>Ví dụ một request cross-origin: nhà bạn ở <a href=\"http://domain-a.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://domain-a.com</a> dùng javascript gửi request bên nhà <a href=\"http://api.domain-b.com/data.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://api.domain-b.com/data.json</a></p>\n<p>Vì lý do bảo mật, trình duyệt sẽ không cho thực hiện các request cross-origin như vậy. Nghĩa là các ứng dụng web gọi API chỉ có thể sử dụng resource từ cùng <em>nhà</em> (same-origin policy là từ chuẩn, nếu bạn cần research thêm), trừ khi response từ <em>nhà</em> khác đó cho phép gọi CORS (bằng cách thêm một số thông tin trên header)</p>\n<p>Các request có thể dùng CORS</p>\n<ul>\n<li>Gửi một network request bằng <code class=\"language-inline-text\">fetch</code></li>\n<li>Web font, hoặc load <code class=\"language-inline-text\">@font-face</code> trong CSS</li>\n<li>WebGL texture</li>\n<li>Image, video</li>\n</ul>\n<p>Khi config thành công trên server, server sẽ trả thêm một số thông tin trên header để trình duyệt biết và cấp phép chạy</p>\n<h2 id=\"access-control-allow-origin\"><a href=\"#access-control-allow-origin\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Access-Control-Allow-Origin</h2>\n<p>Chỉ định các tên miền nào được phép truy cập,  ví dụ để cho phép tất cả tên miền có thể gọi tới</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">Access-Control-Allow-Origin<span class=\"token operator\">:</span> *</code></pre></div>\n<p>Cho phép 1 tên miền cụ thể</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">Access-Control-Allow-Origin<span class=\"token operator\">:</span> https<span class=\"token operator\">:</span><span class=\"token comment\">//example.com</span></code></pre></div>\n<h2 id=\"các-kiểu-request-cors\"><a href=\"#c%C3%A1c-ki%E1%BB%83u-request-cors\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các kiểu request CORS</h2>\n<p>Có 2 kiểu CORS request: các request <em>đơn thuần</em>, và các request <strong>preflight</strong>, 2 cái này sẽ do trình duyệt xác định sử dụng cái nào, là một developer chúng ta cũng thật sự không cần quan tâm.</p>\n<h3 id=\"request-đơn-thuần-như-get-post-head\"><a href=\"#request-%C4%91%C6%A1n-thu%E1%BA%A7n-nh%C6%B0-get-post-head\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Request đơn thuần như <code class=\"language-inline-text\">GET</code>, <code class=\"language-inline-text\">POST</code>, <code class=\"language-inline-text\">HEAD</code></h3>\n<p>Các request được trình duyệt xếp loại <em>đơn thuần</em> là\nGET, POST, HEAD\nSử dụng <a href=\"https://fetch.spec.whatwg.org/#cors-safelisted-request-header\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CORS safe -listed header</a>\nKhi sử dụng <code class=\"language-inline-text\">Content-Type</code>, chỉ các giá trị sau là được cho phép <code class=\"language-inline-text\">application/x-www-form-urlencoded</code>, <code class=\"language-inline-text\">multipart/form-data</code>,  <code class=\"language-inline-text\">text/plain</code>\nKhông có các listener nào được đăng ký trên <code class=\"language-inline-text\">XMLHttpRequestUpload</code>\nKhông sử dụng <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ReadableStream</a></p>\n<h3 id=\"preflight-request\"><a href=\"#preflight-request\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Preflight request</h3>\n<p>Đơn giản là ngược lại các trường hợp ở trên thì sẽ là dạng preflight, trình duyệt sẽ gửi đi một request ở phương thức <code class=\"language-inline-text\">options</code> để xác định server có hỗ trợ ko trước khi thực sự gửi đi request chính.</p>\n<p>Đối với loại preflight request, ngoài việc chuyển phương thức sang <code class=\"language-inline-text\">options</code>, nó sẽ set thêm một số thuộc tính trên header</p>\n<p><code class=\"language-inline-text\">Access-Control-Request-Method</code>:  phương thức GET hay POST nên được sử dụng\n<code class=\"language-inline-text\">Access-Control-Request-Headers</code>: kiểu header muốn sử dụng\n<code class=\"language-inline-text\">Origin</code>: nơi gửi request</p>\n<p>Ví dụ</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"># Request\ncurl -i -X OPTIONS localhost<span class=\"token operator\">:</span><span class=\"token number\">3001</span>/api/ping \\\n-H 'Access-Control-Request-Method<span class=\"token operator\">:</span> GET' \\\n-H 'Access-Control-Request-Headers<span class=\"token operator\">:</span> Content-Type<span class=\"token punctuation\">,</span> Accept' \\\n-H 'Origin<span class=\"token operator\">:</span> http<span class=\"token operator\">:</span><span class=\"token comment\">//localhost:3000'</span></code></pre></div>\n<p>Chúng ta có thể tạm dịch nó ra ngôn ngữ tự nhiên là “Tao muốn thực hiện một request dạng GET với <code class=\"language-inline-text\">content-type</code> và <code class=\"language-inline-text\">Accept</code> header từ địa chỉ localhost:3000 có được ko?”</p>\n<p>Kết quả trả về từ server sẽ cho phép trình duyệt tiến hành tiếp, hay dừng lại ở đó. Response từ server sẽ như thế này</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">HTTP/<span class=\"token number\">1.1</span> <span class=\"token number\">204</span> No Content\nAccess-Control-Allow-Origin<span class=\"token operator\">:</span> *\nAccess-Control-Allow-Methods<span class=\"token operator\">:</span> GET<span class=\"token punctuation\">,</span>HEAD<span class=\"token punctuation\">,</span>PUT<span class=\"token punctuation\">,</span>PATCH<span class=\"token punctuation\">,</span>POST<span class=\"token punctuation\">,</span>DELETE\nVary<span class=\"token operator\">:</span> Access-Control-Request-Headers\nAccess-Control-Allow-Headers<span class=\"token operator\">:</span> Content-Type<span class=\"token punctuation\">,</span> Accept\nContent-Length<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\nDate<span class=\"token operator\">:</span> Fri<span class=\"token punctuation\">,</span> <span class=\"token number\">05</span> Apr <span class=\"token number\">2019</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">41</span><span class=\"token operator\">:</span><span class=\"token number\">08</span> GMT\nConnection<span class=\"token operator\">:</span> keep-alive</code></pre></div>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://auth0.com/blog/cors-tutorial-a-guide-to-cross-origin-resource-sharing/\n\">📜 CORS Tutorial: A Guide to Cross-Origin Resource Sharing</a></p>\n","cover_image":""}},{"node":{"id":"f04a87fc3529ae839b833380b45aef09","title":"Làm quen với kiến trúc Serverless","path":"/2019-08-30-lam-quen-voi-kien-truc-serverless/","date":"2019-08-30","timeToRead":9,"desc":"Mình không phải chuyên gia trong lĩnh vực này, nghiên cứu để biết thêm, thấy cũng hay, chia sẽ cho mọi người cùng đọc","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#serverless-l%c3%a0-g%c3%ac\">Serverless là gì</a></li>\n<li><a href=\"#function-as-a-service\">Function as a Service</a></li>\n<li><a href=\"#case-study\">Case Study</a></li>\n</ul>\n<!-- /TOC -->\n<p>Mười mấy năm về trước, ngày còn đang học đại học, mỗi lần đến ngày đăng ký môn học là mình được nghe điệp khúc hát mãi \"server quá tải, số lượng sinh viên tranh nhau vào các lớp có nhiều gái xinh quá đông, quá nguy hiểm, mấy em vui lòng canh 12 giờ đêm, khi ko còn ai lên đăng ký môn học, chúng tôi mới đáp ứng kịp\"</p>\n<p>Ngày đó Server của trường nằm ở Nguyễn Văn Tráng, phòng server nhỏ như hang thỏ, mà chỉ xài đúng mấy ngày đầu học kỳ, nên thầy trưởng khoa ko thể nào xin ngân sách được để mà nâng cấp 10 mấy con server cho các em sinh viên xài thỏa thích.</p>\n<p>Bài toán Server đó giờ được giải quyết ra sao? <strong>Serverless</strong></p>\n<p>Trước tiên cần khẳng định <strong>Serverless</strong> không phải là bạn không cần server. Một shop <em>thú nuôi</em> đơn giản, vài ngàn người mua hoa một tháng, làm bằng wordpress bạn sẽ không thấy được lợi ích từ việc sử dụng kiến trúc mới này, không những vậy còn là việc ném một cục tiền cho mấy thằng bán dịch vụ như Amazon</p>\n<p>Trang bán thú nuôi, kiến trúc cũ sẽ là thế này</p>\n<p><img src=\"https://martinfowler.com/articles/serverless/ps.svg\" alt=\"kiến trúc cũ sẽ là thế này\"></p>\n<p>Tất cả những logic sẽ nằm ở <strong>ứng dụng phía server</strong>: từ authentication, page navigation, searching, transaction (code backend đó)</p>\n<p>Yêu cầu cần có ngân sách, kế hoạch cụ thể, lắp đặt các hệ thống máy chủ, tìm một chỗ để máy, đảm bảo luôn có điện, luôn mát lạnh, đi dây, chọn nhà cung cấp mạng không bị cá mập cắn…</p>\n<p>Nói chung bạn tự làm mọi thứ, hoặc bỏ tiền ra thuê một thằng làm mọi thứ, mà nó còn hay đòi hỏi thêm thắt này kia nọ, vô cùng tốn thời gian, nhân lực, tiền bạc, cơ sở hạ tầng.</p>\n<p><em>Infrastructure as a service - IaaS</em>, các dịch vụ cho <em>thuê mặt bằng</em> ra đời. Đáp ứng nhu cầu tiết kiệm chi phí ở thời điểm đầu, nhưng vẫn có thể <em>bành trướng</em> khi cần.</p>\n<p>Bạn hình dung nó như việc mở một quán ăn, phải tìm mặt bằng, tìm người giữ xe, chỗ để xe cho khách, thu hút khách vào ăn, thanh toán, sửa chữa điện, nước… Những thằng <strong>IaaS</strong> là các trung tâm thương mại, nó lo hết mọi thứ khác, bạn chỉ việc bỏ tiền ra và thuê lại mặt bằng và kinh doanh.</p>\n<h2 id=\"serverless-là-gì\"><a href=\"#serverless-l%C3%A0-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Serverless là gì</h2>\n<p>Nó như một khái niệm kinh tế học, không có một cách định nghĩa chính xác Serverless là gì! Có thể hiểu theo 2 cách sau</p>\n<p>Serverless được dùng để ám chỉ những ứng dụng sử dụng phần lớn (hoặc toàn bộ) dịch vụ \"nhà hàng xóm\" (third-party), được host trên cloud, cho các vấn đề ở phía server là logic và state (ví dụ trạng thái đăng nhập, một dạng của dịch vụ chăm sóc khách hàng thân thiết). Những ứng dụng <strong>để sử dụng</strong> (không phải những trang profile công ty, show hiệu ứng bay lượn portfolio, ví dụ như Facebook, ứng dụng đăng ký môn học, hoặc ứng dụng điện thoại bị chửi bới quá trời FaceApp, tức là mô hình này không chỉ áp dụng riêng cho web). Những dịch vụ thường được outsource cho nhà hàng xóm là gì: database có <a href=\"https://parseplatform.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Parse</a>, <a href=\"https://firebase.google.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Firebase</a>, authentication có <a href=\"https://auth0.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Auth0</a>, AWS Cognito. Mấy nhà này nằm trong khu \"Backend as a Service\" - <strong>BaaS</strong>, khi gắn vào <em>hậu tố</em> as a Service bạn có thể biết là nó nằm ở nhà hàng xóm.</p>\n<p>Serverless cũng có nghĩa là ứng dụng đó logic server vẫn có, developer vẫn phải viết logic này, tuy nhiên, không giống kiến trúc truyền thống, nó chạy theo cơ chế \"tiền trao-cháo múc\" (event-trigger), không quan tâm anh bạn có ở chung nhà mình không (stateless compute container). Khái niệm này được <a href=\"https://twitter.com/marak\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@marak trên Twitter</a> gọi là <strong>Function as a Service</strong> - <strong>FaaS</strong>, bạn có nhu cầu cắt tóc, gội đầu, uống cafe, đánh giày thì bạn ra <em>tiệm</em> hết, không dùng đồ <em>nhà</em> có sẵn nữa. Hiện tại, <a href=\"https://aws.amazon.com/lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AWS Lambda</a> là một trong những platform nổi tiếng nhất khi nói đến FaaS</p>\n<p>Giờ nói tới FaaS, nó đang là trend, nó thay đổi cách chúng ta trước đây vẫn nghĩ về kiến trúc dưới server.</p>\n<p>Tất cả những ông lớn đều có các sản phẩm BaaS và FaaS, <a href=\"https://aws.amazon.com/serverless/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Amazon Serverless</a>, <a href=\"https://firebase.google.com/docs/functions/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Cloud Functions for Firebase.</a></p>\n<p><img src=\"https://hackernoon.com/hn-images/1*t4O4UXpdG68MQboNKC6bBw.jpeg\" alt=\"Tất cả những ông lớn đều có các sản phẩm BaaS và FaaS\"></p>\n<p>Một kiến trúc Serverless nó như thế này</p>\n<p><img src=\"https://martinfowler.com/articles/serverless/sps.svg\" alt=\"Một kiến trúc Serverless\"></p>\n<ol>\n<li>Phần authen trước đây được gửi <em>nhà hàng xóm</em> làm (cơ quan nhà nước chuyên cung cấp CMND)</li>\n<li>Dữ liệu được đưa một về nhà kho quản lý, kiểu như Tiki bây giờ quá mệt quản lý kho hàng, các cửa hàng nhỏ lẻ tự quản lý kho, Tiki bán được thì chạy tới kho của bên thứ 3 lấy.</li>\n<li>Với 2 thay đổi ở trên, điều này có nghĩa là một vài logic đã được nằm ở phía client, thí dụ, user session, bạn sẽ thấy rõ nhất ở các Single Page App chúng ta build, phần logic giao diện cho user đã và chưa đăng nhập nằm ở client - <em>nhà user</em>, những route nào user có thể vào nằm ở code client</li>\n<li>Một vài hiển thị, ràng buộc tất nhiên vẫn được server nắm. Thí dụ \"search\". Chúng ta có thêm một <em>nhà</em> gọi là \"API Gateway\", dịch vụ giao nhận, tất cả các yêu cầu từ client đưa về đây, các anh em HTTP sẽ đi lấy dữ liệu từ kho về cho chúng ta.</li>\n<li>Với tính năng đặt hàng, nó do một <em>nhà** khác cung cấp. Những logic khác nhau, được tách và deploy thành những </em>cục* khác nhau như vậy cách tiếp cận của FaaS cũng là cách tiếp cận rất phổ biến trong \"Microservices\"</li>\n</ol>\n<p>Nó sẽ có những lợi ích i chang như Microservices, tất nhiên là có trả giá, có nhiều thứ để kiểm soát và theo dõi hơn, vấn đề bảo mật cũng không phải đơn giản như xưa, nằm ở nhiều nơi quá mà, bài toán đi đi lại tránh kẹt xe giữa các hệ thống khác nhau, biết đâu đi lạc vào chổ nào đó mất CMND luôn !!</p>\n<h2 id=\"function-as-a-service\"><a href=\"#function-as-a-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Function as a Service</h2>\n<p>Nãy giờ nói FaaS nhiều quá rồi, giờ \"đào sâu\" nghiên cứu nó chút. Trích dẫn từ trang <a href=\"https://aws.amazon.com/lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Amazon Lambda</a></p>\n<blockquote>\n<p>AWS Lambda lets you run code without provisioning or managing servers. (1) ... With Lambda, you can run code for virtually any type of application or backend service (2) - all with zero administration. Just upload your code and Lambda takes care of everything required to run (3) and scale (4) your code with high availability. You can set up your code to automatically trigger from other AWS services (5) or call it directly from any web or mobile app (6).</p>\n</blockquote>\n<p>Diễn giải đoạn dài ngoằn kia</p>\n<p>(1) FaaS là chạy backend code mà không cần quan tâm việc quản lý và bảo trì hệ thống server.</p>\n<p>(2) FaaS không yêu cầu một framework hay thư viện cụ thể nào. Các <strong>function</strong> trên Lambda có thể được viết bằng Javascript, Python, Go, Java, Clojure, Scala, .NET.</p>\n<p>(3) Deploy sẽ rất khác với hệ thống truyền thống. Tới *nhà** của FaaS chúng ta đưa đoạn code cho chủ nhà, còn lại chủ nhà làm gì thì làm.</p>\n<p>(4) Scale sẽ tự động được chủ nhà làm. Nếu hệ thống cần đáp ứng 1000 request đồng thời, chủ nhà sẽ lo, bạn chỉ cần bơm tiền. Quan trọng nhất, bên cung cấp dịch vụ sẽ quản lý hết toàn bộ resource, xin giấy phép, nói chung là toàn bộ - bạn không cần làm gì với cluster, VM cả.</p>\n<p>(5) Cung cấp cơ chế trigger ứng với các event bạn muốn.</p>\n<p>(6) Mấy bên cung cấp dịch vụ, cho phép các function này trigger theo những sự kiện HTTP request, như ví dụ là search, và purchase, hoặc gọi trực tiếp lên các API được cung cấp bởi bên cung cấp</p>\n<h2 id=\"case-study\"><a href=\"#case-study\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Case Study</h2>\n<p><a href=\"http://www.vogue.it/en/photovogue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PhotoVogue</a> trang Vogue của Ý, chạy từ năm 2011, sau một năm chạy, photographer bu vô như kiến, server ở nhà riêng quá tải không chịu nổi.</p>\n<p>Giám đốc kỹ thuật quyết định chuyển đổi toàn bộ hệ thống server ở <em>nhà riêng</em> sang AWS trong 3 tháng.</p>\n<p>Chạy theo trend này, còn có những cái tên rất phổ biến là Uber, Pokemon Go, Airbnb, Clash of Clans và rất nhiều ứng dụng khác khi số lượng user và real-time data lớn</p>\n<p>Những vấn đề mà team PhotoVogue đã gặp</p>\n<ul>\n<li>Có hơn 130,000 photographer trên khắp thế giới sử dụng hệ thống để đưa ảnh lên, ước tính có khoảng 400,000 ảnh, với dung lượng tối đa mỗi hình là 50MB (bọn này chơi sang nhỉ)</li>\n<li>Số lượng truy cập ngày càng tăng</li>\n<li>Trải nghiệm sử dụng của user không tốt, thao tác xử lý quá chậm, up ảnh quá rùa</li>\n</ul>\n<p>Với AWS, nó đã giải quyết các vấn đề sau cho PhotoVogue</p>\n<ul>\n<li>Khả năng scale, dễ maintenance, quản lý chi phí rõ ràng</li>\n<li>Lưu trữ hình trên Amazon S3</li>\n<li>Khi up lên Amazon S3, bật trigger sử dụng AWS Lambda function, convert các file này qua gif, jpeg, png, tiff</li>\n<li>Amazon API Gateway được sử dụng để làm tầng caching của REST API, Amazon CloudFront cho CDN</li>\n</ul>\n<p><img src=\"https://www.simform.com/wp-content/uploads/2017/12/serverless-graph.png\" alt=\"Kiến trúc Serverless\"></p>\n<p>Còn vấn đề nào nữa không, mình hy vọng bạn nào chuyên gia vào chỉ giáo</p>\n<p>Tài liệu tham khảo</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://hackernoon.com/what-is-serverless-architecture-what-are-its-pros-and-cons-cc4b804022e9\">📜 What is Serverless Architecture? What are its Pros and Cons?</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://martinfowler.com/articles/serverless.html\">📜 Serverless Architectures</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.simform.com/serverless-architecture-guide/\">📜 Serverless Architecture: A Comprehensive Guide</a></p>\n","cover_image":""}},{"node":{"id":"f95e66fe5b94e458e4d0f50ce5148c94","title":"Principle của các sản phẩm nổi tiếng","path":"/2019-08-07-nguyen-tac-chung-cua-thiet-ke/","date":"2019-08-07","timeToRead":11,"desc":"Phù hợp cho các bạn thiết kế nào ko muốn làm code dạo, design dạo nữa, bạn muốn cái gì đó cao hơn ở tầng khái niệm","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#nguy%c3%aan-t%e1%ba%afc-thi%e1%ba%bft-k%e1%ba%bf-c%e1%bb%a7a-govuk\">Nguyên tắc thiết kế của GOV.UK</a></li>\n<li>\n<p><a href=\"#airbnb\">Airbnb</a></p>\n<ul>\n<li><a href=\"#%c4%90%e1%bb%93ng-nh%e1%ba%a5t\">Đồng nhất</a></li>\n<li><a href=\"#tri%e1%bb%87u-ng%c6%b0%e1%bb%9di-s%e1%bb%ad-d%e1%bb%a5ng\">Triệu người sử dụng</a></li>\n<li><a href=\"#bi%e1%bb%83u-t%c6%b0%e1%bb%a3ng\">Biểu tượng</a></li>\n<li><a href=\"#ng%c3%b4n-ng%e1%bb%af-t%e1%bb%b1-nhi%c3%aan-c%e1%bb%9fi-m%e1%bb%9f\">Ngôn ngữ tự nhiên, cởi mở</a></li>\n<li><a href=\"#l%c3%a0-ng%c6%b0%e1%bb%9di-b%e1%ba%a1n-th%c3%a2n-thi%e1%ba%bft\">Là người bạn thân thiết</a></li>\n<li><a href=\"#thi%e1%ba%bft-k%e1%ba%bf-%c4%91%e1%bb%83-c%c3%b3-%e1%ba%a5n-t%c6%b0%e1%bb%a3ng-%c4%91%e1%ba%a7u-ti%c3%aan-t%e1%bb%91t-%c4%91%e1%ba%b9p\">Thiết kế để có ấn tượng đầu tiên tốt đẹp</a></li>\n<li><a href=\"#tin-t%c6%b0%e1%bb%9fng-c%e1%ba%a7n-th%e1%bb%9di-gian\">Tin tưởng cần thời gian</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#facebook\">Facebook</a></p>\n<ul>\n<li><a href=\"#tri%e1%bb%87u-ng%c6%b0%e1%bb%9di-s%e1%bb%ad-d%e1%bb%a5ng-1\">Triệu người sử dụng</a></li>\n<li><a href=\"#cho-con-ng%c6%b0%e1%bb%9di\">Cho con người</a></li>\n<li><a href=\"#s%e1%ba%a1ch-s%e1%ba%bd\">Sạch sẽ</a></li>\n<li><a href=\"#%c4%90%e1%bb%93ng-nh%e1%ba%a5t-1\">Đồng nhất</a></li>\n<li><a href=\"#h%e1%bb%afu-d%e1%bb%a5ng\">Hữu dụng</a></li>\n<li><a href=\"#nhanh\">Nhanh</a></li>\n<li><a href=\"#minh-b%e1%ba%a1ch\">Minh bạch</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#apple-c%c3%a1i-n%c3%a0y-d%c3%a0nh-cho-c%c3%a1c-b%e1%ba%a1n-nh%c3%a0-iphone\">Apple (Cái này dành cho các bạn nhà iPhone)</a></p>\n<ul>\n<li><a href=\"#th%e1%ba%a9m-m%e1%bb%b9\">Thẩm mỹ</a></li>\n<li><a href=\"#th%e1%bb%91ng-nh%e1%ba%a5t\">Thống nhất</a></li>\n<li><a href=\"#t%c6%b0%c6%a1ng-t%c3%a1c-tr%e1%bb%b1c-ti%e1%ba%bfp\">Tương tác trực tiếp</a></li>\n<li><a href=\"#ph%e1%ba%a3n-h%e1%bb%93i\">Phản hồi</a></li>\n<li><a href=\"#%e1%ba%a8n-d%e1%bb%a5\">Ẩn dụ</a></li>\n<li><a href=\"#user-l%c3%a0-ng%c6%b0%e1%bb%9di-quy%e1%ba%bft-%c4%91%e1%bb%8bnh\">User là người quyết định</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#google-material-design\">Google Material Design</a></p>\n<ul>\n<li><a href=\"#n%e1%bb%95i-b%e1%ba%adt-h%c3%acnh-%e1%ba%a3nh-m%e1%bb%a5c-%c4%91%c3%adch-r%c3%b5-r%c3%a0ng\">Nổi bật, hình ảnh, mục đích rõ ràng</a></li>\n<li><a href=\"#chuy%e1%bb%83n-%c4%91%e1%bb%99ng-cung-c%e1%ba%a5p-m%e1%bb%99t-%c3%bd-ngh%c4%a9a\">Chuyển động cung cấp một ý nghĩa</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#microsoft\">Microsoft</a></p>\n<ul>\n<li><a href=\"#gi%e1%bb%af-m%e1%bb%8di-th%e1%bb%a9-%c4%91%c6%a1n-gi%e1%ba%a3n\">Giữ mọi thứ đơn giản</a></li>\n<li><a href=\"#mang-t%c3%adnh-c%c3%a1-nh%c3%a2n\">Mang tính cá nhân</a></li>\n<li><a href=\"#ngh%c4%a9-to%c3%a0n-di%e1%bb%87n\">Nghĩ toàn diện</a></li>\n<li><a href=\"#t%e1%ba%a1o-c%e1%ba%a3m-gi%c3%a1c-h%c3%a0o-h%e1%bb%a9ng\">Tạo cảm giác hào hứng</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<p>Nếu lập trình chúng ta có các nguyên tắc chung khi viết code như <strong>KISS</strong>, <strong>DRY</strong>, thì trong thiết kế cũng có những <strong>nguyên tắc chính</strong> khi làm việc. Những nguyên tắc này sẽ là kim chỉ nam, nếu có tranh cãi giữa các member trong team, thì cứ đè nguyên tắc này ra mà giải quyết (nghe hơi có mùi cứng nhắc, mình thì thích tùy cơ ứng biến hơn)</p>\n<h2 id=\"nguyên-tắc-thiết-kế-của-govuk\"><a href=\"#nguy%C3%AAn-t%E1%BA%AFc-thi%E1%BA%BFt-k%E1%BA%BF-c%E1%BB%A7a-govuk\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nguyên tắc thiết kế của GOV.UK</h2>\n<p>Đây là danh sách của trang <a href=\"https://www.gov.uk/guidance/government-design-principles\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GOV.UK</a></p>\n<ul>\n<li>Bắt đầu với thứ user cần</li>\n<li>Làm ít hơn</li>\n<li>Thiết kế với dữ liệu</li>\n<li>Làm mọi thứ thật dễ dàng</li>\n<li>Lặp. Rồi lặp lại lần nữa</li>\n<li>Dành cho tất cả mọi người</li>\n<li>Hiểu ngữ cảnh hiện tại</li>\n<li>Làm dịch vụ digital, không phải làm website</li>\n<li>Nhất quán, nhưng không <em>hòa tan</em> (phải có chất riêng với thằng khác)</li>\n<li>Cởi mở, mọi thứ tốt hơn</li>\n<li>Bao trừu tượng luôn các bạn, trang Gov.uk này cũng có câu tổng quát rất hay</li>\n</ul>\n<blockquote>\n<p>Thiết kế tốt là thiết kế có thể sử dụng. Phục vụ cho nhiều đối tượng sử dụng, dễ đọc nhất nhất có thể. Nếu phải từ bỏ <em>đẹp tinh tế - thì cứ bỏ luôn</em>. Chúng ta tạo sản phẩm cho nhu cầu sử dụng, không phải cho người <em>hâm mộ</em>. Chúng ta thiết kế để cả nước sử dụng, không phải những người đã từng sử dụng web. Những người cần dịch vụ của chúng ta nhất là những người đang cảm thấy khó sử dụng dịch vụ nhất. Luôn nhớ về họ ngay từ đầu.</p>\n</blockquote>\n<p>Những nguyên tắc thiết kế trong sản phẩm sẽ giúp cá nhân người thiết kế, cả thành viên trong team, PM, product owner ra định hướng được những quyết định cần thiết trong những tình huống phải lựa chọn.</p>\n<p>Chắc ai cũng từng biết đến <a href=\"https://developer.apple.com/design/human-interface-guidelines/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Apple’s Human Interface Guidelines</a> và <a href=\"https://material.io/design/guidelines-overview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google’s material design guidelines</a>, nguyên tắc thiết kế của 2 hệ thống này nhầm <strong>thống nhất</strong> các sản phẩm khác nhau trong hệ thống, mang lại <strong>cảm nhận đồng nhất</strong> giữa các sản phẩm.</p>\n<p>Nếu sản phẩm của bạn có mặt trên nhiều nền tảng khác nhau, chúng ta nên cân nhắc có 1 design system và 1 vài nguyên tắc chung cho nó. Chúng ta phải có sự khác biệt với những sản phẩm khác nhưng đồng nhất trên các hệ thống khác nhau, giữa các màn hình.</p>\n<p>Một vài team đặt những nguyên tắc chung như thế này: <strong>rõ ràng, đơn giản, hữu dụng</strong>, không thể tạo được những sản phẩm tốt nếu chỉ có những nguyên tắc quá căn bản, chung chung như vậy. Cho nên, chúng ta cùng tham khảo những nguyên tắc của những ông lớn xem họ định nghĩa thế nào.</p>\n<h2 id=\"airbnb\"><a href=\"#airbnb\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Airbnb</h2>\n<p><img src=\"https://miro.medium.com/max/700/1*R9nTDNPwWChKAZRIo77yeA.gif\" alt=\"Nguyên tắc chung của thiết kế\"></p>\n<h3 id=\"đồng-nhất\"><a href=\"#%C4%91%E1%BB%93ng-nh%E1%BA%A5t\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đồng nhất</h3>\n<p>Mỗi một thành phần là một phần của hệ thống lớn hơn, đóng góp tích cực cho khi hệ thống lớn lên. Không có những tính năng đứng riêng một mình và nằm ngoài các phần còn lại.</p>\n<h3 id=\"triệu-người-sử-dụng\"><a href=\"#tri%E1%BB%87u-ng%C6%B0%E1%BB%9Di-s%E1%BB%AD-d%E1%BB%A5ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Triệu người sử dụng</h3>\n<p>Airbnb được sử dụng bởi cộng đồng thế giới. Sản phẩm phải thể hiện sự hiếu khách và dễ dàng truy cập.</p>\n<h3 id=\"biểu-tượng\"><a href=\"#bi%E1%BB%83u-t%C6%B0%E1%BB%A3ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Biểu tượng</h3>\n<p>Trong cả thiết kế và tính năng đây là điều chúng ta muốn tập trung, sản phẩm phải mang tính biểu tượng, chuẩn mực cho dòng sản phẩm như vậy, phải được thể hiện rõ ràng nhất, mạnh mẽ nhất.</p>\n<h3 id=\"ngôn-ngữ-tự-nhiên-cởi-mở\"><a href=\"#ng%C3%B4n-ng%E1%BB%AF-t%E1%BB%B1-nhi%C3%AAn-c%E1%BB%9Fi-m%E1%BB%9F\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ngôn ngữ tự nhiên, cởi mở</h3>\n<p>Mang hơi thở cuộc sống vào trong các sản phẩm, cho phép chúng ta trao đổi tốt hơn với user để cả 2 có thể hiểu nhau.</p>\n<h3 id=\"là-người-bạn-thân-thiết\"><a href=\"#l%C3%A0-ng%C6%B0%E1%BB%9Di-b%E1%BA%A1n-th%C3%A2n-thi%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Là người bạn thân thiết</h3>\n<p>Không có cảm giác của thiếu tin tưởng, sản phẩm cho phép mọi người có thể hiểu về nhau hơn, như một người bạn, chúng ta sẽ có mặt ở đó khi họ cần</p>\n<h3 id=\"thiết-kế-để-có-ấn-tượng-đầu-tiên-tốt-đẹp\"><a href=\"#thi%E1%BA%BFt-k%E1%BA%BF-%C4%91%E1%BB%83-c%C3%B3-%E1%BA%A5n-t%C6%B0%E1%BB%A3ng-%C4%91%E1%BA%A7u-ti%C3%AAn-t%E1%BB%91t-%C4%91%E1%BA%B9p\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thiết kế để có ấn tượng đầu tiên tốt đẹp</h3>\n<p>Mặc dù Airbnb yêu cầu một số thông tin của user, nhưng không cung cấp thông tin này cho bên thứ 3. Nên chúng ta hỏi khách thông tin của họ nhưng không bắt buộc.</p>\n<h3 id=\"tin-tưởng-cần-thời-gian\"><a href=\"#tin-t%C6%B0%E1%BB%9Fng-c%E1%BA%A7n-th%E1%BB%9Di-gian\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tin tưởng cần thời gian</h3>\n<p>Giống như cuộc sống này, bạn sẽ nhận càng nhiều từ Airbnb nếu bạn càng tin tưởng chúng tôi. Tin tưởng cần xuất phát từ cả 2 bên. Nếu khách càng tin tưởng vào chủ nhà, thì chủ nhà cũng sẽ sẵn sàng chia sẻ với khách nhiều hơn</p>\n<h2 id=\"facebook\"><a href=\"#facebook\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Facebook</h2>\n<h3 id=\"triệu-người-sử-dụng-1\"><a href=\"#tri%E1%BB%87u-ng%C6%B0%E1%BB%9Di-s%E1%BB%AD-d%E1%BB%A5ng-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Triệu người sử dụng</h3>\n<p>Mục tiêu của chúng ta là làm cho thế giới cởi mở hơn, đi đến từng cá nhân ở mọi ngóc ngách trên thế giới. Design phải mà ai cũng có thể xài, dù ở văn hoá nào, ngôn ngữ gì, thiết bị nào, ở tầng lớp nào trong xã hội. Sản phẩm phục vụ cho 90% người sử dụng, bỏ qua những tính năng mà chỉ có một vài thiểu số người yêu cầu</p>\n<h3 id=\"cho-con-người\"><a href=\"#cho-con-ng%C6%B0%E1%BB%9Di\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cho con người</h3>\n<p>User quay lại Facebook vì có bạn bè và những người họ quen biết. Đó là thứ chúng ta cung cấp như đã hứa, những người mà bạn quan tâm ở một nơi duy nhất. Lý do mà tiếng nói và những gì chúng ta muốn trình bài được ẩn đi phía sau, tiếng nói của những người user quan tâm, khuôn mặt, cảm xúc, suy nghĩ của họ được ưu tiên hàng đầu.</p>\n<h3 id=\"sạch-sẽ\"><a href=\"#s%E1%BA%A1ch-s%E1%BA%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sạch sẽ</h3>\n<p>Phần hiển thị phải thật sạch sẽ, tinh gọn. Sạch sẽ không phải là cách tiếp cận dễ dàng, tiết chế các khoảng trống, kích thước khác nhau, màu sắc, số lượng các định dạng điều phải giảm bớt đi.</p>\n<h3 id=\"đồng-nhất-1\"><a href=\"#%C4%91%E1%BB%93ng-nh%E1%BA%A5t-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đồng nhất</h3>\n<p>Chúng ta không muốn lãng phí thời gian, tăng cường sử dụng pattern, những phần giống nhau khi được thể hiện một cách giống nhau sẽ mang tới sự gần gũi và dễ sử dụng. Mọi tương tác với user điều có một mục đích: tạo sự tin tưởng. Bỏ bớt, tái sử dụng, đừng thiết kế lại.</p>\n<h3 id=\"hữu-dụng\"><a href=\"#h%E1%BB%AFu-d%E1%BB%A5ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hữu dụng</h3>\n<p>Sản phẩm của chúng ta là công cụ hữu dụng không phải công cụ giải trí, được sử dụng hằng ngày cung cấp giá trị hữu ích. Không có những khoảng trắng dư thừa, tương tác dưa thừa, mọi thứ thể hiện liền mạch, nhanh nhất.</p>\n<h3 id=\"nhanh\"><a href=\"#nhanh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nhanh</h3>\n<p>Không chỉ tôn trọng thời giản của bản thân, chúng ta phải biết tôn trọng thời gian người khác. Chạy phải nhanh, hiệu quả, không tốn thời gian.</p>\n<h3 id=\"minh-bạch\"><a href=\"#minh-b%E1%BA%A1ch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Minh bạch</h3>\n<p>User tin tưởng trao cho chúng nhận dạng, ảnh, suy nghĩ, hội thoại của họ. Chúng ta phải trung thực và rõ ràng về mọi thứ, tại sao và những gì đang diễn ra. (Sau vụ lùm xùm làm mất thông tin user mình hoan mang Hồ Quỳnh Hương với nguyên tắc này quá)</p>\n<h2 id=\"apple-cái-này-dành-cho-các-bạn-nhà-iphone\"><a href=\"#apple-c%C3%A1i-n%C3%A0y-d%C3%A0nh-cho-c%C3%A1c-b%E1%BA%A1n-nh%C3%A0-iphone\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Apple (Cái này dành cho các bạn nhà iPhone)</h2>\n<h3 id=\"thẩm-mỹ\"><a href=\"#th%E1%BA%A9m-m%E1%BB%B9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thẩm mỹ</h3>\n<p>Thẩm mỹ trên cả bộ mặt ứng dụng và tính năng, cách hoạt động.</p>\n<p>Ví dụ ứng dụng giúp người sử dụng thực hiện các tính năng quan trọng, không sử dụng hình ảnh ko liên quan, nội dung rõ ràng, dùng control mặc định, hoạt động có thể lường trước kết quả. Ngược lại các ứng dụng như game phục vụ giải trí có thể cung cấp các giao diện vui nhộn.</p>\n<h3 id=\"thống-nhất\"><a href=\"#th%E1%BB%91ng-nh%E1%BA%A5t\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thống nhất</h3>\n<p>Ứng dụng đi theo chuẩn mực chung, các element được cung cấp bởi hệ thống, icon ai cũng hiểu, kiểu chữ chuẩn mực, các tính năng của ứng dụng vận hành theo cách mà user mong đợi.</p>\n<h3 id=\"tương-tác-trực-tiếp\"><a href=\"#t%C6%B0%C6%A1ng-t%C3%A1c-tr%E1%BB%B1c-ti%E1%BA%BFp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tương tác trực tiếp</h3>\n<p>Luôn nhớ thiết kế để user sử dụng trực tiếp thông qua màn hình, những gì thấy trên màn hình, user có thể xoay điện thoại, họ sẽ thấy được kết quả của việc đó ngay lập tức trên màn hình.</p>\n<h3 id=\"phản-hồi\"><a href=\"#ph%E1%BA%A3n-h%E1%BB%93i\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phản hồi</h3>\n<p>User thực hiện 1 action nào đó, phản hồi lại kết quả action đó, để họ biết. Các element có thể tương tác được highlight rõ ràng khi user tab, các animation hiển thị ý nghĩa rõ ràng.</p>\n<h3 id=\"ẩn-dụ\"><a href=\"#%E1%BA%A9n-d%E1%BB%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ẩn dụ</h3>\n<p>Khi sử dụng các đối tượng mang tính ẩn dụ (như icon) cho tương tác, cần đảm bảo nó phải được nhiều người biết đến</p>\n<h3 id=\"user-là-người-quyết-định\"><a href=\"#user-l%C3%A0-ng%C6%B0%E1%BB%9Di-quy%E1%BA%BFt-%C4%91%E1%BB%8Bnh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>User là người quyết định</h3>\n<p>Ứng dụng không phải là đứa quyết định, người sử dụng sẽ quyết định làm cái gì, ứng dụng cho biết hành động đó dẫn đến kết quả gì.</p>\n<h2 id=\"google-material-design\"><a href=\"#google-material-design\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Google Material Design</h2>\n<h3 id=\"nổi-bật-hình-ảnh-mục-đích-rõ-ràng\"><a href=\"#n%E1%BB%95i-b%E1%BA%ADt-h%C3%ACnh-%E1%BA%A3nh-m%E1%BB%A5c-%C4%91%C3%ADch-r%C3%B5-r%C3%A0ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nổi bật, hình ảnh, mục đích rõ ràng</h3>\n<p>Cách thành phần chính trong thiết kế in ấn: typography, grid, space, scale, color, image không chỉ phục vụ cho mục đích nịn mắt, nó tạo ra trật tự, ý nghĩa, tập trung.</p>\n<h3 id=\"chuyển-động-cung-cấp-một-ý-nghĩa\"><a href=\"#chuy%E1%BB%83n-%C4%91%E1%BB%99ng-cung-c%E1%BA%A5p-m%E1%BB%99t-%C3%BD-ngh%C4%A9a\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chuyển động cung cấp một ý nghĩa</h3>\n<p>Mọi chuyển động cần có ý nghĩa và phù hợp, phục vụ mục đích tập trung sự chú ý và duy trì các thao tác đang thực hiện</p>\n<h2 id=\"microsoft\"><a href=\"#microsoft\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Microsoft</h2>\n<h3 id=\"giữ-mọi-thứ-đơn-giản\"><a href=\"#gi%E1%BB%AF-m%E1%BB%8Di-th%E1%BB%A9-%C4%91%C6%A1n-gi%E1%BA%A3n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giữ mọi thứ đơn giản</h3>\n<p>Kim chỉ nam cho mọi thiết kế của Microsoft bây giờ. Nhằm mang đến cảm giác trung thực và không bị ảnh hưởng bởi thời gian.</p>\n<h3 id=\"mang-tính-cá-nhân\"><a href=\"#mang-t%C3%ADnh-c%C3%A1-nh%C3%A2n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mang tính cá nhân</h3>\n<p>Tạo một cảm xúc kết nối với từng người sử dụng. Làm sao để user khi sử dụng có được cảm giác như sản phẩm được thiết kế cho mỗi mình mình.</p>\n<h3 id=\"nghĩ-toàn-diện\"><a href=\"#ngh%C4%A9-to%C3%A0n-di%E1%BB%87n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nghĩ toàn diện</h3>\n<p>Chúng ta không đơn thuần tạo ra sản phẩm, chúng ta đang xây dựng thế giới nơi chúng ta sống, một thế giới tốt hơn.</p>\n<h3 id=\"tạo-cảm-giác-hào-hứng\"><a href=\"#t%E1%BA%A1o-c%E1%BA%A3m-gi%C3%A1c-h%C3%A0o-h%E1%BB%A9ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tạo cảm giác hào hứng</h3>\n<p>Tạo ra những trải nghiệm cho user mà họ biết là người đằng sau thiết kế đó là một con người thực.</p>\n<p>Cảm nhận cái này dễ thấy nhất là lúc chúng ta cài window, giờ chúng ta cảm giác như đang có người nói chuyện với mình í, không phải các thông báo đơn thuần, như có một AI đằng sau</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.muz.li/design-principles-behind-great-products-6ef13cd74ccf\">Design Principles Behind Great Products</a></p>\n","cover_image":""}},{"node":{"id":"a5b17caa8521ed69a7fe336fc0445645","title":"Nguyên lý nền tảng của lập trình function","path":"/2019-07-26-nguyen-ly-chung-cua-lap-trinh-huong-function/","date":"2019-07-26","timeToRead":6,"desc":"Khái niệm ngàn người biết, bạn cũng phải biết","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#n%c3%b3i-v%e1%bb%81-l%e1%bb%a3i-%c3%adch\">Nói về lợi ích</a></li>\n<li><a href=\"#immutable\">Immutable</a></li>\n<li><a href=\"#pure-function\">Pure Function</a></li>\n<li><a href=\"#%c4%90%e1%bb%87-quy\">Đệ quy</a></li>\n<li><a href=\"#t%e1%bb%95ng-k%e1%ba%bft\">Tổng kết</a></li>\n<li><a href=\"#t%c3%a0i-li%e1%bb%87u-tham-kh%e1%ba%a3o\">Tài liệu tham khảo</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"nói-về-lợi-ích\"><a href=\"#n%C3%B3i-v%E1%BB%81-l%E1%BB%A3i-%C3%ADch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nói về lợi ích</h2>\n<p>Trước tiên chúng ta phải nói về lợi ích của kiểu lập trình hướng function, để có thể có động lực <em>nghiên cứu đào sâu</em>, một vài điểm được nhiều người thống nhất</p>\n<p>Code của chúng ta trở nên \"module\" hơn, nhắc về module thì lấy ví dụ trò xếp hình là dễ hình dung nhất</p>\n<p><img src=\"https://cdn.redshift.autodesk.com/2014/10/benefits_of_modular_construction_lego.jpg\" alt=\"Minh họa Module\"></p>\n<ul>\n<li>Các function độc lập, khi kết nối với nhau tạo ra một chương trình\nModule cũng sẽ giúp code dễ hiểu hơn, 1 function = 1 công dụng, <em>không có gì dấu diếm</em></li>\n<li>Dễ copy/paste hơn</li>\n<li>Dễ test hơn</li>\n</ul>\n<p>Bên dưới chúng ta sẽ đề cập đến những nguyên lý nền tảng, mà kinh nghiệm thực tế đúc kết được, như sử dụng <strong>immutable</strong> thay vì <strong>mutable</strong>, viết <strong>pure function</strong>, chia nhỏ bằng đệ quy, là những <strong>nguyên lý</strong> nền tảng, không ám chỉ một ngôn ngữ cụ thể nào</p>\n<h2 id=\"immutable-sống-kiên-định-thủy-chung\"><a href=\"#immutable-s%E1%BB%91ng-ki%C3%AAn-%C4%91%E1%BB%8Bnh-th%E1%BB%A7y-chung\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Immutable, sống kiên định thủy chung</h2>\n<p>Nói đến lập trình function trước tiên phải nói về <strong>immutable</strong></p>\n<blockquote>\n<p>Immutable là dạng dữ liệu sau khi tạo ra thì không thay đổi nữa</p>\n</blockquote>\n<p>Mutate là gì? ví dụ, gán tham chiếu vào một biến đã có</p>\n<div class=\"gridsome-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'luckyluu'</span> <span class=\"token punctuation\">}</span>\n<span class=\"gridsome-highlight-code-line\"><span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> x</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'vuilaptrinh'</span> <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => {name: \"vuilaptrinh\"} { name: \"luckyluu\" }</span></code></pre></div>\n<p>Giá trị <code class=\"language-inline-text\">x</code> tham chiếu đến một vùng nhớ khác khi viết <code class=\"language-inline-text\">x = { name: 'vuilaptrinh' }</code>, trong khi đó <code class=\"language-inline-text\">y</code> vẫn tham chiếu đến vùng nhớ cũ là <code class=\"language-inline-text\">{ name: 'luckyluu' }</code></p>\n<p>Trường hợp 2 là chỉnh sửa giá một object có sẵn</p>\n<div class=\"gridsome-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'luckyluu'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> x\n\n<span class=\"gridsome-highlight-code-line\">x<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'vuilaptrinh'</span></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => {name: \"vuilaptrinh\"} { name: \"vuilaptrinh\" }</span></code></pre></div>\n<p>Không thay đổi <code class=\"language-inline-text\">y</code>, nhưng cả 2 cùng tham chiếu tới cùng một <code class=\"language-inline-text\">x</code>.</p>\n<p>Riêng javascript chúng ta phải dùng hẳn một thư viện <a href=\"https://immutable-js.github.io/immutable-js/docs/#/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">immutable-js</a> vì việc \"chặn\" không cho thay đổi dữ liệu trong javascript thì \"f..king complicated\", đừng nghĩ <code class=\"language-inline-text\">const bienA</code> là đã mutable, nó chỉ thay đổi scope thôi bạn ơi</p>\n<p>Immutable là một cách làm không tốn nhiều chi phí để ngăn chặn các con bug chúng ta gặp trong các tình huống cá biệt, như 2 luồng xử lý cũng thực hiện ghi đè một giá trị-cùng lúc, hay trong một lần đọc dữ liệu nào đó mà bạn \"nhỡ tay\" đã thay đổi dữ liệu mà không hay biết.</p>\n<p>Cái gì cũng có giá của nó! Tùy vào ngôn ngữ và cục object bự cỡ nào, chi phí bỏ ra để <code class=\"language-inline-text\">clone</code> object ban đầu để chỉnh sửa sẽ khác nhau. Phát sinh vấn đề \"xả rác\" lung tung qua việc khai báo các object mới liên tục khi cần chỉnh sửa, do đó các trường hợp phát triển GUI (viết một editor như VS Code gọi là phát triển GUI) hay game sẽ không phù hợp với immutable, tất nhiên luôn có một vài chỗ vẫn dùng được</p>\n<p>Khi bắt đầu dùng immutable, chúng ta phải tiếp cận khi viết code, phải suy nghĩ từng \"cục\" code nên làm thêm nào để <em>sạch</em> hơn, an toàn với sức khỏe bà mẹ và trẻ em hơn</p>\n<h2 id=\"pure-function-sống-nề-nếp-không-ảnh-hưởng-đến-nhà-hàng-xóm\"><a href=\"#pure-function-s%E1%BB%91ng-n%E1%BB%81-n%E1%BA%BFp-kh%C3%B4ng-%E1%BA%A3nh-h%C6%B0%E1%BB%9Fng-%C4%91%E1%BA%BFn-nh%C3%A0-h%C3%A0ng-x%C3%B3m\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pure Function, sống nề nếp không ảnh hưởng đến nhà hàng xóm</h2>\n<p>Thế nào là một <strong>Function Sạch</strong> ?</p>\n<p>Đó giờ chúng ta vẫn viết function, lập trình hướng function thì có gì khác? <strong>function</strong> ở đây ám chỉ các hàm hoạt động như hàm toán học như <code class=\"language-inline-text\">f(x) = x + 1</code>, những hàm toán học này rất đơn giản, nhận một giá trị, và trả về một giá trị, không chỉnh sửa giá trị bên ngoài, dù nó được truyền vào như tham số của hàm, nếu cùng tham số truyền vào, <strong>luôn luôn</strong> nhận được cùng kết quả trả về. Truyền vào cho <code class=\"language-inline-text\">f(x) = x + 1</code> là 2 thì bất cứ lần nào cũng nhận được kết quả là 3.</p>\n<p>Nhờ vậy chúng ta có thể <strong>cache</strong> kết quả này, sử dụng kết quả cache trong trường hợp có cùng input. Chúng ta cũng có thể gọi các function này trên nhiều luồng chạy song song mà không phải lo lắng gì. Nếu các function không phụ thuộc lẫn nhau, chúng ta cũng có thể gọi nó theo bất cứ thứ tự nào mà không quan tâm đến vấn đề <strong>race condition</strong></p>\n<blockquote>\n<p>Race condition, mình giải thích nôm na thế này, bạn là chàng trai lắm em theo đuổi, người đến trước, kẻ đến sau, mức độ quyết liệt của mỗi em lại khác nhau không phụ thuộc ai trước, ai sau, em xuất phát sau quá quyết liệt, nên ngỏ lời đòi cưới trước, bạn đồng ý, sau đó em xuất phát trước, cuối cùng cũng chạy tới được nhà bạn, bạn lại đồng ý tiếp. Thế là tiêu đời bạn rồi.</p>\n</blockquote>\n<h2 id=\"đệ-quy-sống-luôn-nhớ-về-ông-bà-tổ-tiên\"><a href=\"#%C4%91%E1%BB%87-quy-s%E1%BB%91ng-lu%C3%B4n-nh%E1%BB%9B-v%E1%BB%81-%C3%B4ng-b%C3%A0-t%E1%BB%95-ti%C3%AAn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đệ quy, sống luôn nhớ về ông bà tổ tiên</h2>\n<p>Function gọi lại chính nó, không phụ thuộc biến đếm liên quan gì tới lập trình function?</p>\n<p>Ý tưởng cốt lõi của đệ quy là chia bài toán lớn thành bài toán tương tự như vậy, nhưng quy mô nhỏ hơn. Vấn đề nhỏ hơn nghĩa là cũng dễ hiểu hơn, cách giải quyết cũng rõ rành rành hơn. Khi chúng ta đổi mặt với vòng lặp, nghĩ xem đệ quy có phải là lựa chọn đúng hơn không. Ví dụ lặp bình thường phù hợp khi cần đi qua tất cả phần tử trong mảng, đệ quy lại phù hợp áp dụng quicksort trong mảng (thứ 6 tuần sau mình viết bài này nha!)</p>\n<p>Khi làm việc với đệ quy, luôn nhớ sử dụng và nằm lòng câu hỏi <strong>điều gì sẽ thực thi khi nó ở vị trí cuối cùng</strong></p>\n<div class=\"gridsome-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> acc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tacc <span class=\"token operator\">=</span> acc <span class=\"token operator\">||</span> <span class=\"token number\">1</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> acc <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"gridsome-highlight-code-line\">\t\t<span class=\"token keyword\">return</span> acc</span>\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Hạn chế được yếu điểm của đệ quy là <strong>tràn stack</strong> với câu hỏi trên.</p>\n<h2 id=\"tổng-kết\"><a href=\"#t%E1%BB%95ng-k%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tổng kết</h2>\n<p>Tóm lại tại sao thiên hạ <strong>rần rần</strong> với lập trình function hâm he triệt lập trình hướng đối tượng OOP</p>\n<ul>\n<li>Không tạo ra side effect</li>\n<li>Thứ tự chạy function không quan trọng</li>\n<li>Dễ đọc (ý là người khác dễ đọc lại và hiểu mình đang viết gì)</li>\n</ul>\n<p>Tất nhiên không phải lúc nào lập trình function cũng phù hợp với bất kỳ trường hợp nào, đôi khi side effect là cần thiết, bắt buộc, bạn không thể viết toàn bộ chương trình bằng pure function</p>\n<p>Theo quan điểm cá nhân: lập trình function trở nên phổ biến bởi 2 nguyên nhân: 1. Ngày càng nhiều vi xử lý có khả năng xử lý đồng thời trên đa luồng, 2. Đây là kiểu viết rất dễ tiếp cận với mọi người (như ai cũng xài windows vì bẻ khóa nó thì không có gì dễ đến thế)</p>\n<h2 id=\"tài-liệu-tham-khảo\"><a href=\"#t%C3%A0i-li%E1%BB%87u-tham-kh%E1%BA%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tài liệu tham khảo</h2>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.lucidchart.com/techblog/2017/11/29/functional-programming-principles-every-imperative-programmer-should-use/\">FUNCTIONAL PROGRAMMING PRINCIPLES EVERY IMPERATIVE PROGRAMMER SHOULD USE</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://stackoverflow.com/questions/36504/why-functional-languages\">Why functional languages? </a></p>\n","cover_image":""}},{"node":{"id":"23cef98f247b0aa0d93755129dfad4c6","title":"Function Component trong Vue","path":"/2019-07-21-function-component-trong-vue/","date":"2019-07-21","timeToRead":2,"desc":"Không được xuất chúng như là function component của React, nên function component trong Vue không có nhiều người để ý. Cùng tìm hiểu xem nếu muốn viết function component trong Vue thì chúng ta phải làm sao","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#function-component-trong-vue-l%C3%A0-g%C3%AC\">Function Component trong Vue là gì</a></li>\n<li><a href=\"#truy-xu%E1%BA%A5t-d%E1%BB%AF-li%E1%BB%87u\">Truy xuất dữ liệu</a></li>\n<li><a href=\"#attribute\">Attribute</a></li>\n<li><a href=\"#k%E1%BA%BFt\">Kết</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"tại-sao-viết-function-component\"><a href=\"#t%E1%BA%A1i-sao-vi%E1%BA%BFt-function-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao viết Function Component?</h2>\n<p>Khi viết function component, chúng ta phải <em>tự xử</em> rất nhiều thứ (bên dưới sẽ có liệt kê), vậy câu tại sao chúng ta lại muốn dùng đến nó?</p>\n<p>Anh Austin Gil ảnh có đo, thì thấy <a href=\"https://codesandbox.io/s/vue-stateful-vs-functional-yterr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">function component nó nhanh hơn so với một component có state</a>.</p>\n<h2 id=\"function-component-trong-vue-là-gì\"><a href=\"#function-component-trong-vue-l%C3%A0-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Function Component trong Vue là gì?</h2>\n<p>Component <strong>không</strong> chứa <code class=\"language-inline-text\">state</code> và không có <code class=\"language-inline-text\">instance</code>, không thể truy xuất bằng từ khóa <code class=\"language-inline-text\">this</code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// dùng vue template</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">functional</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// dùng render function</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\nexport default {\n\tfunctional: true,\n\n\trender(h) {\n\t\t//...\n\t}\n}\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"truy-xuất-dữ-liệu\"><a href=\"#truy-xu%E1%BA%A5t-d%E1%BB%AF-li%E1%BB%87u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Truy xuất dữ liệu</h2>\n<p><em>Nếu không có <code class=\"language-inline-text\">state</code> hay <code class=\"language-inline-text\">instance</code> vậy làm sao chúng ta có thể tham chiếu đến dữ liệu và phương thức?</em></p>\n<p>Vue cung cấp tham số <code class=\"language-inline-text\">context</code> bên dưới hàm render để chúng ta truy xuất: <strong>prop, children, slot, scopedSlot, data, parent, listener, injection</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">functional</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> props<span class=\"token punctuation\">.</span>someProp <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\nexport default {\n\tprops: {\n\t\tsomeProp: String\n\t}\n}\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\nexport default {\n\tfunctional: true,\n\n\tprops: {\n\t\tsomeProp: String\n\t},\n\n\trender(h, ctx) {\n\t\tconst someProp = ctx.props.someProp\n\t}\n}\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"attribute\"><a href=\"#attribute\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Attribute</h2>\n<p><strong>attribute không được truyền xuống tự động, ví dụ như <code class=\"language-inline-text\">class</code> và <code class=\"language-inline-text\">id</code> mặc định bị bỏ qua</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> src<span class=\"token operator\">/</span>components<span class=\"token operator\">/</span>ArticleTeaser<span class=\"token punctuation\">.</span>vue <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t&lt;UiHeadline\n\t\tid=\"hyphenCase(article.title)\"\n\t\tclass=\"ArticleTeaser__title\"\n\t\t@click=\"readMore\"\n\t>\t\n\t\t</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> article<span class=\"token punctuation\">.</span>title <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">UiHeadline</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> src<span class=\"token operator\">/</span>components<span class=\"token operator\">/</span>UiHeadline<span class=\"token punctuation\">.</span>vue <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">functional</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-inline-text\">id</code>, <code class=\"language-inline-text\">class</code>, kể cả <code class=\"language-inline-text\">@click</code> cũng không được truyền xuống. Nếu không mở source code đó ai mà biết được tại sao truyền các attribute này xuống mà nó không chạy.</p>\n<p>Hên là có cách giải quyết, nếu bạn đã viết function component thì bạn phải chịu trách nhiệm bổ sung cách giải quyết cho nó</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">functional</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span>\n\t\t<span class=\"token attr-name\">v-bind</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>data.attrs<span class=\"token punctuation\">\"</span></span>\n\t\t<span class=\"token attr-name\">v-on</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>listeners<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Tuy nhiên, chưa xong hết được, vì <code class=\"language-inline-text\">class</code> nó lại không nằm trong <code class=\"language-inline-text\">data.attrs</code></p>\n<p>Bạn phải thông qua <code class=\"language-inline-text\">data.class</code>/ <code class=\"language-inline-text\">data.staticClass</code> và <code class=\"language-inline-text\">data.style</code>/<code class=\"language-inline-text\">data.staticStyle</code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> Đưa vào <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">data.class</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UiHeadline</span></span> <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>['my-class']<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> Đưa vào <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">data.staticClass</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UiHeadline</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-class<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">functional</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span>\n\t\t<span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[data.class, data.staticClass]<span class=\"token punctuation\">\"</span></span>\n\t\t<span class=\"token attr-name\">:style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[data.style, data.staticStyle]<span class=\"token punctuation\">\"</span></span>\n\t\t<span class=\"token attr-name\">v-bind</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>data.attrs<span class=\"token punctuation\">\"</span></span>\n\t\t<span class=\"token attr-name\">v-on</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>listeners<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://stegosource.com/vue-js-functional-components-what-why-and-when/\">Vue.js functional components: What, Why, and When?</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://markus.oberlehner.net/blog/working-with-functional-vue-components/\">Working With Functional Vue.js Components</a></p>\n","cover_image":""}},{"node":{"id":"94e625a2dcba98d9075204ed0f50c1d9","title":"10 nguyên lý lập trình nền tảng mà lập trình viên nào cũng cần biết","path":"/2019-07-13-nguyen-tac-moi-lap-trinh-vien-can-biet/","date":"2019-07-13","timeToRead":7,"desc":"Nhớ thời đại học quá nên ôn lại kiến thức vở lòng mấy bạn ơi","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#KISS\">KISS</a></li>\n<li><a href=\"#DRY\">DRY</a></li>\n<li><a href=\"#Up-up-m%E1%BB%9F-m%E1%BB%9F\">Up up mở mở</a></li>\n<li><a href=\"#H%E1%BB%A3p-th%E1%BB%83-s%E1%BA%BD-m%E1%BA%A1nh-h%C6%A1n-%C4%91%C6%B0%E1%BB%A3c-buff\">Hợp thể sẽ mạnh hơn được buff</a></li>\n<li><a href=\"#Ai-l%C3%A0m-vi%E1%BB%87c-n%E1%BA%A5y-Single-Responsibility\">Ai làm việc nấy (Single Responsibility)</a></li>\n<li><a href=\"#B%E1%BB%9Bt-quan-t%C3%A2m-con-g%C3%A1i-nh%C3%A0-h%C3%A0ng-x%C3%B3m-Separation-of-Concerns\">Bớt quan tâm con gái nhà hàng xóm (Separation of Concerns)</a></li>\n<li><a href=\"#B%E1%BA%A1n-l%C3%A0-l%E1%BA%ADp-tr%C3%ACnh-vi%C3%AAn-kh%C3%B4ng-ph%E1%BA%A3i-th%E1%BA%A7y-b%C3%B3i-YAGNI\">Bạn là lập trình viên không phải thầy bói YAGNI</a></li>\n<li><a href=\"#T%E1%BB%91i-%C6%B0u-h%C3%B3a-qu%C3%A1-s%E1%BB%9Bm\">Tối ưu hóa quá sớm</a></li>\n<li><a href=\"#Refactor\">Refactor</a></li>\n<li><a href=\"#Th%C3%A0-anh-code-s%E1%BA%A1ch-ch%E1%BB%A9-anh-kh%C3%B4ng-c%E1%BA%A7n-code-cho-cao-si%C3%AAu-Clean-Code--Clever-Code\">Thà anh code sạch, chứ anh không cần code cho cao siêu (Clean Code > Clever Code)</a></li>\n<li><a href=\"#T%E1%BB%95ng-k%E1%BA%BFt\">Tổng kết</a></li>\n</ul>\n<!-- /TOC -->\n<p>Nếu bạn là người theo chủ nghĩa viết code sao cho <em>chạy được là đủ</em>, bạn không nên đọc bài này. Còn mục tiêu là viết code và <strong>đặt cái tâm vào những gì mình viết ra</strong> thì bạn nên biết các nguyên lý nền tảng này.</p>\n<h2 id=\"kiss\"><a href=\"#kiss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>KISS</h2>\n<p>Nguyên tắc <strong>Keep it simple, stupid</strong> được áp dụng cho rất nhiều thứ trong cuộc sống, rất cần thiết cho các dự án từ vừa tới lớn.</p>\n<p>Từ lúc bắt đầu code những dòng đầu tiên, chúng ta phải khắc cốt ghi tâm câu <strong>đơn giản nhất có thể</strong>, code càng phức tạp càng khó viết và đọc lại, càng có khả năng phát sinh bug, càng khó chỉnh sửa sau này. Cụ Antoine de Saint-Exupery có phán câu này:</p>\n<blockquote>\n<p>Hoàn hảo không phải là khi không còn gì để thêm vào nữa, mà là không còn gì có thể bỏ bớt</p>\n</blockquote>\n<h2 id=\"dry\"><a href=\"#dry\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DRY</h2>\n<p>Nguyên tắc vàng mà chúng ta nghe mãi nghe mãi. <strong>Don’t repeat yourself</strong>, không bao giờ để chuyện code chổ này giống hệt chổ kia, copy-paste một đoạn code ở nhiều chổ trong source. Nếu thấy một đoạn code mà cứ viết đi viết lại ở nhiều nơi trong source, người ta sẽ đánh giá trình bạn còn non và xanh lắm</p>\n<h2 id=\"up-up-mở-mở-openclosed\"><a href=\"#up-up-m%E1%BB%9F-m%E1%BB%9F-openclosed\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Up up mở mở (Open/Closed)</h2>\n<p>Biết có thể viết thêm các tính năng bổ sung thoải mái, nhưng không được chỉnh sửa core chính. Cái này có thể lấy ví dụ bạn lấy những package trên <code class=\"language-inline-text\">npm</code>, nó nằm trong <code class=\"language-inline-text\">node_modules</code>, sẽ không được chỉnh sửa gì ở đó hết, nếu lỡ sau này người ta update lên, là bạn phải tự cập nhập thủ công nhé.</p>\n<h2 id=\"hợp-thể-sẽ-mạnh-hơn-được-buff-composition--inheritance\"><a href=\"#h%E1%BB%A3p-th%E1%BB%83-s%E1%BA%BD-m%E1%BA%A1nh-h%C6%A1n-%C4%91%C6%B0%E1%BB%A3c-buff-composition--inheritance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hợp thể sẽ mạnh hơn được buff (Composition > Inheritance)</h2>\n<p><img src=\"https://wegotthiscovered.com/wp-content/uploads/2018/08/Power-Rangers-Movie-Blu-ray-cover-art-1.jpg\" alt=\"10 nguyên tắc lập trình nền tảng mà lập trình viên nào cũng cần biết\"></p>\n<p>Nếu bạn có xem 5 anh em siêu nhân bạn sẽ hiểu, nếu 5 anh em siêu nhân mà hợp thể lại sẽ tạo ra một con robot với sức mạnh vượt bật, đánh bại mọi cả thể yêu quái, dù nó được buff rất nhiều đồ chơi để tăng dame.</p>\n<p>Cái này có ví dụ cho anh em nào viết OOP, mà mình thì không rành OOP lắm, nên anh em tự tìm ví dụ nhé.</p>\n<h2 id=\"ai-làm-việc-nấy-single-responsibility\"><a href=\"#ai-l%C3%A0m-vi%E1%BB%87c-n%E1%BA%A5y-single-responsibility\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ai làm việc nấy (Single Responsibility)</h2>\n<p>Mỗi function chỉ thực hiện một nhiệm vụ duy nhất, không ôm đồm nhiều thứ cùng lúc.</p>\n<p>Nếu xác định ra đường là đi ăn cơm, thì ăn cơm rồi về, không có sẵn tiền mua thêm bịch chè, ly trà sữa hay vài trứng vịt lộn.</p>\n<h2 id=\"bớt-quan-tâm-con-gái-nhà-hàng-xóm-separation-of-concerns\"><a href=\"#b%E1%BB%9Bt-quan-t%C3%A2m-con-g%C3%A1i-nh%C3%A0-h%C3%A0ng-x%C3%B3m-separation-of-concerns\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bớt quan tâm con gái nhà hàng xóm (Separation of Concerns)</h2>\n<p>Cũng tương tự với ai làm việc nấy, nguyên tắc này có phần trừu tượng, khái quát hơn một chút.</p>\n<p>Lấy ví dụ quan hệ trai-gái, để có thể quen một lúc 3 cô, bạn cần lập 3 tài khoản Zalo khác nhau, trên 3 cái điện thoại khác nhau, để khi đi chơi với cô nào thì không bị phát hiện mấy cô kia, đừng dùng 1 tài khoản trên 1 điện thoại mà chat với cả 3 cô cùng lúc.</p>\n<p>Lấy ví dụ trong <em>nghề</em> lập trình nó là mô hình thiết kế MVC, còn trong <em>nghề</em> React nó là khái niệm Container và Presentation component. Nhưng anh em cứ nhớ ví dụ 3 cô gái cho dễ.</p>\n<p><img src=\"https://static.makeuseof.com/wp-content/uploads/2017/10/programming-principle-mvc-pattern.png\" alt=\"10 nguyên tắc lập trình nền tảng mà lập trình viên nào cũng cần biết\"></p>\n<h2 id=\"bạn-là-lập-trình-viên-không-phải-thầy-bói-yagni---you-arent-gonna-need-it\"><a href=\"#b%E1%BA%A1n-l%C3%A0-l%E1%BA%ADp-tr%C3%ACnh-vi%C3%AAn-kh%C3%B4ng-ph%E1%BA%A3i-th%E1%BA%A7y-b%C3%B3i-yagni---you-arent-gonna-need-it\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bạn là lập trình viên không phải thầy bói (YAGNI - you aren’t gonna need it)</h2>\n<p>Nguyên tắc này nó nói là, bạn đừng viết ra những hàm mà bạn nghĩ, \"ờ, có lẽ trong tương lai chúng ta sớm muộn cũng xài tới nó\". Cái gì cần thì viết, có sao lại viết trước?</p>\n<p>Ví dụ, bạn viết sẵn một số lớp abstract và generic để tránh trùng lặp code, mà quá nhiều lớp abstract dẫn đến hậu quả không thể nào mà bảo trì nổi. Nói chung để đảm bảo nguyên tắc DRY, bạn cứ viết trước đi, nếu thấy bị trùng, thầy refactor lại, như ông bà có câu cứ có trâu rồi hả mua chuồng</p>\n<h2 id=\"tối-ưu-hóa-quá-sớm-avoid-premature-optimization\"><a href=\"#t%E1%BB%91i-%C6%B0u-h%C3%B3a-qu%C3%A1-s%E1%BB%9Bm-avoid-premature-optimization\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tối ưu hóa quá sớm (Avoid Premature Optimization)</h2>\n<p>Nếu bạn có xu hướng tối ưu các giải thuật được viết ra ngay từ đầu, vấn đề ở chỗ là bạn không thể biết được chương trình sẽ bị nghẽn cổ chai ở đâu cho đến khi có dữ liệu thực tế. Bạn có thể phỏng đoán, tất nhiên là được mà đôi khi hên hên lại đúng. Chỉ có một điều dễ thấy là bạn sẽ bỏ ra không ít thời gian để tăng tốc cho hàm đó, mà thiệt ra nó không chậm tới mức như bạn nghĩ, hoặc mức độ user sử dụng hàm đó sẽ không nhiều.</p>\n<p>Hoàn thành những vấn đề mấu chốt trước, sau đó dò lại để biết đang bị thắt cổ chai ở đâu</p>\n<h2 id=\"refactor-rồi-lại-refactor-rồi-lại-refactor\"><a href=\"#refactor-r%E1%BB%93i-l%E1%BA%A1i-refactor-r%E1%BB%93i-l%E1%BA%A1i-refactor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Refactor, rồi lại Refactor, rồi lại Refactor</h2>\n<p>Sự thật ai cũng biết là khi bạn mới bắt đầu viết, thời gian sau nhìn lại, khi đã có cái nhìn cụ thể và rõ ràng hơn những gì mình đang làm trong dự án, bạn sẽ code trước đây mình viết thật sự chưa \"ngon\". Công việc refactor là rất bình thường. Nếu bạn đang có việc cần thay đổi hoặc kiểm tra code cũ, nếu được thì cứ <em>dọn dẹp</em> một tí trước khi đi.</p>\n<h2 id=\"thà-anh-code-sạch-chứ-anh-không-cần-code-cho-cao-siêu-clean-code--clever-code\"><a href=\"#th%C3%A0-anh-code-s%E1%BA%A1ch-ch%E1%BB%A9-anh-kh%C3%B4ng-c%E1%BA%A7n-code-cho-cao-si%C3%AAu-clean-code--clever-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thà anh code sạch, chứ anh không cần code cho cao siêu (Clean Code > Clever Code)</h2>\n<p>Nói về clean code, là phải bỏ đi cái tôi to bự sang một bên, đừng bao giờ nghĩ code thế cho ngầu, code mà để bạn khoe với thiên hạ rằng cách code của tôi mới thông minh hơn.</p>\n<p>Ví dụ dễ thấy, một số thanh niên mình từng làm việc chung rất thích dùng câu điều kiện trên một dòng, anh ấy cứ <code class=\"language-inline-text\">&amp;&amp;  || &amp;&amp; || &amp;&amp;</code> các kiểu trên một dòng, ai mà vô đọc thì chỉ có kiếm ảnh để nhờ giải thích là đang muốn làm cái gì.</p>\n<h2 id=\"tổng-kết\"><a href=\"#t%E1%BB%95ng-k%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tổng kết</h2>\n<p>9 người thì 10 ý, nếu đi hỏi 9 người với câu hỏi \"Thế nào được gọi là một lập trình viên tốt\", thì chắc nhận được không ít sự khác nhau về quan điểm, mà đôi khi còn trái chiều với nhau nữa.</p>\n<p>Bạn thấy ý kiến này thế nào, một lập trình viên giỏi là người biết mình đang phục vụ người dùng cuối, người có thể làm việc hiệu quả với đồng đội, người có thể hoàn thành công việc được giao đúng yêu cầu, đúng tiến độ.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.makeuseof.com/tag/basic-programming-principles/\">10 Basic Programming Principles Every Programmer Must Follow</a></p>\n","cover_image":""}},{"node":{"id":"b39e7f4ad457634625b3b49f1e399c97","title":"Sử dụng React Hook Effect","path":"/2019-07-03-huong-dan-su-dung-react-hook-effect/","date":"2019-07-03","timeToRead":18,"desc":"Bài này mình contribute cho http://vi.reactjs.org về cách sử dụng React Hook Effect","content":"<!-- TOC -->\n<ul>\n<li>\n<p><a href=\"#Effect-kh%C3%B4ng-c%E1%BA%A7n-Cleanup-effects-without-cleanup\">Effect không cần Cleanup {#effects-without-cleanup}</a></p>\n<ul>\n<li><a href=\"#V%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-Classes-example-using-classes\">Ví dụ sử dụng Classes {#example-using-classes}</a></li>\n<li><a href=\"#V%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-Hook-example-using-hooks\">Ví dụ sử dụng Hook {#example-using-hooks}</a></li>\n<li><a href=\"#Gi%E1%BA%A3i-th%C3%ADch-c%E1%BB%A5-th%E1%BB%83-detailed-explanation\">Giải thích cụ thể {#detailed-explanation}</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#Effect-c%E1%BA%A7n-Cleanup-effects-with-cleanup\">Effect cần Cleanup {#effects-with-cleanup}</a></p>\n<ul>\n<li><a href=\"#V%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-Class-example-using-classes-1\">Ví dụ sử dụng Class {#example-using-classes-1}</a></li>\n<li><a href=\"#V%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-Hooks-example-using-hooks-1\">Ví dụ sử dụng Hooks {#example-using-hooks-1}</a></li>\n</ul>\n</li>\n<li><a href=\"#T%E1%BB%95ng-h%E1%BB%A3p-recap\">Tổng hợp {#recap}</a></li>\n<li>\n<p><a href=\"#Tip-s%E1%BB%AD-d%E1%BB%A5ng-Effect-tips-for-using-effects\">Tip sử dụng Effect {#tips-for-using-effects}</a></p>\n<ul>\n<li><a href=\"#Tip-S%E1%BB%AD-d%E1%BB%A5ng-nhi%E1%BB%81u-Effect-t%C3%A1ch-bi%E1%BB%87ttip-use-multiple-effects-to-separate-concerns\">Tip: Sử dụng nhiều Effect tách biệt{#tip-use-multiple-effects-to-separate-concerns}</a></li>\n<li><a href=\"#Gi%E1%BA%A3i-th%C3%ADch-T%E1%BA%A1i-sao-Effect-ch%E1%BA%A1y-tr%C3%AAn-m%E1%BB%97i-update-explanation-why-effects-run-on-each-update\">Giải thích: Tại sao Effect chạy trên mỗi update {#explanation-why-effects-run-on-each-update}</a></li>\n<li><a href=\"#Tip-T%E1%BB%91i-%C6%B0u-Performance-b%E1%BA%B1ng-c%C3%A1ch-b%E1%BB%8F-qua-Effect-tip-optimizing-performance-by-skipping-effects\">Tip: Tối ưu Performance bằng cách bỏ qua Effect {#tip-optimizing-performance-by-skipping-effects}</a></li>\n</ul>\n</li>\n<li><a href=\"#B%C6%B0%E1%BB%9Bc-ti%E1%BA%BFp-theo-next-steps\">Bước tiếp theo {#next-steps}</a></li>\n</ul>\n<!-- /TOC -->\n<p><em>Hook</em> là một tính năng mới từ React 16.8. Nó cho phép sử dụng state và các tính năng khác của React mà không cần viết dạng class</p>\n<p><em>Effect Hook</em> cho phép thực hiện side effect bên trong các function component:</p>\n<div class=\"gridsome-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gridsome-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gridsome-highlight-code-line\">  <span class=\"token comment\">// Tương tự như componentDidMount và componentDidUpdate:</span></span><span class=\"gridsome-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gridsome-highlight-code-line\">    <span class=\"token comment\">// Cập nhập document title sử dụng browser API</span></span><span class=\"gridsome-highlight-code-line\">    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span><span class=\"gridsome-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>You clicked <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> times<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        Click me\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Đoạn snippet này dựa trên <a href=\"http://vi.reactjs.org/docs/hooks-state.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ví dụ về counter ở trang trước</a>, chúng ta có thêm tính năng mới: đặt giá trị document title tương ứng với số lần click.</p>\n<p>Fetching data, thiết lập các subscription, và tự ý thay đổi DOM trong React component, những hành động như vậy được là \"side effect\" (hoặc \"effect\").</p>\n<blockquote>\n<p>Tip</p>\n<p>Nếu bạn quen với các phương thức lifecycle của React class, bạn có thể hình dung <code class=\"language-inline-text\">useEffect</code> Hook như sự kết hợp của <code class=\"language-inline-text\">componentDidMount</code>, <code class=\"language-inline-text\">componentDidUpdate</code>, và <code class=\"language-inline-text\">componentWillUnmount</code>.</p>\n</blockquote>\n<p>Có 2 loại side effect phổ biến trong React component: loại không cần cleanup, và loại cần. Cùng phân biệt 2 loại này kỹ hơn.</p>\n<h2 id=\"effect-không-cần-cleanup-effects-without-cleanup\"><a href=\"#effect-kh%C3%B4ng-c%E1%BA%A7n-cleanup-effects-without-cleanup\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Effect không cần Cleanup {#effects-without-cleanup}</h2>\n<p>Đôi lúc, chúng ta muốn <strong>chạy một vài đoạn code sau khi React đã cập nhập DOM.</strong> Network request, tự ý thay đổi DOM, và logging là những ví dụ điển hình của effect không cần cleanup. Chúng ta gọi như vậy vì có thể chạy chúng và quên ngay lập tức. Hãy so sánh class và Hook cho phép thực hiện side effect như thế ra sao.</p>\n<h3 id=\"ví-dụ-sử-dụng-classes-example-using-classes\"><a href=\"#v%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-classes-example-using-classes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ví dụ sử dụng Classes {#example-using-classes}</h3>\n<p>Trong React class components, phương thức <code class=\"language-inline-text\">render</code> không được phép tạo ra side effect. Nó sẽ là quá sớm -- chúng ta thường chỉ muốn chạy effect <em>sau khi</em> React đã cập nhập DOM.</p>\n<p>Đó là lý do tại sao trong React class, chúng ta đặt side effect bên trong <code class=\"language-inline-text\">componentDidMount</code> và <code class=\"language-inline-text\">componentDidUpdate</code>. Quay lại ví dụ, đây là React counter class component sẽ cập nhập document title ngay sau khi React thay đổi DOM:</p>\n<div class=\"gridsome-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gridsome-highlight-code-line\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gridsome-highlight-code-line\">    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span><span class=\"gridsome-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gridsome-highlight-code-line\"></span><span class=\"gridsome-highlight-code-line\">  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gridsome-highlight-code-line\">    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span><span class=\"gridsome-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>You clicked <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span> times<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          Click me\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Để ý cách <strong>chúng ta đã lập lại 2 thao tác tương tự nhau bên trong 2 phương thức lifecycle</strong></p>\n<p>Đó là bởi vì trong đa phần các trường hợp, chúng ta muốn thực hiện cùng một side effect khi component đã mount hoặc đã update. Một cách tổng quát, chúng ta muốn thực hiện sau mỗi lần render -- nhưng React class component không có phương thức như vậy. Chúng ta có thể tách nó ra thành một hàm riêng, nhưng vẫn phải gọi nó ở 2 nơi khác nhau.</p>\n<p>Bây giờ chúng ta xem cách làm tương tự với <code class=\"language-inline-text\">useEffect</code> Hook.</p>\n<h3 id=\"ví-dụ-sử-dụng-hook-example-using-hooks\"><a href=\"#v%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-hook-example-using-hooks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ví dụ sử dụng Hook {#example-using-hooks}</h3>\n<p>Chúng ta đã xem ví dụ ở trên, giờ xem kỹ hơn một lần nữa:</p>\n<div class=\"gridsome-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gridsome-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gridsome-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gridsome-highlight-code-line\">    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span><span class=\"gridsome-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>You clicked <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> times<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        Click me\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><code class=\"language-inline-text\">useEffect</code> đã làm gì?</strong> Bằng cách sử dụng Hook này, chúng ta nói với React rằng component của chúng ta cần thực hiện một việc gì đó sau khi render. React sẽ ghi nhớ hàm bạn truyền vào (chúng tôi thích gọi nó là \"effect\"), và sau đó gọi lại hàm này sau khi DOM đã update. Trong effect này, chúng ta đổi document title, chúng ta cũng có thể  fetch data hoặc gọi một số API khác.</p>\n<p><strong>Tại sao <code class=\"language-inline-text\">useEffect</code> được gọi bên trong component?</strong> Đặt <code class=\"language-inline-text\">useEffect</code> bên trong component cho phép chúng ta truy xuất đến state <code class=\"language-inline-text\">count</code> (hoặc bất kỳ prop nào) bên trong effect. Chúng ta không cần một API đặc biệt để đọc nó -- nó đã nằm trong scope của function. Hook tận dụng JavaScript closures và tránh cung cấp thêm các APIs mà bản thân JavaScript đã có sẵn giải pháp.</p>\n<p><strong><code class=\"language-inline-text\">useEffect</code> chạy sau tất cả những lần render?</strong> Đúng! Theo mặc định, nó chạy sau lần render đầu tiên <em>và</em> mỗi lần update. (Chúng ta sẽ nói về <a href=\"#tip-optimizing-performance-by-skipping-effects\">làm cách nào để tùy biến lại</a>.) Thay vì nghĩ theo hướng \"mounting\" và \"updating\", bạn sẽ thấy dễ hiểu hơn nếu nghĩ theo kiểu \"sau khi render\". React đảm bảo DOM đã được update trước khi chạy effect.</p>\n<h3 id=\"giải-thích-cụ-thể-detailed-explanation\"><a href=\"#gi%E1%BA%A3i-th%C3%ADch-c%E1%BB%A5-th%E1%BB%83-detailed-explanation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giải thích cụ thể {#detailed-explanation}</h3>\n<p>Giờ chúng ta đã hiểu về effect, đoạn code này sẽ rất dễ hiểu:</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chúng ta khai báo state <code class=\"language-inline-text\">count</code>, và sau đó nói với React chúng ta cần sử dụng. Chúng ta truyền cho <code class=\"language-inline-text\">useEffect</code> Hook một hàm. Hàm truyền vào này <em>là</em> effect. Bên trong effect, chúng ta đặt document title sử dụng API <code class=\"language-inline-text\">document.title</code>. Chúng ta có thể đọc giá trị sau cùng của <code class=\"language-inline-text\">count</code> bên trong effect bởi vì nó nằm chung scope với function. Khi React render component, nó sẽ nhớ lại effect chúng ta đã gửi, và chạy effect sau khi cập nhập DOM. Nó xảy ra ở tất cả các lần render, kể cả lần đầu.</p>\n<p>Lập trình viên JavaScript có kinh nghiệm sẽ để ý thấy function truyền vào cho <code class=\"language-inline-text\">useEffect</code> sẽ khác nhau cho tất cả các lần render. Đây là điều cố ý. Thật ra, nó sẽ cho chúng ta đọc giá trị <code class=\"language-inline-text\">count</code> bên trong effect mà không cần lo lắng về việc lấy state. Mỗi lần chúng ta re-render, chúng ta gọi một effect <strong>khác</strong>, thay thế cái trước đó. Bằng cách này, nó làm cho effect như một phần của việc render -- mỗi effect \"thuộc vào\" một render cụ thể. Chúng ta sẽ hiểu tại sao cách này lại hiệu quả <a href=\"#explanation-why-effects-run-on-each-update\">ở phần sau của bài này</a>.</p>\n<blockquote>\n<p>Tip</p>\n<p>Không giống <code class=\"language-inline-text\">componentDidMount</code> hoặc <code class=\"language-inline-text\">componentDidUpdate</code>, effect chạy với <code class=\"language-inline-text\">useEffect</code> không block trình duyệt cập nhập màn hình. Các effect chủ yếu không cần xảy ra tuần tự. Trong vài tình huống không mấy phổ biến (ví dụ như đo layout), chúng ta có  <a href=\"http://vi.reactjs.org/docs/hooks-reference.html#uselayouteffect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-inline-text\">useLayoutEffect</code></a> Hook với API tính năng tương tự như <code class=\"language-inline-text\">useEffect</code>.</p>\n</blockquote>\n<h2 id=\"effect-cần-cleanup-effects-with-cleanup\"><a href=\"#effect-c%E1%BA%A7n-cleanup-effects-with-cleanup\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Effect cần Cleanup {#effects-with-cleanup}</h2>\n<p>Ở trên, chúng ta đã bàn về những side effect không cần cleanup. Tuy nhiên, một vài effect cần có. Ví dụ, <strong>chúng ta muốn thiết lập các subscription</strong> cho vài data source bên ngoài. Tình huống đó, clean up là rất quan trọng để không xảy ra memory leak! Cùng so sánh cách làm giữa class và Hook</p>\n<h3 id=\"ví-dụ-sử-dụng-class-example-using-classes-1\"><a href=\"#v%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-class-example-using-classes-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ví dụ sử dụng Class {#example-using-classes-1}</h3>\n<p>Trong React class, chúng ta thường cài đặt một subscription trong <code class=\"language-inline-text\">componentDidMount</code>, và clean it up trong <code class=\"language-inline-text\">componentWillUnmount</code>. Lấy ví dụ, chúng ta có <code class=\"language-inline-text\">ChatAPI</code> module cho phép chúng ta subscribe vào tình trạng online của 1 danh sách friend. Cách chúng ta làm với class</p>\n<div class=\"gridsome-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FriendStatus</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isOnline</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gridsome-highlight-code-line\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gridsome-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span></span><span class=\"gridsome-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span></span><span class=\"gridsome-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange</span><span class=\"gridsome-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gridsome-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gridsome-highlight-code-line\"></span><span class=\"gridsome-highlight-code-line\">  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gridsome-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span></span><span class=\"gridsome-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span></span><span class=\"gridsome-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange</span><span class=\"gridsome-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gridsome-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gridsome-highlight-code-line\"></span><span class=\"gridsome-highlight-code-line\">  <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gridsome-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gridsome-highlight-code-line\">      <span class=\"token literal-property property\">isOnline</span><span class=\"token operator\">:</span> status<span class=\"token punctuation\">.</span>isOnline</span><span class=\"gridsome-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gridsome-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Để ý <code class=\"language-inline-text\">componentDidMount</code> và <code class=\"language-inline-text\">componentWillUnmount</code>. Phương thức Lifecycle buộc chúng ta tách logic này ra thậm chí cả 2 đoạn code trên điều liên quan đến cùng một effect.</p>\n<blockquote>\n<p>Lưu ý</p>\n<p>Nếu để ý kỹ hơn, bạn sẽ thấy chúng ta còn cần thêm <code class=\"language-inline-text\">componentDidUpdate</code> để thực sự chuẩn xác. Tạm thời cứ bỏ qua phần đó vì chúng ta sẽ đề cập lại <a href=\"#explanation-why-effects-run-on-each-update\">ở phần sau</a> of this page.</p>\n</blockquote>\n<h3 id=\"ví-dụ-sử-dụng-hooks-example-using-hooks-1\"><a href=\"#v%C3%AD-d%E1%BB%A5-s%E1%BB%AD-d%E1%BB%A5ng-hooks-example-using-hooks-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ví dụ sử dụng Hooks {#example-using-hooks-1}</h3>\n<p>Cùng xem cách chúng ta làm với Hook.</p>\n<p>Bạn có thể sẽ nghĩ chúng ta cần 2 effect khác nhau để thực hiện cleanup. Code khởi tạo và xóa subscription luôn luôn đứng kề nhau, <code class=\"language-inline-text\">useEffect</code> được thiết kế để dữ chúng cùng một chỗ. Nếu effect trả về function, React sẽ chạy  function đó, chúng ta đưa clean up vào bên trong function trả về:</p>\n<div class=\"gridsome-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gridsome-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gridsome-highlight-code-line\">    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gridsome-highlight-code-line\">      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gridsome-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gridsome-highlight-code-line\"></span><span class=\"gridsome-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gridsome-highlight-code-line\">    <span class=\"token comment\">// Chỉ định clean up sau khi gọi effect:</span></span><span class=\"gridsome-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gridsome-highlight-code-line\">      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gridsome-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gridsome-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Tại sao chúng ta trả về function bên trong effect?</strong> Đây là một tùy chọn để chạy cơ chế cleanup cho effect. Nó cho phép chúng ta đưa tạo và xóa subscription trong cùng một effect.</p>\n<p><strong>Khi nào React clean up một effect?</strong> React thực hiện cleanup khi  component unmount. Tuy nhiên, như đã học trước đó, effect trên tất cả những lần render, không phải chỉ một. Đó là tại sao React <em>đồng thời</em> cleans up effect từ những lần render trước. Chúng ta sẽ thảo luận thêm <a href=\"#explanation-why-effects-run-on-each-update\">việc này giúp tránh bug</a> và <a href=\"#tip-optimizing-performance-by-skipping-effects\">làm cách nào tùy biến đặc tính này để cái thiện performance </a> ở bên dưới.</p>\n<blockquote>\n<p>Ghi chú</p>\n<p>Chúng ta không cần trả về một function có tên trong effect. Chúng ta gọi nó là <code class=\"language-inline-text\">cleanup</code> để chỉ rõ mục đích, bạn có thể dùng arrow function trong thực tế.</p>\n</blockquote>\n<h2 id=\"tổng-hợp-recap\"><a href=\"#t%E1%BB%95ng-h%E1%BB%A3p-recap\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tổng hợp {#recap}</h2>\n<p>Chúng ta đã học <code class=\"language-inline-text\">useEffect</code> cho phép chúng ta thực hiện nhiều kiểu side effect sau khi component được render. Một vài effect cần cleanup nó sẽ return một function:</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Một vài effect khác có thể không cần cleanup, thì không cần return gì cả.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Effect Hook được sử dụng trong cả 2 trường hợp.</p>\n<hr>\n<p><strong>Nếu bạn đã nắm bắt được cách làm việc của Effect Hook, hoặc nếu bạn cảm thấy hơi ngợp, có thể nhảy xuống <a href=\"http://vi.reactjs.org/docs/hooks-rules.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">phần Nguyên tắc sử dụng Hook</a> bây giờ.</strong></p>\n<hr>\n<h2 id=\"tip-sử-dụng-effect-tips-for-using-effects\"><a href=\"#tip-s%E1%BB%AD-d%E1%BB%A5ng-effect-tips-for-using-effects\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tip sử dụng Effect {#tips-for-using-effects}</h2>\n<p>Chúng ta sẽ cùng đi sâu một số khía cạnh của <code class=\"language-inline-text\">useEffect</code> mà các lập trình viên React có kinh nghiệm sẽ thắc mắc. Không cần quá cưỡng ép bản thân, bạn có thể dừng ở đây, và quay lại để tìm hiểu Effect Hook bất cứ lúc nào.</p>\n<h3 id=\"tip-sử-dụng-nhiều-effect-tách-biệttip-use-multiple-effects-to-separate-concerns\"><a href=\"#tip-s%E1%BB%AD-d%E1%BB%A5ng-nhi%E1%BB%81u-effect-t%C3%A1ch-bi%E1%BB%87ttip-use-multiple-effects-to-separate-concerns\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tip: Sử dụng nhiều Effect tách biệt{#tip-use-multiple-effects-to-separate-concerns}</h3>\n<p>Một trong những vấn đề đã liệt kê ở  <a href=\"http://vi.reactjs.org/docs/hooks-intro.html#complex-components-become-hard-to-understand\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">động lực</a> tạo ra Hooks là các phương thức lifecycle của class thường chứa những logic không liên quan với nhau, còn những logic đáng lý phải nằm gần nhau lại nằm ở các phương thức khác nhau. Đây là component kết hợp counter và friend status từ ví dụ ở trên</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FriendStatusWithCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">isOnline</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">isOnline</span><span class=\"token operator\">:</span> status<span class=\"token punctuation\">.</span>isOnline\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Để ý cái logic của <code class=\"language-inline-text\">document.title</code> đang nằm ở <code class=\"language-inline-text\">componentDidMount</code> và <code class=\"language-inline-text\">componentDidUpdate</code>. Logic của subscription thì cũng nằm ở  <code class=\"language-inline-text\">componentDidMount</code> và <code class=\"language-inline-text\">componentWillUnmount</code>. Và <code class=\"language-inline-text\">componentDidMount</code> chứa code cả hai.</p>\n<p>Như vậy hook đã giải quyết vấn đề này như thế nào? Nếu như <a href=\"http://vi.reactjs.org/docs/hooks-state.html#tip-using-multiple-state-variables\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bạn có thể sử dụng <em>State</em> Hook nhiều lần</a>, bạn cũng có thể sử dụng nhiều effect. Nó cho phép tách những logic không liên quan ra thành những effect khác nhau:</p>\n<div class=\"gridsome-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatusWithCounter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gridsome-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gridsome-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Hook cho phép tách code dựa trên cái nó đang làm</strong> chứ không đi theo phương thức lifecycle. React sẽ apply <em>từng</em> effect được sử dụng trong component, theo thứ tự đã khai báo.</p>\n<h3 id=\"giải-thích-tại-sao-effect-chạy-trên-mỗi-update-explanation-why-effects-run-on-each-update\"><a href=\"#gi%E1%BA%A3i-th%C3%ADch-t%E1%BA%A1i-sao-effect-ch%E1%BA%A1y-tr%C3%AAn-m%E1%BB%97i-update-explanation-why-effects-run-on-each-update\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giải thích: Tại sao Effect chạy trên mỗi update {#explanation-why-effects-run-on-each-update}</h3>\n<p>Nếu đã từng sử dụng class, bạn sẽ thắc mắc tại sao bước cleanup effect lại chạy trên mỗi lần re-render, mà không phải khi unmounting. Xét một ví dụ thực tế để thấy tại sao thiết kế này giúp chúng ta có những component ít bug hơn</p>\n<p><a href=\"#example-using-classes-1\">Ở phần trước</a>, chúng ta có đề cập ví dụ <code class=\"language-inline-text\">FriendStatus</code> để hiển thị trạng thái online của Friend. Class đọc <code class=\"language-inline-text\">friend.id</code> từ <code class=\"language-inline-text\">this.props</code>, subscribe sau khi component mount, và unsubscribe trong lúc unmounting:</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Chuyện gì sẽ xảy ra nếu prop <code class=\"language-inline-text\">friend</code> thay đổi</strong> trong khi component đang hiển thị trên màn hình (chưa unmount)? Chắc chắn có bug với danh sách status. Chúng ta cũng có thể gây ra memory leak hoặc crash khi đang unmounting và gọi unsubscribe nếu có một Friend ID không đúng.</p>\n<p>Trong class component, chúng ta cần thêm <code class=\"language-inline-text\">componentDidUpdate</code> để xử lý tình huống này:</p>\n<div class=\"gridsome-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gridsome-highlight-code-line\">  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gridsome-highlight-code-line\">    <span class=\"token comment\">// Unsubscribe friend.id trước đó</span></span><span class=\"gridsome-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span></span><span class=\"gridsome-highlight-code-line\">      prevProps<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span></span><span class=\"gridsome-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange</span><span class=\"gridsome-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gridsome-highlight-code-line\">    <span class=\"token comment\">// Subscribe friend.id mới</span></span><span class=\"gridsome-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span></span><span class=\"gridsome-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span></span><span class=\"gridsome-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange</span><span class=\"gridsome-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gridsome-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quên handle <code class=\"language-inline-text\">componentDidUpdate</code> là điều dễ dẫn tới có bug trong React.</p>\n<p>Đây là phiên bản sử dụng Hook</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Không còn bị dính bug như ở trên</p>\n<p>Sẽ không có một đoạn code nào đặc biệt để xử lý lúc update vì theo cách chạy <em>mặc định</em> của <code class=\"language-inline-text\">useEffect</code> nó đã xóa effect trước khi apply effect mới. Để hình dung hóa, đây là các bước gọi subscribe và unsubscribe mà component đã chạy qua:</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Mount với prop { friend: { id: 100 } }</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Chạy effect đầu tiên</span>\n\n<span class=\"token comment\">// Cập nhập prop { friend: { id: 200 } }</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Clean effect trước đó</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Chạy effect tiếp theo</span>\n\n<span class=\"token comment\">// Cập nhập với { friend: { id: 300 } }</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Clean effect trước đó</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Chạy effect tiếp theo</span>\n\n<span class=\"token comment\">// Unmount</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Clean effect lần cuối</span></code></pre></div>\n<p>Đặc tính này đảm bảo thống nhất và ngăn bug thường xuất hiện do không cập nhập login với class component</p>\n<h3 id=\"tip-tối-ưu-performance-bằng-cách-bỏ-qua-effect-tip-optimizing-performance-by-skipping-effects\"><a href=\"#tip-t%E1%BB%91i-%C6%B0u-performance-b%E1%BA%B1ng-c%C3%A1ch-b%E1%BB%8F-qua-effect-tip-optimizing-performance-by-skipping-effects\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tip: Tối ưu Performance bằng cách bỏ qua Effect {#tip-optimizing-performance-by-skipping-effects}</h3>\n<p>Trong một số trường hợp, clean và apply effect sau khi render có thể dẫn đến ảnh hưởng performance. Trong class component, chúng ta giải quyết bằng viết một hàm so sánh giữa <code class=\"language-inline-text\">prevProps</code> hoặc <code class=\"language-inline-text\">prevState</code> bên trong <code class=\"language-inline-text\">componentDidUpdate</code>:</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">.</span>count <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Đây là yêu cầu rất cần thiết, nên đã được có đưa sẵn trong <code class=\"language-inline-text\">useEffect</code> Hook API. Bạn có thể bảo React <em>bỏ qua</em> việc apply effect nếu một số giá trị không thay đổi giữa các lần render. Để làm như vậy, truyền vào một array (không bắt buộc) vào <code class=\"language-inline-text\">useEffect</code>:</p>\n<div class=\"gridsome-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"gridsome-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Chỉ re-run effect nếu giá trị count thay đổi</span></span></code></pre></div>\n<p>Trong ví dụ ở trên, chúng ta truyền vào <code class=\"language-inline-text\">[count]</code> như một tham số thứ 2. Nó nghĩa là gì? Nếu <code class=\"language-inline-text\">count</code> là <code class=\"language-inline-text\">5</code>, rồi sau đó component re-render với <code class=\"language-inline-text\">count</code> vẫn bằng <code class=\"language-inline-text\">5</code>, React sẽ so sánh <code class=\"language-inline-text\">[5]</code> từ lần render trước và <code class=\"language-inline-text\">[5]</code> với lần render hiện tại. Vì tất cả giá trị trong mảng bằng nhau (<code class=\"language-inline-text\">5 === 5</code>), React sẽ bỏ qua  effect. Đó là cách chúng ta tối ưu</p>\n<p>Khi chúng ta render với <code class=\"language-inline-text\">count</code> thành <code class=\"language-inline-text\">6</code>, React sẽ so sánh các giá trị trong <code class=\"language-inline-text\">[5]</code> từ lần render trước với các giá trị trong <code class=\"language-inline-text\">[6]</code> lần render hiện tại. Ở lần này, React sẽ gọi lại effect vì <code class=\"language-inline-text\">5 !== 6</code>. Nếu có nhiều giá trị bên trong array, React sẽl re-run effect nếu một trong các giá trị đó khác với lần trước.</p>\n<p>Effect cũng làm việc tương tự với quá trình cleanup:</p>\n<div class=\"gridsome-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"gridsome-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Chỉ re-subscribe nếu props.friend.id bị thay đổi</span></span></code></pre></div>\n<p>Trong tương lai, tham số thứ 2 sẽ được tự động thêm vào trong lúc  build-transform.</p>\n<blockquote>\n<p>Lưu ý</p>\n<p>Nếu sử dụng cách tối ưu này, phải chắc chắn array chứa <strong>tất cả giá trị bên trong của component scope (như prop và state) nếu thay đổi theo các lần render và effect có sử dụng</strong>. Nếu không, nếu không nó sẽ tham chiếu tới giá trị trước đó. Đọc thêm <a href=\"http://vi.reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">làm việc với function</a> và <a href=\"http://vi.reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">làm gì khi array thay đổi thường xuyên</a>.</p>\n<p>Nếu muốn chạy 1 effect và clean nó 1 lần duy nhất (lúc mount và unmount), bạn có thể truyền vào array rỗng (<code class=\"language-inline-text\">[]</code>). Đồng nghĩa với việc bạn báo với React, effect này không phụ thuộc <em>bất kỳ</em> giá trị nào của prop hoặc state, do đó không bao giờ cần re-run. Nó không phải là một trường hợp  được xử lý đặc biệt -- nó đúng với cách so sánh array hiện tại</p>\n<p>Nếu truyền vào array rỗng (<code class=\"language-inline-text\">[]</code>), prop và state bên trong effect sẽ luôn mang giá trị khởi tạo. Trong khi truyền vào <code class=\"language-inline-text\">[]</code> nó gần giống với <code class=\"language-inline-text\">componentDidMount</code> và <code class=\"language-inline-text\">componentWillUnmount</code>, nó thường là <a href=\"http://vi.reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">giải pháp</a> <a href=\"http://vi.reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tốt hơn</a> để tránh re-run effect quá thường xuyên. Tuy nhiên, đừng quên React sẽ chỉ chạy <code class=\"language-inline-text\">useEffect</code> sau khi trình duyệt paint.</p>\n<p>Chúng tôi khuyến khích sử dụng <a href=\"https://github.com/facebook/react/issues/14920\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-inline-text\">đưa tất cả dependency</code></a>, sử dụng  <a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-inline-text\">eslint-plugin-react-hooks</code></a> package để ràng buộc, và thông báo nếu khai báo dependency không hợp lệ.</p>\n</blockquote>\n<h2 id=\"bước-tiếp-theo-next-steps\"><a href=\"#b%C6%B0%E1%BB%9Bc-ti%E1%BA%BFp-theo-next-steps\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bước tiếp theo {#next-steps}</h2>\n<p>Xin chúc mừng! Trang này không hề ngắn, nhưng bạn đã đọc được đến đây. Hy vọng các thắc mắc của bạn về effect đã được phúc đáp. Bạn đã học được State Hook và Effect Hook, và có <em>rất</em> nhiều thứ bạn có thể làm khi sử dụng kết hợp chúng.  Nó gần như giải quyết các vấn đề mà chỉ có class mới làm được -- còn nếu không bạn có thể tìm thấy <a href=\"http://vi.reactjs.org/docs/hooks-reference.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">các Hook mở rộng</a>.</p>\n<p>Chúng ta đã trình bài động lực tạo ra Hook <a href=\"http://vi.reactjs.org/docs/hooks-intro.html#motivation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ở đây</a>. Chúng ta cũng thấy được cách  effect cleanup và tránh trùng lặp trong <code class=\"language-inline-text\">componentDidUpdate</code> và <code class=\"language-inline-text\">componentWillUnmount</code>, mang những đoạn code có liên quan lại gần nhau hơn, và giúp chúng ta tránh bug. Chúng ta cũng thấy được cách chúng ta tách effect theo mục đích, cái mà chúng ta không làm được với class.</p>\n<p>Đến đây, bạn có thể thắc mắc Hook làm việc như thế nào. Làm cách nào <code class=\"language-inline-text\">useState</code> lấy được đúng giá trị giữa các lần render khác nhau? Làm cách nào React \"match\" được effect trước và lần đang update? <strong>Ở trang tiếp theo bạn sẽ học được <a href=\"http://vi.reactjs.org/docs/hooks-rules.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Quy luật của Hook</a> -- mấu chốt làm việc của Hook.</strong></p>\n","cover_image":""}},{"node":{"id":"973ecbb2526940006a469b5146e788d3","title":"Cách sử dụng ref trong React","path":"/2019-06-22-su-dung-refs-trong-react/","date":"2019-06-22","timeToRead":4,"desc":"Công dụng của ref là để truy cập đến DOM thật trong React, một vài tính huống sử dụng và dùng ref","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#V%E1%BA%A5n-%C4%91%E1%BB%81-c%E1%BB%A7a-Refs\">Vấn đề của Refs</a></li>\n<li><a href=\"#L%E1%BB%B1a-ch%E1%BB%8Dn-gi%E1%BB%AFa-callback-refs-v%C3%A0-createRef\">Lựa chọn giữa callback refs và <code class=\"language-inline-text\">createRef</code></a></li>\n<li><a href=\"#Truy%E1%BB%81n-Ref-t%E1%BB%AB-cha-xu%E1%BB%91ng-con\">Truyền Ref từ cha xuống con</a></li>\n<li><a href=\"#useRef-hook\">useRef hook</a></li>\n<li><a href=\"#T%E1%BB%95ng-k%E1%BA%BFt-l%E1%BA%A1i\">Tổng kết lại</a></li>\n</ul>\n<!-- /TOC -->\n<p>Là viết tắt cho <code class=\"language-inline-text\">reference</code> nếu bạn có thắc mắc, nó là cách mà React sẽ truy cập tới DOM (DOM thực, không phải DOM ảo). Có nhiều lý do mà chúng ta muốn truy cập tới DOM, thí dụ như set focus vào input, hay tính toán kích thước của một element khi render.</p>\n<h2 id=\"vấn-đề-của-ref\"><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81-c%E1%BB%A7a-ref\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vấn đề của <code class=\"language-inline-text\">ref</code></h2>\n<p>Xử lý DOM là kỹ thuật căn bản mà mọi lập trình viên frontend điều biết, tuy nhiên khi làm theo hướng React, chúng ta sẽ ít gặp tình huống đụng đến DOM thật hơn.</p>\n<p>Thời điểm hiện tại, chúng ta có đến tận 4 cách để dùng ref !!!!</p>\n<p><img src=\"https://www.rd.com/wp-content/uploads/2012/05/sourbaby-760x506.jpg\" alt=\"Thời điểm hiện tại, chúng ta có đến tận 4 cách để dùng refs \"></p>\n<ul>\n<li>Dùng string (không được khuyến khích) (<code class=\"language-inline-text\">&lt;div ref=\"stringGiday\" /></code>)</li>\n<li>Dùng callback ref (<code class=\"language-inline-text\">&lt;div ref={ref => {this.inputRef = ref }} /></code>)</li>\n<li>Dùng API <code class=\"language-inline-text\">createRef</code></li>\n<li>Dùng hook <code class=\"language-inline-text\">useRef</code></li>\n</ul>\n<h2 id=\"lựa-chọn-giữa-callback-ref-và-createref\"><a href=\"#l%E1%BB%B1a-ch%E1%BB%8Dn-gi%E1%BB%AFa-callback-ref-v%C3%A0-createref\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lựa chọn giữa callback ref và <code class=\"language-inline-text\">createRef</code></h2>\n<p>Sử dụng string cho ref đã được team React cho vào bảo tàng, câu hỏi còn lại là dùng callback ref hay <code class=\"language-inline-text\">createRef</code> đây</p>\n<blockquote>\n<p>Câu trả lời ngắn gọn: dùng <code class=\"language-inline-text\">createRef</code> là an toàn cho mọi trường hợp.</p>\n</blockquote>\n<p>Lấy ví dụ cho tình huống phổ biến: tự động đặt set focus cho input</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleRef</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 1 - Định nghĩa ref</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 3 - gọi hàm focus trên ref</span>\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> gắn cái ref mới định nghĩa cho element <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Click để focus<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nếu sử dụng callback ref thì đây là cách làm</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleCallbackRef</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">ref</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Click để focus<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Có ý kiến thấy viết <code class=\"language-inline-text\">ref =></code> <em>nó hơi kỳ</em>, không minh bạch, cái ref này ở quỷ quái nào sinh ra?</p>\n<p>Khai báo ref bằng inline function như ở trên, nó sẽ gọi 2 lần trong quá trình update: lần đầu tiên với giá trị <code class=\"language-inline-text\">null</code>, lần thứ hai là khi có DOM element.</p>\n<p>Bởi vì mỗi lần render là một inline function khác nhau, React sẽ phải xóa giá trị ref cũ rồi setup ref mới</p>\n<p>Nghĩa là viết như sau sẽ bị bug, ref lúc đầu đang null nên không có gọi focus được</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">ref</span> <span class=\"token operator\">=></span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>Chắc tới đây anh em đã thấy không còn muốn dùng callback ref.</p>\n<p>Tuy nhiên không có nghĩa là callback ref không còn đất dụng võ, với <code class=\"language-inline-text\">createRef</code> anh em luôn phải tạo-rồi-gán. Nếu tình huống chúng ta phải tạo một danh sách element động</p>\n<p>Như ví dụ này, sẽ làm như thế này phải không</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DynamicRefs</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">tasks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Task 1\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"red\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Task 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"green\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Task 3\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yellow\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Task 4\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gray\"</span> <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>refsArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n                <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n                    <span class=\"token operator\">&lt;</span>div\n                        key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span>\n                        ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">ref</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>refArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n                    <span class=\"token operator\">></span>\n                        <span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>\n                    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"truyền-ref-từ-cha-xuống-con\"><a href=\"#truy%E1%BB%81n-ref-t%E1%BB%AB-cha-xu%E1%BB%91ng-con\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Truyền Ref từ cha xuống con</h2>\n<p>Với function component, xét đoạn code sau</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">CustomInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>input <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Rồi chúng ta có 1 component khác, dùng ref cho cái <code class=\"language-inline-text\">CustomInput</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleRef</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>CustomInput ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Đoạn code trên hổng chạy được. Chúng ta cần dùng đến <code class=\"language-inline-text\">forwardRef</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// BẮT BUỘC phải là function component</span>\n<span class=\"token keyword\">const</span> CustomInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleRefForwarding</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// lưu ý cách chúng ta gàn một ref vào custom component</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>CustomInput ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          Click to Focus\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"useref-hook\"><a href=\"#useref-hook\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useRef hook</h2>\n<p>Nếu là function component, như đã biết, nếu chúng ta dùng <code class=\"language-inline-text\">createRef</code></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">FunctionComponentWithRef</span>  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> textInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> textInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            Click to Focus\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>MỖi lần return là mỗi lần tạo ref mới, như vậy <em>không cool</em>, sử dụng hook <code class=\"language-inline-text\">useRef</code> chúng ta sẽ có một cái ref xài đời này qua đời kia dù bao nhiều lần update, cho đến khi nó ra đi (Unmount)</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">FunctionComponentWithRef</span>  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> textInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> textInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            Click to Focus\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"tổng-kết-lại\"><a href=\"#t%E1%BB%95ng-k%E1%BA%BFt-l%E1%BA%A1i\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tổng kết lại</h2>\n<ul>\n<li>Đừng xài ref nhiều quá</li>\n<li>Đừng bao giờ đụng vô string ref</li>\n<li>Dùng callback ref khi anh em đụng đến vấn đề tạo element động</li>\n<li>Nếu là class component, dùng <code class=\"language-inline-text\">createRef</code> an toàn nhất</li>\n<li>Là function component, dùng <code class=\"language-inline-text\">useRef</code> cho hợp xu thế</li>\n<li>Dùng <code class=\"language-inline-text\">forwardRef</code> khi component cha cần truy cập đến component con</li>\n</ul>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://rafaelquintanilha.com/the-complete-guide-to-react-refs\">The Complete Guide to React Refs</a></p>\n","cover_image":""}},{"node":{"id":"8d5d1a7ae2b1344c2d34145efa34e275","title":"JSON.stringify vở lòng cho người mới","path":"/2019-06-01-huong-dan-vo-long-su-dung-json-stringify/","date":"2019-06-01","timeToRead":3,"desc":"Một trong hàm kinh điển bắt buộc phải biết của mội frontend developer","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#tr%C6%B0%E1%BB%9Dng-h%E1%BB%A3p-%C4%91%E1%BA%B7c-bi%E1%BB%87t-v%C3%A0-l%E1%BB%97i\">Trường hợp đặc biệt và lỗi</a></li>\n<li><a href=\"#c%C3%A1c-tham-s%E1%BB%91-c%C3%B2n-l%E1%BA%A1i-c%E1%BB%A7a-jsonstringify\">Các tham số còn lại của <code class=\"language-inline-text\">JSON.stringify</code></a></li>\n<li><a href=\"#h%C3%A0m-tojson\">Hàm <code class=\"language-inline-text\">toJSON()</code></a></li>\n</ul>\n<!-- /TOC -->\n<p><code class=\"language-inline-text\">JSON.stringify</code> là hàm kinh điển để chuyển một object trong javascript sang JSON. Bài viết này sẽ nhìn lại những kiến thức vở lòng của <code class=\"language-inline-text\">JSON.stringify</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">answer</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// '{\"answer\":42}'</span>\n<span class=\"token comment\">// typeof str = string</span></code></pre></div>\n<p><code class=\"language-inline-text\">JSON.stringify</code> hay sử dụng chung với <code class=\"language-inline-text\">JSON.parse</code>. Đây là cách chúng ta có thể sao chép một object trong javascript (không bị dính trường hợp reference đến object cũ)</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">answer</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> clone <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// clone.answer = 42</span>\n<span class=\"token comment\">// clone !== obj</span></code></pre></div>\n<h2 id=\"trường-hợp-đặc-biệt-và-lỗi\"><a href=\"#tr%C6%B0%E1%BB%9Dng-h%E1%BB%A3p-%C4%91%E1%BA%B7c-bi%E1%BB%87t-v%C3%A0-l%E1%BB%97i\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Trường hợp đặc biệt và lỗi</h2>\n<p>Khi object <code class=\"language-inline-text\">obj</code> có 1 property mà giá trị là <code class=\"language-inline-text\">obj</code> (trỏ về chính nó), <code class=\"language-inline-text\">JSON.stringify</code> trả về một error</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nobj<span class=\"token punctuation\">.</span>answer <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// TypeError: TypeError: Converting circular structure to JSON</span></code></pre></div>\n<p>Các trường hợp đặc biệt như <code class=\"language-inline-text\">NaN</code> và <code class=\"language-inline-text\">Infinity</code>, <code class=\"language-inline-text\">JSON.stringify</code> sẽ chuyển về <code class=\"language-inline-text\">null</code>, chứ ko trả lỗi</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">nan</span><span class=\"token operator\">:</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'not a number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">inf</span><span class=\"token operator\">:</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">POSITIVE_INFINITY</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// '{\"nan\": null, \"inf\": null}'</span></code></pre></div>\n<p>Nó cũng sẽ lọc bỏ hết các property giá trị là <code class=\"language-inline-text\">undefined</code> hoặc function</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">undef</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// '{}'</span></code></pre></div>\n<h2 id=\"các-tham-số-còn-lại-của-jsonstringify\"><a href=\"#c%C3%A1c-tham-s%E1%BB%91-c%C3%B2n-l%E1%BA%A1i-c%E1%BB%A7a-jsonstringify\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các tham số còn lại của <code class=\"language-inline-text\">JSON.stringify</code></h2>\n<p><code class=\"language-inline-text\">JSON.stringify</code> nhận vào 3 tham số, đa phần chúng ta ít biết tới 2 tham số còn lại.</p>\n<p>Tham số thứ 2 là <code class=\"language-inline-text\">replacer</code>, một hàm nhận vào cặp <code class=\"language-inline-text\">key/value</code> có thể dụng để thay đổi giá trị output sau cùng.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">e</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// nếu giá trị là number, cộng thêm 1</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">replacer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// '{\"a\":2,\"b\":3,\"c\":4,\"d\":{\"e\":5}}'</span></code></pre></div>\n<p>Tham số thứ 3 là <code class=\"language-inline-text\">spaces</code>, cho phép format lại output theo dạng dễ đọc</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">e</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// '{\"a\":1,\"b\":2,\"c\":3,\"d\":{\"e\":4}}'</span>\n\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'  '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// kết quả tương tự</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   \"a\": 1,</span>\n<span class=\"token comment\">//   \"b\": 2,</span>\n<span class=\"token comment\">//   \"c\": 3,</span>\n<span class=\"token comment\">//   \"d\": {</span>\n<span class=\"token comment\">//     \"e\": 4</span>\n<span class=\"token comment\">//   }</span>\n<span class=\"token comment\">// }</span>\n\n<span class=\"token comment\">// Ko nhất thiết phải là dấu khoảng trắng</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">// __\"a\": 1,</span>\n<span class=\"token comment\">// __\"b\": 2,</span>\n<span class=\"token comment\">// __\"c\": 3,</span>\n<span class=\"token comment\">// __\"d\": {</span>\n<span class=\"token comment\">// ____\"e\": 4</span>\n<span class=\"token comment\">// __}</span>\n<span class=\"token comment\">// }</span></code></pre></div>\n<p>Ví dụ như ta có thể để lọc bỏ các dữ liệu nhạy cảm như password</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Jean-Luc Picard'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'stargazer'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">nested</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">hashedPassword</span><span class=\"token operator\">:</span> <span class=\"token string\">'c3RhcmdhemVy'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">replacer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">password</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// '{\"name\":\"Jean-Luc Picard\",\"nested\":{}}'</span></code></pre></div>\n<h2 id=\"hàm-tojson\"><a href=\"#h%C3%A0m-tojson\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hàm <code class=\"language-inline-text\">toJSON()</code></h2>\n<p>Khi đi qua các property trong object, nếu bên trong object có hàm <code class=\"language-inline-text\">toJSON()</code>, <code class=\"language-inline-text\">JSON.stringify</code> dùng giá trị trả về của hàm này</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Jean-Luc Picard'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">nested</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token string\">'not in output'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">toJSON</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'test'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// '{\"name\":\"Jean-Luc Picard\",\"nested\":\"test\"}'</span></code></pre></div>\n<p>Rất nhiều thư viện sử dụng <code class=\"language-inline-text\">JSON.stringify()</code> kết hợp với <code class=\"language-inline-text\">toJSON()</code> để đảm bảo output lúc serialize ra đúng như mong muốn (như <a href=\"https://momentjs.com/docs/#/displaying/as-json/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Moment JS</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript.html\">The 80/20 Guide to JSON.stringify in JavaScript</a></p>\n","cover_image":""}},{"node":{"id":"fa36845227ce0b25e91c3d949bf103cb","title":"Giải thích Flux Pattern theo phong cách John Wick","path":"/2019-05-28-giai-thich-pattern-flux-trong-react/","date":"2019-05-28","timeToRead":6,"desc":"Điểm lại các khái niệm trong Flux action, dispatch, store, điều kiện tiên quyết đề đọc bài này là nên xem lại John Wick","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81\">Vấn đề</a></li>\n<li><a href=\"#gi%E1%BA%A3i-ph%C3%A1p-c%E1%BB%A7a-facebook-lu%E1%BB%93ng-d%E1%BB%AF-li%E1%BB%87u-m%E1%BB%99t-chi%E1%BB%81u\">Giải pháp của Facebook: luồng dữ liệu một chiều</a></li>\n<li>\n<p><a href=\"#gi%E1%BB%9Bi-thi%E1%BB%87u-c%C3%A1c-vai-ch%C3%ADnh\">Giới thiệu các vai chính</a></p>\n<ul>\n<li><a href=\"#b%E1%BB%8Dn-action-creator\">Bọn action creator</a></li>\n<li><a href=\"#b%E1%BB%8Dn-dispatcher\">Bọn dispatcher</a></li>\n<li><a href=\"#b%E1%BB%8Dn-%C4%91%E1%BA%A7u-c%E1%BA%A7u-store\">Bọn đầu cầu Store</a></li>\n<li><a href=\"#b%E1%BB%8Dn-view\">Bọn View</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"vấn-đề\"><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vấn đề</h2>\n<p>Trước tiên chúng ta cần biết Flux giải quyết vấn đề gì. Flux là một pattern để xử lý luồng dữ liệu trong ứng dụng. Flux và React được sinh ra và lớn lên dưới ngôi nhà Facebook. 2 đứa chúng nó <strong>thường</strong> đi cùng nhau, chứ không phải <strong>dính</strong> vào nhau như hình với bóng</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*EfeNEshl8-uwZSuUw275Ag.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Một trong những ví dụ phổ biến khi nói đến Flux là vòng lặp của tính năng notification. Khi đăng nhập vào Facebook, bạn thấy một thông báo mới trên icon cái chuông huyền diệu, một khi click vào cái chuông này, toàn bộ thông báo sẽ ko còn nằm trong <strong>new message</strong> nữa. Một vài phút sau, khi nhận được thông báo mới, cái chuông lại <strong>rung lên</strong>, báo bạn biết có thông báo mới, và cứ thế, vòng lặp cứ tiếp tục.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*4xc1FzIHWiyAvb1iAQKSqQ.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Với kiểu thiết kế Model-View</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*OcTeAqv8AU_z-O2HuucmeA.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Các model sẽ <em>nắm giữ</em> dữ liệu và truyền dữ liệu này xuống các cục view -> nơi sẽ render, hiển thị dữ liệu này.</p>\n<p>User tương tác thông qua view, view đôi lúc sẽ cập nhập lại dữ liệu của model, và đôi khi model này cần thay đổi dữ liệu trên model khác. Hơn nữa, nhiều khi một thay đổi của user kéo theo một chuỗi các thay đổi khác, có khi nó là một async. Tưởng tượng như đánh trái banh bàn, bạn ko thể biết được trái banh nó sẽ đập vào đâu hết.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/400/1*7myoHOaUyFEmPC-dj61CKw.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Khi ấy bạn sẽ không biết được dữ liệu bị <strong>rơi rớt</strong> ở đâu.</p>\n<h2 id=\"giải-pháp-của-facebook-luồng-dữ-liệu-một-chiều\"><a href=\"#gi%E1%BA%A3i-ph%C3%A1p-c%E1%BB%A7a-facebook-lu%E1%BB%93ng-d%E1%BB%AF-li%E1%BB%87u-m%E1%BB%99t-chi%E1%BB%81u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giải pháp của Facebook: luồng dữ liệu một chiều</h2>\n<p>Đội ngũ Facebook giải quyết bằng một kiến trúc khác, <strong>luồng dữ liệu sẽ đi một chiều duy nhất</strong>, một khi cần thêm dữ liệu mới, luồng lại đi từ điểm xuất phát. Và họ gọi kiến trúc đó là <strong>Flux</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*lZM0yU9ExEMd7DggVxXkxA.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Nhìn vào cái hình trên, bạn sẽ không thể cảm được của kiến trúc này ngay và luôn, không đọc tài liệu về Flux, có thể bạn sẽ chẳng hứng thú vì với nó.</p>\n<p>Cùng đi chi tiết từng khái niệm một. Hình dung tổ chức <strong>hội bàn đào</strong> trong John Wick, với những nhóm nhân vật khác nhau, nắm giữ những vai trò khác nhau.</p>\n<h2 id=\"giới-thiệu-các-vai-chính\"><a href=\"#gi%E1%BB%9Bi-thi%E1%BB%87u-c%C3%A1c-vai-ch%C3%ADnh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giới thiệu các vai chính</h2>\n<h3 id=\"bọn-action-creator\"><a href=\"#b%E1%BB%8Dn-action-creator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bọn action creator</h3>\n<p><img src=\"https://i.imgur.com/e2UBmM4.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Nhiệm vụ của bọn này là tạo ra action, tất cả những thay đổi, tương tác phải tới gặp bọn này. Nó giống như bọn ngồi điều hành điện thoại trong phim John Wick, những đứa khác tới đây, phát đi 1 thông điệp, action creator sẽ \"định dạng\" lại thông điệp đó bằng một mật mã mà tất các những đứa khác nằm trong hệ thống hiểu được.</p>\n<p><img src=\"https://i.imgur.com/lsLrRSV.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Thông điệp được gửi đi bao gồm: kiểu thông điệp (type) và nội dung chính của thông điệp (payload). Trong đó kiểu thông điệp là một hằng số đã được định nghĩa trước đó.</p>\n<p><strong>Tác dụng phụ</strong> của một hệ thống mà toàn bộ kiểu thông điệp đã được định nghĩa sẵn, <strong>lính mới</strong> vào chỉ cần mở file này ra là biết được ứng dụng đang làm, sẽ có những tình huống nào sẽ làm thay đổi trạng thái dữ liệu.</p>\n<h3 id=\"bọn-dispatcher\"><a href=\"#b%E1%BB%8Dn-dispatcher\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bọn dispatcher</h3>\n<p><img src=\"https://i.imgur.com/nnQAAj6.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Trong John Wick, nói chung các bạn nên xem John Wick trước khi đọc bài này đó, bạn trực điện thoại nhận tin nhắn, format tin nhắn xong, bạn sẽ <strong>hét</strong> lên cho các bạn đứng trực chổ tổng đài điện thoại. Bạn <strong>trực điện thoại</strong> này biết danh sách các <strong>đầu cầu</strong> (store) cần gửi thông báo đến.</p>\n<p>Quá trình này được thực hiện một cách <strong>tuần tự</strong>, không chen lấn, không xen ngang, nếu mỗi đầu cầu cần ràng buộc về thứ tự nhận thông tin, chúng ta có để anh dispatcher này quản lý.</p>\n<p>Anh Dispatcher trong Flux sẽ khác với dispatcher trong các kiến trúc khác. Thông tin luôn được gửi đến hết các đầu cầu bất kể nó là thông tin gì. Nghĩa là mỗi đầu cầu không chỉ đăng ký một kênh thông tin nhất định, nó lắng nghe toàn bộ thông tin được gửi đi, chuyện nó quan tâm và xử lý trên từng thông tin nào là nó tự quyết định, giống như chú Bowery King nhận được yêu cầu truy sát John Wick, nhưng anh nhận tin rồi ko làm gì cả.</p>\n<h3 id=\"bọn-đầu-cầu-store\"><a href=\"#b%E1%BB%8Dn-%C4%91%E1%BA%A7u-c%E1%BA%A7u-store\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bọn đầu cầu Store</h3>\n<p>Gọi là đầu cầu thì cũng chưa đầy đủ, ngoài là nơi tiếp nhận và thực thông tin, nó còn là nơi chứa toàn bộ dữ liệu của ứng dụng, nguồn tiền của 1 tổ chức, mọi luật lệ, logic của dữ liệu sẽ nằm ở đây.</p>\n<p><img src=\"https://media.comicbook.com/2019/05/john-wick-bowery-king-1171365-1280x0.jpeg\" alt=\"Giải thích Flux pattern\"></p>\n<p>Anh Store này như chú <a href=\"https://www.imdb.com/title/tt6146586/characters/nm0000401?ref_=tt_cl_t4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bowery King</a>, khi muốn anh ấy làm gì đó, chuyển tiền, nhận tiền, đóng tiền thì bạn buộc phải làm đúng quy trình từ trên xuống dưới action creator -> dispatcher</p>\n<h3 id=\"bọn-view\"><a href=\"#b%E1%BB%8Dn-view\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bọn View</h3>\n<p><img src=\"https://m.media-amazon.com/images/M/MV5BNTQ2MWYyYTMtOTg3NC00MjA1LWFmMTUtOWRjMWViMWIxZTBmXkEyXkFqcGdeQXVyNTc5OTMwOTQ@._V1_SY1000_CR0,0,1499,1000_AL_.jpg\" alt=\"Giải thích Flux pattern\"></p>\n<p>Nhận dữ liệu, thay đổi thông tin hiển thị, tiếp nhận dữ liệu từ user, đưa ngược lên lại tổ chức là công dụng toàn bộ của bọn này.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*MY5xNk_JeKvGsGdywYD4EA.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Tổng hợp lại chúng ta có sơ đồ vận hành của tổ chức này như sau</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*GHrusKRFhQ0Y6rrwjqI6QQ.png\" alt=\"Giải thích Flux pattern\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*66hoDpUhczSXrgH2cUUasw.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Trong hình minh họa trên, còn một đứa nữa đứng giữa View và Store, được gọi là controller view, một dạng của <strong>người đưa tin</strong>, nó sẽ nhận thông báo từ đầu cầu store khi có dữ liệu thay đổi, rồi mới đưa xuống view</p>\n<p>Khi user gửi đi một thông báo đến View</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*SusQ7Aip2fSWg6raQtPSnA.png\" alt=\"Giải thích Flux pattern\"></p>\n<p>Thông tin được gửi lại action creator</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*dkm9qsWuD9DtXzH-u-DjJQ.png\" alt=\"Giải thích Flux pattern\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*RLrImTDeArSMoA4kZsajLQ.png\" alt=\"Giải thích Flux pattern\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*fWBaUg9-_1-V5M2YQBWhWg.png\" alt=\"Giải thích Flux pattern\"></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207\">A cartoon guide to Flux\n</a></p>\n","cover_image":""}},{"node":{"id":"1c333dc306f36fef7593804c408a1328","title":"Map và Object trong Javascript","path":"/2018-12-07-giai-thich-su-dung-map-hay-object/","date":"2018-12-07","timeToRead":5,"desc":"Kẻ tám lạng người nữa cân","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#key\">key</a></li>\n<li><a href=\"#th%E1%BB%A9-t%E1%BB%B1-c%C3%A1c-element\">Thứ tự các element</a></li>\n<li><a href=\"#kh%E1%BB%9Fi-t%E1%BA%A1o\">Khởi tạo</a></li>\n<li><a href=\"#l%E1%BA%A5y-gi%C3%A1-tr%E1%BB%8B\">Lấy giá trị</a></li>\n<li><a href=\"#th%C3%AAm-m%E1%BB%99t-element\">Thêm một element</a></li>\n<li><a href=\"#x%C3%B3a-element\">Xóa element</a></li>\n<li><a href=\"#l%E1%BA%A5y-size-hay-length\">Lấy <code class=\"language-inline-text\">size</code> (hay length)</a></li>\n<li><a href=\"#loop\">Loop</a></li>\n<li><a href=\"#khi-n%C3%A0o-d%C3%B9ng-map-khi-n%C3%A0o-d%C3%B9ng-object\">Khi nào dùng <code class=\"language-inline-text\">Map</code>, khi nào dùng <code class=\"language-inline-text\">Object</code></a></li>\n</ul>\n<!-- /TOC -->\n<p><code class=\"language-inline-text\">Map</code> có thể coi là con đẻ của <code class=\"language-inline-text\">Object</code>, nó kế thừa, cắt bỏ, bổ sung một số thứ trong Object</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span></code></pre></div>\n<p>Mỗi phần tử trong Map được lưu theo cặp <code class=\"language-inline-text\">key: value</code>, các giá trị <code class=\"language-inline-text\">key</code> này cũng là duy nhất trong Map, không có trường hợp được lặp lại, giống Object thôi, phần khác nhau sẽ được đề cặp ở dưới.</p>\n<p>Nói về cái tên Map một chút, vì mang các đặc điểm rất giống với World Map, Street Map. Chữ <code class=\"language-inline-text\">Map</code> được dùng trong các trường hợp cần tìm nhanh dữ liệu, vì các giá trị trên Map là duy nhất.</p>\n<p>Ví dụ bản đồ TP.HCM thì tất cả các con đường là khác nhau (do hết tên anh hùng nên nhiều khi đặt trùng trên một số quận, vụ này không tính nhé), bản đồ thế giới thì mỗi nước là duy nhất trên bản đồ.</p>\n<p>Giờ nói các điểm khác nhau nè</p>\n<h2 id=\"key\"><a href=\"#key\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>key</h2>\n<p>Key của <code class=\"language-inline-text\">Object</code> chỉ có thể là <code class=\"language-inline-text\">String</code> hoặc <code class=\"language-inline-text\">Integer</code></p>\n<p>Key trong <code class=\"language-inline-text\">Map</code> có thể là một <code class=\"language-inline-text\">Object</code>, <code class=\"language-inline-text\">Array</code>, <code class=\"language-inline-text\">Function</code>, nói chung không giới hạn</p>\n<h2 id=\"thứ-tự-các-element\"><a href=\"#th%E1%BB%A9-t%E1%BB%B1-c%C3%A1c-element\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thứ tự các element</h2>\n<p>Trong Map <strong>thứ tự các element là cố định</strong>, ngược lại so với Object</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">z</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'@'</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">5</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myObject<span class=\"token punctuation\">)</span> \n<span class=\"token comment\">// Object {1: 4, 5: 5, z: 1, @: 2, b: 3}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>item <span class=\"token keyword\">in</span> myObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 5</span>\n<span class=\"token comment\">// z</span>\n<span class=\"token comment\">// @</span>\n<span class=\"token comment\">// b</span></code></pre></div>\n<p>Thứ tự các phần trong object không quan trọng, khi <code class=\"language-inline-text\">for...in</code> qua các phần tử trên object, tùy theo enzine của trình duyệt, thứ tự này có thể khác nhau</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> myObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// z 1</span>\n<span class=\"token comment\">// @ 2</span>\n<span class=\"token comment\">// b 3</span></code></pre></div>\n<p>Thứ tự khi chạy <code class=\"language-inline-text\">for...of</code> trên Map luôn đúng theo thứ tự đã thêm</p>\n<h2 id=\"khởi-tạo\"><a href=\"#kh%E1%BB%9Fi-t%E1%BA%A1o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khởi tạo</h2>\n<p>Với Oject ta có một số cách để khởi tạo</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// bằng constructor</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// cùng kết quả như trên</span>\n\n<span class=\"token comment\">// dùng Object.prototype.create</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>Dùng <code class=\"language-inline-text\">Object.create</code> để tạo object mới *<em>kế thừa</em> từ một object khác.</p>\n</blockquote>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> Vehicle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"General\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">display</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Car sẽ kế thừa các property của Vehicle</span>\n<span class=\"token keyword\">var</span> Car <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>Vehicle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// overwrite lại giá trị type</span>\nCar<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\"Car\"</span><span class=\"token punctuation\">;</span> \nCar<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Car\"</span>\n\nVehicle<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// vẫn là \"General\"</span></code></pre></div>\n<p>Cũng tương tự như Array, chúng ta không dùng constructor nhiều vì nó tốn tài nguyên (và lười đánh máy dài)</p>\n<p>Với <code class=\"language-inline-text\">Map</code> chúng ta sẽ <strong>chỉ có duy nhất một cách để khởi tạo</strong> bằng constructor <code class=\"language-inline-text\">new Map</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// map = {1=>2, 2=>3}</span></code></pre></div>\n<h2 id=\"lấy-giá-trị\"><a href=\"#l%E1%BA%A5y-gi%C3%A1-tr%E1%BB%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lấy giá trị</h2>\n<p>Lấy một giá trị trong Map thông qua <code class=\"language-inline-text\">Map.prototype.get(key)</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>keyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Object thì cũng có vài đường</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">obj<span class=\"token punctuation\">.</span>keyName\nobj<span class=\"token punctuation\">[</span><span class=\"token string\">'keyName'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Kiểm tra element có tồn tại trong Map dễ hơn chút so với Object</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Map</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>keyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// object</span>\n<span class=\"token keyword\">var</span> isExist <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>keyName <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token comment\">// hoặc</span>\n<span class=\"token keyword\">var</span> isExist <span class=\"token operator\">=</span> <span class=\"token string\">'keyName'</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// kiểm tra property trường hợp ko phải kế thừa từ object cha</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>keyName<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"thêm-một-element\"><a href=\"#th%C3%AAm-m%E1%BB%99t-element\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thêm một element</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Map</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// cặp giá trị key, value</span>\n\n<span class=\"token comment\">// Object</span>\nobj<span class=\"token punctuation\">[</span><span class=\"token string\">'gender'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'female'</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<h2 id=\"xóa-element\"><a href=\"#x%C3%B3a-element\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xóa element</h2>\n<p>Object không có phương thức để xóa một element, chúng ta dùng operator <code class=\"language-inline-text\">delete</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>keyName<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chỗ này cũng sẽ có nhiều tranh luận quanh vấn đề performance, một số quan điểm cho là làm như bên dưới tốt hơn</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">obj<span class=\"token punctuation\">.</span>keyName <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nhưng đây rõ ràng là 2 cách làm khác nhau, nếu <code class=\"language-inline-text\">delete</code> là xóa hẳn, thì cách sau là gán <code class=\"language-inline-text\">key</code> đó với giá trị <code class=\"language-inline-text\">undefined</code>, đồng nghĩa với việc khi <code class=\"language-inline-text\">for..in</code> nó vẫn chạy qua element đó.</p>\n<p>Map thì có các hàm sẵn để làm chuyện xóa element</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// trả về true/false</span>\n<span class=\"token keyword\">var</span> isDeleteSuccessed <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>keyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// xóa sạch</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {}</span></code></pre></div>\n<h2 id=\"lấy-size-hay-length\"><a href=\"#l%E1%BA%A5y-size-hay-length\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lấy <code class=\"language-inline-text\">size</code> (hay length)</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Object không có trực tiếp mà phải gọi hàm keys</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Map, rất đơn giản</span>\nmap<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"loop\"><a href=\"#loop\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Loop</h2>\n<blockquote>\n<p>Một trong những khác biệt đáng chú ý nhất mà bạn nên cân nhắc dùng <code class=\"language-inline-text\">Map</code> thay vì <code class=\"language-inline-text\">Object</code></p>\n</blockquote>\n<p>Kiểm tra xem kiểu dữ liệu có là dạng <code class=\"language-inline-text\">iterable</code> (loop được)</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// > undefined</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> map<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// > function</span></code></pre></div>\n<p>Nghĩa là chúng ta có thể dùng <code class=\"language-inline-text\">for...of</code> trên <code class=\"language-inline-text\">Map</code>, <code class=\"language-inline-text\">Object</code> chỉ có thể <code class=\"language-inline-text\">for...in</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//For map: { 2=>3, 4=>5}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// Array[2,3]</span>\n<span class=\"token comment\">// Array[4,5]</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">key: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, value: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//key: 2, value: 3</span>\n<span class=\"token comment\">//key: 4, value: 5</span></code></pre></div>\n<p>Hoặc <code class=\"language-inline-text\">forEach</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">map<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">key: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, value: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// key: 2, value: 3</span>\n<span class=\"token comment\">// key: 4, value: 5</span></code></pre></div>\n<p>Trong Object thậm chí là khi ta dùng <code class=\"language-inline-text\">for..in</code> cũng không thể dùng trực tiếp <code class=\"language-inline-text\">value</code> mà phải viết <code class=\"language-inline-text\">obj[key]</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">key: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, value: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// key: id, value: 1</span>\n<span class=\"token comment\">// key: name, value: test</span></code></pre></div>\n<h2 id=\"khi-nào-dùng-map-khi-nào-dùng-object\"><a href=\"#khi-n%C3%A0o-d%C3%B9ng-map-khi-n%C3%A0o-d%C3%B9ng-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khi nào dùng <code class=\"language-inline-text\">Map</code>, khi nào dùng <code class=\"language-inline-text\">Object</code></h2>\n<p>Mặc dù nãy giờ đọc thì bạn sẽ thấy <code class=\"language-inline-text\">Map</code> quá ư thần thánh, vậy tại sao ta không dẹp luôn Object?</p>\n<ul>\n<li>Trường hợp mà các giá trị key của chúng ta nó chỉ là <code class=\"language-inline-text\">integer</code>, <code class=\"language-inline-text\">string</code>, truy xuất một element trong object bằng key là <strong>nhanh nhất</strong>, trong khi <code class=\"language-inline-text\">Map.prototype.get</code> là một function thì nó phải tốn chút tính toán</li>\n<li>Hoặc trường hợp chúng ta có các element phụ thuộc lẫn nhau như bên dưới</li>\n</ul>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"It's Me!\"</span><span class=\"token punctuation\">,</span> \n    <span class=\"token function-variable function\">print</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n         <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Object Id: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, with Name: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Với <code class=\"language-inline-text\">Map</code>? đơn giản là hổng làm được.</p>\n<p>JSON bản thân đã hỗ trợ Object, xài luôn Object chứ không cần convert qua chi.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.com/front-end-hacking/es6-map-vs-object-what-and-when-b80621932373\">ES6 — Map vs Object — What and when?</a></p>\n","cover_image":""}},{"node":{"id":"82e63d4c74841dde378d7d7c8d33f9c8","title":"Hướng dẫn cơ bản để làm việc với Javascript regular expression","path":"/2018-08-05-huong-dan-lam-viec-voi-javascript-regular-expressions/","date":"2018-08-05","timeToRead":7,"desc":"Những khái niệm quan trọng nhất kèm ví dụ dễ hiểu nhất để bạn không còn sợ mỗi khi đụng vô regular expression","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#gi%e1%bb%9bi-thi%e1%bb%87u\">Giới thiệu</a></li>\n<li><a href=\"#khai-b%c3%a1o-regex\">Khai báo regex</a></li>\n<li><a href=\"#ki%e1%bb%83m-tra-regex\">Kiểm tra regex</a></li>\n<li><a href=\"#m%e1%bb%99t-s%e1%bb%91-%c4%91i%e1%bb%81u-ki%e1%bb%87n-c%c3%b3-s%e1%ba%b5n\">Một số điều kiện có sẵn</a></li>\n<li><a href=\"#c%c3%a1c-%c4%91i%e1%bb%81u-ki%e1%bb%87n-ch%c3%bang-ta-hay-s%e1%bb%ad-d%e1%bb%a5ng\">Các điều kiện chúng ta hay sử dụng</a></li>\n<li><a href=\"#nh%c3%b3m-%c4%91i%e1%bb%81u-ki%e1%bb%87n\">Nhóm điều kiện</a></li>\n<li><a href=\"#l%e1%ba%a5y-gi%c3%a1-tr%e1%bb%8b-c%e1%bb%a7a-1-group\">Lấy giá trị của 1 Group</a></li>\n<li><a href=\"#setting\">Setting</a></li>\n<li>\n<p><a href=\"#%e1%bb%a8ng-d%e1%bb%a5ng\">Ứng dụng</a></p>\n<ul>\n<li><a href=\"#thay-th%e1%ba%bf-chu%e1%bb%97i\">Thay thế chuỗi</a></li>\n<li><a href=\"#l%e1%ba%a5y-s%e1%bb%91-t%e1%bb%ab-string\">Lấy số từ String</a></li>\n<li><a href=\"#ki%e1%bb%83m-tra-email\">Kiểm tra email</a></li>\n<li><a href=\"#l%e1%ba%a5y-%c4%91o%e1%ba%a1n-test-n%e1%ba%b1m-gi%e1%bb%afa-d%e1%ba%a5u-%22%22\">Lấy đoạn test nằm giữa dấu <code class=\"language-inline-text\">\"\"</code></a></li>\n<li><a href=\"#l%e1%ba%a5y-n%e1%bb%99i-dung-%e1%bb%9f-gi%e1%bb%afa-html-tag\">Lấy nội dung ở giữa html tag</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"giới-thiệu\"><a href=\"#gi%E1%BB%9Bi-thi%E1%BB%87u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giới thiệu</h2>\n<p>Regular Expression (hay gọi tắt là <strong>regex</strong> - đọc là ghi-ríc-cờ-sờ) là một string với format đặc biệt, với nó chúng ta có thể</p>\n<ul>\n<li>Tìm text trong <em>string</em></li>\n<li>Thay thế substring trong <em>string</em></li>\n<li>Trích xuất thông tin từ một <em>string</em></li>\n</ul>\n<p>Tất cả các ngôn ngữ đều có hỗ trợ regex. Có thể mỗi ngôn ngữ có đôi chổ khác nhau, tuy nhiên nhìn chung thì nó được áp dụng giống nhau cho hầu hết.</p>\n<p>Regex có thể nói là rất khó học, khó viết, khó nhớ, khó sửa. Tuy nhiên có những việc chỉ có thể thực hiện được với regex.</p>\n<p>Ví dụ, kiểm tra một <code class=\"language-inline-text\">string</code> có kết thúc bằng <code class=\"language-inline-text\">.com</code>, <code class=\"language-inline-text\">.football</code> hay không</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"google.com\" → true\n\"www.vietnam.football\" → true\n\"google.foobar\" → false</code></pre></div>\n<p>regex cho yêu cầu đó</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\.com|\\.football)$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span></code></pre></div>\n<h2 id=\"khai-báo-regex\"><a href=\"#khai-b%C3%A1o-regex\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khai báo regex</h2>\n<p><strong>Phân tách</strong> cái regex ở trên</p>\n<p><img src=\"https://miro.medium.com/max/1060/1*eRQ3ooQ_LPIEpYjcUMSgZw.png\"></p>\n<ul>\n<li><code class=\"language-inline-text\">\\</code> đặt trước các ký tự đặc biệt, dấu <code class=\"language-inline-text\">.</code> là một ký tự đặc biệt</li>\n<li><code class=\"language-inline-text\">|</code> là câu điều kiện <strong>or</strong></li>\n<li><code class=\"language-inline-text\">$</code> là điều kiện phải xuất hiện ở cuối string</li>\n<li>Đoạn nằm giữa <code class=\"language-inline-text\">/đoạn-nằm-giữa/</code>, là chổ chúng ta viết các điều kiện. Đoạn-nằm-giữa có tên tiếng mỹ là pattern</li>\n<li>Chữ <code class=\"language-inline-text\">i</code> ở cuối, phía sau <code class=\"language-inline-text\">/</code> là một dạng <strong>setting</strong>, <code class=\"language-inline-text\">i</code> là điều kiện chỉ hợp lệ nếu xuất hiện đúng một lần duy nhất. Có nhiều dạng setting khác nữa, phía dưới sẽ đề cập.</li>\n</ul>\n<p>Trong javascript, regex là một object, có thể định nghĩa bằng 2 cách</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// tạo 1 object mới</span>\n<span class=\"token keyword\">const</span> regex1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'football'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// dùng regular expression literal </span>\n<span class=\"token keyword\">const</span> regex2 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">football</span><span class=\"token regex-delimiter\">/</span></span></code></pre></div>\n<h2 id=\"kiểm-tra-regex\"><a href=\"#ki%E1%BB%83m-tra-regex\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kiểm tra regex</h2>\n<p>Regex ở trên chúng ta đang tìm string <code class=\"language-inline-text\">football</code>, không giới hạn gì cả, chữ <code class=\"language-inline-text\">football</code> nằm ở đâu không quan trọng.</p>\n<p>Kiểm tra regex bằng <code class=\"language-inline-text\">RegExp.test(string)</code>, sẽ trả về giá trị <code class=\"language-inline-text\">true/false</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">regex1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'football'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => true</span>\nregex1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blablabla football blablabla'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => true</span>\nregex2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'footba'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => false</span>\nregex2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blab foot ballabla'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => false</span></code></pre></div>\n<h2 id=\"một-số-điều-kiện-có-sẵn\"><a href=\"#m%E1%BB%99t-s%E1%BB%91-%C4%91i%E1%BB%81u-ki%E1%BB%87n-c%C3%B3-s%E1%BA%B5n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một số điều kiện có sẵn</h2>\n<p><em>Đã khó rồi, các bạn còn đề nghị một số kiểu viết tắt cho bắt anh em căng não ra học</em></p>\n<ul>\n<li><code class=\"language-inline-text\">\\d</code> tương tự như <code class=\"language-inline-text\">[0-9]</code>, chỉ là các giá trị số</li>\n<li><code class=\"language-inline-text\">\\D</code> tương tự như <code class=\"language-inline-text\">[^0-9]</code>, không chưa các ký tự số</li>\n<li><code class=\"language-inline-text\">\\w</code> tương tự như <code class=\"language-inline-text\">[A-Za-z0-9]</code>, bao gồm ký tự chữ và số</li>\n<li><code class=\"language-inline-text\">\\W</code> tương tự như <code class=\"language-inline-text\">[^A-Za-z0-9]</code>, không chứa ký tự chữ và số</li>\n<li><code class=\"language-inline-text\">\\s</code> chứa các ký tự khoản trống như: space, tab, newline</li>\n<li><code class=\"language-inline-text\">\\S</code> không chứa ký tự khoản trống</li>\n<li><code class=\"language-inline-text\">\\0</code> chứa ký tự null</li>\n<li><code class=\"language-inline-text\">\\n</code> chứa ký tự xuống dòng (newline)</li>\n<li><code class=\"language-inline-text\">\\t</code> chứ ký tự tab</li>\n</ul>\n<h2 id=\"các-điều-kiện-chúng-ta-hay-sử-dụng\"><a href=\"#c%C3%A1c-%C4%91i%E1%BB%81u-ki%E1%BB%87n-ch%C3%BAng-ta-hay-s%E1%BB%AD-d%E1%BB%A5ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các điều kiện chúng ta hay sử dụng</h2>\n<blockquote>\n<p>Phải xuất hiện ở đầu câu: <code class=\"language-inline-text\">^</code></p>\n</blockquote>\n<p>Nếu muốn thêm điều kiện chữ <code class=\"language-inline-text\">football</code> phải ở <strong>đầu</strong> câu</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^football</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'football'</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>football<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bla football'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//❌</span></code></pre></div>\n<blockquote>\n<p>Phải xuất hiện ở cuối câu: <code class=\"language-inline-text\">$</code></p>\n</blockquote>\n<p>Điều kiện chữ <code class=\"language-inline-text\">football</code> nằm ở <strong>cuối</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">football$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'football'</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span>football$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bla football'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span>football$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'football you'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//❌</span></code></pre></div>\n<p>Nếu kết hợp cả 2 cú pháp trên, ta có câu điều kiện chỉ được phép có đúng chữ <code class=\"language-inline-text\">football</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^football$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'football'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//✅</span></code></pre></div>\n<blockquote>\n<p>Phải bắt đầu bằng bằng 1 pattern và kết thúc bằng 1 pattern khác: <code class=\"language-inline-text\">.*</code></p>\n</blockquote>\n<p>Bắt đầu bằng chữ <code class=\"language-inline-text\">hey</code> và có kết thúc bằng chữ <code class=\"language-inline-text\">joe</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^hey.*joe$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hey joe'</span><span class=\"token punctuation\">)</span>             <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>hey<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>joe$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'heyjoe'</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>hey<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>joe$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hey how are you joe'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>hey<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>joe$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hey joe!'</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">//❌</span></code></pre></div>\n<blockquote>\n<p>Phải nằm trong khoản: <code class=\"language-inline-text\">[điểm bắt đầu - điểm kết thúc]</code></p>\n</blockquote>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[a-z]</span><span class=\"token regex-delimiter\">/</span></span> <span class=\"token comment\">// có các ký tự a,b,c....x,y,z</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token operator\">-</span><span class=\"token constant\">Z</span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span> <span class=\"token comment\">// có các ký tự A,B,C,...X,Y,Z</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span> <span class=\"token comment\">// có các ký tự a,b,c</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span> <span class=\"token comment\">// 0,1,2...8,9</span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[a-z]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>z<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//❌</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>z<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//❌</span>\n\n<span class=\"token operator\">/</span><span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//❌</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//✅</span></code></pre></div>\n<p><em>Hợp thể</em></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[A-Za-z0-9]</span><span class=\"token regex-delimiter\">/</span></span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[A-Za-z0-9]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token operator\">-</span>Za<span class=\"token operator\">-</span>z0<span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token operator\">-</span>Za<span class=\"token operator\">-</span>z0<span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//✅</span></code></pre></div>\n<blockquote>\n<p>Chỉ được phép xuất hiện 1 lần: kết hợp <code class=\"language-inline-text\">[]</code>, <code class=\"language-inline-text\">^</code>, <code class=\"language-inline-text\">$</code></p>\n</blockquote>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[A-Za-z0-9]$</span><span class=\"token regex-delimiter\">/</span></span>\n\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token operator\">-</span>Za<span class=\"token operator\">-</span>z0<span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token operator\">-</span>Za<span class=\"token operator\">-</span>z0<span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ab'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//❌</span></code></pre></div>\n<blockquote>\n<p>Đảo ngược kết quả: <code class=\"language-inline-text\">[^]</code></p>\n</blockquote>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[^A-Za-z0-9]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//❌</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">[</span><span class=\"token operator\">^</span><span class=\"token constant\">A</span><span class=\"token operator\">-</span>Za<span class=\"token operator\">-</span>z0<span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//❌</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">[</span><span class=\"token operator\">^</span><span class=\"token constant\">A</span><span class=\"token operator\">-</span>Za<span class=\"token operator\">-</span>z0<span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//❌</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">[</span><span class=\"token operator\">^</span><span class=\"token constant\">A</span><span class=\"token operator\">-</span>Za<span class=\"token operator\">-</span>z0<span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//✅</span></code></pre></div>\n<blockquote>\n<p>Điều kiện <strong>hoặc</strong>: <code class=\"language-inline-text\">|</code></p>\n</blockquote>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">hey|ho</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hey'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span>hey<span class=\"token operator\">|</span>ho<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ho'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//✅</span></code></pre></div>\n<blockquote>\n<p>Xuất hiện ít nhất một lần: <code class=\"language-inline-text\">+</code></p>\n</blockquote>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\d+$</span><span class=\"token regex-delimiter\">/</span></span> <span class=\"token comment\">// là các số từ 0-9</span>\n\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token operator\">+</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token operator\">+</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'14'</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token operator\">+</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'144343'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token operator\">+</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">//❌</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token operator\">+</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1a'</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">//❌</span></code></pre></div>\n<blockquote>\n<p>Chỉ đúng hoặc sai, không có thể cả đúng và sai: <code class=\"language-inline-text\">*</code></p>\n</blockquote>\n<p>Nói vậy hơi khó hiểu, để giải thích rõ hơn nè, ví dụ yêu cầu phải là số từ 0-9, nếu kiểm tra <code class=\"language-inline-text\">1a</code> => false vì nó có 1 là đúng, <code class=\"language-inline-text\">a</code> là sai, còn <code class=\"language-inline-text\">'' => true</code> vì nó chỉ có sai không có đúng</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\d*$</span><span class=\"token regex-delimiter\">/</span></span>\n\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token operator\">*</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12'</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token operator\">*</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'14'</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token operator\">*</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'144343'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token operator\">*</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token operator\">*</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1a'</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">//❌</span></code></pre></div>\n<blockquote>\n<p>Đúng n lần: <code class=\"language-inline-text\">{n}</code></p>\n</blockquote>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\d{3}$</span><span class=\"token regex-delimiter\">/</span></span> <span class=\"token comment\">// có 3 ký tự số</span>\n\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//❌</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1234'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//❌</span>\n\n<span class=\"token comment\">// hợp thể nào</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token operator\">-</span>Za<span class=\"token operator\">-</span>z0<span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Abc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//✅</span></code></pre></div>\n<blockquote>\n<p>Đúng từ  n đến m lần: <code class=\"language-inline-text\">{n,m}</code></p>\n</blockquote>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\d{3,5}$</span><span class=\"token regex-delimiter\">/</span></span> <span class=\"token comment\">// đúng từ 3,4,5 lần</span>\n\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1234'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12345'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//❌</span></code></pre></div>\n<p>Nếu không đưa vào giá trị <code class=\"language-inline-text\">m</code> thì thõa từ <code class=\"language-inline-text\">n</code> đến bao nhiêu cũng được</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\d{3,}$</span><span class=\"token regex-delimiter\">/</span></span>\n\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12'</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">//❌</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12345'</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123456789'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//✅</span></code></pre></div>\n<blockquote>\n<p> Điều kiện đó không bắt buộc: <code class=\"language-inline-text\">?</code></p>\n</blockquote>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// \\w bao gồm ký tự chữ và số</span>\n<span class=\"token comment\">// \\d tương tự như `[0-9]`</span>\n<span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\d{3}\\w?$</span><span class=\"token regex-delimiter\">/</span></span>\n\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\\w<span class=\"token operator\">?</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\\w<span class=\"token operator\">?</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123a'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\\w<span class=\"token operator\">?</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123ab'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//❌</span></code></pre></div>\n<h2 id=\"nhóm-điều-kiện\"><a href=\"#nh%C3%B3m-%C4%91i%E1%BB%81u-ki%E1%BB%87n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nhóm điều kiện</h2>\n<p>Để nhóm các điều kiện lại, đặt giữa <code class=\"language-inline-text\">()</code></p>\n<p>Ví dụ bên dưới, điều kiện thõa khi có <em>đúng</em> 3 ký tự số và theo sau đó là ký tự số hoặc chữ</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^(\\d{3})(\\w+)$</span><span class=\"token regex-delimiter\">/</span></span>\n\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\\w<span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\">//❌</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\\w<span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123s'</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\\w<span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123something'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\\w<span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1234'</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">//✅</span></code></pre></div>\n<p>Nếu đặt dấu <code class=\"language-inline-text\">+</code> phía sau <code class=\"language-inline-text\">()</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^(\\d{2})+$</span><span class=\"token regex-delimiter\">/</span></span>\n\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//✅</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//❌</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1234'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//✅</span></code></pre></div>\n<h2 id=\"lấy-giá-trị-của-1-group\"><a href=\"#l%E1%BA%A5y-gi%C3%A1-tr%E1%BB%8B-c%E1%BB%A7a-1-group\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lấy giá trị của 1 Group</h2>\n<p>Thay vì sử dụng <code class=\"language-inline-text\">RegExp.test(String)</code> để trả về boolean, sử dụng</p>\n<ul>\n<li><code class=\"language-inline-text\">String.match(RegExp)</code></li>\n<li><code class=\"language-inline-text\">RegExp.exec(String)</code></li>\n</ul>\n<p>Sẽ return một Array với những string thõa điều kiện</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'123s'</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^(\\d{3})(\\w+)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//Array [ \"123s\", \"123\", \"s\" ]</span>\n\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\\w<span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123s'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//Array [ \"123s\", \"123\", \"s\" ]</span>\n\n<span class=\"token string\">'hey'</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(hey|ho)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//Array [ \"hey\", \"hey\" ]</span>\n\n<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>hey<span class=\"token operator\">|</span>ho<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hey'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//Array [ \"hey\", \"hey\" ]</span>\n\n<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>hey<span class=\"token operator\">|</span>ho<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ha!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//null</span></code></pre></div>\n<p>Trường hợp group đó thõa điều kiện nhiều lần, chỉ trả về giá trị cuối cùng</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'123456789'</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\d)+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Array [\"123456789\", \"9\"]</span></code></pre></div>\n<h2 id=\"setting\"><a href=\"#setting\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Setting</h2>\n<ul>\n<li><code class=\"language-inline-text\">g</code>: kiểm tra điều kiện nhiều lần</li>\n<li><code class=\"language-inline-text\">i</code>: không phân biệt hoa thường</li>\n<li><code class=\"language-inline-text\">m</code>: cho phép kiểm tra xuống dòng</li>\n<li><code class=\"language-inline-text\">u</code>: bật hỗ trợ unicode</li>\n</ul>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">hey</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">ig</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'HEy'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//✅</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hey'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ig'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'HEy'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//✅</span></code></pre></div>\n<h2 id=\"ứng-dụng\"><a href=\"#%E1%BB%A9ng-d%E1%BB%A5ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ứng dụng</h2>\n<h3 id=\"thay-thế-chuỗi\"><a href=\"#thay-th%E1%BA%BF-chu%E1%BB%97i\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thay thế chuỗi</h3>\n<p>Hàm <code class=\"language-inline-text\">replace</code> của String Object</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dog'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//Hello dog!</span>\n<span class=\"token string\">\"My dog is a good dog!\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cat'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//My cat is a good dog!</span></code></pre></div>\n<p>Có thể truyền vào tham số đầu  là một Regex</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">world</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dog'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Hello dog</span></code></pre></div>\n<p>Thêm <code class=\"language-inline-text\">g</code> để thay thế nhiều lần</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"My dog is a good dog!\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">dog</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cat'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//My cat is a good cat!</span></code></pre></div>\n<p>Sử dụng Group để di chuyển các phần text trong string</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\w+), (\\w+)!</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$2: $1!!!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"world: Hello!!!\"</span></code></pre></div>\n<h3 id=\"lấy-số-từ-string\"><a href=\"#l%E1%BA%A5y-s%E1%BB%91-t%E1%BB%AB-string\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lấy số từ String</h3>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'Test 123123329'</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\d+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Array [ \"123123329\" ]</span></code></pre></div>\n<h3 id=\"kiểm-tra-email\"><a href=\"#ki%E1%BB%83m-tra-email\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kiểm tra email</h3>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\S+)@(\\S+)\\.(\\S+)</span><span class=\"token regex-delimiter\">/</span></span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>\\<span class=\"token constant\">S</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>@<span class=\"token punctuation\">(</span>\\<span class=\"token constant\">S</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>\\<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>\\<span class=\"token constant\">S</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'copesc@gmail.com'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//[\"copesc@gmail.com\", \"copesc\", \"gmail\", \"com\"]</span></code></pre></div>\n<h3 id=\"lấy-đoạn-test-nằm-giữa-dấu-\"><a href=\"#l%E1%BA%A5y-%C4%91o%E1%BA%A1n-test-n%E1%BA%B1m-gi%E1%BB%AFa-d%E1%BA%A5u-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lấy đoạn test nằm giữa dấu <code class=\"language-inline-text\">\"\"</code></h3>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> hello <span class=\"token operator\">=</span> <span class=\"token string\">'Hello \"nice flower\"'</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\"([^']*)\"</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//Array [ \"\\\"nice flower\\\"\", \"nice flower\" ]</span></code></pre></div>\n<h3 id=\"lấy-nội-dung-ở-giữa-html-tag\"><a href=\"#l%E1%BA%A5y-n%E1%BB%99i-dung-%E1%BB%9F-gi%E1%BB%AFa-html-tag\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lấy nội dung ở giữa html tag</h3>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&lt;span\\b[^>]*>(.*?)&lt;\\/span></span><span class=\"token regex-delimiter\">/</span></span>\n\n<span class=\"token operator\">/</span><span class=\"token operator\">&lt;</span>span\\b<span class=\"token punctuation\">[</span><span class=\"token operator\">^</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span>\\<span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// null</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">&lt;</span>span\\b<span class=\"token punctuation\">[</span><span class=\"token operator\">^</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span>\\<span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;span>test&lt;/span>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [\"&lt;span>test&lt;/span>\", \"test\"]</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">&lt;</span>span\\b<span class=\"token punctuation\">[</span><span class=\"token operator\">^</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span>\\<span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;span class=\"x\">test&lt;/span>'</span><span class=\"token punctuation\">)</span>\nz<span class=\"token comment\">// [\"&lt;span class=\"x\">test&lt;/span>\", \"test\"]</span></code></pre></div>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"A guide to JavaScript Regular Expressions\">📜 https://flaviocopes.com/javascript-regular-expressions/</a></p>\n","cover_image":""}}]}}},"context":{}}