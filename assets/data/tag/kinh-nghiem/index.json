{"hash":"de27e2fcb6fcecac29304aaf8a8d984a82eb101a","data":{"tag":{"title":"kinh-nghiem","belongsTo":{"edges":[{"node":{"id":"947609e16439d2c38254d1167ee07c91","title":"10 kinh nghiệm khi làm việc với các dự án lớn viết bằng Vue.js","path":"/10-kinh-nghiem-khi-lam-viec-voi-cac-du-an-lon-viet-bang-vue-js/","date":"2019-11-01","timeToRead":6,"desc":"Đây là 10 kinh nghiệm được đúc kết trong lúc làm việc với các bộ source lớn. Vấn đề với tất cả các bộ source lớn là nó rất khó để bảo trì.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-slot-%C4%91%E1%BB%83-component-d%E1%BB%85-hi%E1%BB%83u-h%C6%A1n-v%C3%A0-d%E1%BB%85-t%C3%B9y-bi%E1%BA%BFn-h%C6%A1n\">Sử dụng <code class=\"language-text\">slot</code> để component dễ hiểu hơn và dễ tùy biến hơn</a></li>\n<li><a href=\"#t%E1%BB%95-ch%E1%BB%A9c-vuex-store\">Tổ chức Vuex Store</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-action-%C4%91%E1%BB%83-l%E1%BA%A5y-v%C3%A0-g%E1%BB%ADi-d%E1%BB%AF-li%E1%BB%87u\">Sử dụng action để lấy và gửi dữ liệu</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-mapstate-mapgetters-mapmutations-v%C3%A0-mapactions\">Sử dụng <code class=\"language-text\">mapState</code>, <code class=\"language-text\">mapGetters</code>, <code class=\"language-text\">mapMutations</code> và <code class=\"language-text\">mapActions</code></a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-api-factories\">Sử dụng API Factories</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-config-%C4%91%E1%BB%83-truy-c%E1%BA%ADp-bi%E1%BA%BFn-m%C3%B4i-tr%C6%B0%E1%BB%9Dng\">Sử dụng <code class=\"language-text\">$config</code> để truy cập biến môi trường</a></li>\n<li><a href=\"#tu%C3%A2n-theo-m%E1%BB%99t-nguy%C3%AAn-t%E1%BA%AFc-chung-khi-vi%E1%BA%BFt-commit\">Tuân theo một nguyên tắc chung khi viết commit</a></li>\n<li><a href=\"#khi-l%C3%AAn-production-fix-lu%C3%B4n-c%C3%A1c-package-version-%C4%91ang-x%C3%A0i\">Khi lên production, fix luôn các package version đang xài</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-virtual-scroller-khi-hi%E1%BB%83n-th%E1%BB%8B-nhi%E1%BB%81u-d%E1%BB%AF-li%E1%BB%87u\">Sử dụng Virtual Scroller khi hiển thị nhiều dữ liệu</a></li>\n<li><a href=\"#ki%E1%BB%83m-tra-dung-l%C6%B0%E1%BB%A3ng-package\">Kiểm tra dung lượng package</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"sử-dụng-slot-để-component-dễ-hiểu-hơn-và-dễ-tùy-biến-hơn\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-slot-%C4%91%E1%BB%83-component-d%E1%BB%85-hi%E1%BB%83u-h%C6%A1n-v%C3%A0-d%E1%BB%85-t%C3%B9y-bi%E1%BA%BFn-h%C6%A1n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng <code class=\"language-text\">slot</code> để component dễ hiểu hơn và dễ tùy biến hơn</h2>\n<p>Bài viết hướng dẫn chi tiết khái niệm và cách dùng <code class=\"language-text\">slot</code> bạn <a href=\"/2019-10-20-huong-dan-ung-dung-tuyet-voi-cua-vue-renderless-component\">đọc lại ở đây</a>. Với việc sử dụng <code class=\"language-text\">slot</code> bạn sẽ có những component với khả năng <em>xào đi nấu lại</em> dễ hơn.</p>\n<p>Một ví dụ để thấy lợi ích của slot trong thực tế.</p>\n<p>Khi mới nhận thiết kế từ bên design, popup modal vô cùng đơn giản, chỉ gồm <code class=\"language-text\">title</code>, <code class=\"language-text\">description</code> và dâm ba cái button bên dưới. Thoạt nhìn chúng ta chỉ cần 3 cái <code class=\"language-text\">prop</code> và một sự kiện bắn ra khi click button để thay đổi tùy theo tình huống sử dụng.</p>\n<p>Nhưng sau một thời gian, bên design họ vẽ vời thêm một mớ mới, nhúng form, chèn hẳn một component khác vào trong đó, vâng vâng. <code class=\"language-text\">Prop</code> không đáp ứng nổi độ khùng của mấy bạn design. Và cách mà chúng ta refactor lại cái modal bằng <code class=\"language-text\">slot</code></p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c-base-popup<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$slot.header<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c-base-popup__header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$slot.subheader<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c-base-popup__subheader<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>subheader<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c-base-popup__body<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>{{ title }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>desc<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{ desc }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$slot.actions<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c-base-popup__actions<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>actions<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$slot.footer<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c-base-popup__footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token punctuation\">{</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    description<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">,</span>\n      required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"tổ-chức-vuex-store\"><a href=\"#t%E1%BB%95-ch%E1%BB%A9c-vuex-store\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tổ chức Vuex Store</h2>\n<p>Một lập trình viên bắt đầu mò mẫm cách xài Vuex vì họ gặp 2 vấn đề sau</p>\n<ol>\n<li>Cần truy cập vào dữ liệu từ một component khác, nó nằm xa ơi là xa so với component hiện tại.</li>\n<li>Sau khi component bị xóa khỏi DOM, bạn vẫn muốn dữ liệu đó không bị xóa</li>\n</ol>\n<p>Khi bắt đầu tạo Vuex Store, chúng ta bắt đầu học được khái niệm <code class=\"language-text\">module</code> và cách sử dụng trong ứng dụng.</p>\n<p>Không một quy chuẩn nào để tổ chức <code class=\"language-text\">module</code>, đồng nghĩa là mỗi người mỗi ý, đa phần các lập trình viên sẽ tổ chức theo dạng tính năng</p>\n<ul>\n<li>Auth</li>\n<li>Blog</li>\n<li>Inbox</li>\n<li>Setting</li>\n</ul>\n<p>Hợp lý mà, một cách tiếp cận khác cũng hợp lý luôn là tổ chức theo dữ liệu trả về từ API</p>\n<ul>\n<li>User</li>\n<li>Team</li>\n<li>Message</li>\n<li>Widget</li>\n<li>Article</li>\n</ul>\n<p>Vì là quan điểm nên không thể nói đúng sai, nhưng chúng ta phải <strong>thống nhất một cách</strong> tổ chức Vuex Store mà mọi người đều đồng ý là hợp lý. Người mới vào team cũng dễ follow hơn.</p>\n<p><a href=\"http://vuilaptrinh.com/2018-11-10-huong-dan-to-chuc-vuex-store-tren-du-an-lon/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem Kinh nghiệm tổ chức Vuex cho ứng dụng lớn</a></p>\n<p><a href=\"http://vuilaptrinh.com/2019-10-12-flat-state-trong-vue-store-de-toi-uu-toc-do/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"># Sử dụng flat state trong Vue Store</a></p>\n<h2 id=\"sử-dụng-action-để-lấy-và-gửi-dữ-liệu\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-action-%C4%91%E1%BB%83-l%E1%BA%A5y-v%C3%A0-g%E1%BB%ADi-d%E1%BB%AF-li%E1%BB%87u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng action để lấy và gửi dữ liệu</h2>\n<p>Hầu hết các network request được đưa vào Vuex action. Bạn có thắc mắc, tại sao lại thế? 🤨</p>\n<p>Đơn giản là vì hầu hết các dữ liệu lấy về sẽ được đưa vào trong store. Mặc khác, xét trên khía cạnh đóng gói và tái sử dụng thì đây là cách mang lại sự dễ chịu khi sử dụng nhất.</p>\n<h2 id=\"sử-dụng-mapstate-mapgetters-mapmutations-và-mapactions\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-mapstate-mapgetters-mapmutations-v%C3%A0-mapactions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng <code class=\"language-text\">mapState</code>, <code class=\"language-text\">mapGetters</code>, <code class=\"language-text\">mapMutations</code> và <code class=\"language-text\">mapActions</code></h2>\n<p>Không có lý do gì phải có nhiều giá trị <code class=\"language-text\">computed</code> hoặc phương thức chỉ vì bạn cần truy cập vào <code class=\"language-text\">state/getter</code> hoặc gọi <code class=\"language-text\">actions/mutations</code> bên trong component. Sử dụng các hàm được cung cấp sẵn của Vuex <code class=\"language-text\">mapState</code>, <code class=\"language-text\">mapGetters</code>, <code class=\"language-text\">mapMutations</code> và <code class=\"language-text\">mapActions</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> mapState<span class=\"token punctuation\">,</span> mapGetters<span class=\"token punctuation\">,</span> mapActions<span class=\"token punctuation\">,</span> mapMutations <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"vuex\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token punctuation\">{</span>\n  computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// truy cập properties trong my_module</span>\n    <span class=\"token spread operator\">...</span><span class=\"token method function property-access\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_module\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"property\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// truy cập getters</span>\n    <span class=\"token spread operator\">...</span><span class=\"token method function property-access\">mapGetters</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_module\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"property\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// truy cập các properties khác</span>\n    <span class=\"token spread operator\">...</span><span class=\"token method function property-access\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_module\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">property</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">nested</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">property</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// truy cập actions</span>\n    <span class=\"token spread operator\">...</span><span class=\"token method function property-access\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_module\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"myAction\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// truy cập mutations</span>\n    <span class=\"token spread operator\">...</span><span class=\"token method function property-access\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_module\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"myMutation\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><a href=\"https://vuex.vuejs.org/guide/modules.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem tài liệu của Vuex</a></p>\n<h2 id=\"sử-dụng-api-factories\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-api-factories\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng API Factories</h2>\n<p>Tạo một hàm <code class=\"language-text\">this.$api</code> để có thể gọi ở bất kỳ đâu khi cần tạo network request. Trong thư mục gốc, thêm một thư mục tên <code class=\"language-text\">api</code> chứa tất cả các phương thức liên quan</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">api\n├── auth.js\n├── notifications.js\n└── teams.js</code></pre>\n<p><a href=\"https://vuejs.org/v2/guide/plugins.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem cách đăng ký một phương thức global</a></p>\n<h2 id=\"sử-dụng-config-để-truy-cập-biến-môi-trường\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-config-%C4%91%E1%BB%83-truy-c%E1%BA%ADp-bi%E1%BA%BFn-m%C3%B4i-tr%C6%B0%E1%BB%9Dng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng <code class=\"language-text\">$config</code> để truy cập biến môi trường</h2>\n<p>Trong bộ source chúng ta sẽ luôn cần những biến chưa config trên môi trường khác nhau</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">config\n├── development.json\n└── production.json</code></pre>\n<p>Nếu có thể truy cập những biến này thông qua <code class=\"language-text\">this.$config</code> có phải tiện lợi lắm không</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">Vue</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">import</span> development <span class=\"token keyword module\">from</span> <span class=\"token string\">\"@/config/development.json\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> production <span class=\"token keyword module\">from</span> <span class=\"token string\">\"@/config/production.json\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"production\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">$config</span> <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">freeze</span><span class=\"token punctuation\">(</span>production<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">$config</span> <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">freeze</span><span class=\"token punctuation\">(</span>development<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"tuân-theo-một-nguyên-tắc-chung-khi-viết-commit\"><a href=\"#tu%C3%A2n-theo-m%E1%BB%99t-nguy%C3%AAn-t%E1%BA%AFc-chung-khi-vi%E1%BA%BFt-commit\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tuân theo một nguyên tắc chung khi viết commit</h2>\n<p>Nếu bạn nào có contribute cho các dự án trên Github, sẽ thấy lợi ích của việc có một chuẩn chung khi viết diễn giải cho commit. Có thể lấy cách viết của <a href=\"https://github.com/angular/angular/blob/master/CONTRIBUTING.md#-commit-message-guidelines\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Angular tham khảo</a></p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> commit -am <span class=\"token string\">\"&lt;type>(&lt;scope>): &lt;subject>\"</span>\n\n<span class=\"token comment\"># Một vài ví dụ</span>\n<span class=\"token function\">git</span> commit -am <span class=\"token string\">\"docs(changelog): update changelog to beta.5\"</span>\n<span class=\"token function\">git</span> commit -am <span class=\"token string\">\"fix(release): need to depend on latest rxjs and zone.js\"</span></code></pre>\n<p><a href=\"http://vuilaptrinh.com/2019-10-04-huong-dan-viet-code-vue-chuan\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem Bộ guide để viết code sạch dành riêng cho Vue</a></p>\n<h2 id=\"khi-lên-production-fix-luôn-các-package-version-đang-xài\"><a href=\"#khi-l%C3%AAn-production-fix-lu%C3%B4n-c%C3%A1c-package-version-%C4%91ang-x%C3%A0i\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khi lên production, fix luôn các package version đang xài</h2>\n<p>Không phải package nào cũng được đặt version theo quy tắc đã chuẩn hóa. Để tránh nửa đêm bị gọi dậy vì một trong các package đã cài bộ source bỗng dưng không tương thích, production không còn chạy như trên local.</p>\n<p>Tội đồ là cái prefix <code class=\"language-text\">^</code> này. Xóa hết nó khi lên production</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"my project\"</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token property\">\"private\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"axios\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.19.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"imagemin-mozjpeg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"8.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"imagemin-pngquant\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"8.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"imagemin-svgo\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"7.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"nuxt\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.8.1\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"autoprefixer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"9.6.1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"babel-eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"10.0.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"6.1.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"eslint-friendly-formatter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"4.0.1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"eslint-loader\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.2.1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"eslint-plugin-vue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5.2.3\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://semver.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem Nguyên tắc đặt version</a></p>\n<h2 id=\"sử-dụng-virtual-scroller-khi-hiển-thị-nhiều-dữ-liệu\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-virtual-scroller-khi-hi%E1%BB%83n-th%E1%BB%8B-nhi%E1%BB%81u-d%E1%BB%AF-li%E1%BB%87u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Virtual Scroller khi hiển thị nhiều dữ liệu</h2>\n<p>Khi cần hiển thị một số lượng lớn các hàng dữ liệu trên mộ trang, việc loop qua toàn bộ dữ liệu và render sẽ bị chậm. Dùng <a href=\"https://github.com/Akryum/vue-virtual-scroller\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vue-virtual-scroller</a></p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> vue-virtual-scroller</code></pre>\n<p>Nó sẽ chỉ render các dữ liệu có thể vừa vặn trong viewport, phần dữ liệu chưa hiển thị trên viewport sẽ được <em>lazy</em> render khi cuộn tới, tăng tốc độ đáng kể</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RecycleScroller</span>\n    <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>scroller<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">:items</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>list<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">:item-size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>32<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">key-field</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">v-slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{ item }<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      {{ item.name }}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RecycleScroller</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"kiểm-tra-dung-lượng-package\"><a href=\"#ki%E1%BB%83m-tra-dung-l%C6%B0%E1%BB%A3ng-package\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kiểm tra dung lượng package</h2>\n<p>Bộ source lớn thường đồng nghĩa sử dụng nhiều package <em>lụm</em> được trên mạng, nếu không để ý, việc cài đặt bừa bãi các package này dễ dẫn đến việc dung lượng tăng vọt</p>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visual Studio Code có công cụ để kiểm tra dung lượng import</a> hoặc chạy công cụ <a href=\"https://www.npmjs.com/package/webpack-bundle-analyzer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Webpack Bundle Analyzer</a></p>\n<p><strong>Bài viết sử dụng tham khảo</strong></p>\n<p><a href=\"https://www.telerik.com/blogs/10-good-practices-building-maintaining-large-vuejs-projects\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.telerik.com/blogs/10-good-practices-building-maintaining-large-vuejs-projects</a></p>\n","cover_image":""}},{"node":{"id":"b96fe15a72c8084949568607882b071a","title":"Làm quen với phương pháp Atomic để structure source code, design","path":"/lam-quen-voi-phuong-phap-atomic-de-structure-source-code-design/","date":"2019-09-13","timeToRead":2,"desc":"Atom, molecule, organism, template, và page là những khái niệm chính của phương pháp này","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#atom\">Atom</a></li>\n<li><a href=\"#molecule\">Molecule</a></li>\n<li><a href=\"#organism\">Organism</a></li>\n<li><a href=\"#template\">Template</a></li>\n<li><a href=\"#page\">Page</a></li>\n</ul>\n<!-- /TOC -->\n<p>Đây là một trong những cách tiếp cận để thiết kế một system. Tác giả của structure này là Brad Frost, ám ảnh bởi một thạc sĩ hóa học người Việt Nam (chắc dạy ở Mỹ), dạy môn hóa học khi anh này đang học cấp II.</p>\n<p>Lấy ý tưởng <strong>nguyên tử</strong> hóa học, sự <strong>kết hợp</strong> giữa các <strong>nguyên tử</strong> tạo ra một <strong>phân tử</strong>, kết hợp các phân tử lại tạo thành 1 sinh vật</p>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/chemical-equation.png\" alt=\"Structure theo phương pháp Atomic\"></p>\n<p>Những khái niệm chính của Atomic</p>\n<ul>\n<li><strong>Atom</strong> nguyên tử (nguyên tố), đơn vị nhỏ nhất</li>\n<li><strong>Molecule</strong> do 2 nguyên tử trở lên hợp lại tạo thành, những phân tử hóa học như H2O được cấu thành từ nguyên tử Hidro và Oxy</li>\n<li><strong>Organism</strong> là sự kết hợp của nhiều phân tử tạo thành</li>\n</ul>\n<p>Chúng ta đã biết bảng tuần hoàn hóa học, thứ ám ảnh thời học sinh</p>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/periodic-table.png\" alt=\"Bảng tuần hoàn hóa học\"></p>\n<p>Thì lớn lên chúng ta có bảng tuần hoàn HTML, ám ảnh thời web developer</p>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/html-periodic-table.png\" alt=\"Bảng tuần hoàn HTML\"></p>\n<p>Sự kết hợp của các element chúng ta tạo ra những trang web khác nhau (Organism)</p>\n<p>Ngoài 3 khái niệm chính trên của hóa học, tác giả đưa thêm 2 khái niệm vào của dân web chúng ta</p>\n<ul>\n<li><strong>Template</strong></li>\n<li><strong>Page</strong></li>\n</ul>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/atomic-design-process.png\" alt=\"Structure theo phương pháp Atomic\"></p>\n<h3 id=\"atom\"><a href=\"#atom\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Atom</h3>\n<p>Những element nhỏ nhất trong giao diện, đó chính là các thẻ html</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token punctuation\">/></span></span></code></pre>\n<h3 id=\"molecule\"><a href=\"#molecule\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Molecule</h3>\n<p>Trong lập trình chúng ta thường gọi nó là component, thí dụ như search component sẽ bao gồm <code class=\"language-text\">label</code>, <code class=\"language-text\">input</code>, <code class=\"language-text\">button</code></p>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/molecule-search-form.png\" alt=\"Structure theo phương pháp Atomic\"></p>\n<h3 id=\"organism\"><a href=\"#organism\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Organism</h3>\n<p>Một component có ô search, có thanh navigation, logo, đố bạn đó là gì? Header</p>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/organism-header.png\" alt=\"Structure theo phương pháp Atomic\"></p>\n<p>Tất nhiên header cũng có thể  có nhiều component khác</p>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/organisms-headers.png\" alt=\"Structure theo phương pháp Atomic\"></p>\n<p>Một component có thể gọi là Organism có thể bao gồm nhiều component lặp lại như danh sách sản phẩm, bài viết</p>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/organisms-product-grid.png\" alt=\"Structure theo phương pháp Atomic\"></p>\n<h3 id=\"template\"><a href=\"#template\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Template</h3>\n<p>Giờ tới khái niệm mà tất cả anh em làm web chúng ta điều biết</p>\n<p>Template là page nhưng ở dạng skeleton, chúng ta chưa tô vẽ gì cụ thể, nó như một cái rập, chúng ta dùng để đập ra vài trăm bộ đồ.</p>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/template-timeinc-homepage.png\" alt=\"Structure theo phương pháp Atomic\"></p>\n<h3 id=\"page\"><a href=\"#page\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Page</h3>\n<p>Page là một một UI hoàn chỉnh với nội dung, hình ảnh, logic có đầy đủ hết rồi</p>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/page-timeinc-homepage.png\" alt=\"Structure theo phương pháp Atomic\"></p>\n<p>Một illustration tổng quát</p>\n<p><img src=\"http://atomicdesign.bradfrost.com/images/content/atomic-design-abstract-concrete.png\"></p>\n","cover_image":""}},{"node":{"id":"74eccd52dfa4898b304e40431a0beb83","title":"Tại sao các bạn nên học Vue","path":"/tai-sao-cac-ban-nen-hoc-vue/","date":"2019-08-16","timeToRead":5,"desc":"Một vài suy nghĩ cá nhân của mình về mấy cái hay ho của Vue","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#single-file-component\">Single File Component</a></li>\n<li><a href=\"#s%e1%bb%ad-d%e1%bb%a5ng-vue-m%c3%a0-kh%c3%b4ng-build-kh%c3%b4ng-c%e1%ba%a7n-webpack-lu%c3%b4n\">Sử dụng Vue mà không build, không cần webpack luôn</a></li>\n<li><a href=\"#t%c3%adch-h%e1%bb%a3p-v%e1%bb%9bi-c%c3%a1c-%e1%bb%a9ng-d%e1%bb%a5ng-server-side-%c4%91%c3%a3-c%c3%b3\">Tích hợp với các ứng dụng server side đã có</a></li>\n<li><a href=\"#nh%e1%bb%afng-plugin-c%e1%ba%a7n-thi%e1%ba%bft-%c4%91%c6%b0%e1%bb%a3c-h%e1%bb%97-tr%e1%bb%a3-%c4%91%e1%ba%a7y-%c4%91%e1%bb%a7\">Những plugin cần thiết, được hỗ trợ đầy đủ</a></li>\n<li><a href=\"#k%e1%ba%bft\">Kết</a></li>\n</ul>\n<!-- /TOC -->\n<p>Khi thế giới frontend đang tôn thờ React như một <strong>chuẩn mực mới của lập trình frontend</strong>, có bao giờ bạn tự hỏi \"vì React quá lợi hại tới mức không ai đánh bại nổi, hay vì Facebook biết cách quảng cáo bộ đồ chơi của mình trong cộng đồng lập trình viên?\"</p>\n<p>Bị <em>ép buộc</em> xài Vue khoảng 8 tháng nay, từ khi anh lead phán câu \"Anh không thích React, build feature lâu quá em\", cũng có thể gọi là có chút ít kinh nghiệm xài qua Vue. Tổng kết lại những điểm mà cá nhân mình thấy thích khi sử dụng Vue, mọi người góp ý thêm nếu thấy còn thiếu</p>\n<h2 id=\"single-file-component\"><a href=\"#single-file-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Single File Component</h2>\n<p>Mỗi component sẽ là 1 file duy nhất, tách 3 phần riêng biệt template HTML, javascript, css (build sẵn luôn SCSS, scoped cho từng component mới ngon chứ)</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- phần html --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> phần javascript xử lý logic <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>scss<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scoped</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n    &lt;!-- phần css định dạng component →\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Cái cấu trúc 3 phần riêng biệt, đúng thứ tự 1-HTML, 2-SCRIPT, 3-STYLE mình thấy nó quá tuyệt vời, mở file component lên ai cũng biết mục đích của từng phần nó là để làm gì. Không rõ ai học ai, chỉ biết Web Component cũng dùng một cấu trúc tương tự như vậy.</p>\n<p>Một file React component sẽ như thế nào: <code class=\"language-text\">state</code> nằm ở trên, kéo xuống dưới có render function, kéo ngược lên để tìm các function khác, các function ở trên đôi khi lại có render một ít HTML Việc đi <strong>lòng vòng</strong> để tìm đúng vị trí muốn chỉnh là không tránh khỏi.</p>\n<p>Khi làm việc trong html template, Vue cung cấp mấy cái gọi là directive <code class=\"language-text\">v-for</code> và <code class=\"language-text\">v-if</code>, không còn loay hoay nghĩ xem render một danh sách các component dạng mảng thế nào mới tốt, đặt ở trong hàm render hay đưa vào một hàm con ở trên?. Đọc code cũng dễ chịu, thử đọc một đoạn <code class=\"language-text\">v-for</code> trong Vue với một hàm render kiểu <code class=\"language-text\">arrays.map((item) =&gt; this.renderChild(item))</code> thì biết thằng nào trực quan hơn?</p>\n<p>Ngoài ra còn có thể kế đến <code class=\"language-text\">computed</code>, <code class=\"language-text\">watch</code>, <code class=\"language-text\">scss</code>, <code class=\"language-text\">slot</code>, <code class=\"language-text\">slotScoped</code>, transition cũng được hỗ trợ sẵn trong Vue, bạn chẳng cần một thư viện nào khác với những animation đơn giản bằng CSS</p>\n<p>Nếu bạn đang dùng React, và nhét mọi thứ trong 1 file, bạn sẽ phải tìm tới một số thư viện bổ sung như <code class=\"language-text\">styled-components</code>, <code class=\"language-text\">node-sass</code></p>\n<h2 id=\"sử-dụng-vue-mà-không-build-không-cần-webpack-luôn\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-vue-m%C3%A0-kh%C3%B4ng-build-kh%C3%B4ng-c%E1%BA%A7n-webpack-lu%C3%B4n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Vue mà không build, không cần webpack luôn</h2>\n<p>Với một file html tĩnh, muốn dùng component với Vue</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    {{ message }}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/vue<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    el<span class=\"token operator\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        message<span class=\"token operator\">:</span> <span class=\"token string\">'Hello Vue!'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Bạn chỉ cần load bản build của Vue, một cái <code class=\"language-text\">id</code> trên html và một file javascript là bạn vô tư bind dữ liệu phà phà.</p>\n<p>Một ứng dụng thấy liền là nếu bạn đang muốn làm một trang single page, chỉ binding một ít dữ liệu, kiếu mấy trang landing page để làm marketing, bạn xài luôn thế này, khỏi setup rườm rà</p>\n<p>Tất nhiên bạn cũng có thể dùng React theo cách tương tự như trên, nhưng không ai dùng React những trang như vậy, thường là phải setup một mớ cái boilerplate, vì React sinh ra cũng chẳng phải để giải quyết mấy trang kiểu như thế.</p>\n<h2 id=\"tích-hợp-với-các-ứng-dụng-server-side-đã-có\"><a href=\"#t%C3%ADch-h%E1%BB%A3p-v%E1%BB%9Bi-c%C3%A1c-%E1%BB%A9ng-d%E1%BB%A5ng-server-side-%C4%91%C3%A3-c%C3%B3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tích hợp với các ứng dụng server side đã có</h2>\n<p>Trong <a href=\"https://shoptalkshow.com/episodes/350/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bài thuyết trình của Evan You</a>, tác giả có giải thích quyết định bỏ bước build như yêu cầu bắt buộc trong Vue. Nâng cấp các ứng dụng đã có sẵn là một trong những điều mà Vue muốn nhắm tới. Để nó có thể tích hợp, thay thế một phần trong các ứng dụng có sẵn bằng Vue.</p>\n<p>Hôm rồi mình có mò mẫm làm cái <a href=\"https://github.com/EvanAgee/vuejs-wordpress-theme-starter\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">theme wordpress bằng Vue</a> và REST API của Wordpress, mặc dù chưa tới đâu, nhưng khả năng là <strong>có thể</strong>, bạn có thể dùng bộ admin của wordpress, phần theme ở client dùng Vue.</p>\n<h2 id=\"những-plugin-cần-thiết-được-hỗ-trợ-đầy-đủ\"><a href=\"#nh%E1%BB%AFng-plugin-c%E1%BA%A7n-thi%E1%BA%BFt-%C4%91%C6%B0%E1%BB%A3c-h%E1%BB%97-tr%E1%BB%A3-%C4%91%E1%BA%A7y-%C4%91%E1%BB%A7\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Những plugin cần thiết, được hỗ trợ đầy đủ</h2>\n<p>Với những vấn đề gặp hoài, gặp mãi khi làm app như State Management, Routing, Form validate, Vue giới thiệu luôn những plugin làm sẵn như <a href=\"https://vuex.vuejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vuex</a>, <a href=\"https://router.vuejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue Router</a>, <a href=\"https://ssr.vuejs.org/#why-ssr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue.js Server-Side Rendering</a></p>\n<p>Sẽ có bạn la lên phản đối, rằng với React bạn được tự do lựa chọn thư viện bạn thích, nếu bạn thấy nó hợp gu với mình, mỗi thư viện có cái hay riêng bạn không nhất thiết gì phải buộc mình vào một thư viện làm routing nào cả, bạn sẽ nói React mạnh mẽ hơn Vue gấp nhiều lần - căn cứ vào đâu?. Cách tiếp cận này của Vue, giúp bạn tiết kiệm được không ít thời gian cho việc tìm kiếm, đánh giá các thư viện trên npm xem nó có phù hợp với mình không.</p>\n<p>Ví dụ cái middleware của Redux, nếu để lựa chọn giữa <code class=\"language-text\">redux-thunk</code>, <code class=\"language-text\">redux-saga</code>, <code class=\"language-text\">redux-observable</code> bạn sẽ chọn cái nào? Lý do cho lựa chọn đó là gì? Với Vuex bạn không phải lo chuyện xài cái middleware nào cho lợi nhất.</p>\n<p>Những thư viện Vue <em>chuẩn cơm mẹ nấu</em> này, không đẩy hết trách nhiệm cho cộng đồng tự quản, nó còn để luôn, ngay trên trang chủ, tụi em cần <strong>nhà tài trợ</strong>, phải có cơm thì mới có người tiếp tục maintain và phát triển tiếp, thế giờ này cần tiền để vận hành, Vue cũng vậy thôi.</p>\n<h2 id=\"kết\"><a href=\"#k%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết</h2>\n<p>React sẽ hợp với một số người, Vue sẽ hợp với một số người, Angular sẽ hợp với một số còn lại. Nếu 3 thằng này là 3 cái máy giặt, Angular là một cái máy giặt dành cho bệnh viện, xí nghiệp, React là một cái máy giặt Nhật với hàng tá nút bấm và lựa chọn, dù mục đích bạn là gì, luôn có cách điều chỉnh để React phù hợp với bạn, còn Vue như cái máy giặt gia đình với ngôn ngữ đã được Việt hóa, mua về thì cả ba, má dưới quê cũng xài được. Đó là cách mà 3 <strong>ông lớn</strong> đang thiết kế và nhắm tới.</p>\n<p>Mình còn non và xanh lắm, chổ nào nhìn nhận chưa đúng mong cao thủ chỉ thêm.</p>\n<p>Bài viết của Vuilaptrinh.com</p>\n","cover_image":""}},{"node":{"id":"a3122abaeff5dd1ef038b80398ff52d3","title":"10 nguyên lý lập trình nền tảng mà lập trình viên nào cũng cần biết","path":"/10-nguyen-ly-lap-trinh-nen-tang-ma-lap-trinh-vien-nao-cung-can-biet/","date":"2019-07-13","timeToRead":5,"desc":"Nhớ thời đại học quá nên ôn lại kiến thức vở lòng mấy bạn ơi","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#KISS\">KISS</a></li>\n<li><a href=\"#DRY\">DRY</a></li>\n<li><a href=\"#Up-up-m%E1%BB%9F-m%E1%BB%9F\">Up up mở mở</a></li>\n<li><a href=\"#H%E1%BB%A3p-th%E1%BB%83-s%E1%BA%BD-m%E1%BA%A1nh-h%C6%A1n-%C4%91%C6%B0%E1%BB%A3c-buff\">Hợp thể sẽ mạnh hơn được buff</a></li>\n<li><a href=\"#Ai-l%C3%A0m-vi%E1%BB%87c-n%E1%BA%A5y-Single-Responsibility\">Ai làm việc nấy (Single Responsibility)</a></li>\n<li><a href=\"#B%E1%BB%9Bt-quan-t%C3%A2m-con-g%C3%A1i-nh%C3%A0-h%C3%A0ng-x%C3%B3m-Separation-of-Concerns\">Bớt quan tâm con gái nhà hàng xóm (Separation of Concerns)</a></li>\n<li><a href=\"#B%E1%BA%A1n-l%C3%A0-l%E1%BA%ADp-tr%C3%ACnh-vi%C3%AAn-kh%C3%B4ng-ph%E1%BA%A3i-th%E1%BA%A7y-b%C3%B3i-YAGNI\">Bạn là lập trình viên không phải thầy bói YAGNI</a></li>\n<li><a href=\"#T%E1%BB%91i-%C6%B0u-h%C3%B3a-qu%C3%A1-s%E1%BB%9Bm\">Tối ưu hóa quá sớm</a></li>\n<li><a href=\"#Refactor\">Refactor</a></li>\n<li><a href=\"#Th%C3%A0-anh-code-s%E1%BA%A1ch-ch%E1%BB%A9-anh-kh%C3%B4ng-c%E1%BA%A7n-code-cho-cao-si%C3%AAu-Clean-Code--Clever-Code\">Thà anh code sạch, chứ anh không cần code cho cao siêu (Clean Code > Clever Code)</a></li>\n<li><a href=\"#T%E1%BB%95ng-k%E1%BA%BFt\">Tổng kết</a></li>\n</ul>\n<!-- /TOC -->\n<p>Nếu bạn là người theo chủ nghĩa viết code sao cho <em>chạy được là đủ</em>, bạn không nên đọc bài này. Còn mục tiêu là viết code và <strong>đặt cái tâm vào những gì mình viết ra</strong> thì bạn nên biết các nguyên lý nền tảng này.</p>\n<h2 id=\"kiss\"><a href=\"#kiss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>KISS</h2>\n<p>Nguyên tắc <strong>Keep it simple, stupid</strong> được áp dụng cho rất nhiều thứ trong cuộc sống, rất cần thiết cho các dự án từ vừa tới lớn.</p>\n<p>Từ lúc bắt đầu code những dòng đầu tiên, chúng ta phải khắc cốt ghi tâm câu <strong>đơn giản nhất có thể</strong>, code càng phức tạp càng khó viết và đọc lại, càng có khả năng phát sinh bug, càng khó chỉnh sửa sau này. Cụ Antoine de Saint-Exupery có phán câu này:</p>\n<blockquote>\n<p>Hoàn hảo không phải là khi không còn gì để thêm vào nữa, mà là không còn gì có thể bỏ bớt</p>\n</blockquote>\n<h2 id=\"dry\"><a href=\"#dry\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DRY</h2>\n<p>Nguyên tắc vàng mà chúng ta nghe mãi nghe mãi. <strong>Don’t repeat yourself</strong>, không bao giờ để chuyện code chổ này giống hệt chổ kia, copy-paste một đoạn code ở nhiều chổ trong source. Nếu thấy một đoạn code mà cứ viết đi viết lại ở nhiều nơi trong source, người ta sẽ đánh giá trình bạn còn non và xanh lắm</p>\n<h2 id=\"up-up-mở-mở-openclosed\"><a href=\"#up-up-m%E1%BB%9F-m%E1%BB%9F-openclosed\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Up up mở mở (Open/Closed)</h2>\n<p>Biết có thể viết thêm các tính năng bổ sung thoải mái, nhưng không được chỉnh sửa core chính. Cái này có thể lấy ví dụ bạn lấy những package trên <code class=\"language-text\">npm</code>, nó nằm trong <code class=\"language-text\">node_modules</code>, sẽ không được chỉnh sửa gì ở đó hết, nếu lỡ sau này người ta update lên, là bạn phải tự cập nhập thủ công nhé.</p>\n<h2 id=\"hợp-thể-sẽ-mạnh-hơn-được-buff-composition--inheritance\"><a href=\"#h%E1%BB%A3p-th%E1%BB%83-s%E1%BA%BD-m%E1%BA%A1nh-h%C6%A1n-%C4%91%C6%B0%E1%BB%A3c-buff-composition--inheritance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hợp thể sẽ mạnh hơn được buff (Composition > Inheritance)</h2>\n<p><img src=\"https://wegotthiscovered.com/wp-content/uploads/2018/08/Power-Rangers-Movie-Blu-ray-cover-art-1.jpg\" alt=\"10 nguyên tắc lập trình nền tảng mà lập trình viên nào cũng cần biết\"></p>\n<p>Nếu bạn có xem 5 anh em siêu nhân bạn sẽ hiểu, nếu 5 anh em siêu nhân mà hợp thể lại sẽ tạo ra một con robot với sức mạnh vượt bật, đánh bại mọi cả thể yêu quái, dù nó được buff rất nhiều đồ chơi để tăng dame.</p>\n<p>Cái này có ví dụ cho anh em nào viết OOP, mà mình thì không rành OOP lắm, nên anh em tự tìm ví dụ nhé.</p>\n<h2 id=\"ai-làm-việc-nấy-single-responsibility\"><a href=\"#ai-l%C3%A0m-vi%E1%BB%87c-n%E1%BA%A5y-single-responsibility\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ai làm việc nấy (Single Responsibility)</h2>\n<p>Mỗi function chỉ thực hiện một nhiệm vụ duy nhất, không ôm đồm nhiều thứ cùng lúc.</p>\n<p>Nếu xác định ra đường là đi ăn cơm, thì ăn cơm rồi về, không có sẵn tiền mua thêm bịch chè, ly trà sữa hay vài trứng vịt lộn.</p>\n<h2 id=\"bớt-quan-tâm-con-gái-nhà-hàng-xóm-separation-of-concerns\"><a href=\"#b%E1%BB%9Bt-quan-t%C3%A2m-con-g%C3%A1i-nh%C3%A0-h%C3%A0ng-x%C3%B3m-separation-of-concerns\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bớt quan tâm con gái nhà hàng xóm (Separation of Concerns)</h2>\n<p>Cũng tương tự với ai làm việc nấy, nguyên tắc này có phần trừu tượng, khái quát hơn một chút.</p>\n<p>Lấy ví dụ quan hệ trai-gái, để có thể quen một lúc 3 cô, bạn cần lập 3 tài khoản Zalo khác nhau, trên 3 cái điện thoại khác nhau, để khi đi chơi với cô nào thì không bị phát hiện mấy cô kia, đừng dùng 1 tài khoản trên 1 điện thoại mà chat với cả 3 cô cùng lúc.</p>\n<p>Lấy ví dụ trong <em>nghề</em> lập trình nó là mô hình thiết kế MVC, còn trong <em>nghề</em> React nó là khái niệm Container và Presentation component. Nhưng anh em cứ nhớ ví dụ 3 cô gái cho dễ.</p>\n<p><img src=\"https://static.makeuseof.com/wp-content/uploads/2017/10/programming-principle-mvc-pattern.png\" alt=\"10 nguyên tắc lập trình nền tảng mà lập trình viên nào cũng cần biết\"></p>\n<h2 id=\"bạn-là-lập-trình-viên-không-phải-thầy-bói-yagni---you-arent-gonna-need-it\"><a href=\"#b%E1%BA%A1n-l%C3%A0-l%E1%BA%ADp-tr%C3%ACnh-vi%C3%AAn-kh%C3%B4ng-ph%E1%BA%A3i-th%E1%BA%A7y-b%C3%B3i-yagni---you-arent-gonna-need-it\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bạn là lập trình viên không phải thầy bói (YAGNI - you aren’t gonna need it)</h2>\n<p>Nguyên tắc này nó nói là, bạn đừng viết ra những hàm mà bạn nghĩ, \"ờ, có lẽ trong tương lai chúng ta sớm muộn cũng xài tới nó\". Cái gì cần thì viết, có sao lại viết trước?</p>\n<p>Ví dụ, bạn viết sẵn một số lớp abstract và generic để tránh trùng lặp code, mà quá nhiều lớp abstract dẫn đến hậu quả không thể nào mà bảo trì nổi. Nói chung để đảm bảo nguyên tắc DRY, bạn cứ viết trước đi, nếu thấy bị trùng, thầy refactor lại, như ông bà có câu cứ có trâu rồi hả mua chuồng</p>\n<h2 id=\"tối-ưu-hóa-quá-sớm-avoid-premature-optimization\"><a href=\"#t%E1%BB%91i-%C6%B0u-h%C3%B3a-qu%C3%A1-s%E1%BB%9Bm-avoid-premature-optimization\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tối ưu hóa quá sớm (Avoid Premature Optimization)</h2>\n<p>Nếu bạn có xu hướng tối ưu các giải thuật được viết ra ngay từ đầu, vấn đề ở chỗ là bạn không thể biết được chương trình sẽ bị nghẽn cổ chai ở đâu cho đến khi có dữ liệu thực tế. Bạn có thể phỏng đoán, tất nhiên là được mà đôi khi hên hên lại đúng. Chỉ có một điều dễ thấy là bạn sẽ bỏ ra không ít thời gian để tăng tốc cho hàm đó, mà thiệt ra nó không chậm tới mức như bạn nghĩ, hoặc mức độ user sử dụng hàm đó sẽ không nhiều.</p>\n<p>Hoàn thành những vấn đề mấu chốt trước, sau đó dò lại để biết đang bị thắt cổ chai ở đâu</p>\n<h2 id=\"refactor-rồi-lại-refactor-rồi-lại-refactor\"><a href=\"#refactor-r%E1%BB%93i-l%E1%BA%A1i-refactor-r%E1%BB%93i-l%E1%BA%A1i-refactor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Refactor, rồi lại Refactor, rồi lại Refactor</h2>\n<p>Sự thật ai cũng biết là khi bạn mới bắt đầu viết, thời gian sau nhìn lại, khi đã có cái nhìn cụ thể và rõ ràng hơn những gì mình đang làm trong dự án, bạn sẽ code trước đây mình viết thật sự chưa \"ngon\". Công việc refactor là rất bình thường. Nếu bạn đang có việc cần thay đổi hoặc kiểm tra code cũ, nếu được thì cứ <em>dọn dẹp</em> một tí trước khi đi.</p>\n<h2 id=\"thà-anh-code-sạch-chứ-anh-không-cần-code-cho-cao-siêu-clean-code--clever-code\"><a href=\"#th%C3%A0-anh-code-s%E1%BA%A1ch-ch%E1%BB%A9-anh-kh%C3%B4ng-c%E1%BA%A7n-code-cho-cao-si%C3%AAu-clean-code--clever-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thà anh code sạch, chứ anh không cần code cho cao siêu (Clean Code > Clever Code)</h2>\n<p>Nói về clean code, là phải bỏ đi cái tôi to bự sang một bên, đừng bao giờ nghĩ code thế cho ngầu, code mà để bạn khoe với thiên hạ rằng cách code của tôi mới thông minh hơn.</p>\n<p>Ví dụ dễ thấy, một số thanh niên mình từng làm việc chung rất thích dùng câu điều kiện trên một dòng, anh ấy cứ <code class=\"language-text\">&amp;&amp;  || &amp;&amp; || &amp;&amp;</code> các kiểu trên một dòng, ai mà vô đọc thì chỉ có kiếm ảnh để nhờ giải thích là đang muốn làm cái gì.</p>\n<h2 id=\"tổng-kết\"><a href=\"#t%E1%BB%95ng-k%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tổng kết</h2>\n<p>9 người thì 10 ý, nếu đi hỏi 9 người với câu hỏi \"Thế nào được gọi là một lập trình viên tốt\", thì chắc nhận được không ít sự khác nhau về quan điểm, mà đôi khi còn trái chiều với nhau nữa.</p>\n<p>Bạn thấy ý kiến này thế nào, một lập trình viên giỏi là người biết mình đang phục vụ người dùng cuối, người có thể làm việc hiệu quả với đồng đội, người có thể hoàn thành công việc được giao đúng yêu cầu, đúng tiến độ.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.makeuseof.com/tag/basic-programming-principles/\">10 Basic Programming Principles Every Programmer Must Follow</a></p>\n","cover_image":""}}]}}},"context":{}}