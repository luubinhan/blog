{"hash":"17f2ebf8e3fad07decd82f546fca8c1f827fe682","data":{"tag":{"title":"hard","belongsTo":{"edges":[{"node":{"id":"85b3a0eb256fe8201e3801c756cc5217","title":"Một vài điều cần lưu ý khi bạn làm việc với JS","path":"/2021-03-28-mot-vai-luu-y-voi-javascript/","date":"2021-03-28","timeToRead":2,"desc":"Khi bạn làm việc với JS đủ lâu và ăn hành đủ nhiều bạn sẽ cần biết đến những đặc điểm rất riêng của JS","content":"<h2 id=\"arraysort-cho-kết-quả-khác-nhau-trên-các-trình-duyệt-khác-nhau\"><a href=\"#arraysort-cho-k%E1%BA%BFt-qu%E1%BA%A3-kh%C3%A1c-nhau-tr%C3%AAn-c%C3%A1c-tr%C3%ACnh-duy%E1%BB%87t-kh%C3%A1c-nhau\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">Array.sort()</code> cho kết quả khác nhau trên các trình duyệt khác nhau</h2>\n<p>Khi bạn cần <em>sort</em> các phần tử trong một mảng, khả năng rất cao là bạn sẽ sử dụng <em>callback</em> như: <code class=\"language-text\">sort((x, y) =&gt; x &lt; y)</code>.</p>\n<p>Đây là kết quả của Chrome và Firefox</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--s1SlEvCn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63i4pdemdrcltmlcfmy7.png\"></p>\n<p>Hàm <em>callback</em> chúng ta truyền vào phải <em>return</em> một trong ba giá trị 1, 0, -1, vì chúng ta đang return một giá trị <em>boolean</em>, nên sẽ <strong>tùy vào trình duyệt</strong> quyết định</p>\n<h2 id=\"sử-dụng-jsonstringify-với-tham-số\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-jsonstringify-v%E1%BB%9Bi-tham-s%E1%BB%91\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng <code class=\"language-text\">JSON.stringify</code> với tham số</h2>\n<p>Là một web developer, ít nhất một lần trong đời bạn sẽ sử dụng đến hàm <code class=\"language-text\">JSON.stringify</code>. Nhưng bạn có biết hàm này còn một tham số thứ 2 có thể truyền vào? Nó sẽ được sử dụng như một danh sách <strong>whitelist</strong> khi <em>parse</em> (chỉ có những giá trị <code class=\"language-text\">key</code> nằm trong whitelist mới được <em>parse</em>)</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1m2M-1nL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mot0de4qunp1jz9drti.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1m2M-1nL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mot0de4qunp1jz9drti.png\" alt=\"json_stringify_1\"></a></p>\n<p>Không chỉ giới hạn là một mảng, có thể truyền một function để <em>validate</em>, <em>replace</em>, <em>parse</em> cặp <code class=\"language-text\">key</code>, <code class=\"language-text\">value</code> nhận được</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--LKLRzNjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87gpt399syw126i3lnw5.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--LKLRzNjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87gpt399syw126i3lnw5.png\" alt=\"json_stringify_2\"></a></p>\n<h2 id=\"arrayfilter-không-làm-việc-với-promise\"><a href=\"#arrayfilter-kh%C3%B4ng-l%C3%A0m-vi%E1%BB%87c-v%E1%BB%9Bi-promise\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">Array.filter()</code> không làm việc với Promise</h2>\n<p>Một công việc cũng hay sử lý trên mảng: thực hiện một số xử lý <strong>async</strong> trên các phần tử trong mảng, lặp qua các phần tử để xử lý dữ liệu rồi <em>filter</em> những phần tử không mong muốn.</p>\n<p>Ví dụ, để kiểm tra user có quyền thực hiện một số tính năng nào đó không, chúng ta cần kiểm tra tất cả các giá trị trong mảng <code class=\"language-text\">permissions</code></p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--zxtRNXjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8ph059u9575f29hmqjz.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--zxtRNXjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8ph059u9575f29hmqjz.png\" alt=\"filter_1\"></a></p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--RY4XUoXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5d2v4ingkoxlvrjrynwv.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--RY4XUoXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5d2v4ingkoxlvrjrynwv.png\" alt=\"filter_3\"></a></p>\n<p>Code trên hoàn toàn hợp lý và đúng 100%</p>\n<p>Tính huống tiếp theo, nếu bên trong hàm <code class=\"language-text\">userCan</code> chúng ta có một xử lý <code class=\"language-text\">async</code>?</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--4PNbNENY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/as0sblsgjwbz52jqah2j.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--4PNbNENY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/as0sblsgjwbz52jqah2j.png\" alt=\"filter_4\"></a></p>\n<p>Không chạy đúng đâu. Để sửa lại cho nó chạy đúng, chúng ta phải dùng <code class=\"language-text\">map</code> trước khi dùng đến <code class=\"language-text\">filter</code></p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dK138iQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p5nocab1xkyjss5jl09.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dK138iQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p5nocab1xkyjss5jl09.png\" alt=\"filter_5\"></a></p>\n<h2 id=\"nullish-vs-or\"><a href=\"#nullish-vs-or\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nullish vs OR</h2>\n<p>Ai cũng biết viết <code class=\"language-text\">OR</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> buzz <span class=\"token operator\">||</span> <span class=\"token string\">'fallback'</span></code></pre>\n<p>Trong trường hợp bạn muốn <code class=\"language-text\">foo</code> bằng 0 khi <code class=\"language-text\">buzz</code> bằng 0, nói cách khác <code class=\"language-text\">0</code> vẫn được xem là một giá trị hợp lệ thì cách viết trên toang.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--QoLPcQ4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai8rwv56h5ymun1vpi6h.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--QoLPcQ4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai8rwv56h5ymun1vpi6h.png\" alt=\"nullish\"></a></p>\n<p>Nullish tương đối mới và được hỗ trợ từ TypeScript 3.7, các phiên bản trình duyệt mới, cũng nên lưu ý điểm này nhé.</p>\n<h2 id=\"promise-constructor-anti-pattern\"><a href=\"#promise-constructor-anti-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Promise constructor anti-pattern</h2>\n<p>Tạo một Promise không vì một lý do gì cả.</p>\n<p>Nếu bạn có một xử lý <code class=\"language-text\">async</code> thì bản chất nó đã <strong>return một promise</strong>, việc bạn <code class=\"language-text\">new Promise</code> chẳng có ý nghĩa gì cả</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--C-1fI-Bz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98tp5ldyr4065np0skt5.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--C-1fI-Bz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98tp5ldyr4065np0skt5.png\" alt=\"promise_1\"></a></p>\n<p>Chỉ đơn giản return <code class=\"language-text\">fetchThing()</code> là được (<code class=\"language-text\">fetchThing</code> là một async function)</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--pHlwjR8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpyxc4hrmvepkthp1wyb.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--pHlwjR8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpyxc4hrmvepkthp1wyb.png\" alt=\"promise_3\"></a></p>\n<h2 id=\"catch-await-error\"><a href=\"#catch-await-error\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Catch await error</h2>\n<p>Nếu sử dụng Promise bạn sẽ dùng <code class=\"language-text\">then</code> và <code class=\"language-text\">catch</code>, còn dùng <code class=\"language-text\">async/await</code> bạn sẽ dùng <code class=\"language-text\">try/catch</code> như thế này</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--xRTdGBFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w77xvropho5fnzjr3lzq.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--xRTdGBFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w77xvropho5fnzjr3lzq.png\" alt=\"catch_1\"></a></p>\n<p>Một cách <em>thần kỳ</em> chúng ta vẫn có thể dùng <code class=\"language-text\">.catch</code> ngay trên await</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9_RtvCXJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4sca69yg3cn1t2w3q1e.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9_RtvCXJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4sca69yg3cn1t2w3q1e.png\" alt=\"catch_2\"></a></p>\n<p>Nếu ngồi chiêm nghiệm thật kỹ bạn sẽ hiểu vì sao chúng ta vẫn viết được như vậy, gợi ý await là một cách viết cũng dựa trên Promise mà ra</p>\n<h2 id=\"optional-chain-trên-function\"><a href=\"#optional-chain-tr%C3%AAn-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Optional chain trên function</h2>\n<p>Optional chain trong <code class=\"language-text\">object</code> không xa lạ, nhưng optional chain trên function thì bạn có dùng chưa?</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--GS_uEqqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57rtruthopibgpvl5pcz.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--GS_uEqqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57rtruthopibgpvl5pcz.png\" alt=\"optional_1\"></a></p>\n<p>Một tình huống bạn sẽ sử dụng rất nhiều trong React là callback prop. Sẽ không còn cần phải viết <code class=\"language-text\">onClick={onClick &amp;&amp; () =&gt; onClick(param)}</code></p>\n<p><a href=\"https://dev.to/joakimunge/10-things-2020-has-taught-me-nfj\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">10 Things 2020 has taught me</a></p>\n","cover_image":""}},{"node":{"id":"cf47898b4f8e17bbc7856e26a77f070a","title":"Một vài pattern để viết component của React cần dùng chung state","path":"/2021-03-14-mot-vai-pattern-de-viet-react-component/","date":"2021-03-14","timeToRead":6,"desc":"Câu chuyện chia sẽ state và phương thức giữa các component chưa bao giờ là cũ trong React","content":"<h2 id=\"compound-component\"><a href=\"#compound-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>compound component</h2>\n<p>Khi gặp tình huống một component không thể đứng độc lập, mà nó buộc phải kết hợp với một component khác và cùng chia sẻ một bộ state và phương thức. Đó là lúc chúng ta cân nhắc cách viết compound component.</p>\n<p>Một ví dụ rất dễ thấy của compound component là element <code class=\"language-text\">&lt;select /&gt;</code> và <code class=\"language-text\">&lt;option /&gt;</code>, <code class=\"language-text\">&lt;option/&gt;</code> không thể đứng độc lập, nó luôn được đặt trong <code class=\"language-text\">&lt;select/&gt;</code> có thể truy xuất và gọi các phương thức tương tự như <code class=\"language-text\">&lt;select/&gt;</code></p>\n<p><strong>Tại sao lại sử dụng compound component?</strong></p>\n<p>Nếu bạn là người viết component, người khác sử dụng component này, các dev khác sẽ cảm ơn bạn rất nhiều. Bạn đóng gói mọi thứ logic vào bên trong component cha như vậy, người sau sẽ không cần bận tâm nữa.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// parent component</span>\n<span class=\"token comment\">// xử lý event onChange, quản lý state selected value</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm.RadioInput</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm.RadioInput</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm.RadioInput</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">RadioImageForm</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Với child component của <code class=\"language-text\">&lt;RadioImageForm /&gt;</code>, để cho nó rõ ràng minh bạch là chúng ta sẽ sử dụng những giá trị cung cấp từ parent, chúng ta dùng kiểu viết <code class=\"language-text\">&lt;RadioImageForm.RadioInput /&gt;</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RadioImageForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Props</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">State</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token maybe-class-name\">RadioInput</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\tcurrentValue<span class=\"token punctuation\">,</span>\n\t    onChange<span class=\"token punctuation\">,</span>\n\t    label<span class=\"token punctuation\">,</span>\n\t    value<span class=\"token punctuation\">,</span>\n\t    name<span class=\"token punctuation\">,</span>\n\t    imgSrc<span class=\"token punctuation\">,</span>\n\t    key<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">RadioInputProps</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token parameter\"><span class=\"token maybe-class-name\">ReactElement</span></span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token comment\">// ...</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tonChange <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\"><span class=\"token keyword\">void</span></span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t  <span class=\"token comment\">// ...</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    currentValue<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    onChange<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onChange</span><span class=\"token punctuation\">,</span>\n    defaultValue<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">defaultValue</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ReactElement</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageFormWrapper</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* .... */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">RadioImageFormWrapper</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Một nhu cầu rất phổ biến là người khác sẽ muốn control component con <code class=\"language-text\">&lt;RadioInput /&gt;</code> bằng việc truyền thêm <code class=\"language-text\">prop</code>, nhưng thay vì truyền thằng vào component con, chúng ta hãy để họ truyền thông qua component cha <code class=\"language-text\">&lt;RadioImageForm/&gt;</code>, vì một lý do nào đó chúng ta cần truy cập các prop này bên trong component cha thì sao? Chúng ta làm thêm một bước <code class=\"language-text\">pass-through</code> các prop xuống cho component con với <code class=\"language-text\">React.Children.map</code> hoặc <code class=\"language-text\">React.cloneElement</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ReactElement</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> currentValue<span class=\"token punctuation\">,</span> onChange<span class=\"token punctuation\">,</span> defaultValue <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageFormWrapper</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>\n          <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Children</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span><span class=\"token punctuation\">,</span> \n            <span class=\"token punctuation\">(</span><span class=\"token parameter\">child<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ReactElement</span></span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n              <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cloneElement</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n                currentValue<span class=\"token punctuation\">,</span>\n                onChange<span class=\"token punctuation\">,</span>\n                defaultValue<span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">RadioImageFormWrapper</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Quay lại với <code class=\"language-text\">&lt;RadioInput /&gt;</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">static</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">RadioInput</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  currentValue<span class=\"token punctuation\">,</span>\n  onChange<span class=\"token punctuation\">,</span>\n  label<span class=\"token punctuation\">,</span>\n  value<span class=\"token punctuation\">,</span>\n  name<span class=\"token punctuation\">,</span>\n  imgSrc<span class=\"token punctuation\">,</span>\n  key<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">RadioInputProps</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio-button-group<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n      <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">aria-label</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onChange<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">checked</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>currentValue <span class=\"token operator\">===</span> value<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">aria-checked</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>currentValue <span class=\"token operator\">===</span> value<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>imgSrc<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>overlay<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* .... */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Toàn bộ source code: <a href=\"https://codesandbox.io/s/compound-components-radio-image-form-k1h8x\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codesandbox.io/s/compound-components-radio-image-form-k1h8x</a></p>\n<h3 id=\"hạn-chế\"><a href=\"#h%E1%BA%A1n-ch%E1%BA%BF\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hạn chế</h3>\n<p>Với cách viết compound component này, chúng ta bị một hạn chế là bắt buộc phai viết component theo kiểu</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm.RadioInput</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm.RadioInput</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm.RadioInput</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">RadioImageForm</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Chúng ta không được phép chèn thêm một số thẻ <code class=\"language-text\">&lt;div /&gt;</code> ở giữa nếu có nhu cầu tùy biến giao diện chẳng hạn</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm.RadioInput</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm.RadioInput</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageForm.RadioInput</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">RadioImageForm</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p><a href=\"https://codesandbox.io/s/compound-components-radio-image-form-k1h8x\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Compound component</a>\n<a href=\"https://codesandbox.io/s/functional-compound-components-w-hooks-radio-image-form-2zbhs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Compound component với React Hook</a></p>\n<h2 id=\"flexible-compound-component\"><a href=\"#flexible-compound-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Flexible compound component</h2>\n<p>Flexible compound component ra đời để giải quyết hạn chế của compound component, chúng ta sẽ sử dụng React Context API.</p>\n<p>Chúng ta sẽ tạo ra một <code class=\"language-text\">context</code> mà ở đó cả component con và cha điều có thể truy xuất được, đúng như mục đích ra đời của Context API</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">RadioImageFormContext</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  currentValue<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  defaultValue<span class=\"token operator\">:</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">onChange</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token maybe-class-name\">RadioImageFormContext</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">displayName</span> <span class=\"token operator\">=</span> <span class=\"token string\">'RadioImageForm'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chúng ta sẽ refactor lại <code class=\"language-text\">&lt;RadioImageForm/&gt;</code>, bỏ đi đoạn <code class=\"language-text\">React.Children.map</code>, thay bằng <code class=\"language-text\">&lt;Provider /&gt;</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ReactElement</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageFormWrapper</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RadioImageFormContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">RadioImageFormContext.Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">RadioImageFormWrapper</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<blockquote>\n<p>Sử dụng Provider có một lưu ý sống còn là đừng bao giờ truyền <code class=\"language-text\">value={{ some bla bla}}</code>, như vậy nó sẽ khác nhau trên tất cả những lần render, hãy nhớ truyền một thứ gì đó cache được và chỉ bị thay đổi khi cần thiết như this.state</p>\n</blockquote>\n<p>Trong component con <code class=\"language-text\">&lt;RadioInput /&gt;</code> chúng ta có thể truy xuất tất cả dữ liệu nội bộ thông qua <em>consumer</em>, bởi vì <code class=\"language-text\">&lt;RadioInput /&gt;</code> đang nằm trong <code class=\"language-text\">&lt;RadioImageForm /&gt;</code> luôn theo cách viết của chúng ta, nên có thể khai báo một static property <code class=\"language-text\">Consumer</code> bên trong <code class=\"language-text\">RadioImageForm</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RadioImageForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Props</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">State</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token maybe-class-name\">Consumer</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">RadioImageFormContext</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Consumer</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//...</span></code></pre>\n<p><a href=\"https://codesandbox.io/s/flexible-compound-components-radio-image-form-393y7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code ví dụ</a>\n<a href=\"https://codesandbox.io/s/functional-flexible-compound-components-w-hooks-radio-image-form-2u3sf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code Flexible compound component bằng functional component</a></p>\n<h2 id=\"provider-pattern\"><a href=\"#provider-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Provider Pattern</h2>\n<p>Provider pattern là kỹ thuật kết hợp giữa React Context API và render props pattern, vẫn là để giải quyết câu chuyện chia sẻ state giữa các component trong cây.</p>\n<p>Nếu bạn có thắc mắc, ủa vậy sao không dùng Redux, Mobx, Recoil, React Sweet State, Rematch, Unstated,... cho khỏe người ơi? Thì câu trả lời của mình là, ừ các bạn nên xài những thư viện quản lý state như vậy cho khỏe người, khỏe cho cả người maintain code bạn. Còn đây là cách làm nếu bạn muốn tham khảo, nếu không dùng gì hết, tôi dư giả thời gian để code từ đầu thì bạn có thể go-ahead với cách này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/components/DogDataProvider.tsx</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">IDog</span><span class=\"token punctuation\">;</span>\n  status<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Status</span><span class=\"token punctuation\">;</span>\n  error<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Error</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> initState<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">State</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Status</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">loading</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> error<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">DogDataProviderContext</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token maybe-class-name\">DogDataProviderContext</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">displayName</span> <span class=\"token operator\">=</span> <span class=\"token string\">'DogDataProvider'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">DogDataProvider</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token parameter\"><span class=\"token maybe-class-name\">ReactElement</span></span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">useState</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">State</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(initState);\n\n  React.useEffect(() => </span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>initState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>void</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> => </span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// MOCK API CALL</span>\n        <span class=\"token keyword\">const</span> asyncMockApiFn <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IDog</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> =>\n          await new Promise(resolve => setTimeout(() => resolve(DATA), 1000));\n        const data = await asyncMockApiFn();\n\n        setState(</span><span class=\"token punctuation\">{</span>\n          data<span class=\"token punctuation\">,</span>\n          status<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Status</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">loaded</span><span class=\"token punctuation\">,</span>\n          error<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span>\n        <span class=\"token punctuation\">}</span><span class=\"token plain-text\">);\n      } catch (error) </span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          error<span class=\"token punctuation\">,</span>\n          status<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Status</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">error</span><span class=\"token punctuation\">,</span>\n          data<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    })();\n  }, []);\n\n  return (\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DogDataProviderContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">DogDataProviderContext.Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  );\n};</span></code></pre>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/components/DogDataProvider.tsx</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useDogProviderState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useContext</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">DogDataProviderContext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'useDogProviderState phải được sử dụng bên trong DogDataProvider.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword control-flow\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/index.tsx</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* DataProvider phải nằm trên cùng của cây.*/</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DogDataProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Nav</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>py-5 md:py-20 max-w-screen-xl mx-auto text-center text-white w-full<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Banner</span></span>\n              <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'React Component Patterns:'</span><span class=\"token punctuation\">}</span></span>\n              <span class=\"token attr-name\">subtitle</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'Provider Pattern'</span><span class=\"token punctuation\">}</span></span>\n            <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">exact</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Component con sử dụng dữ liệu qua Consumer */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profile</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/friends<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Component con sử dụng dữ liệu qua Consumer */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DogFriends</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">DogDataProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Profile</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// custom hook nhận \"subscribes\" khi có state thay đổi</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useDogProviderState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>//...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Profile</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mt-10<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">       \n        </span><span class=\"token punctuation\">{</span>error <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Error</span></span> <span class=\"token attr-name\">errorMessage</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> status <span class=\"token operator\">===</span> <span class=\"token maybe-class-name\">Status</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">loading</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Loader</span></span> <span class=\"token attr-name\">isInherit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ProfileCard</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><a href=\"https://codesandbox.io/s/provider-pattern-with-react-custom-hooks-llirx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source Code Provider Pattern</a></p>\n<p><a href=\"https://dev.to/alexi_be3/react-component-patterns-49ho\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Component Patterns</a></p>\n","cover_image":""}},{"node":{"id":"af1b4fabe8e0499431dafa72082c9288","title":"Hỏi nhanh đáp gọn về REST","path":"/2021-01-15-rest-faq-hoi-nhanh-dap-gon-ve-rest/","date":"2021-01-15","timeToRead":2,"desc":"Chuyên mục hỏi nhanh - đáp gọn, nếu bạn chưa biết gì về REST","content":"<p><em>Một vài đặc tính chính của REST?</em></p>\n<ul>\n<li>REST là dạng stateless, server sẽ không có thông tin <em>status</em> (nói cách khác là không lưu giữ session)</li>\n<li>Web service chủ yếu dùng POST để thao tác, REST dùng <code class=\"language-text\">GET</code> để truy xuất đến resource</li>\n</ul>\n<p><em>Các thành phần chính của một http response</em></p>\n<ul>\n<li>Status / Response Code</li>\n<li>HTTP Version</li>\n<li>Response header</li>\n<li>Response body</li>\n</ul>\n<p><em>Các thành phần chính của một http request</em></p>\n<ul>\n<li>Method (<code class=\"language-text\">GET</code>, <code class=\"language-text\">POST</code>, <code class=\"language-text\">PUT</code>, <code class=\"language-text\">DELETE</code>)</li>\n<li>URI</li>\n<li>HTTP Version</li>\n<li>Request Header</li>\n<li>Request Body</li>\n</ul>\n<p><em>Stateless là gì?</em></p>\n<p>Theo định nghĩa của RESTful, server không lưu trữ bất kỳ thông tin gì về client state, nguyên tắc này gọi là <strong>Stateless</strong>. Phía client gửi thông tin cần thiết trên mỗi request</p>\n<p><em>Stateless có gì hay?</em></p>\n<p>Scale khả năng đáp ứng của API lên cho hàng triệu concurrent user bằng cách deploy lên nhiều server  khác nhau. Bất kỳ server nào cũng có thể handle một request từ client vì tất cả thông tin cần thiết điều được gửi từ phía client.</p>\n<p>Đơn giản hóa API nhờ vào việc gở bỏ việc đồng bộ logic của <em>state</em></p>\n<p>Dễ cache hơn. Phía server có thể quyết định cache hay không một kết quả HTTP request dựa vào thông tin của một request, những request trước đó không ảnh hưởng đến khả năng <em>cache</em> của request hiện tại.</p>\n<p><em>Vài cái status code phổ biến?</em></p>\n<ul>\n<li>201 created</li>\n<li>204 No content</li>\n<li>400 Bad request</li>\n<li>403 Forbidden</li>\n<li>404 Not found</li>\n<li>405 Method not allowed</li>\n<li>409 Conflict</li>\n<li>500 internal server error</li>\n</ul>\n<p><em>Cái gì cache được, cái gì không?</em></p>\n<ul>\n<li><code class=\"language-text\">GET</code> cache được</li>\n<li><code class=\"language-text\">POST</code> mặc định là không, nhưng có thể dùng <strong>expires header</strong> hoặc <strong>cache-control header</strong> nếu muốn bật cache</li>\n<li><code class=\"language-text\">PUT/DELETE</code> không</li>\n</ul>\n<p><em>Khác nhau giữa AJAX và REST?</em></p>\n<p>AJAX là một <strong>kỹ thuật thực hiện phía client</strong> để cập nhập giao diện, trong khi REST là <strong>một kiểu kiến trúc</strong> để truyền và xử lý HTTP Request.</p>\n<p><em>Keep-Alive là gì và lợi ích của nó?</em></p>\n<p>Mặc định một HTTP connection sẽ tự đống sau khi request đã complete, nghĩa là phía server sẽ close TCP connection sau khi đã gửi đi response. Để giữ connection này cho nhiều request, dùng thuộc tính <code class=\"language-text\">keep-alive</code> trên header</p>\n<p>Ví dụ</p>\n<pre class=\"language-text\"><code class=\"language-text\">Message Trace:\n-------------------------------------------\n~$ curl -I https://www.domain.com/file.html\nHTTP/1.1 200 OK\nConnection: Keep-Alive\nContent-Type: text/html; charset=UTF-8\nDate: Thu, 15 Jan 2015 16:45:29 GMT\nContent-Length: 1845\nKeep-Alive: timeout=10, max=20\nServer: Apache/2.4.9 (Unix) PHP/5.6.2\n-------------------------------------------</code></pre>\n<p>Lợi ích</p>\n<ul>\n<li><strong>Giảm tải việc sử dụng CPU</strong>, mỗi lần thiết lập một TCP connection sẽ cần tiêu hao CPU và bộ nhớ.</li>\n<li><strong>Cải thiện tốc độ trang web</strong>: đáp ứng nhiều file sử dụng cùng một connection cho phép giảm tải và nâng cao tốc độ của ứng dụng</li>\n<li><strong>HTTPS</strong>: muốn dùng keep-alive bắt buộc phải là HTTPS, cũng có thể xem là một ưu điểm cho vấn đề bảo mật</li>\n</ul>\n","cover_image":""}},{"node":{"id":"dc34c8a0c083ef6c15db1a0747852887","title":"Hỏi nhanh đáp gọn về webpack","path":"/2021-01-13-webpack-faq-hoi-nhanh-dap-gon-voi-webpack/","date":"2021-01-13","timeToRead":2,"desc":"Chuyên mục hỏi nhanh - đáp gọn, nếu bạn chưa biết gì về webpack","content":"<p><em>🐸 Những module pattern nào webpack hỗ trợ?</em></p>\n<p><code class=\"language-text\">common.js</code> và es6</p>\n<p>🐸 Có được phép có nhiều entry point trong cùng 1 file config?*</p>\n<p>Có</p>\n<p><em>🐸 Làm sao để tạo file config webpack tự động?</em></p>\n<p><code class=\"language-text\">webpack-cli init</code></p>\n<p><em>🐸 Loader trong webpack là gì?</em></p>\n<p>transform những module nào không phải là JS vào trong bundle</p>\n<p><em>🐸 Loader chạy sync hay async</em></p>\n<p>Cả hai</p>\n<p><em>🐸 Khác nhau giữa loader và plugin</em></p>\n<p>Loader dùng để pre-processing, plugin phức tạp hơn và nó can thiệp nhiều vào quá trình compile.</p>\n<p><em>🐸 Làm sao để tách một số data ra khỏi bundle thành một file riêng biệt, ví dụ như file css</em></p>\n<p>Sử dụng <a href=\"https://github.com/webpack-contrib/extract-text-webpack-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ExtractTextWebpackPlugin</a>. Tất cả css sẽ không còn nằm inline trong file JS bundle, nó sẽ là một file riêng (style.css chẳng hạn)</p>\n<p><em>🐸 Hot module replacement là gì?</em></p>\n<p>Tính năng cho phép cập nhập module mà không cần reload</p>\n<p><em>🐸 parallel-webpack là gì và nó ảnh hưởng thế nào đến quá trình build</em></p>\n<p><a href=\"https://github.com/trivago/parallel-webpack\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">parallel-webpack</a> sẽ giúp config với nhiều entry point, cho phép webpack build parallel, nâng cao tốc độ build</p>\n<p><em>🐸 Mô tả một cách ngắn gọn long-term caching và làm sao sử dụng nó trong webpack?</em></p>\n<p>Browser sẽ cache static file bên dưới local để cải thiện tốc độ load, để đảm bảo nếu có bản build mới, trình duyệt biết và download file mới, tên  file thường được đặt như sau</p>\n<pre class=\"language-text\"><code class=\"language-text\">app.js?build=1\napp.js?build=2\n\n// hoặc\napp.js.2a6c1fee4b5b0d2c9285.js\napp.js.70b594fe8b07bcedaa98.js</code></pre>\n<p>Để làm việc này, trong webpack chúng ta đặt config</p>\n<pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token spread operator\">...</span>\n    output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     filename<span class=\"token operator\">:</span> <span class=\"token string\">\"[name].[hash].js\"</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><em>🐸 Khác nhau giữa hash và chunkhash?</em></p>\n<p>[hash] tạo ra một id ngẫu nhiên cho từng lần build và sử dụng cho tất cả  chunk. Nếu thay [hash] bằng [chunkhash] nó sẽ tạo ra mỗi chunk một id ngẫu nhiên.</p>\n<p><em>🐸 Mô tả CommonsChunk Plugin?</em></p>\n<p>Là một tính năng có sẵn của webpack, cho phép tạo file riêng (gọi là chunk) cho những module dùng chung. Hỗ trợ caching và nâng cao tốc độ load</p>\n<p><em>🐸Diễn giải đoạn code bên dưới</em></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>ContextReplacementPlugin</span><span class=\"token punctuation\">(</span>\n     <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">moment<span class=\"token charset\"><span class=\"token charset-punctuation punctuation\">[</span><span class=\"token escape\">\\/</span><span class=\"token special-escape escape\">\\\\</span><span class=\"token charset-punctuation punctuation\">]</span></span>locale</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n     <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token group punctuation\">(</span>en-gb<span class=\"token alternation keyword\">|</span>en-us<span class=\"token group punctuation\">)</span><span class=\"token special-escape escape\">\\.</span>js</span><span class=\"token regex-delimiter\">/</span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Báo với webpack, chỉ include những file có tên khớp với điều kiện <code class=\"language-text\">/(en-gb|en-us)\\.js/</code>, trong đường dẫn <code class=\"language-text\">/moment[\\/\\\\]locale/</code> khi bundle</p>\n<p><em>🐸 Làm sao để remove những css selector không dùng đến?</em></p>\n<p>Dùng plugin <a href=\"https://github.com/webpack-contrib/purifycss-webpack\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">purifycss-webpack</a></p>\n","cover_image":""}}]}}},"context":{}}