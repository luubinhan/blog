{"hash":"bb9d7e5a46c25f220b2fd3c7f9d26cdf170dba2b","data":{"tag":{"title":"performance","belongsTo":{"edges":[{"node":{"title":"Đo thời gian render bằng Chrome","path":"/do-thoi-gian-render-bang-chrome/","date":"23. October 2018","timeToRead":1,"desc":"Bàn luận kỹ thuật để đo chính xác thời gian render","content":"<p>Để thực hành bài này, bạn có thể sử dụng <a href=\"https://github.com/nolanlawson/measure-style-and-layout\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code có sẵn</a> này</p>\n<p>Trên tab Performance của DevTools chúng ta có</p>\n<p><img src=\"https://github.com/nolanlawson/measure-style-and-layout\" alt=\"Đo thời gian render bằng Chrome\"></p>\n<p>Đây là giá trị CPU đã tiêu tốn để render component, theo đơn vị là mili giây. Nó sẽ được thực hiện 4 bước</p>\n<ul>\n<li>Thực thi javascript</li>\n<li>Apply các format bằng CSS</li>\n<li>Tính layout, trình duyệt tiếp tục tính toán để \"đặt\" các element trên màn hình ở chỗ nào</li>\n<li>Render được thực hiện trên một <a href=\"https://blogs.windows.com/msedgedev/2017/08/17/making-web-smoother-independent-rendering/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">thread riêng</a></li>\n</ul>\n<p>Đa phần mọi người sẽ bỏ qua các bước 2, 3, 4 khi đo, chỉ tính toán thời gian thực thi javascript</p>\n<p><img src=\"https://nolanwlawson.files.wordpress.com/2018/09/screenshot-2018-09-22-11-45-56-3-copy.png?w=570&#x26;h=254\" alt=\"Đo thời gian render bằng Chrome\"></p>\n<p>Bước render rất khó có thể đo được chính xác, nó được thực hiện trên threat riêng và dùng GPU</p>\n<p>Phần style và layout thì có thể đo chính xác hơn vì nó block lại main thread</p>\n<h1 id=\"đo-gì\"><a href=\"#%C4%91o-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đo gì?</h1>\n<p>Chúng ta sẽ <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">đánh dấu</a> từ khi javascript bắt đầu chạy, đến hết phần render</p>\n<p>Sử dụng <code class=\"language-text\">requestAnimationFrame</code> là chính, nó được gọi trước quá trình style và layout, nhưng thực tế trước Edge v18 và một số bản Safari thì không đúng, nên cũng có thể có chút sai xót</p>\n<p><img src=\"https://nolanwlawson.files.wordpress.com/2018/09/screenshot-2018-09-22-11-45-56-3.png?w=570&#x26;h=254\" alt=\"Đo thời gian render bằng Chrome\"></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token dom variable\">performance</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">mark</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Phần code trong <code class=\"language-text\">setTimeOut</code> được gọi ngay sau bước paint</p>\n<p><img src=\"https://nolanwlawson.files.wordpress.com/2018/09/screenshot-2018-09-22-12-15-07.png?w=570&#x26;h=343\" alt=\"Đo thời gian render bằng Chrome\"></p>\n<p><img src=\"https://i.imgur.com/Pwa9tV8.png\" alt=\"Đo thời gian render bằng Chrome\"></p>\n<h1 id=\"một-số-vấn-đề\"><a href=\"#m%E1%BB%99t-s%E1%BB%91-v%E1%BA%A5n-%C4%91%E1%BB%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một số vấn đề</h1>\n<ul>\n<li><code class=\"language-text\">setTimeOut</code> đôi khi có sai lệch tầm 4ms trên một số trình duyệt</li>\n<li>Nếu có một <code class=\"language-text\">setTimeOut</code> callback khác trong code, có thể không còn đúng</li>\n<li>Sau này khi các trình duyệt đã hỗ trợ cách tốt hơn thì setTimeOut kiểu này là dư thừa</li>\n</ul>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://nolanlawson.com/2018/09/25/accurately-measuring-layout-on-the-web/\">Accurately measuring layout on the web</a></p>\n"}},{"node":{"title":"Hướng dẫn kiểm tra performace với Chrome DevTools","path":"/huong-dan-kiem-tra-performace-voi-chrome-dev-tools/","date":"20. October 2018","timeToRead":2,"desc":"Học cách sử dụng tab Network Chrome DevTools để biết tại sao một trang load chậm, hướng dẫn từng bước một.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#b%C6%B0%E1%BB%9Bc-1-c%C3%A0i-%C4%91%E1%BA%B7t-devtools\">Bước 1: Cài đặt DevTools</a></li>\n<li><a href=\"#b%C6%B0%E1%BB%9Bc-2-gi%E1%BA%A3-l%E1%BA%ADp-mobile\">Bước 2: Giả lập mobile</a></li>\n<li>\n<p><a href=\"#b%C6%B0%E1%BB%9Bc-3-%C4%91%C3%A1nh-gi%C3%A1-k%E1%BA%BFt-qu%E1%BA%A3\">Bước 3: Đánh giá kết quả</a></p>\n<ul>\n<li><a href=\"#t%C3%ACm-c%C3%A1c-%C4%91o%E1%BA%A1n-script-block-render\">Tìm các đoạn script block render</a></li>\n<li><a href=\"#t%C3%ACm-c%C3%A1c-request-l%E1%BB%9Bn\">Tìm các request lớn</a></li>\n</ul>\n</li>\n<li><a href=\"#x%C3%A1c-nh%E1%BA%ADn-l%E1%BA%A1i-c%C3%A1c-thay-%C4%91%E1%BB%95i-%C4%91%C3%A3-fix\">Xác nhận lại các thay đổi đã fix</a></li>\n<li><a href=\"#%C4%91%E1%BB%8Dc-th%C3%AAm\">Đọc thêm</a></li>\n</ul>\n<!-- /TOC -->\n<h1 id=\"bước-1-cài-đặt-devtools\"><a href=\"#b%C6%B0%E1%BB%9Bc-1-c%C3%A0i-%C4%91%E1%BA%B7t-devtools\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bước 1: Cài đặt DevTools</h1>\n<p>Giả sử bạn nhận được phàn nàn từ user là trang nào đó trên site load quá chậm. Bạn cần check theo các bước</p>\n<ol>\n<li>Mở <a targe=\"_blank\" href=\"https://googlechrome.github.io/devtools-samples/network/gs/v1.html\">trang này</a> trong cửa sổ private mới</li>\n<li>Ấn tổ hợp phím <code class=\"language-text\">Ctrl + Shift + I</code> để mở DevTools</li>\n<li>Click tab <strong>Network</strong></li>\n</ol>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/get-started-network-panel.png\" alt=\"Figure 1. The Chrome DevTools Network panel, opened next to the slow page that you&#x27;re going to diagnose.\"></p>\n<ol start=\"4\">\n<li>Click nút <strong>Capture Screenshots</strong> <img src=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/capture-screenshots.png\" alt=\"Capture Screenshots\">, nó chuyển sang xanh, để capture screenshot trong suốt quá trình trang được load</li>\n</ol>\n<h1 id=\"bước-2-giả-lập-mobile\"><a href=\"#b%C6%B0%E1%BB%9Bc-2-gi%E1%BA%A3-l%E1%BA%ADp-mobile\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bước 2: Giả lập mobile</h1>\n<p>Sử dụng web trên máy tính thì ít có vấn đề, vì tốc độ mạng ngày nay được cải thiện nhiều, nếu máy tính mà vẫn chậm thì bạn xem lại nhé, giả lập xem trải nghiệm trên mobile thế nào</p>\n<ol>\n<li>Check vào ô <strong>Disable Cache</strong> để quá trình kiểm tra chính xác hơn</li>\n<li>Từ dropdown menu đang có giá trị <strong>No throttling</strong> chọn xuống <strong>Regular 2G</strong>. DevTools sẽ giả lập tốc độ mạng xuống 2G</li>\n</ol>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/get-started-setup.svg\" alt=\"Figure 2. The Chrome DevTools Network panel, set up to emulate a mobile user&#x27;s experience. Screenshots, cache disabling, and throttling are outlined in blue, from left to right, respectively.\"></p>\n<h1 id=\"bước-3-đánh-giá-kết-quả\"><a href=\"#b%C6%B0%E1%BB%9Bc-3-%C4%91%C3%A1nh-gi%C3%A1-k%E1%BA%BFt-qu%E1%BA%A3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bước 3: Đánh giá kết quả</h1>\n<p>Tìm xem đâu là nguyên nhân làm chậm page load bằng cách reload lại trang và xem xét kết quả.</p>\n<h2 id=\"tìm-các-đoạn-script-block-render\"><a href=\"#t%C3%ACm-c%C3%A1c-%C4%91o%E1%BA%A1n-script-block-render\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tìm các đoạn script block render</h2>\n<p>Khi trình duyệt gặp tag <code class=\"language-text\">&lt;script&gt;</code>, nó sau pause việc render, thực thi đoạn script ngay lập tức.\n1. Tìm các đoạn script không thật sự cần chạy ngay lập tức, đánh dấu async hoặc defer\nẤn tổ hợp <code class=\"language-text\">Ctrl + R</code> để load lại trang.</p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/get-started-post-load.png\" alt=\"Figure 3. The Chrome DevTools Network panel, after reloading the page.\"></p>\n<ol start=\"2\">\n<li>Để ý giá trị của <code class=\"language-text\">DOMContentLoaded</code> trong tab <strong>Summary</strong>, phía dưới tab Network. Bạn sẽ thấy 4 giây.</li>\n<li>Click file <code class=\"language-text\">main.js</code> để xem, nó mở ra một tab mới show chi tiết hơn</li>\n<li>Click vào tab <strong>Preview</strong> để xem source code. Đoạn script này đợi 4000ms, đánh dấu nó là async và chuyển xuống dưới <code class=\"language-text\">&lt;body&gt;</code></li>\n</ol>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/get-started-preview.png\" alt=\"Figure 4. Viewing the source code for main.js in the Preview pane.\"></p>\n<p>Đọc thêm <a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/adding-interactivity-with-javascript#parser_blocking_versus_asynchronous_javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Parser-blocking vs. async Javascript</a> để tìm hiểu thêm về script block render</p>\n<h2 id=\"tìm-các-request-lớn\"><a href=\"#t%C3%ACm-c%C3%A1c-request-l%E1%BB%9Bn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tìm các request lớn</h2>\n<p>Trong source ví dụ, bạn thấy cái logo sẽ load rất chậm, mặc dù nó không hề block render</p>\n<ol>\n<li>Mở lại tab Network</li>\n<li>Double click lên hình screenshot</li>\n<li>Click mũi tên để di chuyển qua lại giữa các screenshot. Bên dưới screenshot là thời gian nó được chụp</li>\n<li>Hover lên Waterfall cho request logo-1024.png. Phần lớn thời gian tiêu tốn cho việc download hình này.</li>\n</ol>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/get-started-waterfall.png\" alt=\"Figure 5. The waterfall for logo-1024px.png.\"></p>\n<h1 id=\"xác-nhận-lại-các-thay-đổi-đã-fix\"><a href=\"#x%C3%A1c-nh%E1%BA%ADn-l%E1%BA%A1i-c%C3%A1c-thay-%C4%91%E1%BB%95i-%C4%91%C3%A3-fix\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xác nhận lại các thay đổi đã fix</h1>\n<p>Chúng ta đã thực hiện 2 thay đổi</p>\n<ul>\n<li>Chuyển <code class=\"language-text\">&lt;script&gt;</code> xuống dưới body, đánh dấu thành async</li>\n<li>Đổi logo sang SVG</li>\n</ul>\n<p>Giờ chúng ta chạy test lại một lần nữa để xem nó cải thiện được phần nào chưa</p>\n<ol>\n<li>Mở <a href=\"https://googlechrome.github.io/devtools-samples/network/gs/v2.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">trang đã sữa</a> trên tab private mới</li>\n<li>Setup DevTools tương tự như lúc trước</li>\n<li>Reload lại trang</li>\n</ol>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/get-started-post-fix.png\" alt=\"Figure 6. A recording of the page&#x27;s load, after applying the fixes. The page used to take about 10 seconds to appear visually complete. Now it only takes about 1 second.\"></p>\n<h1 id=\"đọc-thêm\"><a href=\"#%C4%91%E1%BB%8Dc-th%C3%AAm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đọc thêm</h1>\n<ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Critical rendering path</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/issues\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Network issue guide</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/reference\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Network Panel Reference</a></li>\n</ul>\n<p><a href=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developers.google.com/web/tools/chrome-devtools/network-performance/</a></p>\n"}},{"node":{"title":"Hướng dẫn lazy load component trong React","path":"/huong-dan-lazy-load-component-trong-react/","date":"7. October 2018","timeToRead":4,"desc":"Sự là hôm rồi đi phỏng vấn, được hỏi câu này mà mình đó giờ chưa làm nên không biết, nay có thời gian rảnh rỗi tìm hiểu, chia sẻ lại cho các bạn chưa biết.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81\">Vấn đề</a></li>\n<li><a href=\"#gi%E1%BA%A3i-ph%C3%A1p\">Giải pháp</a></li>\n<li><a href=\"#code-v%C3%AD-d%E1%BB%A5\">Code ví dụ</a></li>\n<li><a href=\"#lazy-load-react-router\">Lazy load react-router</a></li>\n<li><a href=\"#t%E1%BB%95ng-k%E1%BA%BFt\">Tổng kết</a></li>\n</ul>\n<!-- /TOC -->\n<h1 id=\"vấn-đề\"><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vấn đề</h1>\n<p>Bạn viết code, chạy thử trên localhost, yeah mọi thứ super nhanh</p>\n<p><img src=\"https://pm1.narvii.com/6456/c88c177b7cee6af26086088dfcfa09cf401b676e_hq.jpg\" alt=\"Hướng dẫn lazy load component trong React\"></p>\n<p>Nhưng khi chạy trên production thì mọi thứ sẽ trở nên như thế này</p>\n<p><img src=\"https://vetstreet-brightspot.s3.amazonaws.com/32/b9e550dfd411e1a02d005056ad4734/file/tortoise-137584694-lc080612.jpg\" alt=\"Hướng dẫn lazy load component trong React\"></p>\n<p>Sẽ có rất nhiều giải pháp để xử lý vấn đề này.</p>\n<p>Tại sao chúng ta phải load một component mà user chưa sử dụng đến, thậm chí có khi trong suốt quá trình làm việc, user sẽ không đụng đến một số màn hình?</p>\n<h1 id=\"giải-pháp\"><a href=\"#gi%E1%BA%A3i-ph%C3%A1p\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giải pháp</h1>\n<p>Nếu bạn làm web nhiều thì chắc có nghe đến lazy load image, để giảm bớt số lượng request gởi đi và dữ liệu trả về cho lần load đầu tiên. Trong React cũng có khái niệm tương tự như vậy.</p>\n<p>Tất cả những việc đó thực hiện được là nhờ sự thần thánh của <strong>webpack</strong></p>\n<p>Thông thường chúng ta import component như sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">ScreenComponent</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./ScreenComponent'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Vậy đã bao giờ bạn thử</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ScreenComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Vâng, nó sẽ trả về 1 <strong>Promise</strong>!</p>\n<p>Nếu import như thế, Webpack sẽ split file build ra và thực hiện việc load chỉ khi được gọi</p>\n<h1 id=\"code-ví-dụ\"><a href=\"#code-v%C3%AD-d%E1%BB%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Code ví dụ</h1>\n<p><img src=\"https://i.imgur.com/5zJ4s8b.png\" alt=\"Hướng dẫn lazy load component trong React\"></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">Todo</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./Todo'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      todos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App-header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Add todo\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">changeValue</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">submitValue</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Add</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span></span> <span class=\"token attr-name\">todos</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">todos</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nếu ở màn hình này, user chưa có gì trong <code class=\"language-text\">state.todos</code>, chúng ta không thực sự cần <code class=\"language-text\">import Todo from &#39;./Todo&#39;;</code>, chỉ khi user nhấn add để thêm một item vào trong <code class=\"language-text\">state.todos</code> chúng ta mới cần load component <code class=\"language-text\">&lt;Todo /&gt;</code></p>\n<p>Thêm <code class=\"language-text\">state.LLTodo</code> để kiểm tra việc load component todo chưa, chúng ta đưa việc load này vào <code class=\"language-text\">componentDidUpdate()</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//import Todo from './Todo'; // bỏ component import ở đây</span>\n\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      todos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token maybe-class-name\">LLTodo</span><span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">LLTodo</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">lazyLoadTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function-variable function\">lazyLoadTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> lazyLoad <span class=\"token operator\">=</span> <span class=\"token keyword module\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Todo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">debugger</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// để xem nó trả về gì</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"https://i.imgur.com/EQHSNyp.png\" alt=\"Hướng dẫn lazy load component trong React\"></p>\n<p>Nó đã trả về cho chúng ta một Promise, sửa lại hàm này thành async</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function-variable function\">lazyLoadTodo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span><span class=\"token keyword module\">default</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Todo</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword module\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Todo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">LLTodo</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Todo</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta kiểm tra việc render này theo <code class=\"language-text\">state.LLTodo</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">LLTodo</span><span class=\"token punctuation\">,</span> todos<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> lazyLoadTodo <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">LLTodo</span> <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LLTodo</span></span> <span class=\"token attr-name\">todos</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App-header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          Add todo\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">changeValue</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">submitValue</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Add</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>lazyLoadTodo<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Để thực sự thấy được kết quả, chúng ta có thể build, hoặc trên mở tab network, khi nhập giá trị vào trong input, một file <code class=\"language-text\">[tên].chunk.js</code> sẽ được load thêm vào.</p>\n<p><img src=\"https://i.imgur.com/h9LyiS9.png\" alt=\"Hướng dẫn lazy load component trong React\"></p>\n<p>File 1.chunk.js được load khi component được update</p>\n<p><img src=\"https://i.imgur.com/8v6S8QR.png\" alt=\"Hướng dẫn lazy load component trong React\"></p>\n<p>Mở file này ra để check xem sau</p>\n<p><img src=\"https://i.imgur.com/Y9lytUD.png\" alt=\"Hướng dẫn lazy load component trong React\"></p>\n<p>Đúng là file component của chúng ta được được tách ra :D</p>\n<h1 id=\"lazy-load-react-router\"><a href=\"#lazy-load-react-router\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lazy load react-router</h1>\n<p>Giờ xem xét phần chúng ta setup cho cái route, đại khái nó sẽ như thế này</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">Home</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./Home'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">Blog</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./Blog'</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">exact</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">HomeComponent</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/blog<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">BlogComponent</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Áp dụng lazy load component với <em>route</em>, ở đây mình viết thêm một hàm <code class=\"language-text\">asyncComponent</code>, nó sẽ nhận vào hàm <code class=\"language-text\">import(&#39;path/to/file&#39;)</code> và return về component đó.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Component</span><span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">asyncComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">getComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">AsyncComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token comment\">// chổ này hơi tricky, trỏ về chính nó</span>\n      <span class=\"token maybe-class-name\">Component</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">AsyncComponent</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span> \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// không re-load nếu đã có rồi</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">getComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token maybe-class-name\">Component</span></span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token maybe-class-name\">AsyncComponent</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Component</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">this</span><span class=\"token punctuation\">.</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token maybe-class-name\">AsyncComponent</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Hàm <code class=\"language-text\">asyncComponent()</code> này chúng ta sẽ truyền vào cho nó function là <code class=\"language-text\">getComponent()</code> (chính là hàm import)</p>\n<p>Chỉnh lại cách chúng ta import component cho từng route</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Dynamically imported components</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Home</span> <span class=\"token operator\">=</span> <span class=\"token function\">asyncComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  <span class=\"token keyword module\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Home'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span> <span class=\"token arrow operator\">=></span> module<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Blog</span> <span class=\"token operator\">=</span> <span class=\"token function\">asyncComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  <span class=\"token keyword module\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Blog'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span> <span class=\"token arrow operator\">=></span> module<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">exact</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Home</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/blog<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token maybe-class-name\">Blog</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p><img src=\"https://i.imgur.com/PN8f7w9.png\" alt=\"Hướng dẫn lazy load component trong React\"></p>\n<h1 id=\"tổng-kết\"><a href=\"#t%E1%BB%95ng-k%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tổng kết</h1>\n<p>Việc lazy load component không quá khó, không cần thêm bất kỳ thư viện, config gì cả nếu bạn đang init project bằng <code class=\"language-text\">create-react-app</code>, nhưng nó sẽ là giải pháp phải làm khi file bundle của bạn đã quá lớn và ngày càng lớn hơn.</p>\n<p>Chúc các bạn có một ngày Happy Interview!</p>\n"}},{"node":{"title":"Nâng cao tốc độ Component","path":"/nang-cao-toc-do-component/","date":"6. October 2018","timeToRead":3,"desc":"Bài viết của team làm Facebook Ads chia sẽ, cùng điểm qua các vấn đề căn bản để tối ưu component","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-shouldcomponentupdate-v%C3%A0-reactpurecomponent\">Sử dụng <code class=\"language-text\">shouldComponentUpdate</code> và <code class=\"language-text\">React.PureComponent</code></a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-d%E1%BB%AF-li%E1%BB%87u-immutability-%C4%91%E1%BB%83-so-s%C3%A1nh\">Sử dụng dữ liệu Immutability để so sánh</a></li>\n<li><a href=\"#chuy%C3%AAn-bi%E1%BB%87t-h%C3%B3a-%C4%91%E1%BB%83-maintain-v%C3%A0-c%E1%BA%A3i-thi%E1%BB%87n-hi%E1%BB%87u-n%C4%83ng\">Chuyên biệt hóa để maintain và cải thiện hiệu năng</a></li>\n<li><a href=\"#%C4%91%E1%BB%99c-l%E1%BA%ADp-tr%C3%AAn-t%E1%BB%ABng-children\">Độc lập trên từng <code class=\"language-text\">children</code></a></li>\n</ul>\n<!-- /TOC -->\n<h1 id=\"sử-dụng-shouldcomponentupdate-và-reactpurecomponent\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-shouldcomponentupdate-v%C3%A0-reactpurecomponent\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng <code class=\"language-text\">shouldComponentUpdate</code> và <code class=\"language-text\">React.PureComponent</code></h1>\n<p><strong>re-render</strong> là thứ sẽ tiêu tốn công sức và chúng ta phải hạn chế nó tối đa, bằng hook <code class=\"language-text\">shouldComponentUpdate(nextProps, nextState)</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">!</span><span class=\"token function\">shallowEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">,</span> nextProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n    <span class=\"token operator\">!</span><span class=\"token function\">shallowEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">,</span> nextState<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Pure component là những component chỉ dùng giá trị <code class=\"language-text\">props</code> và <code class=\"language-text\">state</code> để <code class=\"language-text\">render</code>, không cần tính toán logic, nó cũng sẽ không có hook <code class=\"language-text\">shouldComponentUpdate</code>, React sẽ dùng kiểu so sánh <strong>tương đối</strong></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// chỉ phụ thuộc vào props và state khi render</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>width<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">width</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">rows</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Vì vậy phải đảm bảo các <code class=\"language-text\">children</code> của một PureComponent cùng là một PureComponent, nếu không có trường hợp nó sẽ không render đúng.</p>\n<p>Ví dụ như bên dưới, 2 object này React sẽ so sánh được</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  size<span class=\"token operator\">:</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span>\n  color<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// .vs</span>\n<span class=\"token punctuation\">{</span>\n  size<span class=\"token operator\">:</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span>\n  color<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nhưng object thế này thì thua</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  isActive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  balance<span class=\"token operator\">:</span> <span class=\"token string\">'1500000'</span><span class=\"token punctuation\">,</span>\n  picture<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    first<span class=\"token operator\">:</span> <span class=\"token string\">'An'</span><span class=\"token punctuation\">,</span>\n    last<span class=\"token operator\">:</span> <span class=\"token string\">'Luu'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  contact<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">email</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      phone<span class=\"token operator\">:</span> <span class=\"token string\">'123456'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      email<span class=\"token operator\">:</span> <span class=\"token string\">'anluu@gmail'</span><span class=\"token punctuation\">,</span>\n      address<span class=\"token operator\">:</span> <span class=\"token string\">'123 Sai Gon'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"sử-dụng-dữ-liệu-immutability-để-so-sánh\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-d%E1%BB%AF-li%E1%BB%87u-immutability-%C4%91%E1%BB%83-so-s%C3%A1nh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng dữ liệu Immutability để so sánh</h1>\n<p>Cách làm áp dụng ở đây tương tự như việc trả hàng hóa</p>\n<p><img src=\"https://uidesign.gearbest.com/gb_blog/2101-2400/2375/6-tips-about-applying-for-a-product-return-on-GearBest-Z00.jpg\"></p>\n<p>Nếu gói hàng bị trả chưa khui gì cả, người bán hàng chỉ cần kiểm tra xung quanh đảm bảo gói hàng chưa bị khui thì họ sẽ xem như nó còn nguyên vẹn, không cần kiểm tra bên trong.</p>\n<p>Tương tự, nếu chúng ta dùng dữ liệu Immuatable, chúng ta có thể nhanh chóng biết được 2 object hay mảng đó có khác nhau hay không.</p>\n<p>Để biết thêm về Immutable, <a href=\"https://facebook.github.io/immutable-js/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">đọc thêm ở đây</a></p>\n<h1 id=\"chuyên-biệt-hóa-để-maintain-và-cải-thiện-hiệu-năng\"><a href=\"#chuy%C3%AAn-bi%E1%BB%87t-h%C3%B3a-%C4%91%E1%BB%83-maintain-v%C3%A0-c%E1%BA%A3i-thi%E1%BB%87n-hi%E1%BB%87u-n%C4%83ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chuyên biệt hóa để maintain và cải thiện hiệu năng</h1>\n<p>Chuyên biệt hóa là việc tách nhỏ các component ra, mỗi một component đảm nhiệm một công việc cụ thể</p>\n<p>Ví dụ, thay vì viết 1 component là <code class=\"language-text\">ScrollingTable</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ScrollingTable</span></span>\n  <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>123<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\">\n  <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token color\">blue</span></span><span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">scrollTop</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">offsetTop</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre>\n<p>Nên viết thành 2 component</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OuterScroller</span></span> <span class=\"token attr-name\">scrollTop</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">offsetTop</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">InnerTable</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>123<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token color\">blue</span></span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">OuterScroller</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<h1 id=\"độc-lập-trên-từng-children\"><a href=\"#%C4%91%E1%BB%99c-l%E1%BA%ADp-tr%C3%AAn-t%E1%BB%ABng-children\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Độc lập trên từng <code class=\"language-text\">children</code></h1>\n<p>Có thể hình dùng việc lồng ghép các component theo kiểu parent-children giống như một cái cây-thân-nhánh-lá</p>\n<p><img src=\"https://media.istockphoto.com/vectors/tree-background-vector-id518399734?k=6&#x26;m=518399734&#x26;s=612x612&#x26;w=0&#x26;h=qxXFy440iXG-CXB9jlC-TyWPKU0NRWLa3cGYu_-ukQI=\"></p>\n<p>Khi lồng ghép quá nhiều dẫn đến việc để so sánh và biết được sự khác nhau giữa <strong>cây cũ</strong> và <strong>cây mới</strong> là vô cùng tốn sức</p>\n<p>Không những vậy, các component children sẽ thay đổi thường xuyên. Lấy ví dụ</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> <span class=\"token maybe-class-name\">Parent</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span> <span class=\"token operator\">!==</span> nextProps<span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Parent</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">child</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Parent</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Tất nhiên đây là ví dụ để bạn dễ hình dung rằng các component children thường xuyên thay đổi, việc kiểm tra <code class=\"language-text\">shouldComponentUpdate</code> lúc này rất khó nói trước là <code class=\"language-text\">true</code> hay <code class=\"language-text\">false</code></p>\n<p>Khuyến khích sử dụng ContainerComponent để kết nối vào store và Component chỉ đảm nhiệm việc render HTML</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// BudgetWidgetContainer</span>\n<span class=\"token keyword\">var</span> <span class=\"token maybe-class-name\">BudgetWidgetContainer</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\"><span class=\"token maybe-class-name\">PureComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>  \n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BudgetWidget</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">amount</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code class=\"language-text\">&lt;BudgetWidget/&gt;</code> không quan tâm value từ đâu có, nó chỉ việc render HTML, chúng ta có thể sử dụng component như vậy ở nhiều nơi, chúng ta chỉ cần viết lại Container Component</p>\n<p><a href=\"https://www.youtube.com/watch?v=KYzlpRvWZ6c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem video gốc của bài viết</a></p>\n"}},{"node":{"title":"Làm việc với Redux trong ứng dụng lớn","path":"/lam-viec-voi-redux-trong-ung-dung-lon/","date":"4. October 2018","timeToRead":8,"desc":"Cùng thảo luận xung quanh vấn đề ứng dụng thiên về dữ liệu lớn, rất lớn","content":"<p>Đây là những chỉ dẫn của <a href=\"https://www.appnexus.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AppNexus</a> để tối ưu redux với lượng dữ liệu khủng. Mức độ bài viết khá chuyên sâu, bạn cần nắm thật vững redux, hoặc xem lại redux để hiểu rõ và nhớ lâu nội dung bài này.</p>\n<h1 id=\"lưu-dữ-liệu-với-chỉ-mục-truy-cập-bằng-selector\"><a href=\"#l%C6%B0u-d%E1%BB%AF-li%E1%BB%87u-v%E1%BB%9Bi-ch%E1%BB%89-m%E1%BB%A5c-truy-c%E1%BA%ADp-b%E1%BA%B1ng-selector\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lưu dữ liệu với chỉ mục. Truy cập bằng selector</h1>\n<p>Cách cấu trúc dữ liệu sẽ ảnh hưởng nhiều đến performance và việc tổ chức ứng dụng. Lưu dữ liệu trả về từ API theo chỉ mục (index) mang lại nhiều lợi ích. Nói nôm na, lưu theo chỉ mục tức là theo dạng object, theo cặp key-value. Tác giả Redux ( Dan Abramov ) có trình bài vấn đề này <a href=\"https://egghead.io/lessons/javascript-redux-persisting-the-state-to-the-local-storage\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ở đây</a></p>\n<p>Tưởng tượng chúng ta có một mảng object, được <code class=\"language-text\">fetch</code> từ REST API. Giả dụ chúng ta quyết định lưu toàn bộ xuống <em>store</em> như nó trả về. Khi chúng ta muốn lấy một object cụ thể nào đó? Phải loop qua toàn bộ, rồi muốn lưu danh sách các user đang được chọn và chưa được chọn?</p>\n<p>Để tránh tình trạng này, lưu nó dạng chỉ mục, viết lại reducer trước khi lưu xuống store, cục dữ liệu mong muốn, (bạn nào sử dụng FireStore, NoSQL database sẽ hiểu liền tại sao)</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"usersById\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">123</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"Jane Doe\"</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token string\">\"jdoe@example.com\"</span><span class=\"token punctuation\">,</span>\n      phone<span class=\"token operator\">:</span> <span class=\"token string\">\"555-555-5555\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token spread operator\">...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token spread operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Dữ liệu được cấu trúc như thế này thì giải quyết vấn đề bằng cách nào? Ví dụ, chúng ta muốn truy cập đến một user object cụ thể</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">usersById</span><span class=\"token punctuation\">[</span>userId<span class=\"token punctuation\">]</span></code></pre>\n<p><strong>Không cần loop, sử dụng key để lấy trực tiếp đến object mong muốn</strong></p>\n<p>Câu hỏi tiếp theo, ủa vậy sao render được danh sách user nếu dữ liệu tổ chức như vậy. Để làm chuyện đó, chúng ta viết một hàm (hàm như vậy gọi là selector) đơn giản bằng <code class=\"language-text\">Object.keys()</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUsers</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>userById<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>usersById<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span> <span class=\"token arrow operator\">=></span> usersById<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Thêm một hàm nữa cho việc lấy ra danh sách user với tham số truyền vào là mảng user id</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getSelectedUsers</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> selectedUserIds<span class=\"token punctuation\">,</span> usersById <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> selectedUserIds<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> usersById<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đừng lo chuyện phải viết quá nhiều hàm, viết như vậy càng dễ cho sau này maintain. Trường hợp cái model user có bị thay đổi đi nữa, chúng ta không cần phải update cả trăm cái view đang sử dụng dữ liệu này, đơn giản là update những hàm selector này lại, re-format dữ liệu một tí là xong.</p>\n<h1 id=\"view-và-edit-nên-có-2-state-khác-nhau\"><a href=\"#view-v%C3%A0-edit-n%C3%AAn-c%C3%B3-2-state-kh%C3%A1c-nhau\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>View và edit nên có 2 state khác nhau</h1>\n<p>Những dữ liệu từ REST API trả về được xem là <strong>state chuẩn</strong>, giống hệt với database. State của ứng dụng chúng ta sẽ lưu thêm một số meta data khác cho từng user, bình thường chúng ta sẽ xử lý hết những dữ liệu trong cùng một reducer, vì nó tiện.</p>\n<p>Nên tách việc xử lý state chuẩn trên reducer khác, <strong>nếu tập trong tất cả xử lý trong một reducer sẽ khó maintain hơn là tách ra thành nhiều reducer riêng biệt</strong>. (dùng <code class=\"language-text\">combineReducers</code> đấy mà)</p>\n<p>Tại sao? Ví dụ chúng ta có 1 danh sách user, lưu dạng chỉ mục như ở trên</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n <span class=\"token string\">\"usersById\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">123</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"Jane Doe\"</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token string\">\"jdoe@example.com\"</span><span class=\"token punctuation\">,</span>\n      phone<span class=\"token operator\">:</span> <span class=\"token string\">\"555-555-5555\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token spread operator\">...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token spread operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta có màn hình để user chỉnh sửa, user click nút <strong>Edit</strong>, chúng ta phải update lại state để render màn hình edit, chúng ta thêm một field mới vào object như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n <span class=\"token string\">\"usersById\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">123</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"Jane Doe\"</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token string\">\"jdoe@example.com\"</span><span class=\"token punctuation\">,</span>\n      phone<span class=\"token operator\">:</span> <span class=\"token string\">\"555-555-5555\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token spread operator\">...</span>\n      isEditing<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token spread operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Submit lên trên API sau khi sửa. API trả về một object mới. Nhưng làm sau chúng ta merge lại vào store? Nếu replace toàn bộ object thì chúng ta mất cái field <code class=\"language-text\">isEditing</code>, tất nhiên là nếu muốn thì vẫn check và chỉ update những field mình muốn, nhưng như vậy rất tốn <em>sức người sức máy</em>. Tốt nhất chúng ta lưu dữ liệu từ API vào một nơi khác trong store bằng một reducer khác, không đụng gì vào nó, action cũng sẽ đơn giản hơn và dễ xử hơn</p>\n<p>Thêm nữa, nếu user có nữa chừng ấn <em>cancel</em> chúng ta dễ dàng reverse lại nếu đưa edit state vào chổ khác</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"usersByIds\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">123</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Jane Doe\"</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">\"jdoe@example.com\"</span><span class=\"token punctuation\">,</span>\n    phone<span class=\"token operator\">:</span> <span class=\"token string\">\"555-555-5555\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token spread operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"editingUsersById\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">123</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Jane Smith\"</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">\"jsmith@example.com\"</span><span class=\"token punctuation\">,</span>\n    phone<span class=\"token operator\">:</span> <span class=\"token string\">\"555-555-5555\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Như vậy chúng ta vẫn có state chuẩn, để reverse, edit state nếu user click edit nữa. Nói chung, tách ra, đừng gọp chung</p>\n<h1 id=\"xài-chung-state-một-cách-khôn-ngoan\"><a href=\"#x%C3%A0i-chung-state-m%E1%BB%99t-c%C3%A1ch-kh%C3%B4n-ngoan\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xài chung state một cách khôn ngoan</h1>\n<p>Một khi ứng dụng phình ra, nhiều tính năng hơn, nên có cái reducer cho từng page, ví dụ trang hiển thị list user, lưu lại trong <code class=\"language-text\">users</code> reducer, một trang khác bao gồm tất cả post của user hiện tại. Tổ chức redux store như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"usersPage\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"usersById\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token spread operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"postsPage\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"postsById\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token spread operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Mỗi trang đảm trách state của chính nó, các file reducer có thể để cùng với các file page luôn.</p>\n<p>Sẽ đến lúc chúng ta cần chia sẻ một vài state giữa 2 view. Cân nhắc các câu hỏi sau</p>\n<ul>\n<li>Có bao nhiêu view hoặc reducer sẽ phụ thuộc vào dữ liệu này?</li>\n<li>Mỗi trang có cần một bản sao dữ liệu không?</li>\n<li>Dữ liệu thay đổi có thường xuyên không?</li>\n</ul>\n<p>Ví dụ, thông tin user đang đăng nhập sẽ được hiển thị trên tất cả các trang. Tất cả trang đều dùng, thì nó sẽ không hợp lý với cách làm mỗi page một reducer. Thông tin user sẽ không đổi trên tất cả các trang (trừ khi nó vô sửa profile), vậy nên mỗi trang không cần phải có một bản sao thông tin này.</p>\n<p>Tất cả các trang nên dùng chung một thông tin user đang login, cho nó một reducer riêng.</p>\n<p>Trường hợp nào chuyện xài chung như vậy là ko hợp lý? Thí dụ trong các bài viết của user, nó có thêm danh sách các bình luận. Một trang hiển thị tất cả bình luận. Trang trang list post có tùy chọn hiển thị bình luận cho post đang chọn. Chúng ta có 2 trang đều phụ thuộc vào dữ liệu của bình luận. Trang list post sẽ bị thay đổi khá thường xuyên: user update, edit, delete, add post, bình luận tè le ở đó. Ở trang bình luận chỉ cho tương tác với API GET, PUT bình luận, có thể phân trang. Trang post thì ngược lại, nó chỉ lấy danh sách bình luận của chính nó. Rõ ràng, việc dùng chung bình luận giữa các view là không hợp lý. Mỗi trang nên lưu riêng một bản sao của bình luận.</p>\n<h1 id=\"tái-sử-dụng-các-hàm-xử-lý-reducer\"><a href=\"#t%C3%A1i-s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1c-h%C3%A0m-x%E1%BB%AD-l%C3%BD-reducer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tái sử dụng các hàm xử lý reducer</h1>\n<p>Sau một thời gian viết reducer, sẽ có lúc mình thấy mấy cái function này xử lý na ná nhau, như vậy thì nên tái sử dụng nó đừng viết mới. Ví dụ nếu logic của việc load dữ liệu bài viết và bình luận là như nhau, khác cái endpoint thôi và object schema, phân trang cũng giống.</p>\n<p>Để dùng chung reducer, cách thứ nhất, truyền vào scope bên trong payload của action. Để dễ hình dung, lấy vị dụ một trang chứa nhiều section khác nhau, tất cả đều load bất tuần tự từ các API endpoint khác nhau, để theo dõi tình trang load này bằng state trong store</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> initialLoadingState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  usersLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  domainsLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  subDomainsLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  settingsLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chúng ta có thể viết 4 reducer cho 4 cái action, thay vì như vậy nếu truyền thêm scope, một action <code class=\"language-text\">SET_LOADING</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// reducer</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loadingReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialLoadingState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> payload <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token constant\">SET_LOADING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// tùy theo scope mà gán cho key tương ứng</span>\n      <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>payload<span class=\"token punctuation\">.</span><span class=\"token property-access\">scope</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">Loading</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> payload<span class=\"token punctuation\">.</span><span class=\"token property-access\">loading</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Action</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setLoading</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">scope<span class=\"token punctuation\">,</span> loading</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token constant\">SET_LOADING</span><span class=\"token punctuation\">,</span>\n    payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      scope<span class=\"token punctuation\">,</span>\n      loading<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ví dụ gọi dispatch</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Làm như vậy chúng ta khử được quá nhiều lần lập lại logic của reducer.</p>\n<p>Còn về vấn đề phân trang, API có thể trả về gần giống như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"users\"</span><span class=\"token operator\">:</span> <span class=\"token spread operator\">...</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"count\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2500</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// tổng số dòng</span>\n  <span class=\"token string\">\"pageSize\"</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// số phần tử mỗi trang</span>\n  <span class=\"token string\">\"startElement\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// giá trị index đầu tiên của phần từ đầu tiên</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Để gọi dữ liệu trang tiếp theo, chúng ta có thể dùng tham số query <code class=\"language-text\">startElement=100</code>. Đây là cách chúng ta hiện thực reducer cho vấn đề phân trang</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> initialPaginationState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  startElement<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  pageSize<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  count<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">paginationReducerFor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prefix</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">paginationReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialPaginationState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> payload <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> prefix <span class=\"token operator\">+</span> types<span class=\"token punctuation\">.</span><span class=\"token constant\">SET_PAGINATION</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n          startElement<span class=\"token punctuation\">,</span>\n          pageSize<span class=\"token punctuation\">,</span>\n          count<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          startElement<span class=\"token punctuation\">,</span>\n          pageSize<span class=\"token punctuation\">,</span>\n          count<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> paginationReducer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Ví dụ</span>\n<span class=\"token keyword\">const</span> postsReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  postsData<span class=\"token operator\">:</span> postsDataReducer<span class=\"token punctuation\">,</span>\n  paginationData<span class=\"token operator\">:</span> <span class=\"token function\">paginationReducerFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POSTS_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> commentsReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  commentsData<span class=\"token operator\">:</span> commentsDataReducer<span class=\"token punctuation\">,</span>\n  paginationData<span class=\"token operator\">:</span> <span class=\"token function\">paginationReducerFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'COMMENTS_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Action creator</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setPaginationFor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prefix</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setPagination</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n      startElement<span class=\"token punctuation\">,</span>\n      pageSize<span class=\"token punctuation\">,</span>\n      count<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> response<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> prefix <span class=\"token operator\">+</span> types<span class=\"token punctuation\">.</span><span class=\"token constant\">SET_PAGINATION</span><span class=\"token punctuation\">,</span>\n      payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        startElement<span class=\"token punctuation\">,</span>\n        pageSize<span class=\"token punctuation\">,</span>\n        count<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> setPagination<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ví dụ sử dụng</span>\n<span class=\"token keyword\">const</span> setPostsPagination <span class=\"token operator\">=</span> <span class=\"token function\">setPaginationFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POSTS_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> setCommentsPagination <span class=\"token operator\">=</span> <span class=\"token function\">setPaginationFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'COMMENTS_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu chúng ta dispatch ra 1 action là <code class=\"language-text\">POSTS_SET_PAGINATION</code> nó sẽ chỉ đụng đến <code class=\"language-text\">postsReducer</code>. Một kiểu viết hơi tricky nếu bạn nào chưa nắm được <a href=\"https://developer.mozilla.org/vi/docs/Web/JavaScript/Closures\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Closure function</a> - mình có dịch trên MDN rồi, các bạn lên đó đọc lại.</p>\n<h1 id=\"tích-hợp-với-react\"><a href=\"#t%C3%ADch-h%E1%BB%A3p-v%E1%BB%9Bi-react\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tích hợp với React</h1>\n<p>Ví dụ sử dụng selector và action creator</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">ConnectedComponent</span> <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      users<span class=\"token operator\">:</span> selectors<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getCurrentUsers</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      editingUser<span class=\"token operator\">:</span> selectors<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getEditingUser</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      setPagination<span class=\"token operator\">:</span> actionCreatorFactories<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setPaginationFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'USERS_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">bindActionCreators</span><span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">UsersComponent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Các component nó không cần quan tâm cái scope nào đang dùng với action và truy cập tới state bằng cách nào. Component giờ không cần quan tâm việc dữ liệu cụ thể bên trong state làm việc thế nào.</p>\n<p>Xem thêm</p>\n<ul>\n<li><a href=\"https://github.com/reactjs/reselect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reselect</a> thư viện tạo selector</li>\n<li><a href=\"https://github.com/paularmstrong/normalizr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Normalizr</a> thư viện chuẩn hóa dữ liệu JSON</li>\n</ul>\n<p><a href=\"https://techblog.appnexus.com/five-tips-for-working-with-redux-in-large-applications-89452af4fdcb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Toàn bộ vài viết</a></p>\n"}},{"node":{"title":"Xử lý tập dữ liệu lớn trong React","path":"/xu-ly-tap-du-lieu-lon-trong-react/","date":"3. October 2018","timeToRead":2,"desc":"Tình huống: bạn có một table với rất nhiều dữ liệu đổ vào, nếu bạn thấy component đó render chậm trên màn hình, đó là lúc cần tái cấu trúc","content":"<p>Chúng ta có component như sau</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ParentComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">items</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token arrow operator\">=></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">item</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Khi mà <code class=\"language-text\">ParentComponent</code> nhận được <code class=\"language-text\">props.items</code>, trước hết nó sẽ đổ tất cả dữ liệu vào trong virtual DOM, sau đó kiểm tra xem phần nào của real DOM cần cập nhập, rồi cập nhập toàn bộ trong <strong>một lần</strong>. Đó là lý do chúng ta bị <strong>delay</strong>, nó tốn thời gian cho việc tạo ra một số lượng virtual DOM rất lớn trước khi update real DOM, giả dụ có hơn 40.000 dòng dữ liệu, nó đợi tạo 40.000 cái virtual DOM trước khi đẩy hết xuống real DOM.</p>\n<p>Chúng ta muốn render <code class=\"language-text\">ParentComponent</code> sớm nhất có thể, và sau đó thêm các item từ từ. Chúng ta muốn hiển thị các item vừa có trong virtual DOM, rồi lại render tiếp. </p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    items<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">items</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">items</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">item</span> <span class=\"token arrow operator\">=></span> \n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">item</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Giải pháp ở đây là đưa toàn bộ <code class=\"language-text\">item</code> vào trong <code class=\"language-text\">state</code>, sau đó <code class=\"language-text\">render()</code> theo <code class=\"language-text\">state.items</code>. Việc cần làm là update lại <code class=\"language-text\">state.items</code> và chèn thêm item một cách từ từ. Với cách này, hàm <code class=\"language-text\">render</code> sẽ gọi khá thường xuyên, nhưng được cái nó hiển thị liền</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">recursive</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> hasMore <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">items</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">items</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      items<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span><span class=\"token property-access\">items</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">.</span><span class=\"token property-access\">items</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasMore<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">recursive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Hàm đệ quy trên nó sẽ chạy đến khi <strong>length</strong> bằng nhau. Trên mỗi lần lặp lại nó thêm một element vào mảng <code class=\"language-text\">state.items</code>. Dùng <code class=\"language-text\">setTimeout</code> để đưa thứ tự ưu tiên của nó xuống thấp nhất.</p>\n<p>Nếu thắc mắc tại sao lại gọi hàm <code class=\"language-text\">setState()</code> bên trong một hàm đệ quy</p>\n<ul>\n<li>Buộc phải dùng <code class=\"language-text\">setState</code> nếu muốn update real DOM, <code class=\"language-text\">setState</code> nó có cách xử lý riêng khi chúng ta gọi nhiều lần</li>\n<li>Ví dụ trên đang thêm 1 item một lần gọi, tùy theo nhu cầu, số lượng item có thế nhiều hơn.</li>\n<li><code class=\"language-text\">setTimeout</code> có thứ tự ưu tiên chạy cuối cùng, nên, nếu user tương tác với component đã được render, tương tác này sẽ được ưu tiên cao hơn việc render các item còn lại. User có thể bắt đầu tương tác với các item đã render mà không đợi nó show hết</li>\n<li>Nếu đã có sẵn toàn bộ các item thì ok, nếu phải đi <code class=\"language-text\">fetch</code>, dùng cách khác</li>\n<li>Nếu dùng HOC sẽ không hề làm side effect với cách này</li>\n<li>Bạn cứ test performance để kiểm tra thử nó làm nhanh hay chậm app để xác nhận</li>\n</ul>\n<p>Gọi hàm đệ quy trong <code class=\"language-text\">componentDidMount</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">recursive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>Ghi chú</strong></p>\n<p>Cách này đã kiểm tra khi render khoảng 10 đến 1500 element, thời gian tốn khoảng 2 đến 3ms.</p>\n<p>Nếu muốn tìm một giải pháp của người ta build sẵn thì dùng <a href=\"https://github.com/bvaughn/react-virtualized\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-virtualized</a></p>\n<p><a href=\"https://itnext.io/handling-large-lists-and-tables-in-react-238397854625\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài viết gốc</a></p>\n"}},{"node":{"title":"Giới thiệu React Profiler","path":"/gioi-thieu-react-profiler/","date":"19. September 2018","timeToRead":2,"desc":"Từ version React 16.5 bổ sung thêm một plugin DevTool profiler. Plugin này được dùng để thu thập các thông tin về thời gian render một component, xác định nguyên nhân làm trì trệ performance.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#thu-th%E1%BA%ADp\">Thu thập</a></li>\n<li><a href=\"#%C4%91%E1%BB%8Dc-hi%E1%BB%83u-k%E1%BA%BFt-qu%E1%BA%A3\">Đọc hiểu kết quả</a></li>\n<li><a href=\"#l%E1%BB%8Dc-commit\">Lọc commit</a></li>\n<li><a href=\"#flame-chart\">Flame chart</a></li>\n<li><a href=\"#ranked-chart\">Ranked chart</a></li>\n<li><a href=\"#component-chart\">Component Chart</a></li>\n<li><a href=\"#t%C6%B0%C6%A1ng-t%C3%A1c\">Tương tác</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"thu-thập\"><a href=\"#thu-th%E1%BA%ADp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thu thập</h2>\n<p>Trên bộ DevTools sẽ có thêm tab <strong>Profiler</strong></p>\n<p><img src=\"https://reactjs.org/static/devtools-profiler-tab-4da6b55fc3c98de04c261cd902c14dc3-acf85.png\"></p>\n<p>React-dom 16.5+ hỗ trợ thu thập dữ liệu khi chạy DEV, để dùng trong production sử dụng <code class=\"language-text\">react-dom/profiling</code>, Đọc thêm cách sử dụng ở đây <a href=\"https://fb.me/react-profiling\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://fb.me/react-profiling</a></p>\n<p>Trên màn hình vừa mở, click nút record để bắt đầu thu thập dữ liệu</p>\n<p><img src=\"https://reactjs.org/static/start-profiling-bae8d10e17f06eeb8c512c91c0153cff-acf85.png\" alt=\"record để bắt đầu thu thập dữ liệu\"></p>\n<p>Lúc này, khi một component react chạy <code class=\"language-text\">render</code>, thông tin sẽ được thu thập. Sử dụng app như bình thường, khi không muốn thu thập dữ liệu nữa, click nút <strong>stop</strong></p>\n<p><img src=\"https://reactjs.org/static/start-profiling-bae8d10e17f06eeb8c512c91c0153cff-acf85.png\" alt=\"stop record\"></p>\n<h2 id=\"đọc-hiểu-kết-quả\"><a href=\"#%C4%91%E1%BB%8Dc-hi%E1%BB%83u-k%E1%BA%BFt-qu%E1%BA%A3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đọc hiểu kết quả</h2>\n<p>Chúng ta quan tâm đến quá trình <strong>commit</strong> React component - là khi component được <strong>insert</strong>, <strong>update</strong>, hoặc <strong>remove</strong> khỏi DOM.</p>\n<p>Ở trên cùng, bên phải, để ý cái bar chart</p>\n<p><img src=\"https://reactjs.org/static/commit-selector-bd72dec045515d59be51c944e902d263-8ef72.png\"></p>\n<p>Mỗi một cột trong cái chart này đại diện cho một commit, commit đang chọn sẽ được tô đen. Độ cao của cột này tương ứng cho thời gian cần để render.</p>\n<h2 id=\"lọc-commit\"><a href=\"#l%E1%BB%8Dc-commit\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lọc commit</h2>\n<p>Thời gian thu thập dữ liệu càng lâu, ứng dụng render càng nhiều lần, sớm muộn số lượng dữ liệu quá lớn như vậy chúng ta cần phải lọc để xem nhanh kết quả cần tìm. Ví dụ ẩn đi toàn bộ commit có thời gian bé hơn giá trị ms nào đó</p>\n<p><img src=\"https://reactjs.org/filtering-commits-683b9d860ef722e1505e5e629df7ef7e.gif\"></p>\n<h2 id=\"flame-chart\"><a href=\"#flame-chart\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Flame chart</h2>\n<p><strong>Flame chart</strong> đại diện cho trạng thái của ứng trong một thời điểm commit cụ thể. Mỗi cột đại diện cho một component, kích thước và màu sắc thể hiện thời gian render component và các component con bên trong. Màu xanh thì tốn ít thời gian, màu vàng là nhiều thời gian và màu xám là không render</p>\n<p><img src=\"https://reactjs.org/static/flame-chart-3046f500b9bfc052bde8b7b3b3cfc243-acf85.png\" alt=\"Flame chart\"></p>\n<p>Ví dụ trên, commit trên tiêu tốn hết 18.4ms để render. Router tốn nhiều nhất thời gian để render: 18.4ms. Phần lớn là do phải render tất cả các component con, <code class=\"language-text\">Nav</code> (8.4ms), <code class=\"language-text\">Route</code> (7.9ms)</p>\n<p>Click vào từng cột để hiển thị chi tiết các component con</p>\n<p><img src=\"https://reactjs.org/zoom-in-and-out-39ba82394205242af7c37ccb3a631f4d.gif\" alt=\"Click vào từng cột để hiển thị chi tiết các component con\"></p>\n<p>Bên cột phải chúng ta có các thông tin như props, state, tổng số lần render.</p>\n<p><img src=\"https://reactjs.org/props-and-state-1f4d023f1a0f281386625f28df87c78f.gif\"></p>\n<p>Trong một số trường hợp, chọn vào component, chuyển qua lại giữa commit, sẽ có thông tin bổ sung tại sao component được render lại</p>\n<p><img src=\"https://reactjs.org/see-which-props-changed-cc2a8b37bbce52c49a11c2f8e55dccbc.gif\"></p>\n<h2 id=\"ranked-chart\"><a href=\"#ranked-chart\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ranked chart</h2>\n<p><strong>Ranked chart</strong> đại diện cho 1 commit. Mỗi cột trong chart là một component, các cột này được sếp theo thứ tự component nào tốn nhiều thời gian render nhất sẽ lên trên.</p>\n<p><img src=\"https://reactjs.org/static/ranked-chart-0c81347535e28c9cdef0e94fab887b89-acf85.png\"></p>\n<h2 id=\"component-chart\"><a href=\"#component-chart\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Component Chart</h2>\n<p>Để xem đã bao nhiêu lần 1 component được render. Mỗi cột là mỗi lần component được render.</p>\n<p><img src=\"https://reactjs.org/static/component-chart-d71275b42c6109e222fbb0932a0c8c09-acf85.png\"></p>\n<p>Double-click vào component này hoặc chọn component và chọn nút blue bar phải góc phải trên. Để xem thêm các thông tin khác</p>\n<p><img src=\"https://reactjs.org/see-all-commits-for-a-fiber-99cb4321ded8eb0c21ae5fc673878563.gif\"></p>\n<h2 id=\"tương-tác\"><a href=\"#t%C6%B0%C6%A1ng-t%C3%A1c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tương tác</h2>\n<p>Hiện tại đây đang trong quá trình thử nghiệm cho tính năng này, tracking nguyên nhân gây ra update.</p>\n<p><img src=\"https://reactjs.org/static/interactions-a91a39ac076b71aa7a202aaf46f8bd5a-acf85.png\"></p>\n<p>Mỗi dòng là một tương tác đã được track. Nút màu xanh bên cạnh là commit liên quan tới tương tác này.</p>\n<p>Kiểm tra một tương tác trong commit cụ thể từ <strong>flame chart</strong> và <strong>ranked chart</strong></p>\n<p><img src=\"https://reactjs.org/static/interactions-for-commit-9847e78f930cb7cf2b0f9682853a5dbc-acf85.png\"></p>\n<p><a href=\"https://github.com/facebook/react-devtools/tree/master/test/example\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source code ví dụ</a></p>\n<p><a href=\"https://react-devtools-profiler-demo.now.sh/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo</a></p>\n<p><a href=\"https://reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài gốc</a></p>\n"}},{"node":{"title":"Nâng cao tốc độ website với Chrome DevTools","path":"/nang-cao-toc-do-website-voi-chrome-dev-tools/","date":"9. July 2018","timeToRead":6,"desc":"Hướng dẫn sử dụng Chrome DevTools để phân tích và tối ưu hóa tốc độ website","content":"<!-- TOC -->\n<ul>\n<li>\n<p><a href=\"#b%C6%B0%E1%BB%9Bc-1-ki%E1%BB%83m-tra-trang-web-hi%E1%BB%87n-t%E1%BA%A1i-audits\">Bước 1: Kiểm tra trang web hiện tại (Audits)</a></p>\n<ul>\n<li><a href=\"#x%C3%A1c-%C4%91%E1%BB%8Bnh-baseline\">Xác định baseline</a></li>\n<li><a href=\"#%C4%91%E1%BB%8Dc-hi%E1%BB%83u-report\">Đọc hiểu report</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#b%C6%B0%E1%BB%9Bc-2-th%E1%BB%AD-nghi%E1%BB%87m\">Bước 2: Thử nghiệm</a></p>\n<ul>\n<li><a href=\"#b%E1%BA%ADt-text-compression\">Bật text compression</a></li>\n<li><a href=\"#gi%E1%BA%A3m-k%C3%ADch-th%C6%B0%E1%BB%9Bc-%E1%BA%A3nh\">Giảm kích thước ảnh</a></li>\n<li><a href=\"#b%E1%BB%8F-h%E1%BA%BFt-nh%E1%BB%AFng-resource-n%C3%A0o-block-vi%E1%BB%87c-render\">Bỏ hết những resource nào block việc render</a></li>\n<li><a href=\"#h%E1%BA%A1n-ch%E1%BA%BF-t%E1%BB%91i-%C4%91a-c%C3%A1c-x%E1%BB%AD-l%C3%BD-%E1%BB%9F-main-threat\">Hạn chế tối đa các xử lý ở main threat</a></li>\n</ul>\n</li>\n<li><a href=\"#t%E1%BB%95ng-k%E1%BA%BFt\">Tổng kết</a></li>\n</ul>\n<!-- /TOC -->\n<h1 id=\"bước-1-kiểm-tra-trang-web-hiện-tại-audits\"><a href=\"#b%C6%B0%E1%BB%9Bc-1-ki%E1%BB%83m-tra-trang-web-hi%E1%BB%87n-t%E1%BA%A1i-audits\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bước 1: Kiểm tra trang web hiện tại (Audits)</h1>\n<p>Bước đầu tiên này có 2 công dụng chính</p>\n<ol>\n<li>Làm thước đo cho các thay đổi đã áp dụng</li>\n<li>Gợi ý những thay đổi nào thực sự ảnh hưởng nhiều tới tốc độ</li>\n</ol>\n<p>Trong bài này tác giả sẽ sử dụng trang <a href=\"https://glitch.com/edit/#!/tony?path=server.js:1:0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://glitch.com/edit/#!/tony?path=server.js:1:0</a> để làm demo</p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/editor.png\"></p>\n<h2 id=\"xác-định-baseline\"><a href=\"#x%C3%A1c-%C4%91%E1%BB%8Bnh-baseline\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xác định baseline</h2>\n<p>Mở Chrome DevTools, chuyển qua tab <strong>Audits</strong>, nó có thể bị ẩn sau nút <strong>More Panels</strong>, có hình cái hải đăng</p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/audits.png\" alt=\"Thiết đặt chính cho baseline\"></p>\n<p>Thiết đặt như hình trên, sau đó click <strong>Run Audits</strong>, đợi nó chạy một tí sẽ có 1 cái report performance của site</p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/report.png\"></p>\n<p>Nếu thấy bất kỳ lỗi nào trên report, thử chạy trong 1 tab ẩn danh mới</p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/error.png\"></p>\n<h2 id=\"đọc-hiểu-report\"><a href=\"#%C4%91%E1%BB%8Dc-hi%E1%BB%83u-report\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đọc hiểu report</h2>\n<p>Cái số ở trên cùng là thang điểm tổng hợp, càng cao càng tốt</p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/overall.png\"></p>\n<p>Ở mục <strong>Metrics</strong> cho kết quả các cách đánh giá, ví dụ như <strong>First Contentful Paint</strong> cho biết thời gian khi màn hình bắt đầu xuất hiện nội dung cho user, một milestone quan trọng để làm hài lòng user, <strong>First CPU Idle</strong> là thời điểm mà user có thể tương tác với site như click hay input gì đó, lúc này CPU của user đã có có thể xử lý yêu cầu</p>\n<p>Hover lên mỗi metric để hiển thị phần description của nó, và click <strong>Learn More</strong> để đọc document.</p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/fmp.png\"></p>\n<p>Bên dưới Metric là một số hình screenshoot trên từng thời gian khác nhau</p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/screenshots.png\"></p>\n<p><strong>Opportunities</strong> sẽ đưa ra những tips để improve page load</p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/opportunities.png\"></p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/compression.png\"></p>\n<p><strong>Diagnostics</strong> cung cấp thêm thông tin các nhân tố tác động lên tốc độ load</p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/diagnostics.png\"></p>\n<p><strong>Passed Audits</strong> là những điều trang hiện tại làm tốt</p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/passed.png\"></p>\n<h1 id=\"bước-2-thử-nghiệm\"><a href=\"#b%C6%B0%E1%BB%9Bc-2-th%E1%BB%AD-nghi%E1%BB%87m\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bước 2: Thử nghiệm</h1>\n<p>Trong mục <strong>Oppourtunities</strong> của audit report cung cấp gợi ý để improve performance, chúng ta sẽ làm theo những gợi ý này</p>\n<h2 id=\"bật-text-compression\"><a href=\"#b%E1%BA%ADt-text-compression\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bật text compression</h2>\n<p>Top trong những điều có thể làm để improve, reduce, compress kích thước của file xuống trước khi send, giống như chúng ta zip file lại trước khi quăng vô email</p>\n<p>Check cái file dạng text này trong tab <strong>Network</strong></p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/network.png\"></p>\n<p>Click <strong>use large request rows</strong> <img src=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/large-resource-rows-button.png\"> để hiển thị nhiều thông tin hơn.</p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/largerows.png\"></p>\n<p>Tren cột <strong>Size</strong> sẽ có 2 giá trị. Giá trị ở trên là kích thước download, bên dưới là kích thước đã giải nén, nếu 2 giá trị này bằng nhau thì hiển nhiên là resource đó chưa compress trước khi gởi.</p>\n<p>Xem giá trị của <code class=\"language-text\">content-encoding</code> trong HTTP header cũng sẽ biết được resource này đã compress chưa</p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/headers.png\"></p>\n<p>Như file <code class=\"language-text\">bundle.js</code> chúng ta không thấy <code class=\"language-text\">content-encoding</code> trong Response Headers, nghĩa là file chưa compress, thường giá compress cho nó sẽ là <code class=\"language-text\">gzip</code>, <code class=\"language-text\">deflate</code>, hay <code class=\"language-text\">br</code>. Xem thêm về các <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding#Directives\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">kiểu compress này</a></p>\n<p>Giải thích đủ rồi giờ ta đi compress thôi. Mở trang ví dụ của tác giả ra</p>\n<p>File <code class=\"language-text\">server.js</code></p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/server.png\"></p>\n<p>Thêm đoạn code sau vào <code class=\"language-text\">server.js</code>. Dùng <code class=\"language-text\">app.use(compression())</code> trước <code class=\"language-text\">app.use(express.static(&#39;build&#39;))</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> compression <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'compression'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">compression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">'build'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Đợi Glitch deploy một tí. Quay lại trang demo và reload.</p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/requests.png\"></p>\n<p>File <code class=\"language-text\">bundle.js</code> lúc này đã compress</p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/gzip.png\"></p>\n<p>Chúng ta quay lại tab <strong>Audits</strong> để đánh giá kết quả, click <strong>Perform an audit</strong>, dùng các thiết đặt như trước, rồi chạy <strong>Run Audit</strong></p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/report2.png\"></p>\n<h2 id=\"giảm-kích-thước-ảnh\"><a href=\"#gi%E1%BA%A3m-k%C3%ADch-th%C6%B0%E1%BB%9Bc-%E1%BA%A3nh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giảm kích thước ảnh</h2>\n<p>Nếu user đang xài điện thoại có kích thước màn hình chỉ 500px chiều ngang thì việc load một cái hình rộng 1500px là ko thông minh lắm.</p>\n<p>Trên trang report, click <strong>Properly size images</strong> để xem những hình nào nên resize, ví dụ bên dưới có 4 hình có thể tối ưu</p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/resize.png\"></p>\n<p>Tốt nhất</p>\n<ul>\n<li>Resize lại toàn bộ ảnh trong lúc build</li>\n<li>Tạo nhiều kích thước file khác nhau trong lúc build và sử dụng <code class=\"language-text\">srcset</code> của thẻ <code class=\"language-text\">img</code>, như vậy lúc hiển thị, trình duyệt sẽ đảm nhiệm chọn file nào để phù hợp với thiết bị đang xem. <a href=\"https://developers.google.com/web/fundamentals/design-and-ux/responsive/images#relative_sized_images\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Xem thêm</a></li>\n<li>Sử dụng image CDN để tự động thay đổi kích thước của hình khi request</li>\n<li>Xem thêm <a href=\"https://images.guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">một số gợi ý này</a></li>\n</ul>\n<h2 id=\"bỏ-hết-những-resource-nào-block-việc-render\"><a href=\"#b%E1%BB%8F-h%E1%BA%BFt-nh%E1%BB%AFng-resource-n%C3%A0o-block-vi%E1%BB%87c-render\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bỏ hết những resource nào block việc render</h2>\n<p><strong>render-blocking resource</strong> là những file javascript hoặc CSS báo với trình duyệt rằng tụi tao file được load xong xui thì mày hả render nội dung trang web.</p>\n<p>Trước tiên tìm xem những resource nào có thể được load mà ko cần chạy lúc page load.</p>\n<ol>\n<li>Click <strong>Eliminate render-blocking resources</strong> để xem các resources, ví dụ ở đây là <code class=\"language-text\">lodash.js</code> và <code class=\"language-text\">jquery.js</code></li>\n<li>Ấn Control+Shift+P để mở Command Menu, gõ vào <code class=\"language-text\">Coverage</code> sau đó chọn <code class=\"language-text\">Show Coverage</code></li>\n</ol>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/commandmenu.png\"></p>\n<p>Một tab mới Coverage sẽ mở ra</p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/coverage.png\"></p>\n<ol start=\"3\">\n<li>Click <strong>Reload</strong>. Trong tab Coverage sẽ cung cấp thông tin tổng quát về việc các đoạn code trong <code class=\"language-text\">bundle.js</code>, <code class=\"language-text\">jquery.js</code>, <code class=\"language-text\">lodash.js</code> trong lúc page load thì nó sẽ được sử dụng bao nhiêu. Kết quả bên dưới cho thấy có 76% code jQuery và 30% của Lodash ko được sử dụng</li>\n</ol>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/coveragereport.png\"></p>\n<ol start=\"4\">\n<li>Click vào <code class=\"language-text\">jQuery</code>. DevTools sẽ mở ra tab Source Panel, những đoạn code nào chạy lúc page sẽ có màu xanh, màu đỏ là phần code không chạy</li>\n</ol>\n<p>Để xem chuyện gì sẽ xảy ra nếu ta không load jQuery và Lodash</p>\n<ol>\n<li>Mở tab Network</li>\n<li>Ấn Control+Shift+P</li>\n<li>Nhập <code class=\"language-text\">blocking</code> sau đó chọn <code class=\"language-text\">Show Request Blocking</code></li>\n</ol>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/blocking.png\"></p>\n<ol start=\"4\">\n<li>Click <code class=\"language-text\">Add pattern</code> <img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/addpattern.png\">, nhập <code class=\"language-text\">/libs/*</code> sau đó <code class=\"language-text\">Enter</code> để confirm</li>\n<li>Reload lại trang. File jQuery và Lodash sẽ được đánh dấu đỏ vì chúng ta ko load nó</li>\n</ol>\n<p>Xem thử kết quả trên Audit khi chúng ta xóa hẳn 2 file này</p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/report4.png\"></p>\n<h2 id=\"hạn-chế-tối-đa-các-xử-lý-ở-main-threat\"><a href=\"#h%E1%BA%A1n-ch%E1%BA%BF-t%E1%BB%91i-%C4%91a-c%C3%A1c-x%E1%BB%AD-l%C3%BD-%E1%BB%9F-main-threat\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hạn chế tối đa các xử lý ở main threat</h2>\n<p>Main threat là thời điểm mà trình duyệt xử lý trước tiên để hiển thị nội dung trang, chẳng hạn như parsing, executing HTML, CSS, Javascript.</p>\n<p>Mục tiêu ta sẽ dùng <strong>Performance</strong> panel để analyze những xử lý gì đang xảy ra ở main threat, tìm cách để defer hoặc bỏ hẳn</p>\n<ol>\n<li>Click <strong>Performance</strong> tab</li>\n<li>Chọn <strong>Capture Settings</strong> <img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/capture.png\"></li>\n<li>Thiết đặt <strong>Network</strong> ở <strong>Slow 3G</strong> và <strong>CPU</strong> xuống 6x slowdown để giả lập trang web được load ở nơi mạng chậm rì và thiết bị cùi mía.</li>\n<li>Click <strong>Reload</strong> <img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/reload.png\"></li>\n</ol>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/performance.png\"></p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/overview.png\"></p>\n<p>Expand mục <strong>User Timing</strong>, dựa trên kết quả này để đánh giá, ở đây site Tony này đăng chạy React Development mode nên tiêu tốn khá nhiều thời gian</p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/usertiming.png\"></p>\n<p>Expand mục <strong>Main</strong>, kéo xuống ở dưới cùng, do đang xử dụng framework nên những gì xảy ra ở trên thuộc về framework chúng ta sẽ không can thiệp gì được. Kết quả bên dưới cho thấy hàm <code class=\"language-text\">App</code> gọi khá nhiều lần đến <code class=\"language-text\">mineBitcoin</code></p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/mine.png\"></p>\n<p>Mở mục <strong>Bottom-Up</strong> để xem nhưng xử lý nào tiêu tốn nhiều thời gian nhất</p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/bottomup.png\"></p>\n<p>Cột <strong>Self Time</strong> hiển thị bao nhiều thời gian cho việc thực thi function. Ví dụ trên cho thấy 57% thời gian tiêu tốn ở main threat là chon function <code class=\"language-text\">maineBitcoin</code></p>\n<p>Thay đổi một tí trong source code, chuyển qua mode production, xóa hàm mineBitcoin rồi chạy lại xem kết quả</p>\n<p><img src=\"https://developers.google.com/web/tools/chrome-devtools/speed/imgs/report6.png\"></p>\n<h1 id=\"tổng-kết\"><a href=\"#t%E1%BB%95ng-k%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tổng kết</h1>\n<ul>\n<li>Luôn bắt đầu với <strong>Audit</strong>, xác lập baseline trước khi thực hiện tối ưu</li>\n<li>Mỗi lần thay đổi một thứ thôi, sau đó chạy lại Audit để ghi nhận kết quả của thay đổi</li>\n</ul>\n<p><a href=\"https://developers.google.com/web/tools/chrome-devtools/speed/get-started\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài gốc</a></p>\n"}},{"node":{"title":"Cải thiện performance của React App","path":"/cai-thien-performance-cua-react-app/","date":"1. May 2018","timeToRead":7,"desc":"Trong bài này, chúng ta cùng đi qua các bước để fix những issue liên quan đến performance thường thấy.","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#x%C3%A1c-%C4%91%E1%BB%8Bnh-c%C3%A1c-tr%C6%B0%E1%BB%9Dng-h%E1%BB%A3p-render-kh%C3%B4ng-c%E1%BA%A7n-thi%E1%BA%BFt\">Xác định các trường hợp render không cần thiết</a></li>\n<li><a href=\"#t%C3%A1ch-c%C3%A1c-component-update-th%C6%B0%E1%BB%9Dng-xuy%C3%AAn-th%C3%A0nh-c%C3%A1c-component-%C4%91%E1%BB%99c-l%E1%BA%ADp\">Tách các component update thường xuyên thành các component độc lập</a></li>\n<li><a href=\"#shouldcomponentupdate-v%C3%A0-purecomponent\"><code class=\"language-text\">shouldComponentUpdate</code> và PureComponent</a></li>\n<li><a href=\"#tr%C3%A1nh-vi%E1%BB%87c-%C4%91%C6%B0a-m%E1%BB%99t-object-m%E1%BB%9Bi-nh%C6%B0-l%C3%A0-prop\">Tránh việc đưa một object mới như là prop</a></li>\n<li><a href=\"#production\">Production</a></li>\n<li><a href=\"#code-splitting\">Code splitting</a></li>\n<li><a href=\"#thay-%C4%91%E1%BB%95i-dom-qu%C3%A1-nhi%E1%BB%81u-l%E1%BA%A7n\">Thay đổi DOM quá nhiều lần</a></li>\n<li><a href=\"#callback\">Callback</a></li>\n</ul>\n<!-- /TOC -->\n<p>Toàn bộ source app ví dụ có thể lấy <a href=\"https://github.com/ohansemmanuel/Cardie-performace\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ở đây https://github.com/ohansemmanuel/Cardie-performace</a>, khuyến khích các bạn nên tự lấy về và vọc.</p>\n<p>Chạy lên nó sẽ có như vầy</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*Yh4h7wXPOcbaDBKdVJxm-g.png\" alt=\"Cải thiện performance của React App\"></p>\n<p>Khi click vào button nó sẽ update lại thông tin nghề nghiệp</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*o-8SuFxH2Tl37JG-wSOj0g.gif\" alt=\"Cải thiện performance của React App\"></p>\n<h1 id=\"xác-định-các-trường-hợp-render-không-cần-thiết\"><a href=\"#x%C3%A1c-%C4%91%E1%BB%8Bnh-c%C3%A1c-tr%C6%B0%E1%BB%9Dng-h%E1%BB%A3p-render-kh%C3%B4ng-c%E1%BA%A7n-thi%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xác định các trường hợp render không cần thiết</h1>\n<p>Phương pháp đơn giản nhất để kiểm tra là bật nút <code class=\"language-text\">highlight update</code> trên React Dev tool.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*jfeS12BHr2dt5ooLeh5u3Q.gif\" alt=\"Cải thiện performance của React App\"></p>\n<p>Cái viền màu xanh hiển thị xung quanh component cho biết nó đang gọi render.</p>\n<p>Trong ví dụ này có thể thấy nguyên component <code class=\"language-text\">App</code> được re-render, không đúng như chúng ta mong muốn.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*ofXx-J4tr7KXXlNozuW9OA.gif\" alt=\"Cải thiện performance của React App\"></p>\n<p>Tốt nhất là đúng cái phần hiển thị thông tin nghề nghiệp gọi render.</p>\n<h1 id=\"tách-các-component-update-thường-xuyên-thành-các-component-độc-lập\"><a href=\"#t%C3%A1ch-c%C3%A1c-component-update-th%C6%B0%E1%BB%9Dng-xuy%C3%AAn-th%C3%A0nh-c%C3%A1c-component-%C4%91%E1%BB%99c-l%E1%BA%ADp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tách các component update thường xuyên thành các component độc lập</h1>\n<p>Sau khi đã bắt được component nào đang re-render không cần thiết, tách component này theo phương pháp sau</p>\n<p>Component <code class=\"language-text\">App</code> connect với redux store bằng hàm <code class=\"language-text\">connect</code>, nó nhận các props là <code class=\"language-text\">name</code>, <code class=\"language-text\">location</code>, <code class=\"language-text\">likes</code> và <code class=\"language-text\">description</code></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*EQLJ8lXEchp_USFfj2Em7A.png\" alt=\"Cải thiện performance của React App\"></p>\n<p>Khi user click cái button, cái description bị thay đổi. Nó làm cho component <code class=\"language-text\">App</code> re-render.</p>\n<p>Nhớ lại kiến thức căn bản React, khi prop hoặc state thay đổi, cây virtual DOM được update</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*rv3Y1Au-GarKtoiTJSmWRA.png\" alt=\"Cải thiện performance của React App\">\n<img src=\"https://cdn-images-1.medium.com/max/800/1*x6NfWjAOcqwoZs2GhbdTZw.png\" alt=\"Cải thiện performance của React App\">\n<img src=\"https://cdn-images-1.medium.com/max/800/1*EpSSnv8Wjql-IcrNvzvz_A.png\" alt=\"Cải thiện performance của React App\"></p>\n<p>Giờ để xử lý, chúng ta tạo một component mới, đặt là <code class=\"language-text\">Profession</code>, để render thông tin description, chúng ta cần tổ chức lại để có cây virtual DOM như thế này</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*g8w3av5rclzcX9N387nxgQ.png\" alt=\"Cải thiện performance của React App\">\n<img src=\"https://cdn-images-1.medium.com/max/1600/1*0kqtSR4WxvGy4yYBKyReIw.png\" alt=\"Cải thiện performance của React App\"></p>\n<p>Thay vì <code class=\"language-text\">&lt;App /&gt;</code> nhận prop là <code class=\"language-text\">profession</code>, chuyển trách nhiệm này cho <code class=\"language-text\">&lt;Profession /&gt;</code></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*tLbbgUgBavBm6FMpOzqL7Q.png\" alt=\"Cải thiện performance của React App\"></p>\n<p>Kết quả sau khi tách component</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*Poo-6-5-bfYQ0qYBcXoyiw.gif\" alt=\"Cải thiện performance của React App\"></p>\n<h1 id=\"shouldcomponentupdate-và-purecomponent\"><a href=\"#shouldcomponentupdate-v%C3%A0-purecomponent\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">shouldComponentUpdate</code> và PureComponent</h1>\n<p>Các bài viết liên quan đến chủ đề performance, chắc chắn sẽ nhắc đến <code class=\"language-text\">PureComponent</code>, bài này cũng không ngoại lệ.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<p>Điều gì bạn cần quan tâm khi khai báo một component là <code class=\"language-text\">PureComponent</code>? Đó là việc mất đi hàm <code class=\"language-text\">shouldComponentUpdate</code>. Về nguyên tắc nó chỉ render lại khi <code class=\"language-text\">prop</code> thay đổi</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Description</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> description <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>faint<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">I am</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> a </span><span class=\"token punctuation\">{</span>description<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Tác giả bài viết này còn chia nhỏ hơn nữa</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">Description</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> description <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">I</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Am</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">A</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profession</span></span> <span class=\"token attr-name\">profession</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>description<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*TpXci0NJ24imQqmsc7S-_A.png\" alt=\"Cải thiện performance của React App\"></p>\n<p>Chúng ta cần nhớ lại 1 lần nữa: React định nghĩa thế nào là một PureComponent?</p>\n<p>Hãy thử xem xét cách viết <code class=\"language-text\">shouldComponentUpdate</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ShouldNotUpdate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">counter</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span> <span class=\"token operator\">!==</span> nextProps<span class=\"token punctuation\">.</span><span class=\"token property-access\">children</span><span class=\"token punctuation\">;</span>    \n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">I should be rendered only 1 time. actual times rendered: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token operator\">++</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">counter</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Kết quả trả về sẽ không phải counter = 1, nghĩa là hàm render thực sự sẽ chạy rất nhiều lần, tại sao lại vậy? bởi vì <code class=\"language-text\">this.props.children !== nextProps.children</code> sẽ luôn luôn trả về <code class=\"language-text\">true</code>, React sẽ tạo ra một instance mới, 1 <strong>ReactElement mới</strong> mỗi khi render</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ShouldNotUpdate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">counter</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">I should be rendered only 1 time. actual times rendered: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token operator\">++</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">counter</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Số lần render vẫn không giảm đi, tại sao? Đọc tiếp sẽ rõ.</p>\n<h1 id=\"tránh-việc-đưa-một-object-mới-như-là-prop\"><a href=\"#tr%C3%A1nh-vi%E1%BB%87c-%C4%91%C6%B0a-m%E1%BB%99t-object-m%E1%BB%9Bi-nh%C6%B0-l%C3%A0-prop\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tránh việc đưa một object mới như là prop</h1>\n<p>Nó sẽ xảy ra tình huống là <code class=\"language-text\">prop</code> không thay đổi, nhưng React nghĩ là nó đã thay đổi, nên render lại. Ví dụ</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">I</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PureComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>faint<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">i</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// đâu đó truyền vào </span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Description</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t  value<span class=\"token operator\">:</span> <span class=\"token string\">\"i\"</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">I</span></span> <span class=\"token attr-name\">i</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Am</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">A</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profession</span></span> <span class=\"token attr-name\">profession</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">description</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*NymA8dLgtXQIHhk7AI2LzQ.png\" alt=\"Cải thiện performance của React App\"></p>\n<p>Ngay cả khi <code class=\"language-text\">&lt;I /&gt;</code> là một PureComponent, nó vẫn render khi <code class=\"language-text\">profession</code> thay đổi.</p>\n<p>Tại sao?</p>\n<p>Khi <code class=\"language-text\">&lt;Description /&gt;</code> nhận một prop mới, hàm render được gọi</p>\n<p>Khi đến đoạn này <code class=\"language-text\">&lt;I i={i} /&gt;</code>, giá trị của <code class=\"language-text\">i</code> là một object hoàn toàn mới</p>\n<p>Với <code class=\"language-text\">PureComponent</code> nó chỉ dùng <strong>shallow compare</strong> giữa prop cũ và mới, tức là <code class=\"language-text\">string</code> và <code class=\"language-text\">number</code> thì so sánh theo giá trị, còn <code class=\"language-text\">object</code> so sánh theo tham chiếu đến vùng nhớ</p>\n<p>Giá trị của <code class=\"language-text\">i</code> không khác, nhưng thực sự nó đã tham chiếu đến vùng nhớ khác</p>\n<p>Điều này cũng giải thích cho việc tại sao cách làm như thế này không được khuyến khích</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\"><span class=\"token maybe-class-name\">Render</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*do something*/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p>Function cũng là một <code class=\"language-text\">object</code>, bạn đang truyền vào một <code class=\"language-text\">object</code> mỗi lần render</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Do this, please</span>\n<span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">&lt;</span>div onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">handleClick</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"production\"><a href=\"#production\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Production</h1>\n<p>Deploy thì luôn build bằng production nhỉ, ngoài ra ở phía server nên nén lại bằng Gzip. Nếu dùng Node/Express ở backend, cài thêm module <code class=\"language-text\">compression</code> và sử dụng như Express middleware</p>\n<h1 id=\"code-splitting\"><a href=\"#code-splitting\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Code splitting</h1>\n<p>Cái này mình có hướng dẫn rồi, đọc lại <a href=\"/2018-10-07-huong-dan-lazy-load-component-react\">ở đây</a></p>\n<h1 id=\"thay-đổi-dom-quá-nhiều-lần\"><a href=\"#thay-%C4%91%E1%BB%95i-dom-qu%C3%A1-nhi%E1%BB%81u-l%E1%BA%A7n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thay đổi DOM quá nhiều lần</h1>\n<p>Có bao giờ bạn từng sử dụng một <em>component</em> nhiều lần trong app, cảm thấy app hơi lag? Animation cảm giác chạy không mượt?</p>\n<p>Khi xây các component phức tạp, bạn sẽ phải xử lý DOM một chút, khả năng sẽ vướng vào 2 issue sau</p>\n<ol>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Trigger layout</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing#avoid_layout_thrashing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Layout Thrashing</a></li>\n</ol>\n<p>Hãy chạy thử hiệu ứng đang làm cho một component <strong>Collapse</strong> với khoản vài chục cái instance, sau đó chọn 6x slowdown trên dev tool để thấy sự khác biệt, 6x slowdown là giá trị tương ứng với tốc độ khi xem trên điện thoại</p>\n<p><a href=\"https://cdn-images-1.medium.com/max/800/1*2xOju9iTPGs22U0joILHmQ.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cải thiện performance của React App</a></p>\n<p>Component <strong>Collapse</strong>, ta thường sẽ làm là thay đổi độ cao của nó</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">updateHeight</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isOpen</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOpen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">containerEl</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">height</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">contentEl</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">scrollHeight</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">containerEl</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">height</span> <span class=\"token operator\">=</span> <span class=\"token string\">'0px'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Có 2 điểm cần lưu ý</p>\n<ol>\n<li>Chúng ta thay đổi <em>height</em>, là chúng ta trigger chuyện sắp xếp lại Layout. Nếu chúng ta thay đổi <code class=\"language-text\">transform</code>, chúng ta chỉ sẽ trigger <strong>Composite</strong> và nhìn nó sẽ smooth hơn.</li>\n<li>Dòng <code class=\"language-text\">this.containerEl.style.height = ${this.contentEl.scrollHeight}px;</code> là một ví dụ điển hình của <strong>Layout Thrashing</strong>, chúng ta đọc giá trị độ cao hiện tại, rồi lấy giá trị đó update cho một đối tượng DOM, nhân số lần này lên với số lượng component <strong>Collapse</strong> sẽ là một số lần đáng quan tâm. Sẽ tốt hơn nếu chúng ta chỉ đọc một lần rồi gán giá trị một lượt luôn.</li>\n</ol>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">updateHeight</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isOpen</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">lastRAF</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">cancelAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">lastRAF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOpen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">lastRAF</span> <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// đọc</span>\n      <span class=\"token keyword\">const</span> height <span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">contentEl</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">scrollHeight</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">lastRAF</span> <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">lastRAF</span> <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// gán giá trị</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">containerEl</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">height</span> <span class=\"token operator\">=</span> height<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">lastRAF</span> <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">containerEl</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">height</span> <span class=\"token operator\">=</span> <span class=\"token string\">'0px'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Có thể sử dụng thư viện <a href=\"https://github.com/wilsonpage/fastdom\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fastdom</a> thay vì tự viết</p>\n<h1 id=\"callback\"><a href=\"#callback\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Callback</h1>\n<p>Khi attach một function vào bất kỳ event nào trong DOM, nếu có thêm <code class=\"language-text\">debounced</code> hoặc <code class=\"language-text\">throttled</code> sẽ tốt hơn, giảm tải số lần gọi đến function này đến mức thấp nhất.</p>\n<p>Cách viết rất thường thấy</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">throttle</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Nhưng tại sao không sử dụng nó trong component callback?</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UnleashedOne</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onChange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onChange</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Chúng ta đang lắng nghe tất tần tật mỗi khi có thay đổi trên <code class=\"language-text\">input</code>, như vậy thực sự có cần thiết không?</p>\n<p>Để giải quyết vấn đề trên, có thể viết lại component</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LeashedOne</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onChange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onChangeDebounce</span> <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChange</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onChangeDebounce</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onChange</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đợi user nhập xong đi rồi xử lý sự kiện, ở đây sử dụng <code class=\"language-text\">_.debounce</code>, <code class=\"language-text\">_.throttle</code> từ thư viện <strong>lodash</strong>, sự khác nhau của 2 thằng này thì đọc thêm trên docs của lodash.</p>\n<p>Nếu bị nghiện performance, bạn có thể chia sẻ thêm một số tip với mình.</p>\n<p>Tham khảo thêm </p>\n<ul>\n<li><a href=\"/2018-09-19-huong-dan-react-profiler-dev-tool\">Giới thiệu React Profiler</a></li>\n</ul>\n<p>Tài liệu tham khảo</p>\n<ul>\n<li><a href=\"https://medium.com/myheritage-engineering/how-to-greatly-improve-your-react-app-performance-e70f7cbbb5f6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/myheritage-engineering/how-to-greatly-improve-your-react-app-performance-e70f7cbbb5f6</a></li>\n<li><a href=\"https://logrocket-blog.ghost.io/death-by-a-thousand-cuts-a-checklist-for-eliminating-common-react-performance-issues/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://logrocket-blog.ghost.io/death-by-a-thousand-cuts-a-checklist-for-eliminating-common-react-performance-issues/</a></li>\n</ul>\n"}}]}}},"context":{}}