{"hash":"96c8dea8aa6d6e6f9c0c563edfb92dcd7958f442","data":{"tag":{"title":"redux","belongsTo":{"edges":[{"node":{"id":"401ee0e90bdab9f7ce4613120efed381","title":"Chỉ dẫn viết Redux sao cho chuẩn","path":"/2020-01-01-chi-dan-viet-redux-sao-cho-chuan/","date":"2020-01-01","timeToRead":15,"desc":"Đây không phải là quan điểm cá nhân, bài viết được dịch thuật từ tài liệu chính thức của Redux","content":"<!-- TOC -->\n<ul>\n<li>\n<p><a href=\"#a-b%E1%BA%AFt-bu%E1%BB%99c\">A. Bắt buộc</a></p>\n<ul>\n<li><a href=\"#ko-mutate-state\">Ko mutate state</a></li>\n<li><a href=\"#reducer-ko-%C4%91%C6%B0%E1%BB%A3c-c%C3%B3-side-effect\">Reducer ko được có side effect</a></li>\n<li><a href=\"#kh%C3%B4ng-%C4%91%C6%B0a-c%C3%A1c-gi%C3%A1-tr%E1%BB%8B-non-serialize-v%C3%A0o-trong-action-v%C3%A0-state\">Không đưa các giá trị Non-Serialize vào trong action và state</a></li>\n<li><a href=\"#ch%E1%BB%89-m%E1%BB%99t-redux-store-cho-app\">Chỉ một Redux store cho app</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#b-c%E1%BB%B1c-k%E1%BB%B3-khuy%E1%BA%BFn-kh%C3%ADch\">B. Cực kỳ khuyến khích</a></p>\n<ul>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-redux-toolkit-%C4%91%E1%BB%83-vi%E1%BA%BFt-redux-logic\">Sử dụng Redux Toolkit để viết Redux logic</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-immer-%C4%91%E1%BB%83-c%E1%BA%ADp-nh%E1%BA%ADp-gi%C3%A1-tr%E1%BB%8B-store\">Sử dụng Immer để cập nhập giá trị store</a></li>\n<li><a href=\"#c%E1%BA%A5u-tr%C3%BAc-file-v%C3%A0-th%C6%B0-m%E1%BB%A5c\">Cấu trúc file và thư mục</a></li>\n<li><a href=\"#%C4%91%C6%B0a-c%C3%A0ng-nhi%E1%BB%81u-logic-v%C3%A0-trong-reducer-c%C3%A0ng-t%E1%BB%91t\">Đưa càng nhiều logic và trong reducer càng tốt</a></li>\n<li><a href=\"#reducer-c%E1%BA%A7n-n%E1%BA%AFm-r%C3%B5-c%E1%BA%A5u-tr%C3%BAc-c%E1%BB%A7a-state\">Reducer cần nắm rõ cấu trúc của state</a></li>\n<li><a href=\"#%C4%91%E1%BA%B7t-t%C3%AAn-state-d%E1%BB%B1a-tr%C3%AAn-d%E1%BB%AF-li%E1%BB%87u-s%E1%BA%BD-l%C6%B0u\">Đặt tên state dựa trên dữ liệu sẽ lưu</a></li>\n<li><a href=\"#xem-reducer-nh%C6%B0-m%E1%BB%99t-c%E1%BB%97-m%C3%A1y-ch%E1%BB%A9a-v%C3%A0-v%E1%BA%ADn-h%C3%A0nh-state\">Xem reducer như một cỗ máy chứa và vận hành state</a></li>\n<li><a href=\"#%C4%91%C6%A1n-gi%E1%BA%A3n-h%C3%B3a-c%C3%A1c-state-ch%E1%BB%93ng-ch%C3%A9oc%C3%B3-quan-h%E1%BB%87-v%E1%BB%9Bi-nhau\">Đơn giản hóa các state chồng chéo/có quan hệ với nhau</a></li>\n<li><a href=\"#c%C3%A1c-action-n%C3%AAn-t%E1%BB%95-ch%E1%BB%A9c-nh%C6%B0-event-kh%C3%B4ng-ph%E1%BA%A3i-setter\">Các action nên tổ chức như event, không phải setter</a></li>\n<li><a href=\"#vi%E1%BA%BFt-t%C3%AAn-action-c%C3%B3-ngh%C4%A9a\">Viết tên action có nghĩa</a></li>\n<li><a href=\"#tr%C3%A1nh-dispatch-c%C3%A1c-action-m%E1%BB%99t-c%C3%A1ch-tu%E1%BA%A7n-t%E1%BB%B1\">Tránh dispatch các action một cách tuần tự</a></li>\n<li><a href=\"#k%E1%BA%BFt-n%E1%BB%91i-c%C3%A0ng-nhi%E1%BB%81u-component-%C4%91%E1%BB%83-%C4%91%E1%BB%8Dc-d%E1%BB%AF-li%E1%BB%87u-trong-store\">Kết nối càng nhiều component để đọc dữ liệu trong store</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1ch-vi%E1%BA%BFt-t%E1%BA%AFt-cho-mapdispatch-khi-d%C3%B9ng-connect\">Sử dụng cách viết tắt cho <code class=\"language-inline-text\">mapDispatch</code> khi dùng <code class=\"language-inline-text\">connect</code></a></li>\n<li><a href=\"#g%E1%BB%8Di-useselector-nhi%E1%BB%81u-l%E1%BA%A7n-trong-function-component\">Gọi <code class=\"language-inline-text\">useSelector</code> nhiều lần trong function component</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-redux-devtools\">Sử dụng Redux DevTools</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#khuy%E1%BA%BFn-kh%C3%ADch\">Khuyến khích</a></p>\n<ul>\n<li><a href=\"#gi%C3%A1-tr%E1%BB%8B-type-c%E1%BB%A7a-action-n%C3%AAn-l%C3%A0-domaineventname\">Giá trị type của action nên là <code class=\"language-inline-text\">domain/eventName</code></a></li>\n<li><a href=\"#vi%E1%BA%BFt-action-s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1ch-%C4%91%E1%BA%B7t-t%C3%AAn-chu%E1%BA%A9n-c%E1%BB%A7a-flux\">Viết action sử dụng cách đặt tên chuẩn của Flux</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-action-creator\">Sử dụng action creator</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-thunk-cho-c%C3%A1c-logic-async\">Sử dụng Thunk cho các logic async</a></li>\n<li><a href=\"#t%C3%A1ch-c%C3%A1c-logic-ph%E1%BB%A9c-t%E1%BA%A1p-ra-kh%E1%BB%8Fi-component\">Tách các logic phức tạp ra khỏi component</a></li>\n<li><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-selector-function-%C4%91%E1%BB%83-%C4%91%E1%BB%8Dc-d%E1%BB%AF-li%E1%BB%87u-trong-store\">Sử dụng selector function để đọc dữ liệu trong store</a></li>\n<li><a href=\"#tr%C3%A1nh-%C4%91%C6%B0a-state-c%E1%BB%A7a-form-v%C3%A0o-trong-redux\">Tránh đưa state của form vào trong redux</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<p>Tài liệu chính thức hướng dẫn viết redux sao cho ngon-sạch, bao gồm những cách làm được đề nghị, kinh nghiệm thực tế và những cách tiếp cận được khuyến khích.</p>\n<p>Cả phần core của Redux và các tài liệu của Redux không hề là chuẩn mực bắt buộc mọi người tuân thủ, có rất nhiều cách để sử dụng Redux, cũng như có rất nhiều cách làm <em>đúng</em> để giải quyết một vấn đề.</p>\n<h2 id=\"a-bắt-buộc\"><a href=\"#a-b%E1%BA%AFt-bu%E1%BB%99c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A. Bắt buộc</h2>\n<h3 id=\"ko-mutate-state\"><a href=\"#ko-mutate-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ko mutate state</h3>\n<p>Chỉnh sửa state là nguyên nhân gây bug thường thấy trong Redux, như không re-render, time-travel trong Redux DevTools ko hoạt động. Tuyệt đối <strong>KO tự chỉnh sửa giá trị của state</strong>, bao gồm cả trong reducer và bất kỳ chỗ nào trong source code, chỉ được phép <strong>thay thế giá trị của state</strong></p>\n<p>Có thể sử dụng những công cụ như <a href=\"https://github.com/leoasis/redux-immutable-state-invariant\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">redux-immutable-state-invariant</a>, <a href=\"https://immerjs.github.io/immer/docs/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">immer</a> để tránh việc vô tình chỉnh sửa state ngoài ý muốn.</p>\n<h3 id=\"reducer-ko-được-có-side-effect\"><a href=\"#reducer-ko-%C4%91%C6%B0%E1%BB%A3c-c%C3%B3-side-effect\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reducer ko được có side effect</h3>\n<p>Các hàm Reducer chỉ phụ thuộc vào <code class=\"language-inline-text\">state</code> và <code class=\"language-inline-text\">action</code>, chỉ tính toán và trả về giá trị mới dựa vào những tham số này. <strong>Không chạy bất kỳ logic bất đồng bộ nào (AJAX, timeout, promise), các giá trị khởi tạo một cách ngẫu nhiên Date.now, Math.random, thay đổi những giá trị bên ngoài reducer</strong></p>\n<h3 id=\"không-đưa-các-giá-trị-non-serialize-vào-trong-action-và-state\"><a href=\"#kh%C3%B4ng-%C4%91%C6%B0a-c%C3%A1c-gi%C3%A1-tr%E1%BB%8B-non-serialize-v%C3%A0o-trong-action-v%C3%A0-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Không đưa các giá trị Non-Serialize vào trong action và state</h3>\n<p><strong>Tránh dùng các giá trị non-serialize như Promise, Symbol, function, class instance vào trong state hoặc dispatch action.</strong> Điều này còn nhằm đảm bảo các công như Redux DevTool chạy đúng</p>\n<h3 id=\"chỉ-một-redux-store-cho-app\"><a href=\"#ch%E1%BB%89-m%E1%BB%99t-redux-store-cho-app\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chỉ một Redux store cho app</h3>\n<p>Với một ứng dụng, <strong>chỉ được sử dụng một Redux store, sử dụng bởi toàn bộ ứng dụng</strong>, khai báo trong file <code class=\"language-inline-text\">store.js</code></p>\n<p>Cũng không có một chỗ nào trong source được import store trực tiếp. Nó phải được truyền vào <code class=\"language-inline-text\">&lt;Provider/></code>, hoặc tham chiếu thông qua middleware như Thunk.</p>\n<h2 id=\"b-cực-kỳ-khuyến-khích\"><a href=\"#b-c%E1%BB%B1c-k%E1%BB%B3-khuy%E1%BA%BFn-kh%C3%ADch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>B. Cực kỳ khuyến khích</h2>\n<h3 id=\"sử-dụng-redux-toolkit-để-viết-redux-logic\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-redux-toolkit-%C4%91%E1%BB%83-vi%E1%BA%BFt-redux-logic\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Redux Toolkit để viết Redux logic</h3>\n<p><a href=\"https://redux.js.org/redux-toolkit/overview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redux Toolkit</a> là bộ công cụ chính thức của chúng tôi (Redux team) để phát triển redux một cách hiệu quả, chuẩn để viết logic redux của chúng tôi.</p>\n<p>Nó bao gồm các hàm để làm việc với các trường hợp phổ biến nhất của Redux, bao gồm cài đặt store, khai báo reducer, các thư viện được sử dụng rộng rãi trong Redux như Redux Thunk, Reselect để viết các selector function.</p>\n<h3 id=\"sử-dụng-immer-để-cập-nhập-giá-trị-store\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-immer-%C4%91%E1%BB%83-c%E1%BA%ADp-nh%E1%BA%ADp-gi%C3%A1-tr%E1%BB%8B-store\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Immer để cập nhập giá trị store</h3>\n<p>Viết update cho store đôi khi rất mệt mỏi, có thể sử dụng thêm công cụ hỗ trợ <a href=\"https://immerjs.github.io/immer/docs/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">immerjs</a>.</p>\n<h3 id=\"cấu-trúc-file-và-thư-mục\"><a href=\"#c%E1%BA%A5u-tr%C3%BAc-file-v%C3%A0-th%C6%B0-m%E1%BB%A5c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cấu trúc file và thư mục</h3>\n<p>Về cơ bản Redux <em>không quan tâm cách bạn tổ chức file và thư mục</em>. Tuy nhiên, trong thực tế việc đặt các logic gần nhau giúp việc cập nhập code nhanh hơn.</p>\n<p>Khuyến khích sử dụng cách tiếp cận \"feature folder\" hoặc <a href=\"https://github.com/erikras/ducks-modular-redux\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cách làm ducks</a> (tất cả những logic cho feature nằm trong một file duy nhất)</p>\n<p>Một cấu trúc thư mục cơ bản sẽ gồm</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">-/src\n--/index.tsx\n--/app\n---/store.ts\n---/rootReducer.ts\n---/App.tsx\n--/common\n--/features\n---/todos\n----/todosSlice.ts\n----/Todos.tsx</code></pre></div>\n<h3 id=\"đưa-càng-nhiều-logic-và-trong-reducer-càng-tốt\"><a href=\"#%C4%91%C6%B0a-c%C3%A0ng-nhi%E1%BB%81u-logic-v%C3%A0-trong-reducer-c%C3%A0ng-t%E1%BB%91t\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đưa càng nhiều logic và trong reducer càng tốt</h3>\n<p>Nếu có thể, cố gắng đưa càng nhiều logic hoặc tính toán để có một state mới vào trong reducer càng tốt, không nên đưa vào chỗ xử lý tiền dữ liệu như các function handler click. Việc này giúp logic dễ test hơn, tránh lỗi.</p>\n<p>Redux không thực sự quan tâm giá trị mới của state được tính toán bên trong reducer hay trong action creation. Ví dụ như Todo App, việc <em>toggle todo</em> sẽ cập nhập lại mảng <code class=\"language-inline-text\">todos</code> trong store. Có thể tính toán mảng <code class=\"language-inline-text\">todos</code> mới ở cả action và reducer</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Click handler:</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onTodoClicked</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"todos/toggleTodo\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// tính toán ở Reducer:</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"todos/toggleTodo\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> todo<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>todo<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Tính toán ở action creation:</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onTodoClicked</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">id</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newTodos <span class=\"token operator\">=</span> todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> todo\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>todo<span class=\"token punctuation\">,</span> id <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'todos/toggleTodo'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">todos</span><span class=\"token operator\">:</span> newTodos <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Reducer:</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"todos/toggleTodo\"</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Khuyến khích làm việc này ở reducer vì những nguyên nhân sau</p>\n<ul>\n<li>Test ở Reducer sẽ dễ hơn vì nó là pure function, chỉ cần gọi <code class=\"language-inline-text\">const result = reducer(testState, action)</code> và đưa vào kết quả bạn expect.</li>\n<li>Thay đổi giá trị state luôn tuân theo quy định, không chỉnh sửa-chỉ thay thế. Rõ ràng là việc này sẽ trực quan hơn trong reducer, những nếu ngoài reducer, chúng ta dễ vô tình chỉnh sửa ngoài ý muốn</li>\n<li>Time-travel debug cho phép chúng ta <strong>undo</strong> một dispatch action, rồi <strong>redo</strong> thậm chí thay thế bằng một action khác. Debug sẽ dễ hơn nếu chúng ta đưa logic đó vào reducer</li>\n<li>Khi áp dụng nguyên tắc này, chúng biết được khi cần thay đổi, và nơi state bị thay đổi chắc chắn là trong reducer chứ không đâu khác.</li>\n</ul>\n<p>Có những ngoại lệ có thể tính toán trước, như khởi tạo một ID, nhưng nên tránh là tốt nhất.</p>\n<h3 id=\"reducer-cần-nắm-rõ-cấu-trúc-của-state\"><a href=\"#reducer-c%E1%BA%A7n-n%E1%BA%AFm-r%C3%B5-c%E1%BA%A5u-tr%C3%BAc-c%E1%BB%A7a-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reducer cần nắm rõ cấu trúc của state</h3>\n<p>Các reducer do bạn viết, khi trả về một giá trị đã tính toán của state, phải viết cụ thể là trả về giá trị gì, tránh sử dụng <em>spread/blind return</em> như sau <code class=\"language-inline-text\">return action.payload</code> (blind return), <code class=\"language-inline-text\">return {...state, ...action.payload}</code> (spread return). Vì như vậy, nó sẽ phụ thuộc giá trị truyền vào lúc dispatch action phải đúng với cấu trúc ban đầu. Nếu vô tình dữ liệu này không đúng cấu trúc sẽ có bug.</p>\n<h3 id=\"đặt-tên-state-dựa-trên-dữ-liệu-sẽ-lưu\"><a href=\"#%C4%91%E1%BA%B7t-t%C3%AAn-state-d%E1%BB%B1a-tr%C3%AAn-d%E1%BB%AF-li%E1%BB%87u-s%E1%BA%BD-l%C6%B0u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đặt tên state dựa trên dữ liệu sẽ lưu</h3>\n<p>Object truyền vào cho <code class=\"language-inline-text\">combineReducers</code> sẽ là tên key trả về trong state. Tránh sử dụng từ <code class=\"language-inline-text\">reducer</code> ,</p>\n<p>Ko nên có một object state như thế này</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">usersReducer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">postsReducer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nên</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">users</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">posts</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"xem-reducer-như-một-cỗ-máy-chứa-và-vận-hành-state\"><a href=\"#xem-reducer-nh%C6%B0-m%E1%BB%99t-c%E1%BB%97-m%C3%A1y-ch%E1%BB%A9a-v%C3%A0-v%E1%BA%ADn-h%C3%A0nh-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Xem reducer như một cỗ máy chứa và vận hành state</h3>\n<p>Rất nhiều reducer của redux được viết một cách không ràng buộc như thế này, kiểm tra action, tính toán giá trị state mới mà không hề phụ thuộc tới state hiện tại. Có những trường hợp giá trị của một state phụ thuộc vào giá trị state khác, nếu không kiểm tra trước khi cập nhập, có thể dẫn đến bug</p>\n<h3 id=\"đơn-giản-hóa-các-state-chồng-chéocó-quan-hệ-với-nhau\"><a href=\"#%C4%91%C6%A1n-gi%E1%BA%A3n-h%C3%B3a-c%C3%A1c-state-ch%E1%BB%93ng-ch%C3%A9oc%C3%B3-quan-h%E1%BB%87-v%E1%BB%9Bi-nhau\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đơn giản hóa các state chồng chéo/có quan hệ với nhau</h3>\n<p>Rất nhiều ứng dụng cần cache các dữ liệu phức tạp trong store, dữ liệu thường có quan hệ chồng chéo trong API và phụ thuộc vào nhiều entities khác nhau (như quan hệ giữa dữ liệu Users, Posts, Comments)</p>\n<p>Khuyến khích nên lưu dữ liệu trong store ở dạng <a href=\"https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">căn bản nhất</a>. Như vậy khi nhìn vào có thể dễ dàng biết được dựa vào ID của chúng</p>\n<h3 id=\"các-action-nên-tổ-chức-như-event-không-phải-setter\"><a href=\"#c%C3%A1c-action-n%C3%AAn-t%E1%BB%95-ch%E1%BB%A9c-nh%C6%B0-event-kh%C3%B4ng-ph%E1%BA%A3i-setter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các action nên tổ chức như event, không phải setter</h3>\n<p>Chúng ta có thể truyền bất cứ giá trị gì cho <code class=\"language-inline-text\">action.type</code>, thí dụ như <code class=\"language-inline-text\">\"users/update\"</code>, <code class=\"language-inline-text\">\"users/updated\"</code>, <code class=\"language-inline-text\">\"upload/progress\"</code>, <code class=\"language-inline-text\">\"users/setUserName\"</code>. Không sai nhưng khuyến khích nên diễn tả các <code class=\"language-inline-text\">action.type</code> này như một event, hơn là các <code class=\"language-inline-text\">setter</code> như vậy. Nếu diễn đạt theo kiểu setter như vậy thường dẫn tới quá nhiều action type, quá nhiều dispatcher</p>\n<h3 id=\"viết-tên-action-có-nghĩa\"><a href=\"#vi%E1%BA%BFt-t%C3%AAn-action-c%C3%B3-ngh%C4%A9a\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Viết tên action có nghĩa</h3>\n<p><code class=\"language-inline-text\">action.type</code> phục vụ 2 mục đích</p>\n<ul>\n<li>reducer sẽ kiểm tra giá trị type để tính toán</li>\n<li>hiển thị trên công cụ redux devtool để chúng ta theo dõi</li>\n</ul>\n<p>Tiếp cận action như cơ chế <strong>event</strong>, tên này này không cần ràng buộc với một trường cụ thể nào trong store, đặt tên sao để khi đọc vào chúng ta có thể hiểu được chuyện gì đang diễn ra trên ứng dụng (thông qua công cụ redux devtool). Tránh những cái tên quá chung chung như <code class=\"language-inline-text\">SET_DATA</code> hay <code class=\"language-inline-text\">UPDATE_STORE</code>.</p>\n<h3 id=\"tránh-dispatch-các-action-một-cách-tuần-tự\"><a href=\"#tr%C3%A1nh-dispatch-c%C3%A1c-action-m%E1%BB%99t-c%C3%A1ch-tu%E1%BA%A7n-t%E1%BB%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tránh dispatch các action một cách tuần tự</h3>\n<p>Tránh <code class=\"language-inline-text\">dispatch</code> nhiều action cùng lúc để thực hiện một tác vụ nào đó. Không sai, nhưng kết quả là việc update UI rất tiêu tốn công sức của trình duyệt, đôi khi có những state không truy xuất được ở một vài logic.</p>\n<h3 id=\"kết-nối-càng-nhiều-component-để-đọc-dữ-liệu-trong-store\"><a href=\"#k%E1%BA%BFt-n%E1%BB%91i-c%C3%A0ng-nhi%E1%BB%81u-component-%C4%91%E1%BB%83-%C4%91%E1%BB%8Dc-d%E1%BB%AF-li%E1%BB%87u-trong-store\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết nối càng nhiều component để đọc dữ liệu trong store</h3>\n<p>Càng nhiều component kết nối vào store sẽ giúp hiệu năng update UI cải thiện, do biết được component nào cần và không cần update.</p>\n<p>Có thể kết nối bằng <code class=\"language-inline-text\">connect</code> hoặc <code class=\"language-inline-text\">useSelector</code></p>\n<h3 id=\"sử-dụng-cách-viết-tắt-cho-mapdispatch-khi-dùng-connect\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1ch-vi%E1%BA%BFt-t%E1%BA%AFt-cho-mapdispatch-khi-d%C3%B9ng-connect\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng cách viết tắt cho <code class=\"language-inline-text\">mapDispatch</code> khi dùng <code class=\"language-inline-text\">connect</code></h3>\n<p><a href=\"https://react-redux.js.org/using-react-redux/connect-mapdispatch#defining-mapdispatchtoprops-as-an-object\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sử dụng cách viết tắt cho <code class=\"language-inline-text\">mapDispatch</code> khi dùng <code class=\"language-inline-text\">connect</code></a> nhằm đơn giản hóa code. Gần như chưa bao giờ cần phải viết <code class=\"language-inline-text\">mapDispatch</code> như một function.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">,</span> decrement<span class=\"token punctuation\">,</span> reset<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./counterActions\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Redux tự động dùng dispatch</span>\n<span class=\"token comment\">// khi bạn truyền vào là một object</span>\n<span class=\"token keyword\">const</span> actionCreators <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  increment<span class=\"token punctuation\">,</span>\n  decrement<span class=\"token punctuation\">,</span>\n  reset\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapState<span class=\"token punctuation\">,</span> actionCreators<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// or</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  mapState<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> increment<span class=\"token punctuation\">,</span> decrement<span class=\"token punctuation\">,</span> reset <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"gọi-useselector-nhiều-lần-trong-function-component\"><a href=\"#g%E1%BB%8Di-useselector-nhi%E1%BB%81u-l%E1%BA%A7n-trong-function-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gọi <code class=\"language-inline-text\">useSelector</code> nhiều lần trong function component</h3>\n<p>Khi sử dụng hook <code class=\"language-inline-text\">useSelector</code>, khuyến khích dùng nhiều lần để lấy nhiều phần dữ liệu khác nhau, thay vì lấy một cục dữ liệu lớn đã bao gồm các dữ liệu nhỏ hơn bên trong. Không giống với <code class=\"language-inline-text\">mapState</code>, <code class=\"language-inline-text\">useSelector</code> không yêu cầu trả về object, sử dụng selector để lấy những đơn vị dữ liệu nhỏ hơn bên trong store sẽ giúp ít cho việc render nhiều lần.</p>\n<h3 id=\"sử-dụng-redux-devtools\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-redux-devtools\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Redux DevTools</h3>\n<p>Học cách cài đặt và sử dụng thuần thục <a href=\"https://github.com/zalmoxisus/redux-devtools-extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redux DevTool</a>, nó sẽ cho phép chúng ta</p>\n<ul>\n<li>Xem lịch sử dispatch action</li>\n<li>Nội dung của từng action</li>\n<li>State cuối cùng sau khi action được dispatch</li>\n<li>Sự khác nhau của state trước và sau một action</li>\n<li>Action đã được dispatch từ đâu</li>\n</ul>\n<h2 id=\"khuyến-khích\"><a href=\"#khuy%E1%BA%BFn-kh%C3%ADch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khuyến khích</h2>\n<h3 id=\"giá-trị-type-của-action-nên-là-domaineventname\"><a href=\"#gi%C3%A1-tr%E1%BB%8B-type-c%E1%BB%A7a-action-n%C3%AAn-l%C3%A0-domaineventname\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Giá trị type của action nên là <code class=\"language-inline-text\">domain/eventName</code></h3>\n<p>Trước đây tài liệu Redux có đề cập và sử dụng tên như thế này <code class=\"language-inline-text\">SCREAMING_SNAKE_CASE</code> để khai báo action type, ví dụ như <code class=\"language-inline-text\">ADD_TODO</code> và <code class=\"language-inline-text\">INCREMENT</code>, cách này sẽ khớp với cách đặt biến hằng số trong đa số các ngôn ngữ lập trình. Tuy nhiên viết hoa hết như vậy hơi khó đọc.</p>\n<p>Cộng đồng lập trình viên áp dụng một cách đặt tên khác, bắt đầu là <code class=\"language-inline-text\">feature</code> hoặc <code class=\"language-inline-text\">domain</code> nơi action này thuộc về và theo sau là tên của kiểu action. Ngoài ra còn có nhiều cách khác như <code class=\"language-inline-text\">\"[Domain] Action Type\"</code> hay <code class=\"language-inline-text\">\"[Login Page] Login\"</code>, <code class=\"language-inline-text\">\"domain:action\"</code></p>\n<p>Hàm <code class=\"language-inline-text\">createSlice</code> trong Redux Toolkit tạo ra một action type như sau <code class=\"language-inline-text\">\"domain/action\"</code>, ví dụ <code class=\"language-inline-text\">todos/addTodo</code>. Chúng tôi khuyến khích sử dụng <code class=\"language-inline-text\">domain/action</code> cho dễ đọc.</p>\n<h3 id=\"viết-action-sử-dụng-cách-đặt-tên-chuẩn-của-flux\"><a href=\"#vi%E1%BA%BFt-action-s%E1%BB%AD-d%E1%BB%A5ng-c%C3%A1ch-%C4%91%E1%BA%B7t-t%C3%AAn-chu%E1%BA%A9n-c%E1%BB%A7a-flux\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Viết action sử dụng cách đặt tên chuẩn của Flux</h3>\n<p><em>Flux Architechure</em> chỉ yêu cầu mỗi action object phải có trường <code class=\"language-inline-text\">type</code> và không có bất cứ ràng buộc nào khác, từ cách đặt tên cũng như trường nào nên đưa vào. Để đảm bảo nhất quán, Andrew Clark viết ra một bộ <a href=\"https://github.com/redux-utilities/flux-standard-action\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flux Standard Actions</a> để chuẩn hóa. Tóm tắt lại bộ nội dung này, action nên là</p>\n<ul>\n<li>Luôn đặt dữ liệu trong trường <code class=\"language-inline-text\">payload</code></li>\n<li>Thêm trường <code class=\"language-inline-text\">meta</code> cho các thông tin khác</li>\n<li>Thêm trường <code class=\"language-inline-text\">error</code> cho các action báo lỗi</li>\n</ul>\n<h3 id=\"sử-dụng-action-creator\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-action-creator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng action creator</h3>\n<p>Thuật ngữ <strong>Action creator</strong> có nguồn gốc từ cách tiếp cận của <em>Flux Architechure</em>, action creator <strong>không bắt buộc</strong>, các component và logic có thể gọi trực tiếp <code class=\"language-inline-text\">dispatch({ type: \"some/action\"})</code> (action object được truyền dạng inline).</p>\n<p>Tuy nhiên, sử dụng action creator đảm bảo tính nhất quán, đặc biệt phù hợp khi cần chuẩn bị một dữ liệu hoặc logic cho action (thí dụ như khởi tạo một giá trị ID không trùng lặp).</p>\n<p><strong>Khuyến khích sử dụng action creator</strong>. Tuy nhiên, thay vì viết tay, bạn nên sử dụng hàm <code class=\"language-inline-text\">createSlice</code> trong bộ Redux Toolkit, nó sẽ giúp tạo một action creator và action type tự động</p>\n<h3 id=\"sử-dụng-thunk-cho-các-logic-async\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-thunk-cho-c%C3%A1c-logic-async\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng Thunk cho các logic async</h3>\n<p>Redux được thiết kế để có thể mở rộng và middleware API được tạo ra cho phép các dạng async logic khác khau có thể cài cắm vào trong Redux store. Bằng cách đó, bạn không cần bắt buộc phải học các thư viện cụ thể nào đó như RxJS nếu không phù hợp với nhu cầu thực tế.</p>\n<p>Kết quả cả khá nhiều middleware addon được tạo ra cho Redux và tạo ra không ít bối rối cũng như câu hỏi về nên sử dụng middleware nào.</p>\n<p>Chúng tôi thực sự khuyến khích sử dụng <a href=\"https://github.com/reduxjs/redux-thunk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redux Thunk</a> như mặc định, nó có thể giải quyết hầu hết các trường hợp. Đồng thời sử dụng cú pháp <code class=\"language-inline-text\">async/await</code> trong thunk rất dễ đọc.</p>\n<p>Nếu bạn có như cầu sử dụng một workflow async thực sự phức tạp như cancel, debouncing, chạy logic khau khi action được dispatch, <strong>thread chạy ngầm</strong> có thể cân nhắc sử dụng các middleware như Redux-Saga và Redux-Observable</p>\n<h3 id=\"tách-các-logic-phức-tạp-ra-khỏi-component\"><a href=\"#t%C3%A1ch-c%C3%A1c-logic-ph%E1%BB%A9c-t%E1%BA%A1p-ra-kh%E1%BB%8Fi-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tách các logic phức tạp ra khỏi component</h3>\n<p>Chúng tôi khuyến nghị nên đưa các logic phức tạp ra khỏi component, theo tư tưởng của cách làm <em>container/presentational</em>, càng nhiều component chỉ nhận prop và hiển thị UI càng tốt, đồng thời khi phải làm việc với các logic bất tuần tự (async) bên trong component rất khó để bảo trì sau này.</p>\n<p>Tuy nhiên, sử dụng React hook có vẻ như dễ dàng hơn trong việc quản lý các logic kiểu như fetch dữ liệu trực tiếp trong component và có thể thay thế bằng thunk trong vài trường hợp</p>\n<h3 id=\"sử-dụng-selector-function-để-đọc-dữ-liệu-trong-store\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-selector-function-%C4%91%E1%BB%83-%C4%91%E1%BB%8Dc-d%E1%BB%AF-li%E1%BB%87u-trong-store\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng selector function để đọc dữ liệu trong store</h3>\n<p>Selector function là công cụ mạnh mẽ đề đọc các giá trị trong store. Những thư viện như Reselect cho tạo và lưu trữ các selector function, chỉ tính toán lại kết quả nếu cần thiết, là một đặc tính quan trọng để cải thiện hiệu năng.</p>\n<p>Khuyến khích sử dụng các selector function và lưu lại kết quả đọc được từ store bất cứ khi nào có thể, tạo các selector function này bằng Reselect</p>\n<p>Tuy nhiên, cũng không nhất thiết <strong>bắt buộc phải</strong> viết selector function cho tất cả các giá trị trong state. Cân nhắc các trường hay cần truy xuất và cập nhập cũng như lợi ích mang lại khi sử dụng các selector function</p>\n<h3 id=\"tránh-đưa-state-của-form-vào-trong-redux\"><a href=\"#tr%C3%A1nh-%C4%91%C6%B0a-state-c%E1%BB%A7a-form-v%C3%A0o-trong-redux\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tránh đưa state của form vào trong redux</h3>\n<p>Hầu như như state của form ko nên nằm trong Redux. Dữ liệu này không thực sự phải <em>global</em>, ko cần được cache, không được sử dụng bởi nhiều component cùng lúc. Connect form vào redux cũng dẫn đến chuyện dispatch action trên tất cả các sự kiện thay đổi trong form, nó sẽ làm hiệu năng giảm trầm trọng và không mang lại nhiều hiệu quả.</p>\n<p>Chỉ nên dữ state của form trong component và đưa toàn bộ giá trị lên store sau khi user submit form.</p>\n<p>Chỉ duy nhất trường hợp đưa form state vào redux là hợp lý khi viết component như WYSIWYG với tính năng live preview trên các thuộc tính. Còn lại đa phần không cần thiết.</p>\n<p><a href=\"https://redux.js.org/style-guide/style-guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://redux.js.org/style-guide/style-guide/</a></p>\n","cover_image":""}},{"node":{"id":"e203c404a557077a91fd240b5e20bd9e","title":"Sử dụng Flow để check type trong React Redux","path":"/2018-09-13-huong-dan-su-dung-flow-voi-react-redux/","date":"2018-09-13","timeToRead":4,"desc":"Chúng ta sẽ không nói nhiều cách sử dụng Redux trong bài này, các bạn có thể xem các bài trước, ở đây mình chỉ đi đến vấn đề đưa Flow vào để check type trong Redux","content":"<p><em>Bài viết mang tính chất tham khảo, hiện tại đội ngũ Facebook đã bỏ rơi Flow để theo TypeScript <a href=\"https://github.com/facebook/jest/pull/7554\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/facebook/jest/pull/7554</a></em></p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#constants\">Constants</a></li>\n<li><a href=\"#actions\">Actions</a></li>\n<li><a href=\"#reducer\">Reducer</a></li>\n</ul>\n<!-- /TOC -->\n<h1 id=\"constants\"><a href=\"#constants\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Constants</h1>\n<p>constants/actionTypes.js</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* @flow */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">PLAY</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'PLAY'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">PAUSE</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'PAUSE'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">STOP</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'STOP'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">BACKWARD</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'BACKWARD'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">FORWARD</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'FORWARD'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">UPDATE_TIME</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'UPDATE_TIME'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SELECT_TRACK</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'SELECT_TRACK'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chuyện này có hơi dư thừa vì chúng ta biết chắc chắn các hằng số này sẽ luôn là <code class=\"language-inline-text\">string</code>, có bao giờ chúng ta lại đi đổi giá trị trong constants</p>\n<p>Flow cho phép chúng ta khai báo các type sau:</p>\n<ul>\n<li><strong>string</strong></li>\n<li><strong>number</strong></li>\n<li><strong>boolean</strong></li>\n<li><strong>Function</strong></li>\n<li><strong>Array</strong></li>\n<li><strong>Object</strong></li>\n<li><strong>any</strong></li>\n<li><strong>mixed</strong></li>\n<li><strong>void</strong></li>\n</ul>\n<p>Nếu biến có thể <code class=\"language-inline-text\">null</code>, tức không bắt buộc thì thêm dấu <strong>?</strong> vào trước, ?string, ?number, ?boolean</p>\n<h1 id=\"actions\"><a href=\"#actions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Actions</h1>\n<p>playerActions.js </p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">PLAY</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">PAUSE</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">STOP</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">BACKWARD</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">FORWARD</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">UPDATE_TIME</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">SELECT_TRACK</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'constants/actionTypes'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">PLAY</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">PAUSE</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">STOP</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">backward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">BACKWARD</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">FORWARD</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">UPDATE_TIME</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">selectTrack</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">track</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">SELECT_TRACK</span><span class=\"token punctuation\">,</span> track <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Với những function thế này, chúng ta phải chỉ định kiểu params truyền vào và kiểu return, mỗi một method chúng ta định nghĩa ra một custom type để sử dụng</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type PlayerAction <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  track<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Track<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Có thể thấy Track cũng là một custom type khác mà chúng ta định nghĩa ở đâu đó rồi import vào như một module</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type Track <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">artistId</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">bucket</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Chúng ta sửa lại cái playerActions.js ở trên với Flow</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* @flow */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">PLAY</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">PAUSE</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">STOP</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">BACKWARD</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">FORWARD</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">UPDATE_TIME</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">SELECT_TRACK</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'constants/actionTypes'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> type PlayerAction <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  currentTime<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  track<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Track<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Import Track type from player, defines the properties a Track object</span>\n<span class=\"token comment\">// can have.</span>\n<span class=\"token keyword\">import</span> type <span class=\"token punctuation\">{</span> Track <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'reducers/player'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> PlayerAction<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">PLAY</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> PlayerAction <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">PAUSE</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> PlayerAction <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">STOP</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">backward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> PlayerAction <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">BACKWARD</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> PlayerAction <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">FORWARD</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> PlayerAction <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">UPDATE_TIME</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">selectTrack</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">track</span><span class=\"token operator\">:</span> Track</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> PlayerAction <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">SELECT_TRACK</span><span class=\"token punctuation\">,</span> track <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"reducer\"><a href=\"#reducer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reducer</h1>\n<p>Một khi đã quen thuộc với cách định nghĩa type cho hàm như trên thì chúng ta sẽ dễ dàng chỉnh sửa lại reducer thôi, vì nó cũng tương tự.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* @flow */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">PLAY</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">PAUSE</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">STOP</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">BACKWARD</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">FORWARD</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">UPDATE_TIME</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">SELECT_TRACK</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'constants/actionTypes'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Import the PlayerAction type form the actions/playerActions.js file, much</span>\n<span class=\"token comment\">// like we imported the Track type into our action previously.</span>\n<span class=\"token keyword\">import</span> type <span class=\"token punctuation\">{</span> PlayerAction <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'actions/playerActions'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> type Track <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">artistId</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">bucket</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create a type alias called Dictionary. This will allow us to define data</span>\n<span class=\"token comment\">// that follows the model, a bit superfluous for this example, but good to</span>\n<span class=\"token comment\">// understand how it works:</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   key: value</span>\n<span class=\"token comment\">// }</span>\ntype Dictionary<span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span><span class=\"token punctuation\">,</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// In our PlayerState definition we're also going to</span>\n<span class=\"token comment\">// define an instance of the Dictionary type</span>\n<span class=\"token comment\">// where the key int he object is a number, and</span>\n<span class=\"token comment\">// the value is of type Track.</span>\n<span class=\"token keyword\">export</span> type PlayerState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">tracks</span><span class=\"token operator\">:</span> Dictonary<span class=\"token operator\">&lt;</span>number<span class=\"token punctuation\">,</span> Track<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">currentTrackId</span><span class=\"token operator\">:</span> <span class=\"token operator\">?</span>number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">currentTime</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">playing</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Declare our initial player state which follows our PlayerState type.</span>\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">initialState</span><span class=\"token operator\">:</span> PlayerState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">tracks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">currentTrackId</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">currentTime</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">playing</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// This helper method will return the id of the next track</span>\n<span class=\"token comment\">// in our playlist. It receives a track dictionary from</span>\n<span class=\"token comment\">// the state, and the current track id. It maps out the</span>\n<span class=\"token comment\">// data to an array, and finds the next sequential index.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getNextTrackId</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">tracks</span><span class=\"token operator\">:</span> Dictonary<span class=\"token operator\">&lt;</span>Track<span class=\"token punctuation\">,</span> number<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">currentTrackId</span><span class=\"token operator\">:</span> number</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> trackIds <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>tracks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> nextTrackIndex <span class=\"token operator\">=</span> trackIds<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>currentTrackId<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextTrackIndex <span class=\"token operator\">>=</span> tracks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    nextTrackIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> tracksIds<span class=\"token punctuation\">[</span>nextTrackIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// This helper method will return the id of the</span>\n<span class=\"token comment\">// previous track in our playlist. It works exactly</span>\n<span class=\"token comment\">// like the previous helper function.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getPreviousTrackId</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">tracks</span><span class=\"token operator\">:</span> Dictonary<span class=\"token operator\">&lt;</span>Track<span class=\"token punctuation\">,</span> number<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">currentTrackId</span><span class=\"token operator\">:</span> number</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> trackIds <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>tracks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> nextTrackIndex <span class=\"token operator\">=</span> trackIds<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>currentTrackId<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextTrackIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    nextTrackIndex <span class=\"token operator\">=</span> trackIds<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> trackIds<span class=\"token punctuation\">[</span>nextTrackIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// This is our reducer. There's nothing special to call out</span>\n<span class=\"token comment\">// here except that we are declaring our two input types</span>\n<span class=\"token comment\">// of PlayerState and PlayerAction, and that we must</span>\n<span class=\"token comment\">// return a valid instance of PlayerState.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">player</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> PlayerState <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">action</span><span class=\"token operator\">:</span> PlayerAction</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> PlayerState <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">PLAY</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">playing</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">PAUSE</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">playing</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">STOP</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">playing</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">currentTime</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">BACKWARD</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">currentTime</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">currentTrackId</span><span class=\"token operator\">:</span> <span class=\"token function\">getPreviousTrackId</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>tracks<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">.</span>currentTrackId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">FORWARD</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">currentTime</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">currentTrackId</span><span class=\"token operator\">:</span> <span class=\"token function\">getNextTrackId</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>tracks<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">.</span>currentTrackId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">UPDATE_TIME</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">currentTime</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>currentTime<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">SELECT_TRACK</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">currentTime</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">currentTrackId</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>track<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Một lợi ích của việc define type mà mình rất thích là nó sẽ có cái hint trên IDE mỗi khi mình dùng gọi đến hàm hay params đó.</p>\n<p><a href=\"/2018-09-10-huong-dan-lam-viec-voi-flow-react-type-checking\">Đọc thêm: Tại sao sử dụng Flow, và sử dụng Flow như thế nào trong React</a></p>\n<p><a href=\"https://medium.com/@cdebotton/redux-and-flowtype-69ff1dd09036\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tài liệu tham khảo</a></p>\n","cover_image":""}},{"node":{"id":"72bc56d7c8b93c398d09bb2de77cd1e8","title":"Một số ứng dụng của middleware","path":"/2018-06-21-huong-dan-mot-so-ung-dung-cua-middleware/","date":"2018-06-21","timeToRead":5,"desc":"Tiếp theo bài trước về middleware, ứng dụng với các trường hợp thực tế","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#%C4%91%C3%B3ng-g%C3%B3i-c%C3%A1c-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-g%E1%BB%8Di-api\">Đóng gói các phương thức gọi API</a></li>\n<li><a href=\"#localstorage-v%C3%A0-cookies\">localStorage và Cookies</a></li>\n<li><a href=\"#theo-d%C3%B5i-file\">Theo dõi file</a></li>\n<li><a href=\"#tr%C3%ACnh-nghe-nh%E1%BA%A1c\">Trình nghe nhạc</a></li>\n</ul>\n<!-- /TOC -->\n<p>Tổng hợp lại để nhớ về middleware, nó là 1 function nhận vào</p>\n<p>storeInstance\n=> functionToCallWithAnActionThatWillSendItToTheNextMiddleware\n=> actionThatDispatchWasCalledWith\n=> valueToUseAsTheReturnValueOfTheDispatchCall</p>\n<p>Được viết với dạng syntax</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">store => next => action => result</code></pre></div>\n<p>Sau đấy được sử dụng bằng cách truyền vào như một tham số cho hàm <code class=\"language-inline-text\">applyMiddleware</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> middlewares <span class=\"token operator\">=</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>middleware1<span class=\"token punctuation\">,</span> middleware2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">,</span> initState<span class=\"token punctuation\">,</span> middlewares<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Middleware đơn giản nhất là một function éo làm gì cả, nó chỉ forward cái action đến middleware kế tiếp</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">store</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"đóng-gói-các-phương-thức-gọi-api\"><a href=\"#%C4%91%C3%B3ng-g%C3%B3i-c%C3%A1c-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-g%E1%BB%8Di-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đóng gói các phương thức gọi API</h2>\n<p>Nếu API của chúng ta cần authentication token, thay vì trên mỗi action creatỏ chúng ta lấy token (có thể từ <code class=\"language-inline-text\">store.getState</code> hoặc <code class=\"language-inline-text\">sessionStorage</code>), rồi truyền tham số này vào trước khi gọi api, chúng ta dùng middleware để làm chuyện đó sẽ tốt hơn</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'FETCH'</span><span class=\"token punctuation\">,</span>\n    url<span class=\"token punctuation\">,</span>\n    params<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">fetchImplementation</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">store</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'FETCH'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span>\n        _<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> <span class=\"token string\">'headers.token'</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">fetchImplementation</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetchMiddleware</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// vi du goi action</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUser</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">id</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>dispatch<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://api.website.com/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Thằng middleware <code class=\"language-inline-text\">fetchMiddleware</code> khi túm được <code class=\"language-inline-text\">action.type</code> tên là <strong>FETCH</strong> nó sẽ thực hiện việc gởi một HTTP request và trả về 1 <code class=\"language-inline-text\">promise</code></p>\n<p>Ở đây để làm cho ví dụ đơn giản chúng ta không implement cái <code class=\"language-inline-text\">fetchImplementation</code> mà đang hard code thằng này sử dụng <code class=\"language-inline-text\">window.fetch</code></p>\n<h2 id=\"localstorage-và-cookies\"><a href=\"#localstorage-v%C3%A0-cookies\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>localStorage và Cookies</h2>\n<p>Ứng dụng nào cũng sẽ cần lưu thông tin user, có thể là <em>authentication token</em> hoặc đường dẫn lần trước user truy cập. Chúng ta sẽ sử dụng middleware để lưu trạng thái này xuống <code class=\"language-inline-text\">localStorage</code> hoặc <em>cookies</em>.</p>\n<p>Nếu chúng ta gọi <code class=\"language-inline-text\">getState</code> trước khi gọi <code class=\"language-inline-text\">next(action)</code>, chúng ta sẽ có <strong>before state</strong> trước khi action đến tay <code class=\"language-inline-text\">reducer</code>, nếu chúng ta gọi nó sau <code class=\"language-inline-text\">next(action)</code>, chúng ta có <strong>after state</strong> sau khi reducer xử lý. Dựa vào <strong>before state</strong> và <strong>after state</strong> này chúng ta có thể thay đổi đúng cái đã bị thay đổi</p>\n<p>Ví dụ lưu authentication token xuống <code class=\"language-inline-text\">localStorage</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">store</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// lấy before state và after state</span>\n    <span class=\"token keyword\">const</span> previousToken <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> nextToken <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// thay đổi</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextToken <span class=\"token operator\">!==</span> previousToken<span class=\"token punctuation\">)</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">,</span> nextToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// lấy init state từ localStorage</span>\n<span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> initState <span class=\"token operator\">=</span> token\n    <span class=\"token operator\">?</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>defaultState<span class=\"token punctuation\">,</span> <span class=\"token string\">'token'</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> defaultState<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">,</span> middlewares<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"theo-dõi-file\"><a href=\"#theo-d%C3%B5i-file\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Theo dõi file</h2>\n<p>Ví dụ trong ứng dụng ta có state là <code class=\"language-inline-text\">activeFiles</code>, là một mảng file bạn muốn theo dõi thay đổi. Khi file thay đổi, chúng ta muốn <code class=\"language-inline-text\">dispatch</code> 1 action</p>\n<p>Sử dụng tương tự như trên</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">store</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fileWatcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fileWatcher<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file-changed'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">filename</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'FILE_CHANGED'</span><span class=\"token punctuation\">,</span> filename <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Make sure we're watching files that may be included in the store's initial state</span>\n    <span class=\"token keyword\">const</span> initialFiles <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>activeFiles<span class=\"token punctuation\">;</span>\n    fileWatcher<span class=\"token punctuation\">.</span><span class=\"token function\">watchFiles</span><span class=\"token punctuation\">(</span>initialFiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Get the state before and after the action was performed</span>\n        <span class=\"token keyword\">const</span> previousFiles <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>activeFiles<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> nextFiles <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>activeFiles<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// See what changed before and after</span>\n        <span class=\"token keyword\">const</span> filesToUnwatch <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">difference</span><span class=\"token punctuation\">(</span>previousFiles<span class=\"token punctuation\">,</span> nextFiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> filesToWatch <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">difference</span><span class=\"token punctuation\">(</span>nextFiles<span class=\"token punctuation\">,</span> previousFiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Respond to changes</span>\n        fileWatcher<span class=\"token punctuation\">.</span><span class=\"token function\">unwatchFiles</span><span class=\"token punctuation\">(</span>filesToUnwatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        fileWatcher<span class=\"token punctuation\">.</span><span class=\"token function\">watchFiles</span><span class=\"token punctuation\">(</span>filesToWatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ở đây thì nó không phụ thuộc action: vô tư tạo vô số action nếu muốn thay đổi giá trị active files, chúng ta không cần thay đổi logic trong middleware.</p>\n<p>Về mặt kỹ thuật, ví vụ trên có thể viết lại bằng cách sử dụng <code class=\"language-inline-text\">store.subscribe</code>. Tuy nhiên tiếp cận vấn đề liên quan tới side-effect của middleware phụ thuộc vào action bằng middleware là tốt nhất</p>\n<h2 id=\"trình-nghe-nhạc\"><a href=\"#tr%C3%ACnh-nghe-nh%E1%BA%A1c\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Trình nghe nhạc</h2>\n<p>Rất giống như ví vụ trên. Khác biệt quan trọng là: sự thay đổi của <code class=\"language-inline-text\">state</code> có thể xảy ra từ middleware hoặc từ những nguồn khác.</p>\n<p>Giờ chúng ta có <code class=\"language-inline-text\">state</code> là <code class=\"language-inline-text\">isPlaying</code> và <code class=\"language-inline-text\">currentTime</code>. Chúng ta sẽ giữ đúng khái niệm \"single source of truth\" của redux, middleware sẽ đảm nhiệm việc giữ giá rị state này. Nếu action thay đổi <code class=\"language-inline-text\">isPlaying</code> từ <code class=\"language-inline-text\">false</code> sang <code class=\"language-inline-text\">true</code>, thì ta play nhạc, nếu action thay đổi <code class=\"language-inline-text\">currentTime</code> chúng ta sẽ phát đến đúng thời gian đó.</p>\n<p>Để cho chính xác, trong middleware chúng ta adjust một chút để khi <code class=\"language-inline-text\">isPlaying</code> chuyển sang <code class=\"language-inline-text\">false</code>, chúng ta thay đổi luôn <code class=\"language-inline-text\">currentTime</code>. Cái ngày cực kỳ quan trọng vì chúng ta không muốn cứ mỗi khi <code class=\"language-inline-text\">currentTime</code> mà thay đổi thì chúng ta lại phát đúng đến thời điểm đó. Thêm parameter <code class=\"language-inline-text\">origin</code> trong action để làm đối số kiểm tra</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">musicPlayer</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">store</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> playbackOrigin <span class=\"token operator\">=</span> <span class=\"token string\">'playbackOrigin'</span><span class=\"token punctuation\">;</span>\n\n    musicPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'current-time-changed'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">currentTime</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'SET_CURRENT_TIME'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">origin</span><span class=\"token operator\">:</span> playbackOrigin<span class=\"token punctuation\">,</span> currentTime <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    musicPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'playback-finished'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'STOP_PLAYING'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">origin</span><span class=\"token operator\">:</span> playbackOrigin <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> initState <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initState<span class=\"token punctuation\">.</span>isPlaying<span class=\"token punctuation\">)</span> musicPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    musicPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">seek</span><span class=\"token punctuation\">(</span>initState<span class=\"token punctuation\">.</span>currentTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isPlaying</span><span class=\"token operator\">:</span> wasPlaying<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">currentTime</span><span class=\"token operator\">:</span> previousTime <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isPlaying</span><span class=\"token operator\">:</span> isPlaying<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">currentTime</span><span class=\"token operator\">:</span> nextTime <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// không dispatch action với các action từ player</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>origin <span class=\"token operator\">===</span> playbackOrigin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>wasPlaying <span class=\"token operator\">&amp;&amp;</span> isPlaying<span class=\"token punctuation\">)</span> musicPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wasPlaying <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>isPlaying<span class=\"token punctuation\">)</span> musicPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>previousTime <span class=\"token operator\">!==</span> nextTime<span class=\"token punctuation\">)</span> musicPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">seek</span><span class=\"token punctuation\">(</span>nextTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Miễn là làm đúng cái middleware này, chúng ta sẽ không bao giờ dính mấy con bug kiểu như nút Play thì đang cho thấy ở trạng thái Pause trong khi đang phát rầm rầm.</p>\n<p><a href=\"https://medium.com/@jacobp100/you-arent-using-redux-middleware-enough-94ffe991e6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài gốc của tác giả Jacob Parker</a></p>\n","cover_image":""}},{"node":{"id":"73cfd1a1047fb312bc6947e73ca4f540","title":"Sử dụng Middleware với Redux dành cho người mới bắt đầu","path":"/2018-06-18-huong-dan-tim-hieu-middleware-va-redux/","date":"2018-06-18","timeToRead":5,"desc":"Nếu đã nắm rõ redux, bước tiếp theo phải tìm hiểu là middleware","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#middleware-l%C3%A0-g%C3%AC\">Middleware là gì</a></li>\n<li><a href=\"#t%E1%BA%A1i-sao-v%C3%A0-t%E1%BA%A1i-sao\">Tại sao và tại sao</a></li>\n<li>\n<p><a href=\"#m%E1%BB%99t-s%E1%BB%91-%E1%BB%A9ng-d%E1%BB%A5ng-c%E1%BB%A7a-middleware\">Một số ứng dụng của Middleware</a></p>\n<ul>\n<li><a href=\"#loging\">Loging</a></li>\n<li><a href=\"#%C4%91%E1%BB%A3i-user-confirm\">Đợi user confirm</a></li>\n</ul>\n</li>\n<li><a href=\"#m%E1%BB%99t-s%E1%BB%91-l%E1%BB%B1a-ch%E1%BB%8Dn\">Một số lựa chọn</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"middleware-là-gì\"><a href=\"#middleware-l%C3%A0-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Middleware là gì</h2>\n<p>Nghe tên thì hơi phức tạp nhưng thực sự nó đơn giản lắm, nó là một hàm sẽ modify và được gọi trước khi action được dispatch.</p>\n<p>Mô phỏng quá trình hoạt động không có middleware</p>\n<p><img src=\"https://viblo.asia/uploads/5c72ff3e-859a-457a-ae11-e1392baa90af.gif\"></p>\n<p>và khi áp dụng middleware</p>\n<p><img src=\"https://viblo.asia/uploads/8ff8bd43-308a-47da-b382-891adae237d2.gif\"></p>\n<h2 id=\"tại-sao-và-tại-sao\"><a href=\"#t%E1%BA%A1i-sao-v%C3%A0-t%E1%BA%A1i-sao\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao và tại sao</h2>\n<p>Trong thế giới của Rect, Redux là lựa chọn được ưa chuộng để có một container chứa chỉ chứa state. Ý tưởng chính của redux là tất cả những logic của app thì đưa vào <strong>reducers</strong>, là những function nhận vào 1 <code class=\"language-inline-text\">state</code>, 1 <code class=\"language-inline-text\">action</code> và trả về <code class=\"language-inline-text\">state</code> mới. <strong>Reducers</strong> buộc phải là <em>pure function</em> không phụ thuộc và chỉnh sửa global state, để mà dễ test, dể refactor, performance tốt hơn.</p>\n<p>Thí dụ 1 redux store lưu giá trị counter</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> redux <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'INCREMENT'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> redux<span class=\"token punctuation\">.</span><span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nếu để ý chúng ta có thể thấy redux có 2 ràng buộc</p>\n<ol>\n<li><strong>Reducers</strong> PHẢI là hàm sync, trả về <code class=\"language-inline-text\">state</code> mới</li>\n<li>Do không được thay đổi global state, reducers không được sử dụng những hàm như <code class=\"language-inline-text\">setInterval()</code></li>\n</ol>\n<p>Thí dụ chúng ta làm một cái app để bấm thời gian, sau khi user bấm stop hiển thị giá trị thời gian đã chạy và sau đó lưu lại trên server bằng HTTP request. Chuyện gì sẽ xảy ra khi ta đang muốn quăng một hàm chạy async?</p>\n<p>Reducer của chúng ta cần listen 3 actions:</p>\n<ol>\n<li><code class=\"language-inline-text\">START_TIMER</code>, khi bắt đầu tính thời gian</li>\n<li><code class=\"language-inline-text\">STICK</code>, khi ta thay đổi giá trị hiện tại</li>\n<li><code class=\"language-inline-text\">STOP_TIMER</code> khi chúng ta không nhận được action <code class=\"language-inline-text\">TICK</code> nào nữa</li>\n</ol>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">stopWatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'START_TIMMER'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">startTime</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>currentTime<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">elapsed</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'TICK'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">elapsed</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>currentTime <span class=\"token operator\">-</span> state<span class=\"token punctuation\">.</span>startTime<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'STOP_TIMER'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> redux<span class=\"token punctuation\">.</span><span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>stopWatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Khi user click button start, chúng ta dispatch event <code class=\"language-inline-text\">START_TIMER</code>, khi user click stop, ta dispatch <code class=\"language-inline-text\">STOP_TIMMER</code></p>\n<p>Vấn đề là làm sao dispatch <code class=\"language-inline-text\">TICK</code>, nếu chúng ta gọi <code class=\"language-inline-text\">setInterval()</code> trong <code class=\"language-inline-text\">START_TIMER</code> thì lúc đó chúng ta đã thay đổi global state và vi phạm best practices của redux. Chổ thích hợp nhất để dispatch <code class=\"language-inline-text\">TICK</code> là ở middleware</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">timerMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">store</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'START_TIMER'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        action<span class=\"token punctuation\">.</span>interval <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'TICK'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">currentTime</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'STOP_TIMER'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">stopWatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'START_TIMER'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">startTime</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>currentTime<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">elapsed</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">interval</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>interval\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'TICK'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">elapsed</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>currentTime <span class=\"token operator\">-</span> state<span class=\"token punctuation\">.</span>startTime <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'STOP_TIMER'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">interval</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> redux<span class=\"token punctuation\">.</span><span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>timerMiddleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> redux<span class=\"token punctuation\">.</span><span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>stopWatch<span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Syntax của redux middleware là điều cần phải bàn tới: 1 middleware function là 1 function return 1 function return 1 function. Nhất đầu ghê chưa. Thật ra đang dùng currying function trong javascript (<a href=\"https://luubinhan.github.io/blog/2018-03-02-gioi-thieu-higher-order-component-trong-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">đọc cà-ri function ở đây</a>). Function đầu tiên nhận vào <code class=\"language-inline-text\">store</code> làm parameter, function thứ 2 sẽ nhận function <code class=\"language-inline-text\">next</code> làm parameter, và function thứ 3 nhận dispatch <code class=\"language-inline-text\">action</code> làm parameter. <code class=\"language-inline-text\">store</code> và <code class=\"language-inline-text\">action</code> là giá trị store và dispatch action hiện tại. Chiếc đũa thuần kỳ ở đây chính là function <code class=\"language-inline-text\">next</code>, bạn có thể gọi nó là \"sau khi middleware chạy xong, truyền cái cái action này cho middleware kế tiếp\". Nói cách khác, middleware có thể là hàm async.</p>\n<p>Tiếp theo chúng ta sẽ lưu giá trị sau khi user click stop lên server.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">promiseMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">store</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// kiểm tra payload nếu là promise thì đợi nó resolve</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>payload <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>then <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n            <span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> action<span class=\"token punctuation\">.</span>error <span class=\"token operator\">=</span> err<span class=\"token punctuation\">;</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> redux<span class=\"token punctuation\">.</span><span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>timerMiddleware<span class=\"token punctuation\">,</span> promiseMiddleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> redux<span class=\"token punctuation\">.</span><span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>stopWatch<span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Khi gởi lên một HTTP request, chúng ta sẽ gởi request này ở dạng <code class=\"language-inline-text\">promise</code>, <code class=\"language-inline-text\">promiseMiddelware</code> sẽ đứng đợi promise này có giá trị trả về thì mới gọi <code class=\"language-inline-text\">next(action)</code></p>\n<p>Ta sẽ gởi lên server bằng <code class=\"language-inline-text\">axios</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'SAVE_TIME'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/save'</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Reducer listen <code class=\"language-inline-text\">SAVE_TIME</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">stopwatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'START_TIMER'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">startTime</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>currentTime<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">elapsed</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">interval</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>interval\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'TICK'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">elapsed</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>currentTime <span class=\"token operator\">-</span> state<span class=\"token punctuation\">.</span>startTime <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'STOP_TIMER'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">interval</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'SAVE_TIME'</span><span class=\"token operator\">:</span>\n      <span class=\"token comment\">// If there was an error, set the error property on the state</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// Otherwise, clear all the timer state</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">startTime</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">elapsed</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"một-số-ứng-dụng-của-middleware\"><a href=\"#m%E1%BB%99t-s%E1%BB%91-%E1%BB%A9ng-d%E1%BB%A5ng-c%E1%BB%A7a-middleware\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một số ứng dụng của Middleware</h2>\n<h3 id=\"loging\"><a href=\"#loging\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Loging</h3>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loggerMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">store</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"đợi-user-confirm\"><a href=\"#%C4%91%E1%BB%A3i-user-confirm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đợi user confirm</h3>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">confirmationMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">store</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">action</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>shouldConfirm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Are you sure?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"một-số-lựa-chọn\"><a href=\"#m%E1%BB%99t-s%E1%BB%91-l%E1%BB%B1a-ch%E1%BB%8Dn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Một số lựa chọn</h2>\n<p>Một số thư viện để làm việc với middleware cho Redux rất phổ biến có thể tham khảo là <code class=\"language-inline-text\">redux-thunk</code>, <code class=\"language-inline-text\">redux-saga</code>, <code class=\"language-inline-text\">redux-observable</code></p>\n<p><a href=\"https://www.codementor.io/vkarpov/beginner-s-guide-to-redux-middleware-du107uyud\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài gốc của tác giả Vkarpov</a></p>\n<p>Tham khảo thêm:</p>\n<ul>\n<li><a href=\"https://github.com/gothinkster/react-redux-realworld-example-app/blob/master/src/middleware.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Realworld example sử dụng redux, middleware</a></li>\n<li><a href=\"https://medium.com/@meagle/understanding-87566abcfb7a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tìm hiểu Middleware của tác giả Mark</a></li>\n<li><a href=\"https://redux.js.org/api-reference/applymiddleware\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">applyMiddleware</a></li>\n</ul>\n","cover_image":""}},{"node":{"id":"5c6f9d1e159b3948f1cf4bcbae603337","title":"Redux vận hành như thế nào","path":"/2018-03-06-huong-dan-redux-van-hanh-nhu-the-nao-kem-vi-du/","date":"2018-03-06","timeToRead":5,"desc":"Actions, reducers, action creators, middleware, pure functions, immutability,... những ngoại ngữ làm rối bất kỳ ai nếu chưa biết redux","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#Ch%E1%BB%89-s%E1%BB%AD-d%E1%BB%A5ng-State-c%E1%BB%A7a-React\">Chỉ sử dụng State của React</a></li>\n<li><a href=\"#Th%C3%AAm-Redux\">Thêm Redux</a></li>\n<li><a href=\"#Action\">Action</a></li>\n<li><a href=\"#Kh%C3%B4ng-bao-gi%E1%BB%9D-%C4%91%C6%B0%E1%BB%A3c-ph%C3%A9p-thay-%C4%91%E1%BB%95i-State-tr%E1%BB%B1c-ti%E1%BA%BFp\">Không bao giờ được phép thay đổi State trực tiếp</a></li>\n<li><a href=\"#Action-t%E1%BB%AB-%C4%91%C3%A2u-m%C3%A0-c%C3%B3\">Action từ đâu mà có</a></li>\n</ul>\n<!-- /TOC -->\n<p>Nếu chưa biết tại sao lại sinh ra thằng Redux này, có thể xem ở tuts trước của mình.</p>\n<h2 id=\"chỉ-sử-dụng-state-của-react\"><a href=\"#ch%E1%BB%89-s%E1%BB%AD-d%E1%BB%A5ng-state-c%E1%BB%A7a-react\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chỉ sử dụng State của React</h2>\n<p>Component sẽ build</p>\n<p><img src=\"https://daveceddia.com/images/counter-plain.png\" alt=\"Redux vận hành như thế nào\"></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Counter</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>decrement<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Counter<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Giải thích ngắn gọn cho dễ theo dõi</p>\n<ul>\n<li>Giá trị <code class=\"language-inline-text\">count</code> được lưu trong <em>state</em> của component <code class=\"language-inline-text\">Counter</code></li>\n<li>Khi user click '+', hàm <code class=\"language-inline-text\">increment</code> sẽ tăng giá trị <code class=\"language-inline-text\">count</code> lên</li>\n<li>Khi state bị thay đổi, React sẽ render lại <code class=\"language-inline-text\">Counter</code> và những component bên trong của nó, giá trị mới sẽ hiển thị</li>\n</ul>\n<h2 id=\"thêm-redux\"><a href=\"#th%C3%AAm-redux\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thêm Redux</h2>\n<p>Như đã đề cập trong tuts trước, Redux lưu <em>state</em> lại trong 1 cái <strong>store</strong>, tranh lẫn lộn, <strong>store</strong> là nơi lưu <strong>state</strong>, và <strong>state</strong> dữ liệu.</p>\n<p>Cài redux và react-redux package</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install redux react-redux --save</code></pre></div>\n<p>Tại sao phải 2 cái package?, cái redux chỉ cho ta cái <strong>store</strong>, để lấy được cái <em>state</em> ra, sử dụng hàm <code class=\"language-inline-text\">connect</code> trong <code class=\"language-inline-text\">react-redux</code>, vì redux không phải chỉ làm việc chung được với React thôi không, nó có thể chơi với Vue, Angular không chừng.</p>\n<p>Bỏ state đi</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Counter</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>decrement<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Counter<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-inline-text\">connect</code> nó với store thôi</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// Viết thêm hàm này</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Thay cái</span>\n<span class=\"token comment\">// export default Counter;</span>\n\n<span class=\"token comment\">// bằng</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ok vậy là xong phần connect component với các state ở trong <em>store</em>, chúng ta cần khai báo Store!</p>\n<p>Bọc toàn bộ cái <code class=\"language-inline-text\">App</code> bên trong component <code class=\"language-inline-text\">Provider</code> của <em>react-redux</em> để tất cả component bên trong <code class=\"language-inline-text\">App</code> có thể sử dụng hàm <code class=\"language-inline-text\">connect</code> để gọi đến <em>store</em></p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Provider</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chưa xong, chúng ta phải setup cái store để đưa vào cho Provider</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Provider</span></span> <span class=\"token attr-name\">store</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Provider</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Vẫn chưa đủ, thật sự Redux không được thông minh như chúng ta tưởng tượng, lúc đầu mình đã nghĩ rằng khi create store như vậy nó sẽ cho mình những giá trị default bên trong store. Nhưng không chúng ta phải làm tay tất cả. Chúng ta phải cung cấp cho nó 1 hàm gọi là <code class=\"language-inline-text\">reducer</code>, cái hàm <code class=\"language-inline-text\">reducer</code> này phải <em>return</em> về một giá trị cho state, luôn phải return state nhé. Bên trong <code class=\"language-inline-text\">reducer</code> ta sẽ xào nấu state theo yêu cầu, nó sẽ nhận state hiện tại và trả về state mới.</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Provider</span></span> <span class=\"token attr-name\">store</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Provider</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"action\"><a href=\"#action\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Action</h2>\n<p>Action là gì, nó đóng vai trò như thế nào và nó đến từ đâu? Làm thế nào mà ta đổi giá trị <code class=\"language-inline-text\">counter</code>?</p>\n<p><code class=\"language-inline-text\">action</code> là 1 JS object nó sẽ cho biết bạn đang muốn <code class=\"language-inline-text\">order</code> món nào, như tờ giấy ghi <code class=\"language-inline-text\">order</code> trong nhà hàng ấy mà, nó sẽ chưa thông tin 'món' bạn order, đầu bếp <code class=\"language-inline-text\">reducer</code> sẽ dựa vào đó mà xào nấu ra 'món' bạn order</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'INCREMENT'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'DECREMENT'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Reducer sẽ căn cứ vào <code class=\"language-inline-text\">action.type</code> để thực hiện thay đổi và trả về state mới, nên nhớ chúng ta phải LUÔN LUÔN trả về state trong <code class=\"language-inline-text\">reducer</code>, nếu có hay không có thay đổi cũng phải trả về <em>state</em></p>\n<h2 id=\"không-bao-giờ-được-phép-thay-đổi-state-trực-tiếp\"><a href=\"#kh%C3%B4ng-bao-gi%E1%BB%9D-%C4%91%C6%B0%E1%BB%A3c-ph%C3%A9p-thay-%C4%91%E1%BB%95i-state-tr%E1%BB%B1c-ti%E1%BA%BFp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Không bao giờ được phép thay đổi State trực tiếp</h2>\n<p>State là một immutable object, tuyệt đối <strong>KHÔNG</strong> thay đổi state như sau</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">brokenReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'INCREMENT'</span><span class=\"token operator\">:</span>\n      <span class=\"token comment\">// BẬY: đừng thay giá trị bằng kiểu này</span>\n      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'DECREMENT'</span><span class=\"token operator\">:</span>\n      <span class=\"token comment\">// BẬY: đừng thay giá trị bằng kiểu này</span>\n      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Làm như vậy cũng cấm tuyệt đối nhé: </p>\n<ul>\n<li><code class=\"language-inline-text\">state.foo = 7</code></li>\n<li><code class=\"language-inline-text\">state.items.push(newItem)</code></li>\n<li><code class=\"language-inline-text\">delete state.something</code></li>\n</ul>\n<h2 id=\"action-từ-đâu-mà-có\"><a href=\"#action-t%E1%BB%AB-%C4%91%C3%A2u-m%C3%A0-c%C3%B3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Action từ đâu mà có</h2>\n<p>Action không tự sinh ra, nó được <code class=\"language-inline-text\">dispatch</code> ra từ hàm <code class=\"language-inline-text\">dispatch</code>. Hàm <code class=\"language-inline-text\">dispatch</code> thì đặc biệt là nó không được import, mình có thể gọi <code class=\"language-inline-text\">store.dispatch(someAction)</code>, nhưng cái store này thì nó năm ở trong 1 file thôi, Vậy hàm <code class=\"language-inline-text\">dispatch</code> này làm sao có đây?</p>\n<p>Thật ra lúc chúng ta gọi <code class=\"language-inline-text\">connect</code> thì hàm <code class=\"language-inline-text\">connect</code> cũng đã <em>map</em> cái hàm <code class=\"language-inline-text\">dispatch</code> vào trong props của component luôn.</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'INCREMENT'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'DECREMENT'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Counter</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>decrement<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n","cover_image":""}},{"node":{"id":"dec66a9345d632cbe065f67437fb0729","title":"Redux là gì và tại sao phải dùng?","path":"/2018-02-14-huong-dan-redux-la-gi-tai-sao-phai-dung/","date":"2018-02-14","timeToRead":3,"desc":"Nếu đã đụng tới React thì sớm muộn gì bạn cũng sẽ nghe đến Redux","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#t%E1%BA%A1i-sao\">Tại sao?</a></li>\n<li><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81-l%C3%A0-data-flow-lu%E1%BB%93ng-d%E1%BB%AF-li%E1%BB%87u\">Vấn đề là: Data Flow (Luồng dữ liệu)</a></li>\n<li><a href=\"#k%E1%BA%BFt-n%E1%BB%91i-tr%E1%BB%B1c-ti%E1%BA%BFp-%C4%91%E1%BA%BFn-d%E1%BB%AF-li%E1%BB%87u-v%E1%BB%9Bi-redux\">Kết nối trực tiếp đến dữ liệu với Redux</a></li>\n<li><a href=\"#khi-n%C3%A0o-s%E1%BB%AD-d%E1%BB%A5ng-redux\">Khi nào sử dụng Redux</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"tại-sao\"><a href=\"#t%E1%BA%A1i-sao\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao?</h2>\n<p>Câu hỏi đầu tiên cần trả lời: Tại sao chúng ta cần Redux?</p>\n<p>Dĩ nhiên câu trả lời không phải là bởi vì ai trên mạng cũng bảo thế nên em phải xài nó.</p>\n<p>Redux được sử dụng rộng rãi vì nó giải quyết <strong>vấn đề</strong> mà chúng ta thường gặp khi làm Single Page App.</p>\n<p>Vấn đề \"State management\"? Không hề, bản thân React đã giải quyết State management rồi, Redux giúp quản lý <code class=\"language-inline-text\">state</code>, nhưng nó không phải là <strong>vấn đề</strong> mấu chốt.</p>\n<h2 id=\"vấn-đề-là-data-flow-luồng-dữ-liệu\"><a href=\"#v%E1%BA%A5n-%C4%91%E1%BB%81-l%C3%A0-data-flow-lu%E1%BB%93ng-d%E1%BB%AF-li%E1%BB%87u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vấn đề là: Data Flow (Luồng dữ liệu)</h2>\n<p>Nếu sử dụng React một thời gian, chúng ta thấy ngay <code class=\"language-inline-text\">props</code> trong React là dữ liệu đi xuống theo 1 chiều từ trên xuống. Dữ liệu truyền xuống qua <code class=\"language-inline-text\">props</code>.</p>\n<p>Ví dụ với <em>component</em> <code class=\"language-inline-text\">Couter</code> như sau</p>\n<p><img src=\"https://daveceddia.com/images/counter-component.png\" alt=\"Redux là gì và tại sao phải dùng?\"></p>\n<p>Giá trị <code class=\"language-inline-text\">count</code> lưu trong <em>state</em> của component <code class=\"language-inline-text\">App</code>, được truyền xuống qua <em>props</em></p>\n<p><img src=\"https://daveceddia.com/images/passing-props-down.png\" alt=\"Redux là gì và tại sao phải dùng?\"></p>\n<p>Để dữ liệu đi ngược lên trên, có phải chúng ta sẽ có 1 hàm <em>callback</em>, hàm <em>callback</em> này được truyền xuống cho <strong>tất cả</strong> các component con, khi dữ liệu <code class=\"language-inline-text\">count</code> thay đổi, chúng ta gọi lại hàm <em>callback</em> này để 'báo' cho <code class=\"language-inline-text\">App</code> biết giá trị <code class=\"language-inline-text\">count</code> đã thay đổi.</p>\n<p><img src=\"https://daveceddia.com/images/passing-callbacks-down.png\" alt=\"Redux là gì và tại sao phải dùng?\"></p>\n<p>Hình dung như thế này, dữ liệu như là nguồn điện ở nhà, muốn có điện từ nhà máy tới từng hộ dân ta cần đường dây điện được nối xuyên suốt từ nhà máy đến từng hộ dân, vì điện không thể truyền qua không khí như sóng điện thoại. Đó là cách React đưa dữ liệu đến các <em>component</em> con, với Redux chúng ta sẽ hỗ trợ dữ liệu đi qua đường sóng điện thoại.</p>\n<p>Sớm hay muộn gì bạn cũng rơi vào tình huống như trên, container ở trên cùng có một vài dữ liệu mà components bên dưới nó cũng cần dữ liệu tương tự. Lấy ví dụ như thông tin user trên trang Twitter</p>\n<p><img src=\"https://daveceddia.com/images/twitter-user-data.png\" alt=\"Redux là gì và tại sao phải dùng?\"></p>\n<p>Để đưa dữ liệu từ <code class=\"language-inline-text\">App</code> xuống các <code class=\"language-inline-text\">Avatar</code> components, bạn phải truyền dữ liệu này qua những component không cần thiết.</p>\n<p><img src=\"https://daveceddia.com/images/twitter-hierarchy.png\" alt=\"Redux là gì và tại sao phải dùng?\"></p>\n<h2 id=\"kết-nối-trực-tiếp-đến-dữ-liệu-với-redux\"><a href=\"#k%E1%BA%BFt-n%E1%BB%91i-tr%E1%BB%B1c-ti%E1%BA%BFp-%C4%91%E1%BA%BFn-d%E1%BB%AF-li%E1%BB%87u-v%E1%BB%9Bi-redux\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết nối trực tiếp đến dữ liệu với Redux</h2>\n<p>Sử dụng hàm <code class=\"language-inline-text\">connect</code> trong Redux sẽ cho phép chúng ta kết nối bất kỳ <em>component</em> nào đến trung tâm của mọi dữ liệu, thích cái gì thì <em>map</em> nó vô component</p>\n<p><img src=\"https://daveceddia.com/images/redux-connected-twitter.png\" alt=\"Redux là gì và tại sao phải dùng?\"></p>\n<p>Bên cạnh đó nó còn có một số tính năng khác đi kèm, như giúp debug dễ hơn với Redux DevTools cho phép kiểm tra mỗi khi state thay đổi, time-travel debug cho phép roll back lại state trước đó</p>\n<p>Cách connect một component với Redux store</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Avatar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>avatar<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>user\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> Avatar <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Avatar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Bản thân component <em>Avatar</em> không có gì khác biệt với component khác, nó sẽ nhận <code class=\"language-inline-text\">props</code> và <code class=\"language-inline-text\">render</code> ra như bình thường, hàm <code class=\"language-inline-text\">connect</code> sẽ làm chuyện <em>map</em> cái state ở trong Redux store về thành <code class=\"language-inline-text\">props</code>.</p>\n<h2 id=\"khi-nào-sử-dụng-redux\"><a href=\"#khi-n%C3%A0o-s%E1%BB%AD-d%E1%BB%A5ng-redux\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khi nào sử dụng Redux</h2>\n<ul>\n<li>Nếu các <em>component</em> được tổ chức theo cây như ví dụ ở trên</li>\n<li>Nếu cần lưu dữ liệu tạm thời giữa các view, thí dụ load dữ liệu ở trang list xong vô trang detail load dự liệu trang detail, rồi khi quay lại trang list không cần phải load dữ liệu lại lần nữa.</li>\n<li>Nếu ứng dụng lớn, quản lý dữ liệu nhiều.</li>\n</ul>\n","cover_image":""}}]}}},"context":{}}