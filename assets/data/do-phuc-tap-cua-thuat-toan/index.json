{"hash":"6175dd7c207af29dae90f46c78c7f1565a54745e","data":{"post":{"title":"Độ phức tạp của thuật toán","path":"/do-phuc-tap-cua-thuat-toan/","slug":"/2019-10-28-gioi-thieu-ve-do-phuc-tap-cua-thuat-toan","date":"2019-10-28","timeToRead":5,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"},{"id":"hoc-thuat","title":"hoc-thuat","path":"/tag/hoc-thuat/"}],"desc":"Một cách chuẩn hóa trong ngành lập trình để đánh giá độ phức tạp của giải thuật","content":"<p>Một <strong>giải thuật</strong> sẽ bao gồm <strong>các bước tuần tự</strong> để giải quyết một vấn đề, để đi qua các bước tuần tự này, sẽ tốn một <strong>khoản thời gian</strong> nhất định để hoàn thành. Thời gian tiêu tốn của một giải thuật để giải quyết vấn đề được gọi là <strong>Độ phức tạp của thuật toán</strong></p>\n<p>Trong trường hợp xấu nhất, <strong>thời gian chạy của một giải thuật tỉ lệ thuận với số lượng tham số đầu vào</strong></p>\n<p>Giống như giải toán, chuyện có nhiều cách khác nhau để giải cùng một bài toán là bình thường. Ví dụ như nhân 2 con số, có rất nhiều cách để tính nhẩm được, chứ không phải chỉ có đúng một cách mà thầy cô bạn dạy hồi tiểu học, cách nào giúp ta nhẩm nhanh hơn thì được gọi là ít phức tạp hơn.</p>\n<p>Độ phức tạp của thuật toán được diễn đạt bằng ký hiệu <strong>chữ O viết hoa</strong>. O cho biết thời gian cần chạy của giải thuật <strong>tỉ lệ như thế nào</strong> với số lượng tham số đầu vào (như một dạng đơn vị hé)</p>\n<p><img src=\"https://i1.wp.com/www.jenniferbland.com/wp-content/uploads/big-o-complexity.png?w=783&#x26;ssl=1\"></p>\n<h2 id=\"o1---độ-phức-tạp-không-đổi\"><a href=\"#o1---%C4%91%E1%BB%99-ph%E1%BB%A9c-t%E1%BA%A1p-kh%C3%B4ng-%C4%91%E1%BB%95i\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>O(1) - Độ phức tạp không đổi</h2>\n<p>Giải thuật nào có độ phức tạp bằng <strong>O(1)</strong> nghĩa là giải thuật đó không phụ thuộc giá trị input có <em>bự</em> bao nhiêu đi nữa, nó luôn có độ phức tạp không đổi.</p>\n<p>Nếu một hàm có độ phức tạp bằng O(1) nghĩa là trường hợp đẹp nhất của hàm, tối ưu nhất.</p>\n<p><img src=\"https://i0.wp.com/www.jenniferbland.com/wp-content/uploads/O1-constant-time-complexity.jpg?w=416&#x26;ssl=1\"></p>\n<p>Ví dụ, hash table</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*1 triệu phần tử chẳng hạn*/</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Câu lệnh sau có O(1)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token string\">\"một key bất kỳ\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// hàm lấy giá trị cuối cùng của mảng</span>\n<span class=\"token comment\">// độ phức tạp là O(1), dù mảng có bao nhiêu phần tử </span>\n<span class=\"token comment\">// cũng ko ảnh hưởng thời gian chạy</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLast</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">items</span> <span class=\"token arrow operator\">=></span> items<span class=\"token punctuation\">[</span>items<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"olog-n\"><a href=\"#olog-n\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>O(log n)</h2>\n<p>Thời gian chạy càng tăng, mức độ phức tạp càng giảm</p>\n<p>Ví dụ bạn muốn tìm số điện thoại của một người trong cuốn danh bạ khoản một triệu cái tên. Điều đầu tiên chúng làm là tìm mở đại khoản giữa cuốn danh bạ, so sanh cái tên hiện tại nằm trước hay nằm sau trang đó, lặp lại tương tự với nhóm mới tìm được.</p>\n<p>Rõ ràng khi càng tìm, số lượng tên phải kiểm tra càng giảm đáng kể (mỗi lần bỏ qua 1 nữa). Nếu có 3 tên, chúng ta chỉ tốn 2 bước là tìm ra. Có 15 tên, chúng ta chỉ cần tối đa 4 bước.</p>\n<p><img src=\"https://i1.wp.com/www.jenniferbland.com/wp-content/uploads/Olog-n-logarithmic-complexity.jpg?w=472&#x26;ssl=1\"></p>\n<p>Thời gian thực hiện thuật toán giảm đáng kể khi số lượng input giảm.</p>\n<p>Ví dụ như thuật toán tìm kiếm QuickSort</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">quickSort</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">list</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> \n    <span class=\"token keyword control-flow\">return</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> pivot <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> left  <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> total <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> total<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> pivot<span class=\"token punctuation\">)</span>\n      left<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">else</span>\n      right<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token spread operator\">...</span><span class=\"token method function property-access\">quickSort</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    pivot<span class=\"token punctuation\">,</span> \n    <span class=\"token spread operator\">...</span><span class=\"token method function property-access\">quickSort</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"on---thời-gian-tịnh-tiến-theo-số-lượng-input\"><a href=\"#on---th%E1%BB%9Di-gian-t%E1%BB%8Bnh-ti%E1%BA%BFn-theo-s%E1%BB%91-l%C6%B0%E1%BB%A3ng-input\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>O(n) - Thời gian tịnh tiến theo số lượng input</h2>\n<p>Đây là những thuật toán có tốc độ tăng <strong>song hành</strong> với số lượng input tăng, trường hợp xấu nhất sẽ rơi vào khi số lượng input nhiều nhất</p>\n<p>Ví dụ, bạn in ra giá trị của một mảng 10 phần tử, loop qua toàn bộ các phần tử để làm việc in này. Khi số lượng phần tử tăng lên thành 1000 lần thì bạn cũng phải loop qua 1000 phần tử</p>\n<p><img src=\"https://i2.wp.com/www.jenniferbland.com/wp-content/uploads/On-Linear-Complexity.jpg?w=463&#x26;ssl=1\"></p>\n<p>Ví dụ các vòng lặp <code>for</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">findIndex</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">items<span class=\"token punctuation\">,</span> match</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> total <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> total<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> match<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword control-flow\">return</span> i<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword control-flow\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> array<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// loop 1 lần, tốt nhất</span>\n<span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n<span class=\"token comment\">// loop 4 lần, xấu nhất</span>\n<span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// loop 4 lần, xấu nhất</span>\n<span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -1 </span></code></pre>\n<h2 id=\"on2----thời-gian-chạy-tăng-theo-n-mũ-2\"><a href=\"#on2----th%E1%BB%9Di-gian-ch%E1%BA%A1y-t%C4%83ng-theo-n-m%C5%A9-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>O(n^2)  - Thời gian chạy tăng theo n mũ 2</h2>\n<p>Ngược lại với <strong>O(log n)</strong>, thời gian chạy của thuật toán nào có giá trị này sẽ tăng theo **số lượng input mũ 2)</p>\n<p><img src=\"https://i1.wp.com/www.jenniferbland.com/wp-content/uploads/On2-quadratic-time-complexity.jpg?w=382&#x26;ssl=1\"></p>\n<p>Trong lập trình chúng ta sẽ tránh để các đoạn code nào bị rơi vào độ phức tạp O(n^2)</p>\n<p>Ví dụ, 2 vòng lặp for lồng nhau, bubble sort.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">findMatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> string<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> string<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n         <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> string<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://www.freecodecamp.org/news/time-is-complex-but-priceless-f0abd015063c/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.freecodecamp.org/news/time-is-complex-but-priceless-f0abd015063c/</a></p>\n<p><a href=\"http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html</a></p>\n<p><a href=\"https://medium.com/@gmedina229/big-o-in-javascript-36ff67766051\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@gmedina229/big-o-in-javascript-36ff67766051</a></p>\n<p><a href=\"https://medium.com/javascript-scene/time-complexity-big-o-notation-1a4310c3ee4b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/javascript-scene/time-complexity-big-o-notation-1a4310c3ee4b</a></p>\n<p><a href=\"https://medium.com/cesars-tech-insights/big-o-notation-javascript-25c79f50b19b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/cesars-tech-insights/big-o-notation-javascript-25c79f50b19b</a></p>\n<p><a href=\"https://www.jenniferbland.com/time-complexity-analysis-in-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.jenniferbland.com/time-complexity-analysis-in-javascript/</a></p>\n","cover_image":"","related":[{"id":"6c9e83d801157396289a748804460b25","path":"/thuat-toan-quick-sort/","title":"Thuật toán QuickSort","desc":"Một thuật toán rất phổ biến mà chúng ta phải nắm thật chắc và hình dung được cách hiện thực nó ngay khi được nhắc tới."},{"id":"87813f0c456fbf9b04bf0d5633a9cc25","path":"/thiet-ke-tuyet-dep-vs-thuc-te-bai-hoc-tu-facebook/","title":"Thiết kế tuyệt đẹp vs. Thực tế: bài học từ Facebook","desc":"Bài viết dịch lại của một anh làm product design cho facebook đăng tải trên medium"},{"id":"3468f54867fa0926e25df8a607bbfd7e","path":"/cac-thuat-toan-sap-xep-pho-bien-va-java-script/","title":"Các thuật toán sắp xếp phổ biến và JavaScript","desc":"Chúng ta sẽ điểm qua các thuật toán sắp xếp phổ biến được học trong trường và hiện thực nó bằng JavaScript"},{"id":"0a408624be828657679088cbca8986c7","path":"/tiep-tuc-luan-ban-ve-cach-to-chuc-thu-muc-dat-ten-component-trong-react/","title":"Tiếp tục luận bàn về cách tổ chức thư mục, đặt tên component trong React","desc":"Hổm đã viết về vấn đề này rồi, giờ lại viết tiếp, vì bản thân React cũng không ra bất cứ rule nào về việc này, bạn tự do tổ chức sao mà mình thấy hợp lý, bài trước là của tác giả đó thấy vậy là hay, bài này thì tác giả thích tổ chức thế này"}]}},"context":{}}