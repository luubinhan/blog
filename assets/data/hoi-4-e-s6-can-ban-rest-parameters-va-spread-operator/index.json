{"hash":"5ee00dc0b71878963f9b5fb39ff7b4fecc0fc2a1","data":{"post":{"title":"Hồi 4: ES6 căn bản - Rest Parameters và Spread Operator","path":"/hoi-4-e-s6-can-ban-rest-parameters-va-spread-operator/","date":"2016-11-18","timeToRead":2,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"}],"desc":"Hồi 4 trong series ES6 căn bản, nói về Rest Parameters và Spread Operator","content":"<p>Trong Series này</p>\n<ol>\n<li><a href=\"/2016-11-15-chuong-1-es6-can-ban\">Nâng cấp cho Object</a></li>\n<li><a href=\"/2016-11-16-chuong-2-es6-can-ban-arrow-function/\">Arrow function</a></li>\n<li><a href=\"/2016-11-17-phan-3-es6-can-ban-assignment-destructuring\">Assignment Destruction</a></li>\n<li><a href=\"/2016-11-18-phan-4-es6-can-ban-rest-parameters-va-spread-operator\">Rest parameters và spread operator</a></li>\n<li><a href=\"/2016-11-19-phan-5-es6-can-ban-template-literals\">Template literals</a></li>\n<li><a href=\"/2016-11-20-phan-6-es6-can-ban-khai-bao-let-const\">Khai báo biến với let và const</a></li>\n<li><a href=\"/2016-11-21-phan-7-es6-can-ban-classes\">Căn bản class</a></li>\n</ol>\n<p>Mục lục</p>\n<!-- MarkdownTOC -->\n<ul>\n<li>Rest parameter</li>\n<li>Spread Operator</li>\n</ul>\n<!-- /MarkdownTOC -->\n<h2 id=\"rest-parameter\"><a href=\"#rest-parameter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Rest parameter</h2>\n<p>Khi số lượng tham số truyền vào cho một function không cố định, chúng ta có thể sử dụng <code class=\"language-text\">arguments</code>, sau đó sử dụng <code class=\"language-text\">Array.prototype.slice.call</code> để chuyển nó thành một mảng</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span>\n <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// -> ['a','b','c']</span></code></pre>\n<p>Với ES6, chúng ta có một cách làm khác, thêm dấu \"...\" phía trước tham số</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// -> ['a','b','c']</span></code></pre>\n<p>Nếu muốn truyền vào 1 tham số bình thường</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">first<span class=\"token punctuation\">,</span><span class=\"token spread operator\">...</span>list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span>\n <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// -> 'a'</span>\n<span class=\"token comment\">// -> ['b','c']</span></code></pre>\n<p>Nếu lúc trước ta phải viết</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sumAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> numbers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// =8</span></code></pre>\n<p>Nếu sử dụng <em>Arrow function</em> thì buộc phải thêm dấu ngoặc kép <code class=\"language-text\">()</code>, dù chỉ có một tham số</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sumAll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> <span class=\"token parameter\"><span class=\"token spread operator\">...</span>numbers</span> <span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> numbers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">total<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> total <span class=\"token operator\">+</span> next<span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token function\">sumAll</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// = 8</span></code></pre>\n<h1 id=\"spread-operator\"><a href=\"#spread-operator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spread Operator</h1>\n<p>Xem ví dụ bên dưới, Spread operator giúp trả về một mảng</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">cast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>arguments<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">cast</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ['a','b','c']</span></code></pre>\n<p>Trong trường hợp phải kết hợp nhiều mảng</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> all <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>all<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [1,2,3,4,5,6,7]</span></code></pre>\n<p>Một ví dụ khác để thấy lợi ích của <em>spread operator</em> khi kết hợp với new một <code class=\"language-text\">object</code> như <code class=\"language-text\">Date</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span> <span class=\"token spread operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">2015</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Thu Dec 31 2015</span></code></pre>\n<p>Khi muốn lấy 1 hoặc 2 phần tử của mảng, cách vẫn thường làm là shift mấy phần tử này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> first <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> second <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// a</span></code></pre>\n<p>Cách viết mới</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span> <span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// ['c','d','e']</span></code></pre>\n","cover_image":"","related":[{"id":"1340104aa5d848ae6e871dca2ffcd1b5","path":"/hoi-7-e-s6-can-ban-classes/","title":"Hồi 7: ES6 căn bản - Classes","desc":"Hồi 7 trong series ES6 căn bản, Javascript vốn là ngôn ngữ prototype, class không phải là cái gì đó mới mẻ trong javascript"},{"id":"6b73c7a8d9c5332b2e0a6315fcbcb943","path":"/hoi-2-e-s6-can-ban-arrow-function/","title":"Hồi 2: ES6 căn bản - Arrow Function","desc":"Hồi 2 trong series ES6 căn bản, nói về Arrow Function"},{"id":"cad93a1c7d14fac9d3f26a77aff31d1d","path":"/hoi-5-e-s6-can-ban-template-literals/","title":"Hồi 5: ES6 căn bản - Template literals","desc":"Hồi 5 trong series ES6 căn bản, nói về Template literals, một nâng cấp lớn cho string"},{"id":"1033f1efca1a045faea137fd0c0a873d","path":"/hoi-3-e-s6-can-ban-truy-cap-phan-tu/","title":"Hồi 3: ES6 căn bản - Truy cập phần tử","desc":"Hồi 3 trong series ES6 căn bản, nói về Assignment Destructuring"},{"id":"4a99bac4278d70e64efde99b10ec74df","path":"/hoi-6-e-s6-can-ban-khai-bao-bien-voi-let-va-const/","title":"Hồi 6: ES6 căn bản - Khai báo biến với let và const","desc":"Hồi 6 trong series ES6 căn bản, nói về khai báo biến với let và const"},{"id":"b429569d7c312ed594d95662ba44a118","path":"/e-s6-can-ban-phan-1-nhung-nang-cap-cho-object/","title":"ES6 Căn bản (phần 1) - Những nâng cấp cho Object","desc":"Nếu bạn đã đọc bài FrontEnd Developer 2016 nên học gì? Chắc bạn đã rối không biết bắt đầu từ đâu nếu muốn dấn thân vào cuộc chơi nhiều cám dỗ này. Mình nghĩ cái đầu tiên cần học là ES6."},{"id":"9dff911f3d4c998b2e2d39eff8025ade","path":"/huong-dan-handle-event-listener-can-ban-cho-cac-ban-moi-bat-dau-voi-javascript/","title":"Hướng dẫn handle event listener căn bản cho các bạn mới bắt đầu với javascript","desc":"Căn bản nhưng cần thiết"},{"id":"279a88e44a33e49f28daacde42d9d2c6","path":"/can-ban-cach-su-dung-media-query/","title":"Căn bản cách sử dụng media query","desc":"Những kiến thức căn bản bắt buộc nhất để bạn làm responsive"},{"id":"8a96e1bde836a981c3694b7c5bb64b27","path":"/8-thu-thuat-khi-lam-viec-voi-object-su-dung-resting-va-spreading/","title":"8 thủ thuật khi làm việc với Object sử dụng resting và spreading","desc":"Những đoạn code bỏ túi hay xài nhất khi đụng tới object"}]}},"context":{}}