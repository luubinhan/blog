{"hash":"6000b69201124b9452c41d38889aba5b11cf5e89","data":{"post":{"title":"Composition là cái chi chi","path":"/2020-10-01-composition-la-cai-chi-chi/","date":"2020-10-01","timeToRead":5,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"},{"id":"hoc-thuat","title":"hoc-thuat","path":"/tag/hoc-thuat/"}],"desc":"Nhớ về 5 anh em siêu nhân kết hợp thành một con robot mãnh thú","content":"<p>Composition một cách trừu tượng mà nói là việc đưa hai (hoặc nhiều) thứ khác nhau vào một chỗ để nhận được một loại kết quả</p>\n<h2 id=\"composition-trong-toán-học\"><a href=\"#composition-trong-to%C3%A1n-h%E1%BB%8Dc\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Composition trong toán học</h2>\n<p>Toán học cũng chưa thật sự liên quan nhiều đến frontend, tuy nhiên toán học là nơi đã phát sinh ra khái niệm này</p>\n<p>Ví dụ có 2 hàm, một hàm là <code class=\"language-text\">y = 2 * x</code>, hàm thứ 2 là <code class=\"language-text\">y = x + 10</code>.</p>\n<p><em>Composition</em> 2 hàm này lại, kết quả của thằng này là input của thằng kia, chúng ta sẽ có hàm mới <code class=\"language-text\">y = (2 * x) + 10</code>. <strong>Đó là tất cả khái niệm cần nắm</strong></p>\n<h2 id=\"function-composition\"><a href=\"#function-composition\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Function composition</h2>\n<p>Trong ngữ cảnh của functional programming, cũng không khác toán học, chỉ là được diễn tả bằng code</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> date <span class=\"token operator\">=</span> <span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> label <span class=\"token operator\">=</span> <span class=\"token function\">createLabel</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">showLabel</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Code này có vài đoạn <em>na ná</em> nhau, chúng ta có nhận lấy một input, convert nó sang một loại khác, rồi lại lấy kết quả đó, convert tiếp.</p>\n<p>Làm sao để lượt bỏ hết sự <em>na ná</em> đó?</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> steps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    getDate<span class=\"token punctuation\">,</span>\n    formatDate<span class=\"token punctuation\">,</span>\n    createLabel<span class=\"token punctuation\">,</span>\n    showLabel\n<span class=\"token punctuation\">]</span></code></pre>\n<p>Một \"vài người\" cho rằng code vậy sạch hơn. Viết một helper function để tin gọn hơn nữa</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">runSteps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">steps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> steps<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> step <span class=\"token operator\">=</span> steps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// làm tiếp các bước được móc nối vào</span>\n    result <span class=\"token operator\">=</span> <span class=\"token function\">step</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Nhờ sự trợ giúp của hàm <code class=\"language-text\">runSteps</code> chúng ta có thể viết lại</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">runSteps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    getDate<span class=\"token punctuation\">,</span>\n    formatDate<span class=\"token punctuation\">,</span>\n    createLabel<span class=\"token punctuation\">,</span>\n    showLabel\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Nếu tổng số code bước phải làm là cố định, chúng ta muốn chạy y chang như vậy trên nhiều chỗ khác nhau, chúng ta tiếp tục đưa nó vào một function</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">showDateLabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">runSteps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    getDate<span class=\"token punctuation\">,</span>\n    formatDate<span class=\"token punctuation\">,</span>\n    createLabel<span class=\"token punctuation\">,</span>\n    showLabel\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Giờ gọi ở bất kỳ đâu</span>\n<span class=\"token function\">showDateLabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">showDateLabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Các bạn lập trình lại tiến một bước xa hơn, sao không rút gọn code hơn nữa bằng một hàm gọi là <code class=\"language-text\">pipe</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> showDateLabel <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n  getDate<span class=\"token punctuation\">,</span>\n  formatDate<span class=\"token punctuation\">,</span>\n  createLabel<span class=\"token punctuation\">,</span>\n  showLabel\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Giờ gọi ở bất kỳ đâu</span>\n<span class=\"token function\">showDateLabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">showDateLabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Chúng ta <em>dấu diếm</em> phần implement của thể  đó như thế này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>steps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// chạy hết tất cả các function cho tui</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">runSteps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> steps<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> step <span class=\"token operator\">=</span> steps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      result <span class=\"token operator\">=</span> <span class=\"token function\">step</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Như vậy chúng ta đã đi rất xa, rất rất xa. Từ điểm xuất phát phải gọi lần lượt các hàm một cách thủ công, chúng ta chỉ định các bước cần chạy theo thứ tự một cách <em>sạch sẽ hơn</em></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// code cũ</span>\n<span class=\"token keyword\">let</span> date <span class=\"token operator\">=</span> <span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> label <span class=\"token operator\">=</span> <span class=\"token function\">createLabel</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">showLabel</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// code mới</span>\n<span class=\"token keyword\">let</span> showDateLabel <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n  getDate<span class=\"token punctuation\">,</span>\n  formatDate<span class=\"token punctuation\">,</span>\n  createLabel<span class=\"token punctuation\">,</span>\n  showLabel\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">showDateLabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu có thắc mắc trong đầu: ủa vậy để mần chi? Phức tạp rườm rà vãi cả ra! Hãy cân nhắc xem giữa hay cách viết trên, cách nào bạn đọc dễ hơn?</p>\n<p>Khi hiểu được <code class=\"language-text\">pipe</code> và function composition bạn sẽ thấy mọi thứ gọn gàng rành mạch thật tuyệt vời, nhưng không có nghĩa là không có nhược điểm, <em>outsource</em> cho <code class=\"language-text\">pipe</code>, chúng ta không còn thấy được rõ ràng dữ liệu đã đi ra-đi vào như thế nào.</p>\n<h2 id=\"component-composition\"><a href=\"#component-composition\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Component Composition</h2>\n<p>Một ngữ cảnh khác chúng ta cũng thấy sự xuất hiện của \"composition\" là lập trình UI hướng declarative. React component là một ví dụ.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Screen</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Screen</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Form</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Form</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Button</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hey there.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đấy cũng gọi là composition vì chúng ta đứa những component vào trong những component khác, rồi nhận được kết quả là một tổng thể chứa tất cả component</p>\n<p>Một dạng biến thể của composition trong component là <code class=\"language-text\">slot</code> (làm Vue bạn sẽ biết khái niệm này)</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Layout</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> sidebar<span class=\"token punctuation\">,</span> content <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sidebar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>sidebar<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Sau đấy đưa các giá trị cụ thể vào slot</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">HomePage</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Layout</span></span>\n      <span class=\"token attr-name\">sidebar</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HomeSidebar</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">content</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HomeContent</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  )\n}\nfunction AboutPage() </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Layout</span></span>\n      <span class=\"token attr-name\">sidebar</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AboutSidebar</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">content</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AboutContent</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  )\n}</span></code></pre>\n<p>React sẽ không đặt hẳn một khái niệm riêng cho slot vì bạn có thể làm điều đó thông qua <code class=\"language-text\">prop</code></p>\n<h2 id=\"composition-vs-inheritance\"><a href=\"#composition-vs-inheritance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Composition vs inheritance</h2>\n<p><em>Người đời</em> thường đem composition để đối chiếu với inheritance, kế thừa gặp nhiều trong class và object hơn, composition gặp nhiều trong function</p>\n<p>Một cách cụ thể, nếu viết code theo kiểu <code class=\"language-text\">class</code>, bạn sẽ có xu hướng dùng lại các behavior từ một class khác bằng cách <code class=\"language-text\">extend</code> nó (kế thừa). Tuy nhiên, làm vậy cũng có hạn chế là rất khó tùy chỉnh các behavior sau này. Ví dụ như tình huống muốn <code class=\"language-text\">extend</code> không chỉ một mà nhiều <code class=\"language-text\">class</code></p>\n<p>Đôi khi, <em>miệng đời</em> cũng đồn đại rằng việc dùng class khiến \"bạn bị khóa cứng\" trong thiết kế ban đầu vì việc thay đổi kiến trúc của các class thì rất chi là tốn công. Với việc dùng composition, thay vì extend, bạn dữ nguyên hiện trạng của một instance, sử dụng trực tiếp từ instance này và cũng có thể làm gì đó kết hợp với nhiều thứ khác, có nhiều đất diễn hơn.</p>\n<p>Nói chung, ngành phần mềm đã bỏ việc model các UI component như một dạng kế thừa nhiều tầng nhiều cấp.</p>\n<p>Không có nói inheritance lúc nào cũng \"tệ\", nó chỉ không đủ \"bén như dao lam\", sử dụng cần phải tiết chế, việc kế thừa đa cấp ở một độ sâu nhất định, đòi hỏi bạn đủ kiên nhẫn để giải quyết các vấn đề của nó.</p>\n<blockquote>\n<p>If you write your code in a style that composes functions in some way before calling them, and there are other humans on your team, make sure that you’re getting concrete benefits from this approach. It is not “cleaner” or “better”, and there is a price to pay for “beautiful” but indirect code.</p>\n</blockquote>\n<p>Tạm kết: Nếu bạn làm việc trong team, hãy đảm bảo mọi người nhất trí với nhau lợi ích mà nó mang lại từ cách làm này. Nó không liên quan gì tới việc \"cleaner-better\", nó luôn có cái giá phải trả cho \"beautiful\" nhưng mà code không trực quan</p>\n<p><a href=\"https://whatthefuck.is/composition\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">composition - <em>Dan’s JavaScript Glossary</em></a></p>\n","cover_image":"","related":[{"id":"40cc46c7d4b3636c0af94b280aa14af6","path":"/2017-10-11-react-bind-pattern-5-cach-tham-chieu-this/","title":"React Bind Pattern: 5 cách chỉ định tham chiếu this","desc":"Để thay đổi ngữ cảnh của chữ this trong javascript, sử dụng ở đâu và như thế nào cho hợp lý nhất"},{"id":"c288e21d08d57a4cc39d7265faf2e95f","path":"/2019-09-20-gioi-thieu-iife-cua-javascript/","title":"IIFE trong javascript là cái gì vại","desc":"Giới thiệu về Íp-Phi trong javascript, tuy không còn dùng nhiều nữa, nhưng vẫn là một kiến thức tốt cần biết"},{"id":"cc966bcacf4a3f8f4a9f2abf03463e59","path":"/2019-12-23-9-cau-hoi-ve-promise/","title":"9 câu hỏi lắc léo về Promise","desc":"Vài câu hỏi Promise, ôn tập kiến thức cho bạn cần đi phỏng vấn"}]}},"context":{}}