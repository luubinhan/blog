{"hash":"0395a9475e6dcec202a1209b8bd40b74ee081359","data":{"post":{"title":"Interview React Developer thì hỏi gì?","path":"/interview-react-developer-thi-hoi-gi/","date":"2017-07-17","timeToRead":3,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"},{"id":"react","title":"react","path":"/tag/react/"}],"desc":"Một vài câu hỏi để kiểm tra mức độ am hiểu react của một lập trình viên frontend","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#chuy%E1%BB%87n-g%C3%AC-x%E1%BA%A3y-ra-khi-g%E1%BB%8Di-setstate-\">Chuyện gì xảy ra khi gọi <code class=\"language-text\">setState</code> ?</a></li>\n<li><a href=\"#s%E1%BB%B1-kh%C3%A1c-nhau-gi%E1%BB%AFa-element-v%C3%A0-component-trong-react\">Sự khác nhau giữa Element và Component trong React?</a></li>\n<li><a href=\"#khi-n%C3%A0o-th%C3%AC-s%E1%BB%AD-d%E1%BB%A5ng-class-component-v%C3%A0-functional-component\">Khi nào thì sử dụng Class Component và Functional Component</a></li>\n<li><a href=\"#ref-trong-react-d%C3%B9ng-%C4%91%E1%BB%83-l%C3%A0m-g%C3%AC\"><code class=\"language-text\">Ref</code> trong React dùng để làm gì</a></li>\n<li><a href=\"#key-trong-react-l%C3%A0-g%C3%AC\">Key trong React là gì</a></li>\n<li><a href=\"#s%E1%BB%B1-kh%C3%A1c-nhau-gi%E1%BB%AFa-controlled-component-v%C3%A0-uncontrolled-component\">Sự khác nhau giữa controlled component và uncontrolled component</a></li>\n<li><a href=\"#%C4%91%E1%BB%83-g%E1%BB%8Di-ajax-s%E1%BB%AD-d%E1%BB%A5ng-s%E1%BB%B1-ki%E1%BB%87n-n%C3%A0o-c%E1%BB%A7a-lifecycle\">Để gọi AJAX, sử dụng sự kiện nào của lifecycle?</a></li>\n<li><a href=\"#shouldcomponentupdate-d%C3%B9ng-%C4%91%E1%BB%83-l%C3%A0m-g%C3%AC\"><code class=\"language-text\">shouldComponentUpdate</code> dùng để làm gì</a></li>\n<li><a href=\"#build-product-b%E1%BA%B1ng-c%C3%A1ch-n%C3%A0o\">Build Product bằng cách nào?</a></li>\n<li><a href=\"#t%E1%BA%A1i-sao-n%C3%AAn-s%E1%BB%AD-d%E1%BB%A5ng-reactchildrenmap-thay-v%C3%AC-propschildrenmap\">Tại sao nên sử dụng <code class=\"language-text\">React.Children.map()</code> thay vì <code class=\"language-text\">props.children.map()</code></a></li>\n<li><a href=\"#events-%C4%91%C6%B0%E1%BB%A3c-x%E1%BB%AD-l%C3%BD-trong-react-nh%C6%B0-th%E1%BA%BF-n%C3%A0o\">Events được xử lý trong React như thế nào?</a></li>\n<li><a href=\"#s%E1%BB%B1-kh%C3%A1c-nhau-gi%E1%BB%AFa-createelement-v%C3%A0-cloneelement\">Sự khác nhau giữa <code class=\"language-text\">createElement</code> và <code class=\"language-text\">cloneElement</code></a></li>\n<li><a href=\"#argument-th%E1%BB%A9-2-c%E1%BB%A7a-setstate-d%C3%B9ng-%C4%91%E1%BB%83-l%C3%A0m-g%C3%AC\">Argument thứ 2 của <code class=\"language-text\">setState</code> dùng để làm gì</a></li>\n<li><a href=\"#%C4%91o%E1%BA%A1n-code-sau-sai-%E1%BB%9F-%C4%91%C3%A2u\">Đoạn code sau sai ở đâu</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"chuyện-gì-xảy-ra-khi-gọi-setstate-\"><a href=\"#chuy%E1%BB%87n-g%C3%AC-x%E1%BA%A3y-ra-khi-g%E1%BB%8Di-setstate-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Chuyện gì xảy ra khi gọi <code class=\"language-text\">setState</code> ?</h2>\n<p>Đầu tiên, object được truyền trong <code>setState</code> sẽ được merge với state hiện tại của component, dựa trên sự thay đổi của object này, UI được update với state mới.</p>\n<p>Để làm được chuyện này, React sẽ dựng một cây React Element mới, so sánh sự khác nhau của cây element mới và cây element trước đó, React biết được chính xác chỉ cần update phần UI nào đã bị thay đổi.</p>\n<h2 id=\"sự-khác-nhau-giữa-element-và-component-trong-react\"><a href=\"#s%E1%BB%B1-kh%C3%A1c-nhau-gi%E1%BB%AFa-element-v%C3%A0-component-trong-react\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sự khác nhau giữa Element và Component trong React?</h2>\n<p>React Element ám chỉ những gì thấy trên màn hình.</p>\n<p>React component là một function hoặc class có hoặc không có input và sẽ trả về một React element.</p>\n<h2 id=\"khi-nào-thì-sử-dụng-class-component-và-functional-component\"><a href=\"#khi-n%C3%A0o-th%C3%AC-s%E1%BB%AD-d%E1%BB%A5ng-class-component-v%C3%A0-functional-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khi nào thì sử dụng Class Component và Functional Component</h2>\n<p>Nếu component có state và các phương thức của lifecycle, sử dụng <strong>Class Component</strong>, ngược lại dùng <strong>functional component</strong></p>\n<h2 id=\"ref-trong-react-dùng-để-làm-gì\"><a href=\"#ref-trong-react-d%C3%B9ng-%C4%91%E1%BB%83-l%C3%A0m-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">Ref</code> trong React dùng để làm gì</h2>\n<p>Ref để truy cập trực tiếp đến DOM sau khi render</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<h2 id=\"key-trong-react-là-gì\"><a href=\"#key-trong-react-l%C3%A0-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Key trong React là gì</h2>\n<p>Key giúp React theo dõi sự thay đổi của một item trong list. Tại sao thêm key? để <strong>tối ưu performance</strong>, giúp React tìm nhanh tới element đó khi cần.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">todoItems</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task<span class=\"token punctuation\">,</span> uid</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>uid<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"sự-khác-nhau-giữa-controlled-component-và-uncontrolled-component\"><a href=\"#s%E1%BB%B1-kh%C3%A1c-nhau-gi%E1%BB%AFa-controlled-component-v%C3%A0-uncontrolled-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sự khác nhau giữa controlled component và uncontrolled component</h2>\n<p><strong>Controlled Component</strong>: <code class=\"language-text\">prop</code> hoặc <code class=\"language-text\">state</code> của component được gán cho giá trị DOM</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>text<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">username</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">updateUsername</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p><strong>Uncontrolled Component</strong>: giá trị của DOM thì do DOM quản</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>text<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">input</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<h2 id=\"để-gọi-ajax-sử-dụng-sự-kiện-nào-của-lifecycle\"><a href=\"#%C4%91%E1%BB%83-g%E1%BB%8Di-ajax-s%E1%BB%AD-d%E1%BB%A5ng-s%E1%BB%B1-ki%E1%BB%87n-n%C3%A0o-c%E1%BB%A7a-lifecycle\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Để gọi AJAX, sử dụng sự kiện nào của lifecycle?</h2>\n<p><code class=\"language-text\">componentDidMount</code></p>\n<h1 id=\"shouldcomponentupdate-dùng-để-làm-gì\"><a href=\"#shouldcomponentupdate-d%C3%B9ng-%C4%91%E1%BB%83-l%C3%A0m-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">shouldComponentUpdate</code> dùng để làm gì</h1>\n<p><code class=\"language-text\">shouldComponentUpdate</code> cho phép can thiệp quá trình update UI của component và các component con của nó. Nếu return <code class=\"language-text\">true</code> thì update, ngược lại <code class=\"language-text\">false</code></p>\n<h2 id=\"tại-sao-nên-sử-dụng-reactchildrenmap-thay-vì-propschildrenmap\"><a href=\"#t%E1%BA%A1i-sao-n%C3%AAn-s%E1%BB%AD-d%E1%BB%A5ng-reactchildrenmap-thay-v%C3%AC-propschildrenmap\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao nên sử dụng <code class=\"language-text\">React.Children.map()</code> thay vì <code class=\"language-text\">props.children.map()</code></h2>\n<p><code class=\"language-text\">props.children</code> chưa chắc lúc nào cũng là <code class=\"language-text\">array</code>. Ví dụ</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Parent</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Welcome.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Parent</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Nếu sử dụng <code class=\"language-text\">props.children.map</code> trong Parent sẽ bị lỗi vì <code class=\"language-text\">props.children</code> là một object không phải array.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Parent</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Welcome.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">props.children will now be an array</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Parent</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p><code class=\"language-text\">React.Children.map</code> cho phép <code class=\"language-text\">props.children</code> là <code class=\"language-text\">array</code> hoặc <code class=\"language-text\">object</code> đều được.</p>\n<h2 id=\"events-được-xử-lý-trong-react-như-thế-nào\"><a href=\"#events-%C4%91%C6%B0%E1%BB%A3c-x%E1%BB%AD-l%C3%BD-trong-react-nh%C6%B0-th%E1%BA%BF-n%C3%A0o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Events được xử lý trong React như thế nào?</h2>\n<p>Các hàm xử lý event trong React sẽ được truyền vào một instance của <code class=\"language-text\">SyntheticEvent</code>, <code class=\"language-text\">SyntheticEvent</code> cũng giống như những native event bình thường của Browser trừ việc nó có thể làm việc trên tất cả các trình duyệt.</p>\n<p>React không attach event vô các child node, mà sẽ lắng nghe tất cả các event sử dụng 1 event listener duy nhất, Với mục đích là để tăng performance và React không cần phải update lại event listener khi update DOM.</p>\n<h2 id=\"sự-khác-nhau-giữa-createelement-và-cloneelement\"><a href=\"#s%E1%BB%B1-kh%C3%A1c-nhau-gi%E1%BB%AFa-createelement-v%C3%A0-cloneelement\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sự khác nhau giữa <code class=\"language-text\">createElement</code> và <code class=\"language-text\">cloneElement</code></h2>\n<p><code class=\"language-text\">createElement</code> là để tạo element, <code class=\"language-text\">cloneElement</code> copy element và đưa vào các props mới.</p>\n<h2 id=\"argument-thứ-2-của-setstate-dùng-để-làm-gì\"><a href=\"#argument-th%E1%BB%A9-2-c%E1%BB%A7a-setstate-d%C3%B9ng-%C4%91%E1%BB%83-l%C3%A0m-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Argument thứ 2 của <code class=\"language-text\">setState</code> dùng để làm gì</h2>\n<p>callback function, function sẽ chạy sau khi <code class=\"language-text\">component</code> được <code class=\"language-text\">render</code> lại với state mới.</p>\n<p><code class=\"language-text\">setState</code> là một phương thức bất đồng bộ (asynchronous)</p>\n<h2 id=\"đoạn-code-sau-sai-ở-đâu\"><a href=\"#%C4%91o%E1%BA%A1n-code-sau-sai-%E1%BB%9F-%C4%91%C3%A2u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Đoạn code sau sai ở đâu</h2>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> streak<span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">streak</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Không sai gì cả, ít người biết rằng khi <code class=\"language-text\">setState</code> có thể truyền vào <code class=\"language-text\">previous state</code>.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://tylermcginnis.com/react-interview-questions/\">📜 React Interview Questions</a></p>\n","cover_image":""}},"context":{}}