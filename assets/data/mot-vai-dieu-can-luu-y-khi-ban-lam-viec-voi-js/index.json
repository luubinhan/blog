{"hash":"e579e30389c3a92ccdc1669d7f43640a00bbbfb5","data":{"post":{"title":"Một vài điều cần lưu ý khi bạn làm việc với JS","path":"/mot-vai-dieu-can-luu-y-khi-ban-lam-viec-voi-js/","slug":"2021-03-28-mot-vai-luu-y-voi-javascript","date":"2021-03-28","timeToRead":2,"tags":[{"id":"js","title":"js","path":"/tag/js/"},{"id":"hard","title":"hard","path":"/tag/hard/"}],"desc":"Khi bạn làm việc với JS đủ lâu và ăn hành đủ nhiều bạn sẽ cần biết đến những đặc điểm rất riêng của JS","content":"<h2 id=\"arraysort-cho-kết-quả-khác-nhau-trên-các-trình-duyệt-khác-nhau\"><a href=\"#arraysort-cho-k%E1%BA%BFt-qu%E1%BA%A3-kh%C3%A1c-nhau-tr%C3%AAn-c%C3%A1c-tr%C3%ACnh-duy%E1%BB%87t-kh%C3%A1c-nhau\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">Array.sort()</code> cho kết quả khác nhau trên các trình duyệt khác nhau</h2>\n<p>Khi bạn cần <em>sort</em> các phần tử trong một mảng, khả năng rất cao là bạn sẽ sử dụng <em>callback</em> như: <code class=\"language-text\">sort((x, y) =&gt; x &lt; y)</code>.</p>\n<p>Đây là kết quả của Chrome và Firefox</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--s1SlEvCn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63i4pdemdrcltmlcfmy7.png\"></p>\n<p>Hàm <em>callback</em> chúng ta truyền vào phải <em>return</em> một trong ba giá trị 1, 0, -1, vì chúng ta đang return một giá trị <em>boolean</em>, nên sẽ <strong>tùy vào trình duyệt</strong> quyết định</p>\n<h2 id=\"sử-dụng-jsonstringify-với-tham-số\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-jsonstringify-v%E1%BB%9Bi-tham-s%E1%BB%91\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng <code class=\"language-text\">JSON.stringify</code> với tham số</h2>\n<p>Là một web developer, ít nhất một lần trong đời bạn sẽ sử dụng đến hàm <code class=\"language-text\">JSON.stringify</code>. Nhưng bạn có biết hàm này còn một tham số thứ 2 có thể truyền vào? Nó sẽ được sử dụng như một danh sách <strong>whitelist</strong> khi <em>parse</em> (chỉ có những giá trị <code class=\"language-text\">key</code> nằm trong whitelist mới được <em>parse</em>)</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1m2M-1nL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mot0de4qunp1jz9drti.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1m2M-1nL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mot0de4qunp1jz9drti.png\" alt=\"json_stringify_1\"></a></p>\n<p>Không chỉ giới hạn là một mảng, có thể truyền một function để <em>validate</em>, <em>replace</em>, <em>parse</em> cặp <code class=\"language-text\">key</code>, <code class=\"language-text\">value</code> nhận được</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--LKLRzNjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87gpt399syw126i3lnw5.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--LKLRzNjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87gpt399syw126i3lnw5.png\" alt=\"json_stringify_2\"></a></p>\n<h2 id=\"arrayfilter-không-làm-việc-với-promise\"><a href=\"#arrayfilter-kh%C3%B4ng-l%C3%A0m-vi%E1%BB%87c-v%E1%BB%9Bi-promise\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">Array.filter()</code> không làm việc với Promise</h2>\n<p>Một công việc cũng hay sử lý trên mảng: thực hiện một số xử lý <strong>async</strong> trên các phần tử trong mảng, lặp qua các phần tử để xử lý dữ liệu rồi <em>filter</em> những phần tử không mong muốn.</p>\n<p>Ví dụ, để kiểm tra user có quyền thực hiện một số tính năng nào đó không, chúng ta cần kiểm tra tất cả các giá trị trong mảng <code class=\"language-text\">permissions</code></p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--zxtRNXjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8ph059u9575f29hmqjz.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--zxtRNXjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8ph059u9575f29hmqjz.png\" alt=\"filter_1\"></a></p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--RY4XUoXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5d2v4ingkoxlvrjrynwv.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--RY4XUoXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5d2v4ingkoxlvrjrynwv.png\" alt=\"filter_3\"></a></p>\n<p>Code trên hoàn toàn hợp lý và đúng 100%</p>\n<p>Tính huống tiếp theo, nếu bên trong hàm <code class=\"language-text\">userCan</code> chúng ta có một xử lý <code class=\"language-text\">async</code>?</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--4PNbNENY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/as0sblsgjwbz52jqah2j.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--4PNbNENY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/as0sblsgjwbz52jqah2j.png\" alt=\"filter_4\"></a></p>\n<p>Không chạy đúng đâu. Để sửa lại cho nó chạy đúng, chúng ta phải dùng <code class=\"language-text\">map</code> trước khi dùng đến <code class=\"language-text\">filter</code></p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dK138iQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p5nocab1xkyjss5jl09.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dK138iQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p5nocab1xkyjss5jl09.png\" alt=\"filter_5\"></a></p>\n<h2 id=\"nullish-vs-or\"><a href=\"#nullish-vs-or\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nullish vs OR</h2>\n<p>Ai cũng biết viết <code class=\"language-text\">OR</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> buzz <span class=\"token operator\">||</span> <span class=\"token string\">'fallback'</span></code></pre>\n<p>Trong trường hợp bạn muốn <code class=\"language-text\">foo</code> bằng 0 khi <code class=\"language-text\">buzz</code> bằng 0, nói cách khác <code class=\"language-text\">0</code> vẫn được xem là một giá trị hợp lệ thì cách viết trên toang.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--QoLPcQ4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai8rwv56h5ymun1vpi6h.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--QoLPcQ4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai8rwv56h5ymun1vpi6h.png\" alt=\"nullish\"></a></p>\n<p>Nullish tương đối mới và được hỗ trợ từ TypeScript 3.7, các phiên bản trình duyệt mới, cũng nên lưu ý điểm này nhé.</p>\n<h2 id=\"promise-constructor-anti-pattern\"><a href=\"#promise-constructor-anti-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Promise constructor anti-pattern</h2>\n<p>Tạo một Promise không vì một lý do gì cả.</p>\n<p>Nếu bạn có một xử lý <code class=\"language-text\">async</code> thì bản chất nó đã <strong>return một promise</strong>, việc bạn <code class=\"language-text\">new Promise</code> chẳng có ý nghĩa gì cả</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--C-1fI-Bz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98tp5ldyr4065np0skt5.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--C-1fI-Bz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98tp5ldyr4065np0skt5.png\" alt=\"promise_1\"></a></p>\n<p>Chỉ đơn giản return <code class=\"language-text\">fetchThing()</code> là được (<code class=\"language-text\">fetchThing</code> là một async function)</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--pHlwjR8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpyxc4hrmvepkthp1wyb.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--pHlwjR8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpyxc4hrmvepkthp1wyb.png\" alt=\"promise_3\"></a></p>\n<h2 id=\"catch-await-error\"><a href=\"#catch-await-error\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Catch await error</h2>\n<p>Nếu sử dụng Promise bạn sẽ dùng <code class=\"language-text\">then</code> và <code class=\"language-text\">catch</code>, còn dùng <code class=\"language-text\">async/await</code> bạn sẽ dùng <code class=\"language-text\">try/catch</code> như thế này</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--xRTdGBFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w77xvropho5fnzjr3lzq.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--xRTdGBFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w77xvropho5fnzjr3lzq.png\" alt=\"catch_1\"></a></p>\n<p>Một cách <em>thần kỳ</em> chúng ta vẫn có thể dùng <code class=\"language-text\">.catch</code> ngay trên await</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9_RtvCXJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4sca69yg3cn1t2w3q1e.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9_RtvCXJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4sca69yg3cn1t2w3q1e.png\" alt=\"catch_2\"></a></p>\n<p>Nếu ngồi chiêm nghiệm thật kỹ bạn sẽ hiểu vì sao chúng ta vẫn viết được như vậy, gợi ý await là một cách viết cũng dựa trên Promise mà ra</p>\n<h2 id=\"optional-chain-trên-function\"><a href=\"#optional-chain-tr%C3%AAn-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Optional chain trên function</h2>\n<p>Optional chain trong <code class=\"language-text\">object</code> không xa lạ, nhưng optional chain trên function thì bạn có dùng chưa?</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--GS_uEqqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57rtruthopibgpvl5pcz.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--GS_uEqqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57rtruthopibgpvl5pcz.png\" alt=\"optional_1\"></a></p>\n<p>Một tình huống bạn sẽ sử dụng rất nhiều trong React là callback prop. Sẽ không còn cần phải viết <code class=\"language-text\">onClick={onClick &amp;&amp; () =&gt; onClick(param)}</code></p>\n<p><a href=\"https://dev.to/joakimunge/10-things-2020-has-taught-me-nfj\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">10 Things 2020 has taught me</a></p>\n","cover_image":"","related":[{"id":"b20b73ac80de85bd787312886b67ab61","path":"/huong-dan-co-ban-de-lam-viec-voi-javascript-regular-expression/","title":"Hướng dẫn cơ bản để làm việc với Javascript regular expression","desc":"Những khái niệm quan trọng nhất kèm ví dụ dễ hiểu nhất để bạn không còn sợ mỗi khi đụng vô regular expression"},{"id":"2637fdfac069208e010459580d417f63","path":"/5-dieu-can-nho-khi-lam-viec-voi-service-worker/","title":"5 điều cần nhớ khi làm việc với service worker","desc":"Năm điều nhỏ nhỏ, nhưng rất hay ho cần thiết, cần biết"},{"id":"b8095fcc4fddb26736d28255b2cd38ed","path":"/lam-viec-voi-form-trong-react/","title":"Làm việc với Form trong React","desc":"Xử lý form trong React, căn bản nhất"},{"id":"261b6ab3101f36044d757da3c9d8d2d0","path":"/lam-viec-voi-console-trong-javascript/","title":"Làm việc với console trong javascript","desc":"Một web developer chân chính là người biết sử dụng console.log :D. Tuy nhiên cũng nên biết rằng console nó còn rất nhiều phương thức khác nữa"}]}},"context":{}}