{"hash":"ecc8ecd7f5d1caebd4de67fcaaf53086d59cd360","data":{"post":{"title":"Micro frontend tại sao và như thế nào","path":"/2020-10-15-micro-frontend-giai-thich-huong-dan/","slug":"2020-10-15-micro-frontend-giai-thich-huong-dan","date":"2020-10-15","timeToRead":11,"tags":[{"id":"dam-dao","title":"dam-dao","path":"/tag/dam-dao/"},{"id":"hoc-thuat","title":"hoc-thuat","path":"/tag/hoc-thuat/"}],"desc":"Lướt qua một vài điểm về Micro Frontend, ý tưởng chính và các vấn đề được quan tâm","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#t%E1%BA%A1i-sao-b%E1%BA%A1n-c%E1%BA%A7n-bi%E1%BA%BFt-%C4%91%E1%BA%BFn-micro-frontend\">Tại sao bạn cần biết đến Micro frontend</a></li>\n<li><a href=\"#micro-frontend-l%C3%A0-c%C3%A1i-g%C3%AC\">Micro frontend là cái gì</a></li>\n<li>\n<p><a href=\"#hi%E1%BB%87n-th%E1%BB%B1c-h%C3%B3a-nh%C6%B0-th%E1%BA%BF-n%C3%A0o\">Hiện thực hóa như thế nào</a></p>\n<ul>\n<li><a href=\"#t%C6%B0%C6%A1ng-t%C3%A1c-gi%E1%BB%AFa-c%C3%A1c-%E1%BB%A9ng-d%E1%BB%A5ng\">Tương tác giữa các ứng dụng</a></li>\n<li><a href=\"#th%C6%B0-vi%E1%BB%87n-component-d%C3%B9ng-chung\">Thư viện component dùng chung</a></li>\n<li><a href=\"#styling\">Styling</a></li>\n<li><a href=\"#c%C3%A1c-c%C3%A1ch-%C4%91%E1%BB%83-integrate\">Các cách để integrate</a></li>\n</ul>\n</li>\n<li><a href=\"#k%E1%BA%BFt\">Kết</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"tại-sao-bạn-cần-biết-đến-micro-frontend\"><a href=\"#t%E1%BA%A1i-sao-b%E1%BA%A1n-c%E1%BA%A7n-bi%E1%BA%BFt-%C4%91%E1%BA%BFn-micro-frontend\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tại sao bạn cần biết đến Micro frontend</h2>\n<p>Vấn đề cần giải quyết:</p>\n<ul>\n<li>Ứng dụng càng lúc càng phình ra về quy mô, cũng như độ phức tạp</li>\n<li><strong>Một codebase FE</strong> duy nhất mà muốn maintain thì chỉ có <em>gặp ác mộng hằng đêm</em></li>\n<li>Nhiều team FE, mỗi team chỉ làm việc trên một phần tính năng nào đó rất cụ thể, chỉ 1 codebase mà hơn 5 team vào làm việc trên đó thì thôi xong</li>\n<li>Bạn muốn có 1 codebase viết bằng typescript, một codebase viết js, một feature được build bằng React, feature khác được build Vue. Nếu bạn có thắc mắc tại sao lại có nhu cầu này? Câu trả lời là vì bạn ko ràng buộc team vào một technical nào cả, team có thể tự quyết định</li>\n<li>Nâng cấp từng project sẽ dễ hơn nhiều</li>\n</ul>\n<h2 id=\"micro-frontend-là-cái-gì\"><a href=\"#micro-frontend-l%C3%A0-c%C3%A1i-g%C3%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Micro frontend là cái gì</h2>\n<p>Đây là cách tiếp cận cũng <em>na ná</em> như microservice, thay vì 1, chúng ta có nhiều codebase, và trên từng codebase chỉ quản lý một tính năng cụ thể mà thôi.</p>\n<p>Có thể xem một ứng dụng web là một bộ kết hợp của nhiều tính năng, mỗi một tính năng như vậy được quản lý bởi một team</p>\n<p><img src=\"https://microfrontends.com/img/deployment.png\" alt=\"A flow diagram showing 3         independent deployment pipelines for 3 different micro frontends, which         are then composed into a single app after deployment\"></p>\n<p>Thuật ngữ này được giới thiệu lần đầu vào 2016 bởi <a href=\"https://www.thoughtworks.com/radar/techniques/micro-frontends\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Thourghtworks Tech Radar</a></p>\n<blockquote>\n<p>An architectural style where independently deliverable frontend applications are composed into a greater whole</p>\n</blockquote>\n<p><img src=\"https://microfrontends.com/img/radar.png\" alt=\"Micro frontends on the ThoughtWorks tech radar\"></p>\n<p>Một cách trực quan hơn bạn có thể tham khảo hình sau</p>\n<p><img src=\"https://microfrontends.com/img/composition.png\" alt=\"A wireframe of an example website,         showing a container application that embeds a micro frontend within it\"></p>\n<p>Còn đây là demo của trang microfrontends.com <a href=\"https://demo.microfrontends.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://demo.microfrontends.com/</a></p>\n<h2 id=\"hiện-thực-hóa-như-thế-nào\"><a href=\"#hi%E1%BB%87n-th%E1%BB%B1c-h%C3%B3a-nh%C6%B0-th%E1%BA%BF-n%C3%A0o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hiện thực hóa như thế nào</h2>\n<p>Để có thể hiện thực hóa hoàn chỉnh micro frontend sẽ bao gồm rất nhiều thứ, ở đây chỉ tóm tắt một số vấn đề cơ bản cần giải quyết</p>\n<h3 id=\"tương-tác-giữa-các-ứng-dụng\"><a href=\"#t%C6%B0%C6%A1ng-t%C3%A1c-gi%E1%BB%AFa-c%C3%A1c-%E1%BB%A9ng-d%E1%BB%A5ng\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tương tác giữa các ứng dụng</h3>\n<p>Một câu hỏi được đặt ra đầu tiên là nếu tách ra thành nhiều bộ source như vậy, làm sao chúng có thể nói chuyện được với nhau? Một cách tổng quát, <strong>nên hạn chế việc trao đổi thông tin qua lại ít chừng nào tốt chừng đó</strong>, bởi vì nếu bạn làm ngược lại, nghĩa là bạn đang lặp lại vấn đề chúng ta muốn giải quyết ngay từ đâu: <strong>decoupling</strong> các tính năng với nhau.</p>\n<p>Nhưng việc trao đổi giữa các ứng dụng với nhau là không tránh khỏi và cần thiết, chúng ta chỉ tiết chế chứ không loại bỏ hết, <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Custom event</a> là một cách, cách khác, lấy mô hình truyền callback và data từ trên xuống trong React để làm <strong>kênh</strong> trao đổi thông tin, làm như thế nó sẽ rất tường minh, cách thứ 3 là thông qua thanh đường dẫn trên trình duyệt, chút nữa nói kỹ hơn.</p>\n<p>Tựa chung, chúng ta không share state, mà chỉ share dữ liệu trong database như microservice.</p>\n<h3 id=\"thư-viện-component-dùng-chung\"><a href=\"#th%C6%B0-vi%E1%BB%87n-component-d%C3%B9ng-chung\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thư viện component dùng chung</h3>\n<p>Nó chung, ý tưởng <strong>re-use</strong> lại những component UI không có gì mới, nghe cũng rất hợp lý, mặc dù ai cũng biết việc đó khó làm.</p>\n<p>Sai lầm thường thấy là việc tạo các component như vậy quá sớm, việc <em>hào hứng</em> quá mức vào xây dựng một Framework UI chuẩn không cần chỉnh, viết một lần xài mãi mãi, thống nhất giao diện trên mọi mặt trận là điều thường thấy ở mọi team. Tuy nhiên, trong thực tế, kinh nghiệm cho biết rằng việc đó rất khó, nếu không muốn nói là không thể, không thể ngồi nghĩ ra một bộ Framework với tất cả các API cần thiết rồi đưa cho tất cả các team xài, chắc gì API đó đã đáp ứng đúng nhu cầu cho tất cả các team? Lời khuyên là các team cứ tạo ra những component riêng trong codebase nếu họ thấy cần, dù cho nó có bị duplicate đây nữa cũng chẳng sao. Và khi đã chín mùi, những API nào cần thiết sẽ hiện nguyên hình, chúng ta đưa những cho đang bị duplicate vào trong thư viện dùng chung.</p>\n<p>Tất nhiên cũng có những ngoại lệ, những component mà nhìn vào chúng ta biết ngay là cần đưa vào share component, như icon, label, button, autocomplete, drop-down, search, table. Và nhớ là chỉ đưa đúng UI logic, đừng đưa bất kỳ business logic và domain logic vào đây. Ví dụ như một component <code class=\"language-inline-text\">ProductTable</code> cho riêng cái domain Product là không nên, chỉ nên làm một cái component <code class=\"language-inline-text\">Table</code>.</p>\n<p>Thoạt nghe làm một share component có vẻ đơn giản, nhưng nó lại là công việc đòi hỏi kỹ thuật phải rất cứng tay, và người có nhúng tay vào tất cả các team.</p>\n<h3 id=\"styling\"><a href=\"#styling\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Styling</h3>\n<p>Styling 2020 là một câu chuyện dài, như mình đã kể trong một <a href=\"https://luubinhan.github.io/blog/2020-05-22-cam-giac-viet-css-nam-2020/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bài viết</a>, tựa chung mà nói bạn có thể dùng BEM, dùng SASS, dùng CSS module, dùng CSS-in-JS, dùng Styled Component, dùng Tailwind, kiểu gì cũng được, miễn đảm bảo được style không chồng chéo lên nhau, thằng nào độc lập thằng đó, và tự tin đoạn code nó sẽ chạy như <strong>đúng như lường trước</strong>.</p>\n<h3 id=\"các-cách-để-integrate\"><a href=\"#c%C3%A1c-c%C3%A1ch-%C4%91%E1%BB%83-integrate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các cách để integrate</h3>\n<p>Để hiện thực hóa ý tưởng của micro frontend, cũng có nhiều cách làm, cách nào cũng có đánh đổi. Tựu chung, nếu xét theo hướng giao diện, chúng ta có thể tổ chức nó theo dạng một ứng dụng dạng <strong>container</strong>, bao gồm những thành phần chung như <em>header</em>, <em>menu</em>, và các <em>micro frontend</em> sẽ nhúng vào phần <strong>ruột</strong> của trang</p>\n<p><img src=\"https://martinfowler.com/articles/micro-frontends/composition.png\" alt=\"A web page with boxes drawn around different sections. One box wraps the whole page, labelling it as the &#x27;container application&#x27;. Another box wraps the main content (but not the global page title and navigation), labelling it as the &#x27;browse micro frontend&#x27;\"></p>\n<p><strong>Cách 1: composition dùng server side template</strong></p>\n<p>Với một cách <em>không chính thống lắm</em> cho việc phát triển code FE, chúng ta render HTML ở phía server, với nhiều bộ template khác nhau. Chúng ta có một file <code class=\"language-inline-text\">index.html</code> với các phần tử chung, server sẽ quyết định phần <em>ruột</em> trả về cho từng trang</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dir</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ltr<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Feed me<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>🍽 Feed me<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--# include file=\"$PAGE.html\" --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Ở ví dụ này đang dùng với Nginx, biến <code class=\"language-inline-text\">$PAGE</code> sẽ ứng với URL đang được request</p>\n<div class=\"gridsome-highlight\" data-language=\"nginx\"><pre class=\"language-nginx\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token directive\"><span class=\"token keyword\">listen</span> <span class=\"token number\">8080</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">server_name</span> localhost</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token directive\"><span class=\"token keyword\">root</span> /usr/share/nginx/html</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">index</span> index.html</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">ssi</span> <span class=\"token boolean\">on</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># Redirect / đến /browse</span>\n    <span class=\"token directive\"><span class=\"token keyword\">rewrite</span> ^/$ http://localhost:8080/browse redirect</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># Dùng HTML nào để insert dựa vào URL</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> /browse</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token directive\"><span class=\"token keyword\">set</span> <span class=\"token variable\">$PAGE</span> <span class=\"token string\">'browse'</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> /order</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token directive\"><span class=\"token keyword\">set</span> <span class=\"token variable\">$PAGE</span> <span class=\"token string\">'order'</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> /profile</span> <span class=\"token punctuation\">{</span>\n      set $PAGE 'profile'\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\"># Cho phép render ở index.html</span>\n    <span class=\"token directive\"><span class=\"token keyword\">error_page</span> <span class=\"token number\">404</span> /index.html</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Kỹ thuật này mình không nắm lắm, nên cũng chỉ để đây cho các bạn tham khảo, trong thực tế mình gặp và làm việc với những cách làm bên dưới nhiều hơn.</p>\n<p><strong>Cách 2: Integrate lúc build</strong></p>\n<p>Cách này sẽ publish cái micro frontend ở dạng package, container sẽ khai báo những micro frontend này ở dạng dependency. File <code class=\"language-inline-text\">package.json</code> nó sẽ trông như thế này:</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@feed-me/container\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A food delivery web app\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@feed-me/browse-restaurants\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.2.3\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@feed-me/order-food\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.5.6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@feed-me/user-profile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.8.9\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Thoạt nhìn, cũng khá hợp lý, tuy nhiên nếu để ý, bạn sẽ thấy chúng ta phải re-compile và release trên từng cục dependency, rồi sao đó lại phải release tiếp container. Đây vẫn không phải là cách làm được khuyến khích.</p>\n<p><strong>Cách 3: Integrate lúc run-time bằng iframe</strong></p>\n<p>Đây cũng là cách mà dự án mình đang dùng, một cách tiếp cận đơn giản nhất để compose nhiều ứng dụng với nhau trong trình duyệt đã có từ rất rất lâu. Lợi ích có thể kể thêm của cách làm này là phần styling và biến global đều độc lập và không bị đụng độ lẫn nhau</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Feed me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Welcome to Feed me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>micro-frontend-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token keyword\">const</span> microFrontendsByRoute <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">'/'</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://browse.example.com/index.html'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">'/order-food'</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://order.example.com/index.html'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">'/user-profile'</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://profile.example.com/index.html'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> iframe <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'micro-frontend-container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      iframe<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> microFrontendsByRoute<span class=\"token punctuation\">[</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Nhược điểm của cách này là việc tích hợp giữa các phần của ứng dụng, như route, history, deep-link sẽ rất phức tạp, responsive cũng sẽ gặp nhiều vấn đề cần xử lý hơn.</p>\n<p><strong>Cách 4: Integrate lúc run-time bằng JavaScript</strong></p>\n<p>Đây là cách linh hoạt nhất, và được nhiều team chọn làm. Mỗi một micro frontend sẽ được nhét vào trong trang bằng thẻ <code class=\"language-inline-text\">&lt;script /></code>. Container sẽ làm nhiệm vụ cho mount micro frontend nào và thực thi các hàm liên quan để báo cho các micro frontend sẽ render ở đâu và khi nào.</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Feed me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Welcome to Feed me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">&lt;!-- Nó không render bất cứ gì cả --></span>\n    <span class=\"token comment\">&lt;!-- Nó sẽ đưa vào hàm entry-point vào `window` --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://browse.example.com/bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://order.example.com/bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://profile.example.com/bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>micro-frontend-root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token comment\">// Những global function này được nhét vào window bằng các đoạn script include ở trên</span>\n      <span class=\"token keyword\">const</span> microFrontendsByRoute <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">'/'</span><span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>renderBrowseRestaurants<span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">'/order-food'</span><span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>renderOrderFood<span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">'/user-profile'</span><span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>renderUserProfile\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> renderFunction <span class=\"token operator\">=</span> microFrontendsByRoute<span class=\"token punctuation\">[</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Sau khi đã có các hàm cần thiết,</span>\n      <span class=\"token comment\">// đưa id của element sẽ dùng để render</span>\n      <span class=\"token function\">renderFunction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'micro-frontend-root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Trên đây chỉ là ví dụ cơ bản nhất để mô tả kỹ thuật sẽ làm, thật tế có thể phải thêm thắt một số thứ khác. Không giống với cách integrate lúc build, <code class=\"language-inline-text\">bundle.js</code> có thể được deploy một cách độc lập. Và khác iframe, chúng ta có thể linh động chọn lựa việc render micro frontend nào chúng ta thích.</p>\n<p>Nếu có hứng thú với cách làm này, có thể tham khảo thêm <a href=\"https://martinfowler.com/articles/micro-frontends.html#TheExampleInDetail\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ví dụ chi tiết hơn</a></p>\n<p><strong>Cách 5: Integrate lúc run-time bằng Web Component</strong></p>\n<p>Một lựa chọn khác cũng tương tự như cách làm trên, mỗi một micro frontend sẽ được link với element</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Feed me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Welcome to Feed me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">&lt;!-- Chưa render gì cả --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://browse.example.com/bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://order.example.com/bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://profile.example.com/bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>micro-frontend-root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token comment\">// Những element type này được định nghĩa ở các script trên</span>\n      <span class=\"token keyword\">const</span> webComponentsByRoute <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">'/'</span><span class=\"token operator\">:</span> <span class=\"token string\">'micro-frontend-browse-restaurants'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">'/order-food'</span><span class=\"token operator\">:</span> <span class=\"token string\">'micro-frontend-order-food'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">'/user-profile'</span><span class=\"token operator\">:</span> <span class=\"token string\">'micro-frontend-user-profile'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> webComponentType <span class=\"token operator\">=</span> webComponentsByRoute<span class=\"token punctuation\">[</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Tạo instance và đưa vào document ứng với từng loại phù hợp</span>\n      <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'micro-frontend-root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> webComponent <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>webComponentType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      root<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>webComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Khác nhau duy nhất so với cách trên có lẽ chỉ là việc dùng <em>web component</em> thay vì một interface chúng ta tự định nghĩa.</p>\n<p><strong>Tương tác với Backend</strong></p>\n<p>Cái này chưa biết, không dám chém.</p>\n<h2 id=\"kết\"><a href=\"#k%E1%BA%BFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kết</h2>\n<p>Micro frontend có thể không lạ với một số người và khá mới với số còn lại, thực tế mà nói đã có rất nhiều dự án đang áp dụng kiến trúc này (dự án mình đang làm).</p>\n<p>Hy vọng với bài viết này bạn đã thấy công việc của những lập trình viên frontend không còn đơn thuần là việc làm sao cho trang web bay, lượn, responsive mượt mà, nếu bạn muốn tiến xa hơn, giới hạn là chân trời.</p>\n<p><strong>Các bài viết đã tham khảo</strong></p>\n<ul>\n<li><a href=\"https://martinfowler.com/articles/micro-frontends.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://martinfowler.com/articles/micro-frontends.html</a></li>\n<li><a href=\"https://microfrontends.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://microfrontends.com/</a></li>\n<li><a href=\"https://micro-frontends.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://micro-frontends.org/</a></li>\n</ul>\n","cover_image":"","related":[{"id":"5c6f9d1e159b3948f1cf4bcbae603337","path":"/2018-03-06-huong-dan-redux-van-hanh-nhu-the-nao-kem-vi-du/","title":"Redux vận hành như thế nào","desc":"Actions, reducers, action creators, middleware, pure functions, immutability,... những ngoại ngữ làm rối bất kỳ ai nếu chưa biết redux"},{"id":"2482830f7eedf36f393fccfb1042c32a","path":"/2020-10-20-import-lodash-sao-cho-dung/","title":"Import lodash như thế nào mới đúng","desc":"Nếu cần xài lodash, thì bạn xài nó sao cho hiệu quả"},{"id":"d739e46c1992596d72abeda8d90c39c8","path":"/2018-12-12-setstate-chay-nhu-the-nao/","title":"this.setState trong React chạy như thế nào","desc":"Giải đáp thắc mắc vì sao this.setState có thể update DOM, chạy được trên mobile, chạy được trên bất kỳ môi trường nào"},{"id":"43e583e222d9569c1b728d06f6b48c2e","path":"/2018-10-13-css-content-hop-le/","title":"Sử dụng CSS content như thế nào cho đúng","desc":"Thuộc tính content trong CSS thường được sử dụng cùng với 2 ghost element là after và before, những giá trị nào có thể đưa vào cho thuộc tính content này"}]}},"context":{}}