{"hash":"2614a9f464f28805085bbbd764f6609c0dea9377","data":{"post":{"title":"3 bước tối ưu hiệu năng React App bằng các API mới của React","path":"/2019-06-17-huong-dan-toi-uu-hieu-nang-react-app/","slug":"/2019-06-17-huong-dan-toi-uu-hieu-nang-react-app","date":"2019-06-17","timeToRead":3,"tags":[{"id":"react","title":"react","path":"/tag/react/"},{"id":"thu-thuat","title":"thu-thuat","path":"/tag/thu-thuat/"}],"desc":"Bài viết hướng dẫn tối ưu hiệu năng bằng memo, useMemo, useCallback","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#Reactmemo\">React.memo</a></li>\n<li><a href=\"#useMemo\">useMemo</a></li>\n<li><a href=\"#useCallback\">useCallback</a></li>\n</ul>\n<!-- /TOC -->\n<p>Khi sử dụng function component, React cung cấp 3 phương thức để tối ưu: <code class=\"language-inline-text\">React.memo</code>, <code class=\"language-inline-text\">useMemo</code>, và <code class=\"language-inline-text\">useCallback</code>, chúng ta cùng điểm qua 3 thằng này</p>\n<p>Xét ví dụ</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ListPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> title <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Header title<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>List listItems<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Component như trên (<code class=\"language-inline-text\">&lt;ListPage /></code>), khi nhận một <code class=\"language-inline-text\">data</code> mới, tất cả component con bên trong là <code class=\"language-inline-text\">Header</code> và <code class=\"language-inline-text\">List</code> sẽ re-render, mặc dù cái <code class=\"language-inline-text\">title</code> không hề thay đổi. Nếu <code class=\"language-inline-text\">Header</code> không tốn quá nhiều thời gian để render thì ko có vấn đề. Ngược lại dĩ nhiên là nếu render <code class=\"language-inline-text\">Header</code> tốn rất nhiều thời gian, chúng ta phải <strong>xây lại</strong> để tối ưu hơn.</p>\n<h2 id=\"reactmemo\"><a href=\"#reactmemo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>React.memo</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> MyComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* render using props */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-inline-text\">React.memo</code> là một HOC, <a href=\"https://luubinhan.github.io/blog/2018-11-04-gioi-thieu-react-memo-moi-trong-react-16\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">đọc lại bài này</a>, nó sẽ <strong>nhớ</strong> kết quả render của component. Nếu component trả về một output giống hệt cho cùng một prop, đưa nó vào <code class=\"language-inline-text\">React.memo</code> sẽ tiết kiệm tí thời gian.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Header</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Header<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Wrap lại trong <code class=\"language-inline-text\">React.memo</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Header</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>Header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"usememo\"><a href=\"#usememo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useMemo</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> memoizedValue <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">computeExpensiveValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Cũng tương tự nó sẽ nhớ kết quả trả về, tuy nhiên nó sẽ có thêm phần gọi là <code class=\"language-inline-text\">array dependencies</code>, là một danh sách các <strong>thằng</strong> mà nó phụ thuộc, nếu giá trị phụ thuộc thay đổi nó mới rọi render lại, không thể trả thẳng kết quả lần trước</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> widgetList <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> \n        widgets<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">w</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>w<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">totalPrice</span><span class=\"token operator\">:</span> <span class=\"token function\">someComplexFunction</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">estimatedDeliveryDate</span><span class=\"token operator\">:</span> <span class=\"token function\">someOtherComplexFunction</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span>warehouse<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>widgets<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Trong ví dụ trên, 1 component nhận một danh sách các widget, các widget này trước khi truyền vào sẽ được thêm vào 2 giá trị là <em>total price</em> và <em>delivery date</em>. Nếu giá trị các widget không thay đổi khi render lại component, thì không cần thiết phải chạy qua các hàm <code class=\"language-inline-text\">someComplexFunction</code>, <code class=\"language-inline-text\">someOtherComplexFunction</code>. Sử dụng <code class=\"language-inline-text\">useMemo</code> để ghi nhớ kết quả và bỏ qua trong trường hợp đó.</p>\n<h2 id=\"usecallback\"><a href=\"#usecallback\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>useCallback</h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> memoizedCallback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Mục đích để chặn các lần render không cần thiết giữa component cha và con</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Parent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showExtraDetails<span class=\"token punctuation\">,</span> setShowExtraDetails<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Child onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">showData</span><span class=\"token punctuation\">(</span>showExtraDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>1 component như vậy sẽ re-render cả cha và con cùng lúc, thậm chí component con có là <code class=\"language-inline-text\">PureComponent</code> được wrap bên trong <code class=\"language-inline-text\">React.memo</code> đi nữa, bởi vì <code class=\"language-inline-text\">onClick</code> sẽ khác nhau trên mỗi lần render. Sử dụng <code class=\"language-inline-text\">useCallback</code> chúng ta viết lại như sau</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Parent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showExtraDetails<span class=\"token punctuation\">,</span> setShowExtraDetails<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> handleClick <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">showData</span><span class=\"token punctuation\">(</span>showExtraDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span>showExtraDetails<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Child onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Như vậy hàm <code class=\"language-inline-text\">handleClick</code> sẽ giống nhau cho các lần render khác nhau, nó chỉ khác khi <code class=\"language-inline-text\">showExtraDetails</code> thay đổi.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://headway.io/blog/react-optimize-components-memo-usememo-usecallback\">React: Optimize Components with React.memo, useMemo, and useCallback</a></p>\n","cover_image":"","related":[{"id":"212a4ff6b6ac96cc5cf3be27fdf2a2e5","path":"/2022-08-23-api-da-ngon-ngu-cua-js/","title":"API đa ngôn ngữ của Javascript","desc":"Cùng tìm hiểu những API rất hữu ích trong JS giúp xử lý đa ngôn ngữ"},{"id":"ed20ea853375e5181c942b2bd43f7653","path":"/2018-05-01-huong-dan-cai-thien-performance-react-app/","title":"Cải thiện performance của React App","desc":"Trong bài này, chúng ta cùng đi qua các bước để fix những issue liên quan đến performance thường thấy."},{"id":"d7c5a1be37f6b7aa2083d3afe80563b9","path":"/2018-08-06-huong-dan-bat-dau-voi-firebase/","title":"Những tính năng cở bản của Firebase","desc":"Năm 2016 google giới thiệu Firebase. Khi bắt đầu phát triển ứng dụng điện thoại, bạn sẽ cần đến server và một developer để làm việc với server"},{"id":"9dff911f3d4c998b2e2d39eff8025ade","path":"/2019-05-14-huong-dan-handle-event-trong-javascript-cho-nguoi-moi/","title":"Hướng dẫn handle event listener căn bản cho các bạn mới bắt đầu với javascript","desc":"Căn bản nhưng cần thiết"}]}},"context":{}}