{"hash":"5d40f4d8ed43f512e4021e3d8491c32126632fe7","data":{"post":{"title":"Redux selector và vấn đề sử dụng sao cho hiệu quả","path":"/2020-12-10-optimize-redux-selector/","slug":"2020-12-10-optimize-redux-selector","date":"2020-12-10","timeToRead":4,"tags":[{"id":"react","title":"react","path":"/tag/react/"},{"id":"javascript","title":"javascript","path":"/tag/javascript/"}],"desc":"Nếu đang sử dụng redux, và bạn có thắc mắc, viết selector sao cho hiệu quả về tốc độ và dễ maintain thì đây là bài viết bạn nên đọc","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#selector\">Selector</a></li>\n<li><a href=\"#kh%C3%A1c-nhau-gi%E1%BB%AFa-useselector-v%C3%A0-mapstate\">Khác nhau giữa <code class=\"language-inline-text\">useSelector</code> và <code class=\"language-inline-text\">mapState</code></a></li>\n<li><a href=\"#l%C3%BD-do-s%E1%BB%AD-d%E1%BB%A5ng-selector\">Lý do sử dụng selector</a></li>\n<li>\n<p><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-sao-cho-t%E1%BB%91i-%C6%B0u\">Sử dụng sao cho tối ưu?</a></p>\n<ul>\n<li><a href=\"#selector-ph%E1%BB%A5-thu%E1%BB%99c-v%C3%A0o-gi%C3%A1-tr%E1%BB%8B-prop-c%E1%BB%A7a-component\">Selector phụ thuộc vào giá trị prop của component</a></li>\n<li><a href=\"#nhi%E1%BB%81u-instance-c%E1%BB%A7a-m%E1%BB%99t-component\">Nhiều instance của một component</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"selector\"><a href=\"#selector\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Selector</h2>\n<blockquote>\n<p>Selector là một hàm với input là 'state' của store và trả về một giá trị mong muốn</p>\n</blockquote>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">selectEntities</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>entities<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">selectItemIds</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">selectSomeSpecificField</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>some<span class=\"token punctuation\">.</span>deeply<span class=\"token punctuation\">.</span>nested<span class=\"token punctuation\">.</span>field<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">selectItemsWhoseNamesStartWith</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items<span class=\"token punctuation\">,</span> namePrefix</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">const</span> filteredItems <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>namePrefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> filteredItems<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Về cách đặt tên, không bắt buộc, nhưng đa phần sẽ đặt với <em>prefix</em> <code class=\"language-inline-text\">select</code> hoặc <code class=\"language-inline-text\">get</code></p>\n<h2 id=\"khác-nhau-giữa-useselector-và-mapstate\"><a href=\"#kh%C3%A1c-nhau-gi%E1%BB%AFa-useselector-v%C3%A0-mapstate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khác nhau giữa <code class=\"language-inline-text\">useSelector</code> và <code class=\"language-inline-text\">mapState</code></h2>\n<ul>\n<li>Khi một <em>action</em> được <em>dispatch</em>, <code class=\"language-inline-text\">useSelector</code> sẽ thực hiện so sánh giữa kết quả trước đó và kết quả hiện tại, <em>nếu khác</em>, component bị force để re-render.</li>\n<li><code class=\"language-inline-text\">useSelector</code> sử dụng so sánh <code class=\"language-inline-text\">===</code> chứ không dùng phương pháp so sánh <strong>shallow</strong> (dịch vui là so sánh \"nhẹ\")</li>\n</ul>\n<h2 id=\"lý-do-sử-dụng-selector\"><a href=\"#l%C3%BD-do-s%E1%BB%AD-d%E1%BB%A5ng-selector\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lý do sử dụng selector</h2>\n<ul>\n<li>Sử dụng lại, một selector có thể sử dụng ở nhiều nơi, nhiều component khác nhau</li>\n<li>Tinh gọn, ví dụ chúng ta có <em>entity</em> <code class=\"language-inline-text\">user</code>  chứa <code class=\"language-inline-text\">lastname</code>, <code class=\"language-inline-text\">fullname</code>, <code class=\"language-inline-text\">email</code>, nhưng chúng ta chỉ muốn lấy <code class=\"language-inline-text\">email</code>, một selector <code class=\"language-inline-text\">getUserEmail</code> sẽ rất rõ ràng tinh gọn</li>\n<li>Lý tưởng nhất, chỉ có <em>reducer</em> và <em>selector</em> mới biết được structure của redux store, như vậy một khi structure này có thay đổi, chúng ta chỉ việc cập nhập lại ở 2 chỗ này.</li>\n</ul>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createSelector <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'reselect'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getVisibilityFilter</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>visibilityFilter\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getTodos</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>todos\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getVisibleTodos <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">[</span>getVisibilityFilter<span class=\"token punctuation\">,</span> getTodos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">visibilityFilter<span class=\"token punctuation\">,</span> todos</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>visibilityFilter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'SHOW_ALL'</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> todos\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'SHOW_COMPLETED'</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> todos<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span> <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>completed<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'SHOW_ACTIVE'</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> todos<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>t<span class=\"token punctuation\">.</span>completed<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> visibleTodos <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span>getVisibleTodos<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<h2 id=\"sử-dụng-sao-cho-tối-ưu\"><a href=\"#s%E1%BB%AD-d%E1%BB%A5ng-sao-cho-t%E1%BB%91i-%C6%B0u\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sử dụng sao cho tối ưu?</h2>\n<p>Vì <code class=\"language-inline-text\">useSelector</code> dùng phép so sánh <code class=\"language-inline-text\">===</code> nên nếu hàm selector trả về mảng (dùng <code class=\"language-inline-text\">.map</code>, <code class=\"language-inline-text\">.filter</code>, destructuring <code class=\"language-inline-text\">...</code>), component sẽ bị trigger re-render.</p>\n<p>Để ý, khi function dùng làm <em>selector</em> có thể có nhiều tính toán, transform phức tạp. Với mỗi lần re-render, sẽ tốn thời gian để thực thi hàm selector.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">selectData</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> filteredData <span class=\"token operator\">=</span> <span class=\"token function\">expensiveFiltering</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> sortedData <span class=\"token operator\">=</span> <span class=\"token function\">expensiveSorting</span><span class=\"token punctuation\">(</span>filteredData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> transformedData <span class=\"token operator\">=</span> <span class=\"token function\">expensiveTransformation</span><span class=\"token punctuation\">(</span>sortedData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> transformedData<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span>selectData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Trong lúc re-render,  dù cho <code class=\"language-inline-text\">data</code> không thay đổi, hàm <code class=\"language-inline-text\">selectData</code> vẫn được gọi.</p>\n<p>Giải quyết bằng cách sử dụng thư viện <a href=\"https://github.com/reduxjs/reselect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reselect</a>, nó sẽ cho phép trả về kết quả trước đó, nếu input là giống nhau.</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useSelector <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createSelector <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'reselect'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">selectUsers</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> selectData <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span>\n    <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> filteredData <span class=\"token operator\">=</span> <span class=\"token function\">expensiveFiltering</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> sortedData <span class=\"token operator\">=</span> <span class=\"token function\">expensiveSorting</span><span class=\"token punctuation\">(</span>filteredData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> transformedData <span class=\"token operator\">=</span> <span class=\"token function\">expensiveTransformation</span><span class=\"token punctuation\">(</span>sortedData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> transformedData<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">UsersCounter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span>selectData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"selector-phụ-thuộc-vào-giá-trị-prop-của-component\"><a href=\"#selector-ph%E1%BB%A5-thu%E1%BB%99c-v%C3%A0o-gi%C3%A1-tr%E1%BB%8B-prop-c%E1%BB%A7a-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Selector phụ thuộc vào giá trị prop của component</h3>\n<p>Trong trường hợp một hàm selector có nhận input là prop của component, phải đảm bảo hàm selector được khai bao bên ngoài component.</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useSelector <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createSelector <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'reselect'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">selectUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> userId</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> users<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> selectUserById <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">[</span>selectUser<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> <span class=\"token function\">expensiveTransformation</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">UserDetails</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> userId <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token function\">selectUserById</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">User Details:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserDetails</span></span> <span class=\"token attr-name\">userId</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"nhiều-instance-của-một-component\"><a href=\"#nhi%E1%BB%81u-instance-c%E1%BB%A7a-m%E1%BB%99t-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nhiều instance của một component</h3>\n<p>Khi một hàm selector được dùng trong nhiều <em>instance</em> của một component và cũng phụ thuộc vào <code class=\"language-inline-text\">prop</code>, như 2 <em>instance</em> của <code class=\"language-inline-text\">UserDetails</code> ở trên</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserDetails</span></span> <span class=\"token attr-name\">userId</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserDetails</span></span> <span class=\"token attr-name\">userId</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>Chúng ta cần chắc chắn, <strong>mỗi <code class=\"language-inline-text\">instance</code> của <code class=\"language-inline-text\">UserDetails</code> sẽ ứng với một instance của hàm selector,</strong> nếu chỉ viết như ví dụ ở trên là không được, cả 2 instance của <code class=\"language-inline-text\">UserDetails</code> chỉ trỏ về một selector.</p>\n<p>Sử dụng kết hợp với <code class=\"language-inline-text\">useMemo</code> của React để đạt được kết quả mong muốn</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useMemo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useSelector <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createSelector <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'reselect'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">selectUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> userId</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> users<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeSelectUserById</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> \n  <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span>selectUser<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> <span class=\"token function\">expensiveTransformation</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">UserDetails</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> userId <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> selectUserMemo <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span>makeSelectUserById<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token function\">selectUserMemo</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">User Details:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserDetails</span></span> <span class=\"token attr-name\">userId</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserDetails</span></span> <span class=\"token attr-name\">userId</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Với cách này <code class=\"language-inline-text\">const selectUserMemo = useMemo(makeSelectUserById, []);</code> chúng ta tạo một instance của hàm selector trên từng instance của component.</p>\n<p><strong>Tài liệu tham khảo</strong></p>\n<p><a href=\"https://programmerden.com/2020/04/06/optimize-your-redux-selectors-with-useselector-hook-and-memoize-them-with-reselect/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://programmerden.com/2020/04/06/optimize-your-redux-selectors-with-useselector-hook-and-memoize-them-with-reselect/</a></p>\n<p><a href=\"https://blog.isquaredsoftware.com/2017/12/idiomatic-redux-using-reselect-selectors/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.isquaredsoftware.com/2017/12/idiomatic-redux-using-reselect-selectors/</a></p>\n","cover_image":"","related":[{"id":"05464840886f0ff47c5676cff5196c48","path":"/2020-03-08-huong-dan-su-dung-react-context-nhu-the-nao-cho-hieu-qua/","title":"Sử dụng React Context như thế nào cho hiệu quả","desc":"Để có thể quản lý được state của ứng dụng một cách tốt nhất, chúng ta cần sự phân chia phù hợp giữa local state (internal state của component) và state cửa ứng dụng đặt trong React Context. Một vài điều muốn chia sẽ để nâng cao khả năng bảo trì và trải nghiệm nếu sử dụng đến context trong React."},{"id":"0cd0167af93dd257a1535f985aabe93a","path":"/2020-08-24-dry-khong-duoc-vay-thi-wet/","title":"DRY không hiệu quả, hãy dùng WET","desc":"Khi bạn học lập trình bạn sẽ được nghe tới khái niệm DRY (Don't Repeat Yourself), bạn rất có thể đã vận dụng sai ý nghĩa của nó."},{"id":"996dfeac96bccc094b4f736116b47426","path":"/2020-10-26-huong-dan-su-dung-usememo-react/","title":"Hướng dẫn sử dụng useMemo trong React","desc":"Nếu bạn thấy app của mình bắt đầu chậm, đó là lúc bạn nên bắt đầu cân nhắc các phương pháp để tối ưu tốc độ và đọc bài viết này."},{"id":"b237c1fdef004102f9ac1f5532bf1ec0","path":"/2020-02-15-7-ly-do-chinh-dang-khuyen-ban-khong-nen-dung-typescript/","title":"7 lý do bạn không nên sử dụng TypeScript","desc":"TypeScript có phải là con ác chủ bài, ngôn ngữ của tương lai, viết TypeScript thì mọi thứ sẽ không thể nào còn lỗi, những lý do khiến bạn phải suy nghĩ lại những nhận định trên"}]}},"context":{}}