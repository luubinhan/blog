{"hash":"0395a9475e6dcec202a1209b8bd40b74ee081359","data":{"post":{"title":"Giới thiệu React.memo","path":"/gioi-thieu-react-memo/","date":"2018-11-04","timeToRead":1,"tags":[{"id":"react","title":"react","path":"/tag/react/"}],"desc":"Api mới của React 16.6","content":"<p>Functional Component, hoặc Class Component return <code class=\"language-text\">false</code> trong <code class=\"language-text\">shouldComponentUpdate</code>, component đó sẽ không bị re-render khi <strong>tree</strong> thay đổi, nó chỉ thay đổi khi <code class=\"language-text\">prop</code> truyền vào thay đổi</p>\n<p><code class=\"language-text\">React.memo()</code> hoạt động y chang như <code class=\"language-text\">React.PureComponent()</code>, nhưng nó là function component thay vì class như <code class=\"language-text\">PureComponent</code>.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">MyComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* chỉ render khi prop thay đổi */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// khai báo bằng arrow function</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>my memoized component<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ngắn hơn nữa</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>implicit memoized component<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Vì <code class=\"language-text\">React.memo()</code> là HOC, chúng ta cũng có thể dùng như sau</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">RocketComponent</span></span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token arrow operator\">=></span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>my rocket component<span class=\"token punctuation\">.</span> <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">fuel</span><span class=\"token punctuation\">}</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// một version chỉ render khi prop thay đổi</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">MemoizedRocketComponent</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memo</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">RocketComponent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Tại sao đặt tên là <code class=\"language-text\">memo</code> nghe có vẻ chướng tai? <strong>Memoization</strong> là một kỹ thuật lập trình để optimize tốc độ, thực hiện bằng việc lưu kết quả của một function vào cache để nếu có gọi và truyền vào cùng input thì return cache thay vì thực thi các câu lệnh trong function.</p>\n","cover_image":""}},"context":{}}