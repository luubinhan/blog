{"hash":"b9b11ed0eef2e60f7237ef3758917749cdab929d","data":{"post":{"title":"Giới thiệu lifecycle hook của Vue JS","path":"/2018-11-07-gioi-thieu-lifecycle-method-vuejs/","slug":"/2018-11-07-gioi-thieu-lifecycle-method-vuejs","date":"2018-11-07","timeToRead":3,"tags":[{"id":"vuejs","title":"vuejs","path":"/tag/vuejs/"}],"desc":"Giới thiệu nhanh gọn lẹ cho bạn nào chưa biết","content":"<p>Mình đã có bài giới thiệu về <a href=\"/2017-10-20-react-lifecycle-la-gi\">lifecycle hook của React Component</a>, Vue component cũng có lifecycle hook, biết hết các hook cơ bản là quan trọng vì sớm muộn chúng ta cũng muốn chạy một số đoạn code khi component được thêm vào DOM, được update, hoặc xóa.</p>\n<p><img src=\"https://d33wubrfki0l68.cloudfront.net/435786c6cbd23e078c35c2b21f40e1756b2c3d30/2098f/images/vuejs/external/component-lifecycle.png\" alt=\"Giới thiệu lifecycle hook của Vue JS\"></p>\n<p>Chúng ta có thể nhóm nó theo</p>\n<!-- TOC -->\n<ul>\n<li><a href=\"#1-kh%E1%BB%9Fi-t%E1%BA%A1o\">1. Khởi tạo</a></li>\n<li><a href=\"#2-ch%C3%A8n-v%C3%A0o-dom\">2. Chèn vào DOM</a></li>\n<li><a href=\"#3-c%E1%BA%ADp-nh%E1%BA%ADp\">3. Cập nhập</a></li>\n<li><a href=\"#4-x%C3%B3a\">4. Xóa</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"1-khởi-tạo\"><a href=\"#1-kh%E1%BB%9Fi-t%E1%BA%A1o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Khởi tạo</h2>\n<p>Các hook xảy ra trước khi component được chèn vào DOM, khác với các hook khác, những hook thuộc nhóm này sẽ chạy trong quá trình server-side render. Chúng ta cũng không truy cập được DOM và <code class=\"language-inline-text\">this.$el</code> trong đây</p>\n<p><code class=\"language-inline-text\">beforeCreate</code></p>\n<p>Sự kiện xảy ra khi mới vừa khởi tạo component, <code class=\"language-inline-text\">data</code> chưa khởi tạo, và các sự kiện chưa được setup</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">beforeCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Không ai chạy trước mình đâu!'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-inline-text\">created</code></p>\n<p>Có thể truy xuất đến <code class=\"language-inline-text\">data</code> và <code class=\"language-inline-text\">events</code>. Template và Virtual DOM chưa được mount và render</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">property</span><span class=\"token operator\">:</span> <span class=\"token string\">'Blank'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">propertyComputed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Thay đổi khi this.property thay đổi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>property <span class=\"token operator\">=</span> <span class=\"token string\">'Giá trị property mới'</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'propertyComputed sẽ update vì this.property đã thay đổi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"2-chèn-vào-dom\"><a href=\"#2-ch%C3%A8n-v%C3%A0o-dom\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Chèn vào DOM</h2>\n<p>Các hook được sử dụng thường xuyên nhất. Cho phép truy cập lúc component ngay trước và sau lần render đầu tiên, tất nhiên nó sẽ không chạy lúc server render</p>\n<p>Không nên sử dụng trong trường hợp muốn fetch dữ liệu cho component lúc khởi tạo. Thay vào đó dùng <code class=\"language-inline-text\">created</code> ( hoặc <code class=\"language-inline-text\">created</code> + <code class=\"language-inline-text\">activated</code> cho component <code class=\"language-inline-text\">keep-alive</code> )</p>\n<p><code class=\"language-inline-text\">beforeMount</code></p>\n<p>Ngay trước lần render đầu tiên và sau khi template hoặc render function được compile. Thường thì rất chẳng ai đụng đến hook này.</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">beforeMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this.$el chưa tồn tại'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-inline-text\">mounted</code></p>\n<p>Chúng ta có thể truy cập tất cả, cũng là hook được sử dụng nhiều nhất</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">text here</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\texport default {\n\t\tmounted() {\n\t\t\tconsole.log(this.$el.textContent); // text here\n\t\t}\n\t}\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"3-cập-nhập\"><a href=\"#3-c%E1%BA%ADp-nh%E1%BA%ADp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Cập nhập</h2>\n<p>Các hook sẽ được gọi khi component được re-render.</p>\n<p>Không nên sử dụng các hook này nếu muốn biết các reactive property nào trên component đã thay đổi. Thay vào đó hãy sử dụng <code class=\"language-inline-text\">computed</code> và <code class=\"language-inline-text\">watch</code></p>\n<p><code class=\"language-inline-text\">beforeUpdate</code></p>\n<p>Sau khi data thay đổi, trước khi render lại component.</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function\">beforeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-inline-text\">updated</code></p>\n<p>Sau khi component đã re-render</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dom-element<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> counter <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\tcounter: 0\n  }\n  },\n  updated() {\n    // gọi mỗi giây\n    console.log(+this.$refs['dom-element'].textContent === this.counter)\n  },\n  created() {\n    setInterval( () => {\n      this.counter++;\n    }, 1000)\n  }\n}\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"4-xóa\"><a href=\"#4-x%C3%B3a\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Xóa</h2>\n<p><code class=\"language-inline-text\">beforeDestroy</code></p>\n<p>Trước khi destroy</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">someLeakyProperty</span><span class=\"token operator\">:</span> <span class=\"token string\">'Em sẽ sử dụng hết bộ nhớ luôn!'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">beforeDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>someLeakyProperty <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>someLeakyProperty\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-inline-text\">destroyed</code></p>\n<p>Sau khi đã destroy</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">destroyed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Chẳng bao giờ xài cái này</span>\n    MyCreepyAnalyticsService<span class=\"token punctuation\">.</span><span class=\"token function\">informService</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mọi dấu vết đã được xóa'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ngoài ra, component <code class=\"language-inline-text\">keep-alive</code> còn có 2 hook khác là <code class=\"language-inline-text\">activated</code> và <code class=\"language-inline-text\">deactivated</code></p>\n<p><a href=\"https://alligator.io/vuejs/component-lifecycle/\" target=\"_blank\" rel=\"noopener noreferrer\">Understanding Vue.js Lifecycle Hooks</a></p>\n","cover_image":"","related":[{"id":"1e0772ac7b2ea53e3b8d76415505558f","path":"/2018-11-03-gioi-thieu-markdown/","title":"Giới thiệu Markdown","desc":"Markdown vở lòng cho bạn nào chưa biết"},{"id":"cdd1d46a55ef801cc49f87a7c301b3f4","path":"/2017-07-31-react-router/","title":"Giới thiệu React Router","desc":"React không phải một framework, nó chỉ là một thư viện javascript, bởi vì vậy nó không thể giải quyết tất cả các yêu cầu một ứng dụng. Việc mà React làm rất tốt là tạo component và cách thức quản lý state của component, nhưng để tạo một Single Page App (sẽ viết tắt là SPA) phức tạp, nó cần những thư viện khác nữa, đầu tiên cần nhắc đến là React Router"},{"id":"1387534c11b5b62c75eca8bf4520161b","path":"/2018-10-01-huong-dan-gioi-thieu-fetch-javascript/","title":"Giới thiệu fetch() của javascript","desc":"Tạm biệt XMLHttpRequest và cách viết dài dòng, giờ đây ta đã có fetch API"},{"id":"71fd4dada010b7a40b9dcabe12574c93","path":"/2018-11-04-gioi-thieu-react-memo-moi-trong-react16/","title":"Giới thiệu React.memo","desc":"Api mới của React 16.6"}]}},"context":{}}