{"hash":"742daa8ab2f1a95986978ecdcd9d0a2d9a3b753f","data":{"post":{"title":"Viết React Higher-Order Component bằng TypeScript","path":"/2020-01-19-viet-type-cho-hoc-voi-typescript/","date":"2020-01-19","timeToRead":6,"tags":[{"id":"hoc-thuat","title":"hoc-thuat","path":"/tag/hoc-thuat/"},{"id":"react","title":"react","path":"/tag/react/"}],"desc":"Cuộc sống đưa đẩy bạn phải viết TypeScript, thì bài này sẽ giúp bạn chút ít khi viết type với HOC","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#enhancer\">Enhancer</a></li>\n<li><a href=\"#injector\">Injector</a></li>\n<li><a href=\"#enhance--inject\">Enhance + Inject</a></li>\n</ul>\n<!-- /TOC -->\n<blockquote>\n<p>Từ React 16.8.0, chúng ta có React Hook, nó giải quyết toàn bộ những trường hợp chúng ta phải sử dụng higher-order component và giảm đáng kể độ phức tạp của việc set type so với HOC. Bạn sử dụng hook trong mọi tình huống có thể. Nếu gơi cảnh <em>ngặt nghèo</em>, anh lead của bạn <em>ko rõ lý do gì</em> bắt xài HOC với TypeScript. Thì bài viết này để giúp biết biết cách set type cho HOC.</p>\n</blockquote>\n<p>HOC trong React là <em>công cụ</em> để chúng ta sử dụng nhiều đoạn code giống nhau trên các component khác nhau. Tuy nhiên khi dùng chung với TypeScript thì <strong>triệu triệu</strong> developer gặp không ít khó khăn khi set type cho nó. Bao gồm luôn mình trong đó.</p>\n<p>Trong phạm vi bài viết này, chúng ta sẽ chi ra 2 loại HOC, 2 cách làm HOC phổ biến hiện nay, tạm gọi là <strong>enhancer</strong> và <strong>injector</strong></p>\n<ul>\n<li><strong>Enhancer</strong>: bọc một component, bổ sung thêm các hàm hoặc prop</li>\n<li><strong>Injector</strong>: <em>bơm/chích</em> thêm prop vào một component</li>\n</ul>\n<p>Để phân biệt rõ hơn, bạn xem tiếp ví dụ bên dưới.</p>\n<h2 id=\"enhancer\"><a href=\"#enhancer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enhancer</h2>\n<p>Chúng ta bắt đầu với Enhancer vì nó dễ viết <code class=\"language-text\">type</code> nhất. Ví dụ cơ bản nhất, bổ sung thêm prop <code class=\"language-text\">loading</code> vào component.</p>\n<p>Không bao gồm <code class=\"language-text\">type</code></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withLoading</span> <span class=\"token operator\">=</span> <span class=\"token parameter\"><span class=\"token maybe-class-name\">Component</span></span> <span class=\"token arrow operator\">=></span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">WithLoading</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">return</span> loading <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadingSpinner</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>... và với <code class=\"language-text\">type</code></p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">WithLoadingProps</span> <span class=\"token punctuation\">{</span>\n  loading<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> withLoading <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">object</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(Component: React.ComponentType&lt;P>) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">WithLoading</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token operator\">&amp;</span> <span class=\"token maybe-class-name\">WithLoadingProps</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> loading <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadingSpinner</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span>props <span class=\"token keyword\">as</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">;</span></code></pre>\n<p>Có vài thứ cần giải thích ở đoạn trên, từng bước một nhé</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">WithLoadingProps</span> <span class=\"token punctuation\">{</span>\n  loading<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Đây là <code class=\"language-text\">interface</code> khai báo các prop và <code class=\"language-text\">type</code> sẽ được thêm vào (<strong>enhance</strong>)</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">object</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(Component: React.ComponentType&lt;P>)</span></code></pre>\n<p>Chúng ta đang sử dụng một <a href=\"https://www.typescriptlang.org/docs/handbook/generics.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">generic</code></a>, <code class=\"language-text\">P</code> là ký tự dùng để đại diện cho toàn bộ prop của component khi truyền cho HOC. <code class=\"language-text\">React.ComponentType&lt;P&gt;</code> là một type viết tắt cho cả hai <code class=\"language-text\">React.FC&lt;P&gt;</code> và <code class=\"language-text\">React.ClassComponent&lt;P&gt;</code>, nghĩa là một component truyền vào cho HOC này có thể là function cũng được, class component cũng được.</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">WithLoading</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token operator\">&amp;</span> <span class=\"token maybe-class-name\">WithLoadingProps</span><span class=\"token operator\">></span></code></pre>\n<p>Đây là đoạn chúng ta component sẽ <code class=\"language-text\">return</code> từ HOC, nó chỉ định là component này sẽ bao gồm toàn bộ prop từ component (<code class=\"language-text\">P</code>) và prop của chính thằng HOC (<code class=\"language-text\">WithLoadingProps</code>), nó được <em>cộng dồn</em> bằng toán tử <code class=\"language-text\">&amp;</code></p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span></code></pre>\n<blockquote>\n<p>Với phiên bản cũ của TypeScript, có thể chúng ta phải <em>ép kiểu</em> <code class=\"language-text\">this.props</code> như thế này <code class=\"language-text\">this.props as WithLoadingProps</code></p>\n</blockquote>\n<p>Cuối cùng chúng ta sử dụng prop <code class=\"language-text\">loading</code> để đặt điều kiện hiển thị cái <em>Spinner</em></p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword control-flow\">return</span> loading <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadingSpinner</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span>props <span class=\"token keyword module\">as</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre>\n<blockquote>\n<p>ép kiểu <code class=\"language-text\">props as P</code> là bắt buộc từ TypeScript 3.2, đây là bug của TypeScript</p>\n</blockquote>\n<p>Với HOC <code class=\"language-text\">withLoading</code> cũng có thể được viết để return một function component thay vì class</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> withLoading <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">object</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(\n  Component: React.ComponentType&lt;P>\n): React.FC&lt;P &amp; WithLoadingProps> => ({\n  loading,\n  ...props\n}: WithLoadingProps) =>\n  loading ? </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadingSpinner</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"> : &lt;Component </span><span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span>props <span class=\"token keyword\">as</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> />;</span></code></pre>\n<p>Chúng ta gặp vấn đề tương tự khi sử dụng rest/spread object, chúng ta chỉ định kiểu return là <code class=\"language-text\">React.FC&lt;P &amp; WithLoadingProps&gt;</code>, nhưng chỉ sử dụng <code class=\"language-text\">WithLoadingProps</code> bên trong function component</p>\n<h2 id=\"injector\"><a href=\"#injector\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Injector</h2>\n<p>Kiểu <em>injector</em> HOC sẽ hay gặp hơn, nhưng cũng khó set type hơn, bên cạnh việc <em>chích</em> thêm một số prop vào cho component, trong đa số các trường hợp nó còn xóa những prop đã <em>chích</em> vào khi nó bọc lại, như vậy những thằng từ bên ngoài không thể ghi đè lên. <code class=\"language-text\">connect</code> của react-redux là một ví dụ cho injector HOC. Chúng ta không sử dụng nó, vì quá phức tạp, dùng một ví dụ đơn giản hơn, HOC chích thêm giá trị <code class=\"language-text\">counter</code> và <code class=\"language-text\">callback</code> để tăng giảm giá trị.</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Subtract</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"utility-types\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InjectedCounterProps</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onDecrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MakeCounterState</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> makeCounter <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">InjectedCounterProps</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(\n  Component: React.ComponentType&lt;P>\n) =>\n  class MakeCounter extends React.Component&lt;\n    Subtract&lt;P, InjectedCounterProps>,\n    MakeCounterState\n  > </span><span class=\"token punctuation\">{</span>\n    state<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">MakeCounterState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Component</span>\n          <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">}</span>\n          onIncrement<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">increment</span><span class=\"token punctuation\">}</span>\n          onDecrement<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">decrement</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token plain-text\">;</span></code></pre>\n<p>Một vài điểm khác nhau</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InjectedCounterProps</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onDecrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Khai báo một interface để chỉ định những prop nào sẽ được <em>chích</em>, đồng thời export luôn để component nào dùng HOC có thể lấy xài.</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token imports\">makeCounter<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">InjectedCounterProps</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./makeCounter\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CounterProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">InjectedCounterProps</span> <span class=\"token punctuation\">{</span>\n  style<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">CSSProperties</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CounterProps</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">onDecrement</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> - </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">onIncrement</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> + </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">makeCounter</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Counter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">InjectedCounterProps</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(Component: React.ComponentType&lt;P>)</span></code></pre>\n<p>Một lần nữa chúng ta dùng một <code class=\"language-text\">generic</code>, nhưng lần này để đảm bảo component sử dụng HOC có bao gồm các prop đã được chích, nếu không thì báo lỗi.</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MakeCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token operator\">&lt;</span>\n  <span class=\"token maybe-class-name\">Subtract</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">InjectedCounterProps</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">MakeCounterState</span>\n<span class=\"token operator\">></span></code></pre>\n<p>Component được trả về từ HOC sẽ sử dụng <a href=\"https://github.com/piotrwitek/utility-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Subtract</code></a>, nó sẽ tách hết những prop đã chích thêm, nghĩa là nếu ai đó set lại từ kết quả trả về từ HOC, nó sẽ lỗi</p>\n<p><img src=\"https://miro.medium.com/max/451/1*xTKe3DWJdC7nAVQnM4bvbg.png\"></p>\n<h2 id=\"enhance--inject\"><a href=\"#enhance--inject\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enhance + Inject</h2>\n<p>Kết hợp cả 2 cách làm này lại, chúng ta sẽ có một component counter cho phép đưa giá trị minimum và maximum</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InjectedCounterProps</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onDecrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MakeCounterProps</span> <span class=\"token punctuation\">{</span>\n  minValue<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  maxValue<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MakeCounterState</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> makeCounter <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">InjectedCounterProps</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(\n  Component: React.ComponentType&lt;P>\n) =>\n  class MakeCounter extends React.Component&lt;\n    Subtract&lt;P, InjectedCounterProps> &amp; MakeCounterProps,\n    MakeCounterState\n  > </span><span class=\"token punctuation\">{</span>\n    state<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">MakeCounterState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span>\n          prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">maxValue</span>\n            <span class=\"token operator\">?</span> prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span>\n            <span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span>\n          prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">minValue</span>\n            <span class=\"token operator\">?</span> prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span>\n            <span class=\"token operator\">:</span> prevState<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> minValue<span class=\"token punctuation\">,</span> maxValue<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Component</span>\n          <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span>props <span class=\"token keyword\">as</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">}</span>\n          onIncrement<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">increment</span><span class=\"token punctuation\">}</span>\n          onDecrement<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">decrement</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token plain-text\">;</span></code></pre>\n<p><code class=\"language-text\">Subtract</code> được sử dụng để kết hợp cả những prop của chính component và prop của HOC</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token maybe-class-name\">Subtract</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">InjectedCounterProps</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token maybe-class-name\">MakeCounterProps</span></code></pre>\n<p>Ngoài ra không còn gì thật sự khác nhau giữa 2 cách làm này cần phải nói thêm.</p>\n<p><a href=\"https://medium.com/@jrwebdev/react-higher-order-component-patterns-in-typescript-42278f7590fb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@jrwebdev/react-higher-order-component-patterns-in-typescript-42278f7590fb</a></p>\n","cover_image":"","related":[{"id":"2357b01f4fedb762de94f08f22517a13","path":"/2018-03-02-huong-dan-gioi-thieu-higher-order-component-trong-react/","title":"Giới thiệu Higher-Order Component trong React","desc":"Higher-Order Component (HOC) là kỹ thuật mà các bạn lập trình viên Việt Nam rất thích khi nhắc đến React, riêng mình thì không"},{"id":"ce342e02627f4d7a07148ba5a1d1fa85","path":"/2017-11-09-higher-order-function-trong-javascript/","title":"Higher-Order function trong javascript","desc":"Một trong những đặc thù của Javascript khiến nó rất phù hợp với function programming là cho phép viết function higher-order, kiểu function cho phép nhận một function khác như một argument hoặc trả về một function"},{"id":"8cd9d8c2dba06fb83a1f7d2ff11853f6","path":"/2019-11-27-huong-dan-pattern-react-render-prop/","title":"Cách viết React render props","desc":"Một trong những pattern để chúng ta có thể sử dụng lại logic"},{"id":"aafc1da63cc5a7bac0fcc50c38145cb5","path":"/2020-08-03-5-loi-de-mac-phai-khi-viet-react-component/","title":"5 sai làm thường thấy khi viết react component","desc":"Tổng hợp những lỗi thường thấy khi bạn viết react component, và làm sao để khắc phục"}]}},"context":{}}