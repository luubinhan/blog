{"hash":"742daa8ab2f1a95986978ecdcd9d0a2d9a3b753f","data":{"post":{"title":"Khi nào nên sử dụng useLayoutEffect thay vì useEffect","path":"/2020-01-02-khi-nao-nen-su-dung-uselayouteffect-trong-react/","date":"2020-01-02","timeToRead":2,"tags":[{"id":"thu-thuat","title":"thu-thuat","path":"/tag/thu-thuat/"},{"id":"react","title":"react","path":"/tag/react/"}],"desc":"2 React Hook làm nhiệm vụ khá giống nhau là useEffect và useLayoutEffect bạn đã biết cách sử dụng thế nào cho đúng","content":"<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// thực hiện side effect</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token comment\">/* dọn rác */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>khai báo các giá trị mà nó phụ thuộc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// thực hiện side effect</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token comment\">/* dọn rác */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>thực hiện side effect<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Nếu ko có khác nhau thì React team sẽ không tạo ra 2 thằng, hiển nhiên?. (Hầu như có thể dụng <code class=\"language-text\">useEffect</code> trong mọi tình huống)</p>\n<p>Khác nhau là ở <strong>THỜI GIAN THỰC HIỆN</strong></p>\n<p><code class=\"language-text\">useEffect</code> chạy <strong>bất tuần tự</strong> và đợi <strong>sau</strong> khi việc component đã xuất hiện trên màn hình (sau khi trình duyệt <em>paint</em>)</p>\n<p>Quá trình cụ thế là thế này</p>\n<ol>\n<li>Component gọi đến <code class=\"language-text\">render</code></li>\n<li>Màn hình cập nhập lại UI mới</li>\n<li><strong>SAU ĐÓ</strong> chạy <code class=\"language-text\">useEffect</code></li>\n</ol>\n<p><code class=\"language-text\">useLayoutEffect</code>, ngược lại, chạy <strong>tuần tự</strong> sau khi render nhưng là <strong>trước</strong> khi UI cập nhập</p>\n<p>Quá trình</p>\n<ol>\n<li>Component gọi đến <code class=\"language-text\">render</code></li>\n<li><code class=\"language-text\">useLayoutEffect</code> được gọi, đợi chạy xong mới đi tiếp</li>\n<li>Màn hình cập nhập lại UI mới</li>\n</ol>\n<p>Trong 99% các trường hợp, sử dụng <code class=\"language-text\">useEffect</code>  sẽ là cách tốt nhất, vì những effect của chúng ta sẽ cần đồng bộ với prop, state, không cần xảy ra <strong>NGAY LẬP TỨC</strong> và không ảnh hưởng đến kết quả cuối cùng của UI.</p>\n<p>Ví dụ như fetch dữ liệu sẽ không cần có kết quả ngay lập tức, hay đặt để các event handler</p>\n<p>Nếu thấy UI bị <code class=\"language-text\">flickering</code> (giống như xuất hiện sọc sọc trên màn hình tivi) khi cập nhập, nguyên nhân do nó đã render khi <em>vừa có</em> state, sau đó lại re-render lại với state nhận được sau cùng. Đó là lúc bạn dùng <code class=\"language-text\">useLayoutEffect</code></p>\n<p>Ví dụ nhé, bạn cho user click để thay đổi state <code class=\"language-text\">value</code>, nó sẽ re-render component, sau đó effect chạy, nó lại set giá trị <code class=\"language-text\">value</code> thành một con số ngẫu nhiên => lại re-render component.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  useState<span class=\"token punctuation\">,</span>\n  useLayoutEffect\n<span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ReactDOM</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">BlinkyRender</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'render'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      value: </span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span> <span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token maybe-class-name\">ReactDOM</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BlinkyRender</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Với cách dùng <code class=\"language-text\">useLayoutEffect</code> chúng ta chỉ cập nhập UI đúng <strong>1</strong> lần, trong khi component gọi render <strong>2</strong> lần.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://daveceddia.com/useeffect-vs-uselayouteffect/\">📜 When to useLayoutEffect Instead of useEffect</a></p>\n","cover_image":"","related":[{"id":"1ba061475abb23bc0355ce6df2e57b4c","path":"/2020-02-15-7-ly-do-chinh-dang-khuyen-ban-khong-nen-dung-typescript/","title":"7 lý do bạn không nên sử dụng TypeScript","desc":"TypeScript có phải là con ác chủ bài, ngôn ngữ của tương lai, viết TypeScript thì mọi thứ sẽ không thể nào còn lỗi, những lý do khiến bạn phải suy nghĩ lại những nhận định trên"},{"id":"d2e65b2b5b2523d59011e21cbc5ecf7f","path":"/2020-10-31-the-nao-duoc-goi-la-senior-developer/","title":"Khi nào bạn đã là Senior dev","desc":"Chia sẻ của một lập trình viên đã ứng tuyển vào vị trí Senior dev và toàn thất bại"},{"id":"2bda1aea7bf5ac181ed1d3a656b277f5","path":"/2020-10-26-huong-dan-su-dung-usememo-react/","title":"Hướng dẫn sử dụng useMemo trong React","desc":"Nếu bạn thấy app của mình bắt đầu chậm, đó là lúc bạn nên bắt đầu cân nhắc các phương pháp để tối ưu tốc độ và đọc bài viết này."},{"id":"0f44ee174018384de200da37b4aac6d7","path":"/2018-10-18-huong-dan-dung-chrome-dev-tool-de-kiem-tra-contrast/","title":"Hướng dẫn sử dụng công cụ để check contrast trong Chrome","desc":"Tip siêu ngắn để kiểm tra contrast có hợp nhãn với Chrome không"}]}},"context":{}}