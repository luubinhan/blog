{"hash":"08afebde8a18553ee035d598b7ec152099e4d381","data":{"post":{"title":"Hướng dẫn kỹ thuật FLIP animation với React","path":"/2020-11-18-huong-dan-flip-animation-voi-react/","slug":"2020-11-18-huong-dan-flip-animation-voi-react","date":"2020-11-18","timeToRead":2,"tags":[{"id":"thu-thuat","title":"thu-thuat","path":"/tag/thu-thuat/"},{"id":"react","title":"react","path":"/tag/react/"}],"desc":"Nếu bạn là người làm animation có tâm, bạn không muốn animation làm ảnh hưởng đến tốc độ của ứng dụng, bạn cần biết đến FLIP animation","content":"<p>Trước đây mình đã có một bài về FLIP animation, các bạn có thể đọc lại <a href=\"https://luubinhan.github.io/blog/2018-07-25-huong-dan-tao-animate-voi-flip-technique/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ở đây</a> để biết kỹ thuật này là gì và tại sao nó lại giúp tối ưu tốc độ.</p>\n<p>Có thể tóm tắt kỹ thuật FLIP bằng hình minh họa bên dưới</p>\n<p><img src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/06/JakPwnSa.png?w=398&#x26;ssl=1\"></p>\n<p>Những gì trong ô màu tím, cần diễn ra trước sự kiện <em>paint</em> của trình duyệt.</p>\n<p>Để đạt mục đích <strong><em>transform</em> trước khi trình duyệt thực hiện <code class=\"language-inline-text\">paint</code></strong>, chúng ta sẽ sử dụng <code class=\"language-inline-text\">useLayoutEffect</code>, những gì diễn ra ở đây sẽ xảy ra <strong>sau khi DOM cập nhập</strong>, <strong>trước khi paint</strong></p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"React FLIP animations\" src=\"https://codepen.io/jlkiri/embed/oNjaMrK?height=265&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/jlkiri/pen/oNjaMrK'>React FLIP animations</a> by Kirill Vasiltsov\n  (<a href='https://codepen.io/jlkiri'>@jlkiri</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>Với lần render đầu tiên, chúng ta cần <em>cache</em> lại vị trí cuối cùng của animation</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">const</span> rects <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">const</span> squares <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.square'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> square <span class=\"token keyword\">of</span> squares<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        rects<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> square<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> squares <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.square'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> square <span class=\"token keyword\">of</span> squares<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> cachedRect <span class=\"token operator\">=</span> rects<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cachedRect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> nextRect <span class=\"token operator\">=</span> square<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// invert</span>\n            <span class=\"token keyword\">const</span> translateX <span class=\"token operator\">=</span> cachedRect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> nextRect<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// cache position và size</span>\n            rects<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> nextRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// play animation</span>\n            square<span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translateX(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>translateX<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            \t<span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translateX(0px)</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> ids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tóm tắt những gì đã thực hiện bằng hình minh họa sau</p>\n<p><img src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/06/kTkr-F7_.png?fit=1024%2C1024&#x26;ssl=1\" alt=\"Diagram. Cache the size and position, retrieve previous size and position from cache, get new size and position, calculate the difference, and play the animation.\"></p>\n<p><strong>Một vài lưu ý</strong></p>\n<ul>\n<li>Đảm bảo các tính toán không vượt quá 100ms, điều này nhằm đảm bảo user không cảm nhận có một độ trễ trên giao diện, có thể kiểm tra bằng DevTools\n<img src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/06/6LqLR8Jc.png?fit=1024%2C275&#x26;ssl=1\" alt=\"img\"></li>\n<li>Để tránh re-render không cần thiết, chúng ta ko được dùng <code class=\"language-inline-text\">useState</code>, thay vào đó chúng ta phải dùng <code class=\"language-inline-text\">useRef</code> một object cố định chúng ta có thể thay đổi giá trị mà không gây ra re-render</li>\n<li>Không thực hiện đọc vị trí -> chạy animate ngay và luôn trên element đó, luôn thực hiện theo dạng đọc hàng loạt, sau đó animate một loạt</li>\n<li>Nếu không muốn tự viết, có thể tham khảo 2 thư viện dùng với React: <a href=\"https://github.com/aholachek/react-flip-toolkit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-inline-text\">react-flip-toolkit</code></a> và <a href=\"https://github.com/jlkiri/react-easy-flip\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-inline-text\">react-easy-flip</code></a>.</li>\n</ul>\n<p><a href=\"https://css-tricks.com/everything-you-need-to-know-about-flip-animations-in-react/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Everything You Need to Know About FLIP Animations in React</a></p>\n","cover_image":"","related":[{"id":"4e4fa00c4bfe1830c7cad81388bf04ae","path":"/2018-07-25-huong-dan-tao-animate-voi-flip-technique/","title":"Tạo animation với kỹ thuật FLIP","desc":"Trong bài này chúng ta sẽ tìm hiểu kỹ thuật FLIP có thể sử dụng để animate position và kích thước của bất kỳ DOM element nào"},{"id":"4489faa894256f0d6beb4e50c82ec5c7","path":"/2018-10-21-huong-dan-dung-chrome-devtool-de-inspect-animation/","title":"Hướng dẫn inspect animation với Chrome DevTools","desc":"Học cách sử dụng công cụ inspection animation trong Chrome DevTools rất hữu ích khi làm animate."},{"id":"2bda1aea7bf5ac181ed1d3a656b277f5","path":"/2020-10-26-huong-dan-su-dung-usememo-react/","title":"Hướng dẫn sử dụng useMemo trong React","desc":"Nếu bạn thấy app của mình bắt đầu chậm, đó là lúc bạn nên bắt đầu cân nhắc các phương pháp để tối ưu tốc độ và đọc bài viết này."},{"id":"495d1b2403bab34818b94aa36a7ac08d","path":"/2018-11-01-gioi-thieu-npm-link/","title":"Hướng dẫn dùng npm link","desc":"Cách dùng npm link để trỏ dependency đến thư mục local"}]}},"context":{}}