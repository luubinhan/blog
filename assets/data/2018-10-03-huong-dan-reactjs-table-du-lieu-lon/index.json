{"hash":"ecc8ecd7f5d1caebd4de67fcaaf53086d59cd360","data":{"post":{"title":"Xử lý tập dữ liệu lớn trong React","path":"/2018-10-03-huong-dan-reactjs-table-du-lieu-lon/","slug":"/2018-10-03-huong-dan-reactjs-table-du-lieu-lon","date":"2018-10-03","timeToRead":3,"tags":[{"id":"react","title":"react","path":"/tag/react/"},{"id":"performance","title":"performance","path":"/tag/performance/"}],"desc":"Tình huống: bạn có một table với rất nhiều dữ liệu đổ vào, nếu bạn thấy component đó render chậm trên màn hình, đó là lúc cần tái cấu trúc","content":"<p>Chúng ta có component như sau</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ParentComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>item<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Khi mà <code class=\"language-inline-text\">ParentComponent</code> nhận được <code class=\"language-inline-text\">props.items</code>, trước hết nó sẽ đổ tất cả dữ liệu vào trong virtual DOM, sau đó kiểm tra xem phần nào của real DOM cần cập nhập, rồi cập nhập toàn bộ trong <strong>một lần</strong>. Đó là lý do chúng ta bị <strong>delay</strong>, nó tốn thời gian cho việc tạo ra một số lượng virtual DOM rất lớn trước khi update real DOM, giả dụ có hơn 40.000 dòng dữ liệu, nó đợi tạo 40.000 cái virtual DOM trước khi đẩy hết xuống real DOM.</p>\n<p>Chúng ta muốn render <code class=\"language-inline-text\">ParentComponent</code> sớm nhất có thể, và sau đó thêm các item từ từ. Chúng ta muốn hiển thị các item vừa có trong virtual DOM, rồi lại render tiếp. </p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> \n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>item<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Giải pháp ở đây là đưa toàn bộ <code class=\"language-inline-text\">item</code> vào trong <code class=\"language-inline-text\">state</code>, sau đó <code class=\"language-inline-text\">render()</code> theo <code class=\"language-inline-text\">state.items</code>. Việc cần làm là update lại <code class=\"language-inline-text\">state.items</code> và chèn thêm item một cách từ từ. Với cách này, hàm <code class=\"language-inline-text\">render</code> sẽ gọi khá thường xuyên, nhưng được cái nó hiển thị liền</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">recursive</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> hasMore <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasMore<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">recursive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Hàm đệ quy trên nó sẽ chạy đến khi <strong>length</strong> bằng nhau. Trên mỗi lần lặp lại nó thêm một element vào mảng <code class=\"language-inline-text\">state.items</code>. Dùng <code class=\"language-inline-text\">setTimeout</code> để đưa thứ tự ưu tiên của nó xuống thấp nhất.</p>\n<p>Nếu thắc mắc tại sao lại gọi hàm <code class=\"language-inline-text\">setState()</code> bên trong một hàm đệ quy</p>\n<ul>\n<li>Buộc phải dùng <code class=\"language-inline-text\">setState</code> nếu muốn update real DOM, <code class=\"language-inline-text\">setState</code> nó có cách xử lý riêng khi chúng ta gọi nhiều lần</li>\n<li>Ví dụ trên đang thêm 1 item một lần gọi, tùy theo nhu cầu, số lượng item có thế nhiều hơn.</li>\n<li><code class=\"language-inline-text\">setTimeout</code> có thứ tự ưu tiên chạy cuối cùng, nên, nếu user tương tác với component đã được render, tương tác này sẽ được ưu tiên cao hơn việc render các item còn lại. User có thể bắt đầu tương tác với các item đã render mà không đợi nó show hết</li>\n<li>Nếu đã có sẵn toàn bộ các item thì ok, nếu phải đi <code class=\"language-inline-text\">fetch</code>, dùng cách khác</li>\n<li>Nếu dùng HOC sẽ không hề làm side effect với cách này</li>\n<li>Bạn cứ test performance để kiểm tra thử nó làm nhanh hay chậm app để xác nhận</li>\n</ul>\n<p>Gọi hàm đệ quy trong <code class=\"language-inline-text\">componentDidMount</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">recursive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Ghi chú</strong></p>\n<p>Cách này đã kiểm tra khi render khoảng 10 đến 1500 element, thời gian tốn khoảng 2 đến 3ms.</p>\n<p>Nếu muốn tìm một giải pháp của người ta build sẵn thì dùng <a href=\"https://github.com/bvaughn/react-virtualized\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-virtualized</a></p>\n<p><a href=\"https://itnext.io/handling-large-lists-and-tables-in-react-238397854625\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link bài viết gốc</a></p>\n","cover_image":"","related":[{"id":"8d94d7234fef61572a2e24f9875559d9","path":"/2019-11-18-huong-dan-goi-fetch-api-bang-react-hook/","title":"Làm sao để fetch dữ liệu bằng React Hook","desc":"Trong bài này chúng ta sẽ sử dụng React.useState, React.useEffect, React.useReducer để fetch dữ liệu từ API, đồng thời cũng viết một custom hook để có thể sử dụng ở bất kỳ đâu"},{"id":"ddcf45023ed6007ccd6b4260078cb17b","path":"/2019-03-25-rang-buoc-du-lieu-voi-html5/","title":"Ràng buộc dữ liệu input với HTML5","desc":"Vì form quá phức tạp, chúng ta cần thêm một bài viết nữa về validation với html"},{"id":"00a83799c3294abab087f85c1f4fc095","path":"/2018-11-19-xu-ly-loi-neu-co-xay-ra-trong-javascript/","title":"Xử lý lỗi nếu có xảy ra trong javascript","desc":"Lỗi nếu có xảy ra, phải được xử lý hết tránh để chết nguyên ứng dụng. Điểm lại một vài cách xử lý lỗi trong javascript"},{"id":"195ab57756334d54d5b91aec0cf11fd1","path":"/2019-10-28-gioi-thieu-ve-do-phuc-tap-cua-thuat-toan/","title":"Độ phức tạp của thuật toán","desc":"Một cách chuẩn hóa trong ngành lập trình để đánh giá độ phức tạp của giải thuật"}]}},"context":{}}