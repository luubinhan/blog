{"hash":"08afebde8a18553ee035d598b7ec152099e4d381","data":{"post":{"title":"Làm quen khái niệm CORS của Web","path":"/2019-09-06-gioi-thieu-can-ban-ve-cors/","slug":"/2019-09-06-gioi-thieu-can-ban-ve-cors","date":"2019-09-06","timeToRead":3,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"},{"id":"hoc-thuat","title":"hoc-thuat","path":"/tag/hoc-thuat/"}],"desc":"Bài này khá căn bản và cần thiết cho bạn nào chưa biết gì về CORS, nghe ai đó nói về từ khóa ghê gớm này mà ko biết nó là gì, không để cập đến vấn đề setup làm sao để chạy CORS trên server - vì mình ko biết code phía server đâu","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#access-control-allow-origin\">Access-Control-Allow-Origin</a></li>\n<li>\n<p><a href=\"#c%c3%a1c-ki%e1%bb%83u-request-cors\">Các kiểu request CORS</a></p>\n<ul>\n<li><a href=\"#request-%c4%91%c6%a1n-thu%e1%ba%a7n-nh%c6%b0-get-post-head\">Request đơn thuần như <code class=\"language-inline-text\">GET</code>, <code class=\"language-inline-text\">POST</code>, <code class=\"language-inline-text\">HEAD</code></a></li>\n<li><a href=\"#preflight-request\">Preflight request</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<p>Cross-Origin Resource Sharing (CORS) là một cơ chế sử dụng thông tin trên HTTP header để báo với trình duyệt, cho phép ứng dụng web chạy từ <em>nhà</em> này, có quyền truy xuất resource từ 1 <strong>nhà</strong> khác (2 thằng gọi là khác nhà khi khác tên miền, khác port, khác giao thức http và https)</p>\n<p>Ví dụ một request cross-origin: nhà bạn ở <a href=\"http://domain-a.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://domain-a.com</a> dùng javascript gửi request bên nhà <a href=\"http://api.domain-b.com/data.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://api.domain-b.com/data.json</a></p>\n<p>Vì lý do bảo mật, trình duyệt sẽ không cho thực hiện các request cross-origin như vậy. Nghĩa là các ứng dụng web gọi API chỉ có thể sử dụng resource từ cùng <em>nhà</em> (same-origin policy là từ chuẩn, nếu bạn cần research thêm), trừ khi response từ <em>nhà</em> khác đó cho phép gọi CORS (bằng cách thêm một số thông tin trên header)</p>\n<p>Các request có thể dùng CORS</p>\n<ul>\n<li>Gửi một network request bằng <code class=\"language-inline-text\">fetch</code></li>\n<li>Web font, hoặc load <code class=\"language-inline-text\">@font-face</code> trong CSS</li>\n<li>WebGL texture</li>\n<li>Image, video</li>\n</ul>\n<p>Khi config thành công trên server, server sẽ trả thêm một số thông tin trên header để trình duyệt biết và cấp phép chạy</p>\n<h2 id=\"access-control-allow-origin\"><a href=\"#access-control-allow-origin\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Access-Control-Allow-Origin</h2>\n<p>Chỉ định các tên miền nào được phép truy cập,  ví dụ để cho phép tất cả tên miền có thể gọi tới</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">Access-Control-Allow-Origin<span class=\"token operator\">:</span> *</code></pre></div>\n<p>Cho phép 1 tên miền cụ thể</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">Access-Control-Allow-Origin<span class=\"token operator\">:</span> https<span class=\"token operator\">:</span><span class=\"token comment\">//example.com</span></code></pre></div>\n<h2 id=\"các-kiểu-request-cors\"><a href=\"#c%C3%A1c-ki%E1%BB%83u-request-cors\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Các kiểu request CORS</h2>\n<p>Có 2 kiểu CORS request: các request <em>đơn thuần</em>, và các request <strong>preflight</strong>, 2 cái này sẽ do trình duyệt xác định sử dụng cái nào, là một developer chúng ta cũng thật sự không cần quan tâm.</p>\n<h3 id=\"request-đơn-thuần-như-get-post-head\"><a href=\"#request-%C4%91%C6%A1n-thu%E1%BA%A7n-nh%C6%B0-get-post-head\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Request đơn thuần như <code class=\"language-inline-text\">GET</code>, <code class=\"language-inline-text\">POST</code>, <code class=\"language-inline-text\">HEAD</code></h3>\n<p>Các request được trình duyệt xếp loại <em>đơn thuần</em> là\nGET, POST, HEAD\nSử dụng <a href=\"https://fetch.spec.whatwg.org/#cors-safelisted-request-header\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CORS safe -listed header</a>\nKhi sử dụng <code class=\"language-inline-text\">Content-Type</code>, chỉ các giá trị sau là được cho phép <code class=\"language-inline-text\">application/x-www-form-urlencoded</code>, <code class=\"language-inline-text\">multipart/form-data</code>,  <code class=\"language-inline-text\">text/plain</code>\nKhông có các listener nào được đăng ký trên <code class=\"language-inline-text\">XMLHttpRequestUpload</code>\nKhông sử dụng <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ReadableStream</a></p>\n<h3 id=\"preflight-request\"><a href=\"#preflight-request\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Preflight request</h3>\n<p>Đơn giản là ngược lại các trường hợp ở trên thì sẽ là dạng preflight, trình duyệt sẽ gửi đi một request ở phương thức <code class=\"language-inline-text\">options</code> để xác định server có hỗ trợ ko trước khi thực sự gửi đi request chính.</p>\n<p>Đối với loại preflight request, ngoài việc chuyển phương thức sang <code class=\"language-inline-text\">options</code>, nó sẽ set thêm một số thuộc tính trên header</p>\n<p><code class=\"language-inline-text\">Access-Control-Request-Method</code>:  phương thức GET hay POST nên được sử dụng\n<code class=\"language-inline-text\">Access-Control-Request-Headers</code>: kiểu header muốn sử dụng\n<code class=\"language-inline-text\">Origin</code>: nơi gửi request</p>\n<p>Ví dụ</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"># Request\ncurl -i -X OPTIONS localhost<span class=\"token operator\">:</span><span class=\"token number\">3001</span>/api/ping \\\n-H 'Access-Control-Request-Method<span class=\"token operator\">:</span> GET' \\\n-H 'Access-Control-Request-Headers<span class=\"token operator\">:</span> Content-Type<span class=\"token punctuation\">,</span> Accept' \\\n-H 'Origin<span class=\"token operator\">:</span> http<span class=\"token operator\">:</span><span class=\"token comment\">//localhost:3000'</span></code></pre></div>\n<p>Chúng ta có thể tạm dịch nó ra ngôn ngữ tự nhiên là “Tao muốn thực hiện một request dạng GET với <code class=\"language-inline-text\">content-type</code> và <code class=\"language-inline-text\">Accept</code> header từ địa chỉ localhost:3000 có được ko?”</p>\n<p>Kết quả trả về từ server sẽ cho phép trình duyệt tiến hành tiếp, hay dừng lại ở đó. Response từ server sẽ như thế này</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">HTTP/<span class=\"token number\">1.1</span> <span class=\"token number\">204</span> No Content\nAccess-Control-Allow-Origin<span class=\"token operator\">:</span> *\nAccess-Control-Allow-Methods<span class=\"token operator\">:</span> GET<span class=\"token punctuation\">,</span>HEAD<span class=\"token punctuation\">,</span>PUT<span class=\"token punctuation\">,</span>PATCH<span class=\"token punctuation\">,</span>POST<span class=\"token punctuation\">,</span>DELETE\nVary<span class=\"token operator\">:</span> Access-Control-Request-Headers\nAccess-Control-Allow-Headers<span class=\"token operator\">:</span> Content-Type<span class=\"token punctuation\">,</span> Accept\nContent-Length<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\nDate<span class=\"token operator\">:</span> Fri<span class=\"token punctuation\">,</span> <span class=\"token number\">05</span> Apr <span class=\"token number\">2019</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">41</span><span class=\"token operator\">:</span><span class=\"token number\">08</span> GMT\nConnection<span class=\"token operator\">:</span> keep-alive</code></pre></div>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://auth0.com/blog/cors-tutorial-a-guide-to-cross-origin-resource-sharing/\n\">📜 CORS Tutorial: A Guide to Cross-Origin Resource Sharing</a></p>\n","cover_image":"","related":[{"id":"95442f9784ed9952265cdb585404dc96","path":"/2019-08-30-lam-quen-voi-kien-truc-serverless/","title":"Làm quen với kiến trúc Serverless","desc":"Mình không phải chuyên gia trong lĩnh vực này, nghiên cứu để biết thêm, thấy cũng hay, chia sẽ cho mọi người cùng đọc"},{"id":"9358bcb7257ba0e35f104945857aa41f","path":"/2019-02-11-lam-quen-voi-react-hook-bang-vi-du/","title":"Làm quen với React Hook bằng ví dụ","desc":"Chúng ta cùng bắt đầu học sử dụng React Hook, nó giải quyết vấn đề gì, sử dụng nó ra sao"},{"id":"8905cbcbcbfca00a569175a000425311","path":"/2017-09-25-10-khai-niem-javascript-can-biet/","title":"7 khái niệm JavaScript cần biết","desc":"Một vài khái niệm căn bản trong javascript cần nắm nếu bạn là frontend developer"},{"id":"b96fe15a72c8084949568607882b071a","path":"/2019-09-13-giai-thich-phuong-phap-atomic/","title":"Làm quen với phương pháp Atomic để structure source code, design","desc":"Atom, molecule, organism, template, và page là những khái niệm chính của phương pháp này"}]}},"context":{}}