{"hash":"e150ec07f11d4d640e5ab6b3dfc7216b64634be9","data":{"post":{"title":"Tóm tắt quá trình render của trình duyệt","path":"/2020-12-03-browser-render-website-nhu-the-nao/","slug":"2020-12-03-browser-render-website-nhu-the-nao","date":"2020-12-03","timeToRead":2,"tags":[{"id":"hoc-thuat","title":"hoc-thuat","path":"/tag/hoc-thuat/"},{"id":"web","title":"web","path":"/tag/web/"}],"desc":"Tóm lược các bước chính trình duyệt cần thực hiện để render một trang web","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#parse-html\">Parse HTML</a></li>\n<li><a href=\"#2---external-resource\">2 - External Resource</a></li>\n<li><a href=\"#3---parse-css\">3 - Parse CSS</a></li>\n<li><a href=\"#4---execute-js\">4 - Execute JS</a></li>\n<li><a href=\"#5---merge-dom-v%C3%A0-cssom-%C4%91%E1%BB%83-t%E1%BA%A1o-render-tree\">5 - Merge DOM và CSSOM để tạo render tree</a></li>\n<li><a href=\"#6---calculate-layout-v%C3%A0-paint\">6 - Calculate layout và paint</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"parse-html\"><a href=\"#parse-html\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Parse HTML</h2>\n<p>Khi trình duyệt nhận một dữ liệu HTML, nó sẽ <strong>parse</strong> qua DOM node</p>\n<p><img src=\"https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-1.png\"></p>\n<h2 id=\"2---external-resource\"><a href=\"#2---external-resource\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2 - External Resource</h2>\n<p>Khi gặp các file CSS, JS nó sẽ chạy đi lấy dữ liệu đó, quá trình <strong>parse</strong> vẫn tiếp tục, nhưng sẽ <strong>chặn</strong> việc render trên trình duyệt (CSS được sếp vào loại resource <strong>block render</strong>)</p>\n<p>JS hơi khác, mặc định nó sẽ <strong>chặn</strong> quá trình parse HTML (<strong>block parse</strong>). Tuy nhiên với việc truyền thêm attribute <code class=\"language-inline-text\">defer</code> hoặc <code class=\"language-inline-text\">async</code>, việc parse js sẽ chạy ngầm, và không chặn parse HTML</p>\n<p>Với <code class=\"language-inline-text\">defer</code>, file sẽ được execute sau khi parse document xong, nếu nhiều file được thêm thuộc tính <code class=\"language-inline-text\">defer</code>, nó sẽ được execute theo thứ tự trong HTML</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">defer</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Với <code class=\"language-inline-text\">async</code>, file sẽ execute ngay khi load, nghĩa là có thể trong lúc parse hoặc sau lúc parse, vì vậy thứ tự đặt file không quan trọng, không đảm bảo file execute theo đúng thứ tự.</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">async</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-2.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--5qrUxpJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-2-1000.png\" alt=\"Fetching CSS and JavaScript resources in a web browser\"></a></p>\n<p>Với các trình duyệt sau này, nó sẽ hỗ trợ thêm việc <strong>preload</strong>, lấy về những resource chưa thật sự cần ở thời điểm hiện tại, nhưng trong tương lai có thể cần đến, việc này cũng tùy thuộc vào từng trình duyệt mà cách xử lý có khác nhau</p>\n<div class=\"gridsome-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>style.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preload<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">as</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>style<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<h2 id=\"3---parse-css\"><a href=\"#3---parse-css\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3 - Parse CSS</h2>\n<p>Sau khi đã có được source file css \"trong tay\", trình duyệt làm tiếp 2 thao tác, parse CSS và build CSSOM</p>\n<p><a href=\"https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-3.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--lDR98Pu7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-3-1000.png\" alt=\"Parsing CSS and building the CSSOM in a web browser\"></a></p>\n<h2 id=\"4---execute-js\"><a href=\"#4---execute-js\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4 - Execute JS</h2>\n<p>Các trình duyệt khác nhau, quá trình parse-compile-execute sẽ khác nhau, cũng cần nhớ thêm việc parse JS rất tốn kém tài nguyên của máy.</p>\n<p>Ngay sau khi <strong>JS đã load xong</strong> và <strong>DOM đã parse xong</strong>, sự kiện <code class=\"language-inline-text\">document.DOMContentLoaded</code> sẽ được <em>emit</em></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Sau khi các async JS, image load xong, sự kiện <code class=\"language-inline-text\">window.load</code> sẽ được emit</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'load'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-4.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fu8vnHfk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-4-1000.png\" alt=\"Timeline of executing JavaScript in a web browser\"></a></p>\n<h2 id=\"5---merge-dom-và-cssom-để-tạo-render-tree\"><a href=\"#5---merge-dom-v%C3%A0-cssom-%C4%91%E1%BB%83-t%E1%BA%A1o-render-tree\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5 - Merge DOM và CSSOM để tạo render tree</h2>\n<p>Hợp thể giữa DOM và CSSOM sẽ cho ra <strong>render tree</strong>, là toàn bộ những gì sẽ hiển thị trên trình duyệt</p>\n<p><a href=\"https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-5.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ay06Rl9_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-5-1000.png\" alt=\"Merging the DOM and CSSOM to create a render tree in a web browser\"></a></p>\n<h2 id=\"6---calculate-layout-và-paint\"><a href=\"#6---calculate-layout-v%C3%A0-paint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6 - Calculate layout và paint</h2>\n<p>Sau khi đã nhận được <strong>render tree</strong>, trình duyệt đã có đủ thông tin để tính toán những phần tử nào, đặt ở đâu, kích thước ra làm sao, qua trình đó gọi là calculate layout, kết thúc quá trình tính toán này, trình duyệt sẽ bắt đầu quá trình <strong>paint</strong>, là những gì user sẽ thấy trên trình duyệt, đây cũng là bước cuối cùng.</p>\n<p><a href=\"https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-6.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--MBpASwvG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.jstar.mx/images/blog/how-a-browser-renders-a-web-page/step-6-1000.png\" alt=\"Calculating the layout and paint of a web page in a browser\"></a></p>\n<p><a href=\"https://dev.to/jstarmx/how-the-browser-renders-a-web-page-1ahc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a></p>\n","cover_image":"","related":[{"id":"c6dd1dcea33d18690bfaaaf12d8c25a1","path":"/2019-01-09-tong-ket-mot-nam-2018-trong-the-gioi-front-end/","title":"Tổng kết một năm của thế giới FrontEnd","desc":"Thế giới lập trình Frontend nhiều biến chuyển, nhanh chóng mặt, chúng ta cùng điểm lại những tin tức, sự kiện, xu hướng nổi bật nhất trong năm 2018 vừa qua"},{"id":"8a1551a47737f4d1cf9dc50fa514c3e5","path":"/2021-05-31-huong-dan-viet-boolean/","title":"Quản lý state: nhận định boolean tốt và không tốt","desc":""},{"id":"dba8e794322e8f230275ddcba5d851e2","path":"/2018-11-06-react-native-lap-team-nhu-the-nao/","title":"Chia sẻ của lead team React Native trong quá trình lập team React Native","desc":"Bài viết sẽ phù hợp với founder của một startup, hoặc CTO. Bài viết này là chia sẻ của một team lead đang làm React Native, khía cạnh kỹ thuật cũng như cách tổ chức một team."},{"id":"94e625a2dcba98d9075204ed0f50c1d9","path":"/2019-07-13-nguyen-tac-moi-lap-trinh-vien-can-biet/","title":"10 nguyên lý lập trình nền tảng mà lập trình viên nào cũng cần biết","desc":"Nhớ thời đại học quá nên ôn lại kiến thức vở lòng mấy bạn ơi"}]}},"context":{}}