{"hash":"f369d0891f41e5bd2c583b3c06d1d5fffc1c6b45","data":{"post":{"title":"Vấn đề khi dùng array.forEach với async/await","path":"/2019-04-18-huong-dan-async-await-loi-tren-vong-lap-array/","slug":"/2019-04-18-huong-dan-async-await-loi-tren-vong-lap-array","date":"2019-04-18","timeToRead":2,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"}],"desc":"Khi chúng ta sử dụng async/await bên trong vòng lặp array.forEach không cho kết quả đúng như mong muốn và cách giải quyết","content":"<blockquote>\n<p><code class=\"language-inline-text\">async</code>/<code class=\"language-inline-text\">await</code> không hoạt động như chúng ta nghĩ, bên trong vòng lặp <code class=\"language-inline-text\">Array.prototype.forEach</code></p>\n</blockquote>\n<p>Ví dụ để thấy kết quả nếu dùng bên trong <code class=\"language-inline-text\">forEach</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> urls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'https://jsonplaceholder.typicode.com/todos/1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'https://jsonplaceholder.typicode.com/todos/2'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'https://jsonplaceholder.typicode.com/todos/3'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> urls<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> idx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">const</span> todo <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Received Todo </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>idx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Finished!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">getTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Kết quả nhận được không phải theo thứ tự 1,2,3, mà là một <em>thứ tự không có thứ tự</em></p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">Finished!\nReceived Todo <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ··· <span class=\"token punctuation\">}</span>\nReceived Todo <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ··· <span class=\"token punctuation\">}</span>\nReceived Todo <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> Response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ··· <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Vấn đề 1: đoạn <em>Finished!</em> được log ra trước, mặc dù chúng ta đã đặt <code class=\"language-inline-text\">await</code> trước <code class=\"language-inline-text\">urls.forEach</code>. Chúng ta ko ép nó <code class=\"language-inline-text\">await</code> cả vòng lặp <code class=\"language-inline-text\">forEach</code> được</li>\n<li>Vấn đề 2: mỗi lần chạy <code class=\"language-inline-text\">fetch</code>, nó cũng ko <code class=\"language-inline-text\">await</code> cho tới khi xong mới chạy tiếp thằng thứ 2, vòng lặp sẽ vẫn chạy bình thường như ko hề có <code class=\"language-inline-text\">await</code> </li>\n</ul>\n<blockquote>\n<p>Tóm lại, ko dùng <code class=\"language-inline-text\">forEach</code> chung với <code class=\"language-inline-text\">async</code>/<code class=\"language-inline-text\">await</code></p>\n</blockquote>\n<p>Để giải quyết vấn đề với <em>Finished!</em>, dùng <code class=\"language-inline-text\">Promise.all</code>, chúng ta có thể sử dụng <code class=\"language-inline-text\">Promise.all</code> để <code class=\"language-inline-text\">await</code> toàn bộ request</p>\n<p>Sửa lại hàm <code class=\"language-inline-text\">getTodos</code> ở trên </p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> promises <span class=\"token operator\">=</span> urls<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> idx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Received Todo </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>idx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Finished!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Kết quả</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">Received Todo <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ··· <span class=\"token punctuation\">}</span>\nReceived Todo <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ··· <span class=\"token punctuation\">}</span>\nReceived Todo <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> Response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ··· <span class=\"token punctuation\">}</span>\nFinished!</code></pre></div>\n<p>Một điểm cần lưu ý là <code class=\"language-inline-text\">Promise.all</code> sẽ cho tất cả xuất phát cùng lúc, nó sẽ ko đợi thằng này xong tới thằng kia, trong hầu hết các trường hợp thì ko vấn đề, thực ra lại tối ưu hiệu năng. Nhưng khi chúng ta cần chạy theo một thứ tự nhất định, ko thể dùng <code class=\"language-inline-text\">Promise.all</code>. Đoạn code trên là đúng là <code class=\"language-inline-text\">Received Todo 1,2,3</code> theo đúng thứ tự, nhưng đó là do <strong>hên</strong>, không đúng trong mọi trường hợp</p>\n<p>Để giải quyết triệt để, chúng ta dùng <code class=\"language-inline-text\">for...of</code>, nó sẽ đợi thằng <code class=\"language-inline-text\">await</code> trước đó chạy xong trước khi chạy tiếp</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> urls<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> todo <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Received Todo </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>idx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Finished!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nếu chúng ta ko cần tới index, viết gọn hơn như thế này</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> url <span class=\"token keyword\">of</span> urls<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> ··· <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Kết quả</p>\n<div class=\"gridsome-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">Received Todo <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ··· <span class=\"token punctuation\">}</span>\nReceived Todo <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ··· <span class=\"token punctuation\">}</span>\nReceived Todo <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> Response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ··· <span class=\"token punctuation\">}</span>\nFinished!</code></pre></div>\n<p>Cái giá phải trả khi sử dụng <code class=\"language-inline-text\">for...of</code> là nó rất chậm, hiệu năng thấp nhất trong các vòng lặp của array.</p>\n<p>Bạn có thể sử dụng vòng lặp <code class=\"language-inline-text\">for</code> căn bản nhất để vừa đạt kết quả vừa đạt hiệu năng tốt nhất.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.com/dailyjs/the-pitfalls-of-async-await-in-array-loops-cf9cf713bfeb\">The Pitfalls of Async/Await in Array Loops\n</a></p>\n","cover_image":"","related":[{"id":"d63cff185db98b9e7840ee8d3f1c1191","path":"/2018-05-07-huong-dan-async-await-giai-thich-vi-du/","title":"Giải thích async/await của javascript","desc":"Hướng dẫn các bạn nắm vững async/await trong javascript, kèm ví dụ cụ thể"},{"id":"dc640bd2ebc8ca9fcd4abedd80d3eb53","path":"/2018-07-29-huong-dan-javascript-date-lam-viet-voi-javascript-date/","title":"Các vấn đề khi làm việc với ngày tháng trong javascript","desc":"Bỏ túi kỹ năng thiết yếu khi đụng đến xử lý ngày tháng"},{"id":"d18d52ab708e1b700e4bcc10ebd3d7cc","path":"/2020-04-05-hiem-nguy-rinh-rap-khi-dung-toan-tu-cong-chuoi/","title":"Hiểm nguy rình rập khi dùng toán tử + trong javascript","desc":"Một toán tử phình phường có thể làm chúng ta điêu đứng"},{"id":"1b2de7c708c340c3c39f2150b714a897","path":"/2019-12-24-4-ung-dung-cua-array-from/","title":"4 ứng dụng của Array.from","desc":"Vài ứng dụng nhỏ của hàm Array.from"}]}},"context":{}}