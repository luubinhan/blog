{"hash":"2a4106ecca1a0d3da8cd127d6742ebf19d0f0109","data":{"post":{"title":"IIFE trong javascript là cái gì vại","path":"/2019-09-20-gioi-thieu-iife-cua-javascript/","date":"2019-09-20","timeToRead":2,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"},{"id":"hoc-thuat","title":"hoc-thuat","path":"/tag/hoc-thuat/"}],"desc":"Giới thiệu về Íp-Phi trong javascript, tuy không còn dùng nhiều nữa, nhưng vẫn là một kiến thức tốt cần biết","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#khai-b%c3%a1o-function\">Khai báo function</a></li>\n<li><a href=\"#iife\">IIFE</a></li>\n<li><a href=\"#es6-module\">ES6 Module</a></li>\n</ul>\n<!-- /TOC -->\n<p>Một trong những pattern có tên rất <em>kiêu</em> trong javascript \"íp-phi\" - <strong>IIFE</strong></p>\n<p>Trước khi tìm hiểu nó là gì, tại sao chúng ta cần nó, ôn lại khái niệm function căn bản trong javascript</p>\n<h2 id=\"khai-báo-function\"><a href=\"#khai-b%C3%A1o-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Khai báo function</h2>\n<p>Một javascript developer đều biết cách khai báo chính quy này</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>“Hello world”<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sayHelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>1 cách khác, gọi là <strong>function expression</strong>, đặt biến và gán nó vào function</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHelloWorld</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sayHelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Các callback chúng ta viết điều là function expression kiểu này</p>\n<blockquote>\n<p>Function trong javascript có thể xem như những giá trị khác, có thể truyền vào như tham số cho function khác</p>\n</blockquote>\n<h2 id=\"iife\"><a href=\"#iife\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>IIFE</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">!</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello IIFE\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Nếu copy đoạn này dán vào console của trình duyệt, câu <code class=\"language-text\">alert</code> sẽ xuất hiện, nhưng nó sẽ không bao giờ có thể hiện lại lần nữa</p>\n<blockquote>\n<p>function này sau khi hoàn thành nhiệm vụ, nó đi luôn không quay lại</p>\n</blockquote>\n<p>Nếu bạn tinh ý, bạn sẽ thắc mắc tại sao lại có <code class=\"language-text\">!</code> phía trước function vậy?</p>\n<p>Khi javascript thấy keyword <strong>function</strong> nó sẽ xem khúc sau là phần khai báo cho function. Nhưng khi chúng ta thêm <strong>!</strong> phía trước, chúng ta đang ép javascript xem nó là một <strong>expression</strong>, nghĩa là phải trả về một giá trị</p>\n<p>Điều thú vị là ở chổ <code class=\"language-text\">{}()</code>, <strong>nó chạy function này luôn</strong></p>\n<blockquote>\n<p>Một function gọi luôn sau khi tạo, gọi xong thì hết gọi lại được gọi là IIFE</p>\n</blockquote>\n<p>Không nhất thiết phải dùng <code class=\"language-text\">!</code>, bạn có thể dùng <code class=\"language-text\">+</code>, <code class=\"language-text\">-</code>, <code class=\"language-text\">~</code>, <code class=\"language-text\">void</code> để ép nó về <em>expression</em></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">void</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> … <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Một cách khác nữa, cách này vẫn hay dùng nhất</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// hoặc</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Chúng ta vẫn sử dụng IIFE như một module trong javascript (trước đây), vì nó cho chúng ta đưa biến vào một <em>đặc khu kinh tế</em>, những thằng khác sẽ không truy cập được biến khai báo bên trong IIFE</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">initGame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// biến private</span>\n\t<span class=\"token keyword\">var</span> live\n\t<span class=\"token keyword\">var</span> weapon\n\n\t<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// function private</span>\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tlive <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\t\tweapon <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Tất nhiên nếu là module, thì phải có những thứ public để thằng khác gọi tới, muốn thằng nào public chúng ta return là được</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">initGame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// biến private</span>\n\t<span class=\"token keyword\">var</span> live\n<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// function private</span>\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tlive <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\tinit<span class=\"token operator\">:</span> init\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Nếu muốn truyền vào tham số cho IIFE </p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">IIFE</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token punctuation\">,</span> times</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> times<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"es6-module\"><a href=\"#es6-module\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ES6 Module</h2>\n<p>Khi ES6 ra đời, cách viết IIFE không còn được “thịnh hành” như trước</p>\n<p>Thí dụ, trước đây để biến private</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> scoped <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>scoped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span></code></pre>\n<p>Giờ có <code class=\"language-text\">let</code> và <code class=\"language-text\">const</code> đặt nó vào block là xem như private</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> scoped <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>scoped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span></code></pre>\n<p>Cách viết này gọn gàng, nhìn vào ai cũng hiểu, ko cần giải thích nhiều như IIFE</p>\n<p>Module được hiểu là <strong>từng file</strong> javascript, những gì không <code class=\"language-text\">export</code> là private hết</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// myModule.js</span>\n<span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>    \n\n<span class=\"token comment\">// logic.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> increment <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'myModule.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Bài viết đã tham khảo</p>\n<ul>\n<li>📜 <a href=\"https://medium.com/@vvkchandra/essential-javascript-mastering-immediately-invoked-function-expressions-67791338ddc6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mastering Immediately-Invoked Function Expressions ― Chandra Gundamaraju</a></li>\n<li>📜 <a href=\"https://hashnode.com/post/do-es6-modules-make-the-case-of-iifes-obsolete-civ96wet80scqgc538un20es0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Do ES6 Modules make the case of IIFEs obsolete?</a></li>\n</ul>\n","cover_image":"","related":[{"id":"9fb0c6362096788ba892dbc1ce48951b","path":"/2018-02-14-huong-dan-redux-la-gi-tai-sao-phai-dung/","title":"Redux là gì và tại sao phải dùng?","desc":"Nếu đã đụng tới React thì sớm muộn gì bạn cũng sẽ nghe đến Redux"},{"id":"d7b36cee9f03beb7e7cdabdbd9c22600","path":"/2018-05-25-huong-dan-viet-code-javascript-tot-hon-voi-webpack/","title":"Webpack là gì và tại sao ta phải xài nó","desc":"Bài này sẽ nói rõ tại sao Webpack là sự lựa chọn sáng suốt cho bundle javascript"},{"id":"100640c49411b1ebfd3f20a0be2cdb53","path":"/2019-10-18-7-cau-hoi-phong-van-lac-leo-voi-js/","title":"7 Câu hỏi phỏng vấn lắc léo với Javascript","desc":"Thử kiến thức javascript của bạn đã đủ cho cuộc phỏng vấn cam go sắp tới chưa"},{"id":"261b6ab3101f36044d757da3c9d8d2d0","path":"/2018-06-24-huong-dan-lam-viec-voi-console-trong-javascript/","title":"Làm việc với console trong javascript","desc":"Một web developer chân chính là người biết sử dụng console.log :D. Tuy nhiên cũng nên biết rằng console nó còn rất nhiều phương thức khác nữa"}]}},"context":{}}