{"hash":"2614a9f464f28805085bbbd764f6609c0dea9377","data":{"post":{"title":"Higher-Order function trong javascript","path":"/2017-11-09-higher-order-function-trong-javascript/","slug":"/2017-11-09-higher-order-function-trong-javascript","date":"2017-11-09","timeToRead":3,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"}],"desc":"Một trong những đặc thù của Javascript khiến nó rất phù hợp với function programming là cho phép viết function higher-order, kiểu function cho phép nhận một function khác như một argument hoặc trả về một function","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#callback-function\">Callback function</a></li>\n<li><a href=\"#function-nh%C6%B0-m%E1%BB%99t-gi%C3%A1-tr%E1%BB%8B-tr%E1%BA%A3-v%E1%BB%81\">Function như một giá trị trả về</a></li>\n</ul>\n<!-- /TOC -->\n<h1 id=\"callback-function\"><a href=\"#callback-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Callback function</h1>\n<p>Javascript xem một function như một dạng object, function có thể trở thành giá trị của một biến, có thể dùng như một đối số hoặc giá trị return như một object.</p>\n<p>Javscript là ngôn ngữ single-threaded, nghĩa là một lần nó chỉ chạy một tính toán tuần tự. Nếu đã từng viết javascript nhiều bạn sẽ thấy việc sử dụng <code class=\"language-inline-text\">callback</code> trong javascript rất nhiều, function A được truyền vào cho function B, sau khi thực hiện các đoạn code trong function B, nó sẽ gọi lại function A và chạy các đoạn code trong function A</p>\n<div class=\"gridsome-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clicker<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Click Here</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Hoac viet</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">proveIt</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> proveIt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Lưu ý là mình pass vào <code class=\"language-inline-text\">proveIt</code> chứ không phải <code class=\"language-inline-text\">proveIt()</code>, mình đang truyền vào proveIt như một <em>object</em> chứ nếu truyền <code class=\"language-inline-text\">proveIt()</code> là mình sẽ truyền vào kết quả xử lý của hàm <em>proveIt</em></p>\n<p>Với cái khả năng đơn giản như đang giỡn là truyền vào một cái inline function như vậy với một function được định danh đâu đó mở ra muôn vàng kiểu viết biến hóa. Chúng ta có thể xây dựng những function rất rất nhỏ để xử dụng ở nhiều nơi, nhiều chổ, nhiều project khác nhau nếu chúng ta áp dụng nguyên tác viết pure function ( nếu cùng một giá trị truyền vào, luôn luôn trả về cùng kết quả).</p>\n<h1 id=\"function-như-một-giá-trị-trả-về\"><a href=\"#function-nh%C6%B0-m%E1%BB%99t-gi%C3%A1-tr%E1%BB%8B-tr%E1%BA%A3-v%E1%BB%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Function như một giá trị trả về</h1>\n<p>Ví dụ ta có một hàm để thay thể chuỗi \"Millennials\" thành \"Snake People\"</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">snakify</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">millenials</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">ig</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Snake People\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">snakify</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The Millenials are always up to something.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// The Snake People are always up to something.</span></code></pre></div>\n<p>Rồi ta lại có thêm một hàm thay thể chuổi \"Baby Boomers\" thành \"Aging Hippies\"</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">hippify</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">baby boomers</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">ig</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Aging Hippies\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hippify</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The Baby Boomers just look the other way.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// The Aging Hippies just look the other way.</span></code></pre></div>\n<p>Chúng ta có viết lại 2 hàm này một cách thông minh và phức tạp hơn chút</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">attitude</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">original<span class=\"token punctuation\">,</span> replacement<span class=\"token punctuation\">,</span> source</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">source</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">,</span> replacement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> snakify <span class=\"token operator\">=</span> <span class=\"token function\">attitude</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">millenials</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">ig</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Snake People\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> hippify <span class=\"token operator\">=</span> <span class=\"token function\">attitude</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">baby boomers</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">ig</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Aging Hippies\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">snakify</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The Millenials are always up to something.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// The Snake People are always up to something.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hippify</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The Baby Boomers just look the other way.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// The Aging Hippies just look the other way.</span></code></pre></div>\n<p>Bằng việc khai báo 1 function mới (snakify, hippyfy) reference tới function <code class=\"language-inline-text\">attitude</code> chỉ đưa vào 2 tham số đầu tiên, cho phép function mới này nhận bất kỳ giá trị truyền vào nào trở thành tham số truyền vào thứ 3 của function <code class=\"language-inline-text\">attitude</code>.</p>\n<p>Javascript cho phép truyền vào một function số lượng argument ít hơn số lượng được khai báo, khi đó những argument ko được truyền vào thì xem như undefined. Thứ 2 nữa là function có thể nhận vào thêm argument sau khi nó được gọi bằng cách viết như trên, snakify trỏ đến attitude, khi gọi snakify thì argument truyền vào của snakify trở thành argument còn thiếu trong attitude</p>\n<p>Đọc thêm phần closures ở đây '<a href=\"https://luubinhan.github.io/blog/2017-09-25-10-khai-niem-javascript-can-biet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://luubinhan.github.io/blog/2017-09-25-10-khai-niem-javascript-can-biet</a>'</p>\n","cover_image":"","related":[{"id":"e1da35afe424b0fa665424514de0af1d","path":"/2018-12-19-tim-hieu-curring-function-trong-javascript/","title":"Tìm hiểu Currying function trong Javascript","desc":"Bài viết này chúng ta sẽ tìm hiểu về cái cà-ri này, nó chạy ra sao, hữu dụng thế nào."},{"id":"2357b01f4fedb762de94f08f22517a13","path":"/2018-03-02-huong-dan-gioi-thieu-higher-order-component-trong-react/","title":"Giới thiệu Higher-Order Component trong React","desc":"Higher-Order Component (HOC) là kỹ thuật mà các bạn lập trình viên Việt Nam rất thích khi nhắc đến React, riêng mình thì không"},{"id":"1c7b17cad2209ba0e4e9538f8e2a3fac","path":"/2020-01-19-viet-type-cho-hoc-voi-typescript/","title":"Viết React Higher-Order Component bằng TypeScript","desc":"Cuộc sống đưa đẩy bạn phải viết TypeScript, thì bài này sẽ giúp bạn chút ít khi viết type với HOC"},{"id":"f2e054fcf720c1bbfd96b1f9aaeb9983","path":"/2020-08-16-tim-hieu-functional-programming/","title":"Giới thiệu functional programming trong JavaScript","desc":"Functional programming là một topic rất chi quen thuộc trong cộng đồng JS, các bạn có biết tại sao mọi người lại hype với nó? Tại sao mọi người lại quay lưng với Object oriented"}]}},"context":{}}