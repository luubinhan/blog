{"hash":"6000b69201124b9452c41d38889aba5b11cf5e89","data":{"post":{"title":"Phân biệt debounce và throttle","path":"/2020-12-06-phan-biet-debounce-va-throtling/","date":"2020-12-06","timeToRead":2,"tags":[{"id":"hoc-thuat","title":"hoc-thuat","path":"/tag/hoc-thuat/"},{"id":"web","title":"web","path":"/tag/web/"},{"id":"javascript","title":"javascript","path":"/tag/javascript/"}],"desc":"Phân biệt 2 phương pháp xử lý khi cần nâng cao hiệu năng","content":"<h3 id=\"debounce\"><a href=\"#debounce\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">debounce</code></h3>\n<p>Được sử dụng để <strong>delay</strong> việc thực thi một hàm nào đó. Ví dụ khi user nhập vào ô search, chúng ta <strong>không thực thi ngay</strong> câu lệnh tìm kiếm <strong>mà đợi</strong> một khoảng thời gian sau khi user đã ngừng việc nhập.</p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2016/04/debounce.png\" alt=\"img\"></p>\n<p>Có thể hình dung cái thang máy, cửa chuẩn bị đóng, nếu có người đưa chân vào nó sẽ không chạy liền, mà cho người đó vào rồi mới chạy.</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Debouncing keystrokes Example\" src=\"https://codepen.io/dcorb/embed/mVGVOL?height=265&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dcorb/pen/mVGVOL'>Debouncing keystrokes Example</a> by Corbacho\n  (<a href='https://codepen.io/dcorb'>@dcorb</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<h3 id=\"throttle\"><a href=\"#throttle\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>throttle</h3>\n<p><strong>Trong khoản thời gian đã chỉ định, chỉ thực thi hàm 1 lần duy nhất</strong>, bỏ qua mọi lần gọi khác. Ví dụ như user click liên tục vào nút <strong>search</strong> để gọi API, chúng ta chỉ thực thì đúng lần đầu, các lần click tiếp theo chúng ta cho qua và không gọi API.</p>\n<p>Một ví dụ khác làm infinite-scroll, khi user đã load đến vị trí <strong>gần</strong> cuối trang, chúng ta sẽ đi lấy thêm dữ liệu, chúng không đợi đến khi user <strong>đã đến</strong> cuối trang. <code class=\"language-text\">debounce</code> sẽ không hữu ích vì nói chỉ cho thực thi khi user stop việc scroll. <code class=\"language-text\">throttle</code> sinh ra cho việc này.</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Infinite scrolling throttled\" src=\"https://codepen.io/dcorb/embed/eJLMxa?height=265&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dcorb/pen/eJLMxa'>Infinite scrolling throttled</a> by Corbacho\n  (<a href='https://codepen.io/dcorb'>@dcorb</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>Rất hữu dụng khi cần gắn các sự kiện vào DOM. Vì chúng ta có thể hạn chế bớt số lần thực thi không cần thiết.</p>\n<p>Ví dụ với sự kiện scroll, nếu chúng ta bắt <code class=\"language-text\">onScroll</code> để thực thi một hành động, số lần thực thi sẽ rất lớn. Đây là vấn đề vào năm 2011 của Twitter,  user khi scroll trên điện thoại sẽ chậm và tệ nhất là <em>memory leak</em> luôn.</p>\n<blockquote>\n<p>Nên sử dụng thư viện có sẵn nếu cần, như <code class=\"language-text\">lodash</code>, đừng tự viết lại.</p>\n</blockquote>\n<h3 id=\"requestanimationframe\"><a href=\"#requestanimationframe\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">requestAnimationFrame</code></h3>\n<p>Là một API của trình duyệt, tương tự như <code class=\"language-text\">_.throttle(doSomething, 16)</code></p>\n<p>Sinh ra để đáp ứng chạy cho thật mượt (đảm bảo 60fps).</p>\n<p>Khi sử dụng cần tự viết việc <em>start/cancel</em></p>\n<p>IE9 không hỗ trợ</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Scroll comparison requestAnimationFrame vs throttle\" src=\"https://codepen.io/dcorb/embed/pgOKKw?height=265&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dcorb/pen/pgOKKw'>Scroll comparison requestAnimationFrame vs throttle</a> by Corbacho\n  (<a href='https://codepen.io/dcorb'>@dcorb</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<h5 id=\"ghi-chú-từ-debouncing-and-throttling-explained-through-examples\"><a href=\"#ghi-ch%C3%BA-t%E1%BB%AB-debouncing-and-throttling-explained-through-examples\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ghi chú từ <a href=\"https://css-tricks.com/debouncing-throttling-explained-examples/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Debouncing and Throttling Explained Through Examples</a></h5>\n","cover_image":"","related":[{"id":"ab67ae8850336939a2af1f93578fa95c","path":"/2020-07-30-phan-biet-su-khac-nhau-giua-await-return-await/","title":"Phân biệt sự khác nhau giữa await-return-return await","desc":"Nắm rõ async không bao giờ là một kiến thức thừa."},{"id":"8905cbcbcbfca00a569175a000425311","path":"/2017-09-25-10-khai-niem-javascript-can-biet/","title":"7 khái niệm JavaScript cần biết","desc":"Một vài khái niệm căn bản trong javascript cần nắm nếu bạn là frontend developer"},{"id":"88961dd95c384a396295f4eaba6f7986","path":"/2016-11-07-wordpress-va-google-accelerated-mobile-pages-amp-tat-ca-nhung-gi-ban-can-biet/","title":"Wordpress và Google Accelerated Mobile Pages (AMP): Tất cả những gì bạn cần biết","desc":"Trong giới làm web ai cũng biết một điều Speed is King. Dân tình thích mua một gói hàng trên mạng và phải được giao ngay lập tức, ít nhất là trong 24g, chậm trễ vài ngày là thấy hông vui, thích post tấm hình lên facebook có triệu triệu lượt người like ngay lập tức."},{"id":"a3122abaeff5dd1ef038b80398ff52d3","path":"/2019-07-13-nguyen-tac-moi-lap-trinh-vien-can-biet/","title":"10 nguyên lý lập trình nền tảng mà lập trình viên nào cũng cần biết","desc":"Nhớ thời đại học quá nên ôn lại kiến thức vở lòng mấy bạn ơi"}]}},"context":{}}