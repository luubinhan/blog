{"hash":"e1532d0aebaf3bcf47bbf8a08cbde03cecbbc9cf","data":{"post":{"title":"Kiến thức căn bản REST API cho FE developer","path":"/2020-09-26-kien-thuc-rest-api-can-thiet-khi-di-phong-van/","slug":"2020-09-26-kien-thuc-rest-api-can-thiet-khi-di-phong-van","date":"2020-09-26","timeToRead":4,"tags":[{"id":"hoc-thuat","title":"hoc-thuat","path":"/tag/hoc-thuat/"}],"desc":"2020 REST API vẫn đang là chuẩn mực giao tiếp của API trên nền web (chiếm 69% so với các API khác), như vậy đã đủ thuyết phục các bạn nắm thật rõ kiến thức REST API chưa?","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#ph%C3%A2n-bi%E1%BB%87t-gi%E1%BB%AFa-api-v%C3%A0-web-service\">Phân biệt giữa API và Web Service</a></li>\n<li><a href=\"#ph%C3%A2n-bi%E1%BB%87t-gi%E1%BB%AFa-rest-v%C3%A0-restful\">Phân biệt giữa REST và RESTFUL</a></li>\n<li><a href=\"#nh%E1%BB%AFng-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-http-%C4%91%C6%B0%E1%BB%A3c-h%E1%BB%95-tr%E1%BB%A3-trong-rest\">Những phương thức HTTP được hổ trợ trong REST</a></li>\n<li><a href=\"#s%E1%BB%B1-kh%C3%A1c-nhau-gi%E1%BB%AFa-ajax-v%C3%A0-rest\">Sự khác nhau giữa AJAX và REST</a></li>\n<li><a href=\"#%C4%91i%E1%BB%83m-m%E1%BA%A5u-ch%E1%BB%91t-c%E1%BA%A7n-nh%E1%BB%9B-trong-rest\">Điểm mấu chốt cần nhớ trong REST</a></li>\n<li><a href=\"#%C4%91i%E1%BB%83m-kh%C3%A1c-nhau-gi%E1%BB%AFa-put-v%C3%A0-post\">Điểm khác nhau giữa <code class=\"language-inline-text\">PUT</code> và <code class=\"language-inline-text\">POST</code></a></li>\n<li><a href=\"#m%E1%BB%A5c-ti%C3%AAu-c%E1%BB%A7a-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-options-trong-restful-web-service\">Mục tiêu của phương thức OPTIONS trong RESTful web service</a></li>\n<li><a href=\"#limit-c%E1%BB%A7a-payload-trong-ph%C6%B0%E1%BB%9Bc-th%E1%BB%A9c-post\">Limit của payload trong phước thức POST</a></li>\n</ul>\n<!-- /TOC -->\n<p>Để cho dễ hiểu chúng ta đi qua một số thuật ngữ trước</p>\n<ul>\n<li><strong>Resource</strong> (tài nguyên) có thể hình dung nôm na nó là một <em>cái gì đó đó</em> ở phía server nắm dữ, có thể là một dữ liệu trong database, một file html, css, js, svg,...</li>\n<li><strong>Web Service</strong>: nhiều cách định nghĩa, có thể hiểu <em>bình dân</em>, nếu internet là một cái chợ, dữ liệu là những gì có thể buôn bán trao đổi, thì web service là những gì có thể đem ra chợ trao đổi buôn bán</li>\n<li><strong>URI</strong>: viết tắt của <em>Uniform Resource Identifier</em>, một một resource trong kiến trúc REST sẽ xác định bằng một và chỉ một URI. Theo định dạng như sau</li>\n</ul>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>protocol<span class=\"token operator\">></span>://<span class=\"token operator\">&lt;</span>service-name<span class=\"token operator\">></span>/<span class=\"token operator\">&lt;</span>ResourceType<span class=\"token operator\">></span>/<span class=\"token operator\">&lt;</span>ResourceID<span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"phân-biệt-giữa-api-và-web-service\"><a href=\"#ph%C3%A2n-bi%E1%BB%87t-gi%E1%BB%AFa-api-v%C3%A0-web-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phân biệt giữa API và Web Service</h2>\n<ul>\n<li>Tất cả web service đều là API, nhưng không phải tất cả API đều là web service</li>\n<li>Web service sử dụng 3 kiểu sau: SOAP, REST, XML-RPC, trong khi API có nhiều cách hơn</li>\n</ul>\n<h2 id=\"phân-biệt-giữa-rest-và-restful\"><a href=\"#ph%C3%A2n-bi%E1%BB%87t-gi%E1%BB%AFa-rest-v%C3%A0-restful\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Phân biệt giữa REST và RESTFUL</h2>\n<p>REST ám chỉ <strong>kiểu kiến trúc</strong> để xây dựng các ứng dụng có thể truy cập thông qua mạng của ông chú viettel, vnpt, fpt,...</p>\n<p>REST chỉ là <em>một trong nhiều kiểu kiến trúc</em> trên nền web, ngoài ra còn có <a href=\"https://en.wikipedia.org/wiki/SOAP\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SOAP</a>, và một số kiểu khác.</p>\n<p><em>RESTful</em> ám chỉ một <strong>web service</strong> hiện thực cái kiến trúc REST</p>\n<h2 id=\"những-phương-thức-http-được-hổ-trợ-trong-rest\"><a href=\"#nh%E1%BB%AFng-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-http-%C4%91%C6%B0%E1%BB%A3c-h%E1%BB%95-tr%E1%BB%A3-trong-rest\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Những phương thức HTTP được hổ trợ trong REST</h2>\n<ul>\n<li><code class=\"language-inline-text\">GET</code>: dùng để yêu cầu một resource qua URL. Không nên chứa <code class=\"language-inline-text\">body</code>, có thể được cache phía client hoặc server</li>\n<li><code class=\"language-inline-text\">POST</code>: gửi thông tin lên một <em>service</em> nào đấy để xử lý, thường trả về một resource mới hoặc resource đã bị thay đổi</li>\n<li><code class=\"language-inline-text\">PUT</code>: cập nhập resource tại một URL</li>\n<li><code class=\"language-inline-text\">DELETE</code>: xóa resource tại một URL</li>\n<li><code class=\"language-inline-text\">OPTIONS</code>: Xác định hổ trợ cái gì</li>\n<li><code class=\"language-inline-text\">HEAD</code>: trả về các thông tin meta</li>\n</ul>\n<h2 id=\"sự-khác-nhau-giữa-ajax-và-rest\"><a href=\"#s%E1%BB%B1-kh%C3%A1c-nhau-gi%E1%BB%AFa-ajax-v%C3%A0-rest\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sự khác nhau giữa AJAX và REST</h2>\n<table>\n<thead>\n<tr>\n<th>AJAX</th>\n<th>REST</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Gửi một object <code class=\"language-inline-text\">XMLHttpRequest</code> lên server. JS sẽ nhận lấy kết quả trả về và làm gì đó thật <em>vi diệu</em> trên trang hiện tại</td>\n<td>Bao gồm nhiều thứ hơn: cấu trúc URL, pattern cho request/response xung quanh việc truy xuất đến các resource</td>\n</tr>\n<tr>\n<td>Ám chỉ một công nghệ để cập nhập UI mà không cần reload thần thánh</td>\n<td>Kiến trúc phần mềm và phương pháp để user có thể có được dữ liệu từ phía server</td>\n</tr>\n<tr>\n<td>Loại bỏ tương tác giữa người sử dụng và server</td>\n<td>Yêu cầu tương tác giữa người sử dụng và server</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"điểm-mấu-chốt-cần-nhớ-trong-rest\"><a href=\"#%C4%91i%E1%BB%83m-m%E1%BA%A5u-ch%E1%BB%91t-c%E1%BA%A7n-nh%E1%BB%9B-trong-rest\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Điểm mấu chốt cần nhớ trong REST</h2>\n<p><strong>Stateless</strong>: nghĩa là server không quản lý state và session data</p>\n<h2 id=\"điểm-khác-nhau-giữa-put-và-post\"><a href=\"#%C4%91i%E1%BB%83m-kh%C3%A1c-nhau-gi%E1%BB%AFa-put-v%C3%A0-post\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Điểm khác nhau giữa <code class=\"language-inline-text\">PUT</code> và <code class=\"language-inline-text\">POST</code></h2>\n<ul>\n<li><code class=\"language-inline-text\">PUT</code> dùng để <strong>xử lý</strong> một resource tại một URI cụ thể <strong>đã tồn tại trước đó</strong>, nếu chưa có tạo mới, đã có thì ghi đè. Ko phụ thuộc số lần gửi, số lượng resource sẽ không đổi sau khi gọi <code class=\"language-inline-text\">PUT</code></li>\n<li><code class=\"language-inline-text\">POST</code> <strong>gửi dữ liệu</strong> đến một URI, resource tại URI đó sẽ xử lý dữ liệu được gởi. Việc gửi lên càng nhiều, đồng nghĩa với việc số lượng resource phía server cũng tăng theo</li>\n</ul>\n<h2 id=\"mục-tiêu-của-phương-thức-options-trong-restful-web-service\"><a href=\"#m%E1%BB%A5c-ti%C3%AAu-c%E1%BB%A7a-ph%C6%B0%C6%A1ng-th%E1%BB%A9c-options-trong-restful-web-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mục tiêu của phương thức OPTIONS trong RESTful web service</h2>\n<p>Phương thức này dùng để liệt kê tất cả các thao tác mà web service hổ trợ. Tạo một request readonly đến server</p>\n<h2 id=\"limit-của-payload-trong-phước-thức-post\"><a href=\"#limit-c%E1%BB%A7a-payload-trong-ph%C6%B0%E1%BB%9Bc-th%E1%BB%A9c-post\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Limit của payload trong phước thức POST</h2>\n<p>Nếu <GET> gửi dữ liệu thông qua URL, nó ko được vượt quá chiều dài tối đa cho phép của URL. <POST> lại không có limit, có thể gửi lên bao nhiều tùy thích, trong thực tế sử dụng thì không nên gửi payload quá lớn, vì sẽ tốn rất nhiều thời gian xử lý.</p>\n","cover_image":"","related":[{"id":"233d36151f6c8b280a55db93e0efc504","path":"/2018-09-30-huong-dan-tro-thanh-web-moblie-specialist/","title":"Bộ kiến thức của google để được gọi là chuẩn Web Mobile Developer","desc":"Mình bắt đầu một series mới, đây là bài đầu tiên tổng hợp tất cả những chủ đề sẽ điểm qua trong series này, nắm hết các kiến thức này, các bạn có thể tự tin lấy chứng chỉ Web Mobile Specialist của Google"},{"id":"d2d147f1a0fd86008dd17691560b1faf","path":"/2016-11-18-phan-4-es6-can-ban-rest-parameters-va-spread-operator/","title":"Hồi 4: ES6 căn bản - Rest Parameters và Spread Operator","desc":"Hồi 4 trong series ES6 căn bản, nói về Rest Parameters và Spread Operator"},{"id":"cd6def8137d175d019b3384868b6de2c","path":"/2016-11-21-phan-7-es6-can-ban-classes/","title":"Hồi 7: ES6 căn bản - Classes","desc":"Hồi 7 trong series ES6 căn bản, Javascript vốn là ngôn ngữ prototype, class không phải là cái gì đó mới mẻ trong javascript"},{"id":"8a7dc0297b8395a17f0a5a9eaf41fc77","path":"/2019-05-14-huong-dan-handle-event-trong-javascript-cho-nguoi-moi/","title":"Hướng dẫn handle event listener căn bản cho các bạn mới bắt đầu với javascript","desc":"Căn bản nhưng cần thiết"}]}},"context":{}}