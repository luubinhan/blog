{"hash":"b9b11ed0eef2e60f7237ef3758917749cdab929d","data":{"post":{"title":"Prototype của object","path":"/2021-08-10-javascript-prototype-object/","slug":"/2021-08-10-javascript-prototype-object","date":"2021-08-10","timeToRead":3,"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"},{"id":"hoc-thuat","title":"hoc-thuat","path":"/tag/hoc-thuat/"},{"id":"medium","title":"medium","path":"/tag/medium/"}],"desc":"","content":"<p>Khi chúng ta <code class=\"language-inline-text\">console.log</code> một object của JS, sẽ thấy một property ẩn đặc biệt <code class=\"language-inline-text\">[[Prototype]]</code>, nó có thể là <code class=\"language-inline-text\">null</code> hoặc là trỏ đến một object khác</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">object a <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Prototype<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> prototype object b</code></pre></div>\n<p>Điều này có nghĩa là object a kế thừa từ object b, b có gì thì a sẽ có đó</p>\n<p>Chúng ta không thể truy xuất trực tiếp thông qua <code class=\"language-inline-text\">[[Prototype]]</code>, mà thông qua các phương pháp khác</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> animal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">eats</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Animal walk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> rabbit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">jumps</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"gridsome-highlight-code-line\">    <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> animal</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// hoặc khai báo bằng</span>\n<span class=\"gridsome-highlight-code-line\">rabbit<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> animal<span class=\"token punctuation\">;</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rabbit<span class=\"token punctuation\">.</span>eats<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => true;</span>\n\nrabbit<span class=\"token punctuation\">.</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-inline-text\">__proto__</code> != <code class=\"language-inline-text\">[[Prototype]]</code></p>\n</blockquote>\n<p>Về bản chất, <code class=\"language-inline-text\">__proto__</code> không phải là property <code class=\"language-inline-text\">[[Prototype]]</code>, chính xác thì nó là getter/setter của <code class=\"language-inline-text\">[[Prototype]]</code></p>\n<p>Thời điểm hiện tại, không khuyến khích dùng <code class=\"language-inline-text\">__proto__</code>, thay vào đó dùng <code class=\"language-inline-text\">Object.getPrototypeOf/Object.setPrototypeOf</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">surname</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Smith\"</span><span class=\"token punctuation\">,</span>\n    \n    <span class=\"token keyword\">set</span> <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    \n    <span class=\"token keyword\">get</span> <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> admin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">isAdmin</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>admin<span class=\"token punctuation\">.</span>fullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => John Smith</span>\n\nadmin<span class=\"token punctuation\">.</span>fullName <span class=\"token operator\">=</span> <span class=\"token string\">\"Alice Cooper\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gridsome-highlight-code-line\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>admin<span class=\"token punctuation\">.</span>fullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token comment\">// => Alice Cooper</span>\n\n<span class=\"gridsome-highlight-code-line\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>fullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token comment\">// => John Smith</span></code></pre></div>\n<p>Khi dùng prototype, không trực tiếp thay đổi property ở object cha từ object con, việc này cần thông qua một hàm setter để đảm bảo dữ liệu sẽ độc lập trên từng object.</p>\n<p>Như ví dụ trên, <code class=\"language-inline-text\">this</code> lúc này đang trỏ đến object phía trước dấu <code class=\"language-inline-text\">.</code>, nên dữ liệu hoàn toàn độc lập, trong khi các phương thức thì share với nhau</p>\n<h2 id=\"vòng-lặp-forin\"><a href=\"#v%C3%B2ng-l%E1%BA%B7p-forin\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vòng lặp <code class=\"language-inline-text\">for...in</code></h2>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> animal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">eats</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> rabbit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">jumps</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> animal\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gridsome-highlight-code-line\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>rabbit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token comment\">// jumps</span>\n\n<span class=\"gridsome-highlight-code-line\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> prop <span class=\"token keyword\">in</span> rabbit<span class=\"token punctuation\">)</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token comment\">// jumps, then eats</span></code></pre></div>\n<p>Nếu không muốn chạy qua các <code class=\"language-inline-text\">property</code> kề thừa qua <code class=\"language-inline-text\">__prototype__</code>, sử dụng <code class=\"language-inline-text\">obj.hasOwnProperty(key)</code> để xác định 1 property của được kế thừa hay không</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> prop <span class=\"token keyword\">in</span> rabbit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gridsome-highlight-code-line\">  <span class=\"token keyword\">let</span> isOwn <span class=\"token operator\">=</span> rabbit<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOwn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Our: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prop<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Our: jumps</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Inherited: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prop<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Inherited: eats</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Một điều thú vị, nếu để ý chúng ta không hề khai báo <code class=\"language-inline-text\">rabbit.hasOwnProperty</code>, vậy nó từ đâu mà có? và nó cũng không xuất hiện bên trong vòng lặp <code class=\"language-inline-text\">for...in</code>?</p>\n<p>Đây là một property kế thừa từ <code class=\"language-inline-text\">Object</code> chúa, và nó đã được khai báo decriptor với giá trị <code class=\"language-inline-text\">enumerable: false</code></p>\n<p>Đọc lại bài <a href=\"https://luubinhan.github.io/blog/2021-08-07-huong-dan-khoa-object-khong-cho-thay-doi/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">decriptor</a></p>\n<h2 id=\"objectprototype\"><a href=\"#objectprototype\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Object.prototype</h2>\n<p>Xét qua ví dụ</p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> obj <span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => \"[object Object]\"</span></code></pre></div>\n<p>Bạn có bao giờ thắc mắc tại sao lại có kết quả <code class=\"language-inline-text\">[object Object]</code>? <code class=\"language-inline-text\">obj</code> là một object rỗng mà?</p>\n<p>Thật ra, <code class=\"language-inline-text\">obj = {}</code> sẽ tương đương với <code class=\"language-inline-text\">obj = new Object()</code>, tức là, chúng ta khởi tạo một object thông qua việc gọi một constructor function, và nó sẽ kế thừa tất cả property, phương thức từ <code class=\"language-inline-text\">Object</code>, như <code class=\"language-inline-text\">toString</code>, <code class=\"language-inline-text\">[[Prototype]]</code></p>\n<p>Khi gọi <code class=\"language-inline-text\">obj.toString()</code> có nghĩa là chúng ta đang gọi đến phương thức <code class=\"language-inline-text\">Object.prototype.toString</code></p>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => true</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">===</span> obj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => true</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => true</span></code></pre></div>\n<blockquote>\n<p>Tất cả những object khác như <code class=\"language-inline-text\">Array</code>, <code class=\"language-inline-text\">Date</code>, <code class=\"language-inline-text\">Function</code> đều kế thừa từ <code class=\"language-inline-text\">Object</code></p>\n</blockquote>\n<div class=\"gridsome-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> arr<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> arr<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span></code></pre></div>\n<p><img src=\"https://javascript.info/article/native-prototypes/console_dir_array.png\"></p>\n<h2 id=\"tóm-tắt\"><a href=\"#t%C3%B3m-t%E1%BA%AFt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tóm tắt</h2>\n<ul>\n<li>Mỗi object sẽ chứa một property đặc biệt <code class=\"language-inline-text\">[[Prototype]]</code>, giá trị là null, hoặc trỏ đến một object khác</li>\n<li>Sử dụng <code class=\"language-inline-text\">obj.__proto__</code> để truy cập</li>\n<li><code class=\"language-inline-text\">this</code> luôn trỏ đến obj hiện tại thay vì prototype object</li>\n<li><code class=\"language-inline-text\">for..in</code> sẽ chạy qua tất cả property chính chủ và property được kế thừa</li>\n<li>Tất cả những object build-in (như Array, Object, Date) đều lưu các phương thức bên trong property <code class=\"language-inline-text\">prototype</code> (Array.prototype, Object.prototype, Date.prototype)</li>\n</ul>\n<p>Javascript.info</p>\n","cover_image":"","related":[{"id":"c8bb2cd2441cc63f232742b8d834b418","path":"/2018-11-13-copy-mot-object-trong-javascript/","title":"Copy object trong javascript","desc":"Luận bàn các cách mà chúng ta copy một object trong javascript, shallow copy và deep copy"},{"id":"508e4ea1219f8cd4aae7ef78f79656f9","path":"/2018-10-24-giai-thich-prototype-trong-javascript/","title":"Javascript prototype chuyên sâu","desc":"Bài này chỉ phù hợp với các bạn đã có kiến thức trung bình khá javascript trở lên, mình không chỉ đơn giản giải thích cách xài mà còn sâu hơn, bạn sẽ nắm rất rất rõ prototype trong javascript thực chất là gì"},{"id":"1c333dc306f36fef7593804c408a1328","path":"/2018-12-07-giai-thich-su-dung-map-hay-object/","title":"Map và Object trong Javascript","desc":"Kẻ tám lạng người nữa cân"},{"id":"a69e8a733fdf12a74c6dfcf52d90e187","path":"/2021-08-07-huong-dan-khoa-object-khong-cho-thay-doi/","title":"Các cách lock một property hay object của JS","desc":""}]}},"context":{}}