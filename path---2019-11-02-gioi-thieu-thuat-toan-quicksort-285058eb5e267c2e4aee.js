webpackJsonp([35067890607962],{1598:function(n,s){n.exports={data:{markdownRemark:{html:'<h2 id="một-chút-lịch-sử"><a href="#m%E1%BB%99t-ch%C3%BAt-l%E1%BB%8Bch-s%E1%BB%AD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Một chút lịch sử</h2>\n<p>Thuật toán <em>chia để trị</em> phổ biến nhất mà tất cả anh em lập trình đều được học qua thời mài đích trường đại học. Được tạo ra bởi Tony Hoare năm 1959</p>\n<p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k1SblSX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.coderscat.com/wp-content/uploads/2019/10/2019_10_09_quick_sort.org_20191009_203646.png" alt="Thuật toán Quicksort"></p>\n<p>Trên là hình ông Tony Hoare trình làng thuật toán QuickSort năm 1960 tại Moscow.</p>\n<p>Để mô tả thuật toán này, nó bao gồm các bước chính như sau:</p>\n<ol>\n<li>Nếu chỉ còn một phần tử hoặc không còn phần tử nào để sort, nghĩa là <strong>KẾT THÚC</strong></li>\n<li>Mỗi lần gọi sort chúng ta chọn một phần tử làm <strong>CHỐT ĐỂ SO SÁNH</strong></li>\n<li>So sánh tất cả các phần tử còn lại với <strong>CHỐT ĐỂ SO SÁNH</strong>, nhỏ hơn đưa vào một <strong>nhóm nhỏ hơn</strong>, lớn hơn đưa qua <strong>nhóm lớn hơn</strong></li>\n<li>(Đệ quy) thực hiện đúng những bước đã làm với các phần tử thuộc 2 nhóm mới có</li>\n</ol>\n<p>Độ phức tạp của nó là O(NlogN), trường hợp xấu nhất là O(N2). Đại khái nó là một trong những phương pháp sort mảng hiệu quả nhất.</p>\n<p>Để hiểu độ phức tạp của thuật toán, các bạn <a href="http://vuilaptrinh.com/2019-10-28-gioi-thieu-ve-do-phuc-tap-cua-thuat-toan">đọc bài này</a></p>\n<h2 id="hiện-thực-bằng-javascript"><a href="#hi%E1%BB%87n-th%E1%BB%B1c-b%E1%BA%B1ng-javascript" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hiện thực bằng Javascript</h2>\n<p>Trong javascript đã có sẵn hàm <code class="language-text">sort</code> vậy tại sao chúng ta lại quan tâm tới thuật toán QuickSort?</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">let</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// [2, 3, 5, 6, 7, 9]</span></code></pre>\n      </div>\n<p>Hàm <code class="language-text">sort()</code> của javascript sẽ tùy thuộc vào engine trình duyệt, <strong>insertion sort</strong> cho Chrome và <strong>merge sort</strong> cho Firefox và Safari</p>\n<p>Nó <strong>không phù hợp khi phải sort số lượng dữ liệu lớn</strong>, hay là một mảng object, dạng <code class="language-text">[{order: 1}, {order: 4}, {order: 2}]</code></p>\n<p>Hiện thực cho mảng bình thường, phần mảng là object các bạn chỉ cần thay điều kiện so sánh</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">unsortedArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> smaller <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">let</span> larger <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>unsortedArray<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> unsortedArray<span class="token punctuation">;</span>\n    \n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> unsortedArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        <span class="token keyword">if</span> <span class="token punctuation">(</span>unsortedArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> unsortedArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n            smaller<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>unsortedArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n        <span class="token keyword">if</span> <span class="token punctuation">(</span>unsortedArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> unsortedArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> \n            larger<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>unsortedArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>smaller<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>unsortedArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>larger<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>',timeToRead:2,excerpt:"Một chút lịch sử Thuật toán  chia để trị  phổ biến nhất mà tất cả anh em lập trình đều được học qua thời mài đích trường đại học. Được tạo…",frontmatter:{title:"Thuật toán QuickSort",cover:"",date:"2019-11-02",category:null,tags:["hoc-thuat","javascript"],desc:"Một thuật toán rất phổ biến mà chúng ta phải nắm thật chắc và hình dung được cách hiện thực nó ngay khi được nhắc tới."},fields:{slug:"/2019-11-02-gioi-thieu-thuat-toan-quicksort"}}},pathContext:{slug:"/2019-11-02-gioi-thieu-thuat-toan-quicksort",prev:{frontmatter:{title:"Tại sao lại viết Super(props)",desc:"Bài cũ, dịch cũng lâu rồi, giờ mới đăng lên trang cá nhân của mình",type:"post",category:null,tags:["hoc-thuat","javascript","react"],date:"2019-11-10",cover:""},fields:{slug:"/2019-11-10-tai-sao-lai-viet-super-props"}},next:{frontmatter:{title:"10 kinh nghiệm khi làm việc với các dự án lớn viết bằng Vue.js",desc:"Đây là 10 kinh nghiệm được đúc kết trong lúc làm việc với các bộ source lớn. Vấn đề với tất cả các bộ source lớn là nó rất khó để bảo trì.",type:"post",category:null,tags:["kinh-nghiem","vuejs"],date:"2019-11-01",cover:""},fields:{slug:"/2019-11-01-muoi-kinh-nghiem-lam-viec-voi-du-an-vue-lon"}}}}}});
//# sourceMappingURL=path---2019-11-02-gioi-thieu-thuat-toan-quicksort-285058eb5e267c2e4aee.js.map