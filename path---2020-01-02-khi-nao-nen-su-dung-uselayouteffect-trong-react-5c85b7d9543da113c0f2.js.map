{"version":3,"sources":["webpack:///path---2020-01-02-khi-nao-nen-su-dung-uselayouteffect-trong-react-5c85b7d9543da113c0f2.js","webpack:///./.cache/json/2020-01-02-khi-nao-nen-su-dung-uselayouteffect-trong-react.json"],"names":["webpackJsonp","1613","module","exports","data","markdownRemark","html","timeToRead","excerpt","frontmatter","title","cover","date","category","tags","desc","fields","slug","pathContext","prev","next","type"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,mwRAA+sRC,WAAA,EAAAC,QAAA,8IAAAC,aAA6jBC,MAAA,wDAAAC,MAAA,GAAAC,KAAA,aAAAC,SAAA,KAAAC,MAAA,qBAAAC,KAAA,sHAAwQC,QAAWC,KAAA,iEAAuEC,aAAgBD,KAAA,8DAAAE,MAAA,EAAAC,MAA0FX,aAAeC,MAAA,mCAAAK,KAAA,iGAAAM,KAAA,OAAAR,SAAA,KAAAC,MAAA,6BAAAF,KAAA,aAAAD,MAAA,IAAqPK,QAAWC,KAAA","file":"path---2020-01-02-khi-nao-nen-su-dung-uselayouteffect-trong-react-5c85b7d9543da113c0f2.js","sourcesContent":["webpackJsonp([274817038734284],{\n\n/***/ 1613:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// thực hiện side effect</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token comment\\\">/* dọn rác */</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>khai báo các giá trị mà nó phụ thuộc<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">useLayoutEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// thực hiện side effect</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token comment\\\">/* dọn rác */</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>thực hiện side effect<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Nếu ko có khác nhau thì React team sẽ không tạo ra 2 thằng, hiển nhiên?. (Hầu như có thể dụng <code class=\\\"language-text\\\">useEffect</code> trong mọi tình huống)</p>\\n<p>Khác nhau là ở <strong>THỜI GIAN THỰC HIỆN</strong></p>\\n<p><code class=\\\"language-text\\\">useEffect</code> chạy <strong>bất tuần tự</strong> và đợi <strong>sau</strong> khi việc component đã xuất hiện trên màn hình (sau khi trình duyệt <em>paint</em>)</p>\\n<p>Quá trình cụ thế là thế này</p>\\n<ol>\\n<li>Component gọi đến <code class=\\\"language-text\\\">render</code></li>\\n<li>Màn hình cập nhập lại UI mới</li>\\n<li><strong>SAU ĐÓ</strong> chạy <code class=\\\"language-text\\\">useEffect</code></li>\\n</ol>\\n<p><code class=\\\"language-text\\\">useLayoutEffect</code>, ngược lại, chạy <strong>tuần tự</strong> sau khi render nhưng là <strong>trước</strong> khi UI cập nhập</p>\\n<p>Quá trình</p>\\n<ol>\\n<li>Component gọi đến <code class=\\\"language-text\\\">render</code></li>\\n<li><code class=\\\"language-text\\\">useLayoutEffect</code> được gọi, đợi chạy xong mới đi tiếp</li>\\n<li>Màn hình cập nhập lại UI mới</li>\\n</ol>\\n<p>Trong 99% các trường hợp, sử dụng <code class=\\\"language-text\\\">useEffect</code>  sẽ là cách tốt nhất, vì những effect của chúng ta sẽ cần đồng bộ với prop, state, không cần xảy ra <strong>NGAY LẬP TỨC</strong> và không ảnh hưởng đến kết quả cuối cùng của UI.</p>\\n<p>Ví dụ như fetch dữ liệu sẽ không cần có kết quả ngay lập tức, hay đặt để các event handler</p>\\n<p>Nếu thấy UI bị <code class=\\\"language-text\\\">flickering</code> (giống như xuất hiện sọc sọc trên màn hình tivi) khi cập nhập, nguyên nhân do nó đã render khi <em>vừa cos</em> state, sau đó lại re-render lại với state nhận được sau cùng. Đó là lúc bạn dùng <code class=\\\"language-text\\\">useLayoutEffect</code></p>\\n<p>Ví dụ nhé, bạn cho user click để thay đổi state <code class=\\\"language-text\\\">value</code>, nó sẽ re-render component, sau đó effect chạy, nó lại set giá trị <code class=\\\"language-text\\\">value</code> thành một con số ngẫu nhiên => lại re-render component.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  useState<span class=\\\"token punctuation\\\">,</span>\\n  useLayoutEffect\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">BlinkyRender</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">,</span> setValue<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">useLayoutEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">setValue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span> <span class=\\\"token operator\\\">+</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">random</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'render'</span><span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">setValue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n      value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>value<span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span> <span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">BlinkyRender</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">querySelector</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'#root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Với cách dùng <code class=\\\"language-text\\\">useLayoutEffect</code> chúng ta chỉ cập nhập UI đúng <strong>1</strong> lần, trong khi component gọi render <strong>2</strong> lần.</p>\\n<p><a target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\" href=\\\"https://daveceddia.com/useeffect-vs-uselayouteffect/\\\">📜 When to useLayoutEffect Instead of useEffect</a></p>\",\"timeToRead\":2,\"excerpt\":\"Nếu ko có khác nhau thì React team sẽ không tạo ra 2 thằng, hiển nhiên?. (Hầu như có thể dụng   trong mọi tình huống) Khác nhau là ở  THỜI…\",\"frontmatter\":{\"title\":\"Khi nào nên sử dụng useLayoutEffect thay vì useEffect\",\"cover\":\"\",\"date\":\"2020-01-02\",\"category\":null,\"tags\":[\"thu-thuat\",\"react\"],\"desc\":\"2 React Hook làm nhiệm vụ khá giống nhau là useEffect và useLayoutEffect bạn đã biết cách sử dụng thế nào cho đúng\"},\"fields\":{\"slug\":\"/2020-01-02-khi-nao-nen-su-dung-uselayouteffect-trong-react\"}}},\"pathContext\":{\"slug\":\"/2020-01-02-khi-nao-nen-su-dung-uselayouteffect-trong-react\",\"prev\":false,\"next\":{\"frontmatter\":{\"title\":\"Chỉ dẫn viết Redux sao cho chuẩn\",\"desc\":\"Đây không phải là quan điểm cá nhân, bài viết được dịch thuật từ tài liệu chính thức của Redux\",\"type\":\"post\",\"category\":null,\"tags\":[\"hoc-thuat\",\"react\",\"redux\"],\"date\":\"2020-01-01\",\"cover\":\"\"},\"fields\":{\"slug\":\"/2020-01-01-chi-dan-viet-redux-sao-cho-chuan\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2020-01-02-khi-nao-nen-su-dung-uselayouteffect-trong-react-5c85b7d9543da113c0f2.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// thực hiện side effect</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token comment\\\">/* dọn rác */</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>khai báo các giá trị mà nó phụ thuộc<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">useLayoutEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// thực hiện side effect</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token comment\\\">/* dọn rác */</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>thực hiện side effect<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Nếu ko có khác nhau thì React team sẽ không tạo ra 2 thằng, hiển nhiên?. (Hầu như có thể dụng <code class=\\\"language-text\\\">useEffect</code> trong mọi tình huống)</p>\\n<p>Khác nhau là ở <strong>THỜI GIAN THỰC HIỆN</strong></p>\\n<p><code class=\\\"language-text\\\">useEffect</code> chạy <strong>bất tuần tự</strong> và đợi <strong>sau</strong> khi việc component đã xuất hiện trên màn hình (sau khi trình duyệt <em>paint</em>)</p>\\n<p>Quá trình cụ thế là thế này</p>\\n<ol>\\n<li>Component gọi đến <code class=\\\"language-text\\\">render</code></li>\\n<li>Màn hình cập nhập lại UI mới</li>\\n<li><strong>SAU ĐÓ</strong> chạy <code class=\\\"language-text\\\">useEffect</code></li>\\n</ol>\\n<p><code class=\\\"language-text\\\">useLayoutEffect</code>, ngược lại, chạy <strong>tuần tự</strong> sau khi render nhưng là <strong>trước</strong> khi UI cập nhập</p>\\n<p>Quá trình</p>\\n<ol>\\n<li>Component gọi đến <code class=\\\"language-text\\\">render</code></li>\\n<li><code class=\\\"language-text\\\">useLayoutEffect</code> được gọi, đợi chạy xong mới đi tiếp</li>\\n<li>Màn hình cập nhập lại UI mới</li>\\n</ol>\\n<p>Trong 99% các trường hợp, sử dụng <code class=\\\"language-text\\\">useEffect</code>  sẽ là cách tốt nhất, vì những effect của chúng ta sẽ cần đồng bộ với prop, state, không cần xảy ra <strong>NGAY LẬP TỨC</strong> và không ảnh hưởng đến kết quả cuối cùng của UI.</p>\\n<p>Ví dụ như fetch dữ liệu sẽ không cần có kết quả ngay lập tức, hay đặt để các event handler</p>\\n<p>Nếu thấy UI bị <code class=\\\"language-text\\\">flickering</code> (giống như xuất hiện sọc sọc trên màn hình tivi) khi cập nhập, nguyên nhân do nó đã render khi <em>vừa cos</em> state, sau đó lại re-render lại với state nhận được sau cùng. Đó là lúc bạn dùng <code class=\\\"language-text\\\">useLayoutEffect</code></p>\\n<p>Ví dụ nhé, bạn cho user click để thay đổi state <code class=\\\"language-text\\\">value</code>, nó sẽ re-render component, sau đó effect chạy, nó lại set giá trị <code class=\\\"language-text\\\">value</code> thành một con số ngẫu nhiên => lại re-render component.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  useState<span class=\\\"token punctuation\\\">,</span>\\n  useLayoutEffect\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> ReactDOM <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">BlinkyRender</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">,</span> setValue<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">useLayoutEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">setValue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span> <span class=\\\"token operator\\\">+</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">random</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'render'</span><span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">setValue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n      value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>value<span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span> <span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">BlinkyRender</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">querySelector</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'#root'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Với cách dùng <code class=\\\"language-text\\\">useLayoutEffect</code> chúng ta chỉ cập nhập UI đúng <strong>1</strong> lần, trong khi component gọi render <strong>2</strong> lần.</p>\\n<p><a target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\" href=\\\"https://daveceddia.com/useeffect-vs-uselayouteffect/\\\">📜 When to useLayoutEffect Instead of useEffect</a></p>\",\"timeToRead\":2,\"excerpt\":\"Nếu ko có khác nhau thì React team sẽ không tạo ra 2 thằng, hiển nhiên?. (Hầu như có thể dụng   trong mọi tình huống) Khác nhau là ở  THỜI…\",\"frontmatter\":{\"title\":\"Khi nào nên sử dụng useLayoutEffect thay vì useEffect\",\"cover\":\"\",\"date\":\"2020-01-02\",\"category\":null,\"tags\":[\"thu-thuat\",\"react\"],\"desc\":\"2 React Hook làm nhiệm vụ khá giống nhau là useEffect và useLayoutEffect bạn đã biết cách sử dụng thế nào cho đúng\"},\"fields\":{\"slug\":\"/2020-01-02-khi-nao-nen-su-dung-uselayouteffect-trong-react\"}}},\"pathContext\":{\"slug\":\"/2020-01-02-khi-nao-nen-su-dung-uselayouteffect-trong-react\",\"prev\":false,\"next\":{\"frontmatter\":{\"title\":\"Chỉ dẫn viết Redux sao cho chuẩn\",\"desc\":\"Đây không phải là quan điểm cá nhân, bài viết được dịch thuật từ tài liệu chính thức của Redux\",\"type\":\"post\",\"category\":null,\"tags\":[\"hoc-thuat\",\"react\",\"redux\"],\"date\":\"2020-01-01\",\"cover\":\"\"},\"fields\":{\"slug\":\"/2020-01-01-chi-dan-viet-redux-sao-cho-chuan\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2020-01-02-khi-nao-nen-su-dung-uselayouteffect-trong-react.json\n// module id = 1613\n// module chunks = 274817038734284"],"sourceRoot":""}