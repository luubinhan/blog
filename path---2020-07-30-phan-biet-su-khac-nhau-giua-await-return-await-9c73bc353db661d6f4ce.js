webpackJsonp([56209200799781],{

/***/ 1645:
/***/ (function(module, exports) {

	module.exports = {"data":{"markdownRemark":{"html":"<p>Khi viết một async function, có sự khác nhau giữa <code class=\"language-text\">await</code> và <code class=\"language-text\">return</code> và <code class=\"language-text\">return await</code>, các bạn nên biết để sử dụng cho đúng</p>\n<p>Chúng ta có một async function <code class=\"language-text\">waitAndMaybeReject</code></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">waitAndMaybeReject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// wait 1 giây</span>\n  <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> isHeads <span class=\"token operator\">=</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isHeads<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Thành công zòi\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Xui thôi!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Sau 1 giây, nó sẽ trả về một <code class=\"language-text\">Promise</code>, <em>hên hên</em> thì resolve cho giá trị <em>Thành công zòi</em>, xui xui thì cho giá trị <em>Xui thôi!</em>.</p>\n<p>Giờ khi chúng ta gọi hàm <code class=\"language-text\">waitAndMaybeReject()</code></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">waitAndMaybeReject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Oh No!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Khi viết như vậy, chúng ta sẽ luôn nhận được kết quả <strong>fulfill với giá trị undefined, không có waiting</strong></p>\n<p>Bởi vì chúng ta không có <strong>await</strong> trên kết quả trả về của <code class=\"language-text\">waitAndMaybeReject()</code>, nói chúng là chúng ta ko có phục thuộc gì vào việc gọi hàm <code class=\"language-text\">waitAndMaybeReject()</code>. Code như vậy là sai nghe các bạn.</p>\n<p>Rồi giờ chúng ta sẽ <strong>await</strong> trên kết quả của hàm <code class=\"language-text\">waitAndMaybeReject()</code></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">waitAndMaybeReject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Oh No!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Hàm này khi thực thi nó sẽ chạy như sau, <strong>đợi 1 giây</strong>, sau đó hoặc là trả về <strong>fulfill với undefined</strong>, hoặc <strong>fulfill với 'Oh No!'</strong></p>\n<p>Bởi vì chúng ta <em>chỉ await trên <code class=\"language-text\">waitAndMaybeReject()</code></em>, việc <em>xui xui</em> bị reject trong <code class=\"language-text\">waitAndMaybeReject</code> sẽ throw ra lỗi và được túm lấy trong hàm <code class=\"language-text\">test</code>. Và vì không làm gì hết khi <code class=\"language-text\">waitAndMaybeReject()</code> khi được resolve, nên chúng ta nhận về <em>undefined</em></p>\n<p>Rồi, giờ tới trường hợp <code class=\"language-text\">return</code></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">waitAndMaybeReject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Oh No!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Nó sẽ thực thi như sau, <strong>đợi một giây</strong>, sau đó hoặc là <strong>fulfill với giá trị Thành công zòi</strong> hoặc <strong>reject với giá trị Xui thôi!</strong></p>\n<p>Với việc <code class=\"language-text\">return waitAndMaybeReject</code>, chúng ta đã chuyển tiếp hết kết quả trả về của <code class=\"language-text\">waitAndMaybeReject</code>, đồng nghĩa với việc <code class=\"language-text\">catch</code> bên trong hàm <code class=\"language-text\">test</code> chả bao giờ chạy tới.</p>\n<p><code class=\"language-text\">return await</code> thì sao?</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token function\">waitAndMaybeReject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Oh No!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Nó sẽ thực thi như sau, <strong>đợi sau một giây</strong> sau đó trả về <strong>fulfill với giá trị Thành công zòi</strong> hoặc <strong>fulfill với giá trị Oh No!</strong></p>\n<p>Vì chúng ta <code class=\"language-text\">await</code> trên kết quả cả <code class=\"language-text\">waitAndMaybeReject()</code>, reject của hàm <code class=\"language-text\">waitAndMaybeReject()</code> sẽ đẩy về throw của hàm <code class=\"language-text\">test</code>, kết quả là <strong>Oh No!</strong>. Nếu <code class=\"language-text\">waitAndMaybeReject</code> được resolve, chúng ta return kết quả này, chính là <strong>Thành công zòi</strong></p>\n<p>Có thể viết như thế này cho dễ hình dung hơn</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fulfilledValue <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">waitAndMaybeReject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> fulfilledValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Oh No!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<blockquote>\n<p>Lưu ý cuối cùng: Nếu không dùng try/catch mà return await sẽ rất dư thừa</p>\n</blockquote>\n<p><a href=\"https://jakearchibald.com/2017/await-vs-return-vs-return-await/\">await vs return vs return await</a></p>","timeToRead":3,"excerpt":"Khi viết một async function, có sự khác nhau giữa   và   và  , các bạn nên biết để sử dụng cho đúng Chúng ta có một async function  Sau 1…","frontmatter":{"title":"Phân biệt sự khác nhau giữa await-return-return await","cover":"","date":"2020-07-30","category":null,"tags":["javascript","hoc-thuat"],"desc":"Nắm rõ async không bao giờ là một kiến thức thừa."},"fields":{"slug":"/2020-07-30-phan-biet-su-khac-nhau-giua-await-return-await"}}},"pathContext":{"slug":"/2020-07-30-phan-biet-su-khac-nhau-giua-await-return-await","prev":{"frontmatter":{"title":"5 sai làm thường thấy khi viết react component","desc":"Tổng hợp những lỗi thường thấy khi bạn viết react component, và làm sao để khắc phục","type":"post","category":null,"tags":["react"],"date":"2020-08-03","cover":""},"fields":{"slug":"/2020-08-03-5-loi-de-mac-phai-khi-viet-react-component"}},"next":{"frontmatter":{"title":"Sử dụng ellipsis text với flexbox","desc":"Câu chuyển cắt chuỗi khi quá dài bằng CSS, trong tình huống sau, cái tên file của bạn quá dài, nhưng bạn không muốn cắt ở cuối chuỗi, mà cắt ở giữa để vẫn thấy được file extension","type":"post","category":null,"tags":["css","thu-thuat"],"date":"2020-07-22","cover":""},"fields":{"slug":"/2020-07-22-su-dung-ellipsis-text-voi-flexbox"}}}}

/***/ })

});
//# sourceMappingURL=path---2020-07-30-phan-biet-su-khac-nhau-giua-await-return-await-9c73bc353db661d6f4ce.js.map