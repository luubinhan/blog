webpackJsonp([73088812510830],{1618:function(n,s){n.exports={data:{markdownRemark:{html:'<!-- TOC -->\n<ul>\n<li><a href="#enhancer">Enhancer</a></li>\n<li><a href="#injector">Injector</a></li>\n<li><a href="#enhance--inject">Enhance + Inject</a></li>\n</ul>\n<!-- /TOC -->\n<blockquote>\n<p>Từ React 16.8.0, chúng ta có React Hook, nó giải quyết toàn bộ những trường hợp chúng ta phải sử dụng higher-order component và giảm đáng kể độ phức tạp của việc set type so với HOC. Bạn sử dụng hook trong mọi tình huống có thể. Nếu gơi cảnh <em>ngặt nghèo</em>, anh lead của bạn <em>ko rõ lý do gì</em> bắt xài HOC với TypeScript. Thì bài viết này để giúp biết biết cách set type cho HOC.</p>\n</blockquote>\n<p>HOC trong React là <em>công cụ</em> để chúng ta sử dụng nhiều đoạn code giống nhau trên các component khác nhau. Tuy nhiên khi dùng chung với TypeScript thì <strong>triệu triệu</strong> developer gặp không ít khó khăn khi set type cho nó. Bao gồm luôn mình trong đó.</p>\n<p>Trong phạm vi bài viết này, chúng ta sẽ chi ra 2 loại HOC, 2 cách làm HOC phổ biến hiện nay, tạm gọi là <strong>enhancer</strong> và <strong>injector</strong></p>\n<ul>\n<li><strong>Enhancer</strong>: bọc một component, bổ sung thêm các hàm hoặc prop</li>\n<li><strong>Injector</strong>: <em>bơm/chích</em> thêm prop vào một component</li>\n</ul>\n<p>Để phân biệt rõ hơn, bạn xem tiếp ví dụ bên dưới.</p>\n<h2 id="enhancer"><a href="#enhancer" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Enhancer</h2>\n<p>Chúng ta bắt đầu với Enhancer vì nó dễ viết <code class="language-text">type</code> nhất. Ví dụ cơ bản nhất, bổ sung thêm prop <code class="language-text">loading</code> vào component.</p>\n<p>Không bao gồm <code class="language-text">type</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">withLoading</span> <span class="token operator">=</span> <span class="token parameter">Component</span> <span class="token operator">=></span>\n  <span class="token keyword">class</span> <span class="token class-name">WithLoading</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n      <span class="token keyword">return</span> loading <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LoadingSpinner</span></span> <span class="token punctuation">/></span></span> <span class="token punctuation">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>... và với <code class="language-text">type</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">WithLoadingProps</span> <span class="token punctuation">{</span>\n  loading<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> withLoading <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span> <span class="token attr-name">extends</span> <span class="token attr-name">object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>Component<span class="token punctuation">:</span> React<span class="token punctuation">.</span>ComponentType<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">class</span> <span class="token class-name">WithLoading</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token operator">&amp;</span> WithLoadingProps<span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n      <span class="token keyword">return</span> loading <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LoadingSpinner</span></span> <span class="token punctuation">/></span></span> <span class="token punctuation">:</span> <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">(</span>props <span class="token keyword">as</span> <span class="token constant">P</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Có vài thứ cần giải thích ở đoạn trên, từng bước một nhé</p>\n<div class="gatsby-highlight">\n      <pre class="language-tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">WithLoadingProps</span> <span class="token punctuation">{</span>\n  loading<span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Đây là <code class="language-text">interface</code> khai báo các prop và <code class="language-text">type</code> sẽ được thêm vào (<strong>enhance</strong>)</p>\n<div class="gatsby-highlight">\n      <pre class="language-tsx"><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span> <span class="token attr-name">extends</span> <span class="token attr-name">object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>Component<span class="token punctuation">:</span> React<span class="token punctuation">.</span>ComponentType<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span><span class="token punctuation">></span></span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Chúng ta đang sử dụng một <a href="https://www.typescriptlang.org/docs/handbook/generics.html"><code class="language-text">generic</code></a>, <code class="language-text">P</code> là ký tự dùng để đại diện cho toàn bộ prop của component khi truyền cho HOC. <code class="language-text">React.ComponentType&lt;P&gt;</code> là một type viết tắt cho cả hai <code class="language-text">React.FC&lt;P&gt;</code> và <code class="language-text">React.ClassComponent&lt;P&gt;</code>, nghĩa là một component truyền vào cho HOC này có thể là function cũng được, class component cũng được.</p>\n<div class="gatsby-highlight">\n      <pre class="language-tsx"><code class="language-tsx"><span class="token keyword">class</span> <span class="token class-name">WithLoading</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token operator">&amp;</span> WithLoadingProps<span class="token operator">></span></code></pre>\n      </div>\n<p>Đây là đoạn chúng ta component sẽ <code class="language-text">return</code> từ HOC, nó chỉ định là component này sẽ bao gồm toàn bộ prop từ component (<code class="language-text">P</code>) và prop của chính thằng HOC (<code class="language-text">WithLoadingProps</code>), nó được <em>cộng dồn</em> bằng toán tử <code class="language-text">&amp;</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span></code></pre>\n      </div>\n<blockquote>\n<p>Với phiên bản cũ của TypeScript, có thể chúng ta phải <em>ép kiểu</em> <code class="language-text">this.props</code> như thế này <code class="language-text">this.props as WithLoadingProps</code></p>\n</blockquote>\n<p>Cuối cùng chúng ta sử dụng prop <code class="language-text">loading</code> để đặt điều kiện hiển thị cái <em>Spinner</em></p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">return</span> loading <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LoadingSpinner</span></span> <span class="token punctuation">/></span></span> <span class="token punctuation">:</span> <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>props <span class="token keyword">as</span> <span class="token constant">P</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>\n      </div>\n<blockquote>\n<p>ép kiểu <code class="language-text">props as P</code> là bắt buộc từ TypeScript 3.2, đây là bug của TypeScript</p>\n</blockquote>\n<p>Với HOC <code class="language-text">withLoading</code> cũng có thể được viết để return một function component thay vì class</p>\n<div class="gatsby-highlight">\n      <pre class="language-tsx"><code class="language-tsx"><span class="token keyword">const</span> withLoading <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span> <span class="token attr-name">extends</span> <span class="token attr-name">object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>\n  Component<span class="token punctuation">:</span> React<span class="token punctuation">.</span>ComponentType<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token operator">&amp;</span> WithLoadingProps<span class="token operator">></span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>\n  loading<span class="token punctuation">,</span>\n  <span class="token operator">...</span>props\n<span class="token punctuation">}</span><span class="token punctuation">:</span> WithLoadingProps</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n  loading <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LoadingSpinner</span></span> <span class="token punctuation">/></span></span> <span class="token punctuation">:</span> <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">(</span>props <span class="token keyword">as</span> <span class="token constant">P</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Chúng ta gặp vấn đề tương tự khi sử dụng rest/spread object, chúng ta chỉ định kiểu return là <code class="language-text">React.FC&lt;P &amp; WithLoadingProps&gt;</code>, nhưng chỉ sử dụng <code class="language-text">WithLoadingProps</code> bên trong function component</p>\n<h2 id="injector"><a href="#injector" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Injector</h2>\n<p>Kiểu <em>injector</em> HOC sẽ hay gặp hơn, nhưng cũng khó set type hơn, bên cạnh việc <em>chích</em> thêm một số prop vào cho component, trong đa số các trường hợp nó còn xóa những prop đã <em>chích</em> vào khi nó bọc lại, như vậy những thằng từ bên ngoài không thể ghi đè lên. <code class="language-text">connect</code> của react-redux là một ví dụ cho injector HOC. Chúng ta không sử dụng nó, vì quá phức tạp, dùng một ví dụ đơn giản hơn, HOC chích thêm giá trị <code class="language-text">counter</code> và <code class="language-text">callback</code> để tăng giảm giá trị.</p>\n<div class="gatsby-highlight">\n      <pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> Subtract <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"utility-types"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">InjectedCounterProps</span> <span class="token punctuation">{</span>\n  value<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token function">onIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  <span class="token function">onDecrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">MakeCounterState</span> <span class="token punctuation">{</span>\n  value<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> makeCounter <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span> <span class="token attr-name">extends</span> <span class="token attr-name">InjectedCounterProps</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>\n  Component<span class="token punctuation">:</span> React<span class="token punctuation">.</span>ComponentType<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span> <span class="token operator">=></span>\n  <span class="token keyword">class</span> <span class="token class-name">MakeCounter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>\n    Subtract<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token punctuation">,</span> InjectedCounterProps<span class="token operator">></span><span class="token punctuation">,</span>\n    MakeCounterState\n  <span class="token operator">></span> <span class="token punctuation">{</span>\n    state<span class="token punctuation">:</span> MakeCounterState <span class="token operator">=</span> <span class="token punctuation">{</span>\n      value<span class="token punctuation">:</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">prevState</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        value<span class="token punctuation">:</span> prevState<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token function-variable function">decrement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">prevState</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        value<span class="token punctuation">:</span> prevState<span class="token punctuation">.</span>value <span class="token operator">-</span> <span class="token number">1</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>Component\n          <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token keyword">as</span> <span class="token constant">P</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n          value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span>\n          onIncrement<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>increment<span class="token punctuation">}</span>\n          onDecrement<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>decrement<span class="token punctuation">}</span>\n        <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Một vài điểm khác nhau</p>\n<div class="gatsby-highlight">\n      <pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">InjectedCounterProps</span> <span class="token punctuation">{</span>\n  value<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token function">onIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  <span class="token function">onDecrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Khai báo một interface để chỉ định những prop nào sẽ được <em>chích</em>, đồng thời export luôn để component nào dùng HOC có thể lấy xài.</p>\n<div class="gatsby-highlight">\n      <pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> makeCounter<span class="token punctuation">,</span> <span class="token punctuation">{</span> InjectedCounterProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./makeCounter"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">CounterProps</span> <span class="token keyword">extends</span> <span class="token class-name">InjectedCounterProps</span> <span class="token punctuation">{</span>\n  style<span class="token operator">?</span><span class="token punctuation">:</span> React<span class="token punctuation">.</span>CSSProperties<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Counter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">:</span> CounterProps</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>style<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onDecrement<span class="token punctuation">}</span></span><span class="token punctuation">></span></span> <span class="token operator">-</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">{</span>props<span class="token punctuation">.</span>value<span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onIncrement<span class="token punctuation">}</span></span><span class="token punctuation">></span></span> <span class="token operator">+</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">makeCounter</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-tsx"><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span> <span class="token attr-name">extends</span> <span class="token attr-name">InjectedCounterProps</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>Component<span class="token punctuation">:</span> React<span class="token punctuation">.</span>ComponentType<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span><span class="token punctuation">></span></span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Một lần nữa chúng ta dùng một <code class="language-text">generic</code>, nhưng lần này để đảm bảo component sử dụng HOC có bao gồm các prop đã được chích, nếu không thì báo lỗi.</p>\n<div class="gatsby-highlight">\n      <pre class="language-tsx"><code class="language-tsx"><span class="token keyword">class</span> <span class="token class-name">MakeCounter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>\n  Subtract<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token punctuation">,</span> InjectedCounterProps<span class="token operator">></span><span class="token punctuation">,</span>\n  MakeCounterState\n<span class="token operator">></span></code></pre>\n      </div>\n<p>Component được trả về từ HOC sẽ sử dụng <a href="https://github.com/piotrwitek/utility-types"><code class="language-text">Subtract</code></a>, nó sẽ tách hết những prop đã chích thêm, nghĩa là nếu ai đó set lại từ kết quả trả về từ HOC, nó sẽ lỗi</p>\n<p><img src="https://miro.medium.com/max/451/1*xTKe3DWJdC7nAVQnM4bvbg.png"></p>\n<h2 id="enhance--inject"><a href="#enhance--inject" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Enhance + Inject</h2>\n<p>Kết hợp cả 2 cách làm này lại, chúng ta sẽ có một component counter cho phép đưa giá trị minimum và maximum</p>\n<div class="gatsby-highlight">\n      <pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">InjectedCounterProps</span> <span class="token punctuation">{</span>\n  value<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token function">onIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  <span class="token function">onDecrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">MakeCounterProps</span> <span class="token punctuation">{</span>\n  minValue<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  maxValue<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">MakeCounterState</span> <span class="token punctuation">{</span>\n  value<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> makeCounter <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span> <span class="token attr-name">extends</span> <span class="token attr-name">InjectedCounterProps</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>\n  Component<span class="token punctuation">:</span> React<span class="token punctuation">.</span>ComponentType<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span> <span class="token operator">=></span>\n  <span class="token keyword">class</span> <span class="token class-name">MakeCounter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>\n    Subtract<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token punctuation">,</span> InjectedCounterProps<span class="token operator">></span> <span class="token operator">&amp;</span> MakeCounterProps<span class="token punctuation">,</span>\n    MakeCounterState\n  <span class="token operator">></span> <span class="token punctuation">{</span>\n    state<span class="token punctuation">:</span> MakeCounterState <span class="token operator">=</span> <span class="token punctuation">{</span>\n      value<span class="token punctuation">:</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">prevState</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        value<span class="token punctuation">:</span>\n          prevState<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>maxValue\n            <span class="token operator">?</span> prevState<span class="token punctuation">.</span>value\n            <span class="token punctuation">:</span> prevState<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token function-variable function">decrement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">prevState</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        value<span class="token punctuation">:</span>\n          prevState<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>minValue\n            <span class="token operator">?</span> prevState<span class="token punctuation">.</span>value\n            <span class="token punctuation">:</span> prevState<span class="token punctuation">.</span>value <span class="token operator">-</span> <span class="token number">1</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> minValue<span class="token punctuation">,</span> maxValue<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>Component\n          <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">(</span>props <span class="token keyword">as</span> <span class="token constant">P</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n          value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span>\n          onIncrement<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>increment<span class="token punctuation">}</span>\n          onDecrement<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>decrement<span class="token punctuation">}</span>\n        <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><code class="language-text">Subtract</code> được sử dụng để kết hợp cả những prop của chính component và prop của HOC</p>\n<div class="gatsby-highlight">\n      <pre class="language-tsx"><code class="language-tsx">Subtract<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token punctuation">,</span> InjectedCounterProps<span class="token operator">></span> <span class="token operator">&amp;</span> MakeCounterProps</code></pre>\n      </div>\n<p>Ngoài ra không còn gì thật sự khác nhau giữa 2 cách làm này cần phải nói thêm.</p>\n<p><a href="https://medium.com/@jrwebdev/react-higher-order-component-patterns-in-typescript-42278f7590fb">https://medium.com/@jrwebdev/react-higher-order-component-patterns-in-typescript-42278f7590fb</a></p>',
timeToRead:6,excerpt:"Enhancer Injector Enhance + Inject Từ React 16.8.0, chúng ta có React Hook, nó giải quyết toàn bộ những trường hợp chúng ta phải sử dụng…",frontmatter:{title:"Viết React Higher-Order Component bằng TypeScript",cover:"",date:"2020-01-19",category:null,tags:["hoc-thuat","react"],desc:"Cuộc sống đưa đẩy bạn phải viết TypeScript, thì bài này sẽ giúp bạn chút ít khi viết type với HOC"},fields:{slug:"/2020-01-19-viet-type-cho-hoc-voi-typescript"}}},pathContext:{slug:"/2020-01-19-viet-type-cho-hoc-voi-typescript",prev:{frontmatter:{title:"Những nguyên tắc chung mà Vue 3 đã áp dụng khi thiết kế",desc:"Nguyên tắc (principle) được áp dụng khi cần đưa ra một quyết định kỹ thuật trước vô vàng các lựa chọn. Nếu bạn đã biết được mọi thứ vận hành như thế nào, thì đã đến lúc bạn tiến một bước xa hơn, trả lời cho câu hỏi tại sao",type:"post",category:null,tags:["hoc-thuat","vuejs"],date:"2020-01-29",cover:""},fields:{slug:"/2020-01-29-nguyen-tac-thiet-ke-cua-vue-3"}},next:{frontmatter:{title:"Viết và Deploy một Lambda Function trên Netlify",desc:"",type:"post",category:null,tags:["netlify","thu-thuat"],date:"2020-01-10",cover:""},fields:{slug:"/2020-01-10-huong-dan-viet-lambda-function-voi-netlify"}}}}}});
//# sourceMappingURL=path---2020-01-19-viet-type-cho-hoc-voi-typescript-1964c4b68a9e6b24a509.js.map